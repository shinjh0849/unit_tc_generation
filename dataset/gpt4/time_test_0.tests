public void testFactory_FromDateFields() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6); [EOL]     cal.set(Calendar.MILLISECOND, 7); [EOL]     YearMonthDay expected = new YearMonthDay(1970, 2, 3); [EOL]     assertEquals(expected, YearMonthDay.fromDateFields(cal.getTime())); [EOL]     try { [EOL]         YearMonthDay.fromDateFields(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_FromDateFields() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6); [EOL]     cal.set(Calendar.MILLISECOND, 7); [EOL]     YearMonthDay expected = new YearMonthDay(1970, 2, 3); [EOL]     assertEquals(expected, YearMonthDay.fromDateFields(cal.getTime())); [EOL]     try { [EOL]         YearMonthDay.fromDateFields(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testConstructor_ObjectString3() throws Throwable { [EOL]     YearMonthDay test = new YearMonthDay("1972-12-03T10:20:30.040"); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1972, test.getYear()); [EOL]     assertEquals(12, test.getMonthOfYear()); [EOL]     assertEquals(3, test.getDayOfMonth()); [EOL] }
public void testConstructor_Object_Chronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     YearMonthDay test = new YearMonthDay(date, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 12, 9); [EOL]     test = new YearMonthDay(1972, 1, 31); [EOL]     copy = test.monthOfYear().setCopy(2); [EOL]     check(copy, 1972, 2, 29); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testMinusYears_int() { [EOL]     YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance()); [EOL]     YearMonthDay result = test.minusYears(1); [EOL]     YearMonthDay expected = new YearMonthDay(2001, 5, 3, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusYears(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusYears_int() { [EOL]     YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance()); [EOL]     YearMonthDay result = test.minusYears(1); [EOL]     YearMonthDay expected = new YearMonthDay(2001, 5, 3, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusYears(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusYears_int() { [EOL]     YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance()); [EOL]     YearMonthDay result = test.minusYears(1); [EOL]     YearMonthDay expected = new YearMonthDay(2001, 5, 3, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusYears(0); [EOL]     assertSame(test, result); [EOL] }
public void testToDateTimeAtMidnight_nullZone() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     DateTime test = base.toDateTimeAtMidnight((DateTimeZone) null); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(new DateTime(2005, 6, 9, 0, 0, 0, 0, COPTIC_LONDON), test); [EOL] }
public void testToDateTimeAtMidnight_nullZone() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     DateTime test = base.toDateTimeAtMidnight((DateTimeZone) null); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(new DateTime(2005, 6, 9, 0, 0, 0, 0, COPTIC_LONDON), test); [EOL] }
public void testToDateMidnight() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     DateMidnight test = base.toDateMidnight(); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(new DateMidnight(2005, 6, 9, COPTIC_LONDON), test); [EOL] }
public void testToDateMidnight() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     DateMidnight test = base.toDateMidnight(); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(new DateMidnight(2005, 6, 9, COPTIC_LONDON), test); [EOL] }
public void testToDateMidnight() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     DateMidnight test = base.toDateMidnight(); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(new DateMidnight(2005, 6, 9, COPTIC_LONDON), test); [EOL] }
public void testToDateMidnight() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     DateMidnight test = base.toDateMidnight(); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(new DateMidnight(2005, 6, 9, COPTIC_LONDON), test); [EOL] }
public void testToDateMidnight() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     DateMidnight test = base.toDateMidnight(); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(new DateMidnight(2005, 6, 9, COPTIC_LONDON), test); [EOL] }
public void testToDateMidnight() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     DateMidnight test = base.toDateMidnight(); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(new DateMidnight(2005, 6, 9, COPTIC_LONDON), test); [EOL] }
public void testToDateMidnight() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     DateMidnight test = base.toDateMidnight(); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(new DateMidnight(2005, 6, 9, COPTIC_LONDON), test); [EOL] }
public void testToDateMidnight() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     DateMidnight test = base.toDateMidnight(); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(new DateMidnight(2005, 6, 9, COPTIC_LONDON), test); [EOL] }
public void testToDateMidnight() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     DateMidnight test = base.toDateMidnight(); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(new DateMidnight(2005, 6, 9, COPTIC_LONDON), test); [EOL] }
public void testToDateMidnight() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     DateMidnight test = base.toDateMidnight(); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(new DateMidnight(2005, 6, 9, COPTIC_LONDON), test); [EOL] }
public void testToDateMidnight() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     DateMidnight test = base.toDateMidnight(); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(new DateMidnight(2005, 6, 9, COPTIC_LONDON), test); [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 12, 9); [EOL]     test = new YearMonthDay(1972, 1, 31); [EOL]     copy = test.monthOfYear().setCopy(2); [EOL]     check(copy, 1972, 2, 29); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 12, 9); [EOL]     test = new YearMonthDay(1972, 1, 31); [EOL]     copy = test.monthOfYear().setCopy(2); [EOL]     check(copy, 1972, 2, 29); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 12, 9); [EOL]     test = new YearMonthDay(1972, 1, 31); [EOL]     copy = test.monthOfYear().setCopy(2); [EOL]     check(copy, 1972, 2, 29); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 12, 9); [EOL]     test = new YearMonthDay(1972, 1, 31); [EOL]     copy = test.monthOfYear().setCopy(2); [EOL]     check(copy, 1972, 2, 29); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 12, 9); [EOL]     test = new YearMonthDay(1972, 1, 31); [EOL]     copy = test.monthOfYear().setCopy(2); [EOL]     check(copy, 1972, 2, 29); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 12, 9); [EOL]     test = new YearMonthDay(1972, 1, 31); [EOL]     copy = test.monthOfYear().setCopy(2); [EOL]     check(copy, 1972, 2, 29); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 12, 9); [EOL]     test = new YearMonthDay(1972, 1, 31); [EOL]     copy = test.monthOfYear().setCopy(2); [EOL]     check(copy, 1972, 2, 29); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 12, 9); [EOL]     test = new YearMonthDay(1972, 1, 31); [EOL]     copy = test.monthOfYear().setCopy(2); [EOL]     check(copy, 1972, 2, 29); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 12, 9); [EOL]     test = new YearMonthDay(1972, 1, 31); [EOL]     copy = test.monthOfYear().setCopy(2); [EOL]     check(copy, 1972, 2, 29); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 12, 9); [EOL]     test = new YearMonthDay(1972, 1, 31); [EOL]     copy = test.monthOfYear().setCopy(2); [EOL]     check(copy, 1972, 2, 29); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 12, 9); [EOL]     test = new YearMonthDay(1972, 1, 31); [EOL]     copy = test.monthOfYear().setCopy(2); [EOL]     check(copy, 1972, 2, 29); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 12, 9); [EOL]     test = new YearMonthDay(1972, 1, 31); [EOL]     copy = test.monthOfYear().setCopy(2); [EOL]     check(copy, 1972, 2, 29); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 12, 9); [EOL]     test = new YearMonthDay(1972, 1, 31); [EOL]     copy = test.monthOfYear().setCopy(2); [EOL]     check(copy, 1972, 2, 29); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 12, 9); [EOL]     test = new YearMonthDay(1972, 1, 31); [EOL]     copy = test.monthOfYear().setCopy(2); [EOL]     check(copy, 1972, 2, 29); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 12, 9); [EOL]     test = new YearMonthDay(1972, 1, 31); [EOL]     copy = test.monthOfYear().setCopy(2); [EOL]     check(copy, 1972, 2, 29); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 12, 9); [EOL]     test = new YearMonthDay(1972, 1, 31); [EOL]     copy = test.monthOfYear().setCopy(2); [EOL]     check(copy, 1972, 2, 29); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 12, 9); [EOL]     test = new YearMonthDay(1972, 1, 31); [EOL]     copy = test.monthOfYear().setCopy(2); [EOL]     check(copy, 1972, 2, 29); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 12, 9); [EOL]     test = new YearMonthDay(1972, 1, 31); [EOL]     copy = test.monthOfYear().setCopy(2); [EOL]     check(copy, 1972, 2, 29); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 12, 9); [EOL]     test = new YearMonthDay(1972, 1, 31); [EOL]     copy = test.monthOfYear().setCopy(2); [EOL]     check(copy, 1972, 2, 29); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 12, 9); [EOL]     test = new YearMonthDay(1972, 1, 31); [EOL]     copy = test.monthOfYear().setCopy(2); [EOL]     check(copy, 1972, 2, 29); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 12, 9); [EOL]     test = new YearMonthDay(1972, 1, 31); [EOL]     copy = test.monthOfYear().setCopy(2); [EOL]     check(copy, 1972, 2, 29); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 12, 9); [EOL]     test = new YearMonthDay(1972, 1, 31); [EOL]     copy = test.monthOfYear().setCopy(2); [EOL]     check(copy, 1972, 2, 29); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 12, 9); [EOL]     test = new YearMonthDay(1972, 1, 31); [EOL]     copy = test.monthOfYear().setCopy(2); [EOL]     check(copy, 1972, 2, 29); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetTextDay() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.dayOfMonth().setCopy("12"); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 6, 12); [EOL] }
public void testPropertySetTextDay() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.dayOfMonth().setCopy("12"); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 6, 12); [EOL] }
public void testPropertySetTextDay() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.dayOfMonth().setCopy("12"); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 6, 12); [EOL] }
public void testPropertySetTextDay() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.dayOfMonth().setCopy("12"); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 6, 12); [EOL] }
public void testPropertySetTextDay() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.dayOfMonth().setCopy("12"); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 6, 12); [EOL] }
public void testPropertySetTextDay() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.dayOfMonth().setCopy("12"); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 6, 12); [EOL] }
public void testPropertySetTextDay() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.dayOfMonth().setCopy("12"); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 6, 12); [EOL] }
public void testPropertySetTextDay() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.dayOfMonth().setCopy("12"); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 6, 12); [EOL] }
public void testPropertySetTextDay() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.dayOfMonth().setCopy("12"); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 6, 12); [EOL] }
public void testPropertySetTextDay() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.dayOfMonth().setCopy("12"); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 6, 12); [EOL] }
public void testPropertySetTextDay() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.dayOfMonth().setCopy("12"); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 6, 12); [EOL] }
public void testPropertySetTextDay() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.dayOfMonth().setCopy("12"); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 6, 12); [EOL] }
public void testGetChronology_Object_Zone() throws Exception { [EOL]     assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS)); [EOL]     assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault())); [EOL]     assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null)); [EOL] }
public void testGetChronology_Object_Zone() throws Exception { [EOL]     assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS)); [EOL]     assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault())); [EOL]     assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null)); [EOL] }
public void testGetPartialValues() throws Exception { [EOL]     TimeOfDay tod = new TimeOfDay(); [EOL]     int[] expected = new int[] { 1, 2, 3, 4 }; [EOL]     int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS)); [EOL]     assertEquals(true, Arrays.equals(expected, actual)); [EOL]     try { [EOL]         ReadablePartialConverter.INSTANCE.getPartialValues(tod, new YearMonthDay(2005, 6, 9), JULIAN); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         ReadablePartialConverter.INSTANCE.getPartialValues(tod, new MockTOD(), JULIAN); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGetPartialValues() throws Exception { [EOL]     TimeOfDay tod = new TimeOfDay(); [EOL]     int[] expected = new int[] { 1, 2, 3, 4 }; [EOL]     int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS)); [EOL]     assertEquals(true, Arrays.equals(expected, actual)); [EOL]     try { [EOL]         ReadablePartialConverter.INSTANCE.getPartialValues(tod, new YearMonthDay(2005, 6, 9), JULIAN); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         ReadablePartialConverter.INSTANCE.getPartialValues(tod, new MockTOD(), JULIAN); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGetInstantMillis_Object_Chronology() throws Exception { [EOL]     assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN)); [EOL]     assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null)); [EOL] }
public void testGetInstantMillis_Object_Chronology() throws Exception { [EOL]     assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN)); [EOL]     assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null)); [EOL] }
public void testToString() { [EOL]     assertEquals("Converter[java.lang.Long]", LongConverter.INSTANCE.toString()); [EOL] }
public void testPeriod() { [EOL]     Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     String str = StringConvert.INSTANCE.convertToString(test); [EOL]     assertEquals("P1Y2M3W4DT5H6M7.008S", str); [EOL]     assertEquals(test, StringConvert.INSTANCE.convertFromString(Period.class, str)); [EOL] }
public void testPeriod() { [EOL]     Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     String str = StringConvert.INSTANCE.convertToString(test); [EOL]     assertEquals("P1Y2M3W4DT5H6M7.008S", str); [EOL]     assertEquals(test, StringConvert.INSTANCE.convertFromString(Period.class, str)); [EOL] }
public void testPeriod() { [EOL]     Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     String str = StringConvert.INSTANCE.convertToString(test); [EOL]     assertEquals("P1Y2M3W4DT5H6M7.008S", str); [EOL]     assertEquals(test, StringConvert.INSTANCE.convertFromString(Period.class, str)); [EOL] }
public void testPeriod() { [EOL]     Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     String str = StringConvert.INSTANCE.convertToString(test); [EOL]     assertEquals("P1Y2M3W4DT5H6M7.008S", str); [EOL]     assertEquals(test, StringConvert.INSTANCE.convertFromString(Period.class, str)); [EOL] }
public void testPlusFields() { [EOL]     Period test; [EOL]     test = Period.years(1).plusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(1).plusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(1).plusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(1).plusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(1).plusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(1).plusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(1).plusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(1).plusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.plusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testPlusFields() { [EOL]     Period test; [EOL]     test = Period.years(1).plusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(1).plusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(1).plusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(1).plusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(1).plusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(1).plusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(1).plusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(1).plusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.plusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testPlusFields() { [EOL]     Period test; [EOL]     test = Period.years(1).plusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(1).plusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(1).plusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(1).plusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(1).plusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(1).plusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(1).plusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(1).plusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.plusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testPlusFields() { [EOL]     Period test; [EOL]     test = Period.years(1).plusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(1).plusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(1).plusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(1).plusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(1).plusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(1).plusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(1).plusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(1).plusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.plusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testPlusFields() { [EOL]     Period test; [EOL]     test = Period.years(1).plusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(1).plusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(1).plusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(1).plusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(1).plusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(1).plusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(1).plusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(1).plusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.plusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testPlusFields() { [EOL]     Period test; [EOL]     test = Period.years(1).plusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(1).plusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(1).plusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(1).plusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(1).plusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(1).plusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(1).plusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(1).plusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.plusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testPlusFields() { [EOL]     Period test; [EOL]     test = Period.years(1).plusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(1).plusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(1).plusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(1).plusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(1).plusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(1).plusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(1).plusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(1).plusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.plusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testPlusFields() { [EOL]     Period test; [EOL]     test = Period.years(1).plusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(1).plusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(1).plusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(1).plusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(1).plusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(1).plusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(1).plusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(1).plusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.plusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testPlusFields() { [EOL]     Period test; [EOL]     test = Period.years(1).plusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(1).plusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(1).plusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(1).plusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(1).plusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(1).plusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(1).plusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(1).plusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.plusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testPlusFields() { [EOL]     Period test; [EOL]     test = Period.years(1).plusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(1).plusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(1).plusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(1).plusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(1).plusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(1).plusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(1).plusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(1).plusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.plusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testPlusFields() { [EOL]     Period test; [EOL]     test = Period.years(1).plusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(1).plusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(1).plusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(1).plusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(1).plusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(1).plusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(1).plusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(1).plusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.plusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testPlusFields() { [EOL]     Period test; [EOL]     test = Period.years(1).plusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(1).plusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(1).plusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(1).plusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(1).plusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(1).plusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(1).plusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(1).plusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.plusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testPlusFields() { [EOL]     Period test; [EOL]     test = Period.years(1).plusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(1).plusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(1).plusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(1).plusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(1).plusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(1).plusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(1).plusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(1).plusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.plusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testPlusFields() { [EOL]     Period test; [EOL]     test = Period.years(1).plusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(1).plusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(1).plusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(1).plusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(1).plusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(1).plusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(1).plusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(1).plusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.plusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testPlusFields() { [EOL]     Period test; [EOL]     test = Period.years(1).plusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(1).plusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(1).plusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(1).plusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(1).plusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(1).plusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(1).plusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(1).plusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.plusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testPlusFields() { [EOL]     Period test; [EOL]     test = Period.years(1).plusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(1).plusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(1).plusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(1).plusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(1).plusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(1).plusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(1).plusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(1).plusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.plusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testPlusFields() { [EOL]     Period test; [EOL]     test = Period.years(1).plusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(1).plusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(1).plusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(1).plusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(1).plusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(1).plusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(1).plusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(1).plusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.plusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testPlusFields() { [EOL]     Period test; [EOL]     test = Period.years(1).plusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(1).plusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(1).plusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(1).plusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(1).plusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(1).plusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(1).plusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(1).plusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.plusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testPlusFields() { [EOL]     Period test; [EOL]     test = Period.years(1).plusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(1).plusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(1).plusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(1).plusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(1).plusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(1).plusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(1).plusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(1).plusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.plusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testPlusFields() { [EOL]     Period test; [EOL]     test = Period.years(1).plusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(1).plusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(1).plusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(1).plusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(1).plusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(1).plusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(1).plusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(1).plusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.plusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testPlusFields() { [EOL]     Period test; [EOL]     test = Period.years(1).plusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(1).plusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(1).plusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(1).plusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(1).plusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(1).plusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(1).plusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(1).plusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.plusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testPlusFields() { [EOL]     Period test; [EOL]     test = Period.years(1).plusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(1).plusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(1).plusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(1).plusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(1).plusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(1).plusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(1).plusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(1).plusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.plusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testFactoryFieldDifference2() throws Throwable { [EOL]     YearMonthDay ymd = new YearMonthDay(2005, 4, 9); [EOL]     try { [EOL]         Period.fieldDifference(ymd, (ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Period.fieldDifference((ReadablePartial) null, ymd); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testFactoryFieldDifference2() throws Throwable { [EOL]     YearMonthDay ymd = new YearMonthDay(2005, 4, 9); [EOL]     try { [EOL]         Period.fieldDifference(ymd, (ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Period.fieldDifference((ReadablePartial) null, ymd); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testFactoryFieldDifference2() throws Throwable { [EOL]     YearMonthDay ymd = new YearMonthDay(2005, 4, 9); [EOL]     try { [EOL]         Period.fieldDifference(ymd, (ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Period.fieldDifference((ReadablePartial) null, ymd); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testFactoryFieldDifference2() throws Throwable { [EOL]     YearMonthDay ymd = new YearMonthDay(2005, 4, 9); [EOL]     try { [EOL]         Period.fieldDifference(ymd, (ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Period.fieldDifference((ReadablePartial) null, ymd); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testFactoryFieldDifference2() throws Throwable { [EOL]     YearMonthDay ymd = new YearMonthDay(2005, 4, 9); [EOL]     try { [EOL]         Period.fieldDifference(ymd, (ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Period.fieldDifference((ReadablePartial) null, ymd); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testFactoryFieldDifference2() throws Throwable { [EOL]     YearMonthDay ymd = new YearMonthDay(2005, 4, 9); [EOL]     try { [EOL]         Period.fieldDifference(ymd, (ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Period.fieldDifference((ReadablePartial) null, ymd); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testParseCustom1() { [EOL]     PeriodFormatter formatter = new PeriodFormatterBuilder().printZeroAlways().appendHours().appendSuffix(":").minimumPrintedDigits(2).appendMinutes().toFormatter(); [EOL]     Period p; [EOL]     p = new Period(47, 55, 0, 0); [EOL]     assertEquals("47:55", formatter.print(p)); [EOL]     assertEquals(p, formatter.parsePeriod("47:55")); [EOL]     assertEquals(p, formatter.parsePeriod("047:055")); [EOL]     p = new Period(7, 5, 0, 0); [EOL]     assertEquals("7:05", formatter.print(p)); [EOL]     assertEquals(p, formatter.parsePeriod("7:05")); [EOL]     assertEquals(p, formatter.parsePeriod("7:5")); [EOL]     assertEquals(p, formatter.parsePeriod("07:05")); [EOL]     p = new Period(0, 5, 0, 0); [EOL]     assertEquals("0:05", formatter.print(p)); [EOL]     assertEquals(p, formatter.parsePeriod("0:05")); [EOL]     assertEquals(p, formatter.parsePeriod("0:5")); [EOL]     assertEquals(p, formatter.parsePeriod("00:005")); [EOL]     assertEquals(p, formatter.parsePeriod("0:005")); [EOL]     p = new Period(0, 0, 0, 0); [EOL]     assertEquals("0:00", formatter.print(p)); [EOL]     assertEquals(p, formatter.parsePeriod("0:00")); [EOL]     assertEquals(p, formatter.parsePeriod("0:0")); [EOL]     assertEquals(p, formatter.parsePeriod("00:00")); [EOL] }
public void testPlusFields() { [EOL]     Period test; [EOL]     test = Period.years(1).plusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(1).plusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(1).plusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(1).plusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(1).plusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(1).plusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(1).plusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(1).plusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.plusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testPlusFields() { [EOL]     Period test; [EOL]     test = Period.years(1).plusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(1).plusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(1).plusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(1).plusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(1).plusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(1).plusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(1).plusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(1).plusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.plusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testPlusFields() { [EOL]     Period test; [EOL]     test = Period.years(1).plusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(1).plusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(1).plusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(1).plusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(1).plusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(1).plusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(1).plusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(1).plusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.plusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testParseCustom1() { [EOL]     PeriodFormatter formatter = new PeriodFormatterBuilder().printZeroAlways().appendHours().appendSuffix(":").minimumPrintedDigits(2).appendMinutes().toFormatter(); [EOL]     Period p; [EOL]     p = new Period(47, 55, 0, 0); [EOL]     assertEquals("47:55", formatter.print(p)); [EOL]     assertEquals(p, formatter.parsePeriod("47:55")); [EOL]     assertEquals(p, formatter.parsePeriod("047:055")); [EOL]     p = new Period(7, 5, 0, 0); [EOL]     assertEquals("7:05", formatter.print(p)); [EOL]     assertEquals(p, formatter.parsePeriod("7:05")); [EOL]     assertEquals(p, formatter.parsePeriod("7:5")); [EOL]     assertEquals(p, formatter.parsePeriod("07:05")); [EOL]     p = new Period(0, 5, 0, 0); [EOL]     assertEquals("0:05", formatter.print(p)); [EOL]     assertEquals(p, formatter.parsePeriod("0:05")); [EOL]     assertEquals(p, formatter.parsePeriod("0:5")); [EOL]     assertEquals(p, formatter.parsePeriod("00:005")); [EOL]     assertEquals(p, formatter.parsePeriod("0:005")); [EOL]     p = new Period(0, 0, 0, 0); [EOL]     assertEquals("0:00", formatter.print(p)); [EOL]     assertEquals(p, formatter.parsePeriod("0:00")); [EOL]     assertEquals(p, formatter.parsePeriod("0:0")); [EOL]     assertEquals(p, formatter.parsePeriod("00:00")); [EOL] }
public void testParseCustom1() { [EOL]     PeriodFormatter formatter = new PeriodFormatterBuilder().printZeroAlways().appendHours().appendSuffix(":").minimumPrintedDigits(2).appendMinutes().toFormatter(); [EOL]     Period p; [EOL]     p = new Period(47, 55, 0, 0); [EOL]     assertEquals("47:55", formatter.print(p)); [EOL]     assertEquals(p, formatter.parsePeriod("47:55")); [EOL]     assertEquals(p, formatter.parsePeriod("047:055")); [EOL]     p = new Period(7, 5, 0, 0); [EOL]     assertEquals("7:05", formatter.print(p)); [EOL]     assertEquals(p, formatter.parsePeriod("7:05")); [EOL]     assertEquals(p, formatter.parsePeriod("7:5")); [EOL]     assertEquals(p, formatter.parsePeriod("07:05")); [EOL]     p = new Period(0, 5, 0, 0); [EOL]     assertEquals("0:05", formatter.print(p)); [EOL]     assertEquals(p, formatter.parsePeriod("0:05")); [EOL]     assertEquals(p, formatter.parsePeriod("0:5")); [EOL]     assertEquals(p, formatter.parsePeriod("00:005")); [EOL]     assertEquals(p, formatter.parsePeriod("0:005")); [EOL]     p = new Period(0, 0, 0, 0); [EOL]     assertEquals("0:00", formatter.print(p)); [EOL]     assertEquals(p, formatter.parsePeriod("0:00")); [EOL]     assertEquals(p, formatter.parsePeriod("0:0")); [EOL]     assertEquals(p, formatter.parsePeriod("00:00")); [EOL] }
public void testPlusFields() { [EOL]     Period test; [EOL]     test = Period.years(1).plusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(1).plusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(1).plusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(1).plusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(1).plusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(1).plusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(1).plusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(1).plusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.plusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testWithPeriodType1() { [EOL]     Period test = new Period(123L); [EOL]     Period result = test.withPeriodType(PeriodType.standard()); [EOL]     assertSame(test, result); [EOL] }
public void testWithPeriodType1() { [EOL]     Period test = new Period(123L); [EOL]     Period result = test.withPeriodType(PeriodType.standard()); [EOL]     assertSame(test, result); [EOL] }
public void testWithPeriodType1() { [EOL]     Period test = new Period(123L); [EOL]     Period result = test.withPeriodType(PeriodType.standard()); [EOL]     assertSame(test, result); [EOL] }
public void testNormalizedStandard_yearMonth1() { [EOL]     Period test = new Period(1, 15, 0, 0, 0, 0, 0, 0); [EOL]     Period result = test.normalizedStandard(); [EOL]     assertEquals(new Period(1, 15, 0, 0, 0, 0, 0, 0), test); [EOL]     assertEquals(new Period(2, 3, 0, 0, 0, 0, 0, 0), result); [EOL] }
public void testNormalizedStandard_yearMonth1() { [EOL]     Period test = new Period(1, 15, 0, 0, 0, 0, 0, 0); [EOL]     Period result = test.normalizedStandard(); [EOL]     assertEquals(new Period(1, 15, 0, 0, 0, 0, 0, 0), test); [EOL]     assertEquals(new Period(2, 3, 0, 0, 0, 0, 0, 0), result); [EOL] }
public void testNormalizedStandard_yearMonth1() { [EOL]     Period test = new Period(1, 15, 0, 0, 0, 0, 0, 0); [EOL]     Period result = test.normalizedStandard(); [EOL]     assertEquals(new Period(1, 15, 0, 0, 0, 0, 0, 0), test); [EOL]     assertEquals(new Period(2, 3, 0, 0, 0, 0, 0, 0), result); [EOL] }
public void test_wordBased_nl_parseTwoFields() { [EOL]     Period p = Period.days(2).withHours(5); [EOL]     assertEquals(p, PeriodFormat.wordBased(NL).parsePeriod("2 dagen en 5 uur")); [EOL] }
public void test_wordBased_nl_parseTwoFields() { [EOL]     Period p = Period.days(2).withHours(5); [EOL]     assertEquals(p, PeriodFormat.wordBased(NL).parsePeriod("2 dagen en 5 uur")); [EOL] }
public void testPlusFields() { [EOL]     Period test; [EOL]     test = Period.years(1).plusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(1).plusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(1).plusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(1).plusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(1).plusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(1).plusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(1).plusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(1).plusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.plusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testPlusFields() { [EOL]     Period test; [EOL]     test = Period.years(1).plusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(1).plusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(1).plusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(1).plusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(1).plusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(1).plusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(1).plusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(1).plusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.plusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testPlusFields() { [EOL]     Period test; [EOL]     test = Period.years(1).plusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(1).plusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(1).plusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(1).plusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(1).plusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(1).plusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(1).plusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(1).plusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.plusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testPlusFields() { [EOL]     Period test; [EOL]     test = Period.years(1).plusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(1).plusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(1).plusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(1).plusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(1).plusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(1).plusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(1).plusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(1).plusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.plusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testPlusFields() { [EOL]     Period test; [EOL]     test = Period.years(1).plusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(1).plusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(1).plusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(1).plusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(1).plusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(1).plusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(1).plusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(1).plusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.plusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testPlusFields() { [EOL]     Period test; [EOL]     test = Period.years(1).plusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(1).plusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(1).plusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(1).plusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(1).plusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(1).plusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(1).plusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(1).plusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.plusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testPlusFields() { [EOL]     Period test; [EOL]     test = Period.years(1).plusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(1).plusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(1).plusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(1).plusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(1).plusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(1).plusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(1).plusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(1).plusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.plusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testPlusFields() { [EOL]     Period test; [EOL]     test = Period.years(1).plusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(1).plusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(1).plusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(1).plusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(1).plusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(1).plusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(1).plusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(1).plusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.plusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testPlusFields() { [EOL]     Period test; [EOL]     test = Period.years(1).plusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(1).plusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(1).plusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(1).plusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(1).plusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(1).plusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(1).plusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(1).plusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.plusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testPlusFields() { [EOL]     Period test; [EOL]     test = Period.years(1).plusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(1).plusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(1).plusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(1).plusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(1).plusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(1).plusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(1).plusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(1).plusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.plusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testPlusFields() { [EOL]     Period test; [EOL]     test = Period.years(1).plusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(1).plusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(1).plusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(1).plusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(1).plusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(1).plusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(1).plusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(1).plusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.plusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testPlusFields() { [EOL]     Period test; [EOL]     test = Period.years(1).plusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(1).plusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(1).plusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(1).plusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(1).plusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(1).plusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(1).plusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(1).plusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.plusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testMinusFields() { [EOL]     Period test; [EOL]     test = Period.years(3).minusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(3).minusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(3).minusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(3).minusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(3).minusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(3).minusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(3).minusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(3).minusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.minusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testMinusFields() { [EOL]     Period test; [EOL]     test = Period.years(3).minusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(3).minusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(3).minusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(3).minusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(3).minusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(3).minusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(3).minusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(3).minusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.minusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testMinusFields() { [EOL]     Period test; [EOL]     test = Period.years(3).minusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(3).minusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(3).minusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(3).minusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(3).minusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(3).minusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(3).minusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(3).minusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.minusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testMinusFields() { [EOL]     Period test; [EOL]     test = Period.years(3).minusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(3).minusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(3).minusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(3).minusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(3).minusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(3).minusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(3).minusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(3).minusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.minusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testMinusFields() { [EOL]     Period test; [EOL]     test = Period.years(3).minusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(3).minusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(3).minusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(3).minusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(3).minusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(3).minusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(3).minusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(3).minusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.minusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testMinusFields() { [EOL]     Period test; [EOL]     test = Period.years(3).minusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(3).minusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(3).minusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(3).minusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(3).minusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(3).minusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(3).minusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(3).minusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.minusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testMinusFields() { [EOL]     Period test; [EOL]     test = Period.years(3).minusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(3).minusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(3).minusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(3).minusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(3).minusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(3).minusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(3).minusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(3).minusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.minusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testMinusFields() { [EOL]     Period test; [EOL]     test = Period.years(3).minusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(3).minusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(3).minusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(3).minusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(3).minusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(3).minusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(3).minusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(3).minusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.minusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testMinusFields() { [EOL]     Period test; [EOL]     test = Period.years(3).minusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(3).minusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(3).minusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(3).minusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(3).minusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(3).minusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(3).minusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(3).minusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.minusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testMinusFields() { [EOL]     Period test; [EOL]     test = Period.years(3).minusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(3).minusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(3).minusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(3).minusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(3).minusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(3).minusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(3).minusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(3).minusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.minusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testMinusFields() { [EOL]     Period test; [EOL]     test = Period.years(3).minusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(3).minusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(3).minusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(3).minusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(3).minusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(3).minusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(3).minusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(3).minusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.minusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testMinusFields() { [EOL]     Period test; [EOL]     test = Period.years(3).minusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(3).minusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(3).minusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(3).minusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(3).minusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(3).minusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(3).minusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(3).minusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.minusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testMinusFields() { [EOL]     Period test; [EOL]     test = Period.years(3).minusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(3).minusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(3).minusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(3).minusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(3).minusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(3).minusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(3).minusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(3).minusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.minusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testMinusFields() { [EOL]     Period test; [EOL]     test = Period.years(3).minusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(3).minusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(3).minusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(3).minusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(3).minusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(3).minusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(3).minusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(3).minusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.minusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testMinusFields() { [EOL]     Period test; [EOL]     test = Period.years(3).minusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(3).minusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(3).minusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(3).minusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(3).minusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(3).minusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(3).minusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(3).minusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.minusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testMinusFields() { [EOL]     Period test; [EOL]     test = Period.years(3).minusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(3).minusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(3).minusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(3).minusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(3).minusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(3).minusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(3).minusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(3).minusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.minusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testMinusFields() { [EOL]     Period test; [EOL]     test = Period.years(3).minusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(3).minusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(3).minusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(3).minusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(3).minusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(3).minusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(3).minusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(3).minusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.minusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testMinusFields() { [EOL]     Period test; [EOL]     test = Period.years(3).minusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(3).minusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(3).minusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(3).minusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(3).minusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(3).minusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(3).minusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(3).minusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.minusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testMinusFields() { [EOL]     Period test; [EOL]     test = Period.years(3).minusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(3).minusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(3).minusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(3).minusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(3).minusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(3).minusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(3).minusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(3).minusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.minusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testMinusFields() { [EOL]     Period test; [EOL]     test = Period.years(3).minusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(3).minusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(3).minusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(3).minusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(3).minusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(3).minusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(3).minusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(3).minusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.minusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testMinusFields() { [EOL]     Period test; [EOL]     test = Period.years(3).minusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(3).minusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(3).minusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(3).minusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(3).minusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(3).minusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(3).minusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(3).minusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.minusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testMinusFields() { [EOL]     Period test; [EOL]     test = Period.years(3).minusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(3).minusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(3).minusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(3).minusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(3).minusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(3).minusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(3).minusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(3).minusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.minusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testMinusFields() { [EOL]     Period test; [EOL]     test = Period.years(3).minusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(3).minusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(3).minusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(3).minusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(3).minusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(3).minusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(3).minusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(3).minusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.minusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testMinusFields() { [EOL]     Period test; [EOL]     test = Period.years(3).minusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(3).minusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(3).minusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(3).minusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(3).minusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(3).minusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(3).minusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(3).minusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.minusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testNormalizedStandard_yearMonth1() { [EOL]     Period test = new Period(1, 15, 0, 0, 0, 0, 0, 0); [EOL]     Period result = test.normalizedStandard(); [EOL]     assertEquals(new Period(1, 15, 0, 0, 0, 0, 0, 0), test); [EOL]     assertEquals(new Period(2, 3, 0, 0, 0, 0, 0, 0), result); [EOL] }
public void testNormalizedStandard_yearMonth1() { [EOL]     Period test = new Period(1, 15, 0, 0, 0, 0, 0, 0); [EOL]     Period result = test.normalizedStandard(); [EOL]     assertEquals(new Period(1, 15, 0, 0, 0, 0, 0, 0), test); [EOL]     assertEquals(new Period(2, 3, 0, 0, 0, 0, 0, 0), result); [EOL] }
public void testNormalizedStandard_yearMonth1() { [EOL]     Period test = new Period(1, 15, 0, 0, 0, 0, 0, 0); [EOL]     Period result = test.normalizedStandard(); [EOL]     assertEquals(new Period(1, 15, 0, 0, 0, 0, 0, 0), test); [EOL]     assertEquals(new Period(2, 3, 0, 0, 0, 0, 0, 0), result); [EOL] }
public void testNormalizedStandard_yearMonth1() { [EOL]     Period test = new Period(1, 15, 0, 0, 0, 0, 0, 0); [EOL]     Period result = test.normalizedStandard(); [EOL]     assertEquals(new Period(1, 15, 0, 0, 0, 0, 0, 0), test); [EOL]     assertEquals(new Period(2, 3, 0, 0, 0, 0, 0, 0), result); [EOL] }
public void testNormalizedStandard_yearMonth1() { [EOL]     Period test = new Period(1, 15, 0, 0, 0, 0, 0, 0); [EOL]     Period result = test.normalizedStandard(); [EOL]     assertEquals(new Period(1, 15, 0, 0, 0, 0, 0, 0), test); [EOL]     assertEquals(new Period(2, 3, 0, 0, 0, 0, 0, 0), result); [EOL] }
public void testNormalizedStandard_yearMonth1() { [EOL]     Period test = new Period(1, 15, 0, 0, 0, 0, 0, 0); [EOL]     Period result = test.normalizedStandard(); [EOL]     assertEquals(new Period(1, 15, 0, 0, 0, 0, 0, 0), test); [EOL]     assertEquals(new Period(2, 3, 0, 0, 0, 0, 0, 0), result); [EOL] }
public void testFactoryUTC() { [EOL]     assertEquals(DateTimeZone.UTC, IslamicChronology.getInstanceUTC().getZone()); [EOL]     assertSame(IslamicChronology.class, IslamicChronology.getInstanceUTC().getClass()); [EOL] }
public void testSampleDate2() { [EOL]     DateTime dt = new DateTime(2005, 11, 26, 0, 0, 0, 0, ISO_UTC); [EOL]     dt = dt.withChronology(ISLAMIC_UTC); [EOL]     assertEquals(IslamicChronology.AH, dt.getEra()); [EOL]     assertEquals(15, dt.getCenturyOfEra()); [EOL]     assertEquals(26, dt.getYearOfCentury()); [EOL]     assertEquals(1426, dt.getYearOfEra()); [EOL]     assertEquals(1426, dt.getYear()); [EOL]     Property fld = dt.year(); [EOL]     assertEquals(true, fld.isLeap()); [EOL]     assertEquals(1, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(10, dt.getMonthOfYear()); [EOL]     fld = dt.monthOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(12, fld.getMaximumValue()); [EOL]     assertEquals(12, fld.getMaximumValueOverall()); [EOL]     assertEquals(24, dt.getDayOfMonth()); [EOL]     fld = dt.dayOfMonth(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(29, fld.getMaximumValue()); [EOL]     assertEquals(30, fld.getMaximumValueOverall()); [EOL]     assertEquals(DateTimeConstants.SATURDAY, dt.getDayOfWeek()); [EOL]     fld = dt.dayOfWeek(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(7, fld.getMaximumValue()); [EOL]     assertEquals(7, fld.getMaximumValueOverall()); [EOL]     assertEquals(5 * 30 + 4 * 29 + 24, dt.getDayOfYear()); [EOL]     fld = dt.dayOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(355, fld.getMaximumValue()); [EOL]     assertEquals(355, fld.getMaximumValueOverall()); [EOL]     assertEquals(0, dt.getHourOfDay()); [EOL]     assertEquals(0, dt.getMinuteOfHour()); [EOL]     assertEquals(0, dt.getSecondOfMinute()); [EOL]     assertEquals(0, dt.getMillisOfSecond()); [EOL] }
public void testSampleDate2() { [EOL]     DateTime dt = new DateTime(2005, 11, 26, 0, 0, 0, 0, ISO_UTC); [EOL]     dt = dt.withChronology(ISLAMIC_UTC); [EOL]     assertEquals(IslamicChronology.AH, dt.getEra()); [EOL]     assertEquals(15, dt.getCenturyOfEra()); [EOL]     assertEquals(26, dt.getYearOfCentury()); [EOL]     assertEquals(1426, dt.getYearOfEra()); [EOL]     assertEquals(1426, dt.getYear()); [EOL]     Property fld = dt.year(); [EOL]     assertEquals(true, fld.isLeap()); [EOL]     assertEquals(1, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(10, dt.getMonthOfYear()); [EOL]     fld = dt.monthOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(12, fld.getMaximumValue()); [EOL]     assertEquals(12, fld.getMaximumValueOverall()); [EOL]     assertEquals(24, dt.getDayOfMonth()); [EOL]     fld = dt.dayOfMonth(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(29, fld.getMaximumValue()); [EOL]     assertEquals(30, fld.getMaximumValueOverall()); [EOL]     assertEquals(DateTimeConstants.SATURDAY, dt.getDayOfWeek()); [EOL]     fld = dt.dayOfWeek(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(7, fld.getMaximumValue()); [EOL]     assertEquals(7, fld.getMaximumValueOverall()); [EOL]     assertEquals(5 * 30 + 4 * 29 + 24, dt.getDayOfYear()); [EOL]     fld = dt.dayOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(355, fld.getMaximumValue()); [EOL]     assertEquals(355, fld.getMaximumValueOverall()); [EOL]     assertEquals(0, dt.getHourOfDay()); [EOL]     assertEquals(0, dt.getMinuteOfHour()); [EOL]     assertEquals(0, dt.getSecondOfMinute()); [EOL]     assertEquals(0, dt.getMillisOfSecond()); [EOL] }
public void testSampleDate2() { [EOL]     DateTime dt = new DateTime(2005, 11, 26, 0, 0, 0, 0, ISO_UTC); [EOL]     dt = dt.withChronology(ISLAMIC_UTC); [EOL]     assertEquals(IslamicChronology.AH, dt.getEra()); [EOL]     assertEquals(15, dt.getCenturyOfEra()); [EOL]     assertEquals(26, dt.getYearOfCentury()); [EOL]     assertEquals(1426, dt.getYearOfEra()); [EOL]     assertEquals(1426, dt.getYear()); [EOL]     Property fld = dt.year(); [EOL]     assertEquals(true, fld.isLeap()); [EOL]     assertEquals(1, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(10, dt.getMonthOfYear()); [EOL]     fld = dt.monthOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(12, fld.getMaximumValue()); [EOL]     assertEquals(12, fld.getMaximumValueOverall()); [EOL]     assertEquals(24, dt.getDayOfMonth()); [EOL]     fld = dt.dayOfMonth(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(29, fld.getMaximumValue()); [EOL]     assertEquals(30, fld.getMaximumValueOverall()); [EOL]     assertEquals(DateTimeConstants.SATURDAY, dt.getDayOfWeek()); [EOL]     fld = dt.dayOfWeek(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(7, fld.getMaximumValue()); [EOL]     assertEquals(7, fld.getMaximumValueOverall()); [EOL]     assertEquals(5 * 30 + 4 * 29 + 24, dt.getDayOfYear()); [EOL]     fld = dt.dayOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(355, fld.getMaximumValue()); [EOL]     assertEquals(355, fld.getMaximumValueOverall()); [EOL]     assertEquals(0, dt.getHourOfDay()); [EOL]     assertEquals(0, dt.getMinuteOfHour()); [EOL]     assertEquals(0, dt.getSecondOfMinute()); [EOL]     assertEquals(0, dt.getMillisOfSecond()); [EOL] }
public void testSampleDate2() { [EOL]     DateTime dt = new DateTime(2005, 11, 26, 0, 0, 0, 0, ISO_UTC); [EOL]     dt = dt.withChronology(ISLAMIC_UTC); [EOL]     assertEquals(IslamicChronology.AH, dt.getEra()); [EOL]     assertEquals(15, dt.getCenturyOfEra()); [EOL]     assertEquals(26, dt.getYearOfCentury()); [EOL]     assertEquals(1426, dt.getYearOfEra()); [EOL]     assertEquals(1426, dt.getYear()); [EOL]     Property fld = dt.year(); [EOL]     assertEquals(true, fld.isLeap()); [EOL]     assertEquals(1, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(10, dt.getMonthOfYear()); [EOL]     fld = dt.monthOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(12, fld.getMaximumValue()); [EOL]     assertEquals(12, fld.getMaximumValueOverall()); [EOL]     assertEquals(24, dt.getDayOfMonth()); [EOL]     fld = dt.dayOfMonth(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(29, fld.getMaximumValue()); [EOL]     assertEquals(30, fld.getMaximumValueOverall()); [EOL]     assertEquals(DateTimeConstants.SATURDAY, dt.getDayOfWeek()); [EOL]     fld = dt.dayOfWeek(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(7, fld.getMaximumValue()); [EOL]     assertEquals(7, fld.getMaximumValueOverall()); [EOL]     assertEquals(5 * 30 + 4 * 29 + 24, dt.getDayOfYear()); [EOL]     fld = dt.dayOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(355, fld.getMaximumValue()); [EOL]     assertEquals(355, fld.getMaximumValueOverall()); [EOL]     assertEquals(0, dt.getHourOfDay()); [EOL]     assertEquals(0, dt.getMinuteOfHour()); [EOL]     assertEquals(0, dt.getSecondOfMinute()); [EOL]     assertEquals(0, dt.getMillisOfSecond()); [EOL] }
public void testSampleDate2() { [EOL]     DateTime dt = new DateTime(2005, 11, 26, 0, 0, 0, 0, ISO_UTC); [EOL]     dt = dt.withChronology(ISLAMIC_UTC); [EOL]     assertEquals(IslamicChronology.AH, dt.getEra()); [EOL]     assertEquals(15, dt.getCenturyOfEra()); [EOL]     assertEquals(26, dt.getYearOfCentury()); [EOL]     assertEquals(1426, dt.getYearOfEra()); [EOL]     assertEquals(1426, dt.getYear()); [EOL]     Property fld = dt.year(); [EOL]     assertEquals(true, fld.isLeap()); [EOL]     assertEquals(1, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(10, dt.getMonthOfYear()); [EOL]     fld = dt.monthOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(12, fld.getMaximumValue()); [EOL]     assertEquals(12, fld.getMaximumValueOverall()); [EOL]     assertEquals(24, dt.getDayOfMonth()); [EOL]     fld = dt.dayOfMonth(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(29, fld.getMaximumValue()); [EOL]     assertEquals(30, fld.getMaximumValueOverall()); [EOL]     assertEquals(DateTimeConstants.SATURDAY, dt.getDayOfWeek()); [EOL]     fld = dt.dayOfWeek(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(7, fld.getMaximumValue()); [EOL]     assertEquals(7, fld.getMaximumValueOverall()); [EOL]     assertEquals(5 * 30 + 4 * 29 + 24, dt.getDayOfYear()); [EOL]     fld = dt.dayOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(355, fld.getMaximumValue()); [EOL]     assertEquals(355, fld.getMaximumValueOverall()); [EOL]     assertEquals(0, dt.getHourOfDay()); [EOL]     assertEquals(0, dt.getMinuteOfHour()); [EOL]     assertEquals(0, dt.getSecondOfMinute()); [EOL]     assertEquals(0, dt.getMillisOfSecond()); [EOL] }
public void testSampleDate2() { [EOL]     DateTime dt = new DateTime(2005, 11, 26, 0, 0, 0, 0, ISO_UTC); [EOL]     dt = dt.withChronology(ISLAMIC_UTC); [EOL]     assertEquals(IslamicChronology.AH, dt.getEra()); [EOL]     assertEquals(15, dt.getCenturyOfEra()); [EOL]     assertEquals(26, dt.getYearOfCentury()); [EOL]     assertEquals(1426, dt.getYearOfEra()); [EOL]     assertEquals(1426, dt.getYear()); [EOL]     Property fld = dt.year(); [EOL]     assertEquals(true, fld.isLeap()); [EOL]     assertEquals(1, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(10, dt.getMonthOfYear()); [EOL]     fld = dt.monthOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(12, fld.getMaximumValue()); [EOL]     assertEquals(12, fld.getMaximumValueOverall()); [EOL]     assertEquals(24, dt.getDayOfMonth()); [EOL]     fld = dt.dayOfMonth(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(29, fld.getMaximumValue()); [EOL]     assertEquals(30, fld.getMaximumValueOverall()); [EOL]     assertEquals(DateTimeConstants.SATURDAY, dt.getDayOfWeek()); [EOL]     fld = dt.dayOfWeek(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(7, fld.getMaximumValue()); [EOL]     assertEquals(7, fld.getMaximumValueOverall()); [EOL]     assertEquals(5 * 30 + 4 * 29 + 24, dt.getDayOfYear()); [EOL]     fld = dt.dayOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(355, fld.getMaximumValue()); [EOL]     assertEquals(355, fld.getMaximumValueOverall()); [EOL]     assertEquals(0, dt.getHourOfDay()); [EOL]     assertEquals(0, dt.getMinuteOfHour()); [EOL]     assertEquals(0, dt.getSecondOfMinute()); [EOL]     assertEquals(0, dt.getMillisOfSecond()); [EOL] }
public void testSampleDate2() { [EOL]     DateTime dt = new DateTime(2005, 11, 26, 0, 0, 0, 0, ISO_UTC); [EOL]     dt = dt.withChronology(ISLAMIC_UTC); [EOL]     assertEquals(IslamicChronology.AH, dt.getEra()); [EOL]     assertEquals(15, dt.getCenturyOfEra()); [EOL]     assertEquals(26, dt.getYearOfCentury()); [EOL]     assertEquals(1426, dt.getYearOfEra()); [EOL]     assertEquals(1426, dt.getYear()); [EOL]     Property fld = dt.year(); [EOL]     assertEquals(true, fld.isLeap()); [EOL]     assertEquals(1, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(10, dt.getMonthOfYear()); [EOL]     fld = dt.monthOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(12, fld.getMaximumValue()); [EOL]     assertEquals(12, fld.getMaximumValueOverall()); [EOL]     assertEquals(24, dt.getDayOfMonth()); [EOL]     fld = dt.dayOfMonth(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(29, fld.getMaximumValue()); [EOL]     assertEquals(30, fld.getMaximumValueOverall()); [EOL]     assertEquals(DateTimeConstants.SATURDAY, dt.getDayOfWeek()); [EOL]     fld = dt.dayOfWeek(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(7, fld.getMaximumValue()); [EOL]     assertEquals(7, fld.getMaximumValueOverall()); [EOL]     assertEquals(5 * 30 + 4 * 29 + 24, dt.getDayOfYear()); [EOL]     fld = dt.dayOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(355, fld.getMaximumValue()); [EOL]     assertEquals(355, fld.getMaximumValueOverall()); [EOL]     assertEquals(0, dt.getHourOfDay()); [EOL]     assertEquals(0, dt.getMinuteOfHour()); [EOL]     assertEquals(0, dt.getSecondOfMinute()); [EOL]     assertEquals(0, dt.getMillisOfSecond()); [EOL] }
public void testSampleDate2() { [EOL]     DateTime dt = new DateTime(2005, 11, 26, 0, 0, 0, 0, ISO_UTC); [EOL]     dt = dt.withChronology(ISLAMIC_UTC); [EOL]     assertEquals(IslamicChronology.AH, dt.getEra()); [EOL]     assertEquals(15, dt.getCenturyOfEra()); [EOL]     assertEquals(26, dt.getYearOfCentury()); [EOL]     assertEquals(1426, dt.getYearOfEra()); [EOL]     assertEquals(1426, dt.getYear()); [EOL]     Property fld = dt.year(); [EOL]     assertEquals(true, fld.isLeap()); [EOL]     assertEquals(1, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(10, dt.getMonthOfYear()); [EOL]     fld = dt.monthOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(12, fld.getMaximumValue()); [EOL]     assertEquals(12, fld.getMaximumValueOverall()); [EOL]     assertEquals(24, dt.getDayOfMonth()); [EOL]     fld = dt.dayOfMonth(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(29, fld.getMaximumValue()); [EOL]     assertEquals(30, fld.getMaximumValueOverall()); [EOL]     assertEquals(DateTimeConstants.SATURDAY, dt.getDayOfWeek()); [EOL]     fld = dt.dayOfWeek(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(7, fld.getMaximumValue()); [EOL]     assertEquals(7, fld.getMaximumValueOverall()); [EOL]     assertEquals(5 * 30 + 4 * 29 + 24, dt.getDayOfYear()); [EOL]     fld = dt.dayOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(355, fld.getMaximumValue()); [EOL]     assertEquals(355, fld.getMaximumValueOverall()); [EOL]     assertEquals(0, dt.getHourOfDay()); [EOL]     assertEquals(0, dt.getMinuteOfHour()); [EOL]     assertEquals(0, dt.getSecondOfMinute()); [EOL]     assertEquals(0, dt.getMillisOfSecond()); [EOL] }
public void testSampleDate2() { [EOL]     DateTime dt = new DateTime(2005, 11, 26, 0, 0, 0, 0, ISO_UTC); [EOL]     dt = dt.withChronology(ISLAMIC_UTC); [EOL]     assertEquals(IslamicChronology.AH, dt.getEra()); [EOL]     assertEquals(15, dt.getCenturyOfEra()); [EOL]     assertEquals(26, dt.getYearOfCentury()); [EOL]     assertEquals(1426, dt.getYearOfEra()); [EOL]     assertEquals(1426, dt.getYear()); [EOL]     Property fld = dt.year(); [EOL]     assertEquals(true, fld.isLeap()); [EOL]     assertEquals(1, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(10, dt.getMonthOfYear()); [EOL]     fld = dt.monthOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(12, fld.getMaximumValue()); [EOL]     assertEquals(12, fld.getMaximumValueOverall()); [EOL]     assertEquals(24, dt.getDayOfMonth()); [EOL]     fld = dt.dayOfMonth(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(29, fld.getMaximumValue()); [EOL]     assertEquals(30, fld.getMaximumValueOverall()); [EOL]     assertEquals(DateTimeConstants.SATURDAY, dt.getDayOfWeek()); [EOL]     fld = dt.dayOfWeek(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(7, fld.getMaximumValue()); [EOL]     assertEquals(7, fld.getMaximumValueOverall()); [EOL]     assertEquals(5 * 30 + 4 * 29 + 24, dt.getDayOfYear()); [EOL]     fld = dt.dayOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(355, fld.getMaximumValue()); [EOL]     assertEquals(355, fld.getMaximumValueOverall()); [EOL]     assertEquals(0, dt.getHourOfDay()); [EOL]     assertEquals(0, dt.getMinuteOfHour()); [EOL]     assertEquals(0, dt.getSecondOfMinute()); [EOL]     assertEquals(0, dt.getMillisOfSecond()); [EOL] }
public void testSampleDate2() { [EOL]     DateTime dt = new DateTime(2005, 11, 26, 0, 0, 0, 0, ISO_UTC); [EOL]     dt = dt.withChronology(ISLAMIC_UTC); [EOL]     assertEquals(IslamicChronology.AH, dt.getEra()); [EOL]     assertEquals(15, dt.getCenturyOfEra()); [EOL]     assertEquals(26, dt.getYearOfCentury()); [EOL]     assertEquals(1426, dt.getYearOfEra()); [EOL]     assertEquals(1426, dt.getYear()); [EOL]     Property fld = dt.year(); [EOL]     assertEquals(true, fld.isLeap()); [EOL]     assertEquals(1, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(10, dt.getMonthOfYear()); [EOL]     fld = dt.monthOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(12, fld.getMaximumValue()); [EOL]     assertEquals(12, fld.getMaximumValueOverall()); [EOL]     assertEquals(24, dt.getDayOfMonth()); [EOL]     fld = dt.dayOfMonth(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(29, fld.getMaximumValue()); [EOL]     assertEquals(30, fld.getMaximumValueOverall()); [EOL]     assertEquals(DateTimeConstants.SATURDAY, dt.getDayOfWeek()); [EOL]     fld = dt.dayOfWeek(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(7, fld.getMaximumValue()); [EOL]     assertEquals(7, fld.getMaximumValueOverall()); [EOL]     assertEquals(5 * 30 + 4 * 29 + 24, dt.getDayOfYear()); [EOL]     fld = dt.dayOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(355, fld.getMaximumValue()); [EOL]     assertEquals(355, fld.getMaximumValueOverall()); [EOL]     assertEquals(0, dt.getHourOfDay()); [EOL]     assertEquals(0, dt.getMinuteOfHour()); [EOL]     assertEquals(0, dt.getSecondOfMinute()); [EOL]     assertEquals(0, dt.getMillisOfSecond()); [EOL] }
public void test_cutoverPreZero() { [EOL]     DateTime cutover = new LocalDate(-2, 6, 30, ISOChronology.getInstanceUTC()).toDateTimeAtStartOfDay(DateTimeZone.UTC); [EOL]     try { [EOL]         GJChronology.getInstance(DateTimeZone.UTC, cutover); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void test_cutoverPreZero() { [EOL]     DateTime cutover = new LocalDate(-2, 6, 30, ISOChronology.getInstanceUTC()).toDateTimeAtStartOfDay(DateTimeZone.UTC); [EOL]     try { [EOL]         GJChronology.getInstance(DateTimeZone.UTC, cutover); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void test_cutoverPreZero() { [EOL]     DateTime cutover = new LocalDate(-2, 6, 30, ISOChronology.getInstanceUTC()).toDateTimeAtStartOfDay(DateTimeZone.UTC); [EOL]     try { [EOL]         GJChronology.getInstance(DateTimeZone.UTC, cutover); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void test_cutoverPreZero() { [EOL]     DateTime cutover = new LocalDate(-2, 6, 30, ISOChronology.getInstanceUTC()).toDateTimeAtStartOfDay(DateTimeZone.UTC); [EOL]     try { [EOL]         GJChronology.getInstance(DateTimeZone.UTC, cutover); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void test_cutoverPreZero() { [EOL]     DateTime cutover = new LocalDate(-2, 6, 30, ISOChronology.getInstanceUTC()).toDateTimeAtStartOfDay(DateTimeZone.UTC); [EOL]     try { [EOL]         GJChronology.getInstance(DateTimeZone.UTC, cutover); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void test_cutoverPreZero() { [EOL]     DateTime cutover = new LocalDate(-2, 6, 30, ISOChronology.getInstanceUTC()).toDateTimeAtStartOfDay(DateTimeZone.UTC); [EOL]     try { [EOL]         GJChronology.getInstance(DateTimeZone.UTC, cutover); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void test_cutoverPreZero() { [EOL]     DateTime cutover = new LocalDate(-2, 6, 30, ISOChronology.getInstanceUTC()).toDateTimeAtStartOfDay(DateTimeZone.UTC); [EOL]     try { [EOL]         GJChronology.getInstance(DateTimeZone.UTC, cutover); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testCutoverAddMonths() { [EOL]     testAdd("1582-01-01", DurationFieldType.months(), 1, "1582-02-01"); [EOL]     testAdd("1582-01-01", DurationFieldType.months(), 6, "1582-07-01"); [EOL]     testAdd("1582-01-01", DurationFieldType.months(), 12, "1583-01-01"); [EOL]     testAdd("1582-11-15", DurationFieldType.months(), 1, "1582-12-15"); [EOL]     testAdd("1582-09-04", DurationFieldType.months(), 2, "1582-11-04"); [EOL]     testAdd("1582-09-05", DurationFieldType.months(), 2, "1582-11-05"); [EOL]     testAdd("1582-09-10", DurationFieldType.months(), 2, "1582-11-10"); [EOL]     testAdd("1582-09-15", DurationFieldType.months(), 2, "1582-11-15"); [EOL]     testAdd("1580-01-01", DurationFieldType.months(), 48, "1584-01-01"); [EOL]     testAdd("1580-02-29", DurationFieldType.months(), 48, "1584-02-29"); [EOL]     testAdd("1580-10-01", DurationFieldType.months(), 48, "1584-10-01"); [EOL]     testAdd("1580-10-10", DurationFieldType.months(), 48, "1584-10-10"); [EOL]     testAdd("1580-10-15", DurationFieldType.months(), 48, "1584-10-15"); [EOL]     testAdd("1580-12-31", DurationFieldType.months(), 48, "1584-12-31"); [EOL] }
public void testConstructor_Object_Chronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     YearMonthDay test = new YearMonthDay(date, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testConstructor_Object_Chronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     YearMonthDay test = new YearMonthDay(date, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testConstructor_Object_Chronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     YearMonthDay test = new YearMonthDay(date, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testIsReadableInterval_Object_Chronology() throws Exception { [EOL]     assertEquals(false, StringConverter.INSTANCE.isReadableInterval("", null)); [EOL] }
public void testGetDurationMillis_Object1() throws Exception { [EOL]     long millis = StringConverter.INSTANCE.getDurationMillis("PT12.345S"); [EOL]     assertEquals(12345, millis); [EOL]     millis = StringConverter.INSTANCE.getDurationMillis("pt12.345s"); [EOL]     assertEquals(12345, millis); [EOL]     millis = StringConverter.INSTANCE.getDurationMillis("pt12s"); [EOL]     assertEquals(12000, millis); [EOL]     millis = StringConverter.INSTANCE.getDurationMillis("pt12.s"); [EOL]     assertEquals(12000, millis); [EOL]     millis = StringConverter.INSTANCE.getDurationMillis("pt-12.32s"); [EOL]     assertEquals(-12320, millis); [EOL]     millis = StringConverter.INSTANCE.getDurationMillis("pt-0.32s"); [EOL]     assertEquals(-320, millis); [EOL]     millis = StringConverter.INSTANCE.getDurationMillis("pt-0.0s"); [EOL]     assertEquals(0, millis); [EOL]     millis = StringConverter.INSTANCE.getDurationMillis("pt0.0s"); [EOL]     assertEquals(0, millis); [EOL]     millis = StringConverter.INSTANCE.getDurationMillis("pt12.3456s"); [EOL]     assertEquals(12345, millis); [EOL] }
public void testGetDurationMillis_Object1() throws Exception { [EOL]     long millis = StringConverter.INSTANCE.getDurationMillis("PT12.345S"); [EOL]     assertEquals(12345, millis); [EOL]     millis = StringConverter.INSTANCE.getDurationMillis("pt12.345s"); [EOL]     assertEquals(12345, millis); [EOL]     millis = StringConverter.INSTANCE.getDurationMillis("pt12s"); [EOL]     assertEquals(12000, millis); [EOL]     millis = StringConverter.INSTANCE.getDurationMillis("pt12.s"); [EOL]     assertEquals(12000, millis); [EOL]     millis = StringConverter.INSTANCE.getDurationMillis("pt-12.32s"); [EOL]     assertEquals(-12320, millis); [EOL]     millis = StringConverter.INSTANCE.getDurationMillis("pt-0.32s"); [EOL]     assertEquals(-320, millis); [EOL]     millis = StringConverter.INSTANCE.getDurationMillis("pt-0.0s"); [EOL]     assertEquals(0, millis); [EOL]     millis = StringConverter.INSTANCE.getDurationMillis("pt0.0s"); [EOL]     assertEquals(0, millis); [EOL]     millis = StringConverter.INSTANCE.getDurationMillis("pt12.3456s"); [EOL]     assertEquals(12345, millis); [EOL] }
public void testGetDurationMillis_Object1() throws Exception { [EOL]     long millis = StringConverter.INSTANCE.getDurationMillis("PT12.345S"); [EOL]     assertEquals(12345, millis); [EOL]     millis = StringConverter.INSTANCE.getDurationMillis("pt12.345s"); [EOL]     assertEquals(12345, millis); [EOL]     millis = StringConverter.INSTANCE.getDurationMillis("pt12s"); [EOL]     assertEquals(12000, millis); [EOL]     millis = StringConverter.INSTANCE.getDurationMillis("pt12.s"); [EOL]     assertEquals(12000, millis); [EOL]     millis = StringConverter.INSTANCE.getDurationMillis("pt-12.32s"); [EOL]     assertEquals(-12320, millis); [EOL]     millis = StringConverter.INSTANCE.getDurationMillis("pt-0.32s"); [EOL]     assertEquals(-320, millis); [EOL]     millis = StringConverter.INSTANCE.getDurationMillis("pt-0.0s"); [EOL]     assertEquals(0, millis); [EOL]     millis = StringConverter.INSTANCE.getDurationMillis("pt0.0s"); [EOL]     assertEquals(0, millis); [EOL]     millis = StringConverter.INSTANCE.getDurationMillis("pt12.3456s"); [EOL]     assertEquals(12345, millis); [EOL] }
public void testGetDurationMillis_Object1() throws Exception { [EOL]     long millis = StringConverter.INSTANCE.getDurationMillis("PT12.345S"); [EOL]     assertEquals(12345, millis); [EOL]     millis = StringConverter.INSTANCE.getDurationMillis("pt12.345s"); [EOL]     assertEquals(12345, millis); [EOL]     millis = StringConverter.INSTANCE.getDurationMillis("pt12s"); [EOL]     assertEquals(12000, millis); [EOL]     millis = StringConverter.INSTANCE.getDurationMillis("pt12.s"); [EOL]     assertEquals(12000, millis); [EOL]     millis = StringConverter.INSTANCE.getDurationMillis("pt-12.32s"); [EOL]     assertEquals(-12320, millis); [EOL]     millis = StringConverter.INSTANCE.getDurationMillis("pt-0.32s"); [EOL]     assertEquals(-320, millis); [EOL]     millis = StringConverter.INSTANCE.getDurationMillis("pt-0.0s"); [EOL]     assertEquals(0, millis); [EOL]     millis = StringConverter.INSTANCE.getDurationMillis("pt0.0s"); [EOL]     assertEquals(0, millis); [EOL]     millis = StringConverter.INSTANCE.getDurationMillis("pt12.3456s"); [EOL]     assertEquals(12345, millis); [EOL] }
public void testGetDurationMillis_Object1() throws Exception { [EOL]     long millis = StringConverter.INSTANCE.getDurationMillis("PT12.345S"); [EOL]     assertEquals(12345, millis); [EOL]     millis = StringConverter.INSTANCE.getDurationMillis("pt12.345s"); [EOL]     assertEquals(12345, millis); [EOL]     millis = StringConverter.INSTANCE.getDurationMillis("pt12s"); [EOL]     assertEquals(12000, millis); [EOL]     millis = StringConverter.INSTANCE.getDurationMillis("pt12.s"); [EOL]     assertEquals(12000, millis); [EOL]     millis = StringConverter.INSTANCE.getDurationMillis("pt-12.32s"); [EOL]     assertEquals(-12320, millis); [EOL]     millis = StringConverter.INSTANCE.getDurationMillis("pt-0.32s"); [EOL]     assertEquals(-320, millis); [EOL]     millis = StringConverter.INSTANCE.getDurationMillis("pt-0.0s"); [EOL]     assertEquals(0, millis); [EOL]     millis = StringConverter.INSTANCE.getDurationMillis("pt0.0s"); [EOL]     assertEquals(0, millis); [EOL]     millis = StringConverter.INSTANCE.getDurationMillis("pt12.3456s"); [EOL]     assertEquals(12345, millis); [EOL] }
public void testGetPeriodType_Object() throws Exception { [EOL]     assertEquals(PeriodType.standard(), ReadablePeriodConverter.INSTANCE.getPeriodType(new Period(123L, PeriodType.standard()))); [EOL]     assertEquals(PeriodType.yearMonthDayTime(), ReadablePeriodConverter.INSTANCE.getPeriodType(new Period(123L, PeriodType.yearMonthDayTime()))); [EOL] }
public void testGetPeriodType_Object() throws Exception { [EOL]     assertEquals(PeriodType.standard(), ReadablePeriodConverter.INSTANCE.getPeriodType(new Period(123L, PeriodType.standard()))); [EOL]     assertEquals(PeriodType.yearMonthDayTime(), ReadablePeriodConverter.INSTANCE.getPeriodType(new Period(123L, PeriodType.yearMonthDayTime()))); [EOL] }
public void testToString() { [EOL]     assertEquals("Converter[org.joda.time.ReadablePeriod]", ReadablePeriodConverter.INSTANCE.toString()); [EOL] }
public void testPlusYears_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.plusYears(1); [EOL]     DateTime expected = new DateTime(2003, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusYears(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusYears_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.plusYears(1); [EOL]     DateTime expected = new DateTime(2003, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusYears(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusYears_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.plusYears(1); [EOL]     DateTime expected = new DateTime(2003, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusYears(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusYears_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.plusYears(1); [EOL]     DateTime expected = new DateTime(2003, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusYears(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusYears_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.plusYears(1); [EOL]     DateTime expected = new DateTime(2003, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusYears(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusYears_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.plusYears(1); [EOL]     DateTime expected = new DateTime(2003, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusYears(0); [EOL]     assertSame(test, result); [EOL] }
public void testBug2495455() { [EOL]     PeriodFormatter pfmt1 = new PeriodFormatterBuilder().appendLiteral("P").appendYears().appendSuffix("Y").appendMonths().appendSuffix("M").appendWeeks().appendSuffix("W").appendDays().appendSuffix("D").appendSeparatorIfFieldsAfter("T").appendHours().appendSuffix("H").appendMinutes().appendSuffix("M").appendSecondsWithOptionalMillis().appendSuffix("S").toFormatter(); [EOL]     PeriodFormatter pfmt2 = new PeriodFormatterBuilder().append(ISOPeriodFormat.standard()).toFormatter(); [EOL]     pfmt1.parsePeriod("PT1003199059S"); [EOL]     pfmt2.parsePeriod("PT1003199059S"); [EOL] }
public void testBug2495455() { [EOL]     PeriodFormatter pfmt1 = new PeriodFormatterBuilder().appendLiteral("P").appendYears().appendSuffix("Y").appendMonths().appendSuffix("M").appendWeeks().appendSuffix("W").appendDays().appendSuffix("D").appendSeparatorIfFieldsAfter("T").appendHours().appendSuffix("H").appendMinutes().appendSuffix("M").appendSecondsWithOptionalMillis().appendSuffix("S").toFormatter(); [EOL]     PeriodFormatter pfmt2 = new PeriodFormatterBuilder().append(ISOPeriodFormat.standard()).toFormatter(); [EOL]     pfmt1.parsePeriod("PT1003199059S"); [EOL]     pfmt2.parsePeriod("PT1003199059S"); [EOL] }
public void testFormatMinDigits() { [EOL]     PeriodFormatter f = new PeriodFormatterBuilder().minimumPrintedDigits(4).appendYears().toFormatter(); [EOL]     assertEquals("0001", f.print(PERIOD)); [EOL]     assertEquals(4, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatMinDigits() { [EOL]     PeriodFormatter f = new PeriodFormatterBuilder().minimumPrintedDigits(4).appendYears().toFormatter(); [EOL]     assertEquals("0001", f.print(PERIOD)); [EOL]     assertEquals(4, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrintZeroRarelyFirst() { [EOL]     PeriodFormatter f = new PeriodFormatterBuilder().printZeroRarelyFirst().appendYears().appendLiteral("-").appendMonths().appendLiteral("-").appendWeeks().appendLiteral("-").appendDays().toFormatter(); [EOL]     assertEquals("1-2-3-4", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("0---", f.print(EMPTY_YEAR_DAY_PERIOD)); [EOL]     assertEquals(4, f.getPrinter().calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1---4", f.print(YEAR_DAY_PERIOD)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(YEAR_DAY_PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(YEAR_DAY_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("0---", f.print(EMPTY_PERIOD)); [EOL]     assertEquals(4, f.getPrinter().calculatePrintedLength(EMPTY_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(EMPTY_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixPlural1() { [EOL]     PeriodFormatter f = builder.appendYears().appendSuffix(" year", " years").toFormatter(); [EOL]     assertEquals("1 year", f.print(PERIOD)); [EOL]     assertEquals(6, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 years", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testBug2495455() { [EOL]     PeriodFormatter pfmt1 = new PeriodFormatterBuilder().appendLiteral("P").appendYears().appendSuffix("Y").appendMonths().appendSuffix("M").appendWeeks().appendSuffix("W").appendDays().appendSuffix("D").appendSeparatorIfFieldsAfter("T").appendHours().appendSuffix("H").appendMinutes().appendSuffix("M").appendSecondsWithOptionalMillis().appendSuffix("S").toFormatter(); [EOL]     PeriodFormatter pfmt2 = new PeriodFormatterBuilder().append(ISOPeriodFormat.standard()).toFormatter(); [EOL]     pfmt1.parsePeriod("PT1003199059S"); [EOL]     pfmt2.parsePeriod("PT1003199059S"); [EOL] }
public void testBug2495455() { [EOL]     PeriodFormatter pfmt1 = new PeriodFormatterBuilder().appendLiteral("P").appendYears().appendSuffix("Y").appendMonths().appendSuffix("M").appendWeeks().appendSuffix("W").appendDays().appendSuffix("D").appendSeparatorIfFieldsAfter("T").appendHours().appendSuffix("H").appendMinutes().appendSuffix("M").appendSecondsWithOptionalMillis().appendSuffix("S").toFormatter(); [EOL]     PeriodFormatter pfmt2 = new PeriodFormatterBuilder().append(ISOPeriodFormat.standard()).toFormatter(); [EOL]     pfmt1.parsePeriod("PT1003199059S"); [EOL]     pfmt2.parsePeriod("PT1003199059S"); [EOL] }
public void testFormatSuffixPlural3() { [EOL]     try { [EOL]         builder.appendSuffix(null, ""); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         builder.appendSuffix("", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         builder.appendSuffix(null, null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFormatSeparatorSimple() { [EOL]     PeriodFormatter f = builder.appendYears().appendSeparator("T").appendHours().toFormatter(); [EOL]     assertEquals("1T5", f.print(PERIOD)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("5", f.print(TIME_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1", f.print(DATE_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSeparatorSimple() { [EOL]     PeriodFormatter f = builder.appendYears().appendSeparator("T").appendHours().toFormatter(); [EOL]     assertEquals("1T5", f.print(PERIOD)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("5", f.print(TIME_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1", f.print(DATE_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatAppend_PrinterParser_Printer_null() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, null).appendMonths(); [EOL]     assertNotNull(bld.toPrinter()); [EOL]     assertNull(bld.toParser()); [EOL]     PeriodFormatter f = bld.toFormatter(); [EOL]     assertEquals("1-2", f.print(PERIOD)); [EOL]     try { [EOL]         f.parsePeriod("1-2"); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testFormatAppend_PrinterParser_Printer_null() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, null).appendMonths(); [EOL]     assertNotNull(bld.toPrinter()); [EOL]     assertNull(bld.toParser()); [EOL]     PeriodFormatter f = bld.toFormatter(); [EOL]     assertEquals("1-2", f.print(PERIOD)); [EOL]     try { [EOL]         f.parsePeriod("1-2"); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testFormatAppend_PrinterParser_Printer_null() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, null).appendMonths(); [EOL]     assertNotNull(bld.toPrinter()); [EOL]     assertNull(bld.toParser()); [EOL]     PeriodFormatter f = bld.toFormatter(); [EOL]     assertEquals("1-2", f.print(PERIOD)); [EOL]     try { [EOL]         f.parsePeriod("1-2"); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testFormatAppend_PrinterParser_Printer_null() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, null).appendMonths(); [EOL]     assertNotNull(bld.toPrinter()); [EOL]     assertNull(bld.toParser()); [EOL]     PeriodFormatter f = bld.toFormatter(); [EOL]     assertEquals("1-2", f.print(PERIOD)); [EOL]     try { [EOL]         f.parsePeriod("1-2"); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testFormatAppend_PrinterParser_Printer_null() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, null).appendMonths(); [EOL]     assertNotNull(bld.toPrinter()); [EOL]     assertNull(bld.toParser()); [EOL]     PeriodFormatter f = bld.toFormatter(); [EOL]     assertEquals("1-2", f.print(PERIOD)); [EOL]     try { [EOL]         f.parsePeriod("1-2"); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testBug2495455() { [EOL]     PeriodFormatter pfmt1 = new PeriodFormatterBuilder().appendLiteral("P").appendYears().appendSuffix("Y").appendMonths().appendSuffix("M").appendWeeks().appendSuffix("W").appendDays().appendSuffix("D").appendSeparatorIfFieldsAfter("T").appendHours().appendSuffix("H").appendMinutes().appendSuffix("M").appendSecondsWithOptionalMillis().appendSuffix("S").toFormatter(); [EOL]     PeriodFormatter pfmt2 = new PeriodFormatterBuilder().append(ISOPeriodFormat.standard()).toFormatter(); [EOL]     pfmt1.parsePeriod("PT1003199059S"); [EOL]     pfmt2.parsePeriod("PT1003199059S"); [EOL] }
public void testBug2495455() { [EOL]     PeriodFormatter pfmt1 = new PeriodFormatterBuilder().appendLiteral("P").appendYears().appendSuffix("Y").appendMonths().appendSuffix("M").appendWeeks().appendSuffix("W").appendDays().appendSuffix("D").appendSeparatorIfFieldsAfter("T").appendHours().appendSuffix("H").appendMinutes().appendSuffix("M").appendSecondsWithOptionalMillis().appendSuffix("S").toFormatter(); [EOL]     PeriodFormatter pfmt2 = new PeriodFormatterBuilder().append(ISOPeriodFormat.standard()).toFormatter(); [EOL]     pfmt1.parsePeriod("PT1003199059S"); [EOL]     pfmt2.parsePeriod("PT1003199059S"); [EOL] }
public void testFactory_parseMonths_String() { [EOL]     assertEquals(0, Months.parseMonths((String) null).getMonths()); [EOL]     assertEquals(0, Months.parseMonths("P0M").getMonths()); [EOL]     assertEquals(1, Months.parseMonths("P1M").getMonths()); [EOL]     assertEquals(-3, Months.parseMonths("P-3M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P0Y2M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P2MT0H0M").getMonths()); [EOL]     try { [EOL]         Months.parseMonths("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Months.parseMonths("P1MT1H"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_parseMonths_String() { [EOL]     assertEquals(0, Months.parseMonths((String) null).getMonths()); [EOL]     assertEquals(0, Months.parseMonths("P0M").getMonths()); [EOL]     assertEquals(1, Months.parseMonths("P1M").getMonths()); [EOL]     assertEquals(-3, Months.parseMonths("P-3M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P0Y2M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P2MT0H0M").getMonths()); [EOL]     try { [EOL]         Months.parseMonths("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Months.parseMonths("P1MT1H"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_parseMonths_String() { [EOL]     assertEquals(0, Months.parseMonths((String) null).getMonths()); [EOL]     assertEquals(0, Months.parseMonths("P0M").getMonths()); [EOL]     assertEquals(1, Months.parseMonths("P1M").getMonths()); [EOL]     assertEquals(-3, Months.parseMonths("P-3M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P0Y2M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P2MT0H0M").getMonths()); [EOL]     try { [EOL]         Months.parseMonths("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Months.parseMonths("P1MT1H"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_parseMonths_String() { [EOL]     assertEquals(0, Months.parseMonths((String) null).getMonths()); [EOL]     assertEquals(0, Months.parseMonths("P0M").getMonths()); [EOL]     assertEquals(1, Months.parseMonths("P1M").getMonths()); [EOL]     assertEquals(-3, Months.parseMonths("P-3M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P0Y2M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P2MT0H0M").getMonths()); [EOL]     try { [EOL]         Months.parseMonths("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Months.parseMonths("P1MT1H"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_parseMonths_String() { [EOL]     assertEquals(0, Months.parseMonths((String) null).getMonths()); [EOL]     assertEquals(0, Months.parseMonths("P0M").getMonths()); [EOL]     assertEquals(1, Months.parseMonths("P1M").getMonths()); [EOL]     assertEquals(-3, Months.parseMonths("P-3M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P0Y2M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P2MT0H0M").getMonths()); [EOL]     try { [EOL]         Months.parseMonths("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Months.parseMonths("P1MT1H"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_parseMonths_String() { [EOL]     assertEquals(0, Months.parseMonths((String) null).getMonths()); [EOL]     assertEquals(0, Months.parseMonths("P0M").getMonths()); [EOL]     assertEquals(1, Months.parseMonths("P1M").getMonths()); [EOL]     assertEquals(-3, Months.parseMonths("P-3M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P0Y2M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P2MT0H0M").getMonths()); [EOL]     try { [EOL]         Months.parseMonths("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Months.parseMonths("P1MT1H"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_parseMonths_String() { [EOL]     assertEquals(0, Months.parseMonths((String) null).getMonths()); [EOL]     assertEquals(0, Months.parseMonths("P0M").getMonths()); [EOL]     assertEquals(1, Months.parseMonths("P1M").getMonths()); [EOL]     assertEquals(-3, Months.parseMonths("P-3M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P0Y2M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P2MT0H0M").getMonths()); [EOL]     try { [EOL]         Months.parseMonths("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Months.parseMonths("P1MT1H"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_parseMonths_String() { [EOL]     assertEquals(0, Months.parseMonths((String) null).getMonths()); [EOL]     assertEquals(0, Months.parseMonths("P0M").getMonths()); [EOL]     assertEquals(1, Months.parseMonths("P1M").getMonths()); [EOL]     assertEquals(-3, Months.parseMonths("P-3M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P0Y2M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P2MT0H0M").getMonths()); [EOL]     try { [EOL]         Months.parseMonths("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Months.parseMonths("P1MT1H"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_parseMonths_String() { [EOL]     assertEquals(0, Months.parseMonths((String) null).getMonths()); [EOL]     assertEquals(0, Months.parseMonths("P0M").getMonths()); [EOL]     assertEquals(1, Months.parseMonths("P1M").getMonths()); [EOL]     assertEquals(-3, Months.parseMonths("P-3M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P0Y2M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P2MT0H0M").getMonths()); [EOL]     try { [EOL]         Months.parseMonths("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Months.parseMonths("P1MT1H"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testBug2495455() { [EOL]     PeriodFormatter pfmt1 = new PeriodFormatterBuilder().appendLiteral("P").appendYears().appendSuffix("Y").appendMonths().appendSuffix("M").appendWeeks().appendSuffix("W").appendDays().appendSuffix("D").appendSeparatorIfFieldsAfter("T").appendHours().appendSuffix("H").appendMinutes().appendSuffix("M").appendSecondsWithOptionalMillis().appendSuffix("S").toFormatter(); [EOL]     PeriodFormatter pfmt2 = new PeriodFormatterBuilder().append(ISOPeriodFormat.standard()).toFormatter(); [EOL]     pfmt1.parsePeriod("PT1003199059S"); [EOL]     pfmt2.parsePeriod("PT1003199059S"); [EOL] }
public void testBug2495455() { [EOL]     PeriodFormatter pfmt1 = new PeriodFormatterBuilder().appendLiteral("P").appendYears().appendSuffix("Y").appendMonths().appendSuffix("M").appendWeeks().appendSuffix("W").appendDays().appendSuffix("D").appendSeparatorIfFieldsAfter("T").appendHours().appendSuffix("H").appendMinutes().appendSuffix("M").appendSecondsWithOptionalMillis().appendSuffix("S").toFormatter(); [EOL]     PeriodFormatter pfmt2 = new PeriodFormatterBuilder().append(ISOPeriodFormat.standard()).toFormatter(); [EOL]     pfmt1.parsePeriod("PT1003199059S"); [EOL]     pfmt2.parsePeriod("PT1003199059S"); [EOL] }
public void testBug2495455() { [EOL]     PeriodFormatter pfmt1 = new PeriodFormatterBuilder().appendLiteral("P").appendYears().appendSuffix("Y").appendMonths().appendSuffix("M").appendWeeks().appendSuffix("W").appendDays().appendSuffix("D").appendSeparatorIfFieldsAfter("T").appendHours().appendSuffix("H").appendMinutes().appendSuffix("M").appendSecondsWithOptionalMillis().appendSuffix("S").toFormatter(); [EOL]     PeriodFormatter pfmt2 = new PeriodFormatterBuilder().append(ISOPeriodFormat.standard()).toFormatter(); [EOL]     pfmt1.parsePeriod("PT1003199059S"); [EOL]     pfmt2.parsePeriod("PT1003199059S"); [EOL] }
public void testBug2495455() { [EOL]     PeriodFormatter pfmt1 = new PeriodFormatterBuilder().appendLiteral("P").appendYears().appendSuffix("Y").appendMonths().appendSuffix("M").appendWeeks().appendSuffix("W").appendDays().appendSuffix("D").appendSeparatorIfFieldsAfter("T").appendHours().appendSuffix("H").appendMinutes().appendSuffix("M").appendSecondsWithOptionalMillis().appendSuffix("S").toFormatter(); [EOL]     PeriodFormatter pfmt2 = new PeriodFormatterBuilder().append(ISOPeriodFormat.standard()).toFormatter(); [EOL]     pfmt1.parsePeriod("PT1003199059S"); [EOL]     pfmt2.parsePeriod("PT1003199059S"); [EOL] }
public void testBug2495455() { [EOL]     PeriodFormatter pfmt1 = new PeriodFormatterBuilder().appendLiteral("P").appendYears().appendSuffix("Y").appendMonths().appendSuffix("M").appendWeeks().appendSuffix("W").appendDays().appendSuffix("D").appendSeparatorIfFieldsAfter("T").appendHours().appendSuffix("H").appendMinutes().appendSuffix("M").appendSecondsWithOptionalMillis().appendSuffix("S").toFormatter(); [EOL]     PeriodFormatter pfmt2 = new PeriodFormatterBuilder().append(ISOPeriodFormat.standard()).toFormatter(); [EOL]     pfmt1.parsePeriod("PT1003199059S"); [EOL]     pfmt2.parsePeriod("PT1003199059S"); [EOL] }
public void testBug2495455() { [EOL]     PeriodFormatter pfmt1 = new PeriodFormatterBuilder().appendLiteral("P").appendYears().appendSuffix("Y").appendMonths().appendSuffix("M").appendWeeks().appendSuffix("W").appendDays().appendSuffix("D").appendSeparatorIfFieldsAfter("T").appendHours().appendSuffix("H").appendMinutes().appendSuffix("M").appendSecondsWithOptionalMillis().appendSuffix("S").toFormatter(); [EOL]     PeriodFormatter pfmt2 = new PeriodFormatterBuilder().append(ISOPeriodFormat.standard()).toFormatter(); [EOL]     pfmt1.parsePeriod("PT1003199059S"); [EOL]     pfmt2.parsePeriod("PT1003199059S"); [EOL] }
public void testFormatSuffixPlural1() { [EOL]     PeriodFormatter f = builder.appendYears().appendSuffix(" year", " years").toFormatter(); [EOL]     assertEquals("1 year", f.print(PERIOD)); [EOL]     assertEquals(6, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 years", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixPlural1() { [EOL]     PeriodFormatter f = builder.appendYears().appendSuffix(" year", " years").toFormatter(); [EOL]     assertEquals("1 year", f.print(PERIOD)); [EOL]     assertEquals(6, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 years", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixPlural1() { [EOL]     PeriodFormatter f = builder.appendYears().appendSuffix(" year", " years").toFormatter(); [EOL]     assertEquals("1 year", f.print(PERIOD)); [EOL]     assertEquals(6, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 years", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixPlural1() { [EOL]     PeriodFormatter f = builder.appendYears().appendSuffix(" year", " years").toFormatter(); [EOL]     assertEquals("1 year", f.print(PERIOD)); [EOL]     assertEquals(6, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 years", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixPlural1() { [EOL]     PeriodFormatter f = builder.appendYears().appendSuffix(" year", " years").toFormatter(); [EOL]     assertEquals("1 year", f.print(PERIOD)); [EOL]     assertEquals(6, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 years", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixPlural1() { [EOL]     PeriodFormatter f = builder.appendYears().appendSuffix(" year", " years").toFormatter(); [EOL]     assertEquals("1 year", f.print(PERIOD)); [EOL]     assertEquals(6, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 years", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixPlural1() { [EOL]     PeriodFormatter f = builder.appendYears().appendSuffix(" year", " years").toFormatter(); [EOL]     assertEquals("1 year", f.print(PERIOD)); [EOL]     assertEquals(6, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 years", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixPlural1() { [EOL]     PeriodFormatter f = builder.appendYears().appendSuffix(" year", " years").toFormatter(); [EOL]     assertEquals("1 year", f.print(PERIOD)); [EOL]     assertEquals(6, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 years", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixPlural1() { [EOL]     PeriodFormatter f = builder.appendYears().appendSuffix(" year", " years").toFormatter(); [EOL]     assertEquals("1 year", f.print(PERIOD)); [EOL]     assertEquals(6, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 years", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixPlural1() { [EOL]     PeriodFormatter f = builder.appendYears().appendSuffix(" year", " years").toFormatter(); [EOL]     assertEquals("1 year", f.print(PERIOD)); [EOL]     assertEquals(6, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 years", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixPlural1() { [EOL]     PeriodFormatter f = builder.appendYears().appendSuffix(" year", " years").toFormatter(); [EOL]     assertEquals("1 year", f.print(PERIOD)); [EOL]     assertEquals(6, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 years", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixPlural1() { [EOL]     PeriodFormatter f = builder.appendYears().appendSuffix(" year", " years").toFormatter(); [EOL]     assertEquals("1 year", f.print(PERIOD)); [EOL]     assertEquals(6, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 years", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixPlural1() { [EOL]     PeriodFormatter f = builder.appendYears().appendSuffix(" year", " years").toFormatter(); [EOL]     assertEquals("1 year", f.print(PERIOD)); [EOL]     assertEquals(6, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 years", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixPlural1() { [EOL]     PeriodFormatter f = builder.appendYears().appendSuffix(" year", " years").toFormatter(); [EOL]     assertEquals("1 year", f.print(PERIOD)); [EOL]     assertEquals(6, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 years", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixPlural1() { [EOL]     PeriodFormatter f = builder.appendYears().appendSuffix(" year", " years").toFormatter(); [EOL]     assertEquals("1 year", f.print(PERIOD)); [EOL]     assertEquals(6, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 years", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixPlural1() { [EOL]     PeriodFormatter f = builder.appendYears().appendSuffix(" year", " years").toFormatter(); [EOL]     assertEquals("1 year", f.print(PERIOD)); [EOL]     assertEquals(6, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 years", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixPlural1() { [EOL]     PeriodFormatter f = builder.appendYears().appendSuffix(" year", " years").toFormatter(); [EOL]     assertEquals("1 year", f.print(PERIOD)); [EOL]     assertEquals(6, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 years", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixPlural1() { [EOL]     PeriodFormatter f = builder.appendYears().appendSuffix(" year", " years").toFormatter(); [EOL]     assertEquals("1 year", f.print(PERIOD)); [EOL]     assertEquals(6, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 years", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFactory_parseMonths_String() { [EOL]     assertEquals(0, Months.parseMonths((String) null).getMonths()); [EOL]     assertEquals(0, Months.parseMonths("P0M").getMonths()); [EOL]     assertEquals(1, Months.parseMonths("P1M").getMonths()); [EOL]     assertEquals(-3, Months.parseMonths("P-3M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P0Y2M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P2MT0H0M").getMonths()); [EOL]     try { [EOL]         Months.parseMonths("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Months.parseMonths("P1MT1H"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_parseMonths_String() { [EOL]     assertEquals(0, Months.parseMonths((String) null).getMonths()); [EOL]     assertEquals(0, Months.parseMonths("P0M").getMonths()); [EOL]     assertEquals(1, Months.parseMonths("P1M").getMonths()); [EOL]     assertEquals(-3, Months.parseMonths("P-3M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P0Y2M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P2MT0H0M").getMonths()); [EOL]     try { [EOL]         Months.parseMonths("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Months.parseMonths("P1MT1H"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_parseMonths_String() { [EOL]     assertEquals(0, Months.parseMonths((String) null).getMonths()); [EOL]     assertEquals(0, Months.parseMonths("P0M").getMonths()); [EOL]     assertEquals(1, Months.parseMonths("P1M").getMonths()); [EOL]     assertEquals(-3, Months.parseMonths("P-3M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P0Y2M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P2MT0H0M").getMonths()); [EOL]     try { [EOL]         Months.parseMonths("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Months.parseMonths("P1MT1H"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_parseMonths_String() { [EOL]     assertEquals(0, Months.parseMonths((String) null).getMonths()); [EOL]     assertEquals(0, Months.parseMonths("P0M").getMonths()); [EOL]     assertEquals(1, Months.parseMonths("P1M").getMonths()); [EOL]     assertEquals(-3, Months.parseMonths("P-3M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P0Y2M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P2MT0H0M").getMonths()); [EOL]     try { [EOL]         Months.parseMonths("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Months.parseMonths("P1MT1H"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_parseMonths_String() { [EOL]     assertEquals(0, Months.parseMonths((String) null).getMonths()); [EOL]     assertEquals(0, Months.parseMonths("P0M").getMonths()); [EOL]     assertEquals(1, Months.parseMonths("P1M").getMonths()); [EOL]     assertEquals(-3, Months.parseMonths("P-3M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P0Y2M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P2MT0H0M").getMonths()); [EOL]     try { [EOL]         Months.parseMonths("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Months.parseMonths("P1MT1H"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_parseMonths_String() { [EOL]     assertEquals(0, Months.parseMonths((String) null).getMonths()); [EOL]     assertEquals(0, Months.parseMonths("P0M").getMonths()); [EOL]     assertEquals(1, Months.parseMonths("P1M").getMonths()); [EOL]     assertEquals(-3, Months.parseMonths("P-3M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P0Y2M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P2MT0H0M").getMonths()); [EOL]     try { [EOL]         Months.parseMonths("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Months.parseMonths("P1MT1H"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_parseMonths_String() { [EOL]     assertEquals(0, Months.parseMonths((String) null).getMonths()); [EOL]     assertEquals(0, Months.parseMonths("P0M").getMonths()); [EOL]     assertEquals(1, Months.parseMonths("P1M").getMonths()); [EOL]     assertEquals(-3, Months.parseMonths("P-3M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P0Y2M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P2MT0H0M").getMonths()); [EOL]     try { [EOL]         Months.parseMonths("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Months.parseMonths("P1MT1H"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_parseMonths_String() { [EOL]     assertEquals(0, Months.parseMonths((String) null).getMonths()); [EOL]     assertEquals(0, Months.parseMonths("P0M").getMonths()); [EOL]     assertEquals(1, Months.parseMonths("P1M").getMonths()); [EOL]     assertEquals(-3, Months.parseMonths("P-3M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P0Y2M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P2MT0H0M").getMonths()); [EOL]     try { [EOL]         Months.parseMonths("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Months.parseMonths("P1MT1H"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_parseMonths_String() { [EOL]     assertEquals(0, Months.parseMonths((String) null).getMonths()); [EOL]     assertEquals(0, Months.parseMonths("P0M").getMonths()); [EOL]     assertEquals(1, Months.parseMonths("P1M").getMonths()); [EOL]     assertEquals(-3, Months.parseMonths("P-3M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P0Y2M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P2MT0H0M").getMonths()); [EOL]     try { [EOL]         Months.parseMonths("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Months.parseMonths("P1MT1H"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFormatSeparatorSimple() { [EOL]     PeriodFormatter f = builder.appendYears().appendSeparator("T").appendHours().toFormatter(); [EOL]     assertEquals("1T5", f.print(PERIOD)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("5", f.print(TIME_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1", f.print(DATE_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSeparatorSimple() { [EOL]     PeriodFormatter f = builder.appendYears().appendSeparator("T").appendHours().toFormatter(); [EOL]     assertEquals("1T5", f.print(PERIOD)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("5", f.print(TIME_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1", f.print(DATE_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSeparatorSimple() { [EOL]     PeriodFormatter f = builder.appendYears().appendSeparator("T").appendHours().toFormatter(); [EOL]     assertEquals("1T5", f.print(PERIOD)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("5", f.print(TIME_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1", f.print(DATE_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSeparatorSimple() { [EOL]     PeriodFormatter f = builder.appendYears().appendSeparator("T").appendHours().toFormatter(); [EOL]     assertEquals("1T5", f.print(PERIOD)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("5", f.print(TIME_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1", f.print(DATE_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSeparatorSimple() { [EOL]     PeriodFormatter f = builder.appendYears().appendSeparator("T").appendHours().toFormatter(); [EOL]     assertEquals("1T5", f.print(PERIOD)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("5", f.print(TIME_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1", f.print(DATE_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSeparatorSimple() { [EOL]     PeriodFormatter f = builder.appendYears().appendSeparator("T").appendHours().toFormatter(); [EOL]     assertEquals("1T5", f.print(PERIOD)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("5", f.print(TIME_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1", f.print(DATE_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSeparatorSimple() { [EOL]     PeriodFormatter f = builder.appendYears().appendSeparator("T").appendHours().toFormatter(); [EOL]     assertEquals("1T5", f.print(PERIOD)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("5", f.print(TIME_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1", f.print(DATE_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSeparatorSimple() { [EOL]     PeriodFormatter f = builder.appendYears().appendSeparator("T").appendHours().toFormatter(); [EOL]     assertEquals("1T5", f.print(PERIOD)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("5", f.print(TIME_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1", f.print(DATE_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSeparatorSimple() { [EOL]     PeriodFormatter f = builder.appendYears().appendSeparator("T").appendHours().toFormatter(); [EOL]     assertEquals("1T5", f.print(PERIOD)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("5", f.print(TIME_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1", f.print(DATE_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testBug2495455() { [EOL]     PeriodFormatter pfmt1 = new PeriodFormatterBuilder().appendLiteral("P").appendYears().appendSuffix("Y").appendMonths().appendSuffix("M").appendWeeks().appendSuffix("W").appendDays().appendSuffix("D").appendSeparatorIfFieldsAfter("T").appendHours().appendSuffix("H").appendMinutes().appendSuffix("M").appendSecondsWithOptionalMillis().appendSuffix("S").toFormatter(); [EOL]     PeriodFormatter pfmt2 = new PeriodFormatterBuilder().append(ISOPeriodFormat.standard()).toFormatter(); [EOL]     pfmt1.parsePeriod("PT1003199059S"); [EOL]     pfmt2.parsePeriod("PT1003199059S"); [EOL] }
public void testBug2495455() { [EOL]     PeriodFormatter pfmt1 = new PeriodFormatterBuilder().appendLiteral("P").appendYears().appendSuffix("Y").appendMonths().appendSuffix("M").appendWeeks().appendSuffix("W").appendDays().appendSuffix("D").appendSeparatorIfFieldsAfter("T").appendHours().appendSuffix("H").appendMinutes().appendSuffix("M").appendSecondsWithOptionalMillis().appendSuffix("S").toFormatter(); [EOL]     PeriodFormatter pfmt2 = new PeriodFormatterBuilder().append(ISOPeriodFormat.standard()).toFormatter(); [EOL]     pfmt1.parsePeriod("PT1003199059S"); [EOL]     pfmt2.parsePeriod("PT1003199059S"); [EOL] }
public void testSerialization() throws Exception { [EOL]     LocalDate test = new LocalDate(1972, 6, 9, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     LocalDate result = (LocalDate) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testSerialization() throws Exception { [EOL]     LocalDate test = new LocalDate(1972, 6, 9, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     LocalDate result = (LocalDate) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void test_dateElementParser() { [EOL]     DateTimeFormatter parser = ISODateTimeFormat.dateElementParser(); [EOL]     assertParse(parser, "2006-06-09", new DateTime(2006, 6, 9, 0, 0, 0, 0)); [EOL]     assertParse(parser, "2006-06-9", new DateTime(2006, 6, 9, 0, 0, 0, 0)); [EOL]     assertParse(parser, "2006-6-09", new DateTime(2006, 6, 9, 0, 0, 0, 0)); [EOL]     assertParse(parser, "2006-6-9", new DateTime(2006, 6, 9, 0, 0, 0, 0)); [EOL]     assertParse(parser, true, "2006-W27-3"); [EOL]     assertParse(parser, true, "2006-123"); [EOL]     assertParse(parser, false, "2006-06-09T+02:00"); [EOL]     assertParse(parser, false, "2006-W27-3T+02:00"); [EOL]     assertParse(parser, false, "2006-123T+02:00"); [EOL]     assertParse(parser, false, "2006-06-09T10:20:30.040"); [EOL]     assertParse(parser, false, "2006-W27-3T10:20:30.040"); [EOL]     assertParse(parser, false, "2006-123T10:20:30.040"); [EOL]     assertParse(parser, false, "2006-06-09T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "2006-W27-3T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "2006-123T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "T10:20:30.040"); [EOL]     assertParse(parser, false, "T10.5"); [EOL]     assertParse(parser, false, "T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "T10.5+02:00"); [EOL]     assertParse(parser, false, "10:20:30.040"); [EOL]     assertParse(parser, false, "10.5"); [EOL]     assertParse(parser, false, "10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "10.5+02:00"); [EOL] }
public void test_dateElementParser() { [EOL]     DateTimeFormatter parser = ISODateTimeFormat.dateElementParser(); [EOL]     assertParse(parser, "2006-06-09", new DateTime(2006, 6, 9, 0, 0, 0, 0)); [EOL]     assertParse(parser, "2006-06-9", new DateTime(2006, 6, 9, 0, 0, 0, 0)); [EOL]     assertParse(parser, "2006-6-09", new DateTime(2006, 6, 9, 0, 0, 0, 0)); [EOL]     assertParse(parser, "2006-6-9", new DateTime(2006, 6, 9, 0, 0, 0, 0)); [EOL]     assertParse(parser, true, "2006-W27-3"); [EOL]     assertParse(parser, true, "2006-123"); [EOL]     assertParse(parser, false, "2006-06-09T+02:00"); [EOL]     assertParse(parser, false, "2006-W27-3T+02:00"); [EOL]     assertParse(parser, false, "2006-123T+02:00"); [EOL]     assertParse(parser, false, "2006-06-09T10:20:30.040"); [EOL]     assertParse(parser, false, "2006-W27-3T10:20:30.040"); [EOL]     assertParse(parser, false, "2006-123T10:20:30.040"); [EOL]     assertParse(parser, false, "2006-06-09T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "2006-W27-3T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "2006-123T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "T10:20:30.040"); [EOL]     assertParse(parser, false, "T10.5"); [EOL]     assertParse(parser, false, "T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "T10.5+02:00"); [EOL]     assertParse(parser, false, "10:20:30.040"); [EOL]     assertParse(parser, false, "10.5"); [EOL]     assertParse(parser, false, "10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "10.5+02:00"); [EOL] }
public void test_dateElementParser() { [EOL]     DateTimeFormatter parser = ISODateTimeFormat.dateElementParser(); [EOL]     assertParse(parser, "2006-06-09", new DateTime(2006, 6, 9, 0, 0, 0, 0)); [EOL]     assertParse(parser, "2006-06-9", new DateTime(2006, 6, 9, 0, 0, 0, 0)); [EOL]     assertParse(parser, "2006-6-09", new DateTime(2006, 6, 9, 0, 0, 0, 0)); [EOL]     assertParse(parser, "2006-6-9", new DateTime(2006, 6, 9, 0, 0, 0, 0)); [EOL]     assertParse(parser, true, "2006-W27-3"); [EOL]     assertParse(parser, true, "2006-123"); [EOL]     assertParse(parser, false, "2006-06-09T+02:00"); [EOL]     assertParse(parser, false, "2006-W27-3T+02:00"); [EOL]     assertParse(parser, false, "2006-123T+02:00"); [EOL]     assertParse(parser, false, "2006-06-09T10:20:30.040"); [EOL]     assertParse(parser, false, "2006-W27-3T10:20:30.040"); [EOL]     assertParse(parser, false, "2006-123T10:20:30.040"); [EOL]     assertParse(parser, false, "2006-06-09T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "2006-W27-3T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "2006-123T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "T10:20:30.040"); [EOL]     assertParse(parser, false, "T10.5"); [EOL]     assertParse(parser, false, "T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "T10.5+02:00"); [EOL]     assertParse(parser, false, "10:20:30.040"); [EOL]     assertParse(parser, false, "10.5"); [EOL]     assertParse(parser, false, "10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "10.5+02:00"); [EOL] }
public void test_dateElementParser() { [EOL]     DateTimeFormatter parser = ISODateTimeFormat.dateElementParser(); [EOL]     assertParse(parser, "2006-06-09", new DateTime(2006, 6, 9, 0, 0, 0, 0)); [EOL]     assertParse(parser, "2006-06-9", new DateTime(2006, 6, 9, 0, 0, 0, 0)); [EOL]     assertParse(parser, "2006-6-09", new DateTime(2006, 6, 9, 0, 0, 0, 0)); [EOL]     assertParse(parser, "2006-6-9", new DateTime(2006, 6, 9, 0, 0, 0, 0)); [EOL]     assertParse(parser, true, "2006-W27-3"); [EOL]     assertParse(parser, true, "2006-123"); [EOL]     assertParse(parser, false, "2006-06-09T+02:00"); [EOL]     assertParse(parser, false, "2006-W27-3T+02:00"); [EOL]     assertParse(parser, false, "2006-123T+02:00"); [EOL]     assertParse(parser, false, "2006-06-09T10:20:30.040"); [EOL]     assertParse(parser, false, "2006-W27-3T10:20:30.040"); [EOL]     assertParse(parser, false, "2006-123T10:20:30.040"); [EOL]     assertParse(parser, false, "2006-06-09T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "2006-W27-3T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "2006-123T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "T10:20:30.040"); [EOL]     assertParse(parser, false, "T10.5"); [EOL]     assertParse(parser, false, "T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "T10.5+02:00"); [EOL]     assertParse(parser, false, "10:20:30.040"); [EOL]     assertParse(parser, false, "10.5"); [EOL]     assertParse(parser, false, "10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "10.5+02:00"); [EOL] }
public void test_dateElementParser() { [EOL]     DateTimeFormatter parser = ISODateTimeFormat.dateElementParser(); [EOL]     assertParse(parser, "2006-06-09", new DateTime(2006, 6, 9, 0, 0, 0, 0)); [EOL]     assertParse(parser, "2006-06-9", new DateTime(2006, 6, 9, 0, 0, 0, 0)); [EOL]     assertParse(parser, "2006-6-09", new DateTime(2006, 6, 9, 0, 0, 0, 0)); [EOL]     assertParse(parser, "2006-6-9", new DateTime(2006, 6, 9, 0, 0, 0, 0)); [EOL]     assertParse(parser, true, "2006-W27-3"); [EOL]     assertParse(parser, true, "2006-123"); [EOL]     assertParse(parser, false, "2006-06-09T+02:00"); [EOL]     assertParse(parser, false, "2006-W27-3T+02:00"); [EOL]     assertParse(parser, false, "2006-123T+02:00"); [EOL]     assertParse(parser, false, "2006-06-09T10:20:30.040"); [EOL]     assertParse(parser, false, "2006-W27-3T10:20:30.040"); [EOL]     assertParse(parser, false, "2006-123T10:20:30.040"); [EOL]     assertParse(parser, false, "2006-06-09T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "2006-W27-3T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "2006-123T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "T10:20:30.040"); [EOL]     assertParse(parser, false, "T10.5"); [EOL]     assertParse(parser, false, "T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "T10.5+02:00"); [EOL]     assertParse(parser, false, "10:20:30.040"); [EOL]     assertParse(parser, false, "10.5"); [EOL]     assertParse(parser, false, "10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "10.5+02:00"); [EOL] }
public void testSerialization() throws Exception { [EOL]     LocalDate test = new LocalDate(1972, 6, 9, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     LocalDate result = (LocalDate) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testForFields_weekBased_YW() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.weekyear(), DateTimeFieldType.weekOfWeekyear() }; [EOL]     int[] values = new int[] { 2005, 8 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005-W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("2005W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void testFormat_minute() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("m").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "20", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals(dt.toString(), "20", f.print(dt)); [EOL]     dt = dt.withZone(TOKYO); [EOL]     assertEquals(dt.toString(), "20", f.print(dt)); [EOL] }
public void testFormat_minute() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("m").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "20", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals(dt.toString(), "20", f.print(dt)); [EOL]     dt = dt.withZone(TOKYO); [EOL]     assertEquals(dt.toString(), "20", f.print(dt)); [EOL] }
public void testForStyle_mediumDate() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.mediumDate(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("M-"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateInstance(DateFormat.MEDIUM, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.MEDIUM, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.MEDIUM, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL] }
public void testForStyle_longDate() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.longDate(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("L-"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateInstance(DateFormat.LONG, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.LONG, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.LONG, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL] }
public void testForStyle_longDate() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.longDate(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("L-"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateInstance(DateFormat.LONG, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.LONG, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.LONG, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL] }
public void testForStyle_longDate() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.longDate(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("L-"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateInstance(DateFormat.LONG, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.LONG, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.LONG, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL] }
public void testForStyle_longDate() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.longDate(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("L-"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateInstance(DateFormat.LONG, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.LONG, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.LONG, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL] }
public void testForStyle_longDate() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.longDate(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("L-"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateInstance(DateFormat.LONG, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.LONG, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.LONG, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL] }
public void testForStyle_longDate() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.longDate(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("L-"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateInstance(DateFormat.LONG, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.LONG, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.LONG, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL] }
public void testForStyle_longDate() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.longDate(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("L-"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateInstance(DateFormat.LONG, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.LONG, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.LONG, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL] }
public void testForStyle_longDate() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.longDate(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("L-"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateInstance(DateFormat.LONG, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.LONG, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.LONG, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL] }
public void testForStyle_longDate() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.longDate(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("L-"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateInstance(DateFormat.LONG, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.LONG, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.LONG, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL] }
public void testForStyle_longDate() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.longDate(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("L-"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateInstance(DateFormat.LONG, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.LONG, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.LONG, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL] }
public void testForStyle_longDate() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.longDate(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("L-"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateInstance(DateFormat.LONG, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.LONG, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.LONG, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL] }
public void testForStyle_longDate() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.longDate(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("L-"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateInstance(DateFormat.LONG, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.LONG, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.LONG, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL] }
public void testForStyle_longDate() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.longDate(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("L-"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateInstance(DateFormat.LONG, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.LONG, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.LONG, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL] }
public void testForStyle_longDate() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.longDate(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("L-"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateInstance(DateFormat.LONG, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.LONG, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.LONG, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL] }
public void testForStyle_longDate() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.longDate(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("L-"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateInstance(DateFormat.LONG, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.LONG, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.LONG, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL] }
public void testFormat_minute() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("m").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "20", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals(dt.toString(), "20", f.print(dt)); [EOL]     dt = dt.withZone(TOKYO); [EOL]     assertEquals(dt.toString(), "20", f.print(dt)); [EOL] }
public void testFormat_minute() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("m").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "20", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals(dt.toString(), "20", f.print(dt)); [EOL]     dt = dt.withZone(TOKYO); [EOL]     assertEquals(dt.toString(), "20", f.print(dt)); [EOL] }
public void testFormat_minute() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("m").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "20", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals(dt.toString(), "20", f.print(dt)); [EOL]     dt = dt.withZone(TOKYO); [EOL]     assertEquals(dt.toString(), "20", f.print(dt)); [EOL] }
public void testForStyle_invalidStrings() { [EOL]     try { [EOL]         DateTimeFormat.forStyle("AA"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateTimeFormat.forStyle("--"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateTimeFormat.forStyle("ss"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForStyle_invalidStrings() { [EOL]     try { [EOL]         DateTimeFormat.forStyle("AA"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateTimeFormat.forStyle("--"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateTimeFormat.forStyle("ss"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForStyle_invalidStrings() { [EOL]     try { [EOL]         DateTimeFormat.forStyle("AA"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateTimeFormat.forStyle("--"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateTimeFormat.forStyle("ss"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForStyle_invalidStrings() { [EOL]     try { [EOL]         DateTimeFormat.forStyle("AA"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateTimeFormat.forStyle("--"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateTimeFormat.forStyle("ss"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForStyle_longDate() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.longDate(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("L-"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateInstance(DateFormat.LONG, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.LONG, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.LONG, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL] }
public void testForStyle_longDate() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.longDate(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("L-"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateInstance(DateFormat.LONG, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.LONG, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.LONG, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL] }
public void testForStyle_longDate() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.longDate(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("L-"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateInstance(DateFormat.LONG, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.LONG, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.LONG, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL] }
public void testToStandardSeconds() { [EOL]     Duration test = new Duration(0L); [EOL]     assertEquals(Seconds.seconds(0), test.toStandardSeconds()); [EOL]     test = new Duration(1L); [EOL]     assertEquals(Seconds.seconds(0), test.toStandardSeconds()); [EOL]     test = new Duration(999L); [EOL]     assertEquals(Seconds.seconds(0), test.toStandardSeconds()); [EOL]     test = new Duration(1000L); [EOL]     assertEquals(Seconds.seconds(1), test.toStandardSeconds()); [EOL]     test = new Duration(1001L); [EOL]     assertEquals(Seconds.seconds(1), test.toStandardSeconds()); [EOL]     test = new Duration(1999L); [EOL]     assertEquals(Seconds.seconds(1), test.toStandardSeconds()); [EOL]     test = new Duration(2000L); [EOL]     assertEquals(Seconds.seconds(2), test.toStandardSeconds()); [EOL]     test = new Duration(-1L); [EOL]     assertEquals(Seconds.seconds(0), test.toStandardSeconds()); [EOL]     test = new Duration(-999L); [EOL]     assertEquals(Seconds.seconds(0), test.toStandardSeconds()); [EOL]     test = new Duration(-1000L); [EOL]     assertEquals(Seconds.seconds(-1), test.toStandardSeconds()); [EOL] }
public void testToStandardSeconds() { [EOL]     Duration test = new Duration(0L); [EOL]     assertEquals(Seconds.seconds(0), test.toStandardSeconds()); [EOL]     test = new Duration(1L); [EOL]     assertEquals(Seconds.seconds(0), test.toStandardSeconds()); [EOL]     test = new Duration(999L); [EOL]     assertEquals(Seconds.seconds(0), test.toStandardSeconds()); [EOL]     test = new Duration(1000L); [EOL]     assertEquals(Seconds.seconds(1), test.toStandardSeconds()); [EOL]     test = new Duration(1001L); [EOL]     assertEquals(Seconds.seconds(1), test.toStandardSeconds()); [EOL]     test = new Duration(1999L); [EOL]     assertEquals(Seconds.seconds(1), test.toStandardSeconds()); [EOL]     test = new Duration(2000L); [EOL]     assertEquals(Seconds.seconds(2), test.toStandardSeconds()); [EOL]     test = new Duration(-1L); [EOL]     assertEquals(Seconds.seconds(0), test.toStandardSeconds()); [EOL]     test = new Duration(-999L); [EOL]     assertEquals(Seconds.seconds(0), test.toStandardSeconds()); [EOL]     test = new Duration(-1000L); [EOL]     assertEquals(Seconds.seconds(-1), test.toStandardSeconds()); [EOL] }
public void testPlus_long1() { [EOL]     Duration test = new Duration(123L); [EOL]     Duration result = test.plus(8000L); [EOL]     assertEquals(8123L, result.getMillis()); [EOL] }
public void testPlus_RD3() { [EOL]     Duration test = new Duration(123L); [EOL]     Duration result = test.plus(null); [EOL]     assertSame(test, result); [EOL] }
public void testPlus_RD3() { [EOL]     Duration test = new Duration(123L); [EOL]     Duration result = test.plus(null); [EOL]     assertSame(test, result); [EOL] }
public void testMultipliedBy_long2() { [EOL]     Duration test = new Duration(123L); [EOL]     Duration result = test.multipliedBy(1L); [EOL]     assertSame(test, result); [EOL] }
public void testMultipliedBy_long2() { [EOL]     Duration test = new Duration(123L); [EOL]     Duration result = test.multipliedBy(1L); [EOL]     assertSame(test, result); [EOL] }
public void testDividedBy_long1() { [EOL]     Duration test = new Duration(246L); [EOL]     Duration result = test.dividedBy(2L); [EOL]     assertEquals(123L, result.getMillis()); [EOL] }
public void testDividedBy_long1() { [EOL]     Duration test = new Duration(246L); [EOL]     Duration result = test.dividedBy(2L); [EOL]     assertEquals(123L, result.getMillis()); [EOL] }
public void testDividedBy_long1() { [EOL]     Duration test = new Duration(246L); [EOL]     Duration result = test.dividedBy(2L); [EOL]     assertEquals(123L, result.getMillis()); [EOL] }
public void testNegated_long2() { [EOL]     Duration test = new Duration(-246L); [EOL]     Duration result = test.negated(); [EOL]     assertEquals(246L, result.getMillis()); [EOL] }
public void testToStandardSeconds() { [EOL]     Duration test = new Duration(0L); [EOL]     assertEquals(Seconds.seconds(0), test.toStandardSeconds()); [EOL]     test = new Duration(1L); [EOL]     assertEquals(Seconds.seconds(0), test.toStandardSeconds()); [EOL]     test = new Duration(999L); [EOL]     assertEquals(Seconds.seconds(0), test.toStandardSeconds()); [EOL]     test = new Duration(1000L); [EOL]     assertEquals(Seconds.seconds(1), test.toStandardSeconds()); [EOL]     test = new Duration(1001L); [EOL]     assertEquals(Seconds.seconds(1), test.toStandardSeconds()); [EOL]     test = new Duration(1999L); [EOL]     assertEquals(Seconds.seconds(1), test.toStandardSeconds()); [EOL]     test = new Duration(2000L); [EOL]     assertEquals(Seconds.seconds(2), test.toStandardSeconds()); [EOL]     test = new Duration(-1L); [EOL]     assertEquals(Seconds.seconds(0), test.toStandardSeconds()); [EOL]     test = new Duration(-999L); [EOL]     assertEquals(Seconds.seconds(0), test.toStandardSeconds()); [EOL]     test = new Duration(-1000L); [EOL]     assertEquals(Seconds.seconds(-1), test.toStandardSeconds()); [EOL] }
public void testToStandardSeconds() { [EOL]     Duration test = new Duration(0L); [EOL]     assertEquals(Seconds.seconds(0), test.toStandardSeconds()); [EOL]     test = new Duration(1L); [EOL]     assertEquals(Seconds.seconds(0), test.toStandardSeconds()); [EOL]     test = new Duration(999L); [EOL]     assertEquals(Seconds.seconds(0), test.toStandardSeconds()); [EOL]     test = new Duration(1000L); [EOL]     assertEquals(Seconds.seconds(1), test.toStandardSeconds()); [EOL]     test = new Duration(1001L); [EOL]     assertEquals(Seconds.seconds(1), test.toStandardSeconds()); [EOL]     test = new Duration(1999L); [EOL]     assertEquals(Seconds.seconds(1), test.toStandardSeconds()); [EOL]     test = new Duration(2000L); [EOL]     assertEquals(Seconds.seconds(2), test.toStandardSeconds()); [EOL]     test = new Duration(-1L); [EOL]     assertEquals(Seconds.seconds(0), test.toStandardSeconds()); [EOL]     test = new Duration(-999L); [EOL]     assertEquals(Seconds.seconds(0), test.toStandardSeconds()); [EOL]     test = new Duration(-1000L); [EOL]     assertEquals(Seconds.seconds(-1), test.toStandardSeconds()); [EOL] }
public void testDurationFields() { [EOL]     final JulianChronology julian = JulianChronology.getInstance(); [EOL]     assertEquals("eras", julian.eras().getName()); [EOL]     assertEquals("centuries", julian.centuries().getName()); [EOL]     assertEquals("years", julian.years().getName()); [EOL]     assertEquals("weekyears", julian.weekyears().getName()); [EOL]     assertEquals("months", julian.months().getName()); [EOL]     assertEquals("weeks", julian.weeks().getName()); [EOL]     assertEquals("days", julian.days().getName()); [EOL]     assertEquals("halfdays", julian.halfdays().getName()); [EOL]     assertEquals("hours", julian.hours().getName()); [EOL]     assertEquals("minutes", julian.minutes().getName()); [EOL]     assertEquals("seconds", julian.seconds().getName()); [EOL]     assertEquals("millis", julian.millis().getName()); [EOL]     assertEquals(false, julian.eras().isSupported()); [EOL]     assertEquals(true, julian.centuries().isSupported()); [EOL]     assertEquals(true, julian.years().isSupported()); [EOL]     assertEquals(true, julian.weekyears().isSupported()); [EOL]     assertEquals(true, julian.months().isSupported()); [EOL]     assertEquals(true, julian.weeks().isSupported()); [EOL]     assertEquals(true, julian.days().isSupported()); [EOL]     assertEquals(true, julian.halfdays().isSupported()); [EOL]     assertEquals(true, julian.hours().isSupported()); [EOL]     assertEquals(true, julian.minutes().isSupported()); [EOL]     assertEquals(true, julian.seconds().isSupported()); [EOL]     assertEquals(true, julian.millis().isSupported()); [EOL]     assertEquals(false, julian.centuries().isPrecise()); [EOL]     assertEquals(false, julian.years().isPrecise()); [EOL]     assertEquals(false, julian.weekyears().isPrecise()); [EOL]     assertEquals(false, julian.months().isPrecise()); [EOL]     assertEquals(false, julian.weeks().isPrecise()); [EOL]     assertEquals(false, julian.days().isPrecise()); [EOL]     assertEquals(false, julian.halfdays().isPrecise()); [EOL]     assertEquals(true, julian.hours().isPrecise()); [EOL]     assertEquals(true, julian.minutes().isPrecise()); [EOL]     assertEquals(true, julian.seconds().isPrecise()); [EOL]     assertEquals(true, julian.millis().isPrecise()); [EOL]     final JulianChronology julianUTC = JulianChronology.getInstanceUTC(); [EOL]     assertEquals(false, julianUTC.centuries().isPrecise()); [EOL]     assertEquals(false, julianUTC.years().isPrecise()); [EOL]     assertEquals(false, julianUTC.weekyears().isPrecise()); [EOL]     assertEquals(false, julianUTC.months().isPrecise()); [EOL]     assertEquals(true, julianUTC.weeks().isPrecise()); [EOL]     assertEquals(true, julianUTC.days().isPrecise()); [EOL]     assertEquals(true, julianUTC.halfdays().isPrecise()); [EOL]     assertEquals(true, julianUTC.hours().isPrecise()); [EOL]     assertEquals(true, julianUTC.minutes().isPrecise()); [EOL]     assertEquals(true, julianUTC.seconds().isPrecise()); [EOL]     assertEquals(true, julianUTC.millis().isPrecise()); [EOL]     final DateTimeZone gmt = DateTimeZone.forID("Etc/GMT"); [EOL]     final JulianChronology julianGMT = JulianChronology.getInstance(gmt); [EOL]     assertEquals(false, julianGMT.centuries().isPrecise()); [EOL]     assertEquals(false, julianGMT.years().isPrecise()); [EOL]     assertEquals(false, julianGMT.weekyears().isPrecise()); [EOL]     assertEquals(false, julianGMT.months().isPrecise()); [EOL]     assertEquals(true, julianGMT.weeks().isPrecise()); [EOL]     assertEquals(true, julianGMT.days().isPrecise()); [EOL]     assertEquals(true, julianGMT.halfdays().isPrecise()); [EOL]     assertEquals(true, julianGMT.hours().isPrecise()); [EOL]     assertEquals(true, julianGMT.minutes().isPrecise()); [EOL]     assertEquals(true, julianGMT.seconds().isPrecise()); [EOL]     assertEquals(true, julianGMT.millis().isPrecise()); [EOL] }
public void test_DateTime_JustAfterLastEverOverlap() { [EOL]     DateTimeZone zone = new DateTimeZoneBuilder().setStandardOffset(-3 * DateTimeConstants.MILLIS_PER_HOUR).addRecurringSavings("SUMMER", 1 * DateTimeConstants.MILLIS_PER_HOUR, 2000, 2008, 'w', 4, 10, 0, true, 23 * DateTimeConstants.MILLIS_PER_HOUR).addRecurringSavings("WINTER", 0, 2000, 2008, 'w', 8, 10, 0, true, 0 * DateTimeConstants.MILLIS_PER_HOUR).toDateTimeZone("Zone", false); [EOL]     LocalDate date = new LocalDate(2008, 8, 10); [EOL]     assertEquals("2008-08-10", date.toString()); [EOL]     DateTime dt = date.toDateTimeAtStartOfDay(zone); [EOL]     assertEquals("2008-08-10T00:00:00.000-03:00", dt.toString()); [EOL] }
public void test_DateTime_JustAfterLastEverOverlap() { [EOL]     DateTimeZone zone = new DateTimeZoneBuilder().setStandardOffset(-3 * DateTimeConstants.MILLIS_PER_HOUR).addRecurringSavings("SUMMER", 1 * DateTimeConstants.MILLIS_PER_HOUR, 2000, 2008, 'w', 4, 10, 0, true, 23 * DateTimeConstants.MILLIS_PER_HOUR).addRecurringSavings("WINTER", 0, 2000, 2008, 'w', 8, 10, 0, true, 0 * DateTimeConstants.MILLIS_PER_HOUR).toDateTimeZone("Zone", false); [EOL]     LocalDate date = new LocalDate(2008, 8, 10); [EOL]     assertEquals("2008-08-10", date.toString()); [EOL]     DateTime dt = date.toDateTimeAtStartOfDay(zone); [EOL]     assertEquals("2008-08-10T00:00:00.000-03:00", dt.toString()); [EOL] }
public void test_DateTime_JustAfterLastEverOverlap() { [EOL]     DateTimeZone zone = new DateTimeZoneBuilder().setStandardOffset(-3 * DateTimeConstants.MILLIS_PER_HOUR).addRecurringSavings("SUMMER", 1 * DateTimeConstants.MILLIS_PER_HOUR, 2000, 2008, 'w', 4, 10, 0, true, 23 * DateTimeConstants.MILLIS_PER_HOUR).addRecurringSavings("WINTER", 0, 2000, 2008, 'w', 8, 10, 0, true, 0 * DateTimeConstants.MILLIS_PER_HOUR).toDateTimeZone("Zone", false); [EOL]     LocalDate date = new LocalDate(2008, 8, 10); [EOL]     assertEquals("2008-08-10", date.toString()); [EOL]     DateTime dt = date.toDateTimeAtStartOfDay(zone); [EOL]     assertEquals("2008-08-10T00:00:00.000-03:00", dt.toString()); [EOL] }
public void test_DateTime_JustAfterLastEverOverlap() { [EOL]     DateTimeZone zone = new DateTimeZoneBuilder().setStandardOffset(-3 * DateTimeConstants.MILLIS_PER_HOUR).addRecurringSavings("SUMMER", 1 * DateTimeConstants.MILLIS_PER_HOUR, 2000, 2008, 'w', 4, 10, 0, true, 23 * DateTimeConstants.MILLIS_PER_HOUR).addRecurringSavings("WINTER", 0, 2000, 2008, 'w', 8, 10, 0, true, 0 * DateTimeConstants.MILLIS_PER_HOUR).toDateTimeZone("Zone", false); [EOL]     LocalDate date = new LocalDate(2008, 8, 10); [EOL]     assertEquals("2008-08-10", date.toString()); [EOL]     DateTime dt = date.toDateTimeAtStartOfDay(zone); [EOL]     assertEquals("2008-08-10T00:00:00.000-03:00", dt.toString()); [EOL] }
public void test_DateTime_JustAfterLastEverOverlap() { [EOL]     DateTimeZone zone = new DateTimeZoneBuilder().setStandardOffset(-3 * DateTimeConstants.MILLIS_PER_HOUR).addRecurringSavings("SUMMER", 1 * DateTimeConstants.MILLIS_PER_HOUR, 2000, 2008, 'w', 4, 10, 0, true, 23 * DateTimeConstants.MILLIS_PER_HOUR).addRecurringSavings("WINTER", 0, 2000, 2008, 'w', 8, 10, 0, true, 0 * DateTimeConstants.MILLIS_PER_HOUR).toDateTimeZone("Zone", false); [EOL]     LocalDate date = new LocalDate(2008, 8, 10); [EOL]     assertEquals("2008-08-10", date.toString()); [EOL]     DateTime dt = date.toDateTimeAtStartOfDay(zone); [EOL]     assertEquals("2008-08-10T00:00:00.000-03:00", dt.toString()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void test_DateTime_roundFloor_hour_NewYork_Spring_postCutover() { [EOL]     DateTime dt = new DateTime(2007, 3, 11, 3, 30, 0, 0, ZONE_NEW_YORK); [EOL]     assertEquals("2007-03-11T03:30:00.000-04:00", dt.toString()); [EOL]     DateTime rounded = dt.hourOfDay().roundFloorCopy(); [EOL]     assertEquals("2007-03-11T03:00:00.000-04:00", rounded.toString()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void test_DateTime_JustAfterLastEverOverlap() { [EOL]     DateTimeZone zone = new DateTimeZoneBuilder().setStandardOffset(-3 * DateTimeConstants.MILLIS_PER_HOUR).addRecurringSavings("SUMMER", 1 * DateTimeConstants.MILLIS_PER_HOUR, 2000, 2008, 'w', 4, 10, 0, true, 23 * DateTimeConstants.MILLIS_PER_HOUR).addRecurringSavings("WINTER", 0, 2000, 2008, 'w', 8, 10, 0, true, 0 * DateTimeConstants.MILLIS_PER_HOUR).toDateTimeZone("Zone", false); [EOL]     LocalDate date = new LocalDate(2008, 8, 10); [EOL]     assertEquals("2008-08-10", date.toString()); [EOL]     DateTime dt = date.toDateTimeAtStartOfDay(zone); [EOL]     assertEquals("2008-08-10T00:00:00.000-03:00", dt.toString()); [EOL] }
public void test_DateTime_JustAfterLastEverOverlap() { [EOL]     DateTimeZone zone = new DateTimeZoneBuilder().setStandardOffset(-3 * DateTimeConstants.MILLIS_PER_HOUR).addRecurringSavings("SUMMER", 1 * DateTimeConstants.MILLIS_PER_HOUR, 2000, 2008, 'w', 4, 10, 0, true, 23 * DateTimeConstants.MILLIS_PER_HOUR).addRecurringSavings("WINTER", 0, 2000, 2008, 'w', 8, 10, 0, true, 0 * DateTimeConstants.MILLIS_PER_HOUR).toDateTimeZone("Zone", false); [EOL]     LocalDate date = new LocalDate(2008, 8, 10); [EOL]     assertEquals("2008-08-10", date.toString()); [EOL]     DateTime dt = date.toDateTimeAtStartOfDay(zone); [EOL]     assertEquals("2008-08-10T00:00:00.000-03:00", dt.toString()); [EOL] }
public void test_DateTime_JustAfterLastEverOverlap() { [EOL]     DateTimeZone zone = new DateTimeZoneBuilder().setStandardOffset(-3 * DateTimeConstants.MILLIS_PER_HOUR).addRecurringSavings("SUMMER", 1 * DateTimeConstants.MILLIS_PER_HOUR, 2000, 2008, 'w', 4, 10, 0, true, 23 * DateTimeConstants.MILLIS_PER_HOUR).addRecurringSavings("WINTER", 0, 2000, 2008, 'w', 8, 10, 0, true, 0 * DateTimeConstants.MILLIS_PER_HOUR).toDateTimeZone("Zone", false); [EOL]     LocalDate date = new LocalDate(2008, 8, 10); [EOL]     assertEquals("2008-08-10", date.toString()); [EOL]     DateTime dt = date.toDateTimeAtStartOfDay(zone); [EOL]     assertEquals("2008-08-10T00:00:00.000-03:00", dt.toString()); [EOL] }
public void test_DateTime_JustAfterLastEverOverlap() { [EOL]     DateTimeZone zone = new DateTimeZoneBuilder().setStandardOffset(-3 * DateTimeConstants.MILLIS_PER_HOUR).addRecurringSavings("SUMMER", 1 * DateTimeConstants.MILLIS_PER_HOUR, 2000, 2008, 'w', 4, 10, 0, true, 23 * DateTimeConstants.MILLIS_PER_HOUR).addRecurringSavings("WINTER", 0, 2000, 2008, 'w', 8, 10, 0, true, 0 * DateTimeConstants.MILLIS_PER_HOUR).toDateTimeZone("Zone", false); [EOL]     LocalDate date = new LocalDate(2008, 8, 10); [EOL]     assertEquals("2008-08-10", date.toString()); [EOL]     DateTime dt = date.toDateTimeAtStartOfDay(zone); [EOL]     assertEquals("2008-08-10T00:00:00.000-03:00", dt.toString()); [EOL] }
public void test_DateTime_JustAfterLastEverOverlap() { [EOL]     DateTimeZone zone = new DateTimeZoneBuilder().setStandardOffset(-3 * DateTimeConstants.MILLIS_PER_HOUR).addRecurringSavings("SUMMER", 1 * DateTimeConstants.MILLIS_PER_HOUR, 2000, 2008, 'w', 4, 10, 0, true, 23 * DateTimeConstants.MILLIS_PER_HOUR).addRecurringSavings("WINTER", 0, 2000, 2008, 'w', 8, 10, 0, true, 0 * DateTimeConstants.MILLIS_PER_HOUR).toDateTimeZone("Zone", false); [EOL]     LocalDate date = new LocalDate(2008, 8, 10); [EOL]     assertEquals("2008-08-10", date.toString()); [EOL]     DateTime dt = date.toDateTimeAtStartOfDay(zone); [EOL]     assertEquals("2008-08-10T00:00:00.000-03:00", dt.toString()); [EOL] }
public void test_DateTime_JustAfterLastEverOverlap() { [EOL]     DateTimeZone zone = new DateTimeZoneBuilder().setStandardOffset(-3 * DateTimeConstants.MILLIS_PER_HOUR).addRecurringSavings("SUMMER", 1 * DateTimeConstants.MILLIS_PER_HOUR, 2000, 2008, 'w', 4, 10, 0, true, 23 * DateTimeConstants.MILLIS_PER_HOUR).addRecurringSavings("WINTER", 0, 2000, 2008, 'w', 8, 10, 0, true, 0 * DateTimeConstants.MILLIS_PER_HOUR).toDateTimeZone("Zone", false); [EOL]     LocalDate date = new LocalDate(2008, 8, 10); [EOL]     assertEquals("2008-08-10", date.toString()); [EOL]     DateTime dt = date.toDateTimeAtStartOfDay(zone); [EOL]     assertEquals("2008-08-10T00:00:00.000-03:00", dt.toString()); [EOL] }
public void test_DateTime_JustAfterLastEverOverlap() { [EOL]     DateTimeZone zone = new DateTimeZoneBuilder().setStandardOffset(-3 * DateTimeConstants.MILLIS_PER_HOUR).addRecurringSavings("SUMMER", 1 * DateTimeConstants.MILLIS_PER_HOUR, 2000, 2008, 'w', 4, 10, 0, true, 23 * DateTimeConstants.MILLIS_PER_HOUR).addRecurringSavings("WINTER", 0, 2000, 2008, 'w', 8, 10, 0, true, 0 * DateTimeConstants.MILLIS_PER_HOUR).toDateTimeZone("Zone", false); [EOL]     LocalDate date = new LocalDate(2008, 8, 10); [EOL]     assertEquals("2008-08-10", date.toString()); [EOL]     DateTime dt = date.toDateTimeAtStartOfDay(zone); [EOL]     assertEquals("2008-08-10T00:00:00.000-03:00", dt.toString()); [EOL] }
public void test_DateTime_roundFloor_hour_NewYork_Spring_postCutover() { [EOL]     DateTime dt = new DateTime(2007, 3, 11, 3, 30, 0, 0, ZONE_NEW_YORK); [EOL]     assertEquals("2007-03-11T03:30:00.000-04:00", dt.toString()); [EOL]     DateTime rounded = dt.hourOfDay().roundFloorCopy(); [EOL]     assertEquals("2007-03-11T03:00:00.000-04:00", rounded.toString()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void test_getValue_long() { [EOL]     assertEquals(0, iField.getValue(0L)); [EOL]     assertEquals(12345678 / 90, iField.getValue(12345678L)); [EOL]     assertEquals(-1234 / 90, iField.getValue(-1234L)); [EOL]     assertEquals(INTEGER_MAX / 90, iField.getValue(LONG_INTEGER_MAX)); [EOL]     try { [EOL]         iField.getValue(LONG_INTEGER_MAX + 1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void test_getValueAsLong_long_long() { [EOL]     assertEquals(0L, iField.getValueAsLong(0L, 567L)); [EOL]     assertEquals(12345678 / 90L, iField.getValueAsLong(12345678L, 567L)); [EOL]     assertEquals(-1234 / 90L, iField.getValueAsLong(-1234L, 567L)); [EOL]     assertEquals(LONG_INTEGER_MAX + 1L, iField.getValueAsLong(LONG_INTEGER_MAX * 90L + 90L, 567L)); [EOL] }
public void test_getMillis_long() { [EOL]     assertEquals(0L, iField.getMillis(0L)); [EOL]     assertEquals(1234L * 90L, iField.getMillis(1234L)); [EOL]     assertEquals(-1234L * 90L, iField.getMillis(-1234L)); [EOL]     try { [EOL]         iField.getMillis(LONG_MAX); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void test_getMillis_long() { [EOL]     assertEquals(0L, iField.getMillis(0L)); [EOL]     assertEquals(1234L * 90L, iField.getMillis(1234L)); [EOL]     assertEquals(-1234L * 90L, iField.getMillis(-1234L)); [EOL]     try { [EOL]         iField.getMillis(LONG_MAX); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void test_getMillis_long() { [EOL]     assertEquals(0L, iField.getMillis(0L)); [EOL]     assertEquals(1234L * 90L, iField.getMillis(1234L)); [EOL]     assertEquals(-1234L * 90L, iField.getMillis(-1234L)); [EOL]     try { [EOL]         iField.getMillis(LONG_MAX); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void test_getMillis_long() { [EOL]     assertEquals(0L, iField.getMillis(0L)); [EOL]     assertEquals(1234L * 90L, iField.getMillis(1234L)); [EOL]     assertEquals(-1234L * 90L, iField.getMillis(-1234L)); [EOL]     try { [EOL]         iField.getMillis(LONG_MAX); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void test_getMillis_long() { [EOL]     assertEquals(0L, iField.getMillis(0L)); [EOL]     assertEquals(1234L * 90L, iField.getMillis(1234L)); [EOL]     assertEquals(-1234L * 90L, iField.getMillis(-1234L)); [EOL]     try { [EOL]         iField.getMillis(LONG_MAX); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void test_getDifferenceAsLong_long_long() { [EOL]     assertEquals(0L, iField.getDifferenceAsLong(1L, 0L)); [EOL]     assertEquals(567L, iField.getDifferenceAsLong(567L * 90L, 0L)); [EOL]     assertEquals(567L - 1234L, iField.getDifferenceAsLong(567L * 90L, 1234L * 90L)); [EOL]     assertEquals(567L + 1234L, iField.getDifferenceAsLong(567L * 90L, -1234L * 90L)); [EOL]     try { [EOL]         iField.getDifferenceAsLong(LONG_MAX, -1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void test_getDifferenceAsLong_long_long() { [EOL]     assertEquals(0L, iField.getDifferenceAsLong(1L, 0L)); [EOL]     assertEquals(567L, iField.getDifferenceAsLong(567L * 90L, 0L)); [EOL]     assertEquals(567L - 1234L, iField.getDifferenceAsLong(567L * 90L, 1234L * 90L)); [EOL]     assertEquals(567L + 1234L, iField.getDifferenceAsLong(567L * 90L, -1234L * 90L)); [EOL]     try { [EOL]         iField.getDifferenceAsLong(LONG_MAX, -1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void test_getDifferenceAsLong_long_long() { [EOL]     assertEquals(0L, iField.getDifferenceAsLong(1L, 0L)); [EOL]     assertEquals(567L, iField.getDifferenceAsLong(567L * 90L, 0L)); [EOL]     assertEquals(567L - 1234L, iField.getDifferenceAsLong(567L * 90L, 1234L * 90L)); [EOL]     assertEquals(567L + 1234L, iField.getDifferenceAsLong(567L * 90L, -1234L * 90L)); [EOL]     try { [EOL]         iField.getDifferenceAsLong(LONG_MAX, -1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void test_compareTo() { [EOL]     assertEquals(0, iField.compareTo(iField)); [EOL]     assertEquals(-1, iField.compareTo(ISOChronology.getInstance().minutes())); [EOL]     DurationField dummy = new PreciseDurationField(DurationFieldType.minutes(), 0); [EOL]     assertEquals(1, iField.compareTo(dummy)); [EOL]     try { [EOL]         iField.compareTo(null); [EOL]         fail(); [EOL]     } catch (NullPointerException ex) { [EOL]     } [EOL] }
public void test_compareTo() { [EOL]     assertEquals(0, iField.compareTo(iField)); [EOL]     assertEquals(-1, iField.compareTo(ISOChronology.getInstance().minutes())); [EOL]     DurationField dummy = new PreciseDurationField(DurationFieldType.minutes(), 0); [EOL]     assertEquals(1, iField.compareTo(dummy)); [EOL]     try { [EOL]         iField.compareTo(null); [EOL]         fail(); [EOL]     } catch (NullPointerException ex) { [EOL]     } [EOL] }
public void test_compareTo() { [EOL]     assertEquals(0, iField.compareTo(iField)); [EOL]     assertEquals(-1, iField.compareTo(ISOChronology.getInstance().minutes())); [EOL]     DurationField dummy = new PreciseDurationField(DurationFieldType.minutes(), 0); [EOL]     assertEquals(1, iField.compareTo(dummy)); [EOL]     try { [EOL]         iField.compareTo(null); [EOL]         fail(); [EOL]     } catch (NullPointerException ex) { [EOL]     } [EOL] }
public void test_getScalar() { [EOL]     assertEquals(90, iField.getScalar()); [EOL] }
public void test_equals() { [EOL]     assertEquals(true, iField.equals(iField)); [EOL]     assertEquals(false, iField.equals(ISOChronology.getInstance().minutes())); [EOL]     DurationField dummy = new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.minutes(), 2); [EOL]     assertEquals(false, iField.equals(dummy)); [EOL]     dummy = new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.minutes(), 90); [EOL]     assertEquals(true, iField.equals(dummy)); [EOL]     dummy = new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.millis(), 90); [EOL]     assertEquals(false, iField.equals(dummy)); [EOL]     assertEquals(false, iField.equals("")); [EOL]     assertEquals(false, iField.equals(null)); [EOL] }
public void test_equals() { [EOL]     assertEquals(true, iField.equals(iField)); [EOL]     assertEquals(false, iField.equals(ISOChronology.getInstance().minutes())); [EOL]     DurationField dummy = new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.minutes(), 2); [EOL]     assertEquals(false, iField.equals(dummy)); [EOL]     dummy = new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.minutes(), 90); [EOL]     assertEquals(true, iField.equals(dummy)); [EOL]     dummy = new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.millis(), 90); [EOL]     assertEquals(false, iField.equals(dummy)); [EOL]     assertEquals(false, iField.equals("")); [EOL]     assertEquals(false, iField.equals(null)); [EOL] }
public void test_equals() { [EOL]     assertEquals(true, iField.equals(iField)); [EOL]     assertEquals(false, iField.equals(ISOChronology.getInstance().minutes())); [EOL]     DurationField dummy = new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.minutes(), 2); [EOL]     assertEquals(false, iField.equals(dummy)); [EOL]     dummy = new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.minutes(), 90); [EOL]     assertEquals(true, iField.equals(dummy)); [EOL]     dummy = new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.millis(), 90); [EOL]     assertEquals(false, iField.equals(dummy)); [EOL]     assertEquals(false, iField.equals("")); [EOL]     assertEquals(false, iField.equals(null)); [EOL] }
public void test_equals() { [EOL]     assertEquals(true, iField.equals(iField)); [EOL]     assertEquals(false, iField.equals(ISOChronology.getInstance().minutes())); [EOL]     DurationField dummy = new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.minutes(), 2); [EOL]     assertEquals(false, iField.equals(dummy)); [EOL]     dummy = new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.minutes(), 90); [EOL]     assertEquals(true, iField.equals(dummy)); [EOL]     dummy = new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.millis(), 90); [EOL]     assertEquals(false, iField.equals(dummy)); [EOL]     assertEquals(false, iField.equals("")); [EOL]     assertEquals(false, iField.equals(null)); [EOL] }
public void test_equals() { [EOL]     assertEquals(true, iField.equals(iField)); [EOL]     assertEquals(false, iField.equals(ISOChronology.getInstance().minutes())); [EOL]     DurationField dummy = new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.minutes(), 2); [EOL]     assertEquals(false, iField.equals(dummy)); [EOL]     dummy = new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.minutes(), 90); [EOL]     assertEquals(true, iField.equals(dummy)); [EOL]     dummy = new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.millis(), 90); [EOL]     assertEquals(false, iField.equals(dummy)); [EOL]     assertEquals(false, iField.equals("")); [EOL]     assertEquals(false, iField.equals(null)); [EOL] }
public void testEqualsHashCode_ISO() { [EOL]     Chronology chrono1 = ISOChronology.getInstanceUTC(); [EOL]     Chronology chrono2 = ISOChronology.getInstanceUTC(); [EOL]     Chronology chrono3 = ISOChronology.getInstance(); [EOL]     assertEquals(true, chrono1.equals(chrono2)); [EOL]     assertEquals(false, chrono1.equals(chrono3)); [EOL]     DateTime dt1 = new DateTime(0L, chrono1); [EOL]     DateTime dt2 = new DateTime(0L, chrono2); [EOL]     DateTime dt3 = new DateTime(0L, chrono3); [EOL]     assertEquals(true, dt1.equals(dt2)); [EOL]     assertEquals(false, dt1.equals(dt3)); [EOL]     assertEquals(true, chrono1.hashCode() == chrono2.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono3.hashCode()); [EOL] }
public void testEqualsHashCode_ISO() { [EOL]     Chronology chrono1 = ISOChronology.getInstanceUTC(); [EOL]     Chronology chrono2 = ISOChronology.getInstanceUTC(); [EOL]     Chronology chrono3 = ISOChronology.getInstance(); [EOL]     assertEquals(true, chrono1.equals(chrono2)); [EOL]     assertEquals(false, chrono1.equals(chrono3)); [EOL]     DateTime dt1 = new DateTime(0L, chrono1); [EOL]     DateTime dt2 = new DateTime(0L, chrono2); [EOL]     DateTime dt3 = new DateTime(0L, chrono3); [EOL]     assertEquals(true, dt1.equals(dt2)); [EOL]     assertEquals(false, dt1.equals(dt3)); [EOL]     assertEquals(true, chrono1.hashCode() == chrono2.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono3.hashCode()); [EOL] }
public void testEqualsHashCode_ISO() { [EOL]     Chronology chrono1 = ISOChronology.getInstanceUTC(); [EOL]     Chronology chrono2 = ISOChronology.getInstanceUTC(); [EOL]     Chronology chrono3 = ISOChronology.getInstance(); [EOL]     assertEquals(true, chrono1.equals(chrono2)); [EOL]     assertEquals(false, chrono1.equals(chrono3)); [EOL]     DateTime dt1 = new DateTime(0L, chrono1); [EOL]     DateTime dt2 = new DateTime(0L, chrono2); [EOL]     DateTime dt3 = new DateTime(0L, chrono3); [EOL]     assertEquals(true, dt1.equals(dt2)); [EOL]     assertEquals(false, dt1.equals(dt3)); [EOL]     assertEquals(true, chrono1.hashCode() == chrono2.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono3.hashCode()); [EOL] }
public void testEqualsHashCode_ISO() { [EOL]     Chronology chrono1 = ISOChronology.getInstanceUTC(); [EOL]     Chronology chrono2 = ISOChronology.getInstanceUTC(); [EOL]     Chronology chrono3 = ISOChronology.getInstance(); [EOL]     assertEquals(true, chrono1.equals(chrono2)); [EOL]     assertEquals(false, chrono1.equals(chrono3)); [EOL]     DateTime dt1 = new DateTime(0L, chrono1); [EOL]     DateTime dt2 = new DateTime(0L, chrono2); [EOL]     DateTime dt3 = new DateTime(0L, chrono3); [EOL]     assertEquals(true, dt1.equals(dt2)); [EOL]     assertEquals(false, dt1.equals(dt3)); [EOL]     assertEquals(true, chrono1.hashCode() == chrono2.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono3.hashCode()); [EOL] }
public void testEqualsHashCode_ISO() { [EOL]     Chronology chrono1 = ISOChronology.getInstanceUTC(); [EOL]     Chronology chrono2 = ISOChronology.getInstanceUTC(); [EOL]     Chronology chrono3 = ISOChronology.getInstance(); [EOL]     assertEquals(true, chrono1.equals(chrono2)); [EOL]     assertEquals(false, chrono1.equals(chrono3)); [EOL]     DateTime dt1 = new DateTime(0L, chrono1); [EOL]     DateTime dt2 = new DateTime(0L, chrono2); [EOL]     DateTime dt3 = new DateTime(0L, chrono3); [EOL]     assertEquals(true, dt1.equals(dt2)); [EOL]     assertEquals(false, dt1.equals(dt3)); [EOL]     assertEquals(true, chrono1.hashCode() == chrono2.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono3.hashCode()); [EOL] }
public void test_getValueAsLong_long() { [EOL]     assertEquals(0L, iField.getValueAsLong(0L)); [EOL]     assertEquals(12345L, iField.getValueAsLong(12345678L)); [EOL]     assertEquals(-1L, iField.getValueAsLong(-1234L)); [EOL]     assertEquals(LONG_INTEGER_MAX + 1L, iField.getValueAsLong(LONG_INTEGER_MAX * 1000L + 1000L)); [EOL] }
public void test_getValue_long_long() { [EOL]     assertEquals(0, iField.getValue(0L, 567L)); [EOL]     assertEquals(12345, iField.getValue(12345678L, 567L)); [EOL]     assertEquals(-1, iField.getValue(-1234L, 567L)); [EOL]     assertEquals(INTEGER_MAX, iField.getValue(LONG_INTEGER_MAX * 1000L + 999L, 567L)); [EOL]     try { [EOL]         iField.getValue(LONG_INTEGER_MAX * 1000L + 1000L, 567L); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testDurationMonth() { [EOL]     DateTime dt11 = new DateTime(1999, 11, 2, 0, 0, 0, 0, ETHIOPIC_UTC); [EOL]     DateTime dt12 = new DateTime(1999, 12, 2, 0, 0, 0, 0, ETHIOPIC_UTC); [EOL]     DateTime dt13 = new DateTime(1999, 13, 2, 0, 0, 0, 0, ETHIOPIC_UTC); [EOL]     DateTime dt01 = new DateTime(2000, 1, 2, 0, 0, 0, 0, ETHIOPIC_UTC); [EOL]     DurationField fld = dt11.monthOfYear().getDurationField(); [EOL]     assertEquals(ETHIOPIC_UTC.months(), fld); [EOL]     assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1, dt11.getMillis())); [EOL]     assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2, dt11.getMillis())); [EOL]     assertEquals((2L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(3, dt11.getMillis())); [EOL]     assertEquals((3L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(4, dt11.getMillis())); [EOL]     assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1)); [EOL]     assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2)); [EOL]     assertEquals(13L * 30L * MILLIS_PER_DAY, fld.getMillis(13)); [EOL]     assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1L, dt11.getMillis())); [EOL]     assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2L, dt11.getMillis())); [EOL]     assertEquals((2L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(3L, dt11.getMillis())); [EOL]     assertEquals((3L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(4L, dt11.getMillis())); [EOL]     assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1L)); [EOL]     assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2L)); [EOL]     assertEquals(13L * 30L * MILLIS_PER_DAY, fld.getMillis(13L)); [EOL]     assertEquals(0, fld.getValue(1L * 30L * MILLIS_PER_DAY - 1L, dt11.getMillis())); [EOL]     assertEquals(1, fld.getValue(1L * 30L * MILLIS_PER_DAY, dt11.getMillis())); [EOL]     assertEquals(1, fld.getValue(1L * 30L * MILLIS_PER_DAY + 1L, dt11.getMillis())); [EOL]     assertEquals(1, fld.getValue(2L * 30L * MILLIS_PER_DAY - 1L, dt11.getMillis())); [EOL]     assertEquals(2, fld.getValue(2L * 30L * MILLIS_PER_DAY, dt11.getMillis())); [EOL]     assertEquals(2, fld.getValue(2L * 30L * MILLIS_PER_DAY + 1L, dt11.getMillis())); [EOL]     assertEquals(2, fld.getValue((2L * 30L + 6L) * MILLIS_PER_DAY - 1L, dt11.getMillis())); [EOL]     assertEquals(3, fld.getValue((2L * 30L + 6L) * MILLIS_PER_DAY, dt11.getMillis())); [EOL]     assertEquals(3, fld.getValue((2L * 30L + 6L) * MILLIS_PER_DAY + 1L, dt11.getMillis())); [EOL]     assertEquals(3, fld.getValue((3L * 30L + 6L) * MILLIS_PER_DAY - 1L, dt11.getMillis())); [EOL]     assertEquals(4, fld.getValue((3L * 30L + 6L) * MILLIS_PER_DAY, dt11.getMillis())); [EOL]     assertEquals(4, fld.getValue((3L * 30L + 6L) * MILLIS_PER_DAY + 1L, dt11.getMillis())); [EOL]     assertEquals(dt12.getMillis(), fld.add(dt11.getMillis(), 1)); [EOL]     assertEquals(dt13.getMillis(), fld.add(dt11.getMillis(), 2)); [EOL]     assertEquals(dt01.getMillis(), fld.add(dt11.getMillis(), 3)); [EOL]     assertEquals(dt12.getMillis(), fld.add(dt11.getMillis(), 1L)); [EOL]     assertEquals(dt13.getMillis(), fld.add(dt11.getMillis(), 2L)); [EOL]     assertEquals(dt01.getMillis(), fld.add(dt11.getMillis(), 3L)); [EOL] }
public void testDurationMonth() { [EOL]     DateTime dt11 = new DateTime(1999, 11, 2, 0, 0, 0, 0, ETHIOPIC_UTC); [EOL]     DateTime dt12 = new DateTime(1999, 12, 2, 0, 0, 0, 0, ETHIOPIC_UTC); [EOL]     DateTime dt13 = new DateTime(1999, 13, 2, 0, 0, 0, 0, ETHIOPIC_UTC); [EOL]     DateTime dt01 = new DateTime(2000, 1, 2, 0, 0, 0, 0, ETHIOPIC_UTC); [EOL]     DurationField fld = dt11.monthOfYear().getDurationField(); [EOL]     assertEquals(ETHIOPIC_UTC.months(), fld); [EOL]     assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1, dt11.getMillis())); [EOL]     assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2, dt11.getMillis())); [EOL]     assertEquals((2L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(3, dt11.getMillis())); [EOL]     assertEquals((3L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(4, dt11.getMillis())); [EOL]     assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1)); [EOL]     assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2)); [EOL]     assertEquals(13L * 30L * MILLIS_PER_DAY, fld.getMillis(13)); [EOL]     assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1L, dt11.getMillis())); [EOL]     assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2L, dt11.getMillis())); [EOL]     assertEquals((2L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(3L, dt11.getMillis())); [EOL]     assertEquals((3L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(4L, dt11.getMillis())); [EOL]     assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1L)); [EOL]     assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2L)); [EOL]     assertEquals(13L * 30L * MILLIS_PER_DAY, fld.getMillis(13L)); [EOL]     assertEquals(0, fld.getValue(1L * 30L * MILLIS_PER_DAY - 1L, dt11.getMillis())); [EOL]     assertEquals(1, fld.getValue(1L * 30L * MILLIS_PER_DAY, dt11.getMillis())); [EOL]     assertEquals(1, fld.getValue(1L * 30L * MILLIS_PER_DAY + 1L, dt11.getMillis())); [EOL]     assertEquals(1, fld.getValue(2L * 30L * MILLIS_PER_DAY - 1L, dt11.getMillis())); [EOL]     assertEquals(2, fld.getValue(2L * 30L * MILLIS_PER_DAY, dt11.getMillis())); [EOL]     assertEquals(2, fld.getValue(2L * 30L * MILLIS_PER_DAY + 1L, dt11.getMillis())); [EOL]     assertEquals(2, fld.getValue((2L * 30L + 6L) * MILLIS_PER_DAY - 1L, dt11.getMillis())); [EOL]     assertEquals(3, fld.getValue((2L * 30L + 6L) * MILLIS_PER_DAY, dt11.getMillis())); [EOL]     assertEquals(3, fld.getValue((2L * 30L + 6L) * MILLIS_PER_DAY + 1L, dt11.getMillis())); [EOL]     assertEquals(3, fld.getValue((3L * 30L + 6L) * MILLIS_PER_DAY - 1L, dt11.getMillis())); [EOL]     assertEquals(4, fld.getValue((3L * 30L + 6L) * MILLIS_PER_DAY, dt11.getMillis())); [EOL]     assertEquals(4, fld.getValue((3L * 30L + 6L) * MILLIS_PER_DAY + 1L, dt11.getMillis())); [EOL]     assertEquals(dt12.getMillis(), fld.add(dt11.getMillis(), 1)); [EOL]     assertEquals(dt13.getMillis(), fld.add(dt11.getMillis(), 2)); [EOL]     assertEquals(dt01.getMillis(), fld.add(dt11.getMillis(), 3)); [EOL]     assertEquals(dt12.getMillis(), fld.add(dt11.getMillis(), 1L)); [EOL]     assertEquals(dt13.getMillis(), fld.add(dt11.getMillis(), 2L)); [EOL]     assertEquals(dt01.getMillis(), fld.add(dt11.getMillis(), 3L)); [EOL] }
public void testSerializedCopticChronology() throws Exception { [EOL]     CopticChronology test = CopticChronology.getInstance(LONDON); [EOL]     loadAndCompare(test, "CopticChronology", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedCopticChronology() throws Exception { [EOL]     CopticChronology test = CopticChronology.getInstance(LONDON); [EOL]     loadAndCompare(test, "CopticChronology", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedCopticChronology() throws Exception { [EOL]     CopticChronology test = CopticChronology.getInstance(LONDON); [EOL]     loadAndCompare(test, "CopticChronology", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testFactory_parseMonths_String() { [EOL]     assertEquals(0, Months.parseMonths((String) null).getMonths()); [EOL]     assertEquals(0, Months.parseMonths("P0M").getMonths()); [EOL]     assertEquals(1, Months.parseMonths("P1M").getMonths()); [EOL]     assertEquals(-3, Months.parseMonths("P-3M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P0Y2M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P2MT0H0M").getMonths()); [EOL]     try { [EOL]         Months.parseMonths("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Months.parseMonths("P1MT1H"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_parseMonths_String() { [EOL]     assertEquals(0, Months.parseMonths((String) null).getMonths()); [EOL]     assertEquals(0, Months.parseMonths("P0M").getMonths()); [EOL]     assertEquals(1, Months.parseMonths("P1M").getMonths()); [EOL]     assertEquals(-3, Months.parseMonths("P-3M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P0Y2M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P2MT0H0M").getMonths()); [EOL]     try { [EOL]         Months.parseMonths("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Months.parseMonths("P1MT1H"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_parseMonths_String() { [EOL]     assertEquals(0, Months.parseMonths((String) null).getMonths()); [EOL]     assertEquals(0, Months.parseMonths("P0M").getMonths()); [EOL]     assertEquals(1, Months.parseMonths("P1M").getMonths()); [EOL]     assertEquals(-3, Months.parseMonths("P-3M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P0Y2M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P2MT0H0M").getMonths()); [EOL]     try { [EOL]         Months.parseMonths("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Months.parseMonths("P1MT1H"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_parseMonths_String() { [EOL]     assertEquals(0, Months.parseMonths((String) null).getMonths()); [EOL]     assertEquals(0, Months.parseMonths("P0M").getMonths()); [EOL]     assertEquals(1, Months.parseMonths("P1M").getMonths()); [EOL]     assertEquals(-3, Months.parseMonths("P-3M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P0Y2M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P2MT0H0M").getMonths()); [EOL]     try { [EOL]         Months.parseMonths("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Months.parseMonths("P1MT1H"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_parseMonths_String() { [EOL]     assertEquals(0, Months.parseMonths((String) null).getMonths()); [EOL]     assertEquals(0, Months.parseMonths("P0M").getMonths()); [EOL]     assertEquals(1, Months.parseMonths("P1M").getMonths()); [EOL]     assertEquals(-3, Months.parseMonths("P-3M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P0Y2M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P2MT0H0M").getMonths()); [EOL]     try { [EOL]         Months.parseMonths("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Months.parseMonths("P1MT1H"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_parseMonths_String() { [EOL]     assertEquals(0, Months.parseMonths((String) null).getMonths()); [EOL]     assertEquals(0, Months.parseMonths("P0M").getMonths()); [EOL]     assertEquals(1, Months.parseMonths("P1M").getMonths()); [EOL]     assertEquals(-3, Months.parseMonths("P-3M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P0Y2M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P2MT0H0M").getMonths()); [EOL]     try { [EOL]         Months.parseMonths("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Months.parseMonths("P1MT1H"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_parseMonths_String() { [EOL]     assertEquals(0, Months.parseMonths((String) null).getMonths()); [EOL]     assertEquals(0, Months.parseMonths("P0M").getMonths()); [EOL]     assertEquals(1, Months.parseMonths("P1M").getMonths()); [EOL]     assertEquals(-3, Months.parseMonths("P-3M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P0Y2M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P2MT0H0M").getMonths()); [EOL]     try { [EOL]         Months.parseMonths("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Months.parseMonths("P1MT1H"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_parseMonths_String() { [EOL]     assertEquals(0, Months.parseMonths((String) null).getMonths()); [EOL]     assertEquals(0, Months.parseMonths("P0M").getMonths()); [EOL]     assertEquals(1, Months.parseMonths("P1M").getMonths()); [EOL]     assertEquals(-3, Months.parseMonths("P-3M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P0Y2M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P2MT0H0M").getMonths()); [EOL]     try { [EOL]         Months.parseMonths("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Months.parseMonths("P1MT1H"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_parseMonths_String() { [EOL]     assertEquals(0, Months.parseMonths((String) null).getMonths()); [EOL]     assertEquals(0, Months.parseMonths("P0M").getMonths()); [EOL]     assertEquals(1, Months.parseMonths("P1M").getMonths()); [EOL]     assertEquals(-3, Months.parseMonths("P-3M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P0Y2M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P2MT0H0M").getMonths()); [EOL]     try { [EOL]         Months.parseMonths("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Months.parseMonths("P1MT1H"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_parseMonths_String() { [EOL]     assertEquals(0, Months.parseMonths((String) null).getMonths()); [EOL]     assertEquals(0, Months.parseMonths("P0M").getMonths()); [EOL]     assertEquals(1, Months.parseMonths("P1M").getMonths()); [EOL]     assertEquals(-3, Months.parseMonths("P-3M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P0Y2M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P2MT0H0M").getMonths()); [EOL]     try { [EOL]         Months.parseMonths("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Months.parseMonths("P1MT1H"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_parseMonths_String() { [EOL]     assertEquals(0, Months.parseMonths((String) null).getMonths()); [EOL]     assertEquals(0, Months.parseMonths("P0M").getMonths()); [EOL]     assertEquals(1, Months.parseMonths("P1M").getMonths()); [EOL]     assertEquals(-3, Months.parseMonths("P-3M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P0Y2M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P2MT0H0M").getMonths()); [EOL]     try { [EOL]         Months.parseMonths("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Months.parseMonths("P1MT1H"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_parseMonths_String() { [EOL]     assertEquals(0, Months.parseMonths((String) null).getMonths()); [EOL]     assertEquals(0, Months.parseMonths("P0M").getMonths()); [EOL]     assertEquals(1, Months.parseMonths("P1M").getMonths()); [EOL]     assertEquals(-3, Months.parseMonths("P-3M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P0Y2M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P2MT0H0M").getMonths()); [EOL]     try { [EOL]         Months.parseMonths("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Months.parseMonths("P1MT1H"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_parseMonths_String() { [EOL]     assertEquals(0, Months.parseMonths((String) null).getMonths()); [EOL]     assertEquals(0, Months.parseMonths("P0M").getMonths()); [EOL]     assertEquals(1, Months.parseMonths("P1M").getMonths()); [EOL]     assertEquals(-3, Months.parseMonths("P-3M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P0Y2M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P2MT0H0M").getMonths()); [EOL]     try { [EOL]         Months.parseMonths("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Months.parseMonths("P1MT1H"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_parseMonths_String() { [EOL]     assertEquals(0, Months.parseMonths((String) null).getMonths()); [EOL]     assertEquals(0, Months.parseMonths("P0M").getMonths()); [EOL]     assertEquals(1, Months.parseMonths("P1M").getMonths()); [EOL]     assertEquals(-3, Months.parseMonths("P-3M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P0Y2M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P2MT0H0M").getMonths()); [EOL]     try { [EOL]         Months.parseMonths("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Months.parseMonths("P1MT1H"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_parseMonths_String() { [EOL]     assertEquals(0, Months.parseMonths((String) null).getMonths()); [EOL]     assertEquals(0, Months.parseMonths("P0M").getMonths()); [EOL]     assertEquals(1, Months.parseMonths("P1M").getMonths()); [EOL]     assertEquals(-3, Months.parseMonths("P-3M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P0Y2M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P2MT0H0M").getMonths()); [EOL]     try { [EOL]         Months.parseMonths("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Months.parseMonths("P1MT1H"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_parseMonths_String() { [EOL]     assertEquals(0, Months.parseMonths((String) null).getMonths()); [EOL]     assertEquals(0, Months.parseMonths("P0M").getMonths()); [EOL]     assertEquals(1, Months.parseMonths("P1M").getMonths()); [EOL]     assertEquals(-3, Months.parseMonths("P-3M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P0Y2M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P2MT0H0M").getMonths()); [EOL]     try { [EOL]         Months.parseMonths("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Months.parseMonths("P1MT1H"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_parseMonths_String() { [EOL]     assertEquals(0, Months.parseMonths((String) null).getMonths()); [EOL]     assertEquals(0, Months.parseMonths("P0M").getMonths()); [EOL]     assertEquals(1, Months.parseMonths("P1M").getMonths()); [EOL]     assertEquals(-3, Months.parseMonths("P-3M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P0Y2M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P2MT0H0M").getMonths()); [EOL]     try { [EOL]         Months.parseMonths("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Months.parseMonths("P1MT1H"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_parseMonths_String() { [EOL]     assertEquals(0, Months.parseMonths((String) null).getMonths()); [EOL]     assertEquals(0, Months.parseMonths("P0M").getMonths()); [EOL]     assertEquals(1, Months.parseMonths("P1M").getMonths()); [EOL]     assertEquals(-3, Months.parseMonths("P-3M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P0Y2M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P2MT0H0M").getMonths()); [EOL]     try { [EOL]         Months.parseMonths("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Months.parseMonths("P1MT1H"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_parseMonths_String() { [EOL]     assertEquals(0, Months.parseMonths((String) null).getMonths()); [EOL]     assertEquals(0, Months.parseMonths("P0M").getMonths()); [EOL]     assertEquals(1, Months.parseMonths("P1M").getMonths()); [EOL]     assertEquals(-3, Months.parseMonths("P-3M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P0Y2M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P2MT0H0M").getMonths()); [EOL]     try { [EOL]         Months.parseMonths("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Months.parseMonths("P1MT1H"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_parseMonths_String() { [EOL]     assertEquals(0, Months.parseMonths((String) null).getMonths()); [EOL]     assertEquals(0, Months.parseMonths("P0M").getMonths()); [EOL]     assertEquals(1, Months.parseMonths("P1M").getMonths()); [EOL]     assertEquals(-3, Months.parseMonths("P-3M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P0Y2M").getMonths()); [EOL]     assertEquals(2, Months.parseMonths("P2MT0H0M").getMonths()); [EOL]     try { [EOL]         Months.parseMonths("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Months.parseMonths("P1MT1H"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testMinus_Months() { [EOL]     Months test2 = Months.months(2); [EOL]     Months test3 = Months.months(3); [EOL]     Months result = test2.minus(test3); [EOL]     assertEquals(2, test2.getMonths()); [EOL]     assertEquals(3, test3.getMonths()); [EOL]     assertEquals(-1, result.getMonths()); [EOL]     assertEquals(1, Months.ONE.minus(Months.ZERO).getMonths()); [EOL]     assertEquals(1, Months.ONE.minus((Months) null).getMonths()); [EOL]     try { [EOL]         Months.MIN_VALUE.minus(Months.ONE); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMinus_Months() { [EOL]     Months test2 = Months.months(2); [EOL]     Months test3 = Months.months(3); [EOL]     Months result = test2.minus(test3); [EOL]     assertEquals(2, test2.getMonths()); [EOL]     assertEquals(3, test3.getMonths()); [EOL]     assertEquals(-1, result.getMonths()); [EOL]     assertEquals(1, Months.ONE.minus(Months.ZERO).getMonths()); [EOL]     assertEquals(1, Months.ONE.minus((Months) null).getMonths()); [EOL]     try { [EOL]         Months.MIN_VALUE.minus(Months.ONE); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testPlus_Months() { [EOL]     Months test2 = Months.months(2); [EOL]     Months test3 = Months.months(3); [EOL]     Months result = test2.plus(test3); [EOL]     assertEquals(2, test2.getMonths()); [EOL]     assertEquals(3, test3.getMonths()); [EOL]     assertEquals(5, result.getMonths()); [EOL]     assertEquals(1, Months.ONE.plus(Months.ZERO).getMonths()); [EOL]     assertEquals(1, Months.ONE.plus((Months) null).getMonths()); [EOL]     try { [EOL]         Months.MAX_VALUE.plus(Months.ONE); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testPlus_Months() { [EOL]     Months test2 = Months.months(2); [EOL]     Months test3 = Months.months(3); [EOL]     Months result = test2.plus(test3); [EOL]     assertEquals(2, test2.getMonths()); [EOL]     assertEquals(3, test3.getMonths()); [EOL]     assertEquals(5, result.getMonths()); [EOL]     assertEquals(1, Months.ONE.plus(Months.ZERO).getMonths()); [EOL]     assertEquals(1, Months.ONE.plus((Months) null).getMonths()); [EOL]     try { [EOL]         Months.MAX_VALUE.plus(Months.ONE); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMinus_Months() { [EOL]     Months test2 = Months.months(2); [EOL]     Months test3 = Months.months(3); [EOL]     Months result = test2.minus(test3); [EOL]     assertEquals(2, test2.getMonths()); [EOL]     assertEquals(3, test3.getMonths()); [EOL]     assertEquals(-1, result.getMonths()); [EOL]     assertEquals(1, Months.ONE.minus(Months.ZERO).getMonths()); [EOL]     assertEquals(1, Months.ONE.minus((Months) null).getMonths()); [EOL]     try { [EOL]         Months.MIN_VALUE.minus(Months.ONE); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMinus_Months() { [EOL]     Months test2 = Months.months(2); [EOL]     Months test3 = Months.months(3); [EOL]     Months result = test2.minus(test3); [EOL]     assertEquals(2, test2.getMonths()); [EOL]     assertEquals(3, test3.getMonths()); [EOL]     assertEquals(-1, result.getMonths()); [EOL]     assertEquals(1, Months.ONE.minus(Months.ZERO).getMonths()); [EOL]     assertEquals(1, Months.ONE.minus((Months) null).getMonths()); [EOL]     try { [EOL]         Months.MIN_VALUE.minus(Months.ONE); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMinus_Months() { [EOL]     Months test2 = Months.months(2); [EOL]     Months test3 = Months.months(3); [EOL]     Months result = test2.minus(test3); [EOL]     assertEquals(2, test2.getMonths()); [EOL]     assertEquals(3, test3.getMonths()); [EOL]     assertEquals(-1, result.getMonths()); [EOL]     assertEquals(1, Months.ONE.minus(Months.ZERO).getMonths()); [EOL]     assertEquals(1, Months.ONE.minus((Months) null).getMonths()); [EOL]     try { [EOL]         Months.MIN_VALUE.minus(Months.ONE); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMinus_Months() { [EOL]     Months test2 = Months.months(2); [EOL]     Months test3 = Months.months(3); [EOL]     Months result = test2.minus(test3); [EOL]     assertEquals(2, test2.getMonths()); [EOL]     assertEquals(3, test3.getMonths()); [EOL]     assertEquals(-1, result.getMonths()); [EOL]     assertEquals(1, Months.ONE.minus(Months.ZERO).getMonths()); [EOL]     assertEquals(1, Months.ONE.minus((Months) null).getMonths()); [EOL]     try { [EOL]         Months.MIN_VALUE.minus(Months.ONE); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMinus_Months() { [EOL]     Months test2 = Months.months(2); [EOL]     Months test3 = Months.months(3); [EOL]     Months result = test2.minus(test3); [EOL]     assertEquals(2, test2.getMonths()); [EOL]     assertEquals(3, test3.getMonths()); [EOL]     assertEquals(-1, result.getMonths()); [EOL]     assertEquals(1, Months.ONE.minus(Months.ZERO).getMonths()); [EOL]     assertEquals(1, Months.ONE.minus((Months) null).getMonths()); [EOL]     try { [EOL]         Months.MIN_VALUE.minus(Months.ONE); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testToString() { [EOL]     Months test = Months.months(20); [EOL]     assertEquals("P20M", test.toString()); [EOL]     test = Months.months(-20); [EOL]     assertEquals("P-20M", test.toString()); [EOL] }
public void testConstructor_long_long_nullZone() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     Interval test = new Interval(dt1.getMillis(), dt2.getMillis(), (DateTimeZone) null); [EOL]     assertEquals(dt1.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt2.getMillis(), test.getEndMillis()); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL] }
public void testConstructor_long_long_nullZone() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     Interval test = new Interval(dt1.getMillis(), dt2.getMillis(), (DateTimeZone) null); [EOL]     assertEquals(dt1.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt2.getMillis(), test.getEndMillis()); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL] }
public void testConstructor_long_long_nullZone() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     Interval test = new Interval(dt1.getMillis(), dt2.getMillis(), (DateTimeZone) null); [EOL]     assertEquals(dt1.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt2.getMillis(), test.getEndMillis()); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL] }
public void testGap_RInterval_zone() { [EOL]     Interval testA = new Interval(new DateTime(3, LONDON), new DateTime(7, LONDON)); [EOL]     assertEquals(ISOChronology.getInstance(LONDON), testA.getChronology()); [EOL]     Interval testB = new Interval(new DateTime(1, MOSCOW), new DateTime(2, MOSCOW)); [EOL]     assertEquals(ISOChronology.getInstance(MOSCOW), testB.getChronology()); [EOL]     Interval resultAB = testA.gap(testB); [EOL]     assertEquals(ISOChronology.getInstance(LONDON), resultAB.getChronology()); [EOL]     Interval resultBA = testB.gap(testA); [EOL]     assertEquals(ISOChronology.getInstance(MOSCOW), resultBA.getChronology()); [EOL] }
public void testGap_RInterval_zone() { [EOL]     Interval testA = new Interval(new DateTime(3, LONDON), new DateTime(7, LONDON)); [EOL]     assertEquals(ISOChronology.getInstance(LONDON), testA.getChronology()); [EOL]     Interval testB = new Interval(new DateTime(1, MOSCOW), new DateTime(2, MOSCOW)); [EOL]     assertEquals(ISOChronology.getInstance(MOSCOW), testB.getChronology()); [EOL]     Interval resultAB = testA.gap(testB); [EOL]     assertEquals(ISOChronology.getInstance(LONDON), resultAB.getChronology()); [EOL]     Interval resultBA = testB.gap(testA); [EOL]     assertEquals(ISOChronology.getInstance(MOSCOW), resultBA.getChronology()); [EOL] }
public void testGap_RInterval_zone() { [EOL]     Interval testA = new Interval(new DateTime(3, LONDON), new DateTime(7, LONDON)); [EOL]     assertEquals(ISOChronology.getInstance(LONDON), testA.getChronology()); [EOL]     Interval testB = new Interval(new DateTime(1, MOSCOW), new DateTime(2, MOSCOW)); [EOL]     assertEquals(ISOChronology.getInstance(MOSCOW), testB.getChronology()); [EOL]     Interval resultAB = testA.gap(testB); [EOL]     assertEquals(ISOChronology.getInstance(LONDON), resultAB.getChronology()); [EOL]     Interval resultBA = testB.gap(testA); [EOL]     assertEquals(ISOChronology.getInstance(MOSCOW), resultBA.getChronology()); [EOL] }
public void testAbuts_RInterval_null() { [EOL]     DateTimeUtils.setCurrentMillisFixed(2); [EOL]     assertEquals(false, interval37.abuts((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(true, interval37.abuts((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(4); [EOL]     assertEquals(false, interval37.abuts((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(6); [EOL]     assertEquals(false, interval37.abuts((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(7); [EOL]     assertEquals(true, interval37.abuts((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(8); [EOL]     assertEquals(false, interval37.abuts((ReadableInterval) null)); [EOL] }
public void testAbuts_RInterval_null() { [EOL]     DateTimeUtils.setCurrentMillisFixed(2); [EOL]     assertEquals(false, interval37.abuts((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(true, interval37.abuts((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(4); [EOL]     assertEquals(false, interval37.abuts((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(6); [EOL]     assertEquals(false, interval37.abuts((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(7); [EOL]     assertEquals(true, interval37.abuts((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(8); [EOL]     assertEquals(false, interval37.abuts((ReadableInterval) null)); [EOL] }
public void testAbuts_RInterval_null() { [EOL]     DateTimeUtils.setCurrentMillisFixed(2); [EOL]     assertEquals(false, interval37.abuts((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(true, interval37.abuts((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(4); [EOL]     assertEquals(false, interval37.abuts((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(6); [EOL]     assertEquals(false, interval37.abuts((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(7); [EOL]     assertEquals(true, interval37.abuts((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(8); [EOL]     assertEquals(false, interval37.abuts((ReadableInterval) null)); [EOL] }
public void testAbuts_RInterval_null() { [EOL]     DateTimeUtils.setCurrentMillisFixed(2); [EOL]     assertEquals(false, interval37.abuts((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(true, interval37.abuts((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(4); [EOL]     assertEquals(false, interval37.abuts((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(6); [EOL]     assertEquals(false, interval37.abuts((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(7); [EOL]     assertEquals(true, interval37.abuts((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(8); [EOL]     assertEquals(false, interval37.abuts((ReadableInterval) null)); [EOL] }
public void testWithChronology2() { [EOL]     Interval base = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS); [EOL]     Interval test = base.withChronology(null); [EOL]     assertEquals(new Interval(TEST_TIME1, TEST_TIME2, ISOChronology.getInstance()), test); [EOL] }
public void testWithChronology2() { [EOL]     Interval base = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS); [EOL]     Interval test = base.withChronology(null); [EOL]     assertEquals(new Interval(TEST_TIME1, TEST_TIME2, ISOChronology.getInstance()), test); [EOL] }
public void testWithStartMillis_long2() { [EOL]     Interval test = new Interval(TEST_TIME1, TEST_TIME2); [EOL]     try { [EOL]         test.withStartMillis(TEST_TIME2 + 1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithStartMillis_long2() { [EOL]     Interval test = new Interval(TEST_TIME1, TEST_TIME2); [EOL]     try { [EOL]         test.withStartMillis(TEST_TIME2 + 1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithStartInstant_RI2() { [EOL]     Interval test = new Interval(TEST_TIME1, TEST_TIME2); [EOL]     try { [EOL]         test.withStart(new Instant(TEST_TIME2 + 1)); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithDurationAfterStart4() throws Throwable { [EOL]     Interval base = new Interval(TEST_TIME_NOW, TEST_TIME2, COPTIC_PARIS); [EOL]     Interval test = base.withDurationAfterStart(base.toDuration()); [EOL]     assertSame(base, test); [EOL] }
public void testWithDurationAfterStart4() throws Throwable { [EOL]     Interval base = new Interval(TEST_TIME_NOW, TEST_TIME2, COPTIC_PARIS); [EOL]     Interval test = base.withDurationAfterStart(base.toDuration()); [EOL]     assertSame(base, test); [EOL] }
public void testWithPeriodBeforeEnd2() throws Throwable { [EOL]     Interval base = new Interval(TEST_TIME_NOW, TEST_TIME2, COPTIC_PARIS); [EOL]     Interval test = base.withPeriodBeforeEnd(null); [EOL]     assertEquals(new Interval(TEST_TIME2, TEST_TIME2, COPTIC_PARIS), test); [EOL] }
public void testWithPeriodBeforeEnd2() throws Throwable { [EOL]     Interval base = new Interval(TEST_TIME_NOW, TEST_TIME2, COPTIC_PARIS); [EOL]     Interval test = base.withPeriodBeforeEnd(null); [EOL]     assertEquals(new Interval(TEST_TIME2, TEST_TIME2, COPTIC_PARIS), test); [EOL] }
public void testConstructor_DateTimeZone() throws Throwable { [EOL]     DateTime dt = new DateTime(2005, 6, 30, 23, 59, 0, 0, LONDON); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     YearMonth test = new YearMonth(LONDON); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2005, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(test, YearMonth.now(LONDON)); [EOL]     test = new YearMonth(PARIS); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2005, test.getYear()); [EOL]     assertEquals(7, test.getMonthOfYear()); [EOL]     assertEquals(test, YearMonth.now(PARIS)); [EOL] }
public void testConstructor_DateTimeZone() throws Throwable { [EOL]     DateTime dt = new DateTime(2005, 6, 30, 23, 59, 0, 0, LONDON); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     YearMonth test = new YearMonth(LONDON); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2005, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(test, YearMonth.now(LONDON)); [EOL]     test = new YearMonth(PARIS); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2005, test.getYear()); [EOL]     assertEquals(7, test.getMonthOfYear()); [EOL]     assertEquals(test, YearMonth.now(PARIS)); [EOL] }
public void testParse_noFormatter() throws Throwable { [EOL]     assertEquals(new YearMonth(2010, 6), YearMonth.parse("2010-06-30")); [EOL]     assertEquals(new YearMonth(2010, 1), YearMonth.parse("2010-002")); [EOL] }
public void testParse_noFormatter() throws Throwable { [EOL]     assertEquals(new YearMonth(2010, 6), YearMonth.parse("2010-06-30")); [EOL]     assertEquals(new YearMonth(2010, 1), YearMonth.parse("2010-002")); [EOL] }
public void testParse_noFormatter() throws Throwable { [EOL]     assertEquals(new YearMonth(2010, 6), YearMonth.parse("2010-06-30")); [EOL]     assertEquals(new YearMonth(2010, 1), YearMonth.parse("2010-002")); [EOL] }
public void testConstructor_DateTimeZone() throws Throwable { [EOL]     DateTime dt = new DateTime(2005, 6, 30, 23, 59, 0, 0, LONDON); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     YearMonth test = new YearMonth(LONDON); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2005, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(test, YearMonth.now(LONDON)); [EOL]     test = new YearMonth(PARIS); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2005, test.getYear()); [EOL]     assertEquals(7, test.getMonthOfYear()); [EOL]     assertEquals(test, YearMonth.now(PARIS)); [EOL] }
public void testConstructor_DateTimeZone() throws Throwable { [EOL]     DateTime dt = new DateTime(2005, 6, 30, 23, 59, 0, 0, LONDON); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     YearMonth test = new YearMonth(LONDON); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2005, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(test, YearMonth.now(LONDON)); [EOL]     test = new YearMonth(PARIS); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2005, test.getYear()); [EOL]     assertEquals(7, test.getMonthOfYear()); [EOL]     assertEquals(test, YearMonth.now(PARIS)); [EOL] }
public void testConstructor_DateTimeZone() throws Throwable { [EOL]     DateTime dt = new DateTime(2005, 6, 30, 23, 59, 0, 0, LONDON); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     YearMonth test = new YearMonth(LONDON); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2005, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(test, YearMonth.now(LONDON)); [EOL]     test = new YearMonth(PARIS); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2005, test.getYear()); [EOL]     assertEquals(7, test.getMonthOfYear()); [EOL]     assertEquals(test, YearMonth.now(PARIS)); [EOL] }
public void testConstructor_DateTimeZone() throws Throwable { [EOL]     DateTime dt = new DateTime(2005, 6, 30, 23, 59, 0, 0, LONDON); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     YearMonth test = new YearMonth(LONDON); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2005, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(test, YearMonth.now(LONDON)); [EOL]     test = new YearMonth(PARIS); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2005, test.getYear()); [EOL]     assertEquals(7, test.getMonthOfYear()); [EOL]     assertEquals(test, YearMonth.now(PARIS)); [EOL] }
public void testConstructor_DateTimeZone() throws Throwable { [EOL]     DateTime dt = new DateTime(2005, 6, 30, 23, 59, 0, 0, LONDON); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     YearMonth test = new YearMonth(LONDON); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2005, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(test, YearMonth.now(LONDON)); [EOL]     test = new YearMonth(PARIS); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2005, test.getYear()); [EOL]     assertEquals(7, test.getMonthOfYear()); [EOL]     assertEquals(test, YearMonth.now(PARIS)); [EOL] }
public void testConstructor_DateTimeZone() throws Throwable { [EOL]     DateTime dt = new DateTime(2005, 6, 30, 23, 59, 0, 0, LONDON); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     YearMonth test = new YearMonth(LONDON); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2005, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(test, YearMonth.now(LONDON)); [EOL]     test = new YearMonth(PARIS); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2005, test.getYear()); [EOL]     assertEquals(7, test.getMonthOfYear()); [EOL]     assertEquals(test, YearMonth.now(PARIS)); [EOL] }
public void testConstructor_DateTimeZone() throws Throwable { [EOL]     DateTime dt = new DateTime(2005, 6, 30, 23, 59, 0, 0, LONDON); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     YearMonth test = new YearMonth(LONDON); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2005, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(test, YearMonth.now(LONDON)); [EOL]     test = new YearMonth(PARIS); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2005, test.getYear()); [EOL]     assertEquals(7, test.getMonthOfYear()); [EOL]     assertEquals(test, YearMonth.now(PARIS)); [EOL] }
public void testConstructor_DateTimeZone() throws Throwable { [EOL]     DateTime dt = new DateTime(2005, 6, 30, 23, 59, 0, 0, LONDON); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     YearMonth test = new YearMonth(LONDON); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2005, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(test, YearMonth.now(LONDON)); [EOL]     test = new YearMonth(PARIS); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2005, test.getYear()); [EOL]     assertEquals(7, test.getMonthOfYear()); [EOL]     assertEquals(test, YearMonth.now(PARIS)); [EOL] }
public void testConstructor_DateTimeZone() throws Throwable { [EOL]     DateTime dt = new DateTime(2005, 6, 30, 23, 59, 0, 0, LONDON); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     YearMonth test = new YearMonth(LONDON); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2005, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(test, YearMonth.now(LONDON)); [EOL]     test = new YearMonth(PARIS); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2005, test.getYear()); [EOL]     assertEquals(7, test.getMonthOfYear()); [EOL]     assertEquals(test, YearMonth.now(PARIS)); [EOL] }
public void testConstructor_DateTimeZone() throws Throwable { [EOL]     DateTime dt = new DateTime(2005, 6, 30, 23, 59, 0, 0, LONDON); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     YearMonth test = new YearMonth(LONDON); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2005, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(test, YearMonth.now(LONDON)); [EOL]     test = new YearMonth(PARIS); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2005, test.getYear()); [EOL]     assertEquals(7, test.getMonthOfYear()); [EOL]     assertEquals(test, YearMonth.now(PARIS)); [EOL] }
public void testConstructor_DateTimeZone() throws Throwable { [EOL]     DateTime dt = new DateTime(2005, 6, 30, 23, 59, 0, 0, LONDON); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     YearMonth test = new YearMonth(LONDON); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2005, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(test, YearMonth.now(LONDON)); [EOL]     test = new YearMonth(PARIS); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2005, test.getYear()); [EOL]     assertEquals(7, test.getMonthOfYear()); [EOL]     assertEquals(test, YearMonth.now(PARIS)); [EOL] }
public void testConstructor_nullChronology() throws Throwable { [EOL]     YearMonth test = new YearMonth((Chronology) null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL] }
public void testConstructor_nullChronology() throws Throwable { [EOL]     YearMonth test = new YearMonth((Chronology) null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL] }
public void testConstructor_nullChronology() throws Throwable { [EOL]     YearMonth test = new YearMonth((Chronology) null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL] }
public void testConstructor_nullChronology() throws Throwable { [EOL]     YearMonth test = new YearMonth((Chronology) null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL] }
public void testConstructor_nullChronology() throws Throwable { [EOL]     YearMonth test = new YearMonth((Chronology) null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL] }
public void testConstructor_nullChronology() throws Throwable { [EOL]     YearMonth test = new YearMonth((Chronology) null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL] }
public void testConstructor_nullChronology() throws Throwable { [EOL]     YearMonth test = new YearMonth((Chronology) null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL] }
public void testConstructor_nullChronology() throws Throwable { [EOL]     YearMonth test = new YearMonth((Chronology) null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL] }
public void testConstructor_nullChronology() throws Throwable { [EOL]     YearMonth test = new YearMonth((Chronology) null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL] }
public void testConstructor_nullChronology() throws Throwable { [EOL]     YearMonth test = new YearMonth((Chronology) null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL] }
public void testConstructor_nullChronology() throws Throwable { [EOL]     YearMonth test = new YearMonth((Chronology) null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL] }
public void testConstructor_long1_Chronology() throws Throwable { [EOL]     YearMonth test = new YearMonth(TEST_TIME1, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL] }
public void testConstructor_long1_Chronology() throws Throwable { [EOL]     YearMonth test = new YearMonth(TEST_TIME1, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL] }
public void testConstructor_long1_Chronology() throws Throwable { [EOL]     YearMonth test = new YearMonth(TEST_TIME1, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL] }
public void testConstructor_long1_Chronology() throws Throwable { [EOL]     YearMonth test = new YearMonth(TEST_TIME1, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL] }
public void testConstructor_long1_Chronology() throws Throwable { [EOL]     YearMonth test = new YearMonth(TEST_TIME1, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL] }
public void testConstructor_long1_Chronology() throws Throwable { [EOL]     YearMonth test = new YearMonth(TEST_TIME1, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL] }
public void testConstructor_long1_Chronology() throws Throwable { [EOL]     YearMonth test = new YearMonth(TEST_TIME1, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL] }
public void testConstructor_long1_Chronology() throws Throwable { [EOL]     YearMonth test = new YearMonth(TEST_TIME1, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL] }
public void testConstructor_long1_Chronology() throws Throwable { [EOL]     YearMonth test = new YearMonth(TEST_TIME1, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL] }
public void testConstructor_long1_Chronology() throws Throwable { [EOL]     YearMonth test = new YearMonth(TEST_TIME1, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL] }
public void testConstructor_long1_Chronology() throws Throwable { [EOL]     YearMonth test = new YearMonth(TEST_TIME1, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL] }
public void testConstructor_long1_Chronology() throws Throwable { [EOL]     YearMonth test = new YearMonth(TEST_TIME1, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL] }
public void testConstructor_long1_Chronology() throws Throwable { [EOL]     YearMonth test = new YearMonth(TEST_TIME1, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL] }
public void testConstructor_long1_Chronology() throws Throwable { [EOL]     YearMonth test = new YearMonth(TEST_TIME1, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL] }
public void testConstructor_long1_Chronology() throws Throwable { [EOL]     YearMonth test = new YearMonth(TEST_TIME1, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL] }
public void testConstructor_long1_Chronology() throws Throwable { [EOL]     YearMonth test = new YearMonth(TEST_TIME1, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL] }
public void testSerialization() throws Exception { [EOL]     YearMonth test = new YearMonth(1972, 6, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     YearMonth result = (YearMonth) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testGetField() { [EOL]     YearMonth test = new YearMonth(COPTIC_PARIS); [EOL]     assertSame(COPTIC_UTC.year(), test.getField(0)); [EOL]     assertSame(COPTIC_UTC.monthOfYear(), test.getField(1)); [EOL]     try { [EOL]         test.getField(-1); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         test.getField(2); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] }
public void testConstructor_nullChronology() throws Throwable { [EOL]     YearMonth test = new YearMonth((Chronology) null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL] }
public void testConstructor_nullChronology() throws Throwable { [EOL]     YearMonth test = new YearMonth((Chronology) null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL] }
public void testMinusMonths_int() { [EOL]     YearMonth test = new YearMonth(2002, 5, BuddhistChronology.getInstance()); [EOL]     YearMonth result = test.minusMonths(1); [EOL]     YearMonth expected = new YearMonth(2002, 4, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusMonths(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusMonths_int() { [EOL]     YearMonth test = new YearMonth(2002, 5, BuddhistChronology.getInstance()); [EOL]     YearMonth result = test.minusMonths(1); [EOL]     YearMonth expected = new YearMonth(2002, 4, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusMonths(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusMonths_int() { [EOL]     YearMonth test = new YearMonth(2002, 5, BuddhistChronology.getInstance()); [EOL]     YearMonth result = test.minusMonths(1); [EOL]     YearMonth expected = new YearMonth(2002, 4, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusMonths(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusMonths_int() { [EOL]     YearMonth test = new YearMonth(2002, 5, BuddhistChronology.getInstance()); [EOL]     YearMonth result = test.minusMonths(1); [EOL]     YearMonth expected = new YearMonth(2002, 4, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusMonths(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusMonths_int() { [EOL]     YearMonth test = new YearMonth(2002, 5, BuddhistChronology.getInstance()); [EOL]     YearMonth result = test.minusMonths(1); [EOL]     YearMonth expected = new YearMonth(2002, 4, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusMonths(0); [EOL]     assertSame(test, result); [EOL] }
public void testPropertySetTextYear() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.year().setCopy("12"); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 12, 6); [EOL] }
public void testPropertySetTextYear() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.year().setCopy("12"); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 12, 6); [EOL] }
public void testPropertySetTextYear() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.year().setCopy("12"); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 12, 6); [EOL] }
public void testPropertySetTextYear() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.year().setCopy("12"); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 12, 6); [EOL] }
public void testPropertySetTextYear() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.year().setCopy("12"); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 12, 6); [EOL] }
public void testPropertySetTextYear() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.year().setCopy("12"); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 12, 6); [EOL] }
public void testPropertySetTextYear() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.year().setCopy("12"); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 12, 6); [EOL] }
public void testPropertySetTextYear() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.year().setCopy("12"); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 12, 6); [EOL] }
public void testPropertySetTextYear() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.year().setCopy("12"); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 12, 6); [EOL] }
public void testPropertySetTextYear() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.year().setCopy("12"); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 12, 6); [EOL] }
public void testPropertySetTextYear() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.year().setCopy("12"); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 12, 6); [EOL] }
public void testPropertySetTextYear() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.year().setCopy("12"); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 12, 6); [EOL] }
public void testPropertySetTextYear() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.year().setCopy("12"); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 12, 6); [EOL] }
public void testPropertySetTextYear() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.year().setCopy("12"); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 12, 6); [EOL] }
public void testPropertySetTextYear() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.year().setCopy("12"); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 12, 6); [EOL] }
public void testPropertySetTextYear() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.year().setCopy("12"); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 12, 6); [EOL] }
public void testPropertySetTextYear() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.year().setCopy("12"); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 12, 6); [EOL] }
public void testPropertySetTextYear() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.year().setCopy("12"); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 12, 6); [EOL] }
public void testPropertySetTextYear() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.year().setCopy("12"); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 12, 6); [EOL] }
public void testPropertySetTextYear() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.year().setCopy("12"); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 12, 6); [EOL] }
public void testPropertySetTextYear() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.year().setCopy("12"); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 12, 6); [EOL] }
public void testPropertySetTextYear() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.year().setCopy("12"); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 12, 6); [EOL] }
public void testPropertySetTextYear() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.year().setCopy("12"); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 12, 6); [EOL] }
public void testPropertySetTextYear() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.year().setCopy("12"); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 12, 6); [EOL] }
public void testPropertySetTextYear() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.year().setCopy("12"); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 12, 6); [EOL] }
public void testPropertySetTextYear() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.year().setCopy("12"); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 12, 6); [EOL] }
public void testPropertySetTextYear() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.year().setCopy("12"); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 12, 6); [EOL] }
public void testPropertySetTextYear() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.year().setCopy("12"); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 12, 6); [EOL] }
public void testPropertySetTextYear() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.year().setCopy("12"); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 12, 6); [EOL] }
public void testPropertySetTextYear() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.year().setCopy("12"); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 12, 6); [EOL] }
public void testPropertySetTextYear() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.year().setCopy("12"); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 12, 6); [EOL] }
public void testPropertySetTextYear() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.year().setCopy("12"); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 12, 6); [EOL] }
public void testPropertySetTextYear() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.year().setCopy("12"); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 12, 6); [EOL] }
public void testPropertySetTextYear() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.year().setCopy("12"); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 12, 6); [EOL] }
public void testPropertySetTextYear() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.year().setCopy("12"); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 12, 6); [EOL] }
public void testPropertySetTextYear() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.year().setCopy("12"); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 12, 6); [EOL] }
public void testPropertySetTextYear() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.year().setCopy("12"); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 12, 6); [EOL] }
public void testPropertySetTextYear() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.year().setCopy("12"); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 12, 6); [EOL] }
public void testPropertySetTextYear() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.year().setCopy("12"); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 12, 6); [EOL] }
public void testPropertySetTextYear() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.year().setCopy("12"); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 12, 6); [EOL] }
public void testPropertySetTextYear() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.year().setCopy("12"); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 12, 6); [EOL] }
public void testPropertySetTextYear() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.year().setCopy("12"); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 12, 6); [EOL] }
public void testPropertySetTextYear() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.year().setCopy("12"); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 12, 6); [EOL] }
public void test_getAsShortText_long() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     assertEquals("29", field.getAsShortText(60L * 29)); [EOL] }
public void test_getAsShortText_long() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     assertEquals("29", field.getAsShortText(60L * 29)); [EOL] }
public void test_addWrapField_long_int() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     assertEquals(1029, field.addWrapField(60L * 29, 0)); [EOL]     assertEquals(1059, field.addWrapField(60L * 29, 30)); [EOL]     assertEquals(1000, field.addWrapField(60L * 29, 31)); [EOL] }
public void test_addWrapField_long_int() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     assertEquals(1029, field.addWrapField(60L * 29, 0)); [EOL]     assertEquals(1059, field.addWrapField(60L * 29, 30)); [EOL]     assertEquals(1000, field.addWrapField(60L * 29, 31)); [EOL] }
public void test_addWrapField_long_int() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     assertEquals(1029, field.addWrapField(60L * 29, 0)); [EOL]     assertEquals(1059, field.addWrapField(60L * 29, 30)); [EOL]     assertEquals(1000, field.addWrapField(60L * 29, 31)); [EOL] }
public void test_addWrapField_RP_int_intarray_int() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     int[] values = new int[] { 10, 20, 30, 40 }; [EOL]     int[] expected = new int[] { 10, 20, 30, 40 }; [EOL]     int[] result = field.addWrapField(new TimeOfDay(), 2, values, 0); [EOL]     assertEquals(true, Arrays.equals(result, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 59, 40 }; [EOL]     result = field.addWrapField(new TimeOfDay(), 2, values, 29); [EOL]     assertEquals(true, Arrays.equals(result, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 0, 40 }; [EOL]     result = field.addWrapField(new TimeOfDay(), 2, values, 30); [EOL]     assertEquals(true, Arrays.equals(result, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 1, 40 }; [EOL]     result = field.addWrapField(new TimeOfDay(), 2, values, 31); [EOL]     assertEquals(true, Arrays.equals(result, expected)); [EOL] }
public void test_addWrapField_RP_int_intarray_int() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     int[] values = new int[] { 10, 20, 30, 40 }; [EOL]     int[] expected = new int[] { 10, 20, 30, 40 }; [EOL]     int[] result = field.addWrapField(new TimeOfDay(), 2, values, 0); [EOL]     assertEquals(true, Arrays.equals(result, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 59, 40 }; [EOL]     result = field.addWrapField(new TimeOfDay(), 2, values, 29); [EOL]     assertEquals(true, Arrays.equals(result, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 0, 40 }; [EOL]     result = field.addWrapField(new TimeOfDay(), 2, values, 30); [EOL]     assertEquals(true, Arrays.equals(result, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 1, 40 }; [EOL]     result = field.addWrapField(new TimeOfDay(), 2, values, 31); [EOL]     assertEquals(true, Arrays.equals(result, expected)); [EOL] }
public void test_addWrapField_RP_int_intarray_int() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     int[] values = new int[] { 10, 20, 30, 40 }; [EOL]     int[] expected = new int[] { 10, 20, 30, 40 }; [EOL]     int[] result = field.addWrapField(new TimeOfDay(), 2, values, 0); [EOL]     assertEquals(true, Arrays.equals(result, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 59, 40 }; [EOL]     result = field.addWrapField(new TimeOfDay(), 2, values, 29); [EOL]     assertEquals(true, Arrays.equals(result, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 0, 40 }; [EOL]     result = field.addWrapField(new TimeOfDay(), 2, values, 30); [EOL]     assertEquals(true, Arrays.equals(result, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 1, 40 }; [EOL]     result = field.addWrapField(new TimeOfDay(), 2, values, 31); [EOL]     assertEquals(true, Arrays.equals(result, expected)); [EOL] }
public void test_addWrapField_RP_int_intarray_int() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     int[] values = new int[] { 10, 20, 30, 40 }; [EOL]     int[] expected = new int[] { 10, 20, 30, 40 }; [EOL]     int[] result = field.addWrapField(new TimeOfDay(), 2, values, 0); [EOL]     assertEquals(true, Arrays.equals(result, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 59, 40 }; [EOL]     result = field.addWrapField(new TimeOfDay(), 2, values, 29); [EOL]     assertEquals(true, Arrays.equals(result, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 0, 40 }; [EOL]     result = field.addWrapField(new TimeOfDay(), 2, values, 30); [EOL]     assertEquals(true, Arrays.equals(result, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 1, 40 }; [EOL]     result = field.addWrapField(new TimeOfDay(), 2, values, 31); [EOL]     assertEquals(true, Arrays.equals(result, expected)); [EOL] }
public void test_set_long_String_Locale() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     assertEquals(1000, field.set(0L, "0", null)); [EOL]     assertEquals(1029, field.set(0L, "29", Locale.ENGLISH)); [EOL] }
public void test_isLeap_long() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     assertEquals(false, field.isLeap(0L)); [EOL] }
public void test_remainder_long() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     assertEquals(0L, field.remainder(0L)); [EOL]     assertEquals(29L, field.remainder(29L)); [EOL]     assertEquals(30L, field.remainder(30L)); [EOL]     assertEquals(31L, field.remainder(31L)); [EOL]     assertEquals(0L, field.remainder(60L)); [EOL] }
public void testSerialization() throws Exception { [EOL]     LocalDate test = new LocalDate(1972, 6, 9, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     LocalDate result = (LocalDate) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testSerialization() throws Exception { [EOL]     LocalDate test = new LocalDate(1972, 6, 9, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     LocalDate result = (LocalDate) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testSerialization() throws Exception { [EOL]     LocalDate test = new LocalDate(1972, 6, 9, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     LocalDate result = (LocalDate) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testSerialization() throws Exception { [EOL]     LocalDate test = new LocalDate(1972, 6, 9, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     LocalDate result = (LocalDate) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testSerialization() throws Exception { [EOL]     LocalDate test = new LocalDate(1972, 6, 9, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     LocalDate result = (LocalDate) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testSerialization() throws Exception { [EOL]     LocalDate test = new LocalDate(1972, 6, 9, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     LocalDate result = (LocalDate) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testWithers() { [EOL]     DateTime test = new DateTime(1970, 6, 9, 10, 20, 30, 40, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     DateTime test = new DateTime(1970, 6, 9, 10, 20, 30, 40, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     DateTime test = new DateTime(1970, 6, 9, 10, 20, 30, 40, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     DateTime test = new DateTime(1970, 6, 9, 10, 20, 30, 40, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testDurationFields() { [EOL]     final JulianChronology julian = JulianChronology.getInstance(); [EOL]     assertEquals("eras", julian.eras().getName()); [EOL]     assertEquals("centuries", julian.centuries().getName()); [EOL]     assertEquals("years", julian.years().getName()); [EOL]     assertEquals("weekyears", julian.weekyears().getName()); [EOL]     assertEquals("months", julian.months().getName()); [EOL]     assertEquals("weeks", julian.weeks().getName()); [EOL]     assertEquals("days", julian.days().getName()); [EOL]     assertEquals("halfdays", julian.halfdays().getName()); [EOL]     assertEquals("hours", julian.hours().getName()); [EOL]     assertEquals("minutes", julian.minutes().getName()); [EOL]     assertEquals("seconds", julian.seconds().getName()); [EOL]     assertEquals("millis", julian.millis().getName()); [EOL]     assertEquals(false, julian.eras().isSupported()); [EOL]     assertEquals(true, julian.centuries().isSupported()); [EOL]     assertEquals(true, julian.years().isSupported()); [EOL]     assertEquals(true, julian.weekyears().isSupported()); [EOL]     assertEquals(true, julian.months().isSupported()); [EOL]     assertEquals(true, julian.weeks().isSupported()); [EOL]     assertEquals(true, julian.days().isSupported()); [EOL]     assertEquals(true, julian.halfdays().isSupported()); [EOL]     assertEquals(true, julian.hours().isSupported()); [EOL]     assertEquals(true, julian.minutes().isSupported()); [EOL]     assertEquals(true, julian.seconds().isSupported()); [EOL]     assertEquals(true, julian.millis().isSupported()); [EOL]     assertEquals(false, julian.centuries().isPrecise()); [EOL]     assertEquals(false, julian.years().isPrecise()); [EOL]     assertEquals(false, julian.weekyears().isPrecise()); [EOL]     assertEquals(false, julian.months().isPrecise()); [EOL]     assertEquals(false, julian.weeks().isPrecise()); [EOL]     assertEquals(false, julian.days().isPrecise()); [EOL]     assertEquals(false, julian.halfdays().isPrecise()); [EOL]     assertEquals(true, julian.hours().isPrecise()); [EOL]     assertEquals(true, julian.minutes().isPrecise()); [EOL]     assertEquals(true, julian.seconds().isPrecise()); [EOL]     assertEquals(true, julian.millis().isPrecise()); [EOL]     final JulianChronology julianUTC = JulianChronology.getInstanceUTC(); [EOL]     assertEquals(false, julianUTC.centuries().isPrecise()); [EOL]     assertEquals(false, julianUTC.years().isPrecise()); [EOL]     assertEquals(false, julianUTC.weekyears().isPrecise()); [EOL]     assertEquals(false, julianUTC.months().isPrecise()); [EOL]     assertEquals(true, julianUTC.weeks().isPrecise()); [EOL]     assertEquals(true, julianUTC.days().isPrecise()); [EOL]     assertEquals(true, julianUTC.halfdays().isPrecise()); [EOL]     assertEquals(true, julianUTC.hours().isPrecise()); [EOL]     assertEquals(true, julianUTC.minutes().isPrecise()); [EOL]     assertEquals(true, julianUTC.seconds().isPrecise()); [EOL]     assertEquals(true, julianUTC.millis().isPrecise()); [EOL]     final DateTimeZone gmt = DateTimeZone.forID("Etc/GMT"); [EOL]     final JulianChronology julianGMT = JulianChronology.getInstance(gmt); [EOL]     assertEquals(false, julianGMT.centuries().isPrecise()); [EOL]     assertEquals(false, julianGMT.years().isPrecise()); [EOL]     assertEquals(false, julianGMT.weekyears().isPrecise()); [EOL]     assertEquals(false, julianGMT.months().isPrecise()); [EOL]     assertEquals(true, julianGMT.weeks().isPrecise()); [EOL]     assertEquals(true, julianGMT.days().isPrecise()); [EOL]     assertEquals(true, julianGMT.halfdays().isPrecise()); [EOL]     assertEquals(true, julianGMT.hours().isPrecise()); [EOL]     assertEquals(true, julianGMT.minutes().isPrecise()); [EOL]     assertEquals(true, julianGMT.seconds().isPrecise()); [EOL]     assertEquals(true, julianGMT.millis().isPrecise()); [EOL] }
public void testDurationFields() { [EOL]     final JulianChronology julian = JulianChronology.getInstance(); [EOL]     assertEquals("eras", julian.eras().getName()); [EOL]     assertEquals("centuries", julian.centuries().getName()); [EOL]     assertEquals("years", julian.years().getName()); [EOL]     assertEquals("weekyears", julian.weekyears().getName()); [EOL]     assertEquals("months", julian.months().getName()); [EOL]     assertEquals("weeks", julian.weeks().getName()); [EOL]     assertEquals("days", julian.days().getName()); [EOL]     assertEquals("halfdays", julian.halfdays().getName()); [EOL]     assertEquals("hours", julian.hours().getName()); [EOL]     assertEquals("minutes", julian.minutes().getName()); [EOL]     assertEquals("seconds", julian.seconds().getName()); [EOL]     assertEquals("millis", julian.millis().getName()); [EOL]     assertEquals(false, julian.eras().isSupported()); [EOL]     assertEquals(true, julian.centuries().isSupported()); [EOL]     assertEquals(true, julian.years().isSupported()); [EOL]     assertEquals(true, julian.weekyears().isSupported()); [EOL]     assertEquals(true, julian.months().isSupported()); [EOL]     assertEquals(true, julian.weeks().isSupported()); [EOL]     assertEquals(true, julian.days().isSupported()); [EOL]     assertEquals(true, julian.halfdays().isSupported()); [EOL]     assertEquals(true, julian.hours().isSupported()); [EOL]     assertEquals(true, julian.minutes().isSupported()); [EOL]     assertEquals(true, julian.seconds().isSupported()); [EOL]     assertEquals(true, julian.millis().isSupported()); [EOL]     assertEquals(false, julian.centuries().isPrecise()); [EOL]     assertEquals(false, julian.years().isPrecise()); [EOL]     assertEquals(false, julian.weekyears().isPrecise()); [EOL]     assertEquals(false, julian.months().isPrecise()); [EOL]     assertEquals(false, julian.weeks().isPrecise()); [EOL]     assertEquals(false, julian.days().isPrecise()); [EOL]     assertEquals(false, julian.halfdays().isPrecise()); [EOL]     assertEquals(true, julian.hours().isPrecise()); [EOL]     assertEquals(true, julian.minutes().isPrecise()); [EOL]     assertEquals(true, julian.seconds().isPrecise()); [EOL]     assertEquals(true, julian.millis().isPrecise()); [EOL]     final JulianChronology julianUTC = JulianChronology.getInstanceUTC(); [EOL]     assertEquals(false, julianUTC.centuries().isPrecise()); [EOL]     assertEquals(false, julianUTC.years().isPrecise()); [EOL]     assertEquals(false, julianUTC.weekyears().isPrecise()); [EOL]     assertEquals(false, julianUTC.months().isPrecise()); [EOL]     assertEquals(true, julianUTC.weeks().isPrecise()); [EOL]     assertEquals(true, julianUTC.days().isPrecise()); [EOL]     assertEquals(true, julianUTC.halfdays().isPrecise()); [EOL]     assertEquals(true, julianUTC.hours().isPrecise()); [EOL]     assertEquals(true, julianUTC.minutes().isPrecise()); [EOL]     assertEquals(true, julianUTC.seconds().isPrecise()); [EOL]     assertEquals(true, julianUTC.millis().isPrecise()); [EOL]     final DateTimeZone gmt = DateTimeZone.forID("Etc/GMT"); [EOL]     final JulianChronology julianGMT = JulianChronology.getInstance(gmt); [EOL]     assertEquals(false, julianGMT.centuries().isPrecise()); [EOL]     assertEquals(false, julianGMT.years().isPrecise()); [EOL]     assertEquals(false, julianGMT.weekyears().isPrecise()); [EOL]     assertEquals(false, julianGMT.months().isPrecise()); [EOL]     assertEquals(true, julianGMT.weeks().isPrecise()); [EOL]     assertEquals(true, julianGMT.days().isPrecise()); [EOL]     assertEquals(true, julianGMT.halfdays().isPrecise()); [EOL]     assertEquals(true, julianGMT.hours().isPrecise()); [EOL]     assertEquals(true, julianGMT.minutes().isPrecise()); [EOL]     assertEquals(true, julianGMT.seconds().isPrecise()); [EOL]     assertEquals(true, julianGMT.millis().isPrecise()); [EOL] }
public void testSerialization() throws Exception { [EOL]     LocalDate test = new LocalDate(1972, 6, 9, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     LocalDate result = (LocalDate) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testSerialization() throws Exception { [EOL]     LocalDate test = new LocalDate(1972, 6, 9, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     LocalDate result = (LocalDate) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testWithers() { [EOL]     DateTime test = new DateTime(1970, 6, 9, 10, 20, 30, 40, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     DateTime test = new DateTime(1970, 6, 9, 10, 20, 30, 40, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     DateTime test = new DateTime(1970, 6, 9, 10, 20, 30, 40, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testFormat_yearOfEra_twoDigit() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "04", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "23", f.print(dt)); [EOL]     f = f.withZoneUTC(); [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(1922, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("22")); [EOL]     expect = new DateTime(2021, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("21")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = f.withPivotYear(new Integer(2050)); [EOL]     expect = new DateTime(2000, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("00")); [EOL]     expect = new DateTime(2099, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("99")); [EOL]     f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     f = f.withZoneUTC(); [EOL]     f.parseDateTime("5"); [EOL]     f.parseDateTime("005"); [EOL]     f.parseDateTime("+50"); [EOL]     f.parseDateTime("-50"); [EOL] }
public void testParseCustom1() { [EOL]     PeriodFormatter formatter = new PeriodFormatterBuilder().printZeroAlways().appendHours().appendSuffix(":").minimumPrintedDigits(2).appendMinutes().toFormatter(); [EOL]     Period p; [EOL]     p = new Period(47, 55, 0, 0); [EOL]     assertEquals("47:55", formatter.print(p)); [EOL]     assertEquals(p, formatter.parsePeriod("47:55")); [EOL]     assertEquals(p, formatter.parsePeriod("047:055")); [EOL]     p = new Period(7, 5, 0, 0); [EOL]     assertEquals("7:05", formatter.print(p)); [EOL]     assertEquals(p, formatter.parsePeriod("7:05")); [EOL]     assertEquals(p, formatter.parsePeriod("7:5")); [EOL]     assertEquals(p, formatter.parsePeriod("07:05")); [EOL]     p = new Period(0, 5, 0, 0); [EOL]     assertEquals("0:05", formatter.print(p)); [EOL]     assertEquals(p, formatter.parsePeriod("0:05")); [EOL]     assertEquals(p, formatter.parsePeriod("0:5")); [EOL]     assertEquals(p, formatter.parsePeriod("00:005")); [EOL]     assertEquals(p, formatter.parsePeriod("0:005")); [EOL]     p = new Period(0, 0, 0, 0); [EOL]     assertEquals("0:00", formatter.print(p)); [EOL]     assertEquals(p, formatter.parsePeriod("0:00")); [EOL]     assertEquals(p, formatter.parsePeriod("0:0")); [EOL]     assertEquals(p, formatter.parsePeriod("00:00")); [EOL] }
public void testParseCustom1() { [EOL]     PeriodFormatter formatter = new PeriodFormatterBuilder().printZeroAlways().appendHours().appendSuffix(":").minimumPrintedDigits(2).appendMinutes().toFormatter(); [EOL]     Period p; [EOL]     p = new Period(47, 55, 0, 0); [EOL]     assertEquals("47:55", formatter.print(p)); [EOL]     assertEquals(p, formatter.parsePeriod("47:55")); [EOL]     assertEquals(p, formatter.parsePeriod("047:055")); [EOL]     p = new Period(7, 5, 0, 0); [EOL]     assertEquals("7:05", formatter.print(p)); [EOL]     assertEquals(p, formatter.parsePeriod("7:05")); [EOL]     assertEquals(p, formatter.parsePeriod("7:5")); [EOL]     assertEquals(p, formatter.parsePeriod("07:05")); [EOL]     p = new Period(0, 5, 0, 0); [EOL]     assertEquals("0:05", formatter.print(p)); [EOL]     assertEquals(p, formatter.parsePeriod("0:05")); [EOL]     assertEquals(p, formatter.parsePeriod("0:5")); [EOL]     assertEquals(p, formatter.parsePeriod("00:005")); [EOL]     assertEquals(p, formatter.parsePeriod("0:005")); [EOL]     p = new Period(0, 0, 0, 0); [EOL]     assertEquals("0:00", formatter.print(p)); [EOL]     assertEquals(p, formatter.parsePeriod("0:00")); [EOL]     assertEquals(p, formatter.parsePeriod("0:0")); [EOL]     assertEquals(p, formatter.parsePeriod("00:00")); [EOL] }
public void testParseCustom1() { [EOL]     PeriodFormatter formatter = new PeriodFormatterBuilder().printZeroAlways().appendHours().appendSuffix(":").minimumPrintedDigits(2).appendMinutes().toFormatter(); [EOL]     Period p; [EOL]     p = new Period(47, 55, 0, 0); [EOL]     assertEquals("47:55", formatter.print(p)); [EOL]     assertEquals(p, formatter.parsePeriod("47:55")); [EOL]     assertEquals(p, formatter.parsePeriod("047:055")); [EOL]     p = new Period(7, 5, 0, 0); [EOL]     assertEquals("7:05", formatter.print(p)); [EOL]     assertEquals(p, formatter.parsePeriod("7:05")); [EOL]     assertEquals(p, formatter.parsePeriod("7:5")); [EOL]     assertEquals(p, formatter.parsePeriod("07:05")); [EOL]     p = new Period(0, 5, 0, 0); [EOL]     assertEquals("0:05", formatter.print(p)); [EOL]     assertEquals(p, formatter.parsePeriod("0:05")); [EOL]     assertEquals(p, formatter.parsePeriod("0:5")); [EOL]     assertEquals(p, formatter.parsePeriod("00:005")); [EOL]     assertEquals(p, formatter.parsePeriod("0:005")); [EOL]     p = new Period(0, 0, 0, 0); [EOL]     assertEquals("0:00", formatter.print(p)); [EOL]     assertEquals(p, formatter.parsePeriod("0:00")); [EOL]     assertEquals(p, formatter.parsePeriod("0:0")); [EOL]     assertEquals(p, formatter.parsePeriod("00:00")); [EOL] }
public void testFormat_yearOfEra_twoDigit() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "04", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "23", f.print(dt)); [EOL]     f = f.withZoneUTC(); [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(1922, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("22")); [EOL]     expect = new DateTime(2021, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("21")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = f.withPivotYear(new Integer(2050)); [EOL]     expect = new DateTime(2000, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("00")); [EOL]     expect = new DateTime(2099, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("99")); [EOL]     f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     f = f.withZoneUTC(); [EOL]     f.parseDateTime("5"); [EOL]     f.parseDateTime("005"); [EOL]     f.parseDateTime("+50"); [EOL]     f.parseDateTime("-50"); [EOL] }
public void testFormat_yearOfEra_twoDigit() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "04", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "23", f.print(dt)); [EOL]     f = f.withZoneUTC(); [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(1922, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("22")); [EOL]     expect = new DateTime(2021, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("21")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = f.withPivotYear(new Integer(2050)); [EOL]     expect = new DateTime(2000, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("00")); [EOL]     expect = new DateTime(2099, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("99")); [EOL]     f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     f = f.withZoneUTC(); [EOL]     f.parseDateTime("5"); [EOL]     f.parseDateTime("005"); [EOL]     f.parseDateTime("+50"); [EOL]     f.parseDateTime("-50"); [EOL] }
public void testPlusYears_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.plusYears(1); [EOL]     DateTime expected = new DateTime(2003, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusYears(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusYears_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.plusYears(1); [EOL]     DateTime expected = new DateTime(2003, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusYears(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusYears_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.plusYears(1); [EOL]     DateTime expected = new DateTime(2003, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusYears(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusYears_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.plusYears(1); [EOL]     DateTime expected = new DateTime(2003, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusYears(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusYears_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.plusYears(1); [EOL]     DateTime expected = new DateTime(2003, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusYears(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusYears_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.plusYears(1); [EOL]     DateTime expected = new DateTime(2003, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusYears(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusYears_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.plusYears(1); [EOL]     DateTime expected = new DateTime(2003, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusYears(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusYears_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.plusYears(1); [EOL]     DateTime expected = new DateTime(2003, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusYears(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusYears_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.plusYears(1); [EOL]     DateTime expected = new DateTime(2003, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusYears(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusYears_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.plusYears(1); [EOL]     DateTime expected = new DateTime(2003, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusYears(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusYears_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.plusYears(1); [EOL]     DateTime expected = new DateTime(2003, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusYears(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusYears_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.plusYears(1); [EOL]     DateTime expected = new DateTime(2003, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusYears(0); [EOL]     assertSame(test, result); [EOL] }
public void testGetChronology_Object_nullChronology() throws Exception { [EOL]     assertEquals(ISO.withUTC(), ReadableInstantConverter.INSTANCE.getChronology(new Instant(123L), (Chronology) null)); [EOL]     assertEquals(ISO, ReadableInstantConverter.INSTANCE.getChronology(new DateTime(123L), (Chronology) null)); [EOL]     MutableDateTime mdt = new MutableDateTime() { [EOL]  [EOL]         public Chronology getChronology() { [EOL]             return null; [EOL]         } [EOL]     }; [EOL]     assertEquals(ISO, ReadableInstantConverter.INSTANCE.getChronology(mdt, (Chronology) null)); [EOL] }
public void testGetChronology_Object_nullChronology() throws Exception { [EOL]     assertEquals(ISO.withUTC(), ReadableInstantConverter.INSTANCE.getChronology(new Instant(123L), (Chronology) null)); [EOL]     assertEquals(ISO, ReadableInstantConverter.INSTANCE.getChronology(new DateTime(123L), (Chronology) null)); [EOL]     MutableDateTime mdt = new MutableDateTime() { [EOL]  [EOL]         public Chronology getChronology() { [EOL]             return null; [EOL]         } [EOL]     }; [EOL]     assertEquals(ISO, ReadableInstantConverter.INSTANCE.getChronology(mdt, (Chronology) null)); [EOL] }
public void testFactory_Zone() { [EOL]     assertEquals(TOKYO, BuddhistChronology.getInstance(TOKYO).getZone()); [EOL]     assertEquals(PARIS, BuddhistChronology.getInstance(PARIS).getZone()); [EOL]     assertEquals(LONDON, BuddhistChronology.getInstance(null).getZone()); [EOL]     assertSame(BuddhistChronology.class, BuddhistChronology.getInstance(TOKYO).getClass()); [EOL] }
public void testFactory_Zone() { [EOL]     assertEquals(TOKYO, BuddhistChronology.getInstance(TOKYO).getZone()); [EOL]     assertEquals(PARIS, BuddhistChronology.getInstance(PARIS).getZone()); [EOL]     assertEquals(LONDON, BuddhistChronology.getInstance(null).getZone()); [EOL]     assertSame(BuddhistChronology.class, BuddhistChronology.getInstance(TOKYO).getClass()); [EOL] }
public void testPropertyWithMinimumValueHour() { [EOL]     Partial test = new Partial(TYPES, VALUES); [EOL]     Partial copy = test.property(DateTimeFieldType.hourOfDay()).withMinimumValue(); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 0, 20, 30, 40); [EOL] }
public void test_compareTo() { [EOL]     assertEquals(0, iField.compareTo(iField)); [EOL]     assertEquals(-1, iField.compareTo(ISOChronology.getInstance().minutes())); [EOL]     DurationField dummy = new PreciseDurationField(DurationFieldType.seconds(), 0); [EOL]     assertEquals(1, iField.compareTo(dummy)); [EOL]     try { [EOL]         iField.compareTo(null); [EOL]         fail(); [EOL]     } catch (NullPointerException ex) { [EOL]     } [EOL] }
public void test_isPrecise() { [EOL]     assertEquals(true, iField.isPrecise()); [EOL] }
public void test_compareTo() { [EOL]     assertEquals(0, iField.compareTo(iField)); [EOL]     assertEquals(-1, iField.compareTo(ISOChronology.getInstance().minutes())); [EOL]     DurationField dummy = new PreciseDurationField(DurationFieldType.seconds(), 0); [EOL]     assertEquals(1, iField.compareTo(dummy)); [EOL]     try { [EOL]         iField.compareTo(null); [EOL]         fail(); [EOL]     } catch (NullPointerException ex) { [EOL]     } [EOL] }
public void test_getValue_long_long() { [EOL]     assertEquals(0, iField.getValue(0L, 567L)); [EOL]     assertEquals(12345, iField.getValue(12345678L, 567L)); [EOL]     assertEquals(-1, iField.getValue(-1234L, 567L)); [EOL]     assertEquals(INTEGER_MAX, iField.getValue(LONG_INTEGER_MAX * 1000L + 999L, 567L)); [EOL]     try { [EOL]         iField.getValue(LONG_INTEGER_MAX * 1000L + 1000L, 567L); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void test_getMillis_long_long() { [EOL]     assertEquals(0L, iField.getMillis(0L, 567L)); [EOL]     assertEquals(1234000L, iField.getMillis(1234L, 567L)); [EOL]     assertEquals(-1234000L, iField.getMillis(-1234L, 567L)); [EOL]     try { [EOL]         iField.getMillis(LONG_MAX, 567L); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void test_getMillis_long_long() { [EOL]     assertEquals(0L, iField.getMillis(0L, 567L)); [EOL]     assertEquals(1234000L, iField.getMillis(1234L, 567L)); [EOL]     assertEquals(-1234000L, iField.getMillis(-1234L, 567L)); [EOL]     try { [EOL]         iField.getMillis(LONG_MAX, 567L); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void test_add_long_long() { [EOL]     assertEquals(567L, iField.add(567L, 0L)); [EOL]     assertEquals(567L + 1234000L, iField.add(567L, 1234L)); [EOL]     assertEquals(567L - 1234000L, iField.add(567L, -1234L)); [EOL]     try { [EOL]         iField.add(LONG_MAX, 1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         iField.add(1L, LONG_MAX); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void test_getDifferenceAsLong_long_long() { [EOL]     assertEquals(0L, iField.getDifferenceAsLong(1L, 0L)); [EOL]     assertEquals(567L, iField.getDifferenceAsLong(567000L, 0L)); [EOL]     assertEquals(567L - 1234L, iField.getDifferenceAsLong(567000L, 1234000L)); [EOL]     assertEquals(567L + 1234L, iField.getDifferenceAsLong(567000L, -1234000L)); [EOL]     try { [EOL]         iField.getDifferenceAsLong(LONG_MAX, -1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void test_getDifferenceAsLong_long_long() { [EOL]     assertEquals(0L, iField.getDifferenceAsLong(1L, 0L)); [EOL]     assertEquals(567L, iField.getDifferenceAsLong(567000L, 0L)); [EOL]     assertEquals(567L - 1234L, iField.getDifferenceAsLong(567000L, 1234000L)); [EOL]     assertEquals(567L + 1234L, iField.getDifferenceAsLong(567000L, -1234000L)); [EOL]     try { [EOL]         iField.getDifferenceAsLong(LONG_MAX, -1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void test_getDifferenceAsLong_long_long() { [EOL]     assertEquals(0L, iField.getDifferenceAsLong(1L, 0L)); [EOL]     assertEquals(567L, iField.getDifferenceAsLong(567000L, 0L)); [EOL]     assertEquals(567L - 1234L, iField.getDifferenceAsLong(567000L, 1234000L)); [EOL]     assertEquals(567L + 1234L, iField.getDifferenceAsLong(567000L, -1234000L)); [EOL]     try { [EOL]         iField.getDifferenceAsLong(LONG_MAX, -1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testConstructor_RI_RI4() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2005, 7, 17, 1, 1, 1, 1); [EOL]     DateTime dt2 = null; [EOL]     Period test = new Period(dt1, dt2); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(-3, test.getYears()); [EOL]     assertEquals(-1, test.getMonths()); [EOL]     assertEquals(-1, test.getWeeks()); [EOL]     assertEquals(-1, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(-1, test.getMinutes()); [EOL]     assertEquals(-1, test.getSeconds()); [EOL]     assertEquals(-1, test.getMillis()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testSerialization() throws Exception { [EOL]     LocalDate test = new LocalDate(1972, 6, 9, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     LocalDate result = (LocalDate) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testSampleDate3() { [EOL]     DateTime dt = new DateTime(1426, 12, 24, 0, 0, 0, 0, ISLAMIC_UTC); [EOL]     assertEquals(IslamicChronology.AH, dt.getEra()); [EOL]     assertEquals(1426, dt.getYear()); [EOL]     Property fld = dt.year(); [EOL]     assertEquals(true, fld.isLeap()); [EOL]     assertEquals(1, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(12, dt.getMonthOfYear()); [EOL]     fld = dt.monthOfYear(); [EOL]     assertEquals(true, fld.isLeap()); [EOL]     assertEquals(1, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(12, fld.getMaximumValue()); [EOL]     assertEquals(12, fld.getMaximumValueOverall()); [EOL]     assertEquals(24, dt.getDayOfMonth()); [EOL]     fld = dt.dayOfMonth(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(30, fld.getMaximumValue()); [EOL]     assertEquals(30, fld.getMaximumValueOverall()); [EOL]     assertEquals(DateTimeConstants.TUESDAY, dt.getDayOfWeek()); [EOL]     fld = dt.dayOfWeek(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(7, fld.getMaximumValue()); [EOL]     assertEquals(7, fld.getMaximumValueOverall()); [EOL]     assertEquals(6 * 30 + 5 * 29 + 24, dt.getDayOfYear()); [EOL]     fld = dt.dayOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(355, fld.getMaximumValue()); [EOL]     assertEquals(355, fld.getMaximumValueOverall()); [EOL]     assertEquals(0, dt.getHourOfDay()); [EOL]     assertEquals(0, dt.getMinuteOfHour()); [EOL]     assertEquals(0, dt.getSecondOfMinute()); [EOL]     assertEquals(0, dt.getMillisOfSecond()); [EOL] }
public void testSafeAddInt() { [EOL]     assertEquals(0, FieldUtils.safeAdd(0, 0)); [EOL]     assertEquals(5, FieldUtils.safeAdd(2, 3)); [EOL]     assertEquals(-1, FieldUtils.safeAdd(2, -3)); [EOL]     assertEquals(1, FieldUtils.safeAdd(-2, 3)); [EOL]     assertEquals(-5, FieldUtils.safeAdd(-2, -3)); [EOL]     assertEquals(Integer.MAX_VALUE - 1, FieldUtils.safeAdd(Integer.MAX_VALUE, -1)); [EOL]     assertEquals(Integer.MIN_VALUE + 1, FieldUtils.safeAdd(Integer.MIN_VALUE, 1)); [EOL]     assertEquals(-1, FieldUtils.safeAdd(Integer.MIN_VALUE, Integer.MAX_VALUE)); [EOL]     assertEquals(-1, FieldUtils.safeAdd(Integer.MAX_VALUE, Integer.MIN_VALUE)); [EOL]     try { [EOL]         FieldUtils.safeAdd(Integer.MAX_VALUE, 1); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeAdd(Integer.MAX_VALUE, 100); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeAdd(Integer.MAX_VALUE, Integer.MAX_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeAdd(Integer.MIN_VALUE, -1); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeAdd(Integer.MIN_VALUE, -100); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeAdd(Integer.MIN_VALUE, Integer.MIN_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL] }
public void testSafeAddInt() { [EOL]     assertEquals(0, FieldUtils.safeAdd(0, 0)); [EOL]     assertEquals(5, FieldUtils.safeAdd(2, 3)); [EOL]     assertEquals(-1, FieldUtils.safeAdd(2, -3)); [EOL]     assertEquals(1, FieldUtils.safeAdd(-2, 3)); [EOL]     assertEquals(-5, FieldUtils.safeAdd(-2, -3)); [EOL]     assertEquals(Integer.MAX_VALUE - 1, FieldUtils.safeAdd(Integer.MAX_VALUE, -1)); [EOL]     assertEquals(Integer.MIN_VALUE + 1, FieldUtils.safeAdd(Integer.MIN_VALUE, 1)); [EOL]     assertEquals(-1, FieldUtils.safeAdd(Integer.MIN_VALUE, Integer.MAX_VALUE)); [EOL]     assertEquals(-1, FieldUtils.safeAdd(Integer.MAX_VALUE, Integer.MIN_VALUE)); [EOL]     try { [EOL]         FieldUtils.safeAdd(Integer.MAX_VALUE, 1); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeAdd(Integer.MAX_VALUE, 100); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeAdd(Integer.MAX_VALUE, Integer.MAX_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeAdd(Integer.MIN_VALUE, -1); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeAdd(Integer.MIN_VALUE, -100); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeAdd(Integer.MIN_VALUE, Integer.MIN_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL] }
public void testSafeAddInt() { [EOL]     assertEquals(0, FieldUtils.safeAdd(0, 0)); [EOL]     assertEquals(5, FieldUtils.safeAdd(2, 3)); [EOL]     assertEquals(-1, FieldUtils.safeAdd(2, -3)); [EOL]     assertEquals(1, FieldUtils.safeAdd(-2, 3)); [EOL]     assertEquals(-5, FieldUtils.safeAdd(-2, -3)); [EOL]     assertEquals(Integer.MAX_VALUE - 1, FieldUtils.safeAdd(Integer.MAX_VALUE, -1)); [EOL]     assertEquals(Integer.MIN_VALUE + 1, FieldUtils.safeAdd(Integer.MIN_VALUE, 1)); [EOL]     assertEquals(-1, FieldUtils.safeAdd(Integer.MIN_VALUE, Integer.MAX_VALUE)); [EOL]     assertEquals(-1, FieldUtils.safeAdd(Integer.MAX_VALUE, Integer.MIN_VALUE)); [EOL]     try { [EOL]         FieldUtils.safeAdd(Integer.MAX_VALUE, 1); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeAdd(Integer.MAX_VALUE, 100); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeAdd(Integer.MAX_VALUE, Integer.MAX_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeAdd(Integer.MIN_VALUE, -1); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeAdd(Integer.MIN_VALUE, -100); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeAdd(Integer.MIN_VALUE, Integer.MIN_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL] }
public void testMultipliedBy_int() { [EOL]     Hours test = Hours.hours(2); [EOL]     assertEquals(6, test.multipliedBy(3).getHours()); [EOL]     assertEquals(2, test.getHours()); [EOL]     assertEquals(-6, test.multipliedBy(-3).getHours()); [EOL]     assertSame(test, test.multipliedBy(1)); [EOL]     Hours halfMax = Hours.hours(Integer.MAX_VALUE / 2 + 1); [EOL]     try { [EOL]         halfMax.multipliedBy(2); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMultipliedBy_int() { [EOL]     Hours test = Hours.hours(2); [EOL]     assertEquals(6, test.multipliedBy(3).getHours()); [EOL]     assertEquals(2, test.getHours()); [EOL]     assertEquals(-6, test.multipliedBy(-3).getHours()); [EOL]     assertSame(test, test.multipliedBy(1)); [EOL]     Hours halfMax = Hours.hours(Integer.MAX_VALUE / 2 + 1); [EOL]     try { [EOL]         halfMax.multipliedBy(2); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMultipliedBy_int() { [EOL]     Hours test = Hours.hours(2); [EOL]     assertEquals(6, test.multipliedBy(3).getHours()); [EOL]     assertEquals(2, test.getHours()); [EOL]     assertEquals(-6, test.multipliedBy(-3).getHours()); [EOL]     assertSame(test, test.multipliedBy(1)); [EOL]     Hours halfMax = Hours.hours(Integer.MAX_VALUE / 2 + 1); [EOL]     try { [EOL]         halfMax.multipliedBy(2); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testSafeMultiplyLongLong() { [EOL]     assertEquals(0L, FieldUtils.safeMultiply(0L, 0L)); [EOL]     assertEquals(1L, FieldUtils.safeMultiply(1L, 1L)); [EOL]     assertEquals(3L, FieldUtils.safeMultiply(1L, 3L)); [EOL]     assertEquals(3L, FieldUtils.safeMultiply(3L, 1L)); [EOL]     assertEquals(6L, FieldUtils.safeMultiply(2L, 3L)); [EOL]     assertEquals(-6L, FieldUtils.safeMultiply(2L, -3L)); [EOL]     assertEquals(-6L, FieldUtils.safeMultiply(-2L, 3L)); [EOL]     assertEquals(6L, FieldUtils.safeMultiply(-2L, -3L)); [EOL]     assertEquals(Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, 1L)); [EOL]     assertEquals(Long.MIN_VALUE, FieldUtils.safeMultiply(Long.MIN_VALUE, 1L)); [EOL]     assertEquals(-Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, -1L)); [EOL]     try { [EOL]         FieldUtils.safeMultiply(Long.MIN_VALUE, -1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeMultiply(-1L, Long.MIN_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeMultiply(Long.MIN_VALUE, 100L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeMultiply(Long.MIN_VALUE, Long.MAX_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeMultiply(Long.MAX_VALUE, Long.MIN_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL] }
public void testSafeMultiplyLongLong() { [EOL]     assertEquals(0L, FieldUtils.safeMultiply(0L, 0L)); [EOL]     assertEquals(1L, FieldUtils.safeMultiply(1L, 1L)); [EOL]     assertEquals(3L, FieldUtils.safeMultiply(1L, 3L)); [EOL]     assertEquals(3L, FieldUtils.safeMultiply(3L, 1L)); [EOL]     assertEquals(6L, FieldUtils.safeMultiply(2L, 3L)); [EOL]     assertEquals(-6L, FieldUtils.safeMultiply(2L, -3L)); [EOL]     assertEquals(-6L, FieldUtils.safeMultiply(-2L, 3L)); [EOL]     assertEquals(6L, FieldUtils.safeMultiply(-2L, -3L)); [EOL]     assertEquals(Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, 1L)); [EOL]     assertEquals(Long.MIN_VALUE, FieldUtils.safeMultiply(Long.MIN_VALUE, 1L)); [EOL]     assertEquals(-Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, -1L)); [EOL]     try { [EOL]         FieldUtils.safeMultiply(Long.MIN_VALUE, -1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeMultiply(-1L, Long.MIN_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeMultiply(Long.MIN_VALUE, 100L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeMultiply(Long.MIN_VALUE, Long.MAX_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeMultiply(Long.MAX_VALUE, Long.MIN_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL] }
public void testSafeMultiplyLongLong() { [EOL]     assertEquals(0L, FieldUtils.safeMultiply(0L, 0L)); [EOL]     assertEquals(1L, FieldUtils.safeMultiply(1L, 1L)); [EOL]     assertEquals(3L, FieldUtils.safeMultiply(1L, 3L)); [EOL]     assertEquals(3L, FieldUtils.safeMultiply(3L, 1L)); [EOL]     assertEquals(6L, FieldUtils.safeMultiply(2L, 3L)); [EOL]     assertEquals(-6L, FieldUtils.safeMultiply(2L, -3L)); [EOL]     assertEquals(-6L, FieldUtils.safeMultiply(-2L, 3L)); [EOL]     assertEquals(6L, FieldUtils.safeMultiply(-2L, -3L)); [EOL]     assertEquals(Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, 1L)); [EOL]     assertEquals(Long.MIN_VALUE, FieldUtils.safeMultiply(Long.MIN_VALUE, 1L)); [EOL]     assertEquals(-Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, -1L)); [EOL]     try { [EOL]         FieldUtils.safeMultiply(Long.MIN_VALUE, -1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeMultiply(-1L, Long.MIN_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeMultiply(Long.MIN_VALUE, 100L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeMultiply(Long.MIN_VALUE, Long.MAX_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeMultiply(Long.MAX_VALUE, Long.MIN_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL] }
public void testSafeMultiplyLongLong() { [EOL]     assertEquals(0L, FieldUtils.safeMultiply(0L, 0L)); [EOL]     assertEquals(1L, FieldUtils.safeMultiply(1L, 1L)); [EOL]     assertEquals(3L, FieldUtils.safeMultiply(1L, 3L)); [EOL]     assertEquals(3L, FieldUtils.safeMultiply(3L, 1L)); [EOL]     assertEquals(6L, FieldUtils.safeMultiply(2L, 3L)); [EOL]     assertEquals(-6L, FieldUtils.safeMultiply(2L, -3L)); [EOL]     assertEquals(-6L, FieldUtils.safeMultiply(-2L, 3L)); [EOL]     assertEquals(6L, FieldUtils.safeMultiply(-2L, -3L)); [EOL]     assertEquals(Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, 1L)); [EOL]     assertEquals(Long.MIN_VALUE, FieldUtils.safeMultiply(Long.MIN_VALUE, 1L)); [EOL]     assertEquals(-Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, -1L)); [EOL]     try { [EOL]         FieldUtils.safeMultiply(Long.MIN_VALUE, -1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeMultiply(-1L, Long.MIN_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeMultiply(Long.MIN_VALUE, 100L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeMultiply(Long.MIN_VALUE, Long.MAX_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeMultiply(Long.MAX_VALUE, Long.MIN_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL] }
public void testSafeMultiplyLongLong() { [EOL]     assertEquals(0L, FieldUtils.safeMultiply(0L, 0L)); [EOL]     assertEquals(1L, FieldUtils.safeMultiply(1L, 1L)); [EOL]     assertEquals(3L, FieldUtils.safeMultiply(1L, 3L)); [EOL]     assertEquals(3L, FieldUtils.safeMultiply(3L, 1L)); [EOL]     assertEquals(6L, FieldUtils.safeMultiply(2L, 3L)); [EOL]     assertEquals(-6L, FieldUtils.safeMultiply(2L, -3L)); [EOL]     assertEquals(-6L, FieldUtils.safeMultiply(-2L, 3L)); [EOL]     assertEquals(6L, FieldUtils.safeMultiply(-2L, -3L)); [EOL]     assertEquals(Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, 1L)); [EOL]     assertEquals(Long.MIN_VALUE, FieldUtils.safeMultiply(Long.MIN_VALUE, 1L)); [EOL]     assertEquals(-Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, -1L)); [EOL]     try { [EOL]         FieldUtils.safeMultiply(Long.MIN_VALUE, -1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeMultiply(-1L, Long.MIN_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeMultiply(Long.MIN_VALUE, 100L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeMultiply(Long.MIN_VALUE, Long.MAX_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeMultiply(Long.MAX_VALUE, Long.MIN_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL] }
public void testSafeMultiplyLongLong() { [EOL]     assertEquals(0L, FieldUtils.safeMultiply(0L, 0L)); [EOL]     assertEquals(1L, FieldUtils.safeMultiply(1L, 1L)); [EOL]     assertEquals(3L, FieldUtils.safeMultiply(1L, 3L)); [EOL]     assertEquals(3L, FieldUtils.safeMultiply(3L, 1L)); [EOL]     assertEquals(6L, FieldUtils.safeMultiply(2L, 3L)); [EOL]     assertEquals(-6L, FieldUtils.safeMultiply(2L, -3L)); [EOL]     assertEquals(-6L, FieldUtils.safeMultiply(-2L, 3L)); [EOL]     assertEquals(6L, FieldUtils.safeMultiply(-2L, -3L)); [EOL]     assertEquals(Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, 1L)); [EOL]     assertEquals(Long.MIN_VALUE, FieldUtils.safeMultiply(Long.MIN_VALUE, 1L)); [EOL]     assertEquals(-Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, -1L)); [EOL]     try { [EOL]         FieldUtils.safeMultiply(Long.MIN_VALUE, -1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeMultiply(-1L, Long.MIN_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeMultiply(Long.MIN_VALUE, 100L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeMultiply(Long.MIN_VALUE, Long.MAX_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeMultiply(Long.MAX_VALUE, Long.MIN_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL] }
public void testSafeMultiplyLongLong() { [EOL]     assertEquals(0L, FieldUtils.safeMultiply(0L, 0L)); [EOL]     assertEquals(1L, FieldUtils.safeMultiply(1L, 1L)); [EOL]     assertEquals(3L, FieldUtils.safeMultiply(1L, 3L)); [EOL]     assertEquals(3L, FieldUtils.safeMultiply(3L, 1L)); [EOL]     assertEquals(6L, FieldUtils.safeMultiply(2L, 3L)); [EOL]     assertEquals(-6L, FieldUtils.safeMultiply(2L, -3L)); [EOL]     assertEquals(-6L, FieldUtils.safeMultiply(-2L, 3L)); [EOL]     assertEquals(6L, FieldUtils.safeMultiply(-2L, -3L)); [EOL]     assertEquals(Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, 1L)); [EOL]     assertEquals(Long.MIN_VALUE, FieldUtils.safeMultiply(Long.MIN_VALUE, 1L)); [EOL]     assertEquals(-Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, -1L)); [EOL]     try { [EOL]         FieldUtils.safeMultiply(Long.MIN_VALUE, -1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeMultiply(-1L, Long.MIN_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeMultiply(Long.MIN_VALUE, 100L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeMultiply(Long.MIN_VALUE, Long.MAX_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeMultiply(Long.MAX_VALUE, Long.MIN_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testGetPeriodConverter() { [EOL]     PeriodConverter c = ConverterManager.getInstance().getPeriodConverter(new Period(1, 2, 3, 4, 5, 6, 7, 8)); [EOL]     assertEquals(ReadablePeriod.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPeriodConverter(new Duration(123L)); [EOL]     assertEquals(ReadableDuration.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPeriodConverter(new Interval(0L, 1000L)); [EOL]     assertEquals(ReadableInterval.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPeriodConverter(""); [EOL]     assertEquals(String.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPeriodConverter(null); [EOL]     assertEquals(null, c.getSupportedType()); [EOL]     try { [EOL]         ConverterManager.getInstance().getPeriodConverter(Boolean.TRUE); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGetPeriodConverter() { [EOL]     PeriodConverter c = ConverterManager.getInstance().getPeriodConverter(new Period(1, 2, 3, 4, 5, 6, 7, 8)); [EOL]     assertEquals(ReadablePeriod.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPeriodConverter(new Duration(123L)); [EOL]     assertEquals(ReadableDuration.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPeriodConverter(new Interval(0L, 1000L)); [EOL]     assertEquals(ReadableInterval.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPeriodConverter(""); [EOL]     assertEquals(String.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPeriodConverter(null); [EOL]     assertEquals(null, c.getSupportedType()); [EOL]     try { [EOL]         ConverterManager.getInstance().getPeriodConverter(Boolean.TRUE); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGetDurationConverter() { [EOL]     DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L)); [EOL]     assertEquals(Long.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getDurationConverter(new Duration(123L)); [EOL]     assertEquals(ReadableDuration.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getDurationConverter(new Interval(0L, 1000L)); [EOL]     assertEquals(ReadableInterval.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getDurationConverter(""); [EOL]     assertEquals(String.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getDurationConverter(null); [EOL]     assertEquals(null, c.getSupportedType()); [EOL]     try { [EOL]         ConverterManager.getInstance().getDurationConverter(Boolean.TRUE); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGetDurationConverter() { [EOL]     DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L)); [EOL]     assertEquals(Long.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getDurationConverter(new Duration(123L)); [EOL]     assertEquals(ReadableDuration.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getDurationConverter(new Interval(0L, 1000L)); [EOL]     assertEquals(ReadableInterval.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getDurationConverter(""); [EOL]     assertEquals(String.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getDurationConverter(null); [EOL]     assertEquals(null, c.getSupportedType()); [EOL]     try { [EOL]         ConverterManager.getInstance().getDurationConverter(Boolean.TRUE); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testAddDurationConverter3() { [EOL]     DurationConverter removed = ConverterManager.getInstance().addDurationConverter(null); [EOL]     assertEquals(null, removed); [EOL]     assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length); [EOL] }
public void testAddDurationConverter3() { [EOL]     DurationConverter removed = ConverterManager.getInstance().addDurationConverter(null); [EOL]     assertEquals(null, removed); [EOL]     assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length); [EOL] }
public void testGetDurationConverterRemovedNull() { [EOL]     try { [EOL]         ConverterManager.getInstance().removeDurationConverter(NullConverter.INSTANCE); [EOL]         try { [EOL]             ConverterManager.getInstance().getDurationConverter(null); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]     } finally { [EOL]         ConverterManager.getInstance().addDurationConverter(NullConverter.INSTANCE); [EOL]     } [EOL]     assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length); [EOL] }
public void testGetDurationConverterRemovedNull() { [EOL]     try { [EOL]         ConverterManager.getInstance().removeDurationConverter(NullConverter.INSTANCE); [EOL]         try { [EOL]             ConverterManager.getInstance().getDurationConverter(null); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]     } finally { [EOL]         ConverterManager.getInstance().addDurationConverter(NullConverter.INSTANCE); [EOL]     } [EOL]     assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length); [EOL] }
public void testGetDurationConverterRemovedNull() { [EOL]     try { [EOL]         ConverterManager.getInstance().removeDurationConverter(NullConverter.INSTANCE); [EOL]         try { [EOL]             ConverterManager.getInstance().getDurationConverter(null); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]     } finally { [EOL]         ConverterManager.getInstance().addDurationConverter(NullConverter.INSTANCE); [EOL]     } [EOL]     assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length); [EOL] }
public void testGetPeriodConverter() { [EOL]     PeriodConverter c = ConverterManager.getInstance().getPeriodConverter(new Period(1, 2, 3, 4, 5, 6, 7, 8)); [EOL]     assertEquals(ReadablePeriod.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPeriodConverter(new Duration(123L)); [EOL]     assertEquals(ReadableDuration.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPeriodConverter(new Interval(0L, 1000L)); [EOL]     assertEquals(ReadableInterval.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPeriodConverter(""); [EOL]     assertEquals(String.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPeriodConverter(null); [EOL]     assertEquals(null, c.getSupportedType()); [EOL]     try { [EOL]         ConverterManager.getInstance().getPeriodConverter(Boolean.TRUE); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGetPeriodConverter() { [EOL]     PeriodConverter c = ConverterManager.getInstance().getPeriodConverter(new Period(1, 2, 3, 4, 5, 6, 7, 8)); [EOL]     assertEquals(ReadablePeriod.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPeriodConverter(new Duration(123L)); [EOL]     assertEquals(ReadableDuration.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPeriodConverter(new Interval(0L, 1000L)); [EOL]     assertEquals(ReadableInterval.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPeriodConverter(""); [EOL]     assertEquals(String.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPeriodConverter(null); [EOL]     assertEquals(null, c.getSupportedType()); [EOL]     try { [EOL]         ConverterManager.getInstance().getPeriodConverter(Boolean.TRUE); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGetPeriodConverter() { [EOL]     PeriodConverter c = ConverterManager.getInstance().getPeriodConverter(new Period(1, 2, 3, 4, 5, 6, 7, 8)); [EOL]     assertEquals(ReadablePeriod.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPeriodConverter(new Duration(123L)); [EOL]     assertEquals(ReadableDuration.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPeriodConverter(new Interval(0L, 1000L)); [EOL]     assertEquals(ReadableInterval.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPeriodConverter(""); [EOL]     assertEquals(String.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPeriodConverter(null); [EOL]     assertEquals(null, c.getSupportedType()); [EOL]     try { [EOL]         ConverterManager.getInstance().getPeriodConverter(Boolean.TRUE); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testAddPeriodConverter3() { [EOL]     PeriodConverter removed = ConverterManager.getInstance().addPeriodConverter(null); [EOL]     assertEquals(null, removed); [EOL]     assertEquals(PERIOD_SIZE, ConverterManager.getInstance().getPeriodConverters().length); [EOL] }
public void testAddPeriodConverter3() { [EOL]     PeriodConverter removed = ConverterManager.getInstance().addPeriodConverter(null); [EOL]     assertEquals(null, removed); [EOL]     assertEquals(PERIOD_SIZE, ConverterManager.getInstance().getPeriodConverters().length); [EOL] }
public void testAddIntervalConverter1() { [EOL]     IntervalConverter c = new IntervalConverter() { [EOL]  [EOL]         public boolean isReadableInterval(Object object, Chronology chrono) { [EOL]             return false; [EOL]         } [EOL]  [EOL]         public void setInto(ReadWritableInterval interval, Object object, Chronology chrono) { [EOL]         } [EOL]  [EOL]         public Class getSupportedType() { [EOL]             return Boolean.class; [EOL]         } [EOL]     }; [EOL]     try { [EOL]         IntervalConverter removed = ConverterManager.getInstance().addIntervalConverter(c); [EOL]         assertEquals(null, removed); [EOL]         assertEquals(Boolean.class, ConverterManager.getInstance().getIntervalConverter(Boolean.TRUE).getSupportedType()); [EOL]         assertEquals(INTERVAL_SIZE + 1, ConverterManager.getInstance().getIntervalConverters().length); [EOL]     } finally { [EOL]         ConverterManager.getInstance().removeIntervalConverter(c); [EOL]     } [EOL]     assertEquals(INTERVAL_SIZE, ConverterManager.getInstance().getIntervalConverters().length); [EOL] }
public void testAddIntervalConverter1() { [EOL]     IntervalConverter c = new IntervalConverter() { [EOL]  [EOL]         public boolean isReadableInterval(Object object, Chronology chrono) { [EOL]             return false; [EOL]         } [EOL]  [EOL]         public void setInto(ReadWritableInterval interval, Object object, Chronology chrono) { [EOL]         } [EOL]  [EOL]         public Class getSupportedType() { [EOL]             return Boolean.class; [EOL]         } [EOL]     }; [EOL]     try { [EOL]         IntervalConverter removed = ConverterManager.getInstance().addIntervalConverter(c); [EOL]         assertEquals(null, removed); [EOL]         assertEquals(Boolean.class, ConverterManager.getInstance().getIntervalConverter(Boolean.TRUE).getSupportedType()); [EOL]         assertEquals(INTERVAL_SIZE + 1, ConverterManager.getInstance().getIntervalConverters().length); [EOL]     } finally { [EOL]         ConverterManager.getInstance().removeIntervalConverter(c); [EOL]     } [EOL]     assertEquals(INTERVAL_SIZE, ConverterManager.getInstance().getIntervalConverters().length); [EOL] }
public void testAddIntervalConverter1() { [EOL]     IntervalConverter c = new IntervalConverter() { [EOL]  [EOL]         public boolean isReadableInterval(Object object, Chronology chrono) { [EOL]             return false; [EOL]         } [EOL]  [EOL]         public void setInto(ReadWritableInterval interval, Object object, Chronology chrono) { [EOL]         } [EOL]  [EOL]         public Class getSupportedType() { [EOL]             return Boolean.class; [EOL]         } [EOL]     }; [EOL]     try { [EOL]         IntervalConverter removed = ConverterManager.getInstance().addIntervalConverter(c); [EOL]         assertEquals(null, removed); [EOL]         assertEquals(Boolean.class, ConverterManager.getInstance().getIntervalConverter(Boolean.TRUE).getSupportedType()); [EOL]         assertEquals(INTERVAL_SIZE + 1, ConverterManager.getInstance().getIntervalConverters().length); [EOL]     } finally { [EOL]         ConverterManager.getInstance().removeIntervalConverter(c); [EOL]     } [EOL]     assertEquals(INTERVAL_SIZE, ConverterManager.getInstance().getIntervalConverters().length); [EOL] }
public void testAddIntervalConverter1() { [EOL]     IntervalConverter c = new IntervalConverter() { [EOL]  [EOL]         public boolean isReadableInterval(Object object, Chronology chrono) { [EOL]             return false; [EOL]         } [EOL]  [EOL]         public void setInto(ReadWritableInterval interval, Object object, Chronology chrono) { [EOL]         } [EOL]  [EOL]         public Class getSupportedType() { [EOL]             return Boolean.class; [EOL]         } [EOL]     }; [EOL]     try { [EOL]         IntervalConverter removed = ConverterManager.getInstance().addIntervalConverter(c); [EOL]         assertEquals(null, removed); [EOL]         assertEquals(Boolean.class, ConverterManager.getInstance().getIntervalConverter(Boolean.TRUE).getSupportedType()); [EOL]         assertEquals(INTERVAL_SIZE + 1, ConverterManager.getInstance().getIntervalConverters().length); [EOL]     } finally { [EOL]         ConverterManager.getInstance().removeIntervalConverter(c); [EOL]     } [EOL]     assertEquals(INTERVAL_SIZE, ConverterManager.getInstance().getIntervalConverters().length); [EOL] }
public void testAddIntervalConverter1() { [EOL]     IntervalConverter c = new IntervalConverter() { [EOL]  [EOL]         public boolean isReadableInterval(Object object, Chronology chrono) { [EOL]             return false; [EOL]         } [EOL]  [EOL]         public void setInto(ReadWritableInterval interval, Object object, Chronology chrono) { [EOL]         } [EOL]  [EOL]         public Class getSupportedType() { [EOL]             return Boolean.class; [EOL]         } [EOL]     }; [EOL]     try { [EOL]         IntervalConverter removed = ConverterManager.getInstance().addIntervalConverter(c); [EOL]         assertEquals(null, removed); [EOL]         assertEquals(Boolean.class, ConverterManager.getInstance().getIntervalConverter(Boolean.TRUE).getSupportedType()); [EOL]         assertEquals(INTERVAL_SIZE + 1, ConverterManager.getInstance().getIntervalConverters().length); [EOL]     } finally { [EOL]         ConverterManager.getInstance().removeIntervalConverter(c); [EOL]     } [EOL]     assertEquals(INTERVAL_SIZE, ConverterManager.getInstance().getIntervalConverters().length); [EOL] }
public void testPropertyEqualsHashCodeLenient() { [EOL]     LocalDate test1 = new LocalDate(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     LocalDate test2 = new LocalDate(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL] }
public void testFactory_between_RInstant() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 6, 12, 12, 0, 0, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 6, 15, 18, 0, 0, 0, PARIS); [EOL]     assertEquals(3, Single.between(start, end1, DurationFieldType.days())); [EOL]     assertEquals(0, Single.between(start, start, DurationFieldType.days())); [EOL]     assertEquals(0, Single.between(end1, end1, DurationFieldType.days())); [EOL]     assertEquals(-3, Single.between(end1, start, DurationFieldType.days())); [EOL]     assertEquals(6, Single.between(start, end2, DurationFieldType.days())); [EOL]     try { [EOL]         Single.between(start, (ReadableInstant) null, DurationFieldType.days()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Single.between((ReadableInstant) null, end1, DurationFieldType.days()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Single.between((ReadableInstant) null, (ReadableInstant) null, DurationFieldType.days()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_between_RInstant() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 6, 12, 12, 0, 0, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 6, 15, 18, 0, 0, 0, PARIS); [EOL]     assertEquals(3, Single.between(start, end1, DurationFieldType.days())); [EOL]     assertEquals(0, Single.between(start, start, DurationFieldType.days())); [EOL]     assertEquals(0, Single.between(end1, end1, DurationFieldType.days())); [EOL]     assertEquals(-3, Single.between(end1, start, DurationFieldType.days())); [EOL]     assertEquals(6, Single.between(start, end2, DurationFieldType.days())); [EOL]     try { [EOL]         Single.between(start, (ReadableInstant) null, DurationFieldType.days()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Single.between((ReadableInstant) null, end1, DurationFieldType.days()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Single.between((ReadableInstant) null, (ReadableInstant) null, DurationFieldType.days()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_between_RInstant() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 6, 12, 12, 0, 0, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 6, 15, 18, 0, 0, 0, PARIS); [EOL]     assertEquals(3, Single.between(start, end1, DurationFieldType.days())); [EOL]     assertEquals(0, Single.between(start, start, DurationFieldType.days())); [EOL]     assertEquals(0, Single.between(end1, end1, DurationFieldType.days())); [EOL]     assertEquals(-3, Single.between(end1, start, DurationFieldType.days())); [EOL]     assertEquals(6, Single.between(start, end2, DurationFieldType.days())); [EOL]     try { [EOL]         Single.between(start, (ReadableInstant) null, DurationFieldType.days()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Single.between((ReadableInstant) null, end1, DurationFieldType.days()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Single.between((ReadableInstant) null, (ReadableInstant) null, DurationFieldType.days()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testFactory_between_RPartial() { [EOL]     LocalDate start = new LocalDate(2006, 6, 9); [EOL]     LocalDate end1 = new LocalDate(2006, 6, 12); [EOL]     YearMonthDay end2 = new YearMonthDay(2006, 6, 15); [EOL]     Single zero = new Single(0); [EOL]     assertEquals(3, Single.between(start, end1, zero)); [EOL]     assertEquals(0, Single.between(start, start, zero)); [EOL]     assertEquals(0, Single.between(end1, end1, zero)); [EOL]     assertEquals(-3, Single.between(end1, start, zero)); [EOL]     assertEquals(6, Single.between(start, end2, zero)); [EOL]     try { [EOL]         Single.between(start, (ReadablePartial) null, zero); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Single.between((ReadablePartial) null, end1, zero); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Single.between((ReadablePartial) null, (ReadablePartial) null, zero); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Single.between(start, new LocalTime(), zero); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Single.between(new Partial(DateTimeFieldType.dayOfWeek(), 2), new Partial(DateTimeFieldType.dayOfMonth(), 3), zero); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     Partial p = new Partial(new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.hourOfDay() }, new int[] { 1, 2 }); [EOL]     try { [EOL]         Single.between(p, p, zero); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testFactory_between_RPartial() { [EOL]     LocalDate start = new LocalDate(2006, 6, 9); [EOL]     LocalDate end1 = new LocalDate(2006, 6, 12); [EOL]     YearMonthDay end2 = new YearMonthDay(2006, 6, 15); [EOL]     Single zero = new Single(0); [EOL]     assertEquals(3, Single.between(start, end1, zero)); [EOL]     assertEquals(0, Single.between(start, start, zero)); [EOL]     assertEquals(0, Single.between(end1, end1, zero)); [EOL]     assertEquals(-3, Single.between(end1, start, zero)); [EOL]     assertEquals(6, Single.between(start, end2, zero)); [EOL]     try { [EOL]         Single.between(start, (ReadablePartial) null, zero); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Single.between((ReadablePartial) null, end1, zero); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Single.between((ReadablePartial) null, (ReadablePartial) null, zero); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Single.between(start, new LocalTime(), zero); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Single.between(new Partial(DateTimeFieldType.dayOfWeek(), 2), new Partial(DateTimeFieldType.dayOfMonth(), 3), zero); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     Partial p = new Partial(new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.hourOfDay() }, new int[] { 1, 2 }); [EOL]     try { [EOL]         Single.between(p, p, zero); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testFactory_between_RPartial() { [EOL]     LocalDate start = new LocalDate(2006, 6, 9); [EOL]     LocalDate end1 = new LocalDate(2006, 6, 12); [EOL]     YearMonthDay end2 = new YearMonthDay(2006, 6, 15); [EOL]     Single zero = new Single(0); [EOL]     assertEquals(3, Single.between(start, end1, zero)); [EOL]     assertEquals(0, Single.between(start, start, zero)); [EOL]     assertEquals(0, Single.between(end1, end1, zero)); [EOL]     assertEquals(-3, Single.between(end1, start, zero)); [EOL]     assertEquals(6, Single.between(start, end2, zero)); [EOL]     try { [EOL]         Single.between(start, (ReadablePartial) null, zero); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Single.between((ReadablePartial) null, end1, zero); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Single.between((ReadablePartial) null, (ReadablePartial) null, zero); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Single.between(start, new LocalTime(), zero); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Single.between(new Partial(DateTimeFieldType.dayOfWeek(), 2), new Partial(DateTimeFieldType.dayOfMonth(), 3), zero); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     Partial p = new Partial(new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.hourOfDay() }, new int[] { 1, 2 }); [EOL]     try { [EOL]         Single.between(p, p, zero); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testFactory_between_RPartial() { [EOL]     LocalDate start = new LocalDate(2006, 6, 9); [EOL]     LocalDate end1 = new LocalDate(2006, 6, 12); [EOL]     YearMonthDay end2 = new YearMonthDay(2006, 6, 15); [EOL]     Single zero = new Single(0); [EOL]     assertEquals(3, Single.between(start, end1, zero)); [EOL]     assertEquals(0, Single.between(start, start, zero)); [EOL]     assertEquals(0, Single.between(end1, end1, zero)); [EOL]     assertEquals(-3, Single.between(end1, start, zero)); [EOL]     assertEquals(6, Single.between(start, end2, zero)); [EOL]     try { [EOL]         Single.between(start, (ReadablePartial) null, zero); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Single.between((ReadablePartial) null, end1, zero); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Single.between((ReadablePartial) null, (ReadablePartial) null, zero); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Single.between(start, new LocalTime(), zero); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Single.between(new Partial(DateTimeFieldType.dayOfWeek(), 2), new Partial(DateTimeFieldType.dayOfMonth(), 3), zero); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     Partial p = new Partial(new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.hourOfDay() }, new int[] { 1, 2 }); [EOL]     try { [EOL]         Single.between(p, p, zero); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testFactory_between_RPartial() { [EOL]     LocalDate start = new LocalDate(2006, 6, 9); [EOL]     LocalDate end1 = new LocalDate(2006, 6, 12); [EOL]     YearMonthDay end2 = new YearMonthDay(2006, 6, 15); [EOL]     Single zero = new Single(0); [EOL]     assertEquals(3, Single.between(start, end1, zero)); [EOL]     assertEquals(0, Single.between(start, start, zero)); [EOL]     assertEquals(0, Single.between(end1, end1, zero)); [EOL]     assertEquals(-3, Single.between(end1, start, zero)); [EOL]     assertEquals(6, Single.between(start, end2, zero)); [EOL]     try { [EOL]         Single.between(start, (ReadablePartial) null, zero); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Single.between((ReadablePartial) null, end1, zero); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Single.between((ReadablePartial) null, (ReadablePartial) null, zero); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Single.between(start, new LocalTime(), zero); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Single.between(new Partial(DateTimeFieldType.dayOfWeek(), 2), new Partial(DateTimeFieldType.dayOfMonth(), 3), zero); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     Partial p = new Partial(new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.hourOfDay() }, new int[] { 1, 2 }); [EOL]     try { [EOL]         Single.between(p, p, zero); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGet() { [EOL]     Single test = new Single(20); [EOL]     assertEquals(0, test.get(DurationFieldType.years())); [EOL]     assertEquals(0, test.get(DurationFieldType.months())); [EOL]     assertEquals(0, test.get(DurationFieldType.weeks())); [EOL]     assertEquals(20, test.get(DurationFieldType.days())); [EOL]     assertEquals(0, test.get(DurationFieldType.hours())); [EOL]     assertEquals(0, test.get(DurationFieldType.minutes())); [EOL]     assertEquals(0, test.get(DurationFieldType.seconds())); [EOL]     assertEquals(0, test.get(DurationFieldType.millis())); [EOL] }
public void testGetSetValue() { [EOL]     Single test = new Single(20); [EOL]     assertEquals(20, test.getValue()); [EOL]     test.setValue(10); [EOL]     assertEquals(10, test.getValue()); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testFactory_between_RPartial() { [EOL]     LocalDate start = new LocalDate(2006, 6, 9); [EOL]     LocalDate end1 = new LocalDate(2006, 6, 12); [EOL]     YearMonthDay end2 = new YearMonthDay(2006, 6, 15); [EOL]     Single zero = new Single(0); [EOL]     assertEquals(3, Single.between(start, end1, zero)); [EOL]     assertEquals(0, Single.between(start, start, zero)); [EOL]     assertEquals(0, Single.between(end1, end1, zero)); [EOL]     assertEquals(-3, Single.between(end1, start, zero)); [EOL]     assertEquals(6, Single.between(start, end2, zero)); [EOL]     try { [EOL]         Single.between(start, (ReadablePartial) null, zero); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Single.between((ReadablePartial) null, end1, zero); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Single.between((ReadablePartial) null, (ReadablePartial) null, zero); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Single.between(start, new LocalTime(), zero); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Single.between(new Partial(DateTimeFieldType.dayOfWeek(), 2), new Partial(DateTimeFieldType.dayOfMonth(), 3), zero); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     Partial p = new Partial(new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.hourOfDay() }, new int[] { 1, 2 }); [EOL]     try { [EOL]         Single.between(p, p, zero); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testFactory_between_RPartial() { [EOL]     LocalDate start = new LocalDate(2006, 6, 9); [EOL]     LocalDate end1 = new LocalDate(2006, 6, 12); [EOL]     YearMonthDay end2 = new YearMonthDay(2006, 6, 15); [EOL]     Single zero = new Single(0); [EOL]     assertEquals(3, Single.between(start, end1, zero)); [EOL]     assertEquals(0, Single.between(start, start, zero)); [EOL]     assertEquals(0, Single.between(end1, end1, zero)); [EOL]     assertEquals(-3, Single.between(end1, start, zero)); [EOL]     assertEquals(6, Single.between(start, end2, zero)); [EOL]     try { [EOL]         Single.between(start, (ReadablePartial) null, zero); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Single.between((ReadablePartial) null, end1, zero); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Single.between((ReadablePartial) null, (ReadablePartial) null, zero); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Single.between(start, new LocalTime(), zero); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Single.between(new Partial(DateTimeFieldType.dayOfWeek(), 2), new Partial(DateTimeFieldType.dayOfMonth(), 3), zero); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     Partial p = new Partial(new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.hourOfDay() }, new int[] { 1, 2 }); [EOL]     try { [EOL]         Single.between(p, p, zero); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testFactory_between_RPartial() { [EOL]     LocalDate start = new LocalDate(2006, 6, 9); [EOL]     LocalDate end1 = new LocalDate(2006, 6, 12); [EOL]     YearMonthDay end2 = new YearMonthDay(2006, 6, 15); [EOL]     Single zero = new Single(0); [EOL]     assertEquals(3, Single.between(start, end1, zero)); [EOL]     assertEquals(0, Single.between(start, start, zero)); [EOL]     assertEquals(0, Single.between(end1, end1, zero)); [EOL]     assertEquals(-3, Single.between(end1, start, zero)); [EOL]     assertEquals(6, Single.between(start, end2, zero)); [EOL]     try { [EOL]         Single.between(start, (ReadablePartial) null, zero); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Single.between((ReadablePartial) null, end1, zero); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Single.between((ReadablePartial) null, (ReadablePartial) null, zero); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Single.between(start, new LocalTime(), zero); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Single.between(new Partial(DateTimeFieldType.dayOfWeek(), 2), new Partial(DateTimeFieldType.dayOfMonth(), 3), zero); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     Partial p = new Partial(new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.hourOfDay() }, new int[] { 1, 2 }); [EOL]     try { [EOL]         Single.between(p, p, zero); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGet() { [EOL]     Single test = new Single(20); [EOL]     assertEquals(0, test.get(DurationFieldType.years())); [EOL]     assertEquals(0, test.get(DurationFieldType.months())); [EOL]     assertEquals(0, test.get(DurationFieldType.weeks())); [EOL]     assertEquals(20, test.get(DurationFieldType.days())); [EOL]     assertEquals(0, test.get(DurationFieldType.hours())); [EOL]     assertEquals(0, test.get(DurationFieldType.minutes())); [EOL]     assertEquals(0, test.get(DurationFieldType.seconds())); [EOL]     assertEquals(0, test.get(DurationFieldType.millis())); [EOL] }
public void testGet() { [EOL]     Single test = new Single(20); [EOL]     assertEquals(0, test.get(DurationFieldType.years())); [EOL]     assertEquals(0, test.get(DurationFieldType.months())); [EOL]     assertEquals(0, test.get(DurationFieldType.weeks())); [EOL]     assertEquals(20, test.get(DurationFieldType.days())); [EOL]     assertEquals(0, test.get(DurationFieldType.hours())); [EOL]     assertEquals(0, test.get(DurationFieldType.minutes())); [EOL]     assertEquals(0, test.get(DurationFieldType.seconds())); [EOL]     assertEquals(0, test.get(DurationFieldType.millis())); [EOL] }
public void testIsSupported() { [EOL]     Single test = new Single(20); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.years())); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.months())); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.weeks())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.days())); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.hours())); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.minutes())); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.seconds())); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.millis())); [EOL] }
public void testToPeriod() { [EOL]     Single test = new Single(20); [EOL]     Period expected = Period.days(20); [EOL]     assertEquals(expected, test.toPeriod()); [EOL] }
public void testEqualsHashCode() { [EOL]     Single testA = new Single(20); [EOL]     Single testB = new Single(20); [EOL]     assertEquals(true, testA.equals(testB)); [EOL]     assertEquals(true, testB.equals(testA)); [EOL]     assertEquals(true, testA.equals(testA)); [EOL]     assertEquals(true, testB.equals(testB)); [EOL]     assertEquals(true, testA.hashCode() == testB.hashCode()); [EOL]     assertEquals(true, testA.hashCode() == testA.hashCode()); [EOL]     assertEquals(true, testB.hashCode() == testB.hashCode()); [EOL]     Single testC = new Single(30); [EOL]     assertEquals(false, testA.equals(testC)); [EOL]     assertEquals(false, testB.equals(testC)); [EOL]     assertEquals(false, testC.equals(testA)); [EOL]     assertEquals(false, testC.equals(testB)); [EOL]     assertEquals(false, testA.hashCode() == testC.hashCode()); [EOL]     assertEquals(false, testB.hashCode() == testC.hashCode()); [EOL]     assertEquals(true, testA.equals(Days.days(20))); [EOL]     assertEquals(true, testA.equals(new Period(0, 0, 0, 20, 0, 0, 0, 0, PeriodType.days()))); [EOL]     assertEquals(false, testA.equals(Period.days(2))); [EOL]     assertEquals(false, testA.equals("Hello")); [EOL]     assertEquals(false, testA.equals(Hours.hours(2))); [EOL]     assertEquals(false, testA.equals(null)); [EOL] }
public void testEqualsHashCode() { [EOL]     Single testA = new Single(20); [EOL]     Single testB = new Single(20); [EOL]     assertEquals(true, testA.equals(testB)); [EOL]     assertEquals(true, testB.equals(testA)); [EOL]     assertEquals(true, testA.equals(testA)); [EOL]     assertEquals(true, testB.equals(testB)); [EOL]     assertEquals(true, testA.hashCode() == testB.hashCode()); [EOL]     assertEquals(true, testA.hashCode() == testA.hashCode()); [EOL]     assertEquals(true, testB.hashCode() == testB.hashCode()); [EOL]     Single testC = new Single(30); [EOL]     assertEquals(false, testA.equals(testC)); [EOL]     assertEquals(false, testB.equals(testC)); [EOL]     assertEquals(false, testC.equals(testA)); [EOL]     assertEquals(false, testC.equals(testB)); [EOL]     assertEquals(false, testA.hashCode() == testC.hashCode()); [EOL]     assertEquals(false, testB.hashCode() == testC.hashCode()); [EOL]     assertEquals(true, testA.equals(Days.days(20))); [EOL]     assertEquals(true, testA.equals(new Period(0, 0, 0, 20, 0, 0, 0, 0, PeriodType.days()))); [EOL]     assertEquals(false, testA.equals(Period.days(2))); [EOL]     assertEquals(false, testA.equals("Hello")); [EOL]     assertEquals(false, testA.equals(Hours.hours(2))); [EOL]     assertEquals(false, testA.equals(null)); [EOL] }
public void testEqualsHashCode() { [EOL]     Single testA = new Single(20); [EOL]     Single testB = new Single(20); [EOL]     assertEquals(true, testA.equals(testB)); [EOL]     assertEquals(true, testB.equals(testA)); [EOL]     assertEquals(true, testA.equals(testA)); [EOL]     assertEquals(true, testB.equals(testB)); [EOL]     assertEquals(true, testA.hashCode() == testB.hashCode()); [EOL]     assertEquals(true, testA.hashCode() == testA.hashCode()); [EOL]     assertEquals(true, testB.hashCode() == testB.hashCode()); [EOL]     Single testC = new Single(30); [EOL]     assertEquals(false, testA.equals(testC)); [EOL]     assertEquals(false, testB.equals(testC)); [EOL]     assertEquals(false, testC.equals(testA)); [EOL]     assertEquals(false, testC.equals(testB)); [EOL]     assertEquals(false, testA.hashCode() == testC.hashCode()); [EOL]     assertEquals(false, testB.hashCode() == testC.hashCode()); [EOL]     assertEquals(true, testA.equals(Days.days(20))); [EOL]     assertEquals(true, testA.equals(new Period(0, 0, 0, 20, 0, 0, 0, 0, PeriodType.days()))); [EOL]     assertEquals(false, testA.equals(Period.days(2))); [EOL]     assertEquals(false, testA.equals("Hello")); [EOL]     assertEquals(false, testA.equals(Hours.hours(2))); [EOL]     assertEquals(false, testA.equals(null)); [EOL] }
public void testEqualsHashCode() { [EOL]     Single testA = new Single(20); [EOL]     Single testB = new Single(20); [EOL]     assertEquals(true, testA.equals(testB)); [EOL]     assertEquals(true, testB.equals(testA)); [EOL]     assertEquals(true, testA.equals(testA)); [EOL]     assertEquals(true, testB.equals(testB)); [EOL]     assertEquals(true, testA.hashCode() == testB.hashCode()); [EOL]     assertEquals(true, testA.hashCode() == testA.hashCode()); [EOL]     assertEquals(true, testB.hashCode() == testB.hashCode()); [EOL]     Single testC = new Single(30); [EOL]     assertEquals(false, testA.equals(testC)); [EOL]     assertEquals(false, testB.equals(testC)); [EOL]     assertEquals(false, testC.equals(testA)); [EOL]     assertEquals(false, testC.equals(testB)); [EOL]     assertEquals(false, testA.hashCode() == testC.hashCode()); [EOL]     assertEquals(false, testB.hashCode() == testC.hashCode()); [EOL]     assertEquals(true, testA.equals(Days.days(20))); [EOL]     assertEquals(true, testA.equals(new Period(0, 0, 0, 20, 0, 0, 0, 0, PeriodType.days()))); [EOL]     assertEquals(false, testA.equals(Period.days(2))); [EOL]     assertEquals(false, testA.equals("Hello")); [EOL]     assertEquals(false, testA.equals(Hours.hours(2))); [EOL]     assertEquals(false, testA.equals(null)); [EOL] }
public void testEqualsHashCode() { [EOL]     Single testA = new Single(20); [EOL]     Single testB = new Single(20); [EOL]     assertEquals(true, testA.equals(testB)); [EOL]     assertEquals(true, testB.equals(testA)); [EOL]     assertEquals(true, testA.equals(testA)); [EOL]     assertEquals(true, testB.equals(testB)); [EOL]     assertEquals(true, testA.hashCode() == testB.hashCode()); [EOL]     assertEquals(true, testA.hashCode() == testA.hashCode()); [EOL]     assertEquals(true, testB.hashCode() == testB.hashCode()); [EOL]     Single testC = new Single(30); [EOL]     assertEquals(false, testA.equals(testC)); [EOL]     assertEquals(false, testB.equals(testC)); [EOL]     assertEquals(false, testC.equals(testA)); [EOL]     assertEquals(false, testC.equals(testB)); [EOL]     assertEquals(false, testA.hashCode() == testC.hashCode()); [EOL]     assertEquals(false, testB.hashCode() == testC.hashCode()); [EOL]     assertEquals(true, testA.equals(Days.days(20))); [EOL]     assertEquals(true, testA.equals(new Period(0, 0, 0, 20, 0, 0, 0, 0, PeriodType.days()))); [EOL]     assertEquals(false, testA.equals(Period.days(2))); [EOL]     assertEquals(false, testA.equals("Hello")); [EOL]     assertEquals(false, testA.equals(Hours.hours(2))); [EOL]     assertEquals(false, testA.equals(null)); [EOL] }
public void testEqualsHashCode() { [EOL]     Single testA = new Single(20); [EOL]     Single testB = new Single(20); [EOL]     assertEquals(true, testA.equals(testB)); [EOL]     assertEquals(true, testB.equals(testA)); [EOL]     assertEquals(true, testA.equals(testA)); [EOL]     assertEquals(true, testB.equals(testB)); [EOL]     assertEquals(true, testA.hashCode() == testB.hashCode()); [EOL]     assertEquals(true, testA.hashCode() == testA.hashCode()); [EOL]     assertEquals(true, testB.hashCode() == testB.hashCode()); [EOL]     Single testC = new Single(30); [EOL]     assertEquals(false, testA.equals(testC)); [EOL]     assertEquals(false, testB.equals(testC)); [EOL]     assertEquals(false, testC.equals(testA)); [EOL]     assertEquals(false, testC.equals(testB)); [EOL]     assertEquals(false, testA.hashCode() == testC.hashCode()); [EOL]     assertEquals(false, testB.hashCode() == testC.hashCode()); [EOL]     assertEquals(true, testA.equals(Days.days(20))); [EOL]     assertEquals(true, testA.equals(new Period(0, 0, 0, 20, 0, 0, 0, 0, PeriodType.days()))); [EOL]     assertEquals(false, testA.equals(Period.days(2))); [EOL]     assertEquals(false, testA.equals("Hello")); [EOL]     assertEquals(false, testA.equals(Hours.hours(2))); [EOL]     assertEquals(false, testA.equals(null)); [EOL] }
public void testEqualsHashCode() { [EOL]     Single testA = new Single(20); [EOL]     Single testB = new Single(20); [EOL]     assertEquals(true, testA.equals(testB)); [EOL]     assertEquals(true, testB.equals(testA)); [EOL]     assertEquals(true, testA.equals(testA)); [EOL]     assertEquals(true, testB.equals(testB)); [EOL]     assertEquals(true, testA.hashCode() == testB.hashCode()); [EOL]     assertEquals(true, testA.hashCode() == testA.hashCode()); [EOL]     assertEquals(true, testB.hashCode() == testB.hashCode()); [EOL]     Single testC = new Single(30); [EOL]     assertEquals(false, testA.equals(testC)); [EOL]     assertEquals(false, testB.equals(testC)); [EOL]     assertEquals(false, testC.equals(testA)); [EOL]     assertEquals(false, testC.equals(testB)); [EOL]     assertEquals(false, testA.hashCode() == testC.hashCode()); [EOL]     assertEquals(false, testB.hashCode() == testC.hashCode()); [EOL]     assertEquals(true, testA.equals(Days.days(20))); [EOL]     assertEquals(true, testA.equals(new Period(0, 0, 0, 20, 0, 0, 0, 0, PeriodType.days()))); [EOL]     assertEquals(false, testA.equals(Period.days(2))); [EOL]     assertEquals(false, testA.equals("Hello")); [EOL]     assertEquals(false, testA.equals(Hours.hours(2))); [EOL]     assertEquals(false, testA.equals(null)); [EOL] }
public void testEqualsHashCode() { [EOL]     Single testA = new Single(20); [EOL]     Single testB = new Single(20); [EOL]     assertEquals(true, testA.equals(testB)); [EOL]     assertEquals(true, testB.equals(testA)); [EOL]     assertEquals(true, testA.equals(testA)); [EOL]     assertEquals(true, testB.equals(testB)); [EOL]     assertEquals(true, testA.hashCode() == testB.hashCode()); [EOL]     assertEquals(true, testA.hashCode() == testA.hashCode()); [EOL]     assertEquals(true, testB.hashCode() == testB.hashCode()); [EOL]     Single testC = new Single(30); [EOL]     assertEquals(false, testA.equals(testC)); [EOL]     assertEquals(false, testB.equals(testC)); [EOL]     assertEquals(false, testC.equals(testA)); [EOL]     assertEquals(false, testC.equals(testB)); [EOL]     assertEquals(false, testA.hashCode() == testC.hashCode()); [EOL]     assertEquals(false, testB.hashCode() == testC.hashCode()); [EOL]     assertEquals(true, testA.equals(Days.days(20))); [EOL]     assertEquals(true, testA.equals(new Period(0, 0, 0, 20, 0, 0, 0, 0, PeriodType.days()))); [EOL]     assertEquals(false, testA.equals(Period.days(2))); [EOL]     assertEquals(false, testA.equals("Hello")); [EOL]     assertEquals(false, testA.equals(Hours.hours(2))); [EOL]     assertEquals(false, testA.equals(null)); [EOL] }
public void testEqualsHashCode() { [EOL]     Single testA = new Single(20); [EOL]     Single testB = new Single(20); [EOL]     assertEquals(true, testA.equals(testB)); [EOL]     assertEquals(true, testB.equals(testA)); [EOL]     assertEquals(true, testA.equals(testA)); [EOL]     assertEquals(true, testB.equals(testB)); [EOL]     assertEquals(true, testA.hashCode() == testB.hashCode()); [EOL]     assertEquals(true, testA.hashCode() == testA.hashCode()); [EOL]     assertEquals(true, testB.hashCode() == testB.hashCode()); [EOL]     Single testC = new Single(30); [EOL]     assertEquals(false, testA.equals(testC)); [EOL]     assertEquals(false, testB.equals(testC)); [EOL]     assertEquals(false, testC.equals(testA)); [EOL]     assertEquals(false, testC.equals(testB)); [EOL]     assertEquals(false, testA.hashCode() == testC.hashCode()); [EOL]     assertEquals(false, testB.hashCode() == testC.hashCode()); [EOL]     assertEquals(true, testA.equals(Days.days(20))); [EOL]     assertEquals(true, testA.equals(new Period(0, 0, 0, 20, 0, 0, 0, 0, PeriodType.days()))); [EOL]     assertEquals(false, testA.equals(Period.days(2))); [EOL]     assertEquals(false, testA.equals("Hello")); [EOL]     assertEquals(false, testA.equals(Hours.hours(2))); [EOL]     assertEquals(false, testA.equals(null)); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testConstructor_RI_RI4() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2005, 7, 17, 1, 1, 1, 1); [EOL]     DateTime dt2 = null; [EOL]     Period test = new Period(dt1, dt2); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(-3, test.getYears()); [EOL]     assertEquals(-1, test.getMonths()); [EOL]     assertEquals(-1, test.getWeeks()); [EOL]     assertEquals(-1, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(-1, test.getMinutes()); [EOL]     assertEquals(-1, test.getSeconds()); [EOL]     assertEquals(-1, test.getMillis()); [EOL] }
public void testConstructor_RI_RI4() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2005, 7, 17, 1, 1, 1, 1); [EOL]     DateTime dt2 = null; [EOL]     Period test = new Period(dt1, dt2); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(-3, test.getYears()); [EOL]     assertEquals(-1, test.getMonths()); [EOL]     assertEquals(-1, test.getWeeks()); [EOL]     assertEquals(-1, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(-1, test.getMinutes()); [EOL]     assertEquals(-1, test.getSeconds()); [EOL]     assertEquals(-1, test.getMillis()); [EOL] }
public void testConstructor_RI_RI4() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2005, 7, 17, 1, 1, 1, 1); [EOL]     DateTime dt2 = null; [EOL]     Period test = new Period(dt1, dt2); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(-3, test.getYears()); [EOL]     assertEquals(-1, test.getMonths()); [EOL]     assertEquals(-1, test.getWeeks()); [EOL]     assertEquals(-1, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(-1, test.getMinutes()); [EOL]     assertEquals(-1, test.getSeconds()); [EOL]     assertEquals(-1, test.getMillis()); [EOL] }
public void testConstructor_RI_RI4() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2005, 7, 17, 1, 1, 1, 1); [EOL]     DateTime dt2 = null; [EOL]     Period test = new Period(dt1, dt2); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(-3, test.getYears()); [EOL]     assertEquals(-1, test.getMonths()); [EOL]     assertEquals(-1, test.getWeeks()); [EOL]     assertEquals(-1, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(-1, test.getMinutes()); [EOL]     assertEquals(-1, test.getSeconds()); [EOL]     assertEquals(-1, test.getMillis()); [EOL] }
public void testConstructor_RI_RI4() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2005, 7, 17, 1, 1, 1, 1); [EOL]     DateTime dt2 = null; [EOL]     Period test = new Period(dt1, dt2); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(-3, test.getYears()); [EOL]     assertEquals(-1, test.getMonths()); [EOL]     assertEquals(-1, test.getWeeks()); [EOL]     assertEquals(-1, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(-1, test.getMinutes()); [EOL]     assertEquals(-1, test.getSeconds()); [EOL]     assertEquals(-1, test.getMillis()); [EOL] }
public void testConstructor_RI_RI4() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2005, 7, 17, 1, 1, 1, 1); [EOL]     DateTime dt2 = null; [EOL]     Period test = new Period(dt1, dt2); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(-3, test.getYears()); [EOL]     assertEquals(-1, test.getMonths()); [EOL]     assertEquals(-1, test.getWeeks()); [EOL]     assertEquals(-1, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(-1, test.getMinutes()); [EOL]     assertEquals(-1, test.getSeconds()); [EOL]     assertEquals(-1, test.getMillis()); [EOL] }
public void testConstructor_RI_RI4() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2005, 7, 17, 1, 1, 1, 1); [EOL]     DateTime dt2 = null; [EOL]     Period test = new Period(dt1, dt2); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(-3, test.getYears()); [EOL]     assertEquals(-1, test.getMonths()); [EOL]     assertEquals(-1, test.getWeeks()); [EOL]     assertEquals(-1, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(-1, test.getMinutes()); [EOL]     assertEquals(-1, test.getSeconds()); [EOL]     assertEquals(-1, test.getMillis()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testSeconds() { [EOL]     Seconds test = Seconds.seconds(5); [EOL]     String str = StringConvert.INSTANCE.convertToString(test); [EOL]     assertEquals("PT5S", str); [EOL]     assertEquals(test, StringConvert.INSTANCE.convertFromString(Seconds.class, str)); [EOL] }
public void testSeconds() { [EOL]     Seconds test = Seconds.seconds(5); [EOL]     String str = StringConvert.INSTANCE.convertToString(test); [EOL]     assertEquals("PT5S", str); [EOL]     assertEquals(test, StringConvert.INSTANCE.convertFromString(Seconds.class, str)); [EOL] }
public void testSeconds() { [EOL]     Seconds test = Seconds.seconds(5); [EOL]     String str = StringConvert.INSTANCE.convertToString(test); [EOL]     assertEquals("PT5S", str); [EOL]     assertEquals(test, StringConvert.INSTANCE.convertFromString(Seconds.class, str)); [EOL] }
public void testPropertyEqualsHashCodeLenient() { [EOL]     LocalDate test1 = new LocalDate(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     LocalDate test2 = new LocalDate(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL] }
public void testSampleDate2() { [EOL]     DateTime dt = new DateTime(2005, 11, 26, 0, 0, 0, 0, ISO_UTC); [EOL]     dt = dt.withChronology(ISLAMIC_UTC); [EOL]     assertEquals(IslamicChronology.AH, dt.getEra()); [EOL]     assertEquals(15, dt.getCenturyOfEra()); [EOL]     assertEquals(26, dt.getYearOfCentury()); [EOL]     assertEquals(1426, dt.getYearOfEra()); [EOL]     assertEquals(1426, dt.getYear()); [EOL]     Property fld = dt.year(); [EOL]     assertEquals(true, fld.isLeap()); [EOL]     assertEquals(1, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(10, dt.getMonthOfYear()); [EOL]     fld = dt.monthOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(12, fld.getMaximumValue()); [EOL]     assertEquals(12, fld.getMaximumValueOverall()); [EOL]     assertEquals(24, dt.getDayOfMonth()); [EOL]     fld = dt.dayOfMonth(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(29, fld.getMaximumValue()); [EOL]     assertEquals(30, fld.getMaximumValueOverall()); [EOL]     assertEquals(DateTimeConstants.SATURDAY, dt.getDayOfWeek()); [EOL]     fld = dt.dayOfWeek(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(7, fld.getMaximumValue()); [EOL]     assertEquals(7, fld.getMaximumValueOverall()); [EOL]     assertEquals(5 * 30 + 4 * 29 + 24, dt.getDayOfYear()); [EOL]     fld = dt.dayOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(355, fld.getMaximumValue()); [EOL]     assertEquals(355, fld.getMaximumValueOverall()); [EOL]     assertEquals(0, dt.getHourOfDay()); [EOL]     assertEquals(0, dt.getMinuteOfHour()); [EOL]     assertEquals(0, dt.getSecondOfMinute()); [EOL]     assertEquals(0, dt.getMillisOfSecond()); [EOL] }
public void testSampleDate2() { [EOL]     DateTime dt = new DateTime(2005, 11, 26, 0, 0, 0, 0, ISO_UTC); [EOL]     dt = dt.withChronology(ISLAMIC_UTC); [EOL]     assertEquals(IslamicChronology.AH, dt.getEra()); [EOL]     assertEquals(15, dt.getCenturyOfEra()); [EOL]     assertEquals(26, dt.getYearOfCentury()); [EOL]     assertEquals(1426, dt.getYearOfEra()); [EOL]     assertEquals(1426, dt.getYear()); [EOL]     Property fld = dt.year(); [EOL]     assertEquals(true, fld.isLeap()); [EOL]     assertEquals(1, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(10, dt.getMonthOfYear()); [EOL]     fld = dt.monthOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(12, fld.getMaximumValue()); [EOL]     assertEquals(12, fld.getMaximumValueOverall()); [EOL]     assertEquals(24, dt.getDayOfMonth()); [EOL]     fld = dt.dayOfMonth(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(29, fld.getMaximumValue()); [EOL]     assertEquals(30, fld.getMaximumValueOverall()); [EOL]     assertEquals(DateTimeConstants.SATURDAY, dt.getDayOfWeek()); [EOL]     fld = dt.dayOfWeek(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(7, fld.getMaximumValue()); [EOL]     assertEquals(7, fld.getMaximumValueOverall()); [EOL]     assertEquals(5 * 30 + 4 * 29 + 24, dt.getDayOfYear()); [EOL]     fld = dt.dayOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(355, fld.getMaximumValue()); [EOL]     assertEquals(355, fld.getMaximumValueOverall()); [EOL]     assertEquals(0, dt.getHourOfDay()); [EOL]     assertEquals(0, dt.getMinuteOfHour()); [EOL]     assertEquals(0, dt.getSecondOfMinute()); [EOL]     assertEquals(0, dt.getMillisOfSecond()); [EOL] }
public void testSampleDate2() { [EOL]     DateTime dt = new DateTime(2005, 11, 26, 0, 0, 0, 0, ISO_UTC); [EOL]     dt = dt.withChronology(ISLAMIC_UTC); [EOL]     assertEquals(IslamicChronology.AH, dt.getEra()); [EOL]     assertEquals(15, dt.getCenturyOfEra()); [EOL]     assertEquals(26, dt.getYearOfCentury()); [EOL]     assertEquals(1426, dt.getYearOfEra()); [EOL]     assertEquals(1426, dt.getYear()); [EOL]     Property fld = dt.year(); [EOL]     assertEquals(true, fld.isLeap()); [EOL]     assertEquals(1, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(10, dt.getMonthOfYear()); [EOL]     fld = dt.monthOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(12, fld.getMaximumValue()); [EOL]     assertEquals(12, fld.getMaximumValueOverall()); [EOL]     assertEquals(24, dt.getDayOfMonth()); [EOL]     fld = dt.dayOfMonth(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(29, fld.getMaximumValue()); [EOL]     assertEquals(30, fld.getMaximumValueOverall()); [EOL]     assertEquals(DateTimeConstants.SATURDAY, dt.getDayOfWeek()); [EOL]     fld = dt.dayOfWeek(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(7, fld.getMaximumValue()); [EOL]     assertEquals(7, fld.getMaximumValueOverall()); [EOL]     assertEquals(5 * 30 + 4 * 29 + 24, dt.getDayOfYear()); [EOL]     fld = dt.dayOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(355, fld.getMaximumValue()); [EOL]     assertEquals(355, fld.getMaximumValueOverall()); [EOL]     assertEquals(0, dt.getHourOfDay()); [EOL]     assertEquals(0, dt.getMinuteOfHour()); [EOL]     assertEquals(0, dt.getSecondOfMinute()); [EOL]     assertEquals(0, dt.getMillisOfSecond()); [EOL] }
public void testSampleDate2() { [EOL]     DateTime dt = new DateTime(2005, 11, 26, 0, 0, 0, 0, ISO_UTC); [EOL]     dt = dt.withChronology(ISLAMIC_UTC); [EOL]     assertEquals(IslamicChronology.AH, dt.getEra()); [EOL]     assertEquals(15, dt.getCenturyOfEra()); [EOL]     assertEquals(26, dt.getYearOfCentury()); [EOL]     assertEquals(1426, dt.getYearOfEra()); [EOL]     assertEquals(1426, dt.getYear()); [EOL]     Property fld = dt.year(); [EOL]     assertEquals(true, fld.isLeap()); [EOL]     assertEquals(1, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(10, dt.getMonthOfYear()); [EOL]     fld = dt.monthOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(12, fld.getMaximumValue()); [EOL]     assertEquals(12, fld.getMaximumValueOverall()); [EOL]     assertEquals(24, dt.getDayOfMonth()); [EOL]     fld = dt.dayOfMonth(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(29, fld.getMaximumValue()); [EOL]     assertEquals(30, fld.getMaximumValueOverall()); [EOL]     assertEquals(DateTimeConstants.SATURDAY, dt.getDayOfWeek()); [EOL]     fld = dt.dayOfWeek(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(7, fld.getMaximumValue()); [EOL]     assertEquals(7, fld.getMaximumValueOverall()); [EOL]     assertEquals(5 * 30 + 4 * 29 + 24, dt.getDayOfYear()); [EOL]     fld = dt.dayOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(355, fld.getMaximumValue()); [EOL]     assertEquals(355, fld.getMaximumValueOverall()); [EOL]     assertEquals(0, dt.getHourOfDay()); [EOL]     assertEquals(0, dt.getMinuteOfHour()); [EOL]     assertEquals(0, dt.getSecondOfMinute()); [EOL]     assertEquals(0, dt.getMillisOfSecond()); [EOL] }
public void testSampleDate2() { [EOL]     DateTime dt = new DateTime(2005, 11, 26, 0, 0, 0, 0, ISO_UTC); [EOL]     dt = dt.withChronology(ISLAMIC_UTC); [EOL]     assertEquals(IslamicChronology.AH, dt.getEra()); [EOL]     assertEquals(15, dt.getCenturyOfEra()); [EOL]     assertEquals(26, dt.getYearOfCentury()); [EOL]     assertEquals(1426, dt.getYearOfEra()); [EOL]     assertEquals(1426, dt.getYear()); [EOL]     Property fld = dt.year(); [EOL]     assertEquals(true, fld.isLeap()); [EOL]     assertEquals(1, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(10, dt.getMonthOfYear()); [EOL]     fld = dt.monthOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(12, fld.getMaximumValue()); [EOL]     assertEquals(12, fld.getMaximumValueOverall()); [EOL]     assertEquals(24, dt.getDayOfMonth()); [EOL]     fld = dt.dayOfMonth(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(29, fld.getMaximumValue()); [EOL]     assertEquals(30, fld.getMaximumValueOverall()); [EOL]     assertEquals(DateTimeConstants.SATURDAY, dt.getDayOfWeek()); [EOL]     fld = dt.dayOfWeek(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(7, fld.getMaximumValue()); [EOL]     assertEquals(7, fld.getMaximumValueOverall()); [EOL]     assertEquals(5 * 30 + 4 * 29 + 24, dt.getDayOfYear()); [EOL]     fld = dt.dayOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(355, fld.getMaximumValue()); [EOL]     assertEquals(355, fld.getMaximumValueOverall()); [EOL]     assertEquals(0, dt.getHourOfDay()); [EOL]     assertEquals(0, dt.getMinuteOfHour()); [EOL]     assertEquals(0, dt.getSecondOfMinute()); [EOL]     assertEquals(0, dt.getMillisOfSecond()); [EOL] }
public void testSampleDate2() { [EOL]     DateTime dt = new DateTime(2005, 11, 26, 0, 0, 0, 0, ISO_UTC); [EOL]     dt = dt.withChronology(ISLAMIC_UTC); [EOL]     assertEquals(IslamicChronology.AH, dt.getEra()); [EOL]     assertEquals(15, dt.getCenturyOfEra()); [EOL]     assertEquals(26, dt.getYearOfCentury()); [EOL]     assertEquals(1426, dt.getYearOfEra()); [EOL]     assertEquals(1426, dt.getYear()); [EOL]     Property fld = dt.year(); [EOL]     assertEquals(true, fld.isLeap()); [EOL]     assertEquals(1, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(10, dt.getMonthOfYear()); [EOL]     fld = dt.monthOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(12, fld.getMaximumValue()); [EOL]     assertEquals(12, fld.getMaximumValueOverall()); [EOL]     assertEquals(24, dt.getDayOfMonth()); [EOL]     fld = dt.dayOfMonth(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(29, fld.getMaximumValue()); [EOL]     assertEquals(30, fld.getMaximumValueOverall()); [EOL]     assertEquals(DateTimeConstants.SATURDAY, dt.getDayOfWeek()); [EOL]     fld = dt.dayOfWeek(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(7, fld.getMaximumValue()); [EOL]     assertEquals(7, fld.getMaximumValueOverall()); [EOL]     assertEquals(5 * 30 + 4 * 29 + 24, dt.getDayOfYear()); [EOL]     fld = dt.dayOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(355, fld.getMaximumValue()); [EOL]     assertEquals(355, fld.getMaximumValueOverall()); [EOL]     assertEquals(0, dt.getHourOfDay()); [EOL]     assertEquals(0, dt.getMinuteOfHour()); [EOL]     assertEquals(0, dt.getSecondOfMinute()); [EOL]     assertEquals(0, dt.getMillisOfSecond()); [EOL] }
public void testSampleDate2() { [EOL]     DateTime dt = new DateTime(2005, 11, 26, 0, 0, 0, 0, ISO_UTC); [EOL]     dt = dt.withChronology(ISLAMIC_UTC); [EOL]     assertEquals(IslamicChronology.AH, dt.getEra()); [EOL]     assertEquals(15, dt.getCenturyOfEra()); [EOL]     assertEquals(26, dt.getYearOfCentury()); [EOL]     assertEquals(1426, dt.getYearOfEra()); [EOL]     assertEquals(1426, dt.getYear()); [EOL]     Property fld = dt.year(); [EOL]     assertEquals(true, fld.isLeap()); [EOL]     assertEquals(1, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(10, dt.getMonthOfYear()); [EOL]     fld = dt.monthOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(12, fld.getMaximumValue()); [EOL]     assertEquals(12, fld.getMaximumValueOverall()); [EOL]     assertEquals(24, dt.getDayOfMonth()); [EOL]     fld = dt.dayOfMonth(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(29, fld.getMaximumValue()); [EOL]     assertEquals(30, fld.getMaximumValueOverall()); [EOL]     assertEquals(DateTimeConstants.SATURDAY, dt.getDayOfWeek()); [EOL]     fld = dt.dayOfWeek(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(7, fld.getMaximumValue()); [EOL]     assertEquals(7, fld.getMaximumValueOverall()); [EOL]     assertEquals(5 * 30 + 4 * 29 + 24, dt.getDayOfYear()); [EOL]     fld = dt.dayOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(355, fld.getMaximumValue()); [EOL]     assertEquals(355, fld.getMaximumValueOverall()); [EOL]     assertEquals(0, dt.getHourOfDay()); [EOL]     assertEquals(0, dt.getMinuteOfHour()); [EOL]     assertEquals(0, dt.getSecondOfMinute()); [EOL]     assertEquals(0, dt.getMillisOfSecond()); [EOL] }
public void testSampleDate2() { [EOL]     DateTime dt = new DateTime(2005, 11, 26, 0, 0, 0, 0, ISO_UTC); [EOL]     dt = dt.withChronology(ISLAMIC_UTC); [EOL]     assertEquals(IslamicChronology.AH, dt.getEra()); [EOL]     assertEquals(15, dt.getCenturyOfEra()); [EOL]     assertEquals(26, dt.getYearOfCentury()); [EOL]     assertEquals(1426, dt.getYearOfEra()); [EOL]     assertEquals(1426, dt.getYear()); [EOL]     Property fld = dt.year(); [EOL]     assertEquals(true, fld.isLeap()); [EOL]     assertEquals(1, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(10, dt.getMonthOfYear()); [EOL]     fld = dt.monthOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(12, fld.getMaximumValue()); [EOL]     assertEquals(12, fld.getMaximumValueOverall()); [EOL]     assertEquals(24, dt.getDayOfMonth()); [EOL]     fld = dt.dayOfMonth(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(29, fld.getMaximumValue()); [EOL]     assertEquals(30, fld.getMaximumValueOverall()); [EOL]     assertEquals(DateTimeConstants.SATURDAY, dt.getDayOfWeek()); [EOL]     fld = dt.dayOfWeek(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(7, fld.getMaximumValue()); [EOL]     assertEquals(7, fld.getMaximumValueOverall()); [EOL]     assertEquals(5 * 30 + 4 * 29 + 24, dt.getDayOfYear()); [EOL]     fld = dt.dayOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(355, fld.getMaximumValue()); [EOL]     assertEquals(355, fld.getMaximumValueOverall()); [EOL]     assertEquals(0, dt.getHourOfDay()); [EOL]     assertEquals(0, dt.getMinuteOfHour()); [EOL]     assertEquals(0, dt.getSecondOfMinute()); [EOL]     assertEquals(0, dt.getMillisOfSecond()); [EOL] }
public void testSampleDate2() { [EOL]     DateTime dt = new DateTime(2005, 11, 26, 0, 0, 0, 0, ISO_UTC); [EOL]     dt = dt.withChronology(ISLAMIC_UTC); [EOL]     assertEquals(IslamicChronology.AH, dt.getEra()); [EOL]     assertEquals(15, dt.getCenturyOfEra()); [EOL]     assertEquals(26, dt.getYearOfCentury()); [EOL]     assertEquals(1426, dt.getYearOfEra()); [EOL]     assertEquals(1426, dt.getYear()); [EOL]     Property fld = dt.year(); [EOL]     assertEquals(true, fld.isLeap()); [EOL]     assertEquals(1, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(10, dt.getMonthOfYear()); [EOL]     fld = dt.monthOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(12, fld.getMaximumValue()); [EOL]     assertEquals(12, fld.getMaximumValueOverall()); [EOL]     assertEquals(24, dt.getDayOfMonth()); [EOL]     fld = dt.dayOfMonth(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(29, fld.getMaximumValue()); [EOL]     assertEquals(30, fld.getMaximumValueOverall()); [EOL]     assertEquals(DateTimeConstants.SATURDAY, dt.getDayOfWeek()); [EOL]     fld = dt.dayOfWeek(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(7, fld.getMaximumValue()); [EOL]     assertEquals(7, fld.getMaximumValueOverall()); [EOL]     assertEquals(5 * 30 + 4 * 29 + 24, dt.getDayOfYear()); [EOL]     fld = dt.dayOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(355, fld.getMaximumValue()); [EOL]     assertEquals(355, fld.getMaximumValueOverall()); [EOL]     assertEquals(0, dt.getHourOfDay()); [EOL]     assertEquals(0, dt.getMinuteOfHour()); [EOL]     assertEquals(0, dt.getSecondOfMinute()); [EOL]     assertEquals(0, dt.getMillisOfSecond()); [EOL] }
public void testFormat_yearOfEra_twoDigit() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "04", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "23", f.print(dt)); [EOL]     f = f.withZoneUTC(); [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(1922, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("22")); [EOL]     expect = new DateTime(2021, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("21")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = f.withPivotYear(new Integer(2050)); [EOL]     expect = new DateTime(2000, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("00")); [EOL]     expect = new DateTime(2099, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("99")); [EOL]     f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     f = f.withZoneUTC(); [EOL]     f.parseDateTime("5"); [EOL]     f.parseDateTime("005"); [EOL]     f.parseDateTime("+50"); [EOL]     f.parseDateTime("-50"); [EOL] }
public void testSampleDate2() { [EOL]     DateTime dt = new DateTime(2005, 11, 26, 0, 0, 0, 0, ISO_UTC); [EOL]     dt = dt.withChronology(ISLAMIC_UTC); [EOL]     assertEquals(IslamicChronology.AH, dt.getEra()); [EOL]     assertEquals(15, dt.getCenturyOfEra()); [EOL]     assertEquals(26, dt.getYearOfCentury()); [EOL]     assertEquals(1426, dt.getYearOfEra()); [EOL]     assertEquals(1426, dt.getYear()); [EOL]     Property fld = dt.year(); [EOL]     assertEquals(true, fld.isLeap()); [EOL]     assertEquals(1, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(10, dt.getMonthOfYear()); [EOL]     fld = dt.monthOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(12, fld.getMaximumValue()); [EOL]     assertEquals(12, fld.getMaximumValueOverall()); [EOL]     assertEquals(24, dt.getDayOfMonth()); [EOL]     fld = dt.dayOfMonth(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(29, fld.getMaximumValue()); [EOL]     assertEquals(30, fld.getMaximumValueOverall()); [EOL]     assertEquals(DateTimeConstants.SATURDAY, dt.getDayOfWeek()); [EOL]     fld = dt.dayOfWeek(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(7, fld.getMaximumValue()); [EOL]     assertEquals(7, fld.getMaximumValueOverall()); [EOL]     assertEquals(5 * 30 + 4 * 29 + 24, dt.getDayOfYear()); [EOL]     fld = dt.dayOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(355, fld.getMaximumValue()); [EOL]     assertEquals(355, fld.getMaximumValueOverall()); [EOL]     assertEquals(0, dt.getHourOfDay()); [EOL]     assertEquals(0, dt.getMinuteOfHour()); [EOL]     assertEquals(0, dt.getSecondOfMinute()); [EOL]     assertEquals(0, dt.getMillisOfSecond()); [EOL] }
public void testSampleDate2() { [EOL]     DateTime dt = new DateTime(2005, 11, 26, 0, 0, 0, 0, ISO_UTC); [EOL]     dt = dt.withChronology(ISLAMIC_UTC); [EOL]     assertEquals(IslamicChronology.AH, dt.getEra()); [EOL]     assertEquals(15, dt.getCenturyOfEra()); [EOL]     assertEquals(26, dt.getYearOfCentury()); [EOL]     assertEquals(1426, dt.getYearOfEra()); [EOL]     assertEquals(1426, dt.getYear()); [EOL]     Property fld = dt.year(); [EOL]     assertEquals(true, fld.isLeap()); [EOL]     assertEquals(1, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(10, dt.getMonthOfYear()); [EOL]     fld = dt.monthOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(12, fld.getMaximumValue()); [EOL]     assertEquals(12, fld.getMaximumValueOverall()); [EOL]     assertEquals(24, dt.getDayOfMonth()); [EOL]     fld = dt.dayOfMonth(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(29, fld.getMaximumValue()); [EOL]     assertEquals(30, fld.getMaximumValueOverall()); [EOL]     assertEquals(DateTimeConstants.SATURDAY, dt.getDayOfWeek()); [EOL]     fld = dt.dayOfWeek(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(7, fld.getMaximumValue()); [EOL]     assertEquals(7, fld.getMaximumValueOverall()); [EOL]     assertEquals(5 * 30 + 4 * 29 + 24, dt.getDayOfYear()); [EOL]     fld = dt.dayOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(355, fld.getMaximumValue()); [EOL]     assertEquals(355, fld.getMaximumValueOverall()); [EOL]     assertEquals(0, dt.getHourOfDay()); [EOL]     assertEquals(0, dt.getMinuteOfHour()); [EOL]     assertEquals(0, dt.getSecondOfMinute()); [EOL]     assertEquals(0, dt.getMillisOfSecond()); [EOL] }
public void testPropertyEqualsHashCodeLenient() { [EOL]     LocalDate test1 = new LocalDate(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     LocalDate test2 = new LocalDate(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL] }
public void testPropertyEqualsHashCodeLenient() { [EOL]     LocalDate test1 = new LocalDate(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     LocalDate test2 = new LocalDate(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL] }
public void testPropertyEqualsHashCodeLenient() { [EOL]     LocalDate test1 = new LocalDate(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     LocalDate test2 = new LocalDate(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL] }
public void testPropertyEqualsHashCodeLenient() { [EOL]     LocalDate test1 = new LocalDate(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     LocalDate test2 = new LocalDate(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL] }
public void testPropertyEqualsHashCodeLenient() { [EOL]     LocalDate test1 = new LocalDate(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     LocalDate test2 = new LocalDate(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL] }
public void testPropertyEqualsHashCodeLenient() { [EOL]     LocalDate test1 = new LocalDate(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     LocalDate test2 = new LocalDate(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testFactory_weeksBetween_RPartial() { [EOL]     LocalDate start = new LocalDate(2006, 6, 9); [EOL]     LocalDate end1 = new LocalDate(2006, 6, 30); [EOL]     YearMonthDay end2 = new YearMonthDay(2006, 7, 21); [EOL]     assertEquals(3, Weeks.weeksBetween(start, end1).getWeeks()); [EOL]     assertEquals(0, Weeks.weeksBetween(start, start).getWeeks()); [EOL]     assertEquals(0, Weeks.weeksBetween(end1, end1).getWeeks()); [EOL]     assertEquals(-3, Weeks.weeksBetween(end1, start).getWeeks()); [EOL]     assertEquals(6, Weeks.weeksBetween(start, end2).getWeeks()); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testFactory_weeksBetween_RPartial() { [EOL]     LocalDate start = new LocalDate(2006, 6, 9); [EOL]     LocalDate end1 = new LocalDate(2006, 6, 30); [EOL]     YearMonthDay end2 = new YearMonthDay(2006, 7, 21); [EOL]     assertEquals(3, Weeks.weeksBetween(start, end1).getWeeks()); [EOL]     assertEquals(0, Weeks.weeksBetween(start, start).getWeeks()); [EOL]     assertEquals(0, Weeks.weeksBetween(end1, end1).getWeeks()); [EOL]     assertEquals(-3, Weeks.weeksBetween(end1, start).getWeeks()); [EOL]     assertEquals(6, Weeks.weeksBetween(start, end2).getWeeks()); [EOL] }
public void testFactory_weeksIn_RInterval() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 6, 30, 12, 0, 0, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 7, 21, 12, 0, 0, 0, PARIS); [EOL]     assertEquals(0, Weeks.weeksIn((ReadableInterval) null).getWeeks()); [EOL]     assertEquals(3, Weeks.weeksIn(new Interval(start, end1)).getWeeks()); [EOL]     assertEquals(0, Weeks.weeksIn(new Interval(start, start)).getWeeks()); [EOL]     assertEquals(0, Weeks.weeksIn(new Interval(end1, end1)).getWeeks()); [EOL]     assertEquals(6, Weeks.weeksIn(new Interval(start, end2)).getWeeks()); [EOL] }
public void testFactory_weeksIn_RInterval() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 6, 30, 12, 0, 0, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 7, 21, 12, 0, 0, 0, PARIS); [EOL]     assertEquals(0, Weeks.weeksIn((ReadableInterval) null).getWeeks()); [EOL]     assertEquals(3, Weeks.weeksIn(new Interval(start, end1)).getWeeks()); [EOL]     assertEquals(0, Weeks.weeksIn(new Interval(start, start)).getWeeks()); [EOL]     assertEquals(0, Weeks.weeksIn(new Interval(end1, end1)).getWeeks()); [EOL]     assertEquals(6, Weeks.weeksIn(new Interval(start, end2)).getWeeks()); [EOL] }
public void testToStandardMinutes() { [EOL]     Weeks test = Weeks.weeks(2); [EOL]     Minutes expected = Minutes.minutes(2 * 7 * 24 * 60); [EOL]     assertEquals(expected, test.toStandardMinutes()); [EOL]     try { [EOL]         Weeks.MAX_VALUE.toStandardMinutes(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testToStandardMinutes() { [EOL]     Weeks test = Weeks.weeks(2); [EOL]     Minutes expected = Minutes.minutes(2 * 7 * 24 * 60); [EOL]     assertEquals(expected, test.toStandardMinutes()); [EOL]     try { [EOL]         Weeks.MAX_VALUE.toStandardMinutes(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMinus_int() { [EOL]     Weeks test2 = Weeks.weeks(2); [EOL]     Weeks result = test2.minus(3); [EOL]     assertEquals(2, test2.getWeeks()); [EOL]     assertEquals(-1, result.getWeeks()); [EOL]     assertEquals(1, Weeks.ONE.minus(0).getWeeks()); [EOL]     try { [EOL]         Weeks.MIN_VALUE.minus(1); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMinus_int() { [EOL]     Weeks test2 = Weeks.weeks(2); [EOL]     Weeks result = test2.minus(3); [EOL]     assertEquals(2, test2.getWeeks()); [EOL]     assertEquals(-1, result.getWeeks()); [EOL]     assertEquals(1, Weeks.ONE.minus(0).getWeeks()); [EOL]     try { [EOL]         Weeks.MIN_VALUE.minus(1); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testPlus_Weeks() { [EOL]     Weeks test2 = Weeks.weeks(2); [EOL]     Weeks test3 = Weeks.weeks(3); [EOL]     Weeks result = test2.plus(test3); [EOL]     assertEquals(2, test2.getWeeks()); [EOL]     assertEquals(3, test3.getWeeks()); [EOL]     assertEquals(5, result.getWeeks()); [EOL]     assertEquals(1, Weeks.ONE.plus(Weeks.ZERO).getWeeks()); [EOL]     assertEquals(1, Weeks.ONE.plus((Weeks) null).getWeeks()); [EOL]     try { [EOL]         Weeks.MAX_VALUE.plus(Weeks.ONE); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testPlus_Weeks() { [EOL]     Weeks test2 = Weeks.weeks(2); [EOL]     Weeks test3 = Weeks.weeks(3); [EOL]     Weeks result = test2.plus(test3); [EOL]     assertEquals(2, test2.getWeeks()); [EOL]     assertEquals(3, test3.getWeeks()); [EOL]     assertEquals(5, result.getWeeks()); [EOL]     assertEquals(1, Weeks.ONE.plus(Weeks.ZERO).getWeeks()); [EOL]     assertEquals(1, Weeks.ONE.plus((Weeks) null).getWeeks()); [EOL]     try { [EOL]         Weeks.MAX_VALUE.plus(Weeks.ONE); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMinus_int() { [EOL]     Weeks test2 = Weeks.weeks(2); [EOL]     Weeks result = test2.minus(3); [EOL]     assertEquals(2, test2.getWeeks()); [EOL]     assertEquals(-1, result.getWeeks()); [EOL]     assertEquals(1, Weeks.ONE.minus(0).getWeeks()); [EOL]     try { [EOL]         Weeks.MIN_VALUE.minus(1); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMinus_int() { [EOL]     Weeks test2 = Weeks.weeks(2); [EOL]     Weeks result = test2.minus(3); [EOL]     assertEquals(2, test2.getWeeks()); [EOL]     assertEquals(-1, result.getWeeks()); [EOL]     assertEquals(1, Weeks.ONE.minus(0).getWeeks()); [EOL]     try { [EOL]         Weeks.MIN_VALUE.minus(1); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMinus_int() { [EOL]     Weeks test2 = Weeks.weeks(2); [EOL]     Weeks result = test2.minus(3); [EOL]     assertEquals(2, test2.getWeeks()); [EOL]     assertEquals(-1, result.getWeeks()); [EOL]     assertEquals(1, Weeks.ONE.minus(0).getWeeks()); [EOL]     try { [EOL]         Weeks.MIN_VALUE.minus(1); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testSerialization() throws Exception { [EOL]     LocalDate test = new LocalDate(1972, 6, 9, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     LocalDate result = (LocalDate) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testSerialization() throws Exception { [EOL]     LocalDate test = new LocalDate(1972, 6, 9, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     LocalDate result = (LocalDate) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testFormatParse_textMonthApr_Korean() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("EEEE, d MMMM yyyy HH:mm").withLocale(Locale.KOREAN).withZoneUTC(); [EOL]     String str = new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     assertEquals(new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC), date); [EOL] }
public void testFormatParse_textMonthApr_Korean() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("EEEE, d MMMM yyyy HH:mm").withLocale(Locale.KOREAN).withZoneUTC(); [EOL]     String str = new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     assertEquals(new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC), date); [EOL] }
public void testFormatParse_textMonthApr_Korean() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("EEEE, d MMMM yyyy HH:mm").withLocale(Locale.KOREAN).withZoneUTC(); [EOL]     String str = new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     assertEquals(new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC), date); [EOL] }
public void testFormatParse_textMonthApr_Korean() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("EEEE, d MMMM yyyy HH:mm").withLocale(Locale.KOREAN).withZoneUTC(); [EOL]     String str = new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     assertEquals(new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC), date); [EOL] }
public void testFormatParse_textMonthApr_Korean() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("EEEE, d MMMM yyyy HH:mm").withLocale(Locale.KOREAN).withZoneUTC(); [EOL]     String str = new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     assertEquals(new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC), date); [EOL] }
public void testFormatParse_textMonthApr_Korean() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("EEEE, d MMMM yyyy HH:mm").withLocale(Locale.KOREAN).withZoneUTC(); [EOL]     String str = new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     assertEquals(new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC), date); [EOL] }
public void test_now_Chronology() throws Throwable { [EOL]     DateTime test = DateTime.now(GregorianChronology.getInstance()); [EOL]     assertEquals(GregorianChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] }
public void test_now_Chronology() throws Throwable { [EOL]     DateTime test = DateTime.now(GregorianChronology.getInstance()); [EOL]     assertEquals(GregorianChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] }
public void testDateTime() { [EOL]     DateTime test = new DateTime(2010, 6, 30, 2, 30, 50, 678, ISOChronology.getInstance(ZONE)); [EOL]     String str = StringConvert.INSTANCE.convertToString(test); [EOL]     assertEquals("2010-06-30T02:30:50.678+02:00", str); [EOL]     assertEquals(test, StringConvert.INSTANCE.convertFromString(DateTime.class, str)); [EOL] }
public void testDateTime() { [EOL]     DateTime test = new DateTime(2010, 6, 30, 2, 30, 50, 678, ISOChronology.getInstance(ZONE)); [EOL]     String str = StringConvert.INSTANCE.convertToString(test); [EOL]     assertEquals("2010-06-30T02:30:50.678+02:00", str); [EOL]     assertEquals(test, StringConvert.INSTANCE.convertFromString(DateTime.class, str)); [EOL] }
public void testDateTime() { [EOL]     DateTime test = new DateTime(2010, 6, 30, 2, 30, 50, 678, ISOChronology.getInstance(ZONE)); [EOL]     String str = StringConvert.INSTANCE.convertToString(test); [EOL]     assertEquals("2010-06-30T02:30:50.678+02:00", str); [EOL]     assertEquals(test, StringConvert.INSTANCE.convertFromString(DateTime.class, str)); [EOL] }
public void testConstructor_nullObject() throws Throwable { [EOL]     DateTime test = new DateTime((Object) null); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] }
public void testConstructor_nullObject() throws Throwable { [EOL]     DateTime test = new DateTime((Object) null); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] }
public void testConstructor_nullObject() throws Throwable { [EOL]     DateTime test = new DateTime((Object) null); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] }
public void testConstructor_nullObject() throws Throwable { [EOL]     DateTime test = new DateTime((Object) null); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] }
public void testConstructor_nullObject() throws Throwable { [EOL]     DateTime test = new DateTime((Object) null); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] }
public void testConstructor_int_int_int_int_int_Chronology() throws Throwable { [EOL]     DateTime test = new DateTime(2002, 6, 9, 1, 0, GregorianChronology.getInstance()); [EOL]     assertEquals(GregorianChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] }
public void testConstructor_int_int_int_int_int_int_Chronology() throws Throwable { [EOL]     DateTime test = new DateTime(2002, 6, 9, 1, 0, 0, GregorianChronology.getInstance()); [EOL]     assertEquals(GregorianChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] }
public void testToDateTimeISO() { [EOL]     DateTime test = new DateTime(TEST_TIME1); [EOL]     DateTime result = test.toDateTimeISO(); [EOL]     assertSame(test, result); [EOL]     test = new DateTime(TEST_TIME1, ISO_PARIS); [EOL]     result = test.toDateTimeISO(); [EOL]     assertSame(DateTime.class, result.getClass()); [EOL]     assertSame(ISOChronology.class, result.getChronology().getClass()); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     assertNotSame(test, result); [EOL]     test = new DateTime(TEST_TIME1, BUDDHIST_DEFAULT); [EOL]     result = test.toDateTimeISO(); [EOL]     assertSame(DateTime.class, result.getClass()); [EOL]     assertSame(ISOChronology.class, result.getChronology().getClass()); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISO_DEFAULT, result.getChronology()); [EOL]     assertNotSame(test, result); [EOL]     test = new DateTime(TEST_TIME1, new MockNullZoneChronology()); [EOL]     result = test.toDateTimeISO(); [EOL]     assertSame(DateTime.class, result.getClass()); [EOL]     assertSame(ISOChronology.class, result.getChronology().getClass()); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISO_DEFAULT, result.getChronology()); [EOL]     assertNotSame(test, result); [EOL] }
public void testToDateTimeISO() { [EOL]     DateTime test = new DateTime(TEST_TIME1); [EOL]     DateTime result = test.toDateTimeISO(); [EOL]     assertSame(test, result); [EOL]     test = new DateTime(TEST_TIME1, ISO_PARIS); [EOL]     result = test.toDateTimeISO(); [EOL]     assertSame(DateTime.class, result.getClass()); [EOL]     assertSame(ISOChronology.class, result.getChronology().getClass()); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     assertNotSame(test, result); [EOL]     test = new DateTime(TEST_TIME1, BUDDHIST_DEFAULT); [EOL]     result = test.toDateTimeISO(); [EOL]     assertSame(DateTime.class, result.getClass()); [EOL]     assertSame(ISOChronology.class, result.getChronology().getClass()); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISO_DEFAULT, result.getChronology()); [EOL]     assertNotSame(test, result); [EOL]     test = new DateTime(TEST_TIME1, new MockNullZoneChronology()); [EOL]     result = test.toDateTimeISO(); [EOL]     assertSame(DateTime.class, result.getClass()); [EOL]     assertSame(ISOChronology.class, result.getChronology().getClass()); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISO_DEFAULT, result.getChronology()); [EOL]     assertNotSame(test, result); [EOL] }
public void testToDateTime_DateTimeZone() { [EOL]     DateTime test = new DateTime(TEST_TIME1); [EOL]     DateTime result = test.toDateTime(LONDON); [EOL]     assertSame(test, result); [EOL]     test = new DateTime(TEST_TIME1); [EOL]     result = test.toDateTime(PARIS); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(PARIS, result.getZone()); [EOL]     test = new DateTime(TEST_TIME1, PARIS); [EOL]     result = test.toDateTime((DateTimeZone) null); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(LONDON, result.getZone()); [EOL]     test = new DateTime(TEST_TIME1); [EOL]     result = test.toDateTime((DateTimeZone) null); [EOL]     assertSame(test, result); [EOL] }
public void testToDateTime_DateTimeZone() { [EOL]     DateTime test = new DateTime(TEST_TIME1); [EOL]     DateTime result = test.toDateTime(LONDON); [EOL]     assertSame(test, result); [EOL]     test = new DateTime(TEST_TIME1); [EOL]     result = test.toDateTime(PARIS); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(PARIS, result.getZone()); [EOL]     test = new DateTime(TEST_TIME1, PARIS); [EOL]     result = test.toDateTime((DateTimeZone) null); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(LONDON, result.getZone()); [EOL]     test = new DateTime(TEST_TIME1); [EOL]     result = test.toDateTime((DateTimeZone) null); [EOL]     assertSame(test, result); [EOL] }
public void testToDateTime_Chronology() { [EOL]     DateTime test = new DateTime(TEST_TIME1); [EOL]     DateTime result = test.toDateTime(ISO_DEFAULT); [EOL]     assertSame(test, result); [EOL]     test = new DateTime(TEST_TIME1); [EOL]     result = test.toDateTime(GREGORIAN_PARIS); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(GREGORIAN_PARIS, result.getChronology()); [EOL]     test = new DateTime(TEST_TIME1, GREGORIAN_PARIS); [EOL]     result = test.toDateTime((Chronology) null); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISO_DEFAULT, result.getChronology()); [EOL]     test = new DateTime(TEST_TIME1); [EOL]     result = test.toDateTime((Chronology) null); [EOL]     assertSame(test, result); [EOL] }
public void testToDateTime_Chronology() { [EOL]     DateTime test = new DateTime(TEST_TIME1); [EOL]     DateTime result = test.toDateTime(ISO_DEFAULT); [EOL]     assertSame(test, result); [EOL]     test = new DateTime(TEST_TIME1); [EOL]     result = test.toDateTime(GREGORIAN_PARIS); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(GREGORIAN_PARIS, result.getChronology()); [EOL]     test = new DateTime(TEST_TIME1, GREGORIAN_PARIS); [EOL]     result = test.toDateTime((Chronology) null); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISO_DEFAULT, result.getChronology()); [EOL]     test = new DateTime(TEST_TIME1); [EOL]     result = test.toDateTime((Chronology) null); [EOL]     assertSame(test, result); [EOL] }
public void testFormat_yearOfEra_twoDigit() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "04", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "23", f.print(dt)); [EOL]     f = f.withZoneUTC(); [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(1922, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("22")); [EOL]     expect = new DateTime(2021, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("21")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = f.withPivotYear(new Integer(2050)); [EOL]     expect = new DateTime(2000, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("00")); [EOL]     expect = new DateTime(2099, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("99")); [EOL]     f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     f = f.withZoneUTC(); [EOL]     f.parseDateTime("5"); [EOL]     f.parseDateTime("005"); [EOL]     f.parseDateTime("+50"); [EOL]     f.parseDateTime("-50"); [EOL] }
public void testFormat_yearOfEra_twoDigit() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "04", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "23", f.print(dt)); [EOL]     f = f.withZoneUTC(); [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(1922, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("22")); [EOL]     expect = new DateTime(2021, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("21")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = f.withPivotYear(new Integer(2050)); [EOL]     expect = new DateTime(2000, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("00")); [EOL]     expect = new DateTime(2099, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("99")); [EOL]     f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     f = f.withZoneUTC(); [EOL]     f.parseDateTime("5"); [EOL]     f.parseDateTime("005"); [EOL]     f.parseDateTime("+50"); [EOL]     f.parseDateTime("-50"); [EOL] }
public void testFormat_yearOfEra_twoDigit() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "04", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "23", f.print(dt)); [EOL]     f = f.withZoneUTC(); [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(1922, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("22")); [EOL]     expect = new DateTime(2021, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("21")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = f.withPivotYear(new Integer(2050)); [EOL]     expect = new DateTime(2000, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("00")); [EOL]     expect = new DateTime(2099, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("99")); [EOL]     f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     f = f.withZoneUTC(); [EOL]     f.parseDateTime("5"); [EOL]     f.parseDateTime("005"); [EOL]     f.parseDateTime("+50"); [EOL]     f.parseDateTime("-50"); [EOL] }
public void testFormat_yearOfEra_twoDigit() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "04", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "23", f.print(dt)); [EOL]     f = f.withZoneUTC(); [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(1922, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("22")); [EOL]     expect = new DateTime(2021, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("21")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = f.withPivotYear(new Integer(2050)); [EOL]     expect = new DateTime(2000, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("00")); [EOL]     expect = new DateTime(2099, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("99")); [EOL]     f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     f = f.withZoneUTC(); [EOL]     f.parseDateTime("5"); [EOL]     f.parseDateTime("005"); [EOL]     f.parseDateTime("+50"); [EOL]     f.parseDateTime("-50"); [EOL] }
public void testFormat_yearOfEra_twoDigit() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "04", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "23", f.print(dt)); [EOL]     f = f.withZoneUTC(); [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(1922, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("22")); [EOL]     expect = new DateTime(2021, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("21")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = f.withPivotYear(new Integer(2050)); [EOL]     expect = new DateTime(2000, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("00")); [EOL]     expect = new DateTime(2099, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("99")); [EOL]     f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     f = f.withZoneUTC(); [EOL]     f.parseDateTime("5"); [EOL]     f.parseDateTime("005"); [EOL]     f.parseDateTime("+50"); [EOL]     f.parseDateTime("-50"); [EOL] }
public void testFormat_yearOfEra_twoDigit() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "04", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "23", f.print(dt)); [EOL]     f = f.withZoneUTC(); [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(1922, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("22")); [EOL]     expect = new DateTime(2021, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("21")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = f.withPivotYear(new Integer(2050)); [EOL]     expect = new DateTime(2000, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("00")); [EOL]     expect = new DateTime(2099, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("99")); [EOL]     f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     f = f.withZoneUTC(); [EOL]     f.parseDateTime("5"); [EOL]     f.parseDateTime("005"); [EOL]     f.parseDateTime("+50"); [EOL]     f.parseDateTime("-50"); [EOL] }
public void testWithFieldAdded4() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime result = test.withFieldAdded(DurationFieldType.years(), 0); [EOL]     assertSame(test, result); [EOL] }
public void testWithFieldAdded4() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime result = test.withFieldAdded(DurationFieldType.years(), 0); [EOL]     assertSame(test, result); [EOL] }
public void testWithFieldAdded4() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime result = test.withFieldAdded(DurationFieldType.years(), 0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusYears_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.plusYears(1); [EOL]     DateTime expected = new DateTime(2003, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusYears(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusYears_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.plusYears(1); [EOL]     DateTime expected = new DateTime(2003, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusYears(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusYears_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.plusYears(1); [EOL]     DateTime expected = new DateTime(2003, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusYears(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusMonths_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.plusMonths(1); [EOL]     DateTime expected = new DateTime(2002, 6, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusMonths(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusMonths_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.plusMonths(1); [EOL]     DateTime expected = new DateTime(2002, 6, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusMonths(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusMonths_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.plusMonths(1); [EOL]     DateTime expected = new DateTime(2002, 6, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusMonths(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusDays_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.plusDays(1); [EOL]     DateTime expected = new DateTime(2002, 5, 4, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusDays(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusDays_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.plusDays(1); [EOL]     DateTime expected = new DateTime(2002, 5, 4, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusDays(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusDays_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.plusDays(1); [EOL]     DateTime expected = new DateTime(2002, 5, 4, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusDays(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusMillis_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.plusMillis(1); [EOL]     DateTime expected = new DateTime(2002, 5, 3, 1, 2, 3, 5, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusMillis(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusMillis_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.plusMillis(1); [EOL]     DateTime expected = new DateTime(2002, 5, 3, 1, 2, 3, 5, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusMillis(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusMillis_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.plusMillis(1); [EOL]     DateTime expected = new DateTime(2002, 5, 3, 1, 2, 3, 5, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusMillis(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusDays_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.minusDays(1); [EOL]     DateTime expected = new DateTime(2002, 5, 2, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusDays(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusDays_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.minusDays(1); [EOL]     DateTime expected = new DateTime(2002, 5, 2, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusDays(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusDays_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.minusDays(1); [EOL]     DateTime expected = new DateTime(2002, 5, 2, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusDays(0); [EOL]     assertSame(test, result); [EOL] }
public void test_DateTime_minusHour_NewYork_Autumn() { [EOL]     DateTime dt = new DateTime(2007, 11, 4, 8, 0, 0, 0, ZONE_NEW_YORK); [EOL]     assertEquals("2007-11-04T08:00:00.000-05:00", dt.toString()); [EOL]     DateTime minus6 = dt.minusHours(6); [EOL]     assertEquals("2007-11-04T02:00:00.000-05:00", minus6.toString()); [EOL]     DateTime minus7 = dt.minusHours(7); [EOL]     assertEquals("2007-11-04T01:00:00.000-05:00", minus7.toString()); [EOL]     DateTime minus8 = dt.minusHours(8); [EOL]     assertEquals("2007-11-04T01:00:00.000-04:00", minus8.toString()); [EOL]     DateTime minus9 = dt.minusHours(9); [EOL]     assertEquals("2007-11-04T00:00:00.000-04:00", minus9.toString()); [EOL] }
public void test_DateTime_minusHour_NewYork_Autumn() { [EOL]     DateTime dt = new DateTime(2007, 11, 4, 8, 0, 0, 0, ZONE_NEW_YORK); [EOL]     assertEquals("2007-11-04T08:00:00.000-05:00", dt.toString()); [EOL]     DateTime minus6 = dt.minusHours(6); [EOL]     assertEquals("2007-11-04T02:00:00.000-05:00", minus6.toString()); [EOL]     DateTime minus7 = dt.minusHours(7); [EOL]     assertEquals("2007-11-04T01:00:00.000-05:00", minus7.toString()); [EOL]     DateTime minus8 = dt.minusHours(8); [EOL]     assertEquals("2007-11-04T01:00:00.000-04:00", minus8.toString()); [EOL]     DateTime minus9 = dt.minusHours(9); [EOL]     assertEquals("2007-11-04T00:00:00.000-04:00", minus9.toString()); [EOL] }
public void test_DateTime_minusHour_NewYork_Autumn() { [EOL]     DateTime dt = new DateTime(2007, 11, 4, 8, 0, 0, 0, ZONE_NEW_YORK); [EOL]     assertEquals("2007-11-04T08:00:00.000-05:00", dt.toString()); [EOL]     DateTime minus6 = dt.minusHours(6); [EOL]     assertEquals("2007-11-04T02:00:00.000-05:00", minus6.toString()); [EOL]     DateTime minus7 = dt.minusHours(7); [EOL]     assertEquals("2007-11-04T01:00:00.000-05:00", minus7.toString()); [EOL]     DateTime minus8 = dt.minusHours(8); [EOL]     assertEquals("2007-11-04T01:00:00.000-04:00", minus8.toString()); [EOL]     DateTime minus9 = dt.minusHours(9); [EOL]     assertEquals("2007-11-04T00:00:00.000-04:00", minus9.toString()); [EOL] }
public void testWithers() { [EOL]     DateTime test = new DateTime(1970, 6, 9, 10, 20, 30, 40, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     DateTime test = new DateTime(1970, 6, 9, 10, 20, 30, 40, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     DateTime test = new DateTime(1970, 6, 9, 10, 20, 30, 40, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     DateTime test = new DateTime(1970, 6, 9, 10, 20, 30, 40, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     DateTime test = new DateTime(1970, 6, 9, 10, 20, 30, 40, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     DateTime test = new DateTime(1970, 6, 9, 10, 20, 30, 40, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     DateTime test = new DateTime(1970, 6, 9, 10, 20, 30, 40, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     DateTime test = new DateTime(1970, 6, 9, 10, 20, 30, 40, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     DateTime test = new DateTime(1970, 6, 9, 10, 20, 30, 40, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     DateTime test = new DateTime(1970, 6, 9, 10, 20, 30, 40, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     DateTime test = new DateTime(1970, 6, 9, 10, 20, 30, 40, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     DateTime test = new DateTime(1970, 6, 9, 10, 20, 30, 40, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     DateTime test = new DateTime(1970, 6, 9, 10, 20, 30, 40, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     DateTime test = new DateTime(1970, 6, 9, 10, 20, 30, 40, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     DateTime test = new DateTime(1970, 6, 9, 10, 20, 30, 40, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     DateTime test = new DateTime(1970, 6, 9, 10, 20, 30, 40, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     DateTime test = new DateTime(1970, 6, 9, 10, 20, 30, 40, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void test_basicOrdinalDateTime() { [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL]     DateTimeFormatter parser = ISODateTimeFormat.basicOrdinalDateTime(); [EOL]     assertParse(parser, "2006123T102030.400999999Z", new DateTime(2006, 1, 1, 10, 20, 30, 400).withDayOfYear(123)); [EOL]     assertParse(parser, "2006123T102030.400Z", new DateTime(2006, 1, 1, 10, 20, 30, 400).withDayOfYear(123)); [EOL]     assertParse(parser, "2006123T102030.40Z", new DateTime(2006, 1, 1, 10, 20, 30, 400).withDayOfYear(123)); [EOL]     assertParse(parser, "2006123T102030.4Z", new DateTime(2006, 1, 1, 10, 20, 30, 400).withDayOfYear(123)); [EOL]     assertParse(parser, false, "200612T102030.400Z"); [EOL]     assertParse(parser, false, "20061T102030.400Z"); [EOL]     assertParse(parser, false, "2006T102030.400Z"); [EOL]     assertParse(parser, false, "200T102030.400Z"); [EOL]     assertParse(parser, false, "20T102030.400Z"); [EOL]     assertParse(parser, false, "2T102030.400Z"); [EOL]     assertParse(parser, false, "2006123T10203.400Z"); [EOL]     assertParse(parser, false, "2006123T1020.400Z"); [EOL]     assertParse(parser, false, "2006123T102.400Z"); [EOL]     assertParse(parser, false, "2006123T10.400Z"); [EOL]     assertParse(parser, false, "2006123T1.400Z"); [EOL] }
public void test_basicOrdinalDateTime() { [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL]     DateTimeFormatter parser = ISODateTimeFormat.basicOrdinalDateTime(); [EOL]     assertParse(parser, "2006123T102030.400999999Z", new DateTime(2006, 1, 1, 10, 20, 30, 400).withDayOfYear(123)); [EOL]     assertParse(parser, "2006123T102030.400Z", new DateTime(2006, 1, 1, 10, 20, 30, 400).withDayOfYear(123)); [EOL]     assertParse(parser, "2006123T102030.40Z", new DateTime(2006, 1, 1, 10, 20, 30, 400).withDayOfYear(123)); [EOL]     assertParse(parser, "2006123T102030.4Z", new DateTime(2006, 1, 1, 10, 20, 30, 400).withDayOfYear(123)); [EOL]     assertParse(parser, false, "200612T102030.400Z"); [EOL]     assertParse(parser, false, "20061T102030.400Z"); [EOL]     assertParse(parser, false, "2006T102030.400Z"); [EOL]     assertParse(parser, false, "200T102030.400Z"); [EOL]     assertParse(parser, false, "20T102030.400Z"); [EOL]     assertParse(parser, false, "2T102030.400Z"); [EOL]     assertParse(parser, false, "2006123T10203.400Z"); [EOL]     assertParse(parser, false, "2006123T1020.400Z"); [EOL]     assertParse(parser, false, "2006123T102.400Z"); [EOL]     assertParse(parser, false, "2006123T10.400Z"); [EOL]     assertParse(parser, false, "2006123T1.400Z"); [EOL] }
public void test_basicOrdinalDateTime() { [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL]     DateTimeFormatter parser = ISODateTimeFormat.basicOrdinalDateTime(); [EOL]     assertParse(parser, "2006123T102030.400999999Z", new DateTime(2006, 1, 1, 10, 20, 30, 400).withDayOfYear(123)); [EOL]     assertParse(parser, "2006123T102030.400Z", new DateTime(2006, 1, 1, 10, 20, 30, 400).withDayOfYear(123)); [EOL]     assertParse(parser, "2006123T102030.40Z", new DateTime(2006, 1, 1, 10, 20, 30, 400).withDayOfYear(123)); [EOL]     assertParse(parser, "2006123T102030.4Z", new DateTime(2006, 1, 1, 10, 20, 30, 400).withDayOfYear(123)); [EOL]     assertParse(parser, false, "200612T102030.400Z"); [EOL]     assertParse(parser, false, "20061T102030.400Z"); [EOL]     assertParse(parser, false, "2006T102030.400Z"); [EOL]     assertParse(parser, false, "200T102030.400Z"); [EOL]     assertParse(parser, false, "20T102030.400Z"); [EOL]     assertParse(parser, false, "2T102030.400Z"); [EOL]     assertParse(parser, false, "2006123T10203.400Z"); [EOL]     assertParse(parser, false, "2006123T1020.400Z"); [EOL]     assertParse(parser, false, "2006123T102.400Z"); [EOL]     assertParse(parser, false, "2006123T10.400Z"); [EOL]     assertParse(parser, false, "2006123T1.400Z"); [EOL] }
public void testWithers() { [EOL]     DateTime test = new DateTime(1970, 6, 9, 10, 20, 30, 40, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     DateTime test = new DateTime(1970, 6, 9, 10, 20, 30, 40, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     DateTime test = new DateTime(1970, 6, 9, 10, 20, 30, 40, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     DateTime test = new DateTime(1970, 6, 9, 10, 20, 30, 40, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     DateTime test = new DateTime(1970, 6, 9, 10, 20, 30, 40, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testToDateTime_nullRI() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9); [EOL]     DateTime dt = new DateTime(2002, 1, 3, 4, 5, 6, 7); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     DateTime test = base.toDateTime((ReadableInstant) null); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime expected = dt; [EOL]     expected = expected.year().setCopy(2005); [EOL]     expected = expected.monthOfYear().setCopy(6); [EOL]     expected = expected.dayOfMonth().setCopy(9); [EOL]     assertEquals(expected, test); [EOL] }
public void testToDateTime_nullRI() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9); [EOL]     DateTime dt = new DateTime(2002, 1, 3, 4, 5, 6, 7); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     DateTime test = base.toDateTime((ReadableInstant) null); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime expected = dt; [EOL]     expected = expected.year().setCopy(2005); [EOL]     expected = expected.monthOfYear().setCopy(6); [EOL]     expected = expected.dayOfMonth().setCopy(9); [EOL]     assertEquals(expected, test); [EOL] }
public void testPropertyGetSecondOfDay() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     assertSame(test.getChronology().secondOfDay(), test.secondOfDay().getField()); [EOL]     assertEquals("secondOfDay", test.secondOfDay().getName()); [EOL]     assertEquals("Property[secondOfDay]", test.secondOfDay().toString()); [EOL]     assertSame(test, test.secondOfDay().getDateTime()); [EOL]     assertEquals(48223, test.secondOfDay().get()); [EOL]     assertEquals("48223", test.secondOfDay().getAsString()); [EOL]     assertEquals("48223", test.secondOfDay().getAsText()); [EOL]     assertEquals("48223", test.secondOfDay().getAsText(Locale.FRENCH)); [EOL]     assertEquals("48223", test.secondOfDay().getAsShortText()); [EOL]     assertEquals("48223", test.secondOfDay().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().seconds(), test.secondOfDay().getDurationField()); [EOL]     assertEquals(test.getChronology().days(), test.secondOfDay().getRangeDurationField()); [EOL]     assertEquals(5, test.secondOfDay().getMaximumTextLength(null)); [EOL]     assertEquals(5, test.secondOfDay().getMaximumShortTextLength(null)); [EOL] }
public void test_DateTime_roundFloor_hour_NewYork_Spring_postCutover() { [EOL]     DateTime dt = new DateTime(2007, 3, 11, 3, 30, 0, 0, ZONE_NEW_YORK); [EOL]     assertEquals("2007-03-11T03:30:00.000-04:00", dt.toString()); [EOL]     DateTime rounded = dt.hourOfDay().roundFloorCopy(); [EOL]     assertEquals("2007-03-11T03:00:00.000-04:00", rounded.toString()); [EOL] }
public void testPropertyRoundHalfEvenHourOfDay() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     DateTime copy = test.hourOfDay().roundHalfEvenCopy(); [EOL]     assertEquals("2004-06-09T14:00:00.000+01:00", copy.toString()); [EOL]     test = new DateTime(2004, 6, 9, 14, 30, 0, 0); [EOL]     copy = test.hourOfDay().roundHalfEvenCopy(); [EOL]     assertEquals("2004-06-09T14:00:00.000+01:00", copy.toString()); [EOL]     test = new DateTime(2004, 6, 9, 13, 30, 0, 1); [EOL]     copy = test.hourOfDay().roundHalfEvenCopy(); [EOL]     assertEquals("2004-06-09T14:00:00.000+01:00", copy.toString()); [EOL]     test = new DateTime(2004, 6, 9, 13, 29, 59, 999); [EOL]     copy = test.hourOfDay().roundHalfEvenCopy(); [EOL]     assertEquals("2004-06-09T13:00:00.000+01:00", copy.toString()); [EOL] }
public void testSerialization2() throws Exception { [EOL]     DateTimeZone zone = DateTimeZone.forID("+01:00"); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(zone); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     DateTimeZone result = (DateTimeZone) ois.readObject(); [EOL]     ois.close(); [EOL]     assertSame(zone, result); [EOL] }
public void testSerialization2() throws Exception { [EOL]     DateTimeZone zone = DateTimeZone.forID("+01:00"); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(zone); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     DateTimeZone result = (DateTimeZone) ois.readObject(); [EOL]     ois.close(); [EOL]     assertSame(zone, result); [EOL] }
public void testSerialization2() throws Exception { [EOL]     DateTimeZone zone = DateTimeZone.forID("+01:00"); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(zone); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     DateTimeZone result = (DateTimeZone) ois.readObject(); [EOL]     ois.close(); [EOL]     assertSame(zone, result); [EOL] }
public void testSerialization2() throws Exception { [EOL]     DateTimeZone zone = DateTimeZone.forID("+01:00"); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(zone); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     DateTimeZone result = (DateTimeZone) ois.readObject(); [EOL]     ois.close(); [EOL]     assertSame(zone, result); [EOL] }
public void testSerialization2() throws Exception { [EOL]     DateTimeZone zone = DateTimeZone.forID("+01:00"); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(zone); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     DateTimeZone result = (DateTimeZone) ois.readObject(); [EOL]     ois.close(); [EOL]     assertSame(zone, result); [EOL] }
public void testSerialization2() throws Exception { [EOL]     DateTimeZone zone = DateTimeZone.forID("+01:00"); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(zone); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     DateTimeZone result = (DateTimeZone) ois.readObject(); [EOL]     ois.close(); [EOL]     assertSame(zone, result); [EOL] }
public void testPropertyWithMinimumValueHour() { [EOL]     Partial test = new Partial(TYPES, VALUES); [EOL]     Partial copy = test.property(DateTimeFieldType.hourOfDay()).withMinimumValue(); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 0, 20, 30, 40); [EOL] }
public void testPropertyWithMinimumValueHour() { [EOL]     Partial test = new Partial(TYPES, VALUES); [EOL]     Partial copy = test.property(DateTimeFieldType.hourOfDay()).withMinimumValue(); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 0, 20, 30, 40); [EOL] }
public void testPropertyWithMinimumValueHour() { [EOL]     Partial test = new Partial(TYPES, VALUES); [EOL]     Partial copy = test.property(DateTimeFieldType.hourOfDay()).withMinimumValue(); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 0, 20, 30, 40); [EOL] }
public void testPropertyWithMinimumValueHour() { [EOL]     Partial test = new Partial(TYPES, VALUES); [EOL]     Partial copy = test.property(DateTimeFieldType.hourOfDay()).withMinimumValue(); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 0, 20, 30, 40); [EOL] }
public void testConstructorEx3_TypeArray_intArray() throws Throwable { [EOL]     try { [EOL]         new Partial(new DateTimeFieldType[] { DateTimeFieldType.dayOfYear() }, null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         assertMessageContains(ex, "must not be null"); [EOL]     } [EOL] }
public void testConstructorEx3_TypeArray_intArray() throws Throwable { [EOL]     try { [EOL]         new Partial(new DateTimeFieldType[] { DateTimeFieldType.dayOfYear() }, null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         assertMessageContains(ex, "must not be null"); [EOL]     } [EOL] }
public void testConstructorEx3_TypeArray_intArray() throws Throwable { [EOL]     try { [EOL]         new Partial(new DateTimeFieldType[] { DateTimeFieldType.dayOfYear() }, null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         assertMessageContains(ex, "must not be null"); [EOL]     } [EOL] }
public void testConstructorEx3_TypeArray_intArray() throws Throwable { [EOL]     try { [EOL]         new Partial(new DateTimeFieldType[] { DateTimeFieldType.dayOfYear() }, null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         assertMessageContains(ex, "must not be null"); [EOL]     } [EOL] }
public void testConstructorEx3_TypeArray_intArray() throws Throwable { [EOL]     try { [EOL]         new Partial(new DateTimeFieldType[] { DateTimeFieldType.dayOfYear() }, null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         assertMessageContains(ex, "must not be null"); [EOL]     } [EOL] }
public void testConstructorEx3_TypeArray_intArray() throws Throwable { [EOL]     try { [EOL]         new Partial(new DateTimeFieldType[] { DateTimeFieldType.dayOfYear() }, null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         assertMessageContains(ex, "must not be null"); [EOL]     } [EOL] }
public void testConstructorEx3_TypeArray_intArray() throws Throwable { [EOL]     try { [EOL]         new Partial(new DateTimeFieldType[] { DateTimeFieldType.dayOfYear() }, null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         assertMessageContains(ex, "must not be null"); [EOL]     } [EOL] }
public void testConstructorEx3_TypeArray_intArray() throws Throwable { [EOL]     try { [EOL]         new Partial(new DateTimeFieldType[] { DateTimeFieldType.dayOfYear() }, null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         assertMessageContains(ex, "must not be null"); [EOL]     } [EOL] }
public void testPropertyWithMinimumValueHour() { [EOL]     Partial test = new Partial(TYPES, VALUES); [EOL]     Partial copy = test.property(DateTimeFieldType.hourOfDay()).withMinimumValue(); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 0, 20, 30, 40); [EOL] }
public void testGetFormatter1() { [EOL]     Partial test = new Partial(DateTimeFieldType.year(), 2005); [EOL]     assertEquals("2005", test.getFormatter().print(test)); [EOL]     test = test.with(DateTimeFieldType.monthOfYear(), 6); [EOL]     assertEquals("2005-06", test.getFormatter().print(test)); [EOL]     test = test.with(DateTimeFieldType.dayOfMonth(), 25); [EOL]     assertEquals("2005-06-25", test.getFormatter().print(test)); [EOL]     test = test.without(DateTimeFieldType.monthOfYear()); [EOL]     assertEquals("2005--25", test.getFormatter().print(test)); [EOL] }
public void testGetFormatter1() { [EOL]     Partial test = new Partial(DateTimeFieldType.year(), 2005); [EOL]     assertEquals("2005", test.getFormatter().print(test)); [EOL]     test = test.with(DateTimeFieldType.monthOfYear(), 6); [EOL]     assertEquals("2005-06", test.getFormatter().print(test)); [EOL]     test = test.with(DateTimeFieldType.dayOfMonth(), 25); [EOL]     assertEquals("2005-06-25", test.getFormatter().print(test)); [EOL]     test = test.without(DateTimeFieldType.monthOfYear()); [EOL]     assertEquals("2005--25", test.getFormatter().print(test)); [EOL] }
public void testGetFormatter1() { [EOL]     Partial test = new Partial(DateTimeFieldType.year(), 2005); [EOL]     assertEquals("2005", test.getFormatter().print(test)); [EOL]     test = test.with(DateTimeFieldType.monthOfYear(), 6); [EOL]     assertEquals("2005-06", test.getFormatter().print(test)); [EOL]     test = test.with(DateTimeFieldType.dayOfMonth(), 25); [EOL]     assertEquals("2005-06-25", test.getFormatter().print(test)); [EOL]     test = test.without(DateTimeFieldType.monthOfYear()); [EOL]     assertEquals("2005--25", test.getFormatter().print(test)); [EOL] }
public void testGetFormatter1() { [EOL]     Partial test = new Partial(DateTimeFieldType.year(), 2005); [EOL]     assertEquals("2005", test.getFormatter().print(test)); [EOL]     test = test.with(DateTimeFieldType.monthOfYear(), 6); [EOL]     assertEquals("2005-06", test.getFormatter().print(test)); [EOL]     test = test.with(DateTimeFieldType.dayOfMonth(), 25); [EOL]     assertEquals("2005-06-25", test.getFormatter().print(test)); [EOL]     test = test.without(DateTimeFieldType.monthOfYear()); [EOL]     assertEquals("2005--25", test.getFormatter().print(test)); [EOL] }
public void testGetFormatter1() { [EOL]     Partial test = new Partial(DateTimeFieldType.year(), 2005); [EOL]     assertEquals("2005", test.getFormatter().print(test)); [EOL]     test = test.with(DateTimeFieldType.monthOfYear(), 6); [EOL]     assertEquals("2005-06", test.getFormatter().print(test)); [EOL]     test = test.with(DateTimeFieldType.dayOfMonth(), 25); [EOL]     assertEquals("2005-06-25", test.getFormatter().print(test)); [EOL]     test = test.without(DateTimeFieldType.monthOfYear()); [EOL]     assertEquals("2005--25", test.getFormatter().print(test)); [EOL] }
public void testPropertyWithMinimumValueHour() { [EOL]     Partial test = new Partial(TYPES, VALUES); [EOL]     Partial copy = test.property(DateTimeFieldType.hourOfDay()).withMinimumValue(); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 0, 20, 30, 40); [EOL] }
public void testPropertyWithMinimumValueHour() { [EOL]     Partial test = new Partial(TYPES, VALUES); [EOL]     Partial copy = test.property(DateTimeFieldType.hourOfDay()).withMinimumValue(); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 0, 20, 30, 40); [EOL] }
public void testPropertyWithMinimumValueHour() { [EOL]     Partial test = new Partial(TYPES, VALUES); [EOL]     Partial copy = test.property(DateTimeFieldType.hourOfDay()).withMinimumValue(); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 0, 20, 30, 40); [EOL] }
public void testPropertyWithMinimumValueHour() { [EOL]     Partial test = new Partial(TYPES, VALUES); [EOL]     Partial copy = test.property(DateTimeFieldType.hourOfDay()).withMinimumValue(); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 0, 20, 30, 40); [EOL] }
public void testWithChronologyRetainFields_Chrono() { [EOL]     Partial base = createHourMinPartial(COPTIC_PARIS); [EOL]     Partial test = base.withChronologyRetainFields(BUDDHIST_TOKYO); [EOL]     check(base, 10, 20); [EOL]     assertEquals(COPTIC_UTC, base.getChronology()); [EOL]     check(test, 10, 20); [EOL]     assertEquals(BUDDHIST_UTC, test.getChronology()); [EOL] }
public void testWithChronologyRetainFields_Chrono() { [EOL]     Partial base = createHourMinPartial(COPTIC_PARIS); [EOL]     Partial test = base.withChronologyRetainFields(BUDDHIST_TOKYO); [EOL]     check(base, 10, 20); [EOL]     assertEquals(COPTIC_UTC, base.getChronology()); [EOL]     check(test, 10, 20); [EOL]     assertEquals(BUDDHIST_UTC, test.getChronology()); [EOL] }
public void testGetFormatter1() { [EOL]     Partial test = new Partial(DateTimeFieldType.year(), 2005); [EOL]     assertEquals("2005", test.getFormatter().print(test)); [EOL]     test = test.with(DateTimeFieldType.monthOfYear(), 6); [EOL]     assertEquals("2005-06", test.getFormatter().print(test)); [EOL]     test = test.with(DateTimeFieldType.dayOfMonth(), 25); [EOL]     assertEquals("2005-06-25", test.getFormatter().print(test)); [EOL]     test = test.without(DateTimeFieldType.monthOfYear()); [EOL]     assertEquals("2005--25", test.getFormatter().print(test)); [EOL] }
public void testGetFormatter1() { [EOL]     Partial test = new Partial(DateTimeFieldType.year(), 2005); [EOL]     assertEquals("2005", test.getFormatter().print(test)); [EOL]     test = test.with(DateTimeFieldType.monthOfYear(), 6); [EOL]     assertEquals("2005-06", test.getFormatter().print(test)); [EOL]     test = test.with(DateTimeFieldType.dayOfMonth(), 25); [EOL]     assertEquals("2005-06-25", test.getFormatter().print(test)); [EOL]     test = test.without(DateTimeFieldType.monthOfYear()); [EOL]     assertEquals("2005--25", test.getFormatter().print(test)); [EOL] }
public void testGetFormatter1() { [EOL]     Partial test = new Partial(DateTimeFieldType.year(), 2005); [EOL]     assertEquals("2005", test.getFormatter().print(test)); [EOL]     test = test.with(DateTimeFieldType.monthOfYear(), 6); [EOL]     assertEquals("2005-06", test.getFormatter().print(test)); [EOL]     test = test.with(DateTimeFieldType.dayOfMonth(), 25); [EOL]     assertEquals("2005-06-25", test.getFormatter().print(test)); [EOL]     test = test.without(DateTimeFieldType.monthOfYear()); [EOL]     assertEquals("2005--25", test.getFormatter().print(test)); [EOL] }
public void testGetFormatter1() { [EOL]     Partial test = new Partial(DateTimeFieldType.year(), 2005); [EOL]     assertEquals("2005", test.getFormatter().print(test)); [EOL]     test = test.with(DateTimeFieldType.monthOfYear(), 6); [EOL]     assertEquals("2005-06", test.getFormatter().print(test)); [EOL]     test = test.with(DateTimeFieldType.dayOfMonth(), 25); [EOL]     assertEquals("2005-06-25", test.getFormatter().print(test)); [EOL]     test = test.without(DateTimeFieldType.monthOfYear()); [EOL]     assertEquals("2005--25", test.getFormatter().print(test)); [EOL] }
public void testGetFormatter1() { [EOL]     Partial test = new Partial(DateTimeFieldType.year(), 2005); [EOL]     assertEquals("2005", test.getFormatter().print(test)); [EOL]     test = test.with(DateTimeFieldType.monthOfYear(), 6); [EOL]     assertEquals("2005-06", test.getFormatter().print(test)); [EOL]     test = test.with(DateTimeFieldType.dayOfMonth(), 25); [EOL]     assertEquals("2005-06-25", test.getFormatter().print(test)); [EOL]     test = test.without(DateTimeFieldType.monthOfYear()); [EOL]     assertEquals("2005--25", test.getFormatter().print(test)); [EOL] }
public void testGetFormatter1() { [EOL]     Partial test = new Partial(DateTimeFieldType.year(), 2005); [EOL]     assertEquals("2005", test.getFormatter().print(test)); [EOL]     test = test.with(DateTimeFieldType.monthOfYear(), 6); [EOL]     assertEquals("2005-06", test.getFormatter().print(test)); [EOL]     test = test.with(DateTimeFieldType.dayOfMonth(), 25); [EOL]     assertEquals("2005-06-25", test.getFormatter().print(test)); [EOL]     test = test.without(DateTimeFieldType.monthOfYear()); [EOL]     assertEquals("2005--25", test.getFormatter().print(test)); [EOL] }
public void testWithField4() { [EOL]     Partial test = createHourMinPartial(); [EOL]     Partial result = test.withField(DateTimeFieldType.hourOfDay(), 10); [EOL]     assertSame(test, result); [EOL] }
public void testWithField4() { [EOL]     Partial test = createHourMinPartial(); [EOL]     Partial result = test.withField(DateTimeFieldType.hourOfDay(), 10); [EOL]     assertSame(test, result); [EOL] }
public void testWithField4() { [EOL]     Partial test = createHourMinPartial(); [EOL]     Partial result = test.withField(DateTimeFieldType.hourOfDay(), 10); [EOL]     assertSame(test, result); [EOL] }
public void testWithFieldAdded4() { [EOL]     Partial test = createHourMinPartial(); [EOL]     Partial result = test.withFieldAdded(DurationFieldType.hours(), 0); [EOL]     assertSame(test, result); [EOL] }
public void testWithFieldAdded4() { [EOL]     Partial test = createHourMinPartial(); [EOL]     Partial result = test.withFieldAdded(DurationFieldType.hours(), 0); [EOL]     assertSame(test, result); [EOL] }
public void testWithFieldAddWrapped5() { [EOL]     Partial test = createHourMinPartial(); [EOL]     try { [EOL]         test.withFieldAddWrapped(DurationFieldType.days(), 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 10, 20); [EOL] }
public void testWithFieldAddWrapped5() { [EOL]     Partial test = createHourMinPartial(); [EOL]     try { [EOL]         test.withFieldAddWrapped(DurationFieldType.days(), 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 10, 20); [EOL] }
public void testPropertyWithMinimumValueHour() { [EOL]     Partial test = new Partial(TYPES, VALUES); [EOL]     Partial copy = test.property(DateTimeFieldType.hourOfDay()).withMinimumValue(); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 0, 20, 30, 40); [EOL] }
public void testPropertyWithMinimumValueHour() { [EOL]     Partial test = new Partial(TYPES, VALUES); [EOL]     Partial copy = test.property(DateTimeFieldType.hourOfDay()).withMinimumValue(); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 0, 20, 30, 40); [EOL] }
public void testPropertyWithMinimumValueHour() { [EOL]     Partial test = new Partial(TYPES, VALUES); [EOL]     Partial copy = test.property(DateTimeFieldType.hourOfDay()).withMinimumValue(); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 0, 20, 30, 40); [EOL] }
public void testPropertyWithMinimumValueHour() { [EOL]     Partial test = new Partial(TYPES, VALUES); [EOL]     Partial copy = test.property(DateTimeFieldType.hourOfDay()).withMinimumValue(); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 0, 20, 30, 40); [EOL] }
public void testPropertyWithMinimumValueHour() { [EOL]     Partial test = new Partial(TYPES, VALUES); [EOL]     Partial copy = test.property(DateTimeFieldType.hourOfDay()).withMinimumValue(); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 0, 20, 30, 40); [EOL] }
public void testPropertyWithMinimumValueHour() { [EOL]     Partial test = new Partial(TYPES, VALUES); [EOL]     Partial copy = test.property(DateTimeFieldType.hourOfDay()).withMinimumValue(); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 0, 20, 30, 40); [EOL] }
public void testPropertyWithMinimumValueHour() { [EOL]     Partial test = new Partial(TYPES, VALUES); [EOL]     Partial copy = test.property(DateTimeFieldType.hourOfDay()).withMinimumValue(); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 0, 20, 30, 40); [EOL] }
public void testPropertyWithMinimumValueHour() { [EOL]     Partial test = new Partial(TYPES, VALUES); [EOL]     Partial copy = test.property(DateTimeFieldType.hourOfDay()).withMinimumValue(); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 0, 20, 30, 40); [EOL] }
public void testPropertyWithMinimumValueHour() { [EOL]     Partial test = new Partial(TYPES, VALUES); [EOL]     Partial copy = test.property(DateTimeFieldType.hourOfDay()).withMinimumValue(); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 0, 20, 30, 40); [EOL] }
public void testPropertySetTextMinute() { [EOL]     Partial test = new Partial(TYPES, VALUES); [EOL]     Partial copy = test.property(DateTimeFieldType.minuteOfHour()).setCopy("12"); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL] }
public void testPropertySetTextMinute() { [EOL]     Partial test = new Partial(TYPES, VALUES); [EOL]     Partial copy = test.property(DateTimeFieldType.minuteOfHour()).setCopy("12"); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL] }
public void testPropertySetTextMinute() { [EOL]     Partial test = new Partial(TYPES, VALUES); [EOL]     Partial copy = test.property(DateTimeFieldType.minuteOfHour()).setCopy("12"); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL] }
public void testPropertySetTextMinute() { [EOL]     Partial test = new Partial(TYPES, VALUES); [EOL]     Partial copy = test.property(DateTimeFieldType.minuteOfHour()).setCopy("12"); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL] }
public void testPropertySetTextMinute() { [EOL]     Partial test = new Partial(TYPES, VALUES); [EOL]     Partial copy = test.property(DateTimeFieldType.minuteOfHour()).setCopy("12"); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL] }
public void testPropertyWithMinimumValueHour() { [EOL]     Partial test = new Partial(TYPES, VALUES); [EOL]     Partial copy = test.property(DateTimeFieldType.hourOfDay()).withMinimumValue(); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 0, 20, 30, 40); [EOL] }
public void testToPeriod_PeriodType() { [EOL]     long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L; [EOL]     Duration test = new Duration(length); [EOL]     Period result = test.toPeriod(PeriodType.standard().withMillisRemoved()); [EOL]     assertEquals(new Period(test, PeriodType.standard().withMillisRemoved()), result); [EOL]     assertEquals(new Period(test.getMillis(), PeriodType.standard().withMillisRemoved()), result); [EOL] }
public void testToPeriod_PeriodType() { [EOL]     long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L; [EOL]     Duration test = new Duration(length); [EOL]     Period result = test.toPeriod(PeriodType.standard().withMillisRemoved()); [EOL]     assertEquals(new Period(test, PeriodType.standard().withMillisRemoved()), result); [EOL]     assertEquals(new Period(test.getMillis(), PeriodType.standard().withMillisRemoved()), result); [EOL] }
public void testToPeriodTo_PeriodType() { [EOL]     long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L; [EOL]     Duration test = new Duration(length); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     Period result = test.toPeriodTo(dt, PeriodType.standard().withMillisRemoved()); [EOL]     assertEquals(new Period(test, dt, PeriodType.standard().withMillisRemoved()), result); [EOL] }
public void testToPeriodTo_PeriodType() { [EOL]     long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L; [EOL]     Duration test = new Duration(length); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     Period result = test.toPeriodTo(dt, PeriodType.standard().withMillisRemoved()); [EOL]     assertEquals(new Period(test, dt, PeriodType.standard().withMillisRemoved()), result); [EOL] }
public void testToPeriodTo_PeriodType() { [EOL]     long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L; [EOL]     Duration test = new Duration(length); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     Period result = test.toPeriodTo(dt, PeriodType.standard().withMillisRemoved()); [EOL]     assertEquals(new Period(test, dt, PeriodType.standard().withMillisRemoved()), result); [EOL] }
public void testYears() { [EOL]     Years test = Years.years(5); [EOL]     String str = StringConvert.INSTANCE.convertToString(test); [EOL]     assertEquals("P5Y", str); [EOL]     assertEquals(test, StringConvert.INSTANCE.convertFromString(Years.class, str)); [EOL] }
public void testYears() { [EOL]     Years test = Years.years(5); [EOL]     String str = StringConvert.INSTANCE.convertToString(test); [EOL]     assertEquals("P5Y", str); [EOL]     assertEquals(test, StringConvert.INSTANCE.convertFromString(Years.class, str)); [EOL] }
public void testYears() { [EOL]     Years test = Years.years(5); [EOL]     String str = StringConvert.INSTANCE.convertToString(test); [EOL]     assertEquals("P5Y", str); [EOL]     assertEquals(test, StringConvert.INSTANCE.convertFromString(Years.class, str)); [EOL] }
public void testMinus_Years() { [EOL]     Years test2 = Years.years(2); [EOL]     Years test3 = Years.years(3); [EOL]     Years result = test2.minus(test3); [EOL]     assertEquals(2, test2.getYears()); [EOL]     assertEquals(3, test3.getYears()); [EOL]     assertEquals(-1, result.getYears()); [EOL]     assertEquals(1, Years.ONE.minus(Years.ZERO).getYears()); [EOL]     assertEquals(1, Years.ONE.minus((Years) null).getYears()); [EOL]     try { [EOL]         Years.MIN_VALUE.minus(Years.ONE); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMinus_Years() { [EOL]     Years test2 = Years.years(2); [EOL]     Years test3 = Years.years(3); [EOL]     Years result = test2.minus(test3); [EOL]     assertEquals(2, test2.getYears()); [EOL]     assertEquals(3, test3.getYears()); [EOL]     assertEquals(-1, result.getYears()); [EOL]     assertEquals(1, Years.ONE.minus(Years.ZERO).getYears()); [EOL]     assertEquals(1, Years.ONE.minus((Years) null).getYears()); [EOL]     try { [EOL]         Years.MIN_VALUE.minus(Years.ONE); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testParse_noFormatter() throws Throwable { [EOL]     assertEquals(new DateTime(2010, 6, 30, 0, 20, ISOChronology.getInstance(LONDON)).toInstant(), Instant.parse("2010-06-30T01:20+02:00")); [EOL]     assertEquals(new DateTime(2010, 1, 2, 14, 50, ISOChronology.getInstance(LONDON)).toInstant(), Instant.parse("2010-002T14:50")); [EOL] }
public void testParse_noFormatter() throws Throwable { [EOL]     assertEquals(new DateTime(2010, 6, 30, 0, 20, ISOChronology.getInstance(LONDON)).toInstant(), Instant.parse("2010-06-30T01:20+02:00")); [EOL]     assertEquals(new DateTime(2010, 1, 2, 14, 50, ISOChronology.getInstance(LONDON)).toInstant(), Instant.parse("2010-002T14:50")); [EOL] }
public void testParse_noFormatter() throws Throwable { [EOL]     assertEquals(new DateTime(2010, 6, 30, 0, 20, ISOChronology.getInstance(LONDON)).toInstant(), Instant.parse("2010-06-30T01:20+02:00")); [EOL]     assertEquals(new DateTime(2010, 1, 2, 14, 50, ISOChronology.getInstance(LONDON)).toInstant(), Instant.parse("2010-002T14:50")); [EOL] }
public void testParse_noFormatter() throws Throwable { [EOL]     assertEquals(new DateTime(2010, 6, 30, 0, 20, ISOChronology.getInstance(LONDON)).toInstant(), Instant.parse("2010-06-30T01:20+02:00")); [EOL]     assertEquals(new DateTime(2010, 1, 2, 14, 50, ISOChronology.getInstance(LONDON)).toInstant(), Instant.parse("2010-002T14:50")); [EOL] }
public void test_LocalDate_toDateMidnight_Gaza() { [EOL]     LocalDate date = new LocalDate(2007, 4, 1); [EOL]     try { [EOL]         date.toDateMidnight(MOCK_GAZA); [EOL]         fail(); [EOL]     } catch (IllegalInstantException ex) { [EOL]         assertEquals(true, ex.getMessage().startsWith("Illegal instant due to time zone offset transition")); [EOL]     } [EOL] }
public void test_LocalDate_toDateMidnight_Gaza() { [EOL]     LocalDate date = new LocalDate(2007, 4, 1); [EOL]     try { [EOL]         date.toDateMidnight(MOCK_GAZA); [EOL]         fail(); [EOL]     } catch (IllegalInstantException ex) { [EOL]         assertEquals(true, ex.getMessage().startsWith("Illegal instant due to time zone offset transition")); [EOL]     } [EOL] }
public void test_LocalDate_toDateMidnight_Gaza() { [EOL]     LocalDate date = new LocalDate(2007, 4, 1); [EOL]     try { [EOL]         date.toDateMidnight(MOCK_GAZA); [EOL]         fail(); [EOL]     } catch (IllegalInstantException ex) { [EOL]         assertEquals(true, ex.getMessage().startsWith("Illegal instant due to time zone offset transition")); [EOL]     } [EOL] }
public void test_LocalDate_toDateMidnight_Gaza() { [EOL]     LocalDate date = new LocalDate(2007, 4, 1); [EOL]     try { [EOL]         date.toDateMidnight(MOCK_GAZA); [EOL]         fail(); [EOL]     } catch (IllegalInstantException ex) { [EOL]         assertEquals(true, ex.getMessage().startsWith("Illegal instant due to time zone offset transition")); [EOL]     } [EOL] }
public void testGetFieldType_int() { [EOL]     LocalDate test = new LocalDate(COPTIC_PARIS); [EOL]     assertSame(DateTimeFieldType.year(), test.getFieldType(0)); [EOL]     assertSame(DateTimeFieldType.monthOfYear(), test.getFieldType(1)); [EOL]     assertSame(DateTimeFieldType.dayOfMonth(), test.getFieldType(2)); [EOL]     try { [EOL]         test.getFieldType(-1); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         test.getFieldType(3); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] }
public void testGetFieldType_int() { [EOL]     LocalDate test = new LocalDate(COPTIC_PARIS); [EOL]     assertSame(DateTimeFieldType.year(), test.getFieldType(0)); [EOL]     assertSame(DateTimeFieldType.monthOfYear(), test.getFieldType(1)); [EOL]     assertSame(DateTimeFieldType.dayOfMonth(), test.getFieldType(2)); [EOL]     try { [EOL]         test.getFieldType(-1); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         test.getFieldType(3); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] }
public void testGetFieldType_int() { [EOL]     LocalDate test = new LocalDate(COPTIC_PARIS); [EOL]     assertSame(DateTimeFieldType.year(), test.getFieldType(0)); [EOL]     assertSame(DateTimeFieldType.monthOfYear(), test.getFieldType(1)); [EOL]     assertSame(DateTimeFieldType.dayOfMonth(), test.getFieldType(2)); [EOL]     try { [EOL]         test.getFieldType(-1); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         test.getFieldType(3); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] }
public void testGetFieldType_int() { [EOL]     LocalDate test = new LocalDate(COPTIC_PARIS); [EOL]     assertSame(DateTimeFieldType.year(), test.getFieldType(0)); [EOL]     assertSame(DateTimeFieldType.monthOfYear(), test.getFieldType(1)); [EOL]     assertSame(DateTimeFieldType.dayOfMonth(), test.getFieldType(2)); [EOL]     try { [EOL]         test.getFieldType(-1); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         test.getFieldType(3); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] }
public void testIsSupported_DateTimeFieldType() { [EOL]     LocalDate test = new LocalDate(COPTIC_PARIS); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.year())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.weekyear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.yearOfCentury())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.yearOfEra())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.centuryOfEra())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.weekyearOfCentury())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.era())); [EOL]     assertEquals(false, test.isSupported(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(false, test.isSupported((DateTimeFieldType) null)); [EOL] }
public void testIsSupported_DateTimeFieldType() { [EOL]     LocalDate test = new LocalDate(COPTIC_PARIS); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.year())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.weekyear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.yearOfCentury())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.yearOfEra())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.centuryOfEra())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.weekyearOfCentury())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.era())); [EOL]     assertEquals(false, test.isSupported(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(false, test.isSupported((DateTimeFieldType) null)); [EOL] }
public void testIsSupported_DateTimeFieldType() { [EOL]     LocalDate test = new LocalDate(COPTIC_PARIS); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.year())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.weekyear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.yearOfCentury())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.yearOfEra())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.centuryOfEra())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.weekyearOfCentury())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.era())); [EOL]     assertEquals(false, test.isSupported(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(false, test.isSupported((DateTimeFieldType) null)); [EOL] }
public void testIsSupported_DateTimeFieldType() { [EOL]     LocalDate test = new LocalDate(COPTIC_PARIS); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.year())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.weekyear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.yearOfCentury())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.yearOfEra())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.centuryOfEra())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.weekyearOfCentury())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.era())); [EOL]     assertEquals(false, test.isSupported(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(false, test.isSupported((DateTimeFieldType) null)); [EOL] }
public void test_LocalDate_toDateMidnight_Gaza() { [EOL]     LocalDate date = new LocalDate(2007, 4, 1); [EOL]     try { [EOL]         date.toDateMidnight(MOCK_GAZA); [EOL]         fail(); [EOL]     } catch (IllegalInstantException ex) { [EOL]         assertEquals(true, ex.getMessage().startsWith("Illegal instant due to time zone offset transition")); [EOL]     } [EOL] }
public void test_LocalDate_toDateMidnight_Gaza() { [EOL]     LocalDate date = new LocalDate(2007, 4, 1); [EOL]     try { [EOL]         date.toDateMidnight(MOCK_GAZA); [EOL]         fail(); [EOL]     } catch (IllegalInstantException ex) { [EOL]         assertEquals(true, ex.getMessage().startsWith("Illegal instant due to time zone offset transition")); [EOL]     } [EOL] }
public void testToDateTime_LocalTime_nullZone() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     LocalTime tod = new LocalTime(12, 13, 14, 15, COPTIC_TOKYO); [EOL]     DateTime test = base.toDateTime(tod, null); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime expected = new DateTime(2005, 6, 9, 12, 13, 14, 15, COPTIC_LONDON); [EOL]     assertEquals(expected, test); [EOL] }
public void testToDateTime_LocalTime_nullZone() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     LocalTime tod = new LocalTime(12, 13, 14, 15, COPTIC_TOKYO); [EOL]     DateTime test = base.toDateTime(tod, null); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime expected = new DateTime(2005, 6, 9, 12, 13, 14, 15, COPTIC_LONDON); [EOL]     assertEquals(expected, test); [EOL] }
public void testToDateTime_LocalTime_nullZone() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     LocalTime tod = new LocalTime(12, 13, 14, 15, COPTIC_TOKYO); [EOL]     DateTime test = base.toDateTime(tod, null); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime expected = new DateTime(2005, 6, 9, 12, 13, 14, 15, COPTIC_LONDON); [EOL]     assertEquals(expected, test); [EOL] }
public void testWithField_DateTimeFieldType_int_3() { [EOL]     LocalDate test = new LocalDate(2004, 6, 9); [EOL]     try { [EOL]         test.withField(DateTimeFieldType.hourOfDay(), 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithField_DateTimeFieldType_int_3() { [EOL]     LocalDate test = new LocalDate(2004, 6, 9); [EOL]     try { [EOL]         test.withField(DateTimeFieldType.hourOfDay(), 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithField_DateTimeFieldType_int_3() { [EOL]     LocalDate test = new LocalDate(2004, 6, 9); [EOL]     try { [EOL]         test.withField(DateTimeFieldType.hourOfDay(), 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPlusYears_int() { [EOL]     LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON); [EOL]     LocalDate result = test.plusYears(1); [EOL]     LocalDate expected = new LocalDate(2003, 5, 3, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusYears(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusYears_int() { [EOL]     LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON); [EOL]     LocalDate result = test.plusYears(1); [EOL]     LocalDate expected = new LocalDate(2003, 5, 3, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusYears(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusYears_int() { [EOL]     LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON); [EOL]     LocalDate result = test.plusYears(1); [EOL]     LocalDate expected = new LocalDate(2003, 5, 3, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusYears(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusWeeks_int() { [EOL]     LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON); [EOL]     LocalDate result = test.minusWeeks(1); [EOL]     LocalDate expected = new LocalDate(2002, 4, 26, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusWeeks(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusWeeks_int() { [EOL]     LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON); [EOL]     LocalDate result = test.minusWeeks(1); [EOL]     LocalDate expected = new LocalDate(2002, 4, 26, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusWeeks(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusWeeks_int() { [EOL]     LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON); [EOL]     LocalDate result = test.minusWeeks(1); [EOL]     LocalDate expected = new LocalDate(2002, 4, 26, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusWeeks(0); [EOL]     assertSame(test, result); [EOL] }
public void testProperty() { [EOL]     LocalDate test = new LocalDate(2005, 6, 9, GJ_UTC); [EOL]     assertEquals(test.year(), test.property(DateTimeFieldType.year())); [EOL]     assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(test.dayOfMonth(), test.property(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(test.dayOfWeek(), test.property(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(test.dayOfYear(), test.property(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(test.weekOfWeekyear(), test.property(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(test.weekyear(), test.property(DateTimeFieldType.weekyear())); [EOL]     assertEquals(test.yearOfCentury(), test.property(DateTimeFieldType.yearOfCentury())); [EOL]     assertEquals(test.yearOfEra(), test.property(DateTimeFieldType.yearOfEra())); [EOL]     assertEquals(test.centuryOfEra(), test.property(DateTimeFieldType.centuryOfEra())); [EOL]     assertEquals(test.era(), test.property(DateTimeFieldType.era())); [EOL]     try { [EOL]         test.property(DateTimeFieldType.millisOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     LocalDate test = new LocalDate(2005, 6, 9, GJ_UTC); [EOL]     assertEquals(test.year(), test.property(DateTimeFieldType.year())); [EOL]     assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(test.dayOfMonth(), test.property(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(test.dayOfWeek(), test.property(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(test.dayOfYear(), test.property(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(test.weekOfWeekyear(), test.property(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(test.weekyear(), test.property(DateTimeFieldType.weekyear())); [EOL]     assertEquals(test.yearOfCentury(), test.property(DateTimeFieldType.yearOfCentury())); [EOL]     assertEquals(test.yearOfEra(), test.property(DateTimeFieldType.yearOfEra())); [EOL]     assertEquals(test.centuryOfEra(), test.property(DateTimeFieldType.centuryOfEra())); [EOL]     assertEquals(test.era(), test.property(DateTimeFieldType.era())); [EOL]     try { [EOL]         test.property(DateTimeFieldType.millisOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     LocalDate test = new LocalDate(2005, 6, 9, GJ_UTC); [EOL]     assertEquals(test.year(), test.property(DateTimeFieldType.year())); [EOL]     assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(test.dayOfMonth(), test.property(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(test.dayOfWeek(), test.property(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(test.dayOfYear(), test.property(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(test.weekOfWeekyear(), test.property(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(test.weekyear(), test.property(DateTimeFieldType.weekyear())); [EOL]     assertEquals(test.yearOfCentury(), test.property(DateTimeFieldType.yearOfCentury())); [EOL]     assertEquals(test.yearOfEra(), test.property(DateTimeFieldType.yearOfEra())); [EOL]     assertEquals(test.centuryOfEra(), test.property(DateTimeFieldType.centuryOfEra())); [EOL]     assertEquals(test.era(), test.property(DateTimeFieldType.era())); [EOL]     try { [EOL]         test.property(DateTimeFieldType.millisOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     LocalDate test = new LocalDate(2005, 6, 9, GJ_UTC); [EOL]     assertEquals(test.year(), test.property(DateTimeFieldType.year())); [EOL]     assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(test.dayOfMonth(), test.property(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(test.dayOfWeek(), test.property(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(test.dayOfYear(), test.property(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(test.weekOfWeekyear(), test.property(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(test.weekyear(), test.property(DateTimeFieldType.weekyear())); [EOL]     assertEquals(test.yearOfCentury(), test.property(DateTimeFieldType.yearOfCentury())); [EOL]     assertEquals(test.yearOfEra(), test.property(DateTimeFieldType.yearOfEra())); [EOL]     assertEquals(test.centuryOfEra(), test.property(DateTimeFieldType.centuryOfEra())); [EOL]     assertEquals(test.era(), test.property(DateTimeFieldType.era())); [EOL]     try { [EOL]         test.property(DateTimeFieldType.millisOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     LocalDate test = new LocalDate(2005, 6, 9, GJ_UTC); [EOL]     assertEquals(test.year(), test.property(DateTimeFieldType.year())); [EOL]     assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(test.dayOfMonth(), test.property(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(test.dayOfWeek(), test.property(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(test.dayOfYear(), test.property(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(test.weekOfWeekyear(), test.property(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(test.weekyear(), test.property(DateTimeFieldType.weekyear())); [EOL]     assertEquals(test.yearOfCentury(), test.property(DateTimeFieldType.yearOfCentury())); [EOL]     assertEquals(test.yearOfEra(), test.property(DateTimeFieldType.yearOfEra())); [EOL]     assertEquals(test.centuryOfEra(), test.property(DateTimeFieldType.centuryOfEra())); [EOL]     assertEquals(test.era(), test.property(DateTimeFieldType.era())); [EOL]     try { [EOL]         test.property(DateTimeFieldType.millisOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     LocalDate test = new LocalDate(2005, 6, 9, GJ_UTC); [EOL]     assertEquals(test.year(), test.property(DateTimeFieldType.year())); [EOL]     assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(test.dayOfMonth(), test.property(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(test.dayOfWeek(), test.property(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(test.dayOfYear(), test.property(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(test.weekOfWeekyear(), test.property(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(test.weekyear(), test.property(DateTimeFieldType.weekyear())); [EOL]     assertEquals(test.yearOfCentury(), test.property(DateTimeFieldType.yearOfCentury())); [EOL]     assertEquals(test.yearOfEra(), test.property(DateTimeFieldType.yearOfEra())); [EOL]     assertEquals(test.centuryOfEra(), test.property(DateTimeFieldType.centuryOfEra())); [EOL]     assertEquals(test.era(), test.property(DateTimeFieldType.era())); [EOL]     try { [EOL]         test.property(DateTimeFieldType.millisOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     LocalDate test = new LocalDate(2005, 6, 9, GJ_UTC); [EOL]     assertEquals(test.year(), test.property(DateTimeFieldType.year())); [EOL]     assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(test.dayOfMonth(), test.property(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(test.dayOfWeek(), test.property(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(test.dayOfYear(), test.property(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(test.weekOfWeekyear(), test.property(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(test.weekyear(), test.property(DateTimeFieldType.weekyear())); [EOL]     assertEquals(test.yearOfCentury(), test.property(DateTimeFieldType.yearOfCentury())); [EOL]     assertEquals(test.yearOfEra(), test.property(DateTimeFieldType.yearOfEra())); [EOL]     assertEquals(test.centuryOfEra(), test.property(DateTimeFieldType.centuryOfEra())); [EOL]     assertEquals(test.era(), test.property(DateTimeFieldType.era())); [EOL]     try { [EOL]         test.property(DateTimeFieldType.millisOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     LocalDate test = new LocalDate(2005, 6, 9, GJ_UTC); [EOL]     assertEquals(test.year(), test.property(DateTimeFieldType.year())); [EOL]     assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(test.dayOfMonth(), test.property(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(test.dayOfWeek(), test.property(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(test.dayOfYear(), test.property(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(test.weekOfWeekyear(), test.property(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(test.weekyear(), test.property(DateTimeFieldType.weekyear())); [EOL]     assertEquals(test.yearOfCentury(), test.property(DateTimeFieldType.yearOfCentury())); [EOL]     assertEquals(test.yearOfEra(), test.property(DateTimeFieldType.yearOfEra())); [EOL]     assertEquals(test.centuryOfEra(), test.property(DateTimeFieldType.centuryOfEra())); [EOL]     assertEquals(test.era(), test.property(DateTimeFieldType.era())); [EOL]     try { [EOL]         test.property(DateTimeFieldType.millisOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     LocalDate test = new LocalDate(2005, 6, 9, GJ_UTC); [EOL]     assertEquals(test.year(), test.property(DateTimeFieldType.year())); [EOL]     assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(test.dayOfMonth(), test.property(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(test.dayOfWeek(), test.property(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(test.dayOfYear(), test.property(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(test.weekOfWeekyear(), test.property(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(test.weekyear(), test.property(DateTimeFieldType.weekyear())); [EOL]     assertEquals(test.yearOfCentury(), test.property(DateTimeFieldType.yearOfCentury())); [EOL]     assertEquals(test.yearOfEra(), test.property(DateTimeFieldType.yearOfEra())); [EOL]     assertEquals(test.centuryOfEra(), test.property(DateTimeFieldType.centuryOfEra())); [EOL]     assertEquals(test.era(), test.property(DateTimeFieldType.era())); [EOL]     try { [EOL]         test.property(DateTimeFieldType.millisOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     LocalDate test = new LocalDate(2005, 6, 9, GJ_UTC); [EOL]     assertEquals(test.year(), test.property(DateTimeFieldType.year())); [EOL]     assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(test.dayOfMonth(), test.property(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(test.dayOfWeek(), test.property(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(test.dayOfYear(), test.property(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(test.weekOfWeekyear(), test.property(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(test.weekyear(), test.property(DateTimeFieldType.weekyear())); [EOL]     assertEquals(test.yearOfCentury(), test.property(DateTimeFieldType.yearOfCentury())); [EOL]     assertEquals(test.yearOfEra(), test.property(DateTimeFieldType.yearOfEra())); [EOL]     assertEquals(test.centuryOfEra(), test.property(DateTimeFieldType.centuryOfEra())); [EOL]     assertEquals(test.era(), test.property(DateTimeFieldType.era())); [EOL]     try { [EOL]         test.property(DateTimeFieldType.millisOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     LocalDate test = new LocalDate(2005, 6, 9, GJ_UTC); [EOL]     assertEquals(test.year(), test.property(DateTimeFieldType.year())); [EOL]     assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(test.dayOfMonth(), test.property(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(test.dayOfWeek(), test.property(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(test.dayOfYear(), test.property(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(test.weekOfWeekyear(), test.property(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(test.weekyear(), test.property(DateTimeFieldType.weekyear())); [EOL]     assertEquals(test.yearOfCentury(), test.property(DateTimeFieldType.yearOfCentury())); [EOL]     assertEquals(test.yearOfEra(), test.property(DateTimeFieldType.yearOfEra())); [EOL]     assertEquals(test.centuryOfEra(), test.property(DateTimeFieldType.centuryOfEra())); [EOL]     assertEquals(test.era(), test.property(DateTimeFieldType.era())); [EOL]     try { [EOL]         test.property(DateTimeFieldType.millisOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testToString_DTFormatter() { [EOL]     LocalDate test = new LocalDate(2002, 6, 9); [EOL]     assertEquals("2002 \ufffd\ufffd", test.toString(DateTimeFormat.forPattern("yyyy HH"))); [EOL]     assertEquals("2002-06-09", test.toString((DateTimeFormatter) null)); [EOL] }
public void testPropertyEqualsHashCodeLenient() { [EOL]     LocalDate test1 = new LocalDate(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     LocalDate test2 = new LocalDate(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL] }
public void testPropertyGetDay() { [EOL]     LocalDate test = new LocalDate(1972, 6, 9); [EOL]     assertSame(test.getChronology().dayOfMonth(), test.dayOfMonth().getField()); [EOL]     assertEquals("dayOfMonth", test.dayOfMonth().getName()); [EOL]     assertEquals("Property[dayOfMonth]", test.dayOfMonth().toString()); [EOL]     assertSame(test, test.dayOfMonth().getLocalDate()); [EOL]     assertEquals(9, test.dayOfMonth().get()); [EOL]     assertEquals("9", test.dayOfMonth().getAsString()); [EOL]     assertEquals("9", test.dayOfMonth().getAsText()); [EOL]     assertEquals("9", test.dayOfMonth().getAsText(Locale.FRENCH)); [EOL]     assertEquals("9", test.dayOfMonth().getAsShortText()); [EOL]     assertEquals("9", test.dayOfMonth().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().days(), test.dayOfMonth().getDurationField()); [EOL]     assertEquals(test.getChronology().months(), test.dayOfMonth().getRangeDurationField()); [EOL]     assertEquals(2, test.dayOfMonth().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.dayOfMonth().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyAddToCopyYear() { [EOL]     LocalDate test = new LocalDate(1972, 6, 9); [EOL]     LocalDate copy = test.year().addToCopy(9); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1981, 6, 9); [EOL]     copy = test.year().addToCopy(0); [EOL]     check(copy, 1972, 6, 9); [EOL]     copy = test.year().addToCopy(292278993 - 1972); [EOL]     check(copy, 292278993, 6, 9); [EOL]     try { [EOL]         test.year().addToCopy(292278993 - 1972 + 1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 1972, 6, 9); [EOL]     copy = test.year().addToCopy(-1972); [EOL]     check(copy, 0, 6, 9); [EOL]     copy = test.year().addToCopy(-1973); [EOL]     check(copy, -1, 6, 9); [EOL]     try { [EOL]         test.year().addToCopy(-292275054 - 1972 - 1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 1972, 6, 9); [EOL] }
public void testPropertyAddToCopyYear() { [EOL]     LocalDate test = new LocalDate(1972, 6, 9); [EOL]     LocalDate copy = test.year().addToCopy(9); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1981, 6, 9); [EOL]     copy = test.year().addToCopy(0); [EOL]     check(copy, 1972, 6, 9); [EOL]     copy = test.year().addToCopy(292278993 - 1972); [EOL]     check(copy, 292278993, 6, 9); [EOL]     try { [EOL]         test.year().addToCopy(292278993 - 1972 + 1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 1972, 6, 9); [EOL]     copy = test.year().addToCopy(-1972); [EOL]     check(copy, 0, 6, 9); [EOL]     copy = test.year().addToCopy(-1973); [EOL]     check(copy, -1, 6, 9); [EOL]     try { [EOL]         test.year().addToCopy(-292275054 - 1972 - 1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 1972, 6, 9); [EOL] }
public void testPropertyAddToCopyYear() { [EOL]     LocalDate test = new LocalDate(1972, 6, 9); [EOL]     LocalDate copy = test.year().addToCopy(9); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1981, 6, 9); [EOL]     copy = test.year().addToCopy(0); [EOL]     check(copy, 1972, 6, 9); [EOL]     copy = test.year().addToCopy(292278993 - 1972); [EOL]     check(copy, 292278993, 6, 9); [EOL]     try { [EOL]         test.year().addToCopy(292278993 - 1972 + 1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 1972, 6, 9); [EOL]     copy = test.year().addToCopy(-1972); [EOL]     check(copy, 0, 6, 9); [EOL]     copy = test.year().addToCopy(-1973); [EOL]     check(copy, -1, 6, 9); [EOL]     try { [EOL]         test.year().addToCopy(-292275054 - 1972 - 1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 1972, 6, 9); [EOL] }
public void test_wordBased_de_FormatOneField() { [EOL]     Period p = Period.days(2); [EOL]     assertEquals("2 Tage", PeriodFormat.wordBased(DE).print(p)); [EOL] }
public void test_wordBased_de_FormatOneField() { [EOL]     Period p = Period.days(2); [EOL]     assertEquals("2 Tage", PeriodFormat.wordBased(DE).print(p)); [EOL] }
public void testFactory_Zone() { [EOL]     assertEquals(TOKYO, EthiopicChronology.getInstance(TOKYO).getZone()); [EOL]     assertEquals(PARIS, EthiopicChronology.getInstance(PARIS).getZone()); [EOL]     assertEquals(LONDON, EthiopicChronology.getInstance(null).getZone()); [EOL]     assertSame(EthiopicChronology.class, EthiopicChronology.getInstance(TOKYO).getClass()); [EOL] }
public void testFactory_Zone() { [EOL]     assertEquals(TOKYO, EthiopicChronology.getInstance(TOKYO).getZone()); [EOL]     assertEquals(PARIS, EthiopicChronology.getInstance(PARIS).getZone()); [EOL]     assertEquals(LONDON, EthiopicChronology.getInstance(null).getZone()); [EOL]     assertSame(EthiopicChronology.class, EthiopicChronology.getInstance(TOKYO).getClass()); [EOL] }
public void testFactory_Zone() { [EOL]     assertEquals(TOKYO, EthiopicChronology.getInstance(TOKYO).getZone()); [EOL]     assertEquals(PARIS, EthiopicChronology.getInstance(PARIS).getZone()); [EOL]     assertEquals(LONDON, EthiopicChronology.getInstance(null).getZone()); [EOL]     assertSame(EthiopicChronology.class, EthiopicChronology.getInstance(TOKYO).getClass()); [EOL] }
public void testFactory_Zone() { [EOL]     assertEquals(TOKYO, EthiopicChronology.getInstance(TOKYO).getZone()); [EOL]     assertEquals(PARIS, EthiopicChronology.getInstance(PARIS).getZone()); [EOL]     assertEquals(LONDON, EthiopicChronology.getInstance(null).getZone()); [EOL]     assertSame(EthiopicChronology.class, EthiopicChronology.getInstance(TOKYO).getClass()); [EOL] }
public void testFactory_Zone() { [EOL]     assertEquals(TOKYO, EthiopicChronology.getInstance(TOKYO).getZone()); [EOL]     assertEquals(PARIS, EthiopicChronology.getInstance(PARIS).getZone()); [EOL]     assertEquals(LONDON, EthiopicChronology.getInstance(null).getZone()); [EOL]     assertSame(EthiopicChronology.class, EthiopicChronology.getInstance(TOKYO).getClass()); [EOL] }
public void testFactory_Zone() { [EOL]     assertEquals(TOKYO, EthiopicChronology.getInstance(TOKYO).getZone()); [EOL]     assertEquals(PARIS, EthiopicChronology.getInstance(PARIS).getZone()); [EOL]     assertEquals(LONDON, EthiopicChronology.getInstance(null).getZone()); [EOL]     assertSame(EthiopicChronology.class, EthiopicChronology.getInstance(TOKYO).getClass()); [EOL] }
public void testSerialization() throws Exception { [EOL]     LocalDate test = new LocalDate(1972, 6, 9, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     LocalDate result = (LocalDate) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testSerialization() throws Exception { [EOL]     LocalDate test = new LocalDate(1972, 6, 9, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     LocalDate result = (LocalDate) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testSetText() { [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().year().set(0, null, java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("year", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("null", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().year().set(0, "nineteen seventy", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("year", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("nineteen seventy", e.getIllegalStringValue()); [EOL]         assertEquals("nineteen seventy", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().era().set(0, "long ago", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.era(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("era", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("long ago", e.getIllegalStringValue()); [EOL]         assertEquals("long ago", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().monthOfYear().set(0, "spring", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("monthOfYear", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("spring", e.getIllegalStringValue()); [EOL]         assertEquals("spring", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().dayOfWeek().set(0, "yesterday", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.dayOfWeek(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("dayOfWeek", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("yesterday", e.getIllegalStringValue()); [EOL]         assertEquals("yesterday", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().halfdayOfDay().set(0, "morning", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.halfdayOfDay(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("halfdayOfDay", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("morning", e.getIllegalStringValue()); [EOL]         assertEquals("morning", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL] }
public void testSetText() { [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().year().set(0, null, java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("year", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("null", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().year().set(0, "nineteen seventy", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("year", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("nineteen seventy", e.getIllegalStringValue()); [EOL]         assertEquals("nineteen seventy", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().era().set(0, "long ago", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.era(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("era", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("long ago", e.getIllegalStringValue()); [EOL]         assertEquals("long ago", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().monthOfYear().set(0, "spring", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("monthOfYear", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("spring", e.getIllegalStringValue()); [EOL]         assertEquals("spring", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().dayOfWeek().set(0, "yesterday", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.dayOfWeek(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("dayOfWeek", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("yesterday", e.getIllegalStringValue()); [EOL]         assertEquals("yesterday", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().halfdayOfDay().set(0, "morning", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.halfdayOfDay(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("halfdayOfDay", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("morning", e.getIllegalStringValue()); [EOL]         assertEquals("morning", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL] }
public void testSetText() { [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().year().set(0, null, java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("year", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("null", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().year().set(0, "nineteen seventy", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("year", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("nineteen seventy", e.getIllegalStringValue()); [EOL]         assertEquals("nineteen seventy", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().era().set(0, "long ago", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.era(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("era", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("long ago", e.getIllegalStringValue()); [EOL]         assertEquals("long ago", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().monthOfYear().set(0, "spring", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("monthOfYear", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("spring", e.getIllegalStringValue()); [EOL]         assertEquals("spring", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().dayOfWeek().set(0, "yesterday", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.dayOfWeek(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("dayOfWeek", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("yesterday", e.getIllegalStringValue()); [EOL]         assertEquals("yesterday", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().halfdayOfDay().set(0, "morning", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.halfdayOfDay(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("halfdayOfDay", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("morning", e.getIllegalStringValue()); [EOL]         assertEquals("morning", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testFactoryFieldDifference1() throws Throwable { [EOL]     YearMonthDay start = new YearMonthDay(2005, 4, 9); [EOL]     DateTimeFieldType[] types = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth() }; [EOL]     Partial end = new Partial(types, new int[] { 2004, 6, 7 }); [EOL]     Period test = Period.fieldDifference(start, end); [EOL]     assertEquals(PeriodType.yearMonthDay(), test.getPeriodType()); [EOL]     assertEquals(-1, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(-2, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testFactoryFieldDifference1() throws Throwable { [EOL]     YearMonthDay start = new YearMonthDay(2005, 4, 9); [EOL]     DateTimeFieldType[] types = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth() }; [EOL]     Partial end = new Partial(types, new int[] { 2004, 6, 7 }); [EOL]     Period test = Period.fieldDifference(start, end); [EOL]     assertEquals(PeriodType.yearMonthDay(), test.getPeriodType()); [EOL]     assertEquals(-1, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(-2, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] }
public void testYearWeekDayTime() throws Exception { [EOL]     PeriodType type = PeriodType.yearWeekDayTime(); [EOL]     assertEquals(7, type.size()); [EOL]     assertEquals(DurationFieldType.years(), type.getFieldType(0)); [EOL]     assertEquals(DurationFieldType.weeks(), type.getFieldType(1)); [EOL]     assertEquals(DurationFieldType.days(), type.getFieldType(2)); [EOL]     assertEquals(DurationFieldType.hours(), type.getFieldType(3)); [EOL]     assertEquals(DurationFieldType.minutes(), type.getFieldType(4)); [EOL]     assertEquals(DurationFieldType.seconds(), type.getFieldType(5)); [EOL]     assertEquals(DurationFieldType.millis(), type.getFieldType(6)); [EOL]     assertEquals("YearWeekDayTime", type.getName()); [EOL]     assertEquals("PeriodType[YearWeekDayTime]", type.toString()); [EOL]     assertEquals(true, type.equals(type)); [EOL]     assertEquals(true, type == PeriodType.yearWeekDayTime()); [EOL]     assertEquals(false, type.equals(PeriodType.millis())); [EOL]     assertEquals(true, type.hashCode() == type.hashCode()); [EOL]     assertEquals(true, type.hashCode() == PeriodType.yearWeekDayTime().hashCode()); [EOL]     assertEquals(false, type.hashCode() == PeriodType.millis().hashCode()); [EOL]     assertSameAfterSerialization(type); [EOL] }
public void testYearWeekDayTime() throws Exception { [EOL]     PeriodType type = PeriodType.yearWeekDayTime(); [EOL]     assertEquals(7, type.size()); [EOL]     assertEquals(DurationFieldType.years(), type.getFieldType(0)); [EOL]     assertEquals(DurationFieldType.weeks(), type.getFieldType(1)); [EOL]     assertEquals(DurationFieldType.days(), type.getFieldType(2)); [EOL]     assertEquals(DurationFieldType.hours(), type.getFieldType(3)); [EOL]     assertEquals(DurationFieldType.minutes(), type.getFieldType(4)); [EOL]     assertEquals(DurationFieldType.seconds(), type.getFieldType(5)); [EOL]     assertEquals(DurationFieldType.millis(), type.getFieldType(6)); [EOL]     assertEquals("YearWeekDayTime", type.getName()); [EOL]     assertEquals("PeriodType[YearWeekDayTime]", type.toString()); [EOL]     assertEquals(true, type.equals(type)); [EOL]     assertEquals(true, type == PeriodType.yearWeekDayTime()); [EOL]     assertEquals(false, type.equals(PeriodType.millis())); [EOL]     assertEquals(true, type.hashCode() == type.hashCode()); [EOL]     assertEquals(true, type.hashCode() == PeriodType.yearWeekDayTime().hashCode()); [EOL]     assertEquals(false, type.hashCode() == PeriodType.millis().hashCode()); [EOL]     assertSameAfterSerialization(type); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testFactoryFieldDifference1() throws Throwable { [EOL]     YearMonthDay start = new YearMonthDay(2005, 4, 9); [EOL]     DateTimeFieldType[] types = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth() }; [EOL]     Partial end = new Partial(types, new int[] { 2004, 6, 7 }); [EOL]     Period test = Period.fieldDifference(start, end); [EOL]     assertEquals(PeriodType.yearMonthDay(), test.getPeriodType()); [EOL]     assertEquals(-1, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(-2, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testFactoryFieldDifference1() throws Throwable { [EOL]     YearMonthDay start = new YearMonthDay(2005, 4, 9); [EOL]     DateTimeFieldType[] types = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth() }; [EOL]     Partial end = new Partial(types, new int[] { 2004, 6, 7 }); [EOL]     Period test = Period.fieldDifference(start, end); [EOL]     assertEquals(PeriodType.yearMonthDay(), test.getPeriodType()); [EOL]     assertEquals(-1, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(-2, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testFactoryFieldDifference1() throws Throwable { [EOL]     YearMonthDay start = new YearMonthDay(2005, 4, 9); [EOL]     DateTimeFieldType[] types = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth() }; [EOL]     Partial end = new Partial(types, new int[] { 2004, 6, 7 }); [EOL]     Period test = Period.fieldDifference(start, end); [EOL]     assertEquals(PeriodType.yearMonthDay(), test.getPeriodType()); [EOL]     assertEquals(-1, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(-2, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testFactoryFieldDifference1() throws Throwable { [EOL]     YearMonthDay start = new YearMonthDay(2005, 4, 9); [EOL]     DateTimeFieldType[] types = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth() }; [EOL]     Partial end = new Partial(types, new int[] { 2004, 6, 7 }); [EOL]     Period test = Period.fieldDifference(start, end); [EOL]     assertEquals(PeriodType.yearMonthDay(), test.getPeriodType()); [EOL]     assertEquals(-1, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(-2, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testFactoryFieldDifference1() throws Throwable { [EOL]     YearMonthDay start = new YearMonthDay(2005, 4, 9); [EOL]     DateTimeFieldType[] types = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth() }; [EOL]     Partial end = new Partial(types, new int[] { 2004, 6, 7 }); [EOL]     Period test = Period.fieldDifference(start, end); [EOL]     assertEquals(PeriodType.yearMonthDay(), test.getPeriodType()); [EOL]     assertEquals(-1, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(-2, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testFactoryFieldDifference1() throws Throwable { [EOL]     YearMonthDay start = new YearMonthDay(2005, 4, 9); [EOL]     DateTimeFieldType[] types = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth() }; [EOL]     Partial end = new Partial(types, new int[] { 2004, 6, 7 }); [EOL]     Period test = Period.fieldDifference(start, end); [EOL]     assertEquals(PeriodType.yearMonthDay(), test.getPeriodType()); [EOL]     assertEquals(-1, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(-2, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testFactoryFieldDifference1() throws Throwable { [EOL]     YearMonthDay start = new YearMonthDay(2005, 4, 9); [EOL]     DateTimeFieldType[] types = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth() }; [EOL]     Partial end = new Partial(types, new int[] { 2004, 6, 7 }); [EOL]     Period test = Period.fieldDifference(start, end); [EOL]     assertEquals(PeriodType.yearMonthDay(), test.getPeriodType()); [EOL]     assertEquals(-1, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(-2, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testFactoryFieldDifference1() throws Throwable { [EOL]     YearMonthDay start = new YearMonthDay(2005, 4, 9); [EOL]     DateTimeFieldType[] types = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth() }; [EOL]     Partial end = new Partial(types, new int[] { 2004, 6, 7 }); [EOL]     Period test = Period.fieldDifference(start, end); [EOL]     assertEquals(PeriodType.yearMonthDay(), test.getPeriodType()); [EOL]     assertEquals(-1, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(-2, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] }
public void testToStandardSeconds() { [EOL]     Duration test = new Duration(0L); [EOL]     assertEquals(Seconds.seconds(0), test.toStandardSeconds()); [EOL]     test = new Duration(1L); [EOL]     assertEquals(Seconds.seconds(0), test.toStandardSeconds()); [EOL]     test = new Duration(999L); [EOL]     assertEquals(Seconds.seconds(0), test.toStandardSeconds()); [EOL]     test = new Duration(1000L); [EOL]     assertEquals(Seconds.seconds(1), test.toStandardSeconds()); [EOL]     test = new Duration(1001L); [EOL]     assertEquals(Seconds.seconds(1), test.toStandardSeconds()); [EOL]     test = new Duration(1999L); [EOL]     assertEquals(Seconds.seconds(1), test.toStandardSeconds()); [EOL]     test = new Duration(2000L); [EOL]     assertEquals(Seconds.seconds(2), test.toStandardSeconds()); [EOL]     test = new Duration(-1L); [EOL]     assertEquals(Seconds.seconds(0), test.toStandardSeconds()); [EOL]     test = new Duration(-999L); [EOL]     assertEquals(Seconds.seconds(0), test.toStandardSeconds()); [EOL]     test = new Duration(-1000L); [EOL]     assertEquals(Seconds.seconds(-1), test.toStandardSeconds()); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testFactoryFieldDifference1() throws Throwable { [EOL]     YearMonthDay start = new YearMonthDay(2005, 4, 9); [EOL]     DateTimeFieldType[] types = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth() }; [EOL]     Partial end = new Partial(types, new int[] { 2004, 6, 7 }); [EOL]     Period test = Period.fieldDifference(start, end); [EOL]     assertEquals(PeriodType.yearMonthDay(), test.getPeriodType()); [EOL]     assertEquals(-1, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(-2, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testFactoryFieldDifference1() throws Throwable { [EOL]     YearMonthDay start = new YearMonthDay(2005, 4, 9); [EOL]     DateTimeFieldType[] types = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth() }; [EOL]     Partial end = new Partial(types, new int[] { 2004, 6, 7 }); [EOL]     Period test = Period.fieldDifference(start, end); [EOL]     assertEquals(PeriodType.yearMonthDay(), test.getPeriodType()); [EOL]     assertEquals(-1, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(-2, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testFactoryFieldDifference1() throws Throwable { [EOL]     YearMonthDay start = new YearMonthDay(2005, 4, 9); [EOL]     DateTimeFieldType[] types = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth() }; [EOL]     Partial end = new Partial(types, new int[] { 2004, 6, 7 }); [EOL]     Period test = Period.fieldDifference(start, end); [EOL]     assertEquals(PeriodType.yearMonthDay(), test.getPeriodType()); [EOL]     assertEquals(-1, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(-2, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testFactoryFieldDifference1() throws Throwable { [EOL]     YearMonthDay start = new YearMonthDay(2005, 4, 9); [EOL]     DateTimeFieldType[] types = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth() }; [EOL]     Partial end = new Partial(types, new int[] { 2004, 6, 7 }); [EOL]     Period test = Period.fieldDifference(start, end); [EOL]     assertEquals(PeriodType.yearMonthDay(), test.getPeriodType()); [EOL]     assertEquals(-1, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(-2, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testFactoryFieldDifference1() throws Throwable { [EOL]     YearMonthDay start = new YearMonthDay(2005, 4, 9); [EOL]     DateTimeFieldType[] types = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth() }; [EOL]     Partial end = new Partial(types, new int[] { 2004, 6, 7 }); [EOL]     Period test = Period.fieldDifference(start, end); [EOL]     assertEquals(PeriodType.yearMonthDay(), test.getPeriodType()); [EOL]     assertEquals(-1, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(-2, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testFactoryFieldDifference1() throws Throwable { [EOL]     YearMonthDay start = new YearMonthDay(2005, 4, 9); [EOL]     DateTimeFieldType[] types = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth() }; [EOL]     Partial end = new Partial(types, new int[] { 2004, 6, 7 }); [EOL]     Period test = Period.fieldDifference(start, end); [EOL]     assertEquals(PeriodType.yearMonthDay(), test.getPeriodType()); [EOL]     assertEquals(-1, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(-2, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] }
public void test_wordBased_nl_parseTwoFields() { [EOL]     Period p = Period.days(2).withHours(5); [EOL]     assertEquals(p, PeriodFormat.wordBased(NL).parsePeriod("2 dagen en 5 uur")); [EOL] }
public void testPlusFields() { [EOL]     Period test; [EOL]     test = Period.years(1).plusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(1).plusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(1).plusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(1).plusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(1).plusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(1).plusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(1).plusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(1).plusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.plusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testPlusFields() { [EOL]     Period test; [EOL]     test = Period.years(1).plusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(1).plusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(1).plusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(1).plusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(1).plusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(1).plusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(1).plusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(1).plusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.plusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testPlusFields() { [EOL]     Period test; [EOL]     test = Period.years(1).plusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(1).plusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(1).plusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(1).plusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(1).plusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(1).plusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(1).plusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(1).plusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.plusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testOffsetMillis() { [EOL]     try { [EOL]         DateTimeUtils.setCurrentMillisOffset(-24 * 60 * 60 * 1000); [EOL]         long nowSystem = System.currentTimeMillis(); [EOL]         long now = DateTimeUtils.currentTimeMillis(); [EOL]         long nowAdjustDay = now + (24 * 60 * 60 * 1000); [EOL]         assertTrue((now < nowSystem)); [EOL]         assertTrue((nowAdjustDay >= nowSystem)); [EOL]         assertTrue((nowAdjustDay - nowSystem) < 10000L); [EOL]     } finally { [EOL]         DateTimeUtils.setCurrentMillisSystem(); [EOL]     } [EOL]     long nowSystem = System.currentTimeMillis(); [EOL]     long now = DateTimeUtils.currentTimeMillis(); [EOL]     assertTrue((now >= nowSystem)); [EOL]     assertTrue((now - nowSystem) < 10000L); [EOL] }
public void testOffsetMillis() { [EOL]     try { [EOL]         DateTimeUtils.setCurrentMillisOffset(-24 * 60 * 60 * 1000); [EOL]         long nowSystem = System.currentTimeMillis(); [EOL]         long now = DateTimeUtils.currentTimeMillis(); [EOL]         long nowAdjustDay = now + (24 * 60 * 60 * 1000); [EOL]         assertTrue((now < nowSystem)); [EOL]         assertTrue((nowAdjustDay >= nowSystem)); [EOL]         assertTrue((nowAdjustDay - nowSystem) < 10000L); [EOL]     } finally { [EOL]         DateTimeUtils.setCurrentMillisSystem(); [EOL]     } [EOL]     long nowSystem = System.currentTimeMillis(); [EOL]     long now = DateTimeUtils.currentTimeMillis(); [EOL]     assertTrue((now >= nowSystem)); [EOL]     assertTrue((now - nowSystem) < 10000L); [EOL] }
public void testOffsetMillis() { [EOL]     try { [EOL]         DateTimeUtils.setCurrentMillisOffset(-24 * 60 * 60 * 1000); [EOL]         long nowSystem = System.currentTimeMillis(); [EOL]         long now = DateTimeUtils.currentTimeMillis(); [EOL]         long nowAdjustDay = now + (24 * 60 * 60 * 1000); [EOL]         assertTrue((now < nowSystem)); [EOL]         assertTrue((nowAdjustDay >= nowSystem)); [EOL]         assertTrue((nowAdjustDay - nowSystem) < 10000L); [EOL]     } finally { [EOL]         DateTimeUtils.setCurrentMillisSystem(); [EOL]     } [EOL]     long nowSystem = System.currentTimeMillis(); [EOL]     long now = DateTimeUtils.currentTimeMillis(); [EOL]     assertTrue((now >= nowSystem)); [EOL]     assertTrue((now - nowSystem) < 10000L); [EOL] }
public void testOffsetMillis() { [EOL]     try { [EOL]         DateTimeUtils.setCurrentMillisOffset(-24 * 60 * 60 * 1000); [EOL]         long nowSystem = System.currentTimeMillis(); [EOL]         long now = DateTimeUtils.currentTimeMillis(); [EOL]         long nowAdjustDay = now + (24 * 60 * 60 * 1000); [EOL]         assertTrue((now < nowSystem)); [EOL]         assertTrue((nowAdjustDay >= nowSystem)); [EOL]         assertTrue((nowAdjustDay - nowSystem) < 10000L); [EOL]     } finally { [EOL]         DateTimeUtils.setCurrentMillisSystem(); [EOL]     } [EOL]     long nowSystem = System.currentTimeMillis(); [EOL]     long now = DateTimeUtils.currentTimeMillis(); [EOL]     assertTrue((now >= nowSystem)); [EOL]     assertTrue((now - nowSystem) < 10000L); [EOL] }
public void testOffsetMillis() { [EOL]     try { [EOL]         DateTimeUtils.setCurrentMillisOffset(-24 * 60 * 60 * 1000); [EOL]         long nowSystem = System.currentTimeMillis(); [EOL]         long now = DateTimeUtils.currentTimeMillis(); [EOL]         long nowAdjustDay = now + (24 * 60 * 60 * 1000); [EOL]         assertTrue((now < nowSystem)); [EOL]         assertTrue((nowAdjustDay >= nowSystem)); [EOL]         assertTrue((nowAdjustDay - nowSystem) < 10000L); [EOL]     } finally { [EOL]         DateTimeUtils.setCurrentMillisSystem(); [EOL]     } [EOL]     long nowSystem = System.currentTimeMillis(); [EOL]     long now = DateTimeUtils.currentTimeMillis(); [EOL]     assertTrue((now >= nowSystem)); [EOL]     assertTrue((now - nowSystem) < 10000L); [EOL] }
public void testOffsetMillis() { [EOL]     try { [EOL]         DateTimeUtils.setCurrentMillisOffset(-24 * 60 * 60 * 1000); [EOL]         long nowSystem = System.currentTimeMillis(); [EOL]         long now = DateTimeUtils.currentTimeMillis(); [EOL]         long nowAdjustDay = now + (24 * 60 * 60 * 1000); [EOL]         assertTrue((now < nowSystem)); [EOL]         assertTrue((nowAdjustDay >= nowSystem)); [EOL]         assertTrue((nowAdjustDay - nowSystem) < 10000L); [EOL]     } finally { [EOL]         DateTimeUtils.setCurrentMillisSystem(); [EOL]     } [EOL]     long nowSystem = System.currentTimeMillis(); [EOL]     long now = DateTimeUtils.currentTimeMillis(); [EOL]     assertTrue((now >= nowSystem)); [EOL]     assertTrue((now - nowSystem) < 10000L); [EOL] }
public void testOffsetMillis() { [EOL]     try { [EOL]         DateTimeUtils.setCurrentMillisOffset(-24 * 60 * 60 * 1000); [EOL]         long nowSystem = System.currentTimeMillis(); [EOL]         long now = DateTimeUtils.currentTimeMillis(); [EOL]         long nowAdjustDay = now + (24 * 60 * 60 * 1000); [EOL]         assertTrue((now < nowSystem)); [EOL]         assertTrue((nowAdjustDay >= nowSystem)); [EOL]         assertTrue((nowAdjustDay - nowSystem) < 10000L); [EOL]     } finally { [EOL]         DateTimeUtils.setCurrentMillisSystem(); [EOL]     } [EOL]     long nowSystem = System.currentTimeMillis(); [EOL]     long now = DateTimeUtils.currentTimeMillis(); [EOL]     assertTrue((now >= nowSystem)); [EOL]     assertTrue((now - nowSystem) < 10000L); [EOL] }
public void testGetIntervalChronology_RI_RI() { [EOL]     DateTime dt1 = new DateTime(123L, BuddhistChronology.getInstance()); [EOL]     DateTime dt2 = new DateTime(123L, CopticChronology.getInstance()); [EOL]     assertEquals(BuddhistChronology.getInstance(), DateTimeUtils.getIntervalChronology(dt1, dt2)); [EOL]     assertEquals(BuddhistChronology.getInstance(), DateTimeUtils.getIntervalChronology(dt1, null)); [EOL]     assertEquals(CopticChronology.getInstance(), DateTimeUtils.getIntervalChronology(null, dt2)); [EOL]     assertEquals(ISOChronology.getInstance(), DateTimeUtils.getIntervalChronology(null, null)); [EOL] }
public void testGetIntervalChronology_RI_RI() { [EOL]     DateTime dt1 = new DateTime(123L, BuddhistChronology.getInstance()); [EOL]     DateTime dt2 = new DateTime(123L, CopticChronology.getInstance()); [EOL]     assertEquals(BuddhistChronology.getInstance(), DateTimeUtils.getIntervalChronology(dt1, dt2)); [EOL]     assertEquals(BuddhistChronology.getInstance(), DateTimeUtils.getIntervalChronology(dt1, null)); [EOL]     assertEquals(CopticChronology.getInstance(), DateTimeUtils.getIntervalChronology(null, dt2)); [EOL]     assertEquals(ISOChronology.getInstance(), DateTimeUtils.getIntervalChronology(null, null)); [EOL] }
public void testGetIntervalChronology_RI_RI() { [EOL]     DateTime dt1 = new DateTime(123L, BuddhistChronology.getInstance()); [EOL]     DateTime dt2 = new DateTime(123L, CopticChronology.getInstance()); [EOL]     assertEquals(BuddhistChronology.getInstance(), DateTimeUtils.getIntervalChronology(dt1, dt2)); [EOL]     assertEquals(BuddhistChronology.getInstance(), DateTimeUtils.getIntervalChronology(dt1, null)); [EOL]     assertEquals(CopticChronology.getInstance(), DateTimeUtils.getIntervalChronology(null, dt2)); [EOL]     assertEquals(ISOChronology.getInstance(), DateTimeUtils.getIntervalChronology(null, null)); [EOL] }
public void testGetIntervalChronology_RI_RI() { [EOL]     DateTime dt1 = new DateTime(123L, BuddhistChronology.getInstance()); [EOL]     DateTime dt2 = new DateTime(123L, CopticChronology.getInstance()); [EOL]     assertEquals(BuddhistChronology.getInstance(), DateTimeUtils.getIntervalChronology(dt1, dt2)); [EOL]     assertEquals(BuddhistChronology.getInstance(), DateTimeUtils.getIntervalChronology(dt1, null)); [EOL]     assertEquals(CopticChronology.getInstance(), DateTimeUtils.getIntervalChronology(null, dt2)); [EOL]     assertEquals(ISOChronology.getInstance(), DateTimeUtils.getIntervalChronology(null, null)); [EOL] }
public void testGetReadableInterval_ReadableInterval() { [EOL]     ReadableInterval input = new Interval(0, 100L); [EOL]     assertEquals(input, DateTimeUtils.getReadableInterval(input)); [EOL]     try { [EOL]         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW); [EOL]         assertEquals(new Interval(TEST_TIME_NOW, TEST_TIME_NOW), DateTimeUtils.getReadableInterval(null)); [EOL]     } finally { [EOL]         DateTimeUtils.setCurrentMillisSystem(); [EOL]     } [EOL] }
public void testGetReadableInterval_ReadableInterval() { [EOL]     ReadableInterval input = new Interval(0, 100L); [EOL]     assertEquals(input, DateTimeUtils.getReadableInterval(input)); [EOL]     try { [EOL]         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW); [EOL]         assertEquals(new Interval(TEST_TIME_NOW, TEST_TIME_NOW), DateTimeUtils.getReadableInterval(null)); [EOL]     } finally { [EOL]         DateTimeUtils.setCurrentMillisSystem(); [EOL]     } [EOL] }
public void testGetZone_Zone() { [EOL]     assertEquals(PARIS, DateTimeUtils.getZone(PARIS)); [EOL]     assertEquals(DateTimeZone.getDefault(), DateTimeUtils.getZone(null)); [EOL] }
public void testGetZone_Zone() { [EOL]     assertEquals(PARIS, DateTimeUtils.getZone(PARIS)); [EOL]     assertEquals(DateTimeZone.getDefault(), DateTimeUtils.getZone(null)); [EOL] }
public void test_julianDay() { [EOL]     DateTime base = new DateTime(1970, 1, 1, 0, 0, DateTimeZone.UTC); [EOL]     assertEquals(2440587.5d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d); [EOL]     assertEquals(2440588, DateTimeUtils.toJulianDayNumber(base.getMillis())); [EOL]     assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(2440587.5d)); [EOL]     base = base.plusHours(6); [EOL]     assertEquals(2440587.75d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d); [EOL]     assertEquals(2440588, DateTimeUtils.toJulianDayNumber(base.getMillis())); [EOL]     assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(2440587.75d)); [EOL]     base = base.plusHours(6); [EOL]     assertEquals(2440588d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d); [EOL]     assertEquals(2440588, DateTimeUtils.toJulianDayNumber(base.getMillis())); [EOL]     assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(2440588d)); [EOL]     base = base.plusHours(6); [EOL]     assertEquals(2440588.25d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d); [EOL]     assertEquals(2440588, DateTimeUtils.toJulianDayNumber(base.getMillis())); [EOL]     assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(2440588.25d)); [EOL]     base = base.plusHours(6); [EOL]     assertEquals(2440588.5d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d); [EOL]     assertEquals(2440589, DateTimeUtils.toJulianDayNumber(base.getMillis())); [EOL]     assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(2440588.5d)); [EOL]     base = new DateTime(2012, 8, 31, 23, 50, DateTimeZone.UTC); [EOL]     assertEquals(2456171.4930555555, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d); [EOL]     assertEquals(2456171, DateTimeUtils.toJulianDayNumber(base.getMillis())); [EOL]     base = new DateTime(-4713, 1, 1, 12, 0, JulianChronology.getInstanceUTC()); [EOL]     assertEquals(0d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d); [EOL]     assertEquals(0, DateTimeUtils.toJulianDayNumber(base.getMillis())); [EOL]     assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(0d)); [EOL]     base = new DateTime(-4713, 1, 1, 0, 0, JulianChronology.getInstanceUTC()); [EOL]     assertEquals(-0.5d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d); [EOL]     assertEquals(0, DateTimeUtils.toJulianDayNumber(base.getMillis())); [EOL]     assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(-0.5d)); [EOL] }
public void test_julianDay() { [EOL]     DateTime base = new DateTime(1970, 1, 1, 0, 0, DateTimeZone.UTC); [EOL]     assertEquals(2440587.5d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d); [EOL]     assertEquals(2440588, DateTimeUtils.toJulianDayNumber(base.getMillis())); [EOL]     assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(2440587.5d)); [EOL]     base = base.plusHours(6); [EOL]     assertEquals(2440587.75d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d); [EOL]     assertEquals(2440588, DateTimeUtils.toJulianDayNumber(base.getMillis())); [EOL]     assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(2440587.75d)); [EOL]     base = base.plusHours(6); [EOL]     assertEquals(2440588d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d); [EOL]     assertEquals(2440588, DateTimeUtils.toJulianDayNumber(base.getMillis())); [EOL]     assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(2440588d)); [EOL]     base = base.plusHours(6); [EOL]     assertEquals(2440588.25d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d); [EOL]     assertEquals(2440588, DateTimeUtils.toJulianDayNumber(base.getMillis())); [EOL]     assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(2440588.25d)); [EOL]     base = base.plusHours(6); [EOL]     assertEquals(2440588.5d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d); [EOL]     assertEquals(2440589, DateTimeUtils.toJulianDayNumber(base.getMillis())); [EOL]     assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(2440588.5d)); [EOL]     base = new DateTime(2012, 8, 31, 23, 50, DateTimeZone.UTC); [EOL]     assertEquals(2456171.4930555555, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d); [EOL]     assertEquals(2456171, DateTimeUtils.toJulianDayNumber(base.getMillis())); [EOL]     base = new DateTime(-4713, 1, 1, 12, 0, JulianChronology.getInstanceUTC()); [EOL]     assertEquals(0d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d); [EOL]     assertEquals(0, DateTimeUtils.toJulianDayNumber(base.getMillis())); [EOL]     assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(0d)); [EOL]     base = new DateTime(-4713, 1, 1, 0, 0, JulianChronology.getInstanceUTC()); [EOL]     assertEquals(-0.5d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d); [EOL]     assertEquals(0, DateTimeUtils.toJulianDayNumber(base.getMillis())); [EOL]     assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(-0.5d)); [EOL] }
public void test_julianDay() { [EOL]     DateTime base = new DateTime(1970, 1, 1, 0, 0, DateTimeZone.UTC); [EOL]     assertEquals(2440587.5d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d); [EOL]     assertEquals(2440588, DateTimeUtils.toJulianDayNumber(base.getMillis())); [EOL]     assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(2440587.5d)); [EOL]     base = base.plusHours(6); [EOL]     assertEquals(2440587.75d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d); [EOL]     assertEquals(2440588, DateTimeUtils.toJulianDayNumber(base.getMillis())); [EOL]     assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(2440587.75d)); [EOL]     base = base.plusHours(6); [EOL]     assertEquals(2440588d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d); [EOL]     assertEquals(2440588, DateTimeUtils.toJulianDayNumber(base.getMillis())); [EOL]     assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(2440588d)); [EOL]     base = base.plusHours(6); [EOL]     assertEquals(2440588.25d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d); [EOL]     assertEquals(2440588, DateTimeUtils.toJulianDayNumber(base.getMillis())); [EOL]     assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(2440588.25d)); [EOL]     base = base.plusHours(6); [EOL]     assertEquals(2440588.5d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d); [EOL]     assertEquals(2440589, DateTimeUtils.toJulianDayNumber(base.getMillis())); [EOL]     assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(2440588.5d)); [EOL]     base = new DateTime(2012, 8, 31, 23, 50, DateTimeZone.UTC); [EOL]     assertEquals(2456171.4930555555, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d); [EOL]     assertEquals(2456171, DateTimeUtils.toJulianDayNumber(base.getMillis())); [EOL]     base = new DateTime(-4713, 1, 1, 12, 0, JulianChronology.getInstanceUTC()); [EOL]     assertEquals(0d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d); [EOL]     assertEquals(0, DateTimeUtils.toJulianDayNumber(base.getMillis())); [EOL]     assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(0d)); [EOL]     base = new DateTime(-4713, 1, 1, 0, 0, JulianChronology.getInstanceUTC()); [EOL]     assertEquals(-0.5d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d); [EOL]     assertEquals(0, DateTimeUtils.toJulianDayNumber(base.getMillis())); [EOL]     assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(-0.5d)); [EOL] }
public void test_julianDay() { [EOL]     DateTime base = new DateTime(1970, 1, 1, 0, 0, DateTimeZone.UTC); [EOL]     assertEquals(2440587.5d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d); [EOL]     assertEquals(2440588, DateTimeUtils.toJulianDayNumber(base.getMillis())); [EOL]     assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(2440587.5d)); [EOL]     base = base.plusHours(6); [EOL]     assertEquals(2440587.75d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d); [EOL]     assertEquals(2440588, DateTimeUtils.toJulianDayNumber(base.getMillis())); [EOL]     assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(2440587.75d)); [EOL]     base = base.plusHours(6); [EOL]     assertEquals(2440588d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d); [EOL]     assertEquals(2440588, DateTimeUtils.toJulianDayNumber(base.getMillis())); [EOL]     assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(2440588d)); [EOL]     base = base.plusHours(6); [EOL]     assertEquals(2440588.25d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d); [EOL]     assertEquals(2440588, DateTimeUtils.toJulianDayNumber(base.getMillis())); [EOL]     assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(2440588.25d)); [EOL]     base = base.plusHours(6); [EOL]     assertEquals(2440588.5d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d); [EOL]     assertEquals(2440589, DateTimeUtils.toJulianDayNumber(base.getMillis())); [EOL]     assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(2440588.5d)); [EOL]     base = new DateTime(2012, 8, 31, 23, 50, DateTimeZone.UTC); [EOL]     assertEquals(2456171.4930555555, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d); [EOL]     assertEquals(2456171, DateTimeUtils.toJulianDayNumber(base.getMillis())); [EOL]     base = new DateTime(-4713, 1, 1, 12, 0, JulianChronology.getInstanceUTC()); [EOL]     assertEquals(0d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d); [EOL]     assertEquals(0, DateTimeUtils.toJulianDayNumber(base.getMillis())); [EOL]     assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(0d)); [EOL]     base = new DateTime(-4713, 1, 1, 0, 0, JulianChronology.getInstanceUTC()); [EOL]     assertEquals(-0.5d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d); [EOL]     assertEquals(0, DateTimeUtils.toJulianDayNumber(base.getMillis())); [EOL]     assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(-0.5d)); [EOL] }
public void test_julianDay() { [EOL]     DateTime base = new DateTime(1970, 1, 1, 0, 0, DateTimeZone.UTC); [EOL]     assertEquals(2440587.5d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d); [EOL]     assertEquals(2440588, DateTimeUtils.toJulianDayNumber(base.getMillis())); [EOL]     assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(2440587.5d)); [EOL]     base = base.plusHours(6); [EOL]     assertEquals(2440587.75d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d); [EOL]     assertEquals(2440588, DateTimeUtils.toJulianDayNumber(base.getMillis())); [EOL]     assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(2440587.75d)); [EOL]     base = base.plusHours(6); [EOL]     assertEquals(2440588d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d); [EOL]     assertEquals(2440588, DateTimeUtils.toJulianDayNumber(base.getMillis())); [EOL]     assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(2440588d)); [EOL]     base = base.plusHours(6); [EOL]     assertEquals(2440588.25d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d); [EOL]     assertEquals(2440588, DateTimeUtils.toJulianDayNumber(base.getMillis())); [EOL]     assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(2440588.25d)); [EOL]     base = base.plusHours(6); [EOL]     assertEquals(2440588.5d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d); [EOL]     assertEquals(2440589, DateTimeUtils.toJulianDayNumber(base.getMillis())); [EOL]     assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(2440588.5d)); [EOL]     base = new DateTime(2012, 8, 31, 23, 50, DateTimeZone.UTC); [EOL]     assertEquals(2456171.4930555555, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d); [EOL]     assertEquals(2456171, DateTimeUtils.toJulianDayNumber(base.getMillis())); [EOL]     base = new DateTime(-4713, 1, 1, 12, 0, JulianChronology.getInstanceUTC()); [EOL]     assertEquals(0d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d); [EOL]     assertEquals(0, DateTimeUtils.toJulianDayNumber(base.getMillis())); [EOL]     assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(0d)); [EOL]     base = new DateTime(-4713, 1, 1, 0, 0, JulianChronology.getInstanceUTC()); [EOL]     assertEquals(-0.5d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d); [EOL]     assertEquals(0, DateTimeUtils.toJulianDayNumber(base.getMillis())); [EOL]     assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(-0.5d)); [EOL] }
public void test_julianDay() { [EOL]     DateTime base = new DateTime(1970, 1, 1, 0, 0, DateTimeZone.UTC); [EOL]     assertEquals(2440587.5d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d); [EOL]     assertEquals(2440588, DateTimeUtils.toJulianDayNumber(base.getMillis())); [EOL]     assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(2440587.5d)); [EOL]     base = base.plusHours(6); [EOL]     assertEquals(2440587.75d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d); [EOL]     assertEquals(2440588, DateTimeUtils.toJulianDayNumber(base.getMillis())); [EOL]     assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(2440587.75d)); [EOL]     base = base.plusHours(6); [EOL]     assertEquals(2440588d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d); [EOL]     assertEquals(2440588, DateTimeUtils.toJulianDayNumber(base.getMillis())); [EOL]     assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(2440588d)); [EOL]     base = base.plusHours(6); [EOL]     assertEquals(2440588.25d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d); [EOL]     assertEquals(2440588, DateTimeUtils.toJulianDayNumber(base.getMillis())); [EOL]     assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(2440588.25d)); [EOL]     base = base.plusHours(6); [EOL]     assertEquals(2440588.5d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d); [EOL]     assertEquals(2440589, DateTimeUtils.toJulianDayNumber(base.getMillis())); [EOL]     assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(2440588.5d)); [EOL]     base = new DateTime(2012, 8, 31, 23, 50, DateTimeZone.UTC); [EOL]     assertEquals(2456171.4930555555, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d); [EOL]     assertEquals(2456171, DateTimeUtils.toJulianDayNumber(base.getMillis())); [EOL]     base = new DateTime(-4713, 1, 1, 12, 0, JulianChronology.getInstanceUTC()); [EOL]     assertEquals(0d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d); [EOL]     assertEquals(0, DateTimeUtils.toJulianDayNumber(base.getMillis())); [EOL]     assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(0d)); [EOL]     base = new DateTime(-4713, 1, 1, 0, 0, JulianChronology.getInstanceUTC()); [EOL]     assertEquals(-0.5d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d); [EOL]     assertEquals(0, DateTimeUtils.toJulianDayNumber(base.getMillis())); [EOL]     assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(-0.5d)); [EOL] }
public void test_julianDay() { [EOL]     DateTime base = new DateTime(1970, 1, 1, 0, 0, DateTimeZone.UTC); [EOL]     assertEquals(2440587.5d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d); [EOL]     assertEquals(2440588, DateTimeUtils.toJulianDayNumber(base.getMillis())); [EOL]     assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(2440587.5d)); [EOL]     base = base.plusHours(6); [EOL]     assertEquals(2440587.75d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d); [EOL]     assertEquals(2440588, DateTimeUtils.toJulianDayNumber(base.getMillis())); [EOL]     assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(2440587.75d)); [EOL]     base = base.plusHours(6); [EOL]     assertEquals(2440588d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d); [EOL]     assertEquals(2440588, DateTimeUtils.toJulianDayNumber(base.getMillis())); [EOL]     assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(2440588d)); [EOL]     base = base.plusHours(6); [EOL]     assertEquals(2440588.25d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d); [EOL]     assertEquals(2440588, DateTimeUtils.toJulianDayNumber(base.getMillis())); [EOL]     assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(2440588.25d)); [EOL]     base = base.plusHours(6); [EOL]     assertEquals(2440588.5d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d); [EOL]     assertEquals(2440589, DateTimeUtils.toJulianDayNumber(base.getMillis())); [EOL]     assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(2440588.5d)); [EOL]     base = new DateTime(2012, 8, 31, 23, 50, DateTimeZone.UTC); [EOL]     assertEquals(2456171.4930555555, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d); [EOL]     assertEquals(2456171, DateTimeUtils.toJulianDayNumber(base.getMillis())); [EOL]     base = new DateTime(-4713, 1, 1, 12, 0, JulianChronology.getInstanceUTC()); [EOL]     assertEquals(0d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d); [EOL]     assertEquals(0, DateTimeUtils.toJulianDayNumber(base.getMillis())); [EOL]     assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(0d)); [EOL]     base = new DateTime(-4713, 1, 1, 0, 0, JulianChronology.getInstanceUTC()); [EOL]     assertEquals(-0.5d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d); [EOL]     assertEquals(0, DateTimeUtils.toJulianDayNumber(base.getMillis())); [EOL]     assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(-0.5d)); [EOL] }
public void testOffsetMillis() { [EOL]     try { [EOL]         DateTimeUtils.setCurrentMillisOffset(-24 * 60 * 60 * 1000); [EOL]         long nowSystem = System.currentTimeMillis(); [EOL]         long now = DateTimeUtils.currentTimeMillis(); [EOL]         long nowAdjustDay = now + (24 * 60 * 60 * 1000); [EOL]         assertTrue((now < nowSystem)); [EOL]         assertTrue((nowAdjustDay >= nowSystem)); [EOL]         assertTrue((nowAdjustDay - nowSystem) < 10000L); [EOL]     } finally { [EOL]         DateTimeUtils.setCurrentMillisSystem(); [EOL]     } [EOL]     long nowSystem = System.currentTimeMillis(); [EOL]     long now = DateTimeUtils.currentTimeMillis(); [EOL]     assertTrue((now >= nowSystem)); [EOL]     assertTrue((now - nowSystem) < 10000L); [EOL] }
public void testOffsetMillis() { [EOL]     try { [EOL]         DateTimeUtils.setCurrentMillisOffset(-24 * 60 * 60 * 1000); [EOL]         long nowSystem = System.currentTimeMillis(); [EOL]         long now = DateTimeUtils.currentTimeMillis(); [EOL]         long nowAdjustDay = now + (24 * 60 * 60 * 1000); [EOL]         assertTrue((now < nowSystem)); [EOL]         assertTrue((nowAdjustDay >= nowSystem)); [EOL]         assertTrue((nowAdjustDay - nowSystem) < 10000L); [EOL]     } finally { [EOL]         DateTimeUtils.setCurrentMillisSystem(); [EOL]     } [EOL]     long nowSystem = System.currentTimeMillis(); [EOL]     long now = DateTimeUtils.currentTimeMillis(); [EOL]     assertTrue((now >= nowSystem)); [EOL]     assertTrue((now - nowSystem) < 10000L); [EOL] }
public void testOffsetMillis() { [EOL]     try { [EOL]         DateTimeUtils.setCurrentMillisOffset(-24 * 60 * 60 * 1000); [EOL]         long nowSystem = System.currentTimeMillis(); [EOL]         long now = DateTimeUtils.currentTimeMillis(); [EOL]         long nowAdjustDay = now + (24 * 60 * 60 * 1000); [EOL]         assertTrue((now < nowSystem)); [EOL]         assertTrue((nowAdjustDay >= nowSystem)); [EOL]         assertTrue((nowAdjustDay - nowSystem) < 10000L); [EOL]     } finally { [EOL]         DateTimeUtils.setCurrentMillisSystem(); [EOL]     } [EOL]     long nowSystem = System.currentTimeMillis(); [EOL]     long now = DateTimeUtils.currentTimeMillis(); [EOL]     assertTrue((now >= nowSystem)); [EOL]     assertTrue((now - nowSystem) < 10000L); [EOL] }
public void testOffsetMillis() { [EOL]     try { [EOL]         DateTimeUtils.setCurrentMillisOffset(-24 * 60 * 60 * 1000); [EOL]         long nowSystem = System.currentTimeMillis(); [EOL]         long now = DateTimeUtils.currentTimeMillis(); [EOL]         long nowAdjustDay = now + (24 * 60 * 60 * 1000); [EOL]         assertTrue((now < nowSystem)); [EOL]         assertTrue((nowAdjustDay >= nowSystem)); [EOL]         assertTrue((nowAdjustDay - nowSystem) < 10000L); [EOL]     } finally { [EOL]         DateTimeUtils.setCurrentMillisSystem(); [EOL]     } [EOL]     long nowSystem = System.currentTimeMillis(); [EOL]     long now = DateTimeUtils.currentTimeMillis(); [EOL]     assertTrue((now >= nowSystem)); [EOL]     assertTrue((now - nowSystem) < 10000L); [EOL] }
public void testOffsetMillis() { [EOL]     try { [EOL]         DateTimeUtils.setCurrentMillisOffset(-24 * 60 * 60 * 1000); [EOL]         long nowSystem = System.currentTimeMillis(); [EOL]         long now = DateTimeUtils.currentTimeMillis(); [EOL]         long nowAdjustDay = now + (24 * 60 * 60 * 1000); [EOL]         assertTrue((now < nowSystem)); [EOL]         assertTrue((nowAdjustDay >= nowSystem)); [EOL]         assertTrue((nowAdjustDay - nowSystem) < 10000L); [EOL]     } finally { [EOL]         DateTimeUtils.setCurrentMillisSystem(); [EOL]     } [EOL]     long nowSystem = System.currentTimeMillis(); [EOL]     long now = DateTimeUtils.currentTimeMillis(); [EOL]     assertTrue((now >= nowSystem)); [EOL]     assertTrue((now - nowSystem) < 10000L); [EOL] }
public void testOffsetMillis() { [EOL]     try { [EOL]         DateTimeUtils.setCurrentMillisOffset(-24 * 60 * 60 * 1000); [EOL]         long nowSystem = System.currentTimeMillis(); [EOL]         long now = DateTimeUtils.currentTimeMillis(); [EOL]         long nowAdjustDay = now + (24 * 60 * 60 * 1000); [EOL]         assertTrue((now < nowSystem)); [EOL]         assertTrue((nowAdjustDay >= nowSystem)); [EOL]         assertTrue((nowAdjustDay - nowSystem) < 10000L); [EOL]     } finally { [EOL]         DateTimeUtils.setCurrentMillisSystem(); [EOL]     } [EOL]     long nowSystem = System.currentTimeMillis(); [EOL]     long now = DateTimeUtils.currentTimeMillis(); [EOL]     assertTrue((now >= nowSystem)); [EOL]     assertTrue((now - nowSystem) < 10000L); [EOL] }
public void testOffsetMillis() { [EOL]     try { [EOL]         DateTimeUtils.setCurrentMillisOffset(-24 * 60 * 60 * 1000); [EOL]         long nowSystem = System.currentTimeMillis(); [EOL]         long now = DateTimeUtils.currentTimeMillis(); [EOL]         long nowAdjustDay = now + (24 * 60 * 60 * 1000); [EOL]         assertTrue((now < nowSystem)); [EOL]         assertTrue((nowAdjustDay >= nowSystem)); [EOL]         assertTrue((nowAdjustDay - nowSystem) < 10000L); [EOL]     } finally { [EOL]         DateTimeUtils.setCurrentMillisSystem(); [EOL]     } [EOL]     long nowSystem = System.currentTimeMillis(); [EOL]     long now = DateTimeUtils.currentTimeMillis(); [EOL]     assertTrue((now >= nowSystem)); [EOL]     assertTrue((now - nowSystem) < 10000L); [EOL] }
public void testSetInto_Object_Chronology2() throws Exception { [EOL]     MutableInterval m = new MutableInterval(1000L, 2000L, GJChronology.getInstance()); [EOL]     NullConverter.INSTANCE.setInto(m, null, CopticChronology.getInstance()); [EOL]     assertEquals(TEST_TIME_NOW, m.getStartMillis()); [EOL]     assertEquals(TEST_TIME_NOW, m.getEndMillis()); [EOL]     assertEquals(CopticChronology.getInstance(), m.getChronology()); [EOL] }
public void testSetInto_Object_Chronology2() throws Exception { [EOL]     MutableInterval m = new MutableInterval(1000L, 2000L, GJChronology.getInstance()); [EOL]     NullConverter.INSTANCE.setInto(m, null, CopticChronology.getInstance()); [EOL]     assertEquals(TEST_TIME_NOW, m.getStartMillis()); [EOL]     assertEquals(TEST_TIME_NOW, m.getEndMillis()); [EOL]     assertEquals(CopticChronology.getInstance(), m.getChronology()); [EOL] }
public void testConstructor_RI_RD4() throws Throwable { [EOL]     long result = TEST_TIME_NOW; [EOL]     result = ISOChronology.getInstance().monthOfYear().add(result, 6); [EOL]     result = ISOChronology.getInstance().hourOfDay().add(result, 1); [EOL]     Duration dur = new Duration(result - TEST_TIME_NOW); [EOL]     MutableInterval test = new MutableInterval((ReadableInstant) null, dur); [EOL]     assertEquals(TEST_TIME_NOW, test.getStartMillis()); [EOL]     assertEquals(result, test.getEndMillis()); [EOL] }
public void testConstructor_RI_RD4() throws Throwable { [EOL]     long result = TEST_TIME_NOW; [EOL]     result = ISOChronology.getInstance().monthOfYear().add(result, 6); [EOL]     result = ISOChronology.getInstance().hourOfDay().add(result, 1); [EOL]     Duration dur = new Duration(result - TEST_TIME_NOW); [EOL]     MutableInterval test = new MutableInterval((ReadableInstant) null, dur); [EOL]     assertEquals(TEST_TIME_NOW, test.getStartMillis()); [EOL]     assertEquals(result, test.getEndMillis()); [EOL] }
public void testConstructor_RI_RD4() throws Throwable { [EOL]     long result = TEST_TIME_NOW; [EOL]     result = ISOChronology.getInstance().monthOfYear().add(result, 6); [EOL]     result = ISOChronology.getInstance().hourOfDay().add(result, 1); [EOL]     Duration dur = new Duration(result - TEST_TIME_NOW); [EOL]     MutableInterval test = new MutableInterval((ReadableInstant) null, dur); [EOL]     assertEquals(TEST_TIME_NOW, test.getStartMillis()); [EOL]     assertEquals(result, test.getEndMillis()); [EOL] }
public void testConstructor_RI_RD4() throws Throwable { [EOL]     long result = TEST_TIME_NOW; [EOL]     result = ISOChronology.getInstance().monthOfYear().add(result, 6); [EOL]     result = ISOChronology.getInstance().hourOfDay().add(result, 1); [EOL]     Duration dur = new Duration(result - TEST_TIME_NOW); [EOL]     MutableInterval test = new MutableInterval((ReadableInstant) null, dur); [EOL]     assertEquals(TEST_TIME_NOW, test.getStartMillis()); [EOL]     assertEquals(result, test.getEndMillis()); [EOL] }
public void testConstructor_RI_RD4() throws Throwable { [EOL]     long result = TEST_TIME_NOW; [EOL]     result = ISOChronology.getInstance().monthOfYear().add(result, 6); [EOL]     result = ISOChronology.getInstance().hourOfDay().add(result, 1); [EOL]     Duration dur = new Duration(result - TEST_TIME_NOW); [EOL]     MutableInterval test = new MutableInterval((ReadableInstant) null, dur); [EOL]     assertEquals(TEST_TIME_NOW, test.getStartMillis()); [EOL]     assertEquals(result, test.getEndMillis()); [EOL] }
public void testConstructor_RP_RI8() throws Throwable { [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW); [EOL]     Period dur = new Period(0, 0, 0, 0, 0, 0, 0, -1); [EOL]     try { [EOL]         new Interval(dur, dt); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testConstructor_RP_RI8() throws Throwable { [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW); [EOL]     Period dur = new Period(0, 0, 0, 0, 0, 0, 0, -1); [EOL]     try { [EOL]         new Interval(dur, dt); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testConstructor_Object_Chronology1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     Interval base = new Interval(dt1, dt2); [EOL]     MutableInterval test = new MutableInterval(base, BuddhistChronology.getInstance()); [EOL]     assertEquals(dt1.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt2.getMillis(), test.getEndMillis()); [EOL]     assertEquals(BuddhistChronology.getInstance(), test.getChronology()); [EOL] }
public void testSetInterval_RI_RI3() { [EOL]     MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     test.setInterval(null, new Instant(TEST_TIME2 + 1)); [EOL]     assertEquals(TEST_TIME_NOW, test.getStartMillis()); [EOL]     assertEquals(TEST_TIME2 + 1, test.getEndMillis()); [EOL] }
public void testSetInterval_RI_RI3() { [EOL]     MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     test.setInterval(null, new Instant(TEST_TIME2 + 1)); [EOL]     assertEquals(TEST_TIME_NOW, test.getStartMillis()); [EOL]     assertEquals(TEST_TIME2 + 1, test.getEndMillis()); [EOL] }
public void testForOffsetMillis_int() { [EOL]     assertSame(DateTimeZone.UTC, DateTimeZone.forOffsetMillis(0)); [EOL]     assertEquals(DateTimeZone.forID("+23:59:59.999"), DateTimeZone.forOffsetMillis((24 * 60 * 60 * 1000) - 1)); [EOL]     assertEquals(DateTimeZone.forID("+03:00"), DateTimeZone.forOffsetMillis(3 * 60 * 60 * 1000)); [EOL]     assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetMillis(-2 * 60 * 60 * 1000)); [EOL]     assertEquals(DateTimeZone.forID("-23:59:59.999"), DateTimeZone.forOffsetMillis((-24 * 60 * 60 * 1000) + 1)); [EOL]     assertEquals(DateTimeZone.forID("+04:45:17.045"), DateTimeZone.forOffsetMillis(4 * 60 * 60 * 1000 + 45 * 60 * 1000 + 17 * 1000 + 45)); [EOL] }
public void testForOffsetMillis_int() { [EOL]     assertSame(DateTimeZone.UTC, DateTimeZone.forOffsetMillis(0)); [EOL]     assertEquals(DateTimeZone.forID("+23:59:59.999"), DateTimeZone.forOffsetMillis((24 * 60 * 60 * 1000) - 1)); [EOL]     assertEquals(DateTimeZone.forID("+03:00"), DateTimeZone.forOffsetMillis(3 * 60 * 60 * 1000)); [EOL]     assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetMillis(-2 * 60 * 60 * 1000)); [EOL]     assertEquals(DateTimeZone.forID("-23:59:59.999"), DateTimeZone.forOffsetMillis((-24 * 60 * 60 * 1000) + 1)); [EOL]     assertEquals(DateTimeZone.forID("+04:45:17.045"), DateTimeZone.forOffsetMillis(4 * 60 * 60 * 1000 + 45 * 60 * 1000 + 17 * 1000 + 45)); [EOL] }
public void testForOffsetMillis_int() { [EOL]     assertSame(DateTimeZone.UTC, DateTimeZone.forOffsetMillis(0)); [EOL]     assertEquals(DateTimeZone.forID("+23:59:59.999"), DateTimeZone.forOffsetMillis((24 * 60 * 60 * 1000) - 1)); [EOL]     assertEquals(DateTimeZone.forID("+03:00"), DateTimeZone.forOffsetMillis(3 * 60 * 60 * 1000)); [EOL]     assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetMillis(-2 * 60 * 60 * 1000)); [EOL]     assertEquals(DateTimeZone.forID("-23:59:59.999"), DateTimeZone.forOffsetMillis((-24 * 60 * 60 * 1000) + 1)); [EOL]     assertEquals(DateTimeZone.forID("+04:45:17.045"), DateTimeZone.forOffsetMillis(4 * 60 * 60 * 1000 + 45 * 60 * 1000 + 17 * 1000 + 45)); [EOL] }
public void testForOffsetMillis_int() { [EOL]     assertSame(DateTimeZone.UTC, DateTimeZone.forOffsetMillis(0)); [EOL]     assertEquals(DateTimeZone.forID("+23:59:59.999"), DateTimeZone.forOffsetMillis((24 * 60 * 60 * 1000) - 1)); [EOL]     assertEquals(DateTimeZone.forID("+03:00"), DateTimeZone.forOffsetMillis(3 * 60 * 60 * 1000)); [EOL]     assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetMillis(-2 * 60 * 60 * 1000)); [EOL]     assertEquals(DateTimeZone.forID("-23:59:59.999"), DateTimeZone.forOffsetMillis((-24 * 60 * 60 * 1000) + 1)); [EOL]     assertEquals(DateTimeZone.forID("+04:45:17.045"), DateTimeZone.forOffsetMillis(4 * 60 * 60 * 1000 + 45 * 60 * 1000 + 17 * 1000 + 45)); [EOL] }
public void testForOffsetMillis_int() { [EOL]     assertSame(DateTimeZone.UTC, DateTimeZone.forOffsetMillis(0)); [EOL]     assertEquals(DateTimeZone.forID("+23:59:59.999"), DateTimeZone.forOffsetMillis((24 * 60 * 60 * 1000) - 1)); [EOL]     assertEquals(DateTimeZone.forID("+03:00"), DateTimeZone.forOffsetMillis(3 * 60 * 60 * 1000)); [EOL]     assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetMillis(-2 * 60 * 60 * 1000)); [EOL]     assertEquals(DateTimeZone.forID("-23:59:59.999"), DateTimeZone.forOffsetMillis((-24 * 60 * 60 * 1000) + 1)); [EOL]     assertEquals(DateTimeZone.forID("+04:45:17.045"), DateTimeZone.forOffsetMillis(4 * 60 * 60 * 1000 + 45 * 60 * 1000 + 17 * 1000 + 45)); [EOL] }
public void testForOffsetMillis_int() { [EOL]     assertSame(DateTimeZone.UTC, DateTimeZone.forOffsetMillis(0)); [EOL]     assertEquals(DateTimeZone.forID("+23:59:59.999"), DateTimeZone.forOffsetMillis((24 * 60 * 60 * 1000) - 1)); [EOL]     assertEquals(DateTimeZone.forID("+03:00"), DateTimeZone.forOffsetMillis(3 * 60 * 60 * 1000)); [EOL]     assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetMillis(-2 * 60 * 60 * 1000)); [EOL]     assertEquals(DateTimeZone.forID("-23:59:59.999"), DateTimeZone.forOffsetMillis((-24 * 60 * 60 * 1000) + 1)); [EOL]     assertEquals(DateTimeZone.forID("+04:45:17.045"), DateTimeZone.forOffsetMillis(4 * 60 * 60 * 1000 + 45 * 60 * 1000 + 17 * 1000 + 45)); [EOL] }
public void testForOffsetMillis_int() { [EOL]     assertSame(DateTimeZone.UTC, DateTimeZone.forOffsetMillis(0)); [EOL]     assertEquals(DateTimeZone.forID("+23:59:59.999"), DateTimeZone.forOffsetMillis((24 * 60 * 60 * 1000) - 1)); [EOL]     assertEquals(DateTimeZone.forID("+03:00"), DateTimeZone.forOffsetMillis(3 * 60 * 60 * 1000)); [EOL]     assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetMillis(-2 * 60 * 60 * 1000)); [EOL]     assertEquals(DateTimeZone.forID("-23:59:59.999"), DateTimeZone.forOffsetMillis((-24 * 60 * 60 * 1000) + 1)); [EOL]     assertEquals(DateTimeZone.forID("+04:45:17.045"), DateTimeZone.forOffsetMillis(4 * 60 * 60 * 1000 + 45 * 60 * 1000 + 17 * 1000 + 45)); [EOL] }
public void testForOffsetMillis_int() { [EOL]     assertSame(DateTimeZone.UTC, DateTimeZone.forOffsetMillis(0)); [EOL]     assertEquals(DateTimeZone.forID("+23:59:59.999"), DateTimeZone.forOffsetMillis((24 * 60 * 60 * 1000) - 1)); [EOL]     assertEquals(DateTimeZone.forID("+03:00"), DateTimeZone.forOffsetMillis(3 * 60 * 60 * 1000)); [EOL]     assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetMillis(-2 * 60 * 60 * 1000)); [EOL]     assertEquals(DateTimeZone.forID("-23:59:59.999"), DateTimeZone.forOffsetMillis((-24 * 60 * 60 * 1000) + 1)); [EOL]     assertEquals(DateTimeZone.forID("+04:45:17.045"), DateTimeZone.forOffsetMillis(4 * 60 * 60 * 1000 + 45 * 60 * 1000 + 17 * 1000 + 45)); [EOL] }
public void testForOffsetMillis_int() { [EOL]     assertSame(DateTimeZone.UTC, DateTimeZone.forOffsetMillis(0)); [EOL]     assertEquals(DateTimeZone.forID("+23:59:59.999"), DateTimeZone.forOffsetMillis((24 * 60 * 60 * 1000) - 1)); [EOL]     assertEquals(DateTimeZone.forID("+03:00"), DateTimeZone.forOffsetMillis(3 * 60 * 60 * 1000)); [EOL]     assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetMillis(-2 * 60 * 60 * 1000)); [EOL]     assertEquals(DateTimeZone.forID("-23:59:59.999"), DateTimeZone.forOffsetMillis((-24 * 60 * 60 * 1000) + 1)); [EOL]     assertEquals(DateTimeZone.forID("+04:45:17.045"), DateTimeZone.forOffsetMillis(4 * 60 * 60 * 1000 + 45 * 60 * 1000 + 17 * 1000 + 45)); [EOL] }
public void testForOffsetMillis_int() { [EOL]     assertSame(DateTimeZone.UTC, DateTimeZone.forOffsetMillis(0)); [EOL]     assertEquals(DateTimeZone.forID("+23:59:59.999"), DateTimeZone.forOffsetMillis((24 * 60 * 60 * 1000) - 1)); [EOL]     assertEquals(DateTimeZone.forID("+03:00"), DateTimeZone.forOffsetMillis(3 * 60 * 60 * 1000)); [EOL]     assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetMillis(-2 * 60 * 60 * 1000)); [EOL]     assertEquals(DateTimeZone.forID("-23:59:59.999"), DateTimeZone.forOffsetMillis((-24 * 60 * 60 * 1000) + 1)); [EOL]     assertEquals(DateTimeZone.forID("+04:45:17.045"), DateTimeZone.forOffsetMillis(4 * 60 * 60 * 1000 + 45 * 60 * 1000 + 17 * 1000 + 45)); [EOL] }
public void testForOffsetMillis_int() { [EOL]     assertSame(DateTimeZone.UTC, DateTimeZone.forOffsetMillis(0)); [EOL]     assertEquals(DateTimeZone.forID("+23:59:59.999"), DateTimeZone.forOffsetMillis((24 * 60 * 60 * 1000) - 1)); [EOL]     assertEquals(DateTimeZone.forID("+03:00"), DateTimeZone.forOffsetMillis(3 * 60 * 60 * 1000)); [EOL]     assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetMillis(-2 * 60 * 60 * 1000)); [EOL]     assertEquals(DateTimeZone.forID("-23:59:59.999"), DateTimeZone.forOffsetMillis((-24 * 60 * 60 * 1000) + 1)); [EOL]     assertEquals(DateTimeZone.forID("+04:45:17.045"), DateTimeZone.forOffsetMillis(4 * 60 * 60 * 1000 + 45 * 60 * 1000 + 17 * 1000 + 45)); [EOL] }
public void test_DateTime_roundFloor_hour_NewYork_Spring_postCutover() { [EOL]     DateTime dt = new DateTime(2007, 3, 11, 3, 30, 0, 0, ZONE_NEW_YORK); [EOL]     assertEquals("2007-03-11T03:30:00.000-04:00", dt.toString()); [EOL]     DateTime rounded = dt.hourOfDay().roundFloorCopy(); [EOL]     assertEquals("2007-03-11T03:00:00.000-04:00", rounded.toString()); [EOL] }
public void test_DateTime_roundFloor_hour_NewYork_Spring_postCutover() { [EOL]     DateTime dt = new DateTime(2007, 3, 11, 3, 30, 0, 0, ZONE_NEW_YORK); [EOL]     assertEquals("2007-03-11T03:30:00.000-04:00", dt.toString()); [EOL]     DateTime rounded = dt.hourOfDay().roundFloorCopy(); [EOL]     assertEquals("2007-03-11T03:00:00.000-04:00", rounded.toString()); [EOL] }
public void test_DateTime_roundFloor_hour_NewYork_Spring_postCutover() { [EOL]     DateTime dt = new DateTime(2007, 3, 11, 3, 30, 0, 0, ZONE_NEW_YORK); [EOL]     assertEquals("2007-03-11T03:30:00.000-04:00", dt.toString()); [EOL]     DateTime rounded = dt.hourOfDay().roundFloorCopy(); [EOL]     assertEquals("2007-03-11T03:00:00.000-04:00", rounded.toString()); [EOL] }
public void test_DateTime_roundFloor_hour_NewYork_Spring_postCutover() { [EOL]     DateTime dt = new DateTime(2007, 3, 11, 3, 30, 0, 0, ZONE_NEW_YORK); [EOL]     assertEquals("2007-03-11T03:30:00.000-04:00", dt.toString()); [EOL]     DateTime rounded = dt.hourOfDay().roundFloorCopy(); [EOL]     assertEquals("2007-03-11T03:00:00.000-04:00", rounded.toString()); [EOL] }
public void test_DateTime_roundFloor_hour_NewYork_Spring_postCutover() { [EOL]     DateTime dt = new DateTime(2007, 3, 11, 3, 30, 0, 0, ZONE_NEW_YORK); [EOL]     assertEquals("2007-03-11T03:30:00.000-04:00", dt.toString()); [EOL]     DateTime rounded = dt.hourOfDay().roundFloorCopy(); [EOL]     assertEquals("2007-03-11T03:00:00.000-04:00", rounded.toString()); [EOL] }
public void testBug3192457_adjustOffset() { [EOL]     final DateTimeZone zone = DateTimeZone.forID("Europe/Paris"); [EOL]     DateTime base = new DateTime(2007, 10, 28, 3, 15, zone); [EOL]     DateTime baseBefore = base.minusHours(2); [EOL]     DateTime baseAfter = base.minusHours(1); [EOL]     assertSame(base, base.withEarlierOffsetAtOverlap()); [EOL]     assertSame(base, base.withLaterOffsetAtOverlap()); [EOL]     assertSame(baseBefore, baseBefore.withEarlierOffsetAtOverlap()); [EOL]     assertEquals(baseAfter, baseBefore.withLaterOffsetAtOverlap()); [EOL]     assertSame(baseAfter, baseAfter.withLaterOffsetAtOverlap()); [EOL]     assertEquals(baseBefore, baseAfter.withEarlierOffsetAtOverlap()); [EOL] }
public void testBug3192457_adjustOffset() { [EOL]     final DateTimeZone zone = DateTimeZone.forID("Europe/Paris"); [EOL]     DateTime base = new DateTime(2007, 10, 28, 3, 15, zone); [EOL]     DateTime baseBefore = base.minusHours(2); [EOL]     DateTime baseAfter = base.minusHours(1); [EOL]     assertSame(base, base.withEarlierOffsetAtOverlap()); [EOL]     assertSame(base, base.withLaterOffsetAtOverlap()); [EOL]     assertSame(baseBefore, baseBefore.withEarlierOffsetAtOverlap()); [EOL]     assertEquals(baseAfter, baseBefore.withLaterOffsetAtOverlap()); [EOL]     assertSame(baseAfter, baseAfter.withLaterOffsetAtOverlap()); [EOL]     assertEquals(baseBefore, baseAfter.withEarlierOffsetAtOverlap()); [EOL] }
public void testBug3192457_adjustOffset() { [EOL]     final DateTimeZone zone = DateTimeZone.forID("Europe/Paris"); [EOL]     DateTime base = new DateTime(2007, 10, 28, 3, 15, zone); [EOL]     DateTime baseBefore = base.minusHours(2); [EOL]     DateTime baseAfter = base.minusHours(1); [EOL]     assertSame(base, base.withEarlierOffsetAtOverlap()); [EOL]     assertSame(base, base.withLaterOffsetAtOverlap()); [EOL]     assertSame(baseBefore, baseBefore.withEarlierOffsetAtOverlap()); [EOL]     assertEquals(baseAfter, baseBefore.withLaterOffsetAtOverlap()); [EOL]     assertSame(baseAfter, baseAfter.withLaterOffsetAtOverlap()); [EOL]     assertEquals(baseBefore, baseAfter.withEarlierOffsetAtOverlap()); [EOL] }
public void testBug3192457_adjustOffset() { [EOL]     final DateTimeZone zone = DateTimeZone.forID("Europe/Paris"); [EOL]     DateTime base = new DateTime(2007, 10, 28, 3, 15, zone); [EOL]     DateTime baseBefore = base.minusHours(2); [EOL]     DateTime baseAfter = base.minusHours(1); [EOL]     assertSame(base, base.withEarlierOffsetAtOverlap()); [EOL]     assertSame(base, base.withLaterOffsetAtOverlap()); [EOL]     assertSame(baseBefore, baseBefore.withEarlierOffsetAtOverlap()); [EOL]     assertEquals(baseAfter, baseBefore.withLaterOffsetAtOverlap()); [EOL]     assertSame(baseAfter, baseAfter.withLaterOffsetAtOverlap()); [EOL]     assertEquals(baseBefore, baseAfter.withEarlierOffsetAtOverlap()); [EOL] }
public void testFormat_yearOfEra_twoDigit() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "04", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "23", f.print(dt)); [EOL]     f = f.withZoneUTC(); [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(1922, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("22")); [EOL]     expect = new DateTime(2021, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("21")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = f.withPivotYear(new Integer(2050)); [EOL]     expect = new DateTime(2000, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("00")); [EOL]     expect = new DateTime(2099, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("99")); [EOL]     f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     f = f.withZoneUTC(); [EOL]     f.parseDateTime("5"); [EOL]     f.parseDateTime("005"); [EOL]     f.parseDateTime("+50"); [EOL]     f.parseDateTime("-50"); [EOL] }
public void testFormat_yearOfEra_twoDigit() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "04", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "23", f.print(dt)); [EOL]     f = f.withZoneUTC(); [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(1922, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("22")); [EOL]     expect = new DateTime(2021, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("21")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = f.withPivotYear(new Integer(2050)); [EOL]     expect = new DateTime(2000, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("00")); [EOL]     expect = new DateTime(2099, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("99")); [EOL]     f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     f = f.withZoneUTC(); [EOL]     f.parseDateTime("5"); [EOL]     f.parseDateTime("005"); [EOL]     f.parseDateTime("+50"); [EOL]     f.parseDateTime("-50"); [EOL] }
public void testFormat_yearOfEra_twoDigit() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "04", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "23", f.print(dt)); [EOL]     f = f.withZoneUTC(); [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(1922, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("22")); [EOL]     expect = new DateTime(2021, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("21")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = f.withPivotYear(new Integer(2050)); [EOL]     expect = new DateTime(2000, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("00")); [EOL]     expect = new DateTime(2099, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("99")); [EOL]     f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     f = f.withZoneUTC(); [EOL]     f.parseDateTime("5"); [EOL]     f.parseDateTime("005"); [EOL]     f.parseDateTime("+50"); [EOL]     f.parseDateTime("-50"); [EOL] }
public void testFormat_yearOfEra_twoDigit() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "04", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "23", f.print(dt)); [EOL]     f = f.withZoneUTC(); [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(1922, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("22")); [EOL]     expect = new DateTime(2021, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("21")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = f.withPivotYear(new Integer(2050)); [EOL]     expect = new DateTime(2000, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("00")); [EOL]     expect = new DateTime(2099, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("99")); [EOL]     f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     f = f.withZoneUTC(); [EOL]     f.parseDateTime("5"); [EOL]     f.parseDateTime("005"); [EOL]     f.parseDateTime("+50"); [EOL]     f.parseDateTime("-50"); [EOL] }
public void testFormat_yearOfEra_twoDigit() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "04", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "23", f.print(dt)); [EOL]     f = f.withZoneUTC(); [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(1922, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("22")); [EOL]     expect = new DateTime(2021, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("21")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = f.withPivotYear(new Integer(2050)); [EOL]     expect = new DateTime(2000, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("00")); [EOL]     expect = new DateTime(2099, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("99")); [EOL]     f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     f = f.withZoneUTC(); [EOL]     f.parseDateTime("5"); [EOL]     f.parseDateTime("005"); [EOL]     f.parseDateTime("+50"); [EOL]     f.parseDateTime("-50"); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testSetText() { [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().year().set(0, null, java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("year", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("null", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().year().set(0, "nineteen seventy", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("year", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("nineteen seventy", e.getIllegalStringValue()); [EOL]         assertEquals("nineteen seventy", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().era().set(0, "long ago", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.era(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("era", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("long ago", e.getIllegalStringValue()); [EOL]         assertEquals("long ago", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().monthOfYear().set(0, "spring", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("monthOfYear", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("spring", e.getIllegalStringValue()); [EOL]         assertEquals("spring", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().dayOfWeek().set(0, "yesterday", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.dayOfWeek(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("dayOfWeek", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("yesterday", e.getIllegalStringValue()); [EOL]         assertEquals("yesterday", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().halfdayOfDay().set(0, "morning", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.halfdayOfDay(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("halfdayOfDay", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("morning", e.getIllegalStringValue()); [EOL]         assertEquals("morning", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL] }
public void testSetText() { [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().year().set(0, null, java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("year", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("null", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().year().set(0, "nineteen seventy", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("year", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("nineteen seventy", e.getIllegalStringValue()); [EOL]         assertEquals("nineteen seventy", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().era().set(0, "long ago", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.era(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("era", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("long ago", e.getIllegalStringValue()); [EOL]         assertEquals("long ago", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().monthOfYear().set(0, "spring", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("monthOfYear", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("spring", e.getIllegalStringValue()); [EOL]         assertEquals("spring", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().dayOfWeek().set(0, "yesterday", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.dayOfWeek(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("dayOfWeek", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("yesterday", e.getIllegalStringValue()); [EOL]         assertEquals("yesterday", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().halfdayOfDay().set(0, "morning", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.halfdayOfDay(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("halfdayOfDay", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("morning", e.getIllegalStringValue()); [EOL]         assertEquals("morning", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL] }
public void testSetText() { [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().year().set(0, null, java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("year", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("null", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().year().set(0, "nineteen seventy", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("year", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("nineteen seventy", e.getIllegalStringValue()); [EOL]         assertEquals("nineteen seventy", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().era().set(0, "long ago", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.era(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("era", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("long ago", e.getIllegalStringValue()); [EOL]         assertEquals("long ago", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().monthOfYear().set(0, "spring", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("monthOfYear", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("spring", e.getIllegalStringValue()); [EOL]         assertEquals("spring", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().dayOfWeek().set(0, "yesterday", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.dayOfWeek(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("dayOfWeek", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("yesterday", e.getIllegalStringValue()); [EOL]         assertEquals("yesterday", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().halfdayOfDay().set(0, "morning", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.halfdayOfDay(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("halfdayOfDay", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("morning", e.getIllegalStringValue()); [EOL]         assertEquals("morning", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL] }
public void testConstructor_RP_RP_PeriodType8() throws Throwable { [EOL]     Partial dt1 = new Partial().with(DateTimeFieldType.year(), 2005).with(DateTimeFieldType.hourOfDay(), 12); [EOL]     Partial dt2 = new Partial().with(DateTimeFieldType.year(), 2005).with(DateTimeFieldType.hourOfDay(), 14); [EOL]     try { [EOL]         new Period(dt1, dt2, PeriodType.standard()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testParseCustom1() { [EOL]     PeriodFormatter formatter = new PeriodFormatterBuilder().printZeroAlways().appendHours().appendSuffix(":").minimumPrintedDigits(2).appendMinutes().toFormatter(); [EOL]     Period p; [EOL]     p = new Period(47, 55, 0, 0); [EOL]     assertEquals("47:55", formatter.print(p)); [EOL]     assertEquals(p, formatter.parsePeriod("47:55")); [EOL]     assertEquals(p, formatter.parsePeriod("047:055")); [EOL]     p = new Period(7, 5, 0, 0); [EOL]     assertEquals("7:05", formatter.print(p)); [EOL]     assertEquals(p, formatter.parsePeriod("7:05")); [EOL]     assertEquals(p, formatter.parsePeriod("7:5")); [EOL]     assertEquals(p, formatter.parsePeriod("07:05")); [EOL]     p = new Period(0, 5, 0, 0); [EOL]     assertEquals("0:05", formatter.print(p)); [EOL]     assertEquals(p, formatter.parsePeriod("0:05")); [EOL]     assertEquals(p, formatter.parsePeriod("0:5")); [EOL]     assertEquals(p, formatter.parsePeriod("00:005")); [EOL]     assertEquals(p, formatter.parsePeriod("0:005")); [EOL]     p = new Period(0, 0, 0, 0); [EOL]     assertEquals("0:00", formatter.print(p)); [EOL]     assertEquals(p, formatter.parsePeriod("0:00")); [EOL]     assertEquals(p, formatter.parsePeriod("0:0")); [EOL]     assertEquals(p, formatter.parsePeriod("00:00")); [EOL] }
public void testParseCustom1() { [EOL]     PeriodFormatter formatter = new PeriodFormatterBuilder().printZeroAlways().appendHours().appendSuffix(":").minimumPrintedDigits(2).appendMinutes().toFormatter(); [EOL]     Period p; [EOL]     p = new Period(47, 55, 0, 0); [EOL]     assertEquals("47:55", formatter.print(p)); [EOL]     assertEquals(p, formatter.parsePeriod("47:55")); [EOL]     assertEquals(p, formatter.parsePeriod("047:055")); [EOL]     p = new Period(7, 5, 0, 0); [EOL]     assertEquals("7:05", formatter.print(p)); [EOL]     assertEquals(p, formatter.parsePeriod("7:05")); [EOL]     assertEquals(p, formatter.parsePeriod("7:5")); [EOL]     assertEquals(p, formatter.parsePeriod("07:05")); [EOL]     p = new Period(0, 5, 0, 0); [EOL]     assertEquals("0:05", formatter.print(p)); [EOL]     assertEquals(p, formatter.parsePeriod("0:05")); [EOL]     assertEquals(p, formatter.parsePeriod("0:5")); [EOL]     assertEquals(p, formatter.parsePeriod("00:005")); [EOL]     assertEquals(p, formatter.parsePeriod("0:005")); [EOL]     p = new Period(0, 0, 0, 0); [EOL]     assertEquals("0:00", formatter.print(p)); [EOL]     assertEquals(p, formatter.parsePeriod("0:00")); [EOL]     assertEquals(p, formatter.parsePeriod("0:0")); [EOL]     assertEquals(p, formatter.parsePeriod("00:00")); [EOL] }
public void testParseCustom1() { [EOL]     PeriodFormatter formatter = new PeriodFormatterBuilder().printZeroAlways().appendHours().appendSuffix(":").minimumPrintedDigits(2).appendMinutes().toFormatter(); [EOL]     Period p; [EOL]     p = new Period(47, 55, 0, 0); [EOL]     assertEquals("47:55", formatter.print(p)); [EOL]     assertEquals(p, formatter.parsePeriod("47:55")); [EOL]     assertEquals(p, formatter.parsePeriod("047:055")); [EOL]     p = new Period(7, 5, 0, 0); [EOL]     assertEquals("7:05", formatter.print(p)); [EOL]     assertEquals(p, formatter.parsePeriod("7:05")); [EOL]     assertEquals(p, formatter.parsePeriod("7:5")); [EOL]     assertEquals(p, formatter.parsePeriod("07:05")); [EOL]     p = new Period(0, 5, 0, 0); [EOL]     assertEquals("0:05", formatter.print(p)); [EOL]     assertEquals(p, formatter.parsePeriod("0:05")); [EOL]     assertEquals(p, formatter.parsePeriod("0:5")); [EOL]     assertEquals(p, formatter.parsePeriod("00:005")); [EOL]     assertEquals(p, formatter.parsePeriod("0:005")); [EOL]     p = new Period(0, 0, 0, 0); [EOL]     assertEquals("0:00", formatter.print(p)); [EOL]     assertEquals(p, formatter.parsePeriod("0:00")); [EOL]     assertEquals(p, formatter.parsePeriod("0:0")); [EOL]     assertEquals(p, formatter.parsePeriod("00:00")); [EOL] }
public void testSetPeriod_8ints1() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setPeriod(11, 12, 13, 14, 15, 16, 17, 18); [EOL]     assertEquals(11, test.getYears()); [EOL]     assertEquals(12, test.getMonths()); [EOL]     assertEquals(13, test.getWeeks()); [EOL]     assertEquals(14, test.getDays()); [EOL]     assertEquals(15, test.getHours()); [EOL]     assertEquals(16, test.getMinutes()); [EOL]     assertEquals(17, test.getSeconds()); [EOL]     assertEquals(18, test.getMillis()); [EOL] }
public void testForFields_ordinalBased_D() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.dayOfYear() }; [EOL]     int[] values = new int[] { 177 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void testForFields_ordinalBased_D() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.dayOfYear() }; [EOL]     int[] values = new int[] { 177 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void testForFields_ordinalBased_D() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.dayOfYear() }; [EOL]     int[] values = new int[] { 177 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void testForFields_ordinalBased_D() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.dayOfYear() }; [EOL]     int[] values = new int[] { 177 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void testForFields_ordinalBased_D() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.dayOfYear() }; [EOL]     int[] values = new int[] { 177 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void testForFields_ordinalBased_D() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.dayOfYear() }; [EOL]     int[] values = new int[] { 177 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void testForFields_ordinalBased_D() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.dayOfYear() }; [EOL]     int[] values = new int[] { 177 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void testForFields_ordinalBased_D() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.dayOfYear() }; [EOL]     int[] values = new int[] { 177 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void testForFields_ordinalBased_D() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.dayOfYear() }; [EOL]     int[] values = new int[] { 177 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void testForFields_ordinalBased_D() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.dayOfYear() }; [EOL]     int[] values = new int[] { 177 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void testForFields_ordinalBased_D() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.dayOfYear() }; [EOL]     int[] values = new int[] { 177 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void testForFields_ordinalBased_D() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.dayOfYear() }; [EOL]     int[] values = new int[] { 177 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void testForFields_ordinalBased_D() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.dayOfYear() }; [EOL]     int[] values = new int[] { 177 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void testForFields_ordinalBased_D() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.dayOfYear() }; [EOL]     int[] values = new int[] { 177 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void testForFields_ordinalBased_D() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.dayOfYear() }; [EOL]     int[] values = new int[] { 177 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void testForFields_weekBased_YW() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.weekyear(), DateTimeFieldType.weekOfWeekyear() }; [EOL]     int[] values = new int[] { 2005, 8 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005-W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("2005W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void testForFields_weekBased_YW() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.weekyear(), DateTimeFieldType.weekOfWeekyear() }; [EOL]     int[] values = new int[] { 2005, 8 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005-W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("2005W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void testForFields_weekBased_YW() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.weekyear(), DateTimeFieldType.weekOfWeekyear() }; [EOL]     int[] values = new int[] { 2005, 8 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005-W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("2005W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void testForFields_weekBased_YW() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.weekyear(), DateTimeFieldType.weekOfWeekyear() }; [EOL]     int[] values = new int[] { 2005, 8 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005-W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("2005W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void testForFields_weekBased_YW() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.weekyear(), DateTimeFieldType.weekOfWeekyear() }; [EOL]     int[] values = new int[] { 2005, 8 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005-W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("2005W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void testForFields_weekBased_YW() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.weekyear(), DateTimeFieldType.weekOfWeekyear() }; [EOL]     int[] values = new int[] { 2005, 8 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005-W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("2005W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void testForFields_weekBased_YW() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.weekyear(), DateTimeFieldType.weekOfWeekyear() }; [EOL]     int[] values = new int[] { 2005, 8 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005-W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("2005W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void test_localDateParser() { [EOL]     DateTimeFormatter parser = ISODateTimeFormat.localDateParser(); [EOL]     assertEquals(DateTimeZone.UTC, parser.getZone()); [EOL]     assertParse(parser, true, "2006-06-09"); [EOL]     assertParse(parser, true, "2006-W27-3"); [EOL]     assertParse(parser, true, "2006-123"); [EOL]     assertParse(parser, false, "2006-06-09T+02:00"); [EOL]     assertParse(parser, false, "2006-W27-3T+02:00"); [EOL]     assertParse(parser, false, "2006-123T+02:00"); [EOL]     assertParse(parser, false, "2006-06-09T10:20:30.040"); [EOL]     assertParse(parser, false, "2006-W27-3T10:20:30.040"); [EOL]     assertParse(parser, false, "2006-123T10:20:30.040"); [EOL]     assertParse(parser, false, "2006-06-09T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "2006-W27-3T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "2006-123T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "T10:20:30.040"); [EOL]     assertParse(parser, false, "T10.5"); [EOL]     assertParse(parser, false, "T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "T10.5+02:00"); [EOL]     assertParse(parser, false, "10:20:30.040"); [EOL]     assertParse(parser, false, "10.5"); [EOL]     assertParse(parser, false, "10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "10.5+02:00"); [EOL] }
public void test_dateElementParser() { [EOL]     DateTimeFormatter parser = ISODateTimeFormat.dateElementParser(); [EOL]     assertParse(parser, "2006-06-09", new DateTime(2006, 6, 9, 0, 0, 0, 0)); [EOL]     assertParse(parser, "2006-06-9", new DateTime(2006, 6, 9, 0, 0, 0, 0)); [EOL]     assertParse(parser, "2006-6-09", new DateTime(2006, 6, 9, 0, 0, 0, 0)); [EOL]     assertParse(parser, "2006-6-9", new DateTime(2006, 6, 9, 0, 0, 0, 0)); [EOL]     assertParse(parser, true, "2006-W27-3"); [EOL]     assertParse(parser, true, "2006-123"); [EOL]     assertParse(parser, false, "2006-06-09T+02:00"); [EOL]     assertParse(parser, false, "2006-W27-3T+02:00"); [EOL]     assertParse(parser, false, "2006-123T+02:00"); [EOL]     assertParse(parser, false, "2006-06-09T10:20:30.040"); [EOL]     assertParse(parser, false, "2006-W27-3T10:20:30.040"); [EOL]     assertParse(parser, false, "2006-123T10:20:30.040"); [EOL]     assertParse(parser, false, "2006-06-09T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "2006-W27-3T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "2006-123T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "T10:20:30.040"); [EOL]     assertParse(parser, false, "T10.5"); [EOL]     assertParse(parser, false, "T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "T10.5+02:00"); [EOL]     assertParse(parser, false, "10:20:30.040"); [EOL]     assertParse(parser, false, "10.5"); [EOL]     assertParse(parser, false, "10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "10.5+02:00"); [EOL] }
public void testFormat_tTimeNoMillis() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("T10:20:30Z", ISODateTimeFormat.tTimeNoMillis().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("T11:20:30+01:00", ISODateTimeFormat.tTimeNoMillis().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("T12:20:30+02:00", ISODateTimeFormat.tTimeNoMillis().print(dt)); [EOL] }
public void test_weekDateTimeNoMillis() { [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL]     DateTimeFormatter parser = ISODateTimeFormat.weekDateTimeNoMillis(); [EOL]     assertParse(parser, "2006-W27-3T10:20:30Z", new DateTime(2006, 6, 1, 10, 20, 30, 0).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W2-3T10:20:30Z", new DateTime(2006, 6, 1, 10, 20, 30, 0).withWeekOfWeekyear(2).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W27-3T5:6:7Z", new DateTime(2006, 6, 1, 5, 6, 7, 0).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, false, "2006-W27-T10:20:30Z"); [EOL]     assertParse(parser, false, "2006-W27T10:20:30Z"); [EOL]     assertParse(parser, false, "2006-W2T10:20:30Z"); [EOL]     assertParse(parser, false, "2006-W-3T10:20:30Z"); [EOL]     assertParse(parser, false, "2006-W27-3T10:20Z"); [EOL]     assertParse(parser, false, "2006-W27-3T10:2Z"); [EOL]     assertParse(parser, false, "2006-W27-3T10Z"); [EOL]     assertParse(parser, false, "2006-W27-3T1Z"); [EOL] }
public void test_basicTTimeNoMillis() { [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL]     DateTimeFormatter parser = ISODateTimeFormat.basicTTimeNoMillis(); [EOL]     assertParse(parser, "T102030Z", new DateTime(1970, 1, 1, 10, 20, 30, 0)); [EOL]     assertParse(parser, false, "T10203Z"); [EOL]     assertParse(parser, false, "T1020Z"); [EOL]     assertParse(parser, false, "T102Z"); [EOL]     assertParse(parser, false, "T10Z"); [EOL]     assertParse(parser, false, "T1Z"); [EOL] }
public void test_basicDateTime() { [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL]     DateTimeFormatter parser = ISODateTimeFormat.basicDateTime(); [EOL]     assertParse(parser, "20061204T102030.400999999Z", new DateTime(2006, 12, 4, 10, 20, 30, 400)); [EOL]     assertParse(parser, "20061204T102030.400Z", new DateTime(2006, 12, 4, 10, 20, 30, 400)); [EOL]     assertParse(parser, "20061204T102030.40Z", new DateTime(2006, 12, 4, 10, 20, 30, 400)); [EOL]     assertParse(parser, "20061204T102030.4Z", new DateTime(2006, 12, 4, 10, 20, 30, 400)); [EOL]     assertParse(parser, false, "2006120T102030.400Z"); [EOL]     assertParse(parser, false, "200612T102030.400Z"); [EOL]     assertParse(parser, false, "20061T102030.400Z"); [EOL]     assertParse(parser, false, "2006T102030.400Z"); [EOL]     assertParse(parser, false, "200T102030.400Z"); [EOL]     assertParse(parser, false, "20T102030.400Z"); [EOL]     assertParse(parser, false, "2T102030.400Z"); [EOL]     assertParse(parser, false, "20061204T10203.400Z"); [EOL]     assertParse(parser, false, "20061204T1020.400Z"); [EOL]     assertParse(parser, false, "20061204T102.400Z"); [EOL]     assertParse(parser, false, "20061204T10.400Z"); [EOL]     assertParse(parser, false, "20061204T1.400Z"); [EOL] }
public void test_basicOrdinalDateTime() { [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL]     DateTimeFormatter parser = ISODateTimeFormat.basicOrdinalDateTime(); [EOL]     assertParse(parser, "2006123T102030.400999999Z", new DateTime(2006, 1, 1, 10, 20, 30, 400).withDayOfYear(123)); [EOL]     assertParse(parser, "2006123T102030.400Z", new DateTime(2006, 1, 1, 10, 20, 30, 400).withDayOfYear(123)); [EOL]     assertParse(parser, "2006123T102030.40Z", new DateTime(2006, 1, 1, 10, 20, 30, 400).withDayOfYear(123)); [EOL]     assertParse(parser, "2006123T102030.4Z", new DateTime(2006, 1, 1, 10, 20, 30, 400).withDayOfYear(123)); [EOL]     assertParse(parser, false, "200612T102030.400Z"); [EOL]     assertParse(parser, false, "20061T102030.400Z"); [EOL]     assertParse(parser, false, "2006T102030.400Z"); [EOL]     assertParse(parser, false, "200T102030.400Z"); [EOL]     assertParse(parser, false, "20T102030.400Z"); [EOL]     assertParse(parser, false, "2T102030.400Z"); [EOL]     assertParse(parser, false, "2006123T10203.400Z"); [EOL]     assertParse(parser, false, "2006123T1020.400Z"); [EOL]     assertParse(parser, false, "2006123T102.400Z"); [EOL]     assertParse(parser, false, "2006123T10.400Z"); [EOL]     assertParse(parser, false, "2006123T1.400Z"); [EOL] }
public void testFormat_basicOrdinalDateTimeNoMillis() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("2004161T102030Z", ISODateTimeFormat.basicOrdinalDateTimeNoMillis().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("2004161T112030+0100", ISODateTimeFormat.basicOrdinalDateTimeNoMillis().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("2004161T122030+0200", ISODateTimeFormat.basicOrdinalDateTimeNoMillis().print(dt)); [EOL] }
public void testFormat_weekyearWeek() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("2004-W24", ISODateTimeFormat.weekyearWeek().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("2004-W24", ISODateTimeFormat.weekyearWeek().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("2004-W24", ISODateTimeFormat.weekyearWeek().print(dt)); [EOL] }
public void testFormat_dateHourMinuteSecond() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("2004-06-09T10:20:30", ISODateTimeFormat.dateHourMinuteSecond().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("2004-06-09T11:20:30", ISODateTimeFormat.dateHourMinuteSecond().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("2004-06-09T12:20:30", ISODateTimeFormat.dateHourMinuteSecond().print(dt)); [EOL] }
public void testToStandardDays() { [EOL]     Minutes test = Minutes.minutes(60 * 24 * 2); [EOL]     Days expected = Days.days(2); [EOL]     assertEquals(expected, test.toStandardDays()); [EOL] }
public void testToStandardDays() { [EOL]     Minutes test = Minutes.minutes(60 * 24 * 2); [EOL]     Days expected = Days.days(2); [EOL]     assertEquals(expected, test.toStandardDays()); [EOL] }
public void testToStandardDays() { [EOL]     Minutes test = Minutes.minutes(60 * 24 * 2); [EOL]     Days expected = Days.days(2); [EOL]     assertEquals(expected, test.toStandardDays()); [EOL] }
public void testToStandardDays() { [EOL]     Minutes test = Minutes.minutes(60 * 24 * 2); [EOL]     Days expected = Days.days(2); [EOL]     assertEquals(expected, test.toStandardDays()); [EOL] }
public void testMultipliedBy_int() { [EOL]     Minutes test = Minutes.minutes(2); [EOL]     assertEquals(6, test.multipliedBy(3).getMinutes()); [EOL]     assertEquals(2, test.getMinutes()); [EOL]     assertEquals(-6, test.multipliedBy(-3).getMinutes()); [EOL]     assertSame(test, test.multipliedBy(1)); [EOL]     Minutes halfMax = Minutes.minutes(Integer.MAX_VALUE / 2 + 1); [EOL]     try { [EOL]         halfMax.multipliedBy(2); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMultipliedBy_int() { [EOL]     Minutes test = Minutes.minutes(2); [EOL]     assertEquals(6, test.multipliedBy(3).getMinutes()); [EOL]     assertEquals(2, test.getMinutes()); [EOL]     assertEquals(-6, test.multipliedBy(-3).getMinutes()); [EOL]     assertSame(test, test.multipliedBy(1)); [EOL]     Minutes halfMax = Minutes.minutes(Integer.MAX_VALUE / 2 + 1); [EOL]     try { [EOL]         halfMax.multipliedBy(2); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMultipliedBy_int() { [EOL]     Minutes test = Minutes.minutes(2); [EOL]     assertEquals(6, test.multipliedBy(3).getMinutes()); [EOL]     assertEquals(2, test.getMinutes()); [EOL]     assertEquals(-6, test.multipliedBy(-3).getMinutes()); [EOL]     assertSame(test, test.multipliedBy(1)); [EOL]     Minutes halfMax = Minutes.minutes(Integer.MAX_VALUE / 2 + 1); [EOL]     try { [EOL]         halfMax.multipliedBy(2); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMultipliedBy_int() { [EOL]     Minutes test = Minutes.minutes(2); [EOL]     assertEquals(6, test.multipliedBy(3).getMinutes()); [EOL]     assertEquals(2, test.getMinutes()); [EOL]     assertEquals(-6, test.multipliedBy(-3).getMinutes()); [EOL]     assertSame(test, test.multipliedBy(1)); [EOL]     Minutes halfMax = Minutes.minutes(Integer.MAX_VALUE / 2 + 1); [EOL]     try { [EOL]         halfMax.multipliedBy(2); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testIsGreaterThan() { [EOL]     assertEquals(true, Minutes.THREE.isGreaterThan(Minutes.TWO)); [EOL]     assertEquals(false, Minutes.THREE.isGreaterThan(Minutes.THREE)); [EOL]     assertEquals(false, Minutes.TWO.isGreaterThan(Minutes.THREE)); [EOL]     assertEquals(true, Minutes.ONE.isGreaterThan(null)); [EOL]     assertEquals(false, Minutes.minutes(-1).isGreaterThan(null)); [EOL] }
public void testIsGreaterThan() { [EOL]     assertEquals(true, Minutes.THREE.isGreaterThan(Minutes.TWO)); [EOL]     assertEquals(false, Minutes.THREE.isGreaterThan(Minutes.THREE)); [EOL]     assertEquals(false, Minutes.TWO.isGreaterThan(Minutes.THREE)); [EOL]     assertEquals(true, Minutes.ONE.isGreaterThan(null)); [EOL]     assertEquals(false, Minutes.minutes(-1).isGreaterThan(null)); [EOL] }
public void testIsGreaterThan() { [EOL]     assertEquals(true, Minutes.THREE.isGreaterThan(Minutes.TWO)); [EOL]     assertEquals(false, Minutes.THREE.isGreaterThan(Minutes.THREE)); [EOL]     assertEquals(false, Minutes.TWO.isGreaterThan(Minutes.THREE)); [EOL]     assertEquals(true, Minutes.ONE.isGreaterThan(null)); [EOL]     assertEquals(false, Minutes.minutes(-1).isGreaterThan(null)); [EOL] }
public void testIsGreaterThan() { [EOL]     assertEquals(true, Minutes.THREE.isGreaterThan(Minutes.TWO)); [EOL]     assertEquals(false, Minutes.THREE.isGreaterThan(Minutes.THREE)); [EOL]     assertEquals(false, Minutes.TWO.isGreaterThan(Minutes.THREE)); [EOL]     assertEquals(true, Minutes.ONE.isGreaterThan(null)); [EOL]     assertEquals(false, Minutes.minutes(-1).isGreaterThan(null)); [EOL] }
public void testEquality() { [EOL]     assertSame(GregorianChronology.getInstance(TOKYO), GregorianChronology.getInstance(TOKYO)); [EOL]     assertSame(GregorianChronology.getInstance(LONDON), GregorianChronology.getInstance(LONDON)); [EOL]     assertSame(GregorianChronology.getInstance(PARIS), GregorianChronology.getInstance(PARIS)); [EOL]     assertSame(GregorianChronology.getInstanceUTC(), GregorianChronology.getInstanceUTC()); [EOL]     assertSame(GregorianChronology.getInstance(), GregorianChronology.getInstance(LONDON)); [EOL] }
public void testEquality() { [EOL]     assertSame(GregorianChronology.getInstance(TOKYO), GregorianChronology.getInstance(TOKYO)); [EOL]     assertSame(GregorianChronology.getInstance(LONDON), GregorianChronology.getInstance(LONDON)); [EOL]     assertSame(GregorianChronology.getInstance(PARIS), GregorianChronology.getInstance(PARIS)); [EOL]     assertSame(GregorianChronology.getInstanceUTC(), GregorianChronology.getInstanceUTC()); [EOL]     assertSame(GregorianChronology.getInstance(), GregorianChronology.getInstance(LONDON)); [EOL] }
public void testEquality() { [EOL]     assertSame(GregorianChronology.getInstance(TOKYO), GregorianChronology.getInstance(TOKYO)); [EOL]     assertSame(GregorianChronology.getInstance(LONDON), GregorianChronology.getInstance(LONDON)); [EOL]     assertSame(GregorianChronology.getInstance(PARIS), GregorianChronology.getInstance(PARIS)); [EOL]     assertSame(GregorianChronology.getInstanceUTC(), GregorianChronology.getInstanceUTC()); [EOL]     assertSame(GregorianChronology.getInstance(), GregorianChronology.getInstance(LONDON)); [EOL] }
public void testConstructor_nullObject() throws Throwable { [EOL]     DateTime test = new DateTime((Object) null); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] }
public void testConstructor_nullObject() throws Throwable { [EOL]     DateTime test = new DateTime((Object) null); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] }
public void testConstructor_nullObject() throws Throwable { [EOL]     DateTime test = new DateTime((Object) null); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testHashCode() throws Exception { [EOL]     FixedDateTimeZone zone1 = new FixedDateTimeZone("A", "B", 1, 5); [EOL]     FixedDateTimeZone zone1b = new FixedDateTimeZone("A", "B", 1, 5); [EOL]     FixedDateTimeZone zone2 = new FixedDateTimeZone("A", "C", 1, 5); [EOL]     FixedDateTimeZone zone3 = new FixedDateTimeZone("A", "B", 2, 5); [EOL]     FixedDateTimeZone zone4 = new FixedDateTimeZone("A", "B", 1, 6); [EOL]     assertEquals(true, zone1.hashCode() == zone1.hashCode()); [EOL]     assertEquals(true, zone1.hashCode() == zone1b.hashCode()); [EOL]     assertEquals(true, zone1.hashCode() == zone2.hashCode()); [EOL]     assertEquals(false, zone1.hashCode() == zone3.hashCode()); [EOL]     assertEquals(false, zone1.hashCode() == zone4.hashCode()); [EOL] }
public void testHashCode() throws Exception { [EOL]     FixedDateTimeZone zone1 = new FixedDateTimeZone("A", "B", 1, 5); [EOL]     FixedDateTimeZone zone1b = new FixedDateTimeZone("A", "B", 1, 5); [EOL]     FixedDateTimeZone zone2 = new FixedDateTimeZone("A", "C", 1, 5); [EOL]     FixedDateTimeZone zone3 = new FixedDateTimeZone("A", "B", 2, 5); [EOL]     FixedDateTimeZone zone4 = new FixedDateTimeZone("A", "B", 1, 6); [EOL]     assertEquals(true, zone1.hashCode() == zone1.hashCode()); [EOL]     assertEquals(true, zone1.hashCode() == zone1b.hashCode()); [EOL]     assertEquals(true, zone1.hashCode() == zone2.hashCode()); [EOL]     assertEquals(false, zone1.hashCode() == zone3.hashCode()); [EOL]     assertEquals(false, zone1.hashCode() == zone4.hashCode()); [EOL] }
public void testGetDurationMillis_Object() throws Exception { [EOL]     assertEquals(123L, ReadableDurationConverter.INSTANCE.getDurationMillis(new Duration(123L))); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyEqualsHashCodeLenient() { [EOL]     LocalDate test1 = new LocalDate(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     LocalDate test2 = new LocalDate(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL] }
public void testPropertyEqualsHashCodeLenient() { [EOL]     LocalDate test1 = new LocalDate(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     LocalDate test2 = new LocalDate(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL] }
public void testPropertyEqualsHashCodeLenient() { [EOL]     LocalDate test1 = new LocalDate(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     LocalDate test2 = new LocalDate(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL] }
public void testPropertyEqualsHashCodeLenient() { [EOL]     LocalDate test1 = new LocalDate(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     LocalDate test2 = new LocalDate(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL] }
public void testPropertyEqualsHashCodeLenient() { [EOL]     LocalDate test1 = new LocalDate(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     LocalDate test2 = new LocalDate(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL] }
public void testPropertyEqualsHashCodeLenient() { [EOL]     LocalDate test1 = new LocalDate(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     LocalDate test2 = new LocalDate(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL] }
public void testPropertyEqualsHashCodeLenient() { [EOL]     LocalDate test1 = new LocalDate(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     LocalDate test2 = new LocalDate(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL] }
public void testDelegatedMethods() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     PreciseDurationField hoursDuration = new PreciseDurationField(DurationFieldType.hours(), 10L); [EOL]     DateTimeField fieldTwo = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, hoursDuration); [EOL]     try { [EOL]         fieldOne.add(System.currentTimeMillis(), 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         long currentTime = System.currentTimeMillis(); [EOL]         long firstComputation = hoursDuration.add(currentTime, 100); [EOL]         long secondComputation = fieldTwo.add(currentTime, 100); [EOL]         assertEquals(firstComputation, secondComputation); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL]     try { [EOL]         fieldOne.add(System.currentTimeMillis(), 1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         long currentTime = System.currentTimeMillis(); [EOL]         long firstComputation = hoursDuration.add(currentTime, 1000L); [EOL]         long secondComputation = fieldTwo.add(currentTime, 1000L); [EOL]         assertTrue(firstComputation == secondComputation); [EOL]         assertEquals(firstComputation, secondComputation); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL]     try { [EOL]         fieldOne.getDifference(100000L, 1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         int firstDifference = hoursDuration.getDifference(100000L, 1000L); [EOL]         int secondDifference = fieldTwo.getDifference(100000L, 1000L); [EOL]         assertEquals(firstDifference, secondDifference); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL]     try { [EOL]         fieldOne.getDifferenceAsLong(100000L, 1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         long firstDifference = hoursDuration.getDifference(100000L, 1000L); [EOL]         long secondDifference = fieldTwo.getDifference(100000L, 1000L); [EOL]         assertEquals(firstDifference, secondDifference); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL] }
public void testDelegatedMethods() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     PreciseDurationField hoursDuration = new PreciseDurationField(DurationFieldType.hours(), 10L); [EOL]     DateTimeField fieldTwo = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, hoursDuration); [EOL]     try { [EOL]         fieldOne.add(System.currentTimeMillis(), 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         long currentTime = System.currentTimeMillis(); [EOL]         long firstComputation = hoursDuration.add(currentTime, 100); [EOL]         long secondComputation = fieldTwo.add(currentTime, 100); [EOL]         assertEquals(firstComputation, secondComputation); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL]     try { [EOL]         fieldOne.add(System.currentTimeMillis(), 1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         long currentTime = System.currentTimeMillis(); [EOL]         long firstComputation = hoursDuration.add(currentTime, 1000L); [EOL]         long secondComputation = fieldTwo.add(currentTime, 1000L); [EOL]         assertTrue(firstComputation == secondComputation); [EOL]         assertEquals(firstComputation, secondComputation); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL]     try { [EOL]         fieldOne.getDifference(100000L, 1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         int firstDifference = hoursDuration.getDifference(100000L, 1000L); [EOL]         int secondDifference = fieldTwo.getDifference(100000L, 1000L); [EOL]         assertEquals(firstDifference, secondDifference); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL]     try { [EOL]         fieldOne.getDifferenceAsLong(100000L, 1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         long firstDifference = hoursDuration.getDifference(100000L, 1000L); [EOL]         long secondDifference = fieldTwo.getDifference(100000L, 1000L); [EOL]         assertEquals(firstDifference, secondDifference); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL] }
public void testDelegatedMethods() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     PreciseDurationField hoursDuration = new PreciseDurationField(DurationFieldType.hours(), 10L); [EOL]     DateTimeField fieldTwo = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, hoursDuration); [EOL]     try { [EOL]         fieldOne.add(System.currentTimeMillis(), 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         long currentTime = System.currentTimeMillis(); [EOL]         long firstComputation = hoursDuration.add(currentTime, 100); [EOL]         long secondComputation = fieldTwo.add(currentTime, 100); [EOL]         assertEquals(firstComputation, secondComputation); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL]     try { [EOL]         fieldOne.add(System.currentTimeMillis(), 1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         long currentTime = System.currentTimeMillis(); [EOL]         long firstComputation = hoursDuration.add(currentTime, 1000L); [EOL]         long secondComputation = fieldTwo.add(currentTime, 1000L); [EOL]         assertTrue(firstComputation == secondComputation); [EOL]         assertEquals(firstComputation, secondComputation); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL]     try { [EOL]         fieldOne.getDifference(100000L, 1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         int firstDifference = hoursDuration.getDifference(100000L, 1000L); [EOL]         int secondDifference = fieldTwo.getDifference(100000L, 1000L); [EOL]         assertEquals(firstDifference, secondDifference); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL]     try { [EOL]         fieldOne.getDifferenceAsLong(100000L, 1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         long firstDifference = hoursDuration.getDifference(100000L, 1000L); [EOL]         long secondDifference = fieldTwo.getDifference(100000L, 1000L); [EOL]         assertEquals(firstDifference, secondDifference); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL] }
public void testDelegatedMethods() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     PreciseDurationField hoursDuration = new PreciseDurationField(DurationFieldType.hours(), 10L); [EOL]     DateTimeField fieldTwo = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, hoursDuration); [EOL]     try { [EOL]         fieldOne.add(System.currentTimeMillis(), 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         long currentTime = System.currentTimeMillis(); [EOL]         long firstComputation = hoursDuration.add(currentTime, 100); [EOL]         long secondComputation = fieldTwo.add(currentTime, 100); [EOL]         assertEquals(firstComputation, secondComputation); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL]     try { [EOL]         fieldOne.add(System.currentTimeMillis(), 1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         long currentTime = System.currentTimeMillis(); [EOL]         long firstComputation = hoursDuration.add(currentTime, 1000L); [EOL]         long secondComputation = fieldTwo.add(currentTime, 1000L); [EOL]         assertTrue(firstComputation == secondComputation); [EOL]         assertEquals(firstComputation, secondComputation); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL]     try { [EOL]         fieldOne.getDifference(100000L, 1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         int firstDifference = hoursDuration.getDifference(100000L, 1000L); [EOL]         int secondDifference = fieldTwo.getDifference(100000L, 1000L); [EOL]         assertEquals(firstDifference, secondDifference); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL]     try { [EOL]         fieldOne.getDifferenceAsLong(100000L, 1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         long firstDifference = hoursDuration.getDifference(100000L, 1000L); [EOL]         long secondDifference = fieldTwo.getDifference(100000L, 1000L); [EOL]         assertEquals(firstDifference, secondDifference); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL] }
public void testDelegatedMethods() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     PreciseDurationField hoursDuration = new PreciseDurationField(DurationFieldType.hours(), 10L); [EOL]     DateTimeField fieldTwo = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, hoursDuration); [EOL]     try { [EOL]         fieldOne.add(System.currentTimeMillis(), 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         long currentTime = System.currentTimeMillis(); [EOL]         long firstComputation = hoursDuration.add(currentTime, 100); [EOL]         long secondComputation = fieldTwo.add(currentTime, 100); [EOL]         assertEquals(firstComputation, secondComputation); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL]     try { [EOL]         fieldOne.add(System.currentTimeMillis(), 1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         long currentTime = System.currentTimeMillis(); [EOL]         long firstComputation = hoursDuration.add(currentTime, 1000L); [EOL]         long secondComputation = fieldTwo.add(currentTime, 1000L); [EOL]         assertTrue(firstComputation == secondComputation); [EOL]         assertEquals(firstComputation, secondComputation); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL]     try { [EOL]         fieldOne.getDifference(100000L, 1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         int firstDifference = hoursDuration.getDifference(100000L, 1000L); [EOL]         int secondDifference = fieldTwo.getDifference(100000L, 1000L); [EOL]         assertEquals(firstDifference, secondDifference); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL]     try { [EOL]         fieldOne.getDifferenceAsLong(100000L, 1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         long firstDifference = hoursDuration.getDifference(100000L, 1000L); [EOL]         long secondDifference = fieldTwo.getDifference(100000L, 1000L); [EOL]         assertEquals(firstDifference, secondDifference); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL] }
public void testDelegatedMethods() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     PreciseDurationField hoursDuration = new PreciseDurationField(DurationFieldType.hours(), 10L); [EOL]     DateTimeField fieldTwo = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, hoursDuration); [EOL]     try { [EOL]         fieldOne.add(System.currentTimeMillis(), 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         long currentTime = System.currentTimeMillis(); [EOL]         long firstComputation = hoursDuration.add(currentTime, 100); [EOL]         long secondComputation = fieldTwo.add(currentTime, 100); [EOL]         assertEquals(firstComputation, secondComputation); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL]     try { [EOL]         fieldOne.add(System.currentTimeMillis(), 1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         long currentTime = System.currentTimeMillis(); [EOL]         long firstComputation = hoursDuration.add(currentTime, 1000L); [EOL]         long secondComputation = fieldTwo.add(currentTime, 1000L); [EOL]         assertTrue(firstComputation == secondComputation); [EOL]         assertEquals(firstComputation, secondComputation); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL]     try { [EOL]         fieldOne.getDifference(100000L, 1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         int firstDifference = hoursDuration.getDifference(100000L, 1000L); [EOL]         int secondDifference = fieldTwo.getDifference(100000L, 1000L); [EOL]         assertEquals(firstDifference, secondDifference); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL]     try { [EOL]         fieldOne.getDifferenceAsLong(100000L, 1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         long firstDifference = hoursDuration.getDifference(100000L, 1000L); [EOL]         long secondDifference = fieldTwo.getDifference(100000L, 1000L); [EOL]         assertEquals(firstDifference, secondDifference); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL] }
public void testDelegatedMethods() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     PreciseDurationField hoursDuration = new PreciseDurationField(DurationFieldType.hours(), 10L); [EOL]     DateTimeField fieldTwo = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, hoursDuration); [EOL]     try { [EOL]         fieldOne.add(System.currentTimeMillis(), 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         long currentTime = System.currentTimeMillis(); [EOL]         long firstComputation = hoursDuration.add(currentTime, 100); [EOL]         long secondComputation = fieldTwo.add(currentTime, 100); [EOL]         assertEquals(firstComputation, secondComputation); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL]     try { [EOL]         fieldOne.add(System.currentTimeMillis(), 1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         long currentTime = System.currentTimeMillis(); [EOL]         long firstComputation = hoursDuration.add(currentTime, 1000L); [EOL]         long secondComputation = fieldTwo.add(currentTime, 1000L); [EOL]         assertTrue(firstComputation == secondComputation); [EOL]         assertEquals(firstComputation, secondComputation); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL]     try { [EOL]         fieldOne.getDifference(100000L, 1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         int firstDifference = hoursDuration.getDifference(100000L, 1000L); [EOL]         int secondDifference = fieldTwo.getDifference(100000L, 1000L); [EOL]         assertEquals(firstDifference, secondDifference); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL]     try { [EOL]         fieldOne.getDifferenceAsLong(100000L, 1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         long firstDifference = hoursDuration.getDifference(100000L, 1000L); [EOL]         long secondDifference = fieldTwo.getDifference(100000L, 1000L); [EOL]         assertEquals(firstDifference, secondDifference); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL] }
public void testDelegatedMethods() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     PreciseDurationField hoursDuration = new PreciseDurationField(DurationFieldType.hours(), 10L); [EOL]     DateTimeField fieldTwo = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, hoursDuration); [EOL]     try { [EOL]         fieldOne.add(System.currentTimeMillis(), 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         long currentTime = System.currentTimeMillis(); [EOL]         long firstComputation = hoursDuration.add(currentTime, 100); [EOL]         long secondComputation = fieldTwo.add(currentTime, 100); [EOL]         assertEquals(firstComputation, secondComputation); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL]     try { [EOL]         fieldOne.add(System.currentTimeMillis(), 1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         long currentTime = System.currentTimeMillis(); [EOL]         long firstComputation = hoursDuration.add(currentTime, 1000L); [EOL]         long secondComputation = fieldTwo.add(currentTime, 1000L); [EOL]         assertTrue(firstComputation == secondComputation); [EOL]         assertEquals(firstComputation, secondComputation); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL]     try { [EOL]         fieldOne.getDifference(100000L, 1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         int firstDifference = hoursDuration.getDifference(100000L, 1000L); [EOL]         int secondDifference = fieldTwo.getDifference(100000L, 1000L); [EOL]         assertEquals(firstDifference, secondDifference); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL]     try { [EOL]         fieldOne.getDifferenceAsLong(100000L, 1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         long firstDifference = hoursDuration.getDifference(100000L, 1000L); [EOL]         long secondDifference = fieldTwo.getDifference(100000L, 1000L); [EOL]         assertEquals(firstDifference, secondDifference); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL] }
public void testDelegatedMethods() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     PreciseDurationField hoursDuration = new PreciseDurationField(DurationFieldType.hours(), 10L); [EOL]     DateTimeField fieldTwo = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, hoursDuration); [EOL]     try { [EOL]         fieldOne.add(System.currentTimeMillis(), 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         long currentTime = System.currentTimeMillis(); [EOL]         long firstComputation = hoursDuration.add(currentTime, 100); [EOL]         long secondComputation = fieldTwo.add(currentTime, 100); [EOL]         assertEquals(firstComputation, secondComputation); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL]     try { [EOL]         fieldOne.add(System.currentTimeMillis(), 1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         long currentTime = System.currentTimeMillis(); [EOL]         long firstComputation = hoursDuration.add(currentTime, 1000L); [EOL]         long secondComputation = fieldTwo.add(currentTime, 1000L); [EOL]         assertTrue(firstComputation == secondComputation); [EOL]         assertEquals(firstComputation, secondComputation); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL]     try { [EOL]         fieldOne.getDifference(100000L, 1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         int firstDifference = hoursDuration.getDifference(100000L, 1000L); [EOL]         int secondDifference = fieldTwo.getDifference(100000L, 1000L); [EOL]         assertEquals(firstDifference, secondDifference); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL]     try { [EOL]         fieldOne.getDifferenceAsLong(100000L, 1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         long firstDifference = hoursDuration.getDifference(100000L, 1000L); [EOL]         long secondDifference = fieldTwo.getDifference(100000L, 1000L); [EOL]         assertEquals(firstDifference, secondDifference); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL] }
public void testDelegatedMethods() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     PreciseDurationField hoursDuration = new PreciseDurationField(DurationFieldType.hours(), 10L); [EOL]     DateTimeField fieldTwo = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, hoursDuration); [EOL]     try { [EOL]         fieldOne.add(System.currentTimeMillis(), 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         long currentTime = System.currentTimeMillis(); [EOL]         long firstComputation = hoursDuration.add(currentTime, 100); [EOL]         long secondComputation = fieldTwo.add(currentTime, 100); [EOL]         assertEquals(firstComputation, secondComputation); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL]     try { [EOL]         fieldOne.add(System.currentTimeMillis(), 1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         long currentTime = System.currentTimeMillis(); [EOL]         long firstComputation = hoursDuration.add(currentTime, 1000L); [EOL]         long secondComputation = fieldTwo.add(currentTime, 1000L); [EOL]         assertTrue(firstComputation == secondComputation); [EOL]         assertEquals(firstComputation, secondComputation); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL]     try { [EOL]         fieldOne.getDifference(100000L, 1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         int firstDifference = hoursDuration.getDifference(100000L, 1000L); [EOL]         int secondDifference = fieldTwo.getDifference(100000L, 1000L); [EOL]         assertEquals(firstDifference, secondDifference); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL]     try { [EOL]         fieldOne.getDifferenceAsLong(100000L, 1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         long firstDifference = hoursDuration.getDifference(100000L, 1000L); [EOL]         long secondDifference = fieldTwo.getDifference(100000L, 1000L); [EOL]         assertEquals(firstDifference, secondDifference); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL] }
public void testSerializedUnsupportedDateTimeField() throws Exception { [EOL]     UnsupportedDateTimeField test = UnsupportedDateTimeField.getInstance(DateTimeFieldType.year(), UnsupportedDurationField.getInstance(DurationFieldType.years())); [EOL]     loadAndCompare(test, "UnsupportedDateTimeField", true); [EOL]     inlineCompare(test, true); [EOL] }
public void test_getRange() { [EOL]     PreciseDateTimeField field = new MockPreciseDateTimeField(); [EOL]     assertEquals(60, field.getRange()); [EOL] }
public void test_getRange() { [EOL]     PreciseDateTimeField field = new MockPreciseDateTimeField(); [EOL]     assertEquals(60, field.getRange()); [EOL] }
public void test_getRange() { [EOL]     PreciseDateTimeField field = new MockPreciseDateTimeField(); [EOL]     assertEquals(60, field.getRange()); [EOL] }
public void test_getAsShortText_long_Locale() { [EOL]     BaseDateTimeField field = new MockPreciseDateTimeField(); [EOL]     assertEquals("29", field.getAsShortText(60L * 29, Locale.ENGLISH)); [EOL]     assertEquals("29", field.getAsShortText(60L * 29, null)); [EOL] }
public void test_getAsShortText_long_Locale() { [EOL]     BaseDateTimeField field = new MockPreciseDateTimeField(); [EOL]     assertEquals("29", field.getAsShortText(60L * 29, Locale.ENGLISH)); [EOL]     assertEquals("29", field.getAsShortText(60L * 29, null)); [EOL] }
public void test_addWrapField_long_int() { [EOL]     BaseDateTimeField field = new MockPreciseDateTimeField(); [EOL]     assertEquals(29 * 60L, field.addWrapField(60L * 29, 0)); [EOL]     assertEquals(59 * 60L, field.addWrapField(60L * 29, 30)); [EOL]     assertEquals(0 * 60L, field.addWrapField(60L * 29, 31)); [EOL] }
public void test_addWrapField_long_int() { [EOL]     BaseDateTimeField field = new MockPreciseDateTimeField(); [EOL]     assertEquals(29 * 60L, field.addWrapField(60L * 29, 0)); [EOL]     assertEquals(59 * 60L, field.addWrapField(60L * 29, 30)); [EOL]     assertEquals(0 * 60L, field.addWrapField(60L * 29, 31)); [EOL] }
public void test_addWrapField_long_int() { [EOL]     BaseDateTimeField field = new MockPreciseDateTimeField(); [EOL]     assertEquals(29 * 60L, field.addWrapField(60L * 29, 0)); [EOL]     assertEquals(59 * 60L, field.addWrapField(60L * 29, 30)); [EOL]     assertEquals(0 * 60L, field.addWrapField(60L * 29, 31)); [EOL] }
public void test_getMaximumValue() { [EOL]     BaseDateTimeField field = new MockPreciseDateTimeField(); [EOL]     assertEquals(59, field.getMaximumValue()); [EOL] }
public void test_getRange() { [EOL]     PreciseDateTimeField field = new MockPreciseDateTimeField(); [EOL]     assertEquals(60, field.getRange()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testConstructor_Object_Chronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     YearMonthDay test = new YearMonthDay(date, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testConstructor_Object_Chronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     YearMonthDay test = new YearMonthDay(date, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testConstructor_Object_Chronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     YearMonthDay test = new YearMonthDay(date, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testPropertyToIntervalMillisOfSecond() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     Interval testInterval = test.millisOfSecond().toInterval(); [EOL]     assertEquals(new DateTime(2004, 6, 9, 13, 23, 43, 53), testInterval.getStart()); [EOL]     assertEquals(new DateTime(2004, 6, 9, 13, 23, 43, 54), testInterval.getEnd()); [EOL] }
public void testPropertyToIntervalMillisOfSecond() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     Interval testInterval = test.millisOfSecond().toInterval(); [EOL]     assertEquals(new DateTime(2004, 6, 9, 13, 23, 43, 53), testInterval.getStart()); [EOL]     assertEquals(new DateTime(2004, 6, 9, 13, 23, 43, 54), testInterval.getEnd()); [EOL] }
public void testPropertyToIntervalMillisOfSecond() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     Interval testInterval = test.millisOfSecond().toInterval(); [EOL]     assertEquals(new DateTime(2004, 6, 9, 13, 23, 43, 53), testInterval.getStart()); [EOL]     assertEquals(new DateTime(2004, 6, 9, 13, 23, 43, 54), testInterval.getEnd()); [EOL] }
public void testPropertyToIntervalMillisOfSecond() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     Interval testInterval = test.millisOfSecond().toInterval(); [EOL]     assertEquals(new DateTime(2004, 6, 9, 13, 23, 43, 53), testInterval.getStart()); [EOL]     assertEquals(new DateTime(2004, 6, 9, 13, 23, 43, 54), testInterval.getEnd()); [EOL] }
public void test_DateTime_roundCeiling_day_NewYork_Spring_postCutover() { [EOL]     DateTime dt = new DateTime(2007, 3, 11, 3, 30, 0, 0, ZONE_NEW_YORK); [EOL]     assertEquals("2007-03-11T03:30:00.000-04:00", dt.toString()); [EOL]     DateTime rounded = dt.dayOfMonth().roundCeilingCopy(); [EOL]     assertEquals("2007-03-12T00:00:00.000-04:00", rounded.toString()); [EOL] }
public void test_DateTime_roundCeiling_day_NewYork_Spring_postCutover() { [EOL]     DateTime dt = new DateTime(2007, 3, 11, 3, 30, 0, 0, ZONE_NEW_YORK); [EOL]     assertEquals("2007-03-11T03:30:00.000-04:00", dt.toString()); [EOL]     DateTime rounded = dt.dayOfMonth().roundCeilingCopy(); [EOL]     assertEquals("2007-03-12T00:00:00.000-04:00", rounded.toString()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyToIntervalMillisOfSecond() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     Interval testInterval = test.millisOfSecond().toInterval(); [EOL]     assertEquals(new DateTime(2004, 6, 9, 13, 23, 43, 53), testInterval.getStart()); [EOL]     assertEquals(new DateTime(2004, 6, 9, 13, 23, 43, 54), testInterval.getEnd()); [EOL] }
public void testPropertyEqualsHashCodeLenient() { [EOL]     LocalDate test1 = new LocalDate(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     LocalDate test2 = new LocalDate(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL] }
public void test_DateTime_parse_Gaza() { [EOL]     try { [EOL]         new DateTime("2007-04-01T00:00", MOCK_GAZA); [EOL]         fail(); [EOL]     } catch (IllegalInstantException ex) { [EOL]         assertEquals(true, ex.getMessage().indexOf("Illegal instant due to time zone offset transition") >= 0); [EOL]     } [EOL] }
public void test_DateTime_parse_Gaza() { [EOL]     try { [EOL]         new DateTime("2007-04-01T00:00", MOCK_GAZA); [EOL]         fail(); [EOL]     } catch (IllegalInstantException ex) { [EOL]         assertEquals(true, ex.getMessage().indexOf("Illegal instant due to time zone offset transition") >= 0); [EOL]     } [EOL] }
public void test_DateTime_parse_Gaza() { [EOL]     try { [EOL]         new DateTime("2007-04-01T00:00", MOCK_GAZA); [EOL]         fail(); [EOL]     } catch (IllegalInstantException ex) { [EOL]         assertEquals(true, ex.getMessage().indexOf("Illegal instant due to time zone offset transition") >= 0); [EOL]     } [EOL] }
public void testParseDateTime_simple_precedence() { [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 6, 9, 11, 20, 30, 0, LONDON); [EOL]     assertEquals(expect, f.parseDateTime("Wed 2004-06-09T10:20:30Z")); [EOL]     expect = new DateTime(2004, 6, 7, 11, 20, 30, 0, LONDON); [EOL]     assertEquals(expect, f.parseDateTime("Mon 2004-06-09T10:20:30Z")); [EOL] }
public void testParseDateTime_simple_precedence() { [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 6, 9, 11, 20, 30, 0, LONDON); [EOL]     assertEquals(expect, f.parseDateTime("Wed 2004-06-09T10:20:30Z")); [EOL]     expect = new DateTime(2004, 6, 7, 11, 20, 30, 0, LONDON); [EOL]     assertEquals(expect, f.parseDateTime("Mon 2004-06-09T10:20:30Z")); [EOL] }
public void testParseDateTime_simple_precedence() { [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 6, 9, 11, 20, 30, 0, LONDON); [EOL]     assertEquals(expect, f.parseDateTime("Wed 2004-06-09T10:20:30Z")); [EOL]     expect = new DateTime(2004, 6, 7, 11, 20, 30, 0, LONDON); [EOL]     assertEquals(expect, f.parseDateTime("Mon 2004-06-09T10:20:30Z")); [EOL] }
public void testParseDateTime_simple_precedence() { [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 6, 9, 11, 20, 30, 0, LONDON); [EOL]     assertEquals(expect, f.parseDateTime("Wed 2004-06-09T10:20:30Z")); [EOL]     expect = new DateTime(2004, 6, 7, 11, 20, 30, 0, LONDON); [EOL]     assertEquals(expect, f.parseDateTime("Mon 2004-06-09T10:20:30Z")); [EOL] }
public void testSetText() { [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().year().set(0, null, java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("year", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("null", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().year().set(0, "nineteen seventy", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("year", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("nineteen seventy", e.getIllegalStringValue()); [EOL]         assertEquals("nineteen seventy", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().era().set(0, "long ago", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.era(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("era", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("long ago", e.getIllegalStringValue()); [EOL]         assertEquals("long ago", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().monthOfYear().set(0, "spring", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("monthOfYear", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("spring", e.getIllegalStringValue()); [EOL]         assertEquals("spring", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().dayOfWeek().set(0, "yesterday", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.dayOfWeek(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("dayOfWeek", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("yesterday", e.getIllegalStringValue()); [EOL]         assertEquals("yesterday", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().halfdayOfDay().set(0, "morning", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.halfdayOfDay(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("halfdayOfDay", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("morning", e.getIllegalStringValue()); [EOL]         assertEquals("morning", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL] }
public void testSetText() { [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().year().set(0, null, java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("year", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("null", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().year().set(0, "nineteen seventy", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("year", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("nineteen seventy", e.getIllegalStringValue()); [EOL]         assertEquals("nineteen seventy", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().era().set(0, "long ago", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.era(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("era", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("long ago", e.getIllegalStringValue()); [EOL]         assertEquals("long ago", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().monthOfYear().set(0, "spring", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("monthOfYear", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("spring", e.getIllegalStringValue()); [EOL]         assertEquals("spring", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().dayOfWeek().set(0, "yesterday", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.dayOfWeek(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("dayOfWeek", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("yesterday", e.getIllegalStringValue()); [EOL]         assertEquals("yesterday", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().halfdayOfDay().set(0, "morning", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.halfdayOfDay(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("halfdayOfDay", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("morning", e.getIllegalStringValue()); [EOL]         assertEquals("morning", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL] }
public void testSetText() { [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().year().set(0, null, java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("year", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("null", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().year().set(0, "nineteen seventy", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("year", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("nineteen seventy", e.getIllegalStringValue()); [EOL]         assertEquals("nineteen seventy", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().era().set(0, "long ago", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.era(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("era", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("long ago", e.getIllegalStringValue()); [EOL]         assertEquals("long ago", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().monthOfYear().set(0, "spring", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("monthOfYear", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("spring", e.getIllegalStringValue()); [EOL]         assertEquals("spring", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().dayOfWeek().set(0, "yesterday", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.dayOfWeek(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("dayOfWeek", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("yesterday", e.getIllegalStringValue()); [EOL]         assertEquals("yesterday", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().halfdayOfDay().set(0, "morning", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.halfdayOfDay(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("halfdayOfDay", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("morning", e.getIllegalStringValue()); [EOL]         assertEquals("morning", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL] }
public void testSetText() { [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().year().set(0, null, java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("year", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("null", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().year().set(0, "nineteen seventy", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("year", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("nineteen seventy", e.getIllegalStringValue()); [EOL]         assertEquals("nineteen seventy", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().era().set(0, "long ago", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.era(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("era", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("long ago", e.getIllegalStringValue()); [EOL]         assertEquals("long ago", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().monthOfYear().set(0, "spring", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("monthOfYear", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("spring", e.getIllegalStringValue()); [EOL]         assertEquals("spring", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().dayOfWeek().set(0, "yesterday", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.dayOfWeek(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("dayOfWeek", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("yesterday", e.getIllegalStringValue()); [EOL]         assertEquals("yesterday", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().halfdayOfDay().set(0, "morning", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.halfdayOfDay(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("halfdayOfDay", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("morning", e.getIllegalStringValue()); [EOL]         assertEquals("morning", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL] }
public void testIsSupported_DateTimeFieldType() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.minuteOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.secondOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.millisOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.halfdayOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(false, test.isSupported(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(false, test.isSupported((DateTimeFieldType) null)); [EOL]     DateTimeFieldType d = new DateTimeFieldType("hours") { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         public DurationFieldType getDurationType() { [EOL]             return DurationFieldType.hours(); [EOL]         } [EOL]  [EOL]         public DurationFieldType getRangeDurationType() { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public DateTimeField getField(Chronology chronology) { [EOL]             return chronology.hourOfDay(); [EOL]         } [EOL]     }; [EOL]     assertEquals(false, test.isSupported(d)); [EOL]     d = new DateTimeFieldType("hourOfYear") { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         public DurationFieldType getDurationType() { [EOL]             return DurationFieldType.hours(); [EOL]         } [EOL]  [EOL]         public DurationFieldType getRangeDurationType() { [EOL]             return DurationFieldType.years(); [EOL]         } [EOL]  [EOL]         public DateTimeField getField(Chronology chronology) { [EOL]             return chronology.hourOfDay(); [EOL]         } [EOL]     }; [EOL]     assertEquals(false, test.isSupported(d)); [EOL] }
public void testIsSupported_DateTimeFieldType() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.minuteOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.secondOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.millisOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.halfdayOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(false, test.isSupported(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(false, test.isSupported((DateTimeFieldType) null)); [EOL]     DateTimeFieldType d = new DateTimeFieldType("hours") { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         public DurationFieldType getDurationType() { [EOL]             return DurationFieldType.hours(); [EOL]         } [EOL]  [EOL]         public DurationFieldType getRangeDurationType() { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public DateTimeField getField(Chronology chronology) { [EOL]             return chronology.hourOfDay(); [EOL]         } [EOL]     }; [EOL]     assertEquals(false, test.isSupported(d)); [EOL]     d = new DateTimeFieldType("hourOfYear") { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         public DurationFieldType getDurationType() { [EOL]             return DurationFieldType.hours(); [EOL]         } [EOL]  [EOL]         public DurationFieldType getRangeDurationType() { [EOL]             return DurationFieldType.years(); [EOL]         } [EOL]  [EOL]         public DateTimeField getField(Chronology chronology) { [EOL]             return chronology.hourOfDay(); [EOL]         } [EOL]     }; [EOL]     assertEquals(false, test.isSupported(d)); [EOL] }
public void testIsSupported_DateTimeFieldType() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.minuteOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.secondOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.millisOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.halfdayOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(false, test.isSupported(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(false, test.isSupported((DateTimeFieldType) null)); [EOL]     DateTimeFieldType d = new DateTimeFieldType("hours") { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         public DurationFieldType getDurationType() { [EOL]             return DurationFieldType.hours(); [EOL]         } [EOL]  [EOL]         public DurationFieldType getRangeDurationType() { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public DateTimeField getField(Chronology chronology) { [EOL]             return chronology.hourOfDay(); [EOL]         } [EOL]     }; [EOL]     assertEquals(false, test.isSupported(d)); [EOL]     d = new DateTimeFieldType("hourOfYear") { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         public DurationFieldType getDurationType() { [EOL]             return DurationFieldType.hours(); [EOL]         } [EOL]  [EOL]         public DurationFieldType getRangeDurationType() { [EOL]             return DurationFieldType.years(); [EOL]         } [EOL]  [EOL]         public DateTimeField getField(Chronology chronology) { [EOL]             return chronology.hourOfDay(); [EOL]         } [EOL]     }; [EOL]     assertEquals(false, test.isSupported(d)); [EOL] }
public void testIsSupported_DateTimeFieldType() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.minuteOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.secondOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.millisOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.halfdayOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(false, test.isSupported(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(false, test.isSupported((DateTimeFieldType) null)); [EOL]     DateTimeFieldType d = new DateTimeFieldType("hours") { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         public DurationFieldType getDurationType() { [EOL]             return DurationFieldType.hours(); [EOL]         } [EOL]  [EOL]         public DurationFieldType getRangeDurationType() { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public DateTimeField getField(Chronology chronology) { [EOL]             return chronology.hourOfDay(); [EOL]         } [EOL]     }; [EOL]     assertEquals(false, test.isSupported(d)); [EOL]     d = new DateTimeFieldType("hourOfYear") { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         public DurationFieldType getDurationType() { [EOL]             return DurationFieldType.hours(); [EOL]         } [EOL]  [EOL]         public DurationFieldType getRangeDurationType() { [EOL]             return DurationFieldType.years(); [EOL]         } [EOL]  [EOL]         public DateTimeField getField(Chronology chronology) { [EOL]             return chronology.hourOfDay(); [EOL]         } [EOL]     }; [EOL]     assertEquals(false, test.isSupported(d)); [EOL] }
public void testIsSupported_DateTimeFieldType() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.minuteOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.secondOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.millisOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.halfdayOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(false, test.isSupported(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(false, test.isSupported((DateTimeFieldType) null)); [EOL]     DateTimeFieldType d = new DateTimeFieldType("hours") { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         public DurationFieldType getDurationType() { [EOL]             return DurationFieldType.hours(); [EOL]         } [EOL]  [EOL]         public DurationFieldType getRangeDurationType() { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public DateTimeField getField(Chronology chronology) { [EOL]             return chronology.hourOfDay(); [EOL]         } [EOL]     }; [EOL]     assertEquals(false, test.isSupported(d)); [EOL]     d = new DateTimeFieldType("hourOfYear") { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         public DurationFieldType getDurationType() { [EOL]             return DurationFieldType.hours(); [EOL]         } [EOL]  [EOL]         public DurationFieldType getRangeDurationType() { [EOL]             return DurationFieldType.years(); [EOL]         } [EOL]  [EOL]         public DateTimeField getField(Chronology chronology) { [EOL]             return chronology.hourOfDay(); [EOL]         } [EOL]     }; [EOL]     assertEquals(false, test.isSupported(d)); [EOL] }
public void testIsSupported_DateTimeFieldType() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.minuteOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.secondOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.millisOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.halfdayOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(false, test.isSupported(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(false, test.isSupported((DateTimeFieldType) null)); [EOL]     DateTimeFieldType d = new DateTimeFieldType("hours") { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         public DurationFieldType getDurationType() { [EOL]             return DurationFieldType.hours(); [EOL]         } [EOL]  [EOL]         public DurationFieldType getRangeDurationType() { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public DateTimeField getField(Chronology chronology) { [EOL]             return chronology.hourOfDay(); [EOL]         } [EOL]     }; [EOL]     assertEquals(false, test.isSupported(d)); [EOL]     d = new DateTimeFieldType("hourOfYear") { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         public DurationFieldType getDurationType() { [EOL]             return DurationFieldType.hours(); [EOL]         } [EOL]  [EOL]         public DurationFieldType getRangeDurationType() { [EOL]             return DurationFieldType.years(); [EOL]         } [EOL]  [EOL]         public DateTimeField getField(Chronology chronology) { [EOL]             return chronology.hourOfDay(); [EOL]         } [EOL]     }; [EOL]     assertEquals(false, test.isSupported(d)); [EOL] }
public void testIsSupported_DateTimeFieldType() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.minuteOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.secondOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.millisOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.halfdayOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(false, test.isSupported(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(false, test.isSupported((DateTimeFieldType) null)); [EOL]     DateTimeFieldType d = new DateTimeFieldType("hours") { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         public DurationFieldType getDurationType() { [EOL]             return DurationFieldType.hours(); [EOL]         } [EOL]  [EOL]         public DurationFieldType getRangeDurationType() { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public DateTimeField getField(Chronology chronology) { [EOL]             return chronology.hourOfDay(); [EOL]         } [EOL]     }; [EOL]     assertEquals(false, test.isSupported(d)); [EOL]     d = new DateTimeFieldType("hourOfYear") { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         public DurationFieldType getDurationType() { [EOL]             return DurationFieldType.hours(); [EOL]         } [EOL]  [EOL]         public DurationFieldType getRangeDurationType() { [EOL]             return DurationFieldType.years(); [EOL]         } [EOL]  [EOL]         public DateTimeField getField(Chronology chronology) { [EOL]             return chronology.hourOfDay(); [EOL]         } [EOL]     }; [EOL]     assertEquals(false, test.isSupported(d)); [EOL] }
public void testIsSupported_DateTimeFieldType() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.minuteOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.secondOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.millisOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.halfdayOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(false, test.isSupported(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(false, test.isSupported((DateTimeFieldType) null)); [EOL]     DateTimeFieldType d = new DateTimeFieldType("hours") { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         public DurationFieldType getDurationType() { [EOL]             return DurationFieldType.hours(); [EOL]         } [EOL]  [EOL]         public DurationFieldType getRangeDurationType() { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public DateTimeField getField(Chronology chronology) { [EOL]             return chronology.hourOfDay(); [EOL]         } [EOL]     }; [EOL]     assertEquals(false, test.isSupported(d)); [EOL]     d = new DateTimeFieldType("hourOfYear") { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         public DurationFieldType getDurationType() { [EOL]             return DurationFieldType.hours(); [EOL]         } [EOL]  [EOL]         public DurationFieldType getRangeDurationType() { [EOL]             return DurationFieldType.years(); [EOL]         } [EOL]  [EOL]         public DateTimeField getField(Chronology chronology) { [EOL]             return chronology.hourOfDay(); [EOL]         } [EOL]     }; [EOL]     assertEquals(false, test.isSupported(d)); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testEqualsHashCode() { [EOL]     LocalTime test1 = new LocalTime(10, 20, 30, 40, COPTIC_PARIS); [EOL]     LocalTime test2 = new LocalTime(10, 20, 30, 40, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     LocalTime test3 = new LocalTime(15, 20, 30, 40); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new TimeOfDay(10, 20, 30, 40, COPTIC_UTC))); [EOL]     assertEquals(true, test1.hashCode() == new TimeOfDay(10, 20, 30, 40, COPTIC_UTC).hashCode()); [EOL]     assertEquals(true, test1.equals(new MockInstant())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testEqualsHashCode() { [EOL]     LocalTime test1 = new LocalTime(10, 20, 30, 40, COPTIC_PARIS); [EOL]     LocalTime test2 = new LocalTime(10, 20, 30, 40, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     LocalTime test3 = new LocalTime(15, 20, 30, 40); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new TimeOfDay(10, 20, 30, 40, COPTIC_UTC))); [EOL]     assertEquals(true, test1.hashCode() == new TimeOfDay(10, 20, 30, 40, COPTIC_UTC).hashCode()); [EOL]     assertEquals(true, test1.equals(new MockInstant())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testEqualsHashCode() { [EOL]     LocalTime test1 = new LocalTime(10, 20, 30, 40, COPTIC_PARIS); [EOL]     LocalTime test2 = new LocalTime(10, 20, 30, 40, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     LocalTime test3 = new LocalTime(15, 20, 30, 40); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new TimeOfDay(10, 20, 30, 40, COPTIC_UTC))); [EOL]     assertEquals(true, test1.hashCode() == new TimeOfDay(10, 20, 30, 40, COPTIC_UTC).hashCode()); [EOL]     assertEquals(true, test1.equals(new MockInstant())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testEqualsHashCode() { [EOL]     LocalTime test1 = new LocalTime(10, 20, 30, 40, COPTIC_PARIS); [EOL]     LocalTime test2 = new LocalTime(10, 20, 30, 40, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     LocalTime test3 = new LocalTime(15, 20, 30, 40); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new TimeOfDay(10, 20, 30, 40, COPTIC_UTC))); [EOL]     assertEquals(true, test1.hashCode() == new TimeOfDay(10, 20, 30, 40, COPTIC_UTC).hashCode()); [EOL]     assertEquals(true, test1.equals(new MockInstant())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testEqualsHashCode() { [EOL]     LocalTime test1 = new LocalTime(10, 20, 30, 40, COPTIC_PARIS); [EOL]     LocalTime test2 = new LocalTime(10, 20, 30, 40, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     LocalTime test3 = new LocalTime(15, 20, 30, 40); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new TimeOfDay(10, 20, 30, 40, COPTIC_UTC))); [EOL]     assertEquals(true, test1.hashCode() == new TimeOfDay(10, 20, 30, 40, COPTIC_UTC).hashCode()); [EOL]     assertEquals(true, test1.equals(new MockInstant())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testMinusMillis_int() { [EOL]     LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON); [EOL]     LocalTime result = test.minusMillis(1); [EOL]     LocalTime expected = new LocalTime(1, 2, 3, 3, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusMillis(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusMillis_int() { [EOL]     LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON); [EOL]     LocalTime result = test.minusMillis(1); [EOL]     LocalTime expected = new LocalTime(1, 2, 3, 3, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusMillis(0); [EOL]     assertSame(test, result); [EOL] }
public void testPropertyGetHour() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     assertSame(test.getChronology().hourOfDay(), test.hourOfDay().getField()); [EOL]     assertEquals("hourOfDay", test.hourOfDay().getName()); [EOL]     assertEquals("Property[hourOfDay]", test.hourOfDay().toString()); [EOL]     assertSame(test, test.hourOfDay().getLocalTime()); [EOL]     assertEquals(10, test.hourOfDay().get()); [EOL]     assertEquals("10", test.hourOfDay().getAsString()); [EOL]     assertEquals("10", test.hourOfDay().getAsText()); [EOL]     assertEquals("10", test.hourOfDay().getAsText(Locale.FRENCH)); [EOL]     assertEquals("10", test.hourOfDay().getAsShortText()); [EOL]     assertEquals("10", test.hourOfDay().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().hours(), test.hourOfDay().getDurationField()); [EOL]     assertEquals(test.getChronology().days(), test.hourOfDay().getRangeDurationField()); [EOL]     assertEquals(2, test.hourOfDay().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.hourOfDay().getMaximumShortTextLength(null)); [EOL] }
public void testPropertySetTextSecond() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     LocalTime copy = test.secondOfMinute().setCopy("12"); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 20, 12, 40); [EOL] }
public void testToDateTimeToday_nullZone() { [EOL]     LocalTime base = new LocalTime(10, 20, 30, 40, COPTIC_PARIS); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     DateTime test = base.toDateTimeToday((DateTimeZone) null); [EOL]     check(base, 10, 20, 30, 40); [EOL]     DateTime expected = new DateTime(dt.getMillis(), COPTIC_LONDON); [EOL]     expected = expected.hourOfDay().setCopy(10); [EOL]     expected = expected.minuteOfHour().setCopy(20); [EOL]     expected = expected.secondOfMinute().setCopy(30); [EOL]     expected = expected.millisOfSecond().setCopy(40); [EOL]     assertEquals(expected, test); [EOL] }
public void testToDateTimeToday_nullZone() { [EOL]     LocalTime base = new LocalTime(10, 20, 30, 40, COPTIC_PARIS); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     DateTime test = base.toDateTimeToday((DateTimeZone) null); [EOL]     check(base, 10, 20, 30, 40); [EOL]     DateTime expected = new DateTime(dt.getMillis(), COPTIC_LONDON); [EOL]     expected = expected.hourOfDay().setCopy(10); [EOL]     expected = expected.minuteOfHour().setCopy(20); [EOL]     expected = expected.secondOfMinute().setCopy(30); [EOL]     expected = expected.millisOfSecond().setCopy(40); [EOL]     assertEquals(expected, test); [EOL] }
public void testPropertyPlusNoWrapMinute() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     LocalTime copy = test.minuteOfHour().addNoWrapToCopy(9); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 29, 30, 40); [EOL]     copy = test.minuteOfHour().addNoWrapToCopy(39); [EOL]     check(copy, 10, 59, 30, 40); [EOL]     copy = test.minuteOfHour().addNoWrapToCopy(40); [EOL]     check(copy, 11, 0, 30, 40); [EOL]     copy = test.minuteOfHour().addNoWrapToCopy(1 * 60 + 45); [EOL]     check(copy, 12, 5, 30, 40); [EOL]     copy = test.minuteOfHour().addNoWrapToCopy(13 * 60 + 39); [EOL]     check(copy, 23, 59, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().addNoWrapToCopy(13 * 60 + 40); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 10, 20, 30, 40); [EOL]     copy = test.minuteOfHour().addNoWrapToCopy(-9); [EOL]     check(copy, 10, 11, 30, 40); [EOL]     copy = test.minuteOfHour().addNoWrapToCopy(-19); [EOL]     check(copy, 10, 1, 30, 40); [EOL]     copy = test.minuteOfHour().addNoWrapToCopy(-20); [EOL]     check(copy, 10, 0, 30, 40); [EOL]     copy = test.minuteOfHour().addNoWrapToCopy(-21); [EOL]     check(copy, 9, 59, 30, 40); [EOL]     copy = test.minuteOfHour().addNoWrapToCopy(-(10 * 60 + 20)); [EOL]     check(copy, 0, 0, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().addNoWrapToCopy(-(10 * 60 + 21)); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 10, 20, 30, 40); [EOL] }
public void testPropertyPlusNoWrapMinute() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     LocalTime copy = test.minuteOfHour().addNoWrapToCopy(9); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 29, 30, 40); [EOL]     copy = test.minuteOfHour().addNoWrapToCopy(39); [EOL]     check(copy, 10, 59, 30, 40); [EOL]     copy = test.minuteOfHour().addNoWrapToCopy(40); [EOL]     check(copy, 11, 0, 30, 40); [EOL]     copy = test.minuteOfHour().addNoWrapToCopy(1 * 60 + 45); [EOL]     check(copy, 12, 5, 30, 40); [EOL]     copy = test.minuteOfHour().addNoWrapToCopy(13 * 60 + 39); [EOL]     check(copy, 23, 59, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().addNoWrapToCopy(13 * 60 + 40); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 10, 20, 30, 40); [EOL]     copy = test.minuteOfHour().addNoWrapToCopy(-9); [EOL]     check(copy, 10, 11, 30, 40); [EOL]     copy = test.minuteOfHour().addNoWrapToCopy(-19); [EOL]     check(copy, 10, 1, 30, 40); [EOL]     copy = test.minuteOfHour().addNoWrapToCopy(-20); [EOL]     check(copy, 10, 0, 30, 40); [EOL]     copy = test.minuteOfHour().addNoWrapToCopy(-21); [EOL]     check(copy, 9, 59, 30, 40); [EOL]     copy = test.minuteOfHour().addNoWrapToCopy(-(10 * 60 + 20)); [EOL]     check(copy, 0, 0, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().addNoWrapToCopy(-(10 * 60 + 21)); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 10, 20, 30, 40); [EOL] }
public void testPropertySetSecond() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     LocalTime copy = test.secondOfMinute().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 20, 12, 40); [EOL]     try { [EOL]         test.secondOfMinute().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.secondOfMinute().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetSecond() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     LocalTime copy = test.secondOfMinute().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 20, 12, 40); [EOL]     try { [EOL]         test.secondOfMinute().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.secondOfMinute().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetTextSecond() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     LocalTime copy = test.secondOfMinute().setCopy("12"); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 20, 12, 40); [EOL] }
public void testPropertySetTextSecond() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     LocalTime copy = test.secondOfMinute().setCopy("12"); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 20, 12, 40); [EOL] }
public void testPropertySetTextSecond() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     LocalTime copy = test.secondOfMinute().setCopy("12"); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 20, 12, 40); [EOL] }
public void testPropertySetTextSecond() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     LocalTime copy = test.secondOfMinute().setCopy("12"); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 20, 12, 40); [EOL] }
public void testPropertySetTextSecond() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     LocalTime copy = test.secondOfMinute().setCopy("12"); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 20, 12, 40); [EOL] }
public void testWithFieldAdded_DurationFieldType_int_8() { [EOL]     LocalTime test = new LocalTime(0, 0, 0, 0); [EOL]     LocalTime result = test.withFieldAdded(DurationFieldType.millis(), -1); [EOL]     assertEquals(new LocalTime(23, 59, 59, 999), result); [EOL]     test = new LocalTime(0, 0, 0, 0); [EOL]     result = test.withFieldAdded(DurationFieldType.seconds(), -1); [EOL]     assertEquals(new LocalTime(23, 59, 59, 0), result); [EOL]     test = new LocalTime(0, 0, 0, 0); [EOL]     result = test.withFieldAdded(DurationFieldType.minutes(), -1); [EOL]     assertEquals(new LocalTime(23, 59, 0, 0), result); [EOL]     test = new LocalTime(0, 0, 0, 0); [EOL]     result = test.withFieldAdded(DurationFieldType.hours(), -1); [EOL]     assertEquals(new LocalTime(23, 0, 0, 0), result); [EOL] }
public void testWithFieldAdded_DurationFieldType_int_8() { [EOL]     LocalTime test = new LocalTime(0, 0, 0, 0); [EOL]     LocalTime result = test.withFieldAdded(DurationFieldType.millis(), -1); [EOL]     assertEquals(new LocalTime(23, 59, 59, 999), result); [EOL]     test = new LocalTime(0, 0, 0, 0); [EOL]     result = test.withFieldAdded(DurationFieldType.seconds(), -1); [EOL]     assertEquals(new LocalTime(23, 59, 59, 0), result); [EOL]     test = new LocalTime(0, 0, 0, 0); [EOL]     result = test.withFieldAdded(DurationFieldType.minutes(), -1); [EOL]     assertEquals(new LocalTime(23, 59, 0, 0), result); [EOL]     test = new LocalTime(0, 0, 0, 0); [EOL]     result = test.withFieldAdded(DurationFieldType.hours(), -1); [EOL]     assertEquals(new LocalTime(23, 0, 0, 0), result); [EOL] }
public void testWithFieldAdded_DurationFieldType_int_8() { [EOL]     LocalTime test = new LocalTime(0, 0, 0, 0); [EOL]     LocalTime result = test.withFieldAdded(DurationFieldType.millis(), -1); [EOL]     assertEquals(new LocalTime(23, 59, 59, 999), result); [EOL]     test = new LocalTime(0, 0, 0, 0); [EOL]     result = test.withFieldAdded(DurationFieldType.seconds(), -1); [EOL]     assertEquals(new LocalTime(23, 59, 59, 0), result); [EOL]     test = new LocalTime(0, 0, 0, 0); [EOL]     result = test.withFieldAdded(DurationFieldType.minutes(), -1); [EOL]     assertEquals(new LocalTime(23, 59, 0, 0), result); [EOL]     test = new LocalTime(0, 0, 0, 0); [EOL]     result = test.withFieldAdded(DurationFieldType.hours(), -1); [EOL]     assertEquals(new LocalTime(23, 0, 0, 0), result); [EOL] }
public void testWithFieldAdded_DurationFieldType_int_8() { [EOL]     LocalTime test = new LocalTime(0, 0, 0, 0); [EOL]     LocalTime result = test.withFieldAdded(DurationFieldType.millis(), -1); [EOL]     assertEquals(new LocalTime(23, 59, 59, 999), result); [EOL]     test = new LocalTime(0, 0, 0, 0); [EOL]     result = test.withFieldAdded(DurationFieldType.seconds(), -1); [EOL]     assertEquals(new LocalTime(23, 59, 59, 0), result); [EOL]     test = new LocalTime(0, 0, 0, 0); [EOL]     result = test.withFieldAdded(DurationFieldType.minutes(), -1); [EOL]     assertEquals(new LocalTime(23, 59, 0, 0), result); [EOL]     test = new LocalTime(0, 0, 0, 0); [EOL]     result = test.withFieldAdded(DurationFieldType.hours(), -1); [EOL]     assertEquals(new LocalTime(23, 0, 0, 0), result); [EOL] }
public void testWithFieldAdded_DurationFieldType_int_8() { [EOL]     LocalTime test = new LocalTime(0, 0, 0, 0); [EOL]     LocalTime result = test.withFieldAdded(DurationFieldType.millis(), -1); [EOL]     assertEquals(new LocalTime(23, 59, 59, 999), result); [EOL]     test = new LocalTime(0, 0, 0, 0); [EOL]     result = test.withFieldAdded(DurationFieldType.seconds(), -1); [EOL]     assertEquals(new LocalTime(23, 59, 59, 0), result); [EOL]     test = new LocalTime(0, 0, 0, 0); [EOL]     result = test.withFieldAdded(DurationFieldType.minutes(), -1); [EOL]     assertEquals(new LocalTime(23, 59, 0, 0), result); [EOL]     test = new LocalTime(0, 0, 0, 0); [EOL]     result = test.withFieldAdded(DurationFieldType.hours(), -1); [EOL]     assertEquals(new LocalTime(23, 0, 0, 0), result); [EOL] }
public void test_eras() throws Exception { [EOL]     assertEquals(DurationFieldType.eras(), DurationFieldType.eras()); [EOL]     assertEquals("eras", DurationFieldType.eras().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().eras(), DurationFieldType.eras().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().eras().isSupported(), DurationFieldType.eras().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.eras()); [EOL] }
public void test_eras() throws Exception { [EOL]     assertEquals(DurationFieldType.eras(), DurationFieldType.eras()); [EOL]     assertEquals("eras", DurationFieldType.eras().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().eras(), DurationFieldType.eras().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().eras().isSupported(), DurationFieldType.eras().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.eras()); [EOL] }
public void test_eras() throws Exception { [EOL]     assertEquals(DurationFieldType.eras(), DurationFieldType.eras()); [EOL]     assertEquals("eras", DurationFieldType.eras().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().eras(), DurationFieldType.eras().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().eras().isSupported(), DurationFieldType.eras().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.eras()); [EOL] }
public void test_eras() throws Exception { [EOL]     assertEquals(DurationFieldType.eras(), DurationFieldType.eras()); [EOL]     assertEquals("eras", DurationFieldType.eras().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().eras(), DurationFieldType.eras().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().eras().isSupported(), DurationFieldType.eras().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.eras()); [EOL] }
public void test_eras() throws Exception { [EOL]     assertEquals(DurationFieldType.eras(), DurationFieldType.eras()); [EOL]     assertEquals("eras", DurationFieldType.eras().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().eras(), DurationFieldType.eras().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().eras().isSupported(), DurationFieldType.eras().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.eras()); [EOL] }
public void test_eras() throws Exception { [EOL]     assertEquals(DurationFieldType.eras(), DurationFieldType.eras()); [EOL]     assertEquals("eras", DurationFieldType.eras().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().eras(), DurationFieldType.eras().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().eras().isSupported(), DurationFieldType.eras().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.eras()); [EOL] }
public void test_eras() throws Exception { [EOL]     assertEquals(DurationFieldType.eras(), DurationFieldType.eras()); [EOL]     assertEquals("eras", DurationFieldType.eras().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().eras(), DurationFieldType.eras().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().eras().isSupported(), DurationFieldType.eras().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.eras()); [EOL] }
public void test_eras() throws Exception { [EOL]     assertEquals(DurationFieldType.eras(), DurationFieldType.eras()); [EOL]     assertEquals("eras", DurationFieldType.eras().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().eras(), DurationFieldType.eras().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().eras().isSupported(), DurationFieldType.eras().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.eras()); [EOL] }
public void test_eras() throws Exception { [EOL]     assertEquals(DurationFieldType.eras(), DurationFieldType.eras()); [EOL]     assertEquals("eras", DurationFieldType.eras().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().eras(), DurationFieldType.eras().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().eras().isSupported(), DurationFieldType.eras().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.eras()); [EOL] }
public void test_eras() throws Exception { [EOL]     assertEquals(DurationFieldType.eras(), DurationFieldType.eras()); [EOL]     assertEquals("eras", DurationFieldType.eras().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().eras(), DurationFieldType.eras().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().eras().isSupported(), DurationFieldType.eras().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.eras()); [EOL] }
public void test_eras() throws Exception { [EOL]     assertEquals(DurationFieldType.eras(), DurationFieldType.eras()); [EOL]     assertEquals("eras", DurationFieldType.eras().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().eras(), DurationFieldType.eras().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().eras().isSupported(), DurationFieldType.eras().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.eras()); [EOL] }
public void test_eras() throws Exception { [EOL]     assertEquals(DurationFieldType.eras(), DurationFieldType.eras()); [EOL]     assertEquals("eras", DurationFieldType.eras().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().eras(), DurationFieldType.eras().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().eras().isSupported(), DurationFieldType.eras().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.eras()); [EOL] }
public void test_eras() throws Exception { [EOL]     assertEquals(DurationFieldType.eras(), DurationFieldType.eras()); [EOL]     assertEquals("eras", DurationFieldType.eras().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().eras(), DurationFieldType.eras().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().eras().isSupported(), DurationFieldType.eras().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.eras()); [EOL] }
public void testSerialization() throws Exception { [EOL]     LocalDate test = new LocalDate(1972, 6, 9, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     LocalDate result = (LocalDate) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testSerialization() throws Exception { [EOL]     LocalDate test = new LocalDate(1972, 6, 9, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     LocalDate result = (LocalDate) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testSerialization() throws Exception { [EOL]     LocalDate test = new LocalDate(1972, 6, 9, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     LocalDate result = (LocalDate) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testDelegatedMethods() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     PreciseDurationField hoursDuration = new PreciseDurationField(DurationFieldType.hours(), 10L); [EOL]     DateTimeField fieldTwo = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, hoursDuration); [EOL]     try { [EOL]         fieldOne.add(System.currentTimeMillis(), 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         long currentTime = System.currentTimeMillis(); [EOL]         long firstComputation = hoursDuration.add(currentTime, 100); [EOL]         long secondComputation = fieldTwo.add(currentTime, 100); [EOL]         assertEquals(firstComputation, secondComputation); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL]     try { [EOL]         fieldOne.add(System.currentTimeMillis(), 1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         long currentTime = System.currentTimeMillis(); [EOL]         long firstComputation = hoursDuration.add(currentTime, 1000L); [EOL]         long secondComputation = fieldTwo.add(currentTime, 1000L); [EOL]         assertTrue(firstComputation == secondComputation); [EOL]         assertEquals(firstComputation, secondComputation); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL]     try { [EOL]         fieldOne.getDifference(100000L, 1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         int firstDifference = hoursDuration.getDifference(100000L, 1000L); [EOL]         int secondDifference = fieldTwo.getDifference(100000L, 1000L); [EOL]         assertEquals(firstDifference, secondDifference); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL]     try { [EOL]         fieldOne.getDifferenceAsLong(100000L, 1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         long firstDifference = hoursDuration.getDifference(100000L, 1000L); [EOL]         long secondDifference = fieldTwo.getDifference(100000L, 1000L); [EOL]         assertEquals(firstDifference, secondDifference); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL] }
public void testDelegatedMethods() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     PreciseDurationField hoursDuration = new PreciseDurationField(DurationFieldType.hours(), 10L); [EOL]     DateTimeField fieldTwo = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, hoursDuration); [EOL]     try { [EOL]         fieldOne.add(System.currentTimeMillis(), 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         long currentTime = System.currentTimeMillis(); [EOL]         long firstComputation = hoursDuration.add(currentTime, 100); [EOL]         long secondComputation = fieldTwo.add(currentTime, 100); [EOL]         assertEquals(firstComputation, secondComputation); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL]     try { [EOL]         fieldOne.add(System.currentTimeMillis(), 1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         long currentTime = System.currentTimeMillis(); [EOL]         long firstComputation = hoursDuration.add(currentTime, 1000L); [EOL]         long secondComputation = fieldTwo.add(currentTime, 1000L); [EOL]         assertTrue(firstComputation == secondComputation); [EOL]         assertEquals(firstComputation, secondComputation); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL]     try { [EOL]         fieldOne.getDifference(100000L, 1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         int firstDifference = hoursDuration.getDifference(100000L, 1000L); [EOL]         int secondDifference = fieldTwo.getDifference(100000L, 1000L); [EOL]         assertEquals(firstDifference, secondDifference); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL]     try { [EOL]         fieldOne.getDifferenceAsLong(100000L, 1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         long firstDifference = hoursDuration.getDifference(100000L, 1000L); [EOL]         long secondDifference = fieldTwo.getDifference(100000L, 1000L); [EOL]         assertEquals(firstDifference, secondDifference); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL] }
public void testDelegatedMethods() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     PreciseDurationField hoursDuration = new PreciseDurationField(DurationFieldType.hours(), 10L); [EOL]     DateTimeField fieldTwo = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, hoursDuration); [EOL]     try { [EOL]         fieldOne.add(System.currentTimeMillis(), 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         long currentTime = System.currentTimeMillis(); [EOL]         long firstComputation = hoursDuration.add(currentTime, 100); [EOL]         long secondComputation = fieldTwo.add(currentTime, 100); [EOL]         assertEquals(firstComputation, secondComputation); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL]     try { [EOL]         fieldOne.add(System.currentTimeMillis(), 1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         long currentTime = System.currentTimeMillis(); [EOL]         long firstComputation = hoursDuration.add(currentTime, 1000L); [EOL]         long secondComputation = fieldTwo.add(currentTime, 1000L); [EOL]         assertTrue(firstComputation == secondComputation); [EOL]         assertEquals(firstComputation, secondComputation); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL]     try { [EOL]         fieldOne.getDifference(100000L, 1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         int firstDifference = hoursDuration.getDifference(100000L, 1000L); [EOL]         int secondDifference = fieldTwo.getDifference(100000L, 1000L); [EOL]         assertEquals(firstDifference, secondDifference); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL]     try { [EOL]         fieldOne.getDifferenceAsLong(100000L, 1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         long firstDifference = hoursDuration.getDifference(100000L, 1000L); [EOL]         long secondDifference = fieldTwo.getDifference(100000L, 1000L); [EOL]         assertEquals(firstDifference, secondDifference); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL] }
public void testDelegatedMethods() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     PreciseDurationField hoursDuration = new PreciseDurationField(DurationFieldType.hours(), 10L); [EOL]     DateTimeField fieldTwo = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, hoursDuration); [EOL]     try { [EOL]         fieldOne.add(System.currentTimeMillis(), 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         long currentTime = System.currentTimeMillis(); [EOL]         long firstComputation = hoursDuration.add(currentTime, 100); [EOL]         long secondComputation = fieldTwo.add(currentTime, 100); [EOL]         assertEquals(firstComputation, secondComputation); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL]     try { [EOL]         fieldOne.add(System.currentTimeMillis(), 1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         long currentTime = System.currentTimeMillis(); [EOL]         long firstComputation = hoursDuration.add(currentTime, 1000L); [EOL]         long secondComputation = fieldTwo.add(currentTime, 1000L); [EOL]         assertTrue(firstComputation == secondComputation); [EOL]         assertEquals(firstComputation, secondComputation); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL]     try { [EOL]         fieldOne.getDifference(100000L, 1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         int firstDifference = hoursDuration.getDifference(100000L, 1000L); [EOL]         int secondDifference = fieldTwo.getDifference(100000L, 1000L); [EOL]         assertEquals(firstDifference, secondDifference); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL]     try { [EOL]         fieldOne.getDifferenceAsLong(100000L, 1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         long firstDifference = hoursDuration.getDifference(100000L, 1000L); [EOL]         long secondDifference = fieldTwo.getDifference(100000L, 1000L); [EOL]         assertEquals(firstDifference, secondDifference); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL] }
public void testSerializedUnsupportedDateTimeField() throws Exception { [EOL]     UnsupportedDateTimeField test = UnsupportedDateTimeField.getInstance(DateTimeFieldType.year(), UnsupportedDurationField.getInstance(DurationFieldType.years())); [EOL]     loadAndCompare(test, "UnsupportedDateTimeField", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testDelegatedMethods() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     PreciseDurationField hoursDuration = new PreciseDurationField(DurationFieldType.hours(), 10L); [EOL]     DateTimeField fieldTwo = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, hoursDuration); [EOL]     try { [EOL]         fieldOne.add(System.currentTimeMillis(), 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         long currentTime = System.currentTimeMillis(); [EOL]         long firstComputation = hoursDuration.add(currentTime, 100); [EOL]         long secondComputation = fieldTwo.add(currentTime, 100); [EOL]         assertEquals(firstComputation, secondComputation); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL]     try { [EOL]         fieldOne.add(System.currentTimeMillis(), 1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         long currentTime = System.currentTimeMillis(); [EOL]         long firstComputation = hoursDuration.add(currentTime, 1000L); [EOL]         long secondComputation = fieldTwo.add(currentTime, 1000L); [EOL]         assertTrue(firstComputation == secondComputation); [EOL]         assertEquals(firstComputation, secondComputation); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL]     try { [EOL]         fieldOne.getDifference(100000L, 1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         int firstDifference = hoursDuration.getDifference(100000L, 1000L); [EOL]         int secondDifference = fieldTwo.getDifference(100000L, 1000L); [EOL]         assertEquals(firstDifference, secondDifference); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL]     try { [EOL]         fieldOne.getDifferenceAsLong(100000L, 1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         long firstDifference = hoursDuration.getDifference(100000L, 1000L); [EOL]         long secondDifference = fieldTwo.getDifference(100000L, 1000L); [EOL]         assertEquals(firstDifference, secondDifference); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL] }
public void testToDateTime_DateTimeZone() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     MutableDateTime result = test.toMutableDateTime(LONDON); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL]     assertEquals(LONDON, result.getZone()); [EOL]     test = new MutableDateTime(TEST_TIME1); [EOL]     result = test.toMutableDateTime(PARIS); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(PARIS, result.getZone()); [EOL]     test = new MutableDateTime(TEST_TIME1, GregorianChronology.getInstance(PARIS)); [EOL]     result = test.toMutableDateTime((DateTimeZone) null); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(GregorianChronology.getInstance(LONDON), result.getChronology()); [EOL]     test = new MutableDateTime(TEST_TIME1, PARIS); [EOL]     result = test.toMutableDateTime((DateTimeZone) null); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(LONDON, result.getZone()); [EOL]     test = new MutableDateTime(TEST_TIME1); [EOL]     result = test.toMutableDateTime((DateTimeZone) null); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(LONDON, result.getZone()); [EOL]     assertEquals(ISOChronology.getInstance(), result.getChronology()); [EOL] }
public void testToDateTime_DateTimeZone() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     MutableDateTime result = test.toMutableDateTime(LONDON); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL]     assertEquals(LONDON, result.getZone()); [EOL]     test = new MutableDateTime(TEST_TIME1); [EOL]     result = test.toMutableDateTime(PARIS); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(PARIS, result.getZone()); [EOL]     test = new MutableDateTime(TEST_TIME1, GregorianChronology.getInstance(PARIS)); [EOL]     result = test.toMutableDateTime((DateTimeZone) null); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(GregorianChronology.getInstance(LONDON), result.getChronology()); [EOL]     test = new MutableDateTime(TEST_TIME1, PARIS); [EOL]     result = test.toMutableDateTime((DateTimeZone) null); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(LONDON, result.getZone()); [EOL]     test = new MutableDateTime(TEST_TIME1); [EOL]     result = test.toMutableDateTime((DateTimeZone) null); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(LONDON, result.getZone()); [EOL]     assertEquals(ISOChronology.getInstance(), result.getChronology()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void test_MutableDateTime_withZoneRetainFields_Gaza() { [EOL]     MutableDateTime dt = new MutableDateTime(2007, 4, 1, 0, 0, 0, 0, DateTimeZone.UTC); [EOL]     assertEquals("2007-04-01T00:00:00.000Z", dt.toString()); [EOL]     dt.setZoneRetainFields(MOCK_GAZA); [EOL]     assertEquals("2007-04-01T01:00:00.000+03:00", dt.toString()); [EOL] }
public void test_MutableDateTime_withZoneRetainFields_Gaza() { [EOL]     MutableDateTime dt = new MutableDateTime(2007, 4, 1, 0, 0, 0, 0, DateTimeZone.UTC); [EOL]     assertEquals("2007-04-01T00:00:00.000Z", dt.toString()); [EOL]     dt.setZoneRetainFields(MOCK_GAZA); [EOL]     assertEquals("2007-04-01T01:00:00.000+03:00", dt.toString()); [EOL] }
public void test_MutableDateTime_withZoneRetainFields_Gaza() { [EOL]     MutableDateTime dt = new MutableDateTime(2007, 4, 1, 0, 0, 0, 0, DateTimeZone.UTC); [EOL]     assertEquals("2007-04-01T00:00:00.000Z", dt.toString()); [EOL]     dt.setZoneRetainFields(MOCK_GAZA); [EOL]     assertEquals("2007-04-01T01:00:00.000+03:00", dt.toString()); [EOL] }
public void test_MutableDateTime_withZoneRetainFields_Gaza() { [EOL]     MutableDateTime dt = new MutableDateTime(2007, 4, 1, 0, 0, 0, 0, DateTimeZone.UTC); [EOL]     assertEquals("2007-04-01T00:00:00.000Z", dt.toString()); [EOL]     dt.setZoneRetainFields(MOCK_GAZA); [EOL]     assertEquals("2007-04-01T01:00:00.000+03:00", dt.toString()); [EOL] }
public void test_MutableDateTime_withZoneRetainFields_Gaza() { [EOL]     MutableDateTime dt = new MutableDateTime(2007, 4, 1, 0, 0, 0, 0, DateTimeZone.UTC); [EOL]     assertEquals("2007-04-01T00:00:00.000Z", dt.toString()); [EOL]     dt.setZoneRetainFields(MOCK_GAZA); [EOL]     assertEquals("2007-04-01T01:00:00.000+03:00", dt.toString()); [EOL] }
public void test_MutableDateTime_withZoneRetainFields_Gaza() { [EOL]     MutableDateTime dt = new MutableDateTime(2007, 4, 1, 0, 0, 0, 0, DateTimeZone.UTC); [EOL]     assertEquals("2007-04-01T00:00:00.000Z", dt.toString()); [EOL]     dt.setZoneRetainFields(MOCK_GAZA); [EOL]     assertEquals("2007-04-01T01:00:00.000+03:00", dt.toString()); [EOL] }
public void test_MutableDateTime_withZoneRetainFields_Gaza() { [EOL]     MutableDateTime dt = new MutableDateTime(2007, 4, 1, 0, 0, 0, 0, DateTimeZone.UTC); [EOL]     assertEquals("2007-04-01T00:00:00.000Z", dt.toString()); [EOL]     dt.setZoneRetainFields(MOCK_GAZA); [EOL]     assertEquals("2007-04-01T01:00:00.000+03:00", dt.toString()); [EOL] }
public void testAdd_RD2() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     test.add((ReadableDuration) null); [EOL]     assertEquals(TEST_TIME1, test.getMillis()); [EOL] }
public void testAdd_RD2() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     test.add((ReadableDuration) null); [EOL]     assertEquals(TEST_TIME1, test.getMillis()); [EOL] }
public void testAdd_RD2() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     test.add((ReadableDuration) null); [EOL]     assertEquals(TEST_TIME1, test.getMillis()); [EOL] }
public void testAdd_RD2() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     test.add((ReadableDuration) null); [EOL]     assertEquals(TEST_TIME1, test.getMillis()); [EOL] }
public void testAdd_RP2() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     test.add((ReadablePeriod) null); [EOL]     assertEquals(TEST_TIME1, test.getMillis()); [EOL] }
public void testAdd_RP2() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     test.add((ReadablePeriod) null); [EOL]     assertEquals(TEST_TIME1, test.getMillis()); [EOL] }
public void testAdd_RP_int1() { [EOL]     Period d = new Period(0, 0, 0, 0, 0, 0, 1, 2); [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     test.add(d, -2); [EOL]     assertEquals(TEST_TIME1 - (2L * 1002L), test.getMillis()); [EOL] }
public void testAdd_RP_int1() { [EOL]     Period d = new Period(0, 0, 0, 0, 0, 0, 1, 2); [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     test.add(d, -2); [EOL]     assertEquals(TEST_TIME1 - (2L * 1002L), test.getMillis()); [EOL] }
public void test_MutableDateTime_withZoneRetainFields_Gaza() { [EOL]     MutableDateTime dt = new MutableDateTime(2007, 4, 1, 0, 0, 0, 0, DateTimeZone.UTC); [EOL]     assertEquals("2007-04-01T00:00:00.000Z", dt.toString()); [EOL]     dt.setZoneRetainFields(MOCK_GAZA); [EOL]     assertEquals("2007-04-01T01:00:00.000+03:00", dt.toString()); [EOL] }
public void test_MutableDateTime_withZoneRetainFields_Gaza() { [EOL]     MutableDateTime dt = new MutableDateTime(2007, 4, 1, 0, 0, 0, 0, DateTimeZone.UTC); [EOL]     assertEquals("2007-04-01T00:00:00.000Z", dt.toString()); [EOL]     dt.setZoneRetainFields(MOCK_GAZA); [EOL]     assertEquals("2007-04-01T01:00:00.000+03:00", dt.toString()); [EOL] }
public void test_MutableDateTime_withZoneRetainFields_Gaza() { [EOL]     MutableDateTime dt = new MutableDateTime(2007, 4, 1, 0, 0, 0, 0, DateTimeZone.UTC); [EOL]     assertEquals("2007-04-01T00:00:00.000Z", dt.toString()); [EOL]     dt.setZoneRetainFields(MOCK_GAZA); [EOL]     assertEquals("2007-04-01T01:00:00.000+03:00", dt.toString()); [EOL] }
public void testAddMonths_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.addMonths(0); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testAddMonths_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.addMonths(0); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testAddMonths_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.addMonths(0); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testSetWeekOfWeekyear_int2() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     try { [EOL]         test.setWeekOfWeekyear(53); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals("2002-06-09T05:06:07.008+01:00", test.toString()); [EOL] }
public void testSetWeekOfWeekyear_int2() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     try { [EOL]         test.setWeekOfWeekyear(53); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals("2002-06-09T05:06:07.008+01:00", test.toString()); [EOL] }
public void testAddWeeks_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.addWeeks(0); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testAddWeeks_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.addWeeks(0); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testAddWeeks_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.addWeeks(0); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testSetDayOfYear_int_dstOverlapWinter_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     test.addHours(1); [EOL]     assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); [EOL]     test.setDayOfYear(303); [EOL]     assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); [EOL] }
public void testSetDayOfYear_int_dstOverlapWinter_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     test.addHours(1); [EOL]     assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); [EOL]     test.setDayOfYear(303); [EOL]     assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); [EOL] }
public void testAddSeconds_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     test.addSeconds(13); [EOL]     assertEquals("2002-06-09T05:06:20.008+01:00", test.toString()); [EOL] }
public void testAddSeconds_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     test.addSeconds(13); [EOL]     assertEquals("2002-06-09T05:06:20.008+01:00", test.toString()); [EOL] }
public void testAddSeconds_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     test.addSeconds(13); [EOL]     assertEquals("2002-06-09T05:06:20.008+01:00", test.toString()); [EOL] }
public void testAddMillis_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     test.addMillis(13); [EOL]     assertEquals("2002-06-09T05:06:07.021+01:00", test.toString()); [EOL] }
public void testAddMillis_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     test.addMillis(13); [EOL]     assertEquals("2002-06-09T05:06:07.021+01:00", test.toString()); [EOL] }
public void testSetDate_RI_same() { [EOL]     MutableDateTime setter = new MutableDateTime(2010, 12, 3, 2, 24, 48, 501, DateTimeZone.forID("America/Los_Angeles")); [EOL]     MutableDateTime test = new MutableDateTime(2010, 12, 3, 2, 24, 48, 501, DateTimeZone.forID("America/Los_Angeles")); [EOL]     test.setDate(setter); [EOL]     assertEquals(2010, test.getYear()); [EOL]     assertEquals(12, test.getMonthOfYear()); [EOL]     assertEquals(3, test.getDayOfMonth()); [EOL]     assertEquals(2, test.getHourOfDay()); [EOL]     assertEquals(24, test.getMinuteOfHour()); [EOL]     assertEquals(48, test.getSecondOfMinute()); [EOL]     assertEquals(501, test.getMillisOfSecond()); [EOL] }
public void testSetDate_RI_same() { [EOL]     MutableDateTime setter = new MutableDateTime(2010, 12, 3, 2, 24, 48, 501, DateTimeZone.forID("America/Los_Angeles")); [EOL]     MutableDateTime test = new MutableDateTime(2010, 12, 3, 2, 24, 48, 501, DateTimeZone.forID("America/Los_Angeles")); [EOL]     test.setDate(setter); [EOL]     assertEquals(2010, test.getYear()); [EOL]     assertEquals(12, test.getMonthOfYear()); [EOL]     assertEquals(3, test.getDayOfMonth()); [EOL]     assertEquals(2, test.getHourOfDay()); [EOL]     assertEquals(24, test.getMinuteOfHour()); [EOL]     assertEquals(48, test.getSecondOfMinute()); [EOL]     assertEquals(501, test.getMillisOfSecond()); [EOL] }
public void testSetDate_RI_same() { [EOL]     MutableDateTime setter = new MutableDateTime(2010, 12, 3, 2, 24, 48, 501, DateTimeZone.forID("America/Los_Angeles")); [EOL]     MutableDateTime test = new MutableDateTime(2010, 12, 3, 2, 24, 48, 501, DateTimeZone.forID("America/Los_Angeles")); [EOL]     test.setDate(setter); [EOL]     assertEquals(2010, test.getYear()); [EOL]     assertEquals(12, test.getMonthOfYear()); [EOL]     assertEquals(3, test.getDayOfMonth()); [EOL]     assertEquals(2, test.getHourOfDay()); [EOL]     assertEquals(24, test.getMinuteOfHour()); [EOL]     assertEquals(48, test.getSecondOfMinute()); [EOL]     assertEquals(501, test.getMillisOfSecond()); [EOL] }
public void testSetDate_RI_same() { [EOL]     MutableDateTime setter = new MutableDateTime(2010, 12, 3, 2, 24, 48, 501, DateTimeZone.forID("America/Los_Angeles")); [EOL]     MutableDateTime test = new MutableDateTime(2010, 12, 3, 2, 24, 48, 501, DateTimeZone.forID("America/Los_Angeles")); [EOL]     test.setDate(setter); [EOL]     assertEquals(2010, test.getYear()); [EOL]     assertEquals(12, test.getMonthOfYear()); [EOL]     assertEquals(3, test.getDayOfMonth()); [EOL]     assertEquals(2, test.getHourOfDay()); [EOL]     assertEquals(24, test.getMinuteOfHour()); [EOL]     assertEquals(48, test.getSecondOfMinute()); [EOL]     assertEquals(501, test.getMillisOfSecond()); [EOL] }
public void testProperty() { [EOL]     MutableDateTime test = new MutableDateTime(); [EOL]     assertEquals(test.year(), test.property(DateTimeFieldType.year())); [EOL]     assertEquals(test.dayOfWeek(), test.property(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond())); [EOL]     DateTimeFieldType bad = new DateTimeFieldType("bad") { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         public DurationFieldType getDurationType() { [EOL]             return DurationFieldType.weeks(); [EOL]         } [EOL]  [EOL]         public DurationFieldType getRangeDurationType() { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public DateTimeField getField(Chronology chronology) { [EOL]             return UnsupportedDateTimeField.getInstance(this, UnsupportedDurationField.getInstance(getDurationType())); [EOL]         } [EOL]     }; [EOL]     try { [EOL]         test.property(bad); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     MutableDateTime test = new MutableDateTime(); [EOL]     assertEquals(test.year(), test.property(DateTimeFieldType.year())); [EOL]     assertEquals(test.dayOfWeek(), test.property(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond())); [EOL]     DateTimeFieldType bad = new DateTimeFieldType("bad") { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         public DurationFieldType getDurationType() { [EOL]             return DurationFieldType.weeks(); [EOL]         } [EOL]  [EOL]         public DurationFieldType getRangeDurationType() { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public DateTimeField getField(Chronology chronology) { [EOL]             return UnsupportedDateTimeField.getInstance(this, UnsupportedDurationField.getInstance(getDurationType())); [EOL]         } [EOL]     }; [EOL]     try { [EOL]         test.property(bad); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testProperty() { [EOL]     MutableDateTime test = new MutableDateTime(); [EOL]     assertEquals(test.year(), test.property(DateTimeFieldType.year())); [EOL]     assertEquals(test.dayOfWeek(), test.property(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond())); [EOL]     DateTimeFieldType bad = new DateTimeFieldType("bad") { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         public DurationFieldType getDurationType() { [EOL]             return DurationFieldType.weeks(); [EOL]         } [EOL]  [EOL]         public DurationFieldType getRangeDurationType() { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public DateTimeField getField(Chronology chronology) { [EOL]             return UnsupportedDateTimeField.getInstance(this, UnsupportedDurationField.getInstance(getDurationType())); [EOL]         } [EOL]     }; [EOL]     try { [EOL]         test.property(bad); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testClone() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     MutableDateTime result = (MutableDateTime) test.clone(); [EOL]     assertEquals(true, test.equals(result)); [EOL]     assertEquals(true, test != result); [EOL] }
public void testClone() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     MutableDateTime result = (MutableDateTime) test.clone(); [EOL]     assertEquals(true, test.equals(result)); [EOL]     assertEquals(true, test != result); [EOL] }
public void test_MutableDateTime_withZoneRetainFields_Gaza() { [EOL]     MutableDateTime dt = new MutableDateTime(2007, 4, 1, 0, 0, 0, 0, DateTimeZone.UTC); [EOL]     assertEquals("2007-04-01T00:00:00.000Z", dt.toString()); [EOL]     dt.setZoneRetainFields(MOCK_GAZA); [EOL]     assertEquals("2007-04-01T01:00:00.000+03:00", dt.toString()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyGetEra() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertSame(test.getChronology().era(), test.era().getField()); [EOL]     assertEquals("era", test.era().getName()); [EOL]     assertEquals("Property[era]", test.era().toString()); [EOL]     assertSame(test, test.era().getMutableDateTime()); [EOL]     assertEquals(1, test.era().get()); [EOL]     assertEquals("AD", test.era().getAsText()); [EOL]     assertEquals("ap. J.-C.", test.era().getAsText(Locale.FRENCH)); [EOL]     assertEquals("AD", test.era().getAsShortText()); [EOL]     assertEquals("ap. J.-C.", test.era().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().eras(), test.era().getDurationField()); [EOL]     assertEquals(null, test.era().getRangeDurationField()); [EOL]     assertEquals(2, test.era().getMaximumTextLength(null)); [EOL]     assertEquals(9, test.era().getMaximumTextLength(Locale.FRENCH)); [EOL]     assertEquals(2, test.era().getMaximumShortTextLength(null)); [EOL]     assertEquals(9, test.era().getMaximumShortTextLength(Locale.FRENCH)); [EOL] }
public void testPropertySetTextMonthOfYear() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     test.monthOfYear().set("12"); [EOL]     assertEquals("2004-12-09T00:00:00.000Z", test.toString()); [EOL]     test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     test.monthOfYear().set("December"); [EOL]     assertEquals("2004-12-09T00:00:00.000Z", test.toString()); [EOL]     test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     test.monthOfYear().set("Dec"); [EOL]     assertEquals("2004-12-09T00:00:00.000Z", test.toString()); [EOL] }
public void testPropertySetTextMonthOfYear() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     test.monthOfYear().set("12"); [EOL]     assertEquals("2004-12-09T00:00:00.000Z", test.toString()); [EOL]     test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     test.monthOfYear().set("December"); [EOL]     assertEquals("2004-12-09T00:00:00.000Z", test.toString()); [EOL]     test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     test.monthOfYear().set("Dec"); [EOL]     assertEquals("2004-12-09T00:00:00.000Z", test.toString()); [EOL] }
public void testPropertySetTextMonthOfYear() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     test.monthOfYear().set("12"); [EOL]     assertEquals("2004-12-09T00:00:00.000Z", test.toString()); [EOL]     test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     test.monthOfYear().set("December"); [EOL]     assertEquals("2004-12-09T00:00:00.000Z", test.toString()); [EOL]     test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     test.monthOfYear().set("Dec"); [EOL]     assertEquals("2004-12-09T00:00:00.000Z", test.toString()); [EOL] }
public void testPropertySetTextMonthOfYear() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     test.monthOfYear().set("12"); [EOL]     assertEquals("2004-12-09T00:00:00.000Z", test.toString()); [EOL]     test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     test.monthOfYear().set("December"); [EOL]     assertEquals("2004-12-09T00:00:00.000Z", test.toString()); [EOL]     test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     test.monthOfYear().set("Dec"); [EOL]     assertEquals("2004-12-09T00:00:00.000Z", test.toString()); [EOL] }
public void testPropertySetTextMonthOfYear() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     test.monthOfYear().set("12"); [EOL]     assertEquals("2004-12-09T00:00:00.000Z", test.toString()); [EOL]     test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     test.monthOfYear().set("December"); [EOL]     assertEquals("2004-12-09T00:00:00.000Z", test.toString()); [EOL]     test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     test.monthOfYear().set("Dec"); [EOL]     assertEquals("2004-12-09T00:00:00.000Z", test.toString()); [EOL] }
public void testPropertyRoundFloorHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     test.hourOfDay().roundFloor(); [EOL]     assertEquals("2004-06-09T13:00:00.000+01:00", test.toString()); [EOL] }
public void testPropertyRoundHalfEvenHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     test.hourOfDay().roundHalfEven(); [EOL]     assertEquals("2004-06-09T14:00:00.000+01:00", test.toString()); [EOL]     test = new MutableDateTime(2004, 6, 9, 14, 30, 0, 0); [EOL]     test.hourOfDay().roundHalfEven(); [EOL]     assertEquals("2004-06-09T14:00:00.000+01:00", test.toString()); [EOL]     test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 1); [EOL]     test.hourOfDay().roundHalfEven(); [EOL]     assertEquals("2004-06-09T14:00:00.000+01:00", test.toString()); [EOL]     test = new MutableDateTime(2004, 6, 9, 13, 29, 59, 999); [EOL]     test.hourOfDay().roundHalfEven(); [EOL]     assertEquals("2004-06-09T13:00:00.000+01:00", test.toString()); [EOL] }
public void testPropertyRoundHalfEvenHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     test.hourOfDay().roundHalfEven(); [EOL]     assertEquals("2004-06-09T14:00:00.000+01:00", test.toString()); [EOL]     test = new MutableDateTime(2004, 6, 9, 14, 30, 0, 0); [EOL]     test.hourOfDay().roundHalfEven(); [EOL]     assertEquals("2004-06-09T14:00:00.000+01:00", test.toString()); [EOL]     test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 1); [EOL]     test.hourOfDay().roundHalfEven(); [EOL]     assertEquals("2004-06-09T14:00:00.000+01:00", test.toString()); [EOL]     test = new MutableDateTime(2004, 6, 9, 13, 29, 59, 999); [EOL]     test.hourOfDay().roundHalfEven(); [EOL]     assertEquals("2004-06-09T13:00:00.000+01:00", test.toString()); [EOL] }
public void testPropertyRoundHalfEvenHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     test.hourOfDay().roundHalfEven(); [EOL]     assertEquals("2004-06-09T14:00:00.000+01:00", test.toString()); [EOL]     test = new MutableDateTime(2004, 6, 9, 14, 30, 0, 0); [EOL]     test.hourOfDay().roundHalfEven(); [EOL]     assertEquals("2004-06-09T14:00:00.000+01:00", test.toString()); [EOL]     test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 1); [EOL]     test.hourOfDay().roundHalfEven(); [EOL]     assertEquals("2004-06-09T14:00:00.000+01:00", test.toString()); [EOL]     test = new MutableDateTime(2004, 6, 9, 13, 29, 59, 999); [EOL]     test.hourOfDay().roundHalfEven(); [EOL]     assertEquals("2004-06-09T13:00:00.000+01:00", test.toString()); [EOL] }
public void testPropertyRoundHalfEvenHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     test.hourOfDay().roundHalfEven(); [EOL]     assertEquals("2004-06-09T14:00:00.000+01:00", test.toString()); [EOL]     test = new MutableDateTime(2004, 6, 9, 14, 30, 0, 0); [EOL]     test.hourOfDay().roundHalfEven(); [EOL]     assertEquals("2004-06-09T14:00:00.000+01:00", test.toString()); [EOL]     test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 1); [EOL]     test.hourOfDay().roundHalfEven(); [EOL]     assertEquals("2004-06-09T14:00:00.000+01:00", test.toString()); [EOL]     test = new MutableDateTime(2004, 6, 9, 13, 29, 59, 999); [EOL]     test.hourOfDay().roundHalfEven(); [EOL]     assertEquals("2004-06-09T13:00:00.000+01:00", test.toString()); [EOL] }
public void testSerialization() throws Exception { [EOL]     Hours test = Hours.SEVEN; [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     Hours result = (Hours) ois.readObject(); [EOL]     ois.close(); [EOL]     assertSame(test, result); [EOL] }
public void testPlus_int() { [EOL]     Hours test2 = Hours.hours(2); [EOL]     Hours result = test2.plus(3); [EOL]     assertEquals(2, test2.getHours()); [EOL]     assertEquals(5, result.getHours()); [EOL]     assertEquals(1, Hours.ONE.plus(0).getHours()); [EOL]     try { [EOL]         Hours.MAX_VALUE.plus(1); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testPlus_int() { [EOL]     Hours test2 = Hours.hours(2); [EOL]     Hours result = test2.plus(3); [EOL]     assertEquals(2, test2.getHours()); [EOL]     assertEquals(5, result.getHours()); [EOL]     assertEquals(1, Hours.ONE.plus(0).getHours()); [EOL]     try { [EOL]         Hours.MAX_VALUE.plus(1); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMinus_int() { [EOL]     Hours test2 = Hours.hours(2); [EOL]     Hours result = test2.minus(3); [EOL]     assertEquals(2, test2.getHours()); [EOL]     assertEquals(-1, result.getHours()); [EOL]     assertEquals(1, Hours.ONE.minus(0).getHours()); [EOL]     try { [EOL]         Hours.MIN_VALUE.minus(1); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMinus_int() { [EOL]     Hours test2 = Hours.hours(2); [EOL]     Hours result = test2.minus(3); [EOL]     assertEquals(2, test2.getHours()); [EOL]     assertEquals(-1, result.getHours()); [EOL]     assertEquals(1, Hours.ONE.minus(0).getHours()); [EOL]     try { [EOL]         Hours.MIN_VALUE.minus(1); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMinus_int() { [EOL]     Hours test2 = Hours.hours(2); [EOL]     Hours result = test2.minus(3); [EOL]     assertEquals(2, test2.getHours()); [EOL]     assertEquals(-1, result.getHours()); [EOL]     assertEquals(1, Hours.ONE.minus(0).getHours()); [EOL]     try { [EOL]         Hours.MIN_VALUE.minus(1); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMultipliedBy_int() { [EOL]     Hours test = Hours.hours(2); [EOL]     assertEquals(6, test.multipliedBy(3).getHours()); [EOL]     assertEquals(2, test.getHours()); [EOL]     assertEquals(-6, test.multipliedBy(-3).getHours()); [EOL]     assertSame(test, test.multipliedBy(1)); [EOL]     Hours halfMax = Hours.hours(Integer.MAX_VALUE / 2 + 1); [EOL]     try { [EOL]         halfMax.multipliedBy(2); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMultipliedBy_int() { [EOL]     Hours test = Hours.hours(2); [EOL]     assertEquals(6, test.multipliedBy(3).getHours()); [EOL]     assertEquals(2, test.getHours()); [EOL]     assertEquals(-6, test.multipliedBy(-3).getHours()); [EOL]     assertSame(test, test.multipliedBy(1)); [EOL]     Hours halfMax = Hours.hours(Integer.MAX_VALUE / 2 + 1); [EOL]     try { [EOL]         halfMax.multipliedBy(2); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMultipliedBy_int() { [EOL]     Hours test = Hours.hours(2); [EOL]     assertEquals(6, test.multipliedBy(3).getHours()); [EOL]     assertEquals(2, test.getHours()); [EOL]     assertEquals(-6, test.multipliedBy(-3).getHours()); [EOL]     assertSame(test, test.multipliedBy(1)); [EOL]     Hours halfMax = Hours.hours(Integer.MAX_VALUE / 2 + 1); [EOL]     try { [EOL]         halfMax.multipliedBy(2); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMultipliedBy_int() { [EOL]     Hours test = Hours.hours(2); [EOL]     assertEquals(6, test.multipliedBy(3).getHours()); [EOL]     assertEquals(2, test.getHours()); [EOL]     assertEquals(-6, test.multipliedBy(-3).getHours()); [EOL]     assertSame(test, test.multipliedBy(1)); [EOL]     Hours halfMax = Hours.hours(Integer.MAX_VALUE / 2 + 1); [EOL]     try { [EOL]         halfMax.multipliedBy(2); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testAddNullRemoved3() { [EOL]     Converter[] array = new Converter[] { c1, c2, c3, c4 }; [EOL]     ConverterSet set = new ConverterSet(array); [EOL]     ConverterSet result = set.add(c4a, null); [EOL]     assertTrue(set != result); [EOL]     assertEquals(4, set.size()); [EOL]     assertEquals(4, result.size()); [EOL] }
public void testAddNullRemoved3() { [EOL]     Converter[] array = new Converter[] { c1, c2, c3, c4 }; [EOL]     ConverterSet set = new ConverterSet(array); [EOL]     ConverterSet result = set.add(c4a, null); [EOL]     assertTrue(set != result); [EOL]     assertEquals(4, set.size()); [EOL]     assertEquals(4, result.size()); [EOL] }
public void testAddNullRemoved3() { [EOL]     Converter[] array = new Converter[] { c1, c2, c3, c4 }; [EOL]     ConverterSet set = new ConverterSet(array); [EOL]     ConverterSet result = set.add(c4a, null); [EOL]     assertTrue(set != result); [EOL]     assertEquals(4, set.size()); [EOL]     assertEquals(4, result.size()); [EOL] }
public void testAddNullRemoved3() { [EOL]     Converter[] array = new Converter[] { c1, c2, c3, c4 }; [EOL]     ConverterSet set = new ConverterSet(array); [EOL]     ConverterSet result = set.add(c4a, null); [EOL]     assertTrue(set != result); [EOL]     assertEquals(4, set.size()); [EOL]     assertEquals(4, result.size()); [EOL] }
public void testAddNullRemoved3() { [EOL]     Converter[] array = new Converter[] { c1, c2, c3, c4 }; [EOL]     ConverterSet set = new ConverterSet(array); [EOL]     ConverterSet result = set.add(c4a, null); [EOL]     assertTrue(set != result); [EOL]     assertEquals(4, set.size()); [EOL]     assertEquals(4, result.size()); [EOL] }
public void testGetPeriodConverter() { [EOL]     PeriodConverter c = ConverterManager.getInstance().getPeriodConverter(new Period(1, 2, 3, 4, 5, 6, 7, 8)); [EOL]     assertEquals(ReadablePeriod.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPeriodConverter(new Duration(123L)); [EOL]     assertEquals(ReadableDuration.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPeriodConverter(new Interval(0L, 1000L)); [EOL]     assertEquals(ReadableInterval.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPeriodConverter(""); [EOL]     assertEquals(String.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPeriodConverter(null); [EOL]     assertEquals(null, c.getSupportedType()); [EOL]     try { [EOL]         ConverterManager.getInstance().getPeriodConverter(Boolean.TRUE); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGetPeriodConverter() { [EOL]     PeriodConverter c = ConverterManager.getInstance().getPeriodConverter(new Period(1, 2, 3, 4, 5, 6, 7, 8)); [EOL]     assertEquals(ReadablePeriod.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPeriodConverter(new Duration(123L)); [EOL]     assertEquals(ReadableDuration.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPeriodConverter(new Interval(0L, 1000L)); [EOL]     assertEquals(ReadableInterval.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPeriodConverter(""); [EOL]     assertEquals(String.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPeriodConverter(null); [EOL]     assertEquals(null, c.getSupportedType()); [EOL]     try { [EOL]         ConverterManager.getInstance().getPeriodConverter(Boolean.TRUE); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGetPeriodConverter() { [EOL]     PeriodConverter c = ConverterManager.getInstance().getPeriodConverter(new Period(1, 2, 3, 4, 5, 6, 7, 8)); [EOL]     assertEquals(ReadablePeriod.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPeriodConverter(new Duration(123L)); [EOL]     assertEquals(ReadableDuration.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPeriodConverter(new Interval(0L, 1000L)); [EOL]     assertEquals(ReadableInterval.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPeriodConverter(""); [EOL]     assertEquals(String.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPeriodConverter(null); [EOL]     assertEquals(null, c.getSupportedType()); [EOL]     try { [EOL]         ConverterManager.getInstance().getPeriodConverter(Boolean.TRUE); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGetPeriodConverter() { [EOL]     PeriodConverter c = ConverterManager.getInstance().getPeriodConverter(new Period(1, 2, 3, 4, 5, 6, 7, 8)); [EOL]     assertEquals(ReadablePeriod.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPeriodConverter(new Duration(123L)); [EOL]     assertEquals(ReadableDuration.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPeriodConverter(new Interval(0L, 1000L)); [EOL]     assertEquals(ReadableInterval.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPeriodConverter(""); [EOL]     assertEquals(String.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPeriodConverter(null); [EOL]     assertEquals(null, c.getSupportedType()); [EOL]     try { [EOL]         ConverterManager.getInstance().getPeriodConverter(Boolean.TRUE); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGetPeriodConverter() { [EOL]     PeriodConverter c = ConverterManager.getInstance().getPeriodConverter(new Period(1, 2, 3, 4, 5, 6, 7, 8)); [EOL]     assertEquals(ReadablePeriod.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPeriodConverter(new Duration(123L)); [EOL]     assertEquals(ReadableDuration.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPeriodConverter(new Interval(0L, 1000L)); [EOL]     assertEquals(ReadableInterval.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPeriodConverter(""); [EOL]     assertEquals(String.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPeriodConverter(null); [EOL]     assertEquals(null, c.getSupportedType()); [EOL]     try { [EOL]         ConverterManager.getInstance().getPeriodConverter(Boolean.TRUE); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGetPeriodConverter() { [EOL]     PeriodConverter c = ConverterManager.getInstance().getPeriodConverter(new Period(1, 2, 3, 4, 5, 6, 7, 8)); [EOL]     assertEquals(ReadablePeriod.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPeriodConverter(new Duration(123L)); [EOL]     assertEquals(ReadableDuration.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPeriodConverter(new Interval(0L, 1000L)); [EOL]     assertEquals(ReadableInterval.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPeriodConverter(""); [EOL]     assertEquals(String.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPeriodConverter(null); [EOL]     assertEquals(null, c.getSupportedType()); [EOL]     try { [EOL]         ConverterManager.getInstance().getPeriodConverter(Boolean.TRUE); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void test_toParser() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     try { [EOL]         bld.toParser(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     bld.appendLiteral('X'); [EOL]     assertNotNull(bld.toParser()); [EOL] }
public void test_canBuildFormatter() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     assertEquals(false, bld.canBuildFormatter()); [EOL]     bld.appendLiteral('X'); [EOL]     assertEquals(true, bld.canBuildFormatter()); [EOL] }
public void test_append_Parser() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendLiteral('Y'); [EOL]     DateTimeParser p = bld.toParser(); [EOL]     DateTimeFormatterBuilder bld2 = new DateTimeFormatterBuilder(); [EOL]     bld2.appendLiteral('X'); [EOL]     bld2.append(p); [EOL]     bld2.appendLiteral('Z'); [EOL]     DateTimeFormatter f = bld2.toFormatter(); [EOL]     assertEquals(false, f.isPrinter()); [EOL]     assertEquals(true, f.isParser()); [EOL]     assertEquals(0, f.withZoneUTC().parseMillis("XYZ")); [EOL] }
public void test_append_Parser() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendLiteral('Y'); [EOL]     DateTimeParser p = bld.toParser(); [EOL]     DateTimeFormatterBuilder bld2 = new DateTimeFormatterBuilder(); [EOL]     bld2.appendLiteral('X'); [EOL]     bld2.append(p); [EOL]     bld2.appendLiteral('Z'); [EOL]     DateTimeFormatter f = bld2.toFormatter(); [EOL]     assertEquals(false, f.isPrinter()); [EOL]     assertEquals(true, f.isParser()); [EOL]     assertEquals(0, f.withZoneUTC().parseMillis("XYZ")); [EOL] }
public void test_append_Printer_nullParser() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendLiteral('Y'); [EOL]     DateTimePrinter p = bld.toPrinter(); [EOL]     try { [EOL]         DateTimeFormatterBuilder bld2 = new DateTimeFormatterBuilder(); [EOL]         bld2.append(p, (DateTimeParser) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void test_append_Printer_nullParser() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendLiteral('Y'); [EOL]     DateTimePrinter p = bld.toPrinter(); [EOL]     try { [EOL]         DateTimeFormatterBuilder bld2 = new DateTimeFormatterBuilder(); [EOL]         bld2.append(p, (DateTimeParser) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void test_append_Printer_nullParser() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendLiteral('Y'); [EOL]     DateTimePrinter p = bld.toPrinter(); [EOL]     try { [EOL]         DateTimeFormatterBuilder bld2 = new DateTimeFormatterBuilder(); [EOL]         bld2.append(p, (DateTimeParser) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void test_appendOptional_Parser() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendLiteral('Y'); [EOL]     DateTimeParser p = bld.toParser(); [EOL]     DateTimeFormatterBuilder bld2 = new DateTimeFormatterBuilder(); [EOL]     bld2.appendLiteral('X'); [EOL]     bld2.appendOptional(p); [EOL]     bld2.appendLiteral('Z'); [EOL]     DateTimeFormatter f = bld2.toFormatter(); [EOL]     assertEquals(false, f.isPrinter()); [EOL]     assertEquals(true, f.isParser()); [EOL]     assertEquals(0, f.withZoneUTC().parseMillis("XYZ")); [EOL] }
public void test_appendOptional_Parser() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendLiteral('Y'); [EOL]     DateTimeParser p = bld.toParser(); [EOL]     DateTimeFormatterBuilder bld2 = new DateTimeFormatterBuilder(); [EOL]     bld2.appendLiteral('X'); [EOL]     bld2.appendOptional(p); [EOL]     bld2.appendLiteral('Z'); [EOL]     DateTimeFormatter f = bld2.toFormatter(); [EOL]     assertEquals(false, f.isPrinter()); [EOL]     assertEquals(true, f.isParser()); [EOL]     assertEquals(0, f.withZoneUTC().parseMillis("XYZ")); [EOL] }
public void test_append_Printer_nullParser() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendLiteral('Y'); [EOL]     DateTimePrinter p = bld.toPrinter(); [EOL]     try { [EOL]         DateTimeFormatterBuilder bld2 = new DateTimeFormatterBuilder(); [EOL]         bld2.append(p, (DateTimeParser) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFormat_clockhourOfDay() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("k").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "10", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals(dt.toString(), "6", f.print(dt)); [EOL]     dt = dt.withZone(TOKYO); [EOL]     assertEquals(dt.toString(), "19", f.print(dt)); [EOL]     dt = new DateTime(2004, 6, 9, 0, 0, 0, 0, UTC); [EOL]     assertEquals(dt.toString(), "24", f.print(dt)); [EOL] }
public void testFormat_clockhourOfDay() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("k").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "10", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals(dt.toString(), "6", f.print(dt)); [EOL]     dt = dt.withZone(TOKYO); [EOL]     assertEquals(dt.toString(), "19", f.print(dt)); [EOL]     dt = new DateTime(2004, 6, 9, 0, 0, 0, 0, UTC); [EOL]     assertEquals(dt.toString(), "24", f.print(dt)); [EOL] }
public void testFormat_yearOfEra_twoDigit() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "04", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "23", f.print(dt)); [EOL]     f = f.withZoneUTC(); [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(1922, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("22")); [EOL]     expect = new DateTime(2021, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("21")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = f.withPivotYear(new Integer(2050)); [EOL]     expect = new DateTime(2000, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("00")); [EOL]     expect = new DateTime(2099, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("99")); [EOL]     f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     f = f.withZoneUTC(); [EOL]     f.parseDateTime("5"); [EOL]     f.parseDateTime("005"); [EOL]     f.parseDateTime("+50"); [EOL]     f.parseDateTime("-50"); [EOL] }
public void testFormat_yearOfEra_twoDigit() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "04", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "23", f.print(dt)); [EOL]     f = f.withZoneUTC(); [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(1922, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("22")); [EOL]     expect = new DateTime(2021, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("21")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = f.withPivotYear(new Integer(2050)); [EOL]     expect = new DateTime(2000, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("00")); [EOL]     expect = new DateTime(2099, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("99")); [EOL]     f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     f = f.withZoneUTC(); [EOL]     f.parseDateTime("5"); [EOL]     f.parseDateTime("005"); [EOL]     f.parseDateTime("+50"); [EOL]     f.parseDateTime("-50"); [EOL] }
public void testForStyle_longDate() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.longDate(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("L-"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateInstance(DateFormat.LONG, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.LONG, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.LONG, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL] }
public void test_printParseZoneParis() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneId(); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, PARIS); [EOL]     assertEquals("2007-03-04 12:30 Europe/Paris", f.print(dt)); [EOL]     assertEquals(dt, f.parseDateTime("2007-03-04 12:30 Europe/Paris")); [EOL]     assertEquals(dt, f.withOffsetParsed().parseDateTime("2007-03-04 12:30 Europe/Paris")); [EOL] }
public void test_canBuildFormatter() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     assertEquals(false, bld.canBuildFormatter()); [EOL]     bld.appendLiteral('X'); [EOL]     assertEquals(true, bld.canBuildFormatter()); [EOL] }
public void testMonthDay_leapDay() { [EOL]     MonthDay test = new MonthDay(2, 29); [EOL]     String str = StringConvert.INSTANCE.convertToString(test); [EOL]     assertEquals("--02-29", str); [EOL]     assertEquals(test, StringConvert.INSTANCE.convertFromString(MonthDay.class, str)); [EOL] }
public void testMonthDay_leapDay() { [EOL]     MonthDay test = new MonthDay(2, 29); [EOL]     String str = StringConvert.INSTANCE.convertToString(test); [EOL]     assertEquals("--02-29", str); [EOL]     assertEquals(test, StringConvert.INSTANCE.convertFromString(MonthDay.class, str)); [EOL] }
public void testMonthDay_leapDay() { [EOL]     MonthDay test = new MonthDay(2, 29); [EOL]     String str = StringConvert.INSTANCE.convertToString(test); [EOL]     assertEquals("--02-29", str); [EOL]     assertEquals(test, StringConvert.INSTANCE.convertFromString(MonthDay.class, str)); [EOL] }
public void testMonthDay_leapDay() { [EOL]     MonthDay test = new MonthDay(2, 29); [EOL]     String str = StringConvert.INSTANCE.convertToString(test); [EOL]     assertEquals("--02-29", str); [EOL]     assertEquals(test, StringConvert.INSTANCE.convertFromString(MonthDay.class, str)); [EOL] }
public void testMonthDay_leapDay() { [EOL]     MonthDay test = new MonthDay(2, 29); [EOL]     String str = StringConvert.INSTANCE.convertToString(test); [EOL]     assertEquals("--02-29", str); [EOL]     assertEquals(test, StringConvert.INSTANCE.convertFromString(MonthDay.class, str)); [EOL] }
public void testMonthDay_leapDay() { [EOL]     MonthDay test = new MonthDay(2, 29); [EOL]     String str = StringConvert.INSTANCE.convertToString(test); [EOL]     assertEquals("--02-29", str); [EOL]     assertEquals(test, StringConvert.INSTANCE.convertFromString(MonthDay.class, str)); [EOL] }
public void testMonthDay_leapDay() { [EOL]     MonthDay test = new MonthDay(2, 29); [EOL]     String str = StringConvert.INSTANCE.convertToString(test); [EOL]     assertEquals("--02-29", str); [EOL]     assertEquals(test, StringConvert.INSTANCE.convertFromString(MonthDay.class, str)); [EOL] }
public void testMonthDay_leapDay() { [EOL]     MonthDay test = new MonthDay(2, 29); [EOL]     String str = StringConvert.INSTANCE.convertToString(test); [EOL]     assertEquals("--02-29", str); [EOL]     assertEquals(test, StringConvert.INSTANCE.convertFromString(MonthDay.class, str)); [EOL] }
public void testMonthDay_leapDay() { [EOL]     MonthDay test = new MonthDay(2, 29); [EOL]     String str = StringConvert.INSTANCE.convertToString(test); [EOL]     assertEquals("--02-29", str); [EOL]     assertEquals(test, StringConvert.INSTANCE.convertFromString(MonthDay.class, str)); [EOL] }
public void testMonthDay_leapDay() { [EOL]     MonthDay test = new MonthDay(2, 29); [EOL]     String str = StringConvert.INSTANCE.convertToString(test); [EOL]     assertEquals("--02-29", str); [EOL]     assertEquals(test, StringConvert.INSTANCE.convertFromString(MonthDay.class, str)); [EOL] }
public void testFormat_yearOfEra_twoDigit() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "04", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "23", f.print(dt)); [EOL]     f = f.withZoneUTC(); [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(1922, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("22")); [EOL]     expect = new DateTime(2021, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("21")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = f.withPivotYear(new Integer(2050)); [EOL]     expect = new DateTime(2000, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("00")); [EOL]     expect = new DateTime(2099, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("99")); [EOL]     f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     f = f.withZoneUTC(); [EOL]     f.parseDateTime("5"); [EOL]     f.parseDateTime("005"); [EOL]     f.parseDateTime("+50"); [EOL]     f.parseDateTime("-50"); [EOL] }
public void testFormat_yearOfEra_twoDigit() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "04", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "23", f.print(dt)); [EOL]     f = f.withZoneUTC(); [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(1922, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("22")); [EOL]     expect = new DateTime(2021, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("21")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = f.withPivotYear(new Integer(2050)); [EOL]     expect = new DateTime(2000, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("00")); [EOL]     expect = new DateTime(2099, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("99")); [EOL]     f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     f = f.withZoneUTC(); [EOL]     f.parseDateTime("5"); [EOL]     f.parseDateTime("005"); [EOL]     f.parseDateTime("+50"); [EOL]     f.parseDateTime("-50"); [EOL] }
public void testFormat_yearOfEra_twoDigit() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "04", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "23", f.print(dt)); [EOL]     f = f.withZoneUTC(); [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(1922, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("22")); [EOL]     expect = new DateTime(2021, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("21")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = f.withPivotYear(new Integer(2050)); [EOL]     expect = new DateTime(2000, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("00")); [EOL]     expect = new DateTime(2099, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("99")); [EOL]     f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     f = f.withZoneUTC(); [EOL]     f.parseDateTime("5"); [EOL]     f.parseDateTime("005"); [EOL]     f.parseDateTime("+50"); [EOL]     f.parseDateTime("-50"); [EOL] }
public void testFormat_yearOfEra_twoDigit() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "04", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "23", f.print(dt)); [EOL]     f = f.withZoneUTC(); [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(1922, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("22")); [EOL]     expect = new DateTime(2021, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("21")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = f.withPivotYear(new Integer(2050)); [EOL]     expect = new DateTime(2000, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("00")); [EOL]     expect = new DateTime(2099, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("99")); [EOL]     f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     f = f.withZoneUTC(); [EOL]     f.parseDateTime("5"); [EOL]     f.parseDateTime("005"); [EOL]     f.parseDateTime("+50"); [EOL]     f.parseDateTime("-50"); [EOL] }
public void testFormat_yearOfEra_twoDigit() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "04", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "23", f.print(dt)); [EOL]     f = f.withZoneUTC(); [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(1922, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("22")); [EOL]     expect = new DateTime(2021, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("21")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = f.withPivotYear(new Integer(2050)); [EOL]     expect = new DateTime(2000, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("00")); [EOL]     expect = new DateTime(2099, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("99")); [EOL]     f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     f = f.withZoneUTC(); [EOL]     f.parseDateTime("5"); [EOL]     f.parseDateTime("005"); [EOL]     f.parseDateTime("+50"); [EOL]     f.parseDateTime("-50"); [EOL] }
public void testFormat_yearOfEra_twoDigit() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "04", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "23", f.print(dt)); [EOL]     f = f.withZoneUTC(); [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(1922, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("22")); [EOL]     expect = new DateTime(2021, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("21")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = f.withPivotYear(new Integer(2050)); [EOL]     expect = new DateTime(2000, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("00")); [EOL]     expect = new DateTime(2099, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("99")); [EOL]     f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     f = f.withZoneUTC(); [EOL]     f.parseDateTime("5"); [EOL]     f.parseDateTime("005"); [EOL]     f.parseDateTime("+50"); [EOL]     f.parseDateTime("-50"); [EOL] }
public void testFormat_yearOfEra_twoDigit() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "04", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "23", f.print(dt)); [EOL]     f = f.withZoneUTC(); [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(1922, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("22")); [EOL]     expect = new DateTime(2021, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("21")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = f.withPivotYear(new Integer(2050)); [EOL]     expect = new DateTime(2000, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("00")); [EOL]     expect = new DateTime(2099, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("99")); [EOL]     f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     f = f.withZoneUTC(); [EOL]     f.parseDateTime("5"); [EOL]     f.parseDateTime("005"); [EOL]     f.parseDateTime("+50"); [EOL]     f.parseDateTime("-50"); [EOL] }
public void testFormat_yearOfEra_twoDigit() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "04", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "23", f.print(dt)); [EOL]     f = f.withZoneUTC(); [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(1922, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("22")); [EOL]     expect = new DateTime(2021, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("21")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = f.withPivotYear(new Integer(2050)); [EOL]     expect = new DateTime(2000, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("00")); [EOL]     expect = new DateTime(2099, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("99")); [EOL]     f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     f = f.withZoneUTC(); [EOL]     f.parseDateTime("5"); [EOL]     f.parseDateTime("005"); [EOL]     f.parseDateTime("+50"); [EOL]     f.parseDateTime("-50"); [EOL] }
public void testFormat_yearOfEra_twoDigit() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "04", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "23", f.print(dt)); [EOL]     f = f.withZoneUTC(); [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(1922, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("22")); [EOL]     expect = new DateTime(2021, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("21")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = f.withPivotYear(new Integer(2050)); [EOL]     expect = new DateTime(2000, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("00")); [EOL]     expect = new DateTime(2099, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("99")); [EOL]     f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     f = f.withZoneUTC(); [EOL]     f.parseDateTime("5"); [EOL]     f.parseDateTime("005"); [EOL]     f.parseDateTime("+50"); [EOL]     f.parseDateTime("-50"); [EOL] }
public void testFormat_yearOfEra_twoDigit() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "04", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "23", f.print(dt)); [EOL]     f = f.withZoneUTC(); [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(1922, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("22")); [EOL]     expect = new DateTime(2021, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("21")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = f.withPivotYear(new Integer(2050)); [EOL]     expect = new DateTime(2000, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("00")); [EOL]     expect = new DateTime(2099, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("99")); [EOL]     f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     f = f.withZoneUTC(); [EOL]     f.parseDateTime("5"); [EOL]     f.parseDateTime("005"); [EOL]     f.parseDateTime("+50"); [EOL]     f.parseDateTime("-50"); [EOL] }
public void testFormat_yearOfEra_twoDigit() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "04", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "23", f.print(dt)); [EOL]     f = f.withZoneUTC(); [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(1922, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("22")); [EOL]     expect = new DateTime(2021, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("21")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = f.withPivotYear(new Integer(2050)); [EOL]     expect = new DateTime(2000, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("00")); [EOL]     expect = new DateTime(2099, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("99")); [EOL]     f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     f = f.withZoneUTC(); [EOL]     f.parseDateTime("5"); [EOL]     f.parseDateTime("005"); [EOL]     f.parseDateTime("+50"); [EOL]     f.parseDateTime("-50"); [EOL] }
public void testFormat_yearOfEra_twoDigit() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "04", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "23", f.print(dt)); [EOL]     f = f.withZoneUTC(); [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(1922, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("22")); [EOL]     expect = new DateTime(2021, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("21")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = f.withPivotYear(new Integer(2050)); [EOL]     expect = new DateTime(2000, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("00")); [EOL]     expect = new DateTime(2099, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("99")); [EOL]     f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     f = f.withZoneUTC(); [EOL]     f.parseDateTime("5"); [EOL]     f.parseDateTime("005"); [EOL]     f.parseDateTime("+50"); [EOL]     f.parseDateTime("-50"); [EOL] }
public void testFormat_yearOfEra_twoDigit() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "04", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "23", f.print(dt)); [EOL]     f = f.withZoneUTC(); [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(1922, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("22")); [EOL]     expect = new DateTime(2021, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("21")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = f.withPivotYear(new Integer(2050)); [EOL]     expect = new DateTime(2000, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("00")); [EOL]     expect = new DateTime(2099, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("99")); [EOL]     f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     f = f.withZoneUTC(); [EOL]     f.parseDateTime("5"); [EOL]     f.parseDateTime("005"); [EOL]     f.parseDateTime("+50"); [EOL]     f.parseDateTime("-50"); [EOL] }
public void testFormat_yearOfEra_twoDigit() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "04", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "23", f.print(dt)); [EOL]     f = f.withZoneUTC(); [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(1922, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("22")); [EOL]     expect = new DateTime(2021, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("21")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = f.withPivotYear(new Integer(2050)); [EOL]     expect = new DateTime(2000, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("00")); [EOL]     expect = new DateTime(2099, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("99")); [EOL]     f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     f = f.withZoneUTC(); [EOL]     f.parseDateTime("5"); [EOL]     f.parseDateTime("005"); [EOL]     f.parseDateTime("+50"); [EOL]     f.parseDateTime("-50"); [EOL] }
public void testFormat_yearOfEra_twoDigit() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "04", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "23", f.print(dt)); [EOL]     f = f.withZoneUTC(); [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(1922, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("22")); [EOL]     expect = new DateTime(2021, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("21")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = f.withPivotYear(new Integer(2050)); [EOL]     expect = new DateTime(2000, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("00")); [EOL]     expect = new DateTime(2099, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("99")); [EOL]     f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     f = f.withZoneUTC(); [EOL]     f.parseDateTime("5"); [EOL]     f.parseDateTime("005"); [EOL]     f.parseDateTime("+50"); [EOL]     f.parseDateTime("-50"); [EOL] }
public void testFormat_yearOfEra_twoDigit() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "04", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "23", f.print(dt)); [EOL]     f = f.withZoneUTC(); [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(1922, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("22")); [EOL]     expect = new DateTime(2021, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("21")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = f.withPivotYear(new Integer(2050)); [EOL]     expect = new DateTime(2000, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("00")); [EOL]     expect = new DateTime(2099, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("99")); [EOL]     f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     f = f.withZoneUTC(); [EOL]     f.parseDateTime("5"); [EOL]     f.parseDateTime("005"); [EOL]     f.parseDateTime("+50"); [EOL]     f.parseDateTime("-50"); [EOL] }
public void testFormat_yearOfEra_twoDigit() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "04", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "23", f.print(dt)); [EOL]     f = f.withZoneUTC(); [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(1922, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("22")); [EOL]     expect = new DateTime(2021, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("21")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = f.withPivotYear(new Integer(2050)); [EOL]     expect = new DateTime(2000, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("00")); [EOL]     expect = new DateTime(2099, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("99")); [EOL]     f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     f = f.withZoneUTC(); [EOL]     f.parseDateTime("5"); [EOL]     f.parseDateTime("005"); [EOL]     f.parseDateTime("+50"); [EOL]     f.parseDateTime("-50"); [EOL] }
public void testFormat_yearOfEra_twoDigit() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "04", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "23", f.print(dt)); [EOL]     f = f.withZoneUTC(); [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(1922, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("22")); [EOL]     expect = new DateTime(2021, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("21")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = f.withPivotYear(new Integer(2050)); [EOL]     expect = new DateTime(2000, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("00")); [EOL]     expect = new DateTime(2099, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("99")); [EOL]     f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     f = f.withZoneUTC(); [EOL]     f.parseDateTime("5"); [EOL]     f.parseDateTime("005"); [EOL]     f.parseDateTime("+50"); [EOL]     f.parseDateTime("-50"); [EOL] }
public void testFormat_yearOfEra_twoDigit() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "04", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "23", f.print(dt)); [EOL]     f = f.withZoneUTC(); [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(1922, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("22")); [EOL]     expect = new DateTime(2021, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("21")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = f.withPivotYear(new Integer(2050)); [EOL]     expect = new DateTime(2000, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("00")); [EOL]     expect = new DateTime(2099, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("99")); [EOL]     f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     f = f.withZoneUTC(); [EOL]     f.parseDateTime("5"); [EOL]     f.parseDateTime("005"); [EOL]     f.parseDateTime("+50"); [EOL]     f.parseDateTime("-50"); [EOL] }
public void testFormat_yearOfEra_twoDigit() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "04", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "23", f.print(dt)); [EOL]     f = f.withZoneUTC(); [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(1922, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("22")); [EOL]     expect = new DateTime(2021, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("21")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = f.withPivotYear(new Integer(2050)); [EOL]     expect = new DateTime(2000, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("00")); [EOL]     expect = new DateTime(2099, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("99")); [EOL]     f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     f = f.withZoneUTC(); [EOL]     f.parseDateTime("5"); [EOL]     f.parseDateTime("005"); [EOL]     f.parseDateTime("+50"); [EOL]     f.parseDateTime("-50"); [EOL] }
public void testFormat_yearOfEra_twoDigit() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "04", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "23", f.print(dt)); [EOL]     f = f.withZoneUTC(); [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(1922, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("22")); [EOL]     expect = new DateTime(2021, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("21")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = f.withPivotYear(new Integer(2050)); [EOL]     expect = new DateTime(2000, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("00")); [EOL]     expect = new DateTime(2099, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("99")); [EOL]     f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     f = f.withZoneUTC(); [EOL]     f.parseDateTime("5"); [EOL]     f.parseDateTime("005"); [EOL]     f.parseDateTime("+50"); [EOL]     f.parseDateTime("-50"); [EOL] }
public void testFormat_yearOfEra_twoDigit() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "04", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "23", f.print(dt)); [EOL]     f = f.withZoneUTC(); [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(1922, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("22")); [EOL]     expect = new DateTime(2021, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("21")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = f.withPivotYear(new Integer(2050)); [EOL]     expect = new DateTime(2000, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("00")); [EOL]     expect = new DateTime(2099, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("99")); [EOL]     f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     f = f.withZoneUTC(); [EOL]     f.parseDateTime("5"); [EOL]     f.parseDateTime("005"); [EOL]     f.parseDateTime("+50"); [EOL]     f.parseDateTime("-50"); [EOL] }
public void testFormat_yearOfEra_twoDigit() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "04", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "23", f.print(dt)); [EOL]     f = f.withZoneUTC(); [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(1922, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("22")); [EOL]     expect = new DateTime(2021, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("21")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = f.withPivotYear(new Integer(2050)); [EOL]     expect = new DateTime(2000, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("00")); [EOL]     expect = new DateTime(2099, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("99")); [EOL]     f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     f = f.withZoneUTC(); [EOL]     f.parseDateTime("5"); [EOL]     f.parseDateTime("005"); [EOL]     f.parseDateTime("+50"); [EOL]     f.parseDateTime("-50"); [EOL] }
public void testParseDateTime_simple_precedence() { [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 6, 9, 11, 20, 30, 0, LONDON); [EOL]     assertEquals(expect, f.parseDateTime("Wed 2004-06-09T10:20:30Z")); [EOL]     expect = new DateTime(2004, 6, 7, 11, 20, 30, 0, LONDON); [EOL]     assertEquals(expect, f.parseDateTime("Mon 2004-06-09T10:20:30Z")); [EOL] }
public void testParseDateTime_simple_precedence() { [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 6, 9, 11, 20, 30, 0, LONDON); [EOL]     assertEquals(expect, f.parseDateTime("Wed 2004-06-09T10:20:30Z")); [EOL]     expect = new DateTime(2004, 6, 7, 11, 20, 30, 0, LONDON); [EOL]     assertEquals(expect, f.parseDateTime("Mon 2004-06-09T10:20:30Z")); [EOL] }
public void testParseDateTime_simple_precedence() { [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 6, 9, 11, 20, 30, 0, LONDON); [EOL]     assertEquals(expect, f.parseDateTime("Wed 2004-06-09T10:20:30Z")); [EOL]     expect = new DateTime(2004, 6, 7, 11, 20, 30, 0, LONDON); [EOL]     assertEquals(expect, f.parseDateTime("Mon 2004-06-09T10:20:30Z")); [EOL] }
public void testParseDateTime_simple_precedence() { [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 6, 9, 11, 20, 30, 0, LONDON); [EOL]     assertEquals(expect, f.parseDateTime("Wed 2004-06-09T10:20:30Z")); [EOL]     expect = new DateTime(2004, 6, 7, 11, 20, 30, 0, LONDON); [EOL]     assertEquals(expect, f.parseDateTime("Mon 2004-06-09T10:20:30Z")); [EOL] }
public void testParseDateTime_simple_precedence() { [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 6, 9, 11, 20, 30, 0, LONDON); [EOL]     assertEquals(expect, f.parseDateTime("Wed 2004-06-09T10:20:30Z")); [EOL]     expect = new DateTime(2004, 6, 7, 11, 20, 30, 0, LONDON); [EOL]     assertEquals(expect, f.parseDateTime("Mon 2004-06-09T10:20:30Z")); [EOL] }
public void testConstructor_ObjectString2() throws Throwable { [EOL]     TimeOfDay test = new TimeOfDay("10:20:30.040+04:00"); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(10 + OFFSET - 4, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL] }
public void testConstructor_ObjectString2() throws Throwable { [EOL]     TimeOfDay test = new TimeOfDay("10:20:30.040+04:00"); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(10 + OFFSET - 4, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL] }
public void testConstructor_ObjectString2() throws Throwable { [EOL]     TimeOfDay test = new TimeOfDay("10:20:30.040+04:00"); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(10 + OFFSET - 4, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL] }
public void testConstructor_ObjectString2() throws Throwable { [EOL]     TimeOfDay test = new TimeOfDay("10:20:30.040+04:00"); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(10 + OFFSET - 4, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL] }
public void testConstructor_ObjectString2() throws Throwable { [EOL]     TimeOfDay test = new TimeOfDay("10:20:30.040+04:00"); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(10 + OFFSET - 4, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL] }
public void testConstructor_ObjectString2() throws Throwable { [EOL]     TimeOfDay test = new TimeOfDay("10:20:30.040+04:00"); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(10 + OFFSET - 4, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL] }
public void test_basicTTimeNoMillis() { [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL]     DateTimeFormatter parser = ISODateTimeFormat.basicTTimeNoMillis(); [EOL]     assertParse(parser, "T102030Z", new DateTime(1970, 1, 1, 10, 20, 30, 0)); [EOL]     assertParse(parser, false, "T10203Z"); [EOL]     assertParse(parser, false, "T1020Z"); [EOL]     assertParse(parser, false, "T102Z"); [EOL]     assertParse(parser, false, "T10Z"); [EOL]     assertParse(parser, false, "T1Z"); [EOL] }
public void test_printParseZoneParis() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneId(); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, PARIS); [EOL]     assertEquals("2007-03-04 12:30 Europe/Paris", f.print(dt)); [EOL]     assertEquals(dt, f.parseDateTime("2007-03-04 12:30 Europe/Paris")); [EOL]     assertEquals(dt, f.withOffsetParsed().parseDateTime("2007-03-04 12:30 Europe/Paris")); [EOL] }
public void test_printParseZoneParis() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneId(); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, PARIS); [EOL]     assertEquals("2007-03-04 12:30 Europe/Paris", f.print(dt)); [EOL]     assertEquals(dt, f.parseDateTime("2007-03-04 12:30 Europe/Paris")); [EOL]     assertEquals(dt, f.withOffsetParsed().parseDateTime("2007-03-04 12:30 Europe/Paris")); [EOL] }
public void test_printParseZoneParis() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneId(); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, PARIS); [EOL]     assertEquals("2007-03-04 12:30 Europe/Paris", f.print(dt)); [EOL]     assertEquals(dt, f.parseDateTime("2007-03-04 12:30 Europe/Paris")); [EOL]     assertEquals(dt, f.withOffsetParsed().parseDateTime("2007-03-04 12:30 Europe/Paris")); [EOL] }
public void test_printParseZoneParis() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneId(); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, PARIS); [EOL]     assertEquals("2007-03-04 12:30 Europe/Paris", f.print(dt)); [EOL]     assertEquals(dt, f.parseDateTime("2007-03-04 12:30 Europe/Paris")); [EOL]     assertEquals(dt, f.withOffsetParsed().parseDateTime("2007-03-04 12:30 Europe/Paris")); [EOL] }
public void test_printParseZoneParis() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneId(); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, PARIS); [EOL]     assertEquals("2007-03-04 12:30 Europe/Paris", f.print(dt)); [EOL]     assertEquals(dt, f.parseDateTime("2007-03-04 12:30 Europe/Paris")); [EOL]     assertEquals(dt, f.withOffsetParsed().parseDateTime("2007-03-04 12:30 Europe/Paris")); [EOL] }
public void test_appendOptional_Parser() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendLiteral('Y'); [EOL]     DateTimeParser p = bld.toParser(); [EOL]     DateTimeFormatterBuilder bld2 = new DateTimeFormatterBuilder(); [EOL]     bld2.appendLiteral('X'); [EOL]     bld2.appendOptional(p); [EOL]     bld2.appendLiteral('Z'); [EOL]     DateTimeFormatter f = bld2.toFormatter(); [EOL]     assertEquals(false, f.isPrinter()); [EOL]     assertEquals(true, f.isParser()); [EOL]     assertEquals(0, f.withZoneUTC().parseMillis("XYZ")); [EOL] }
public void test_appendOptional_Parser() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendLiteral('Y'); [EOL]     DateTimeParser p = bld.toParser(); [EOL]     DateTimeFormatterBuilder bld2 = new DateTimeFormatterBuilder(); [EOL]     bld2.appendLiteral('X'); [EOL]     bld2.appendOptional(p); [EOL]     bld2.appendLiteral('Z'); [EOL]     DateTimeFormatter f = bld2.toFormatter(); [EOL]     assertEquals(false, f.isPrinter()); [EOL]     assertEquals(true, f.isParser()); [EOL]     assertEquals(0, f.withZoneUTC().parseMillis("XYZ")); [EOL] }
public void testConstructor_ObjectString2() throws Throwable { [EOL]     TimeOfDay test = new TimeOfDay("10:20:30.040+04:00"); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(10 + OFFSET - 4, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL] }
public void testFactory_FromDateFields_null() throws Exception { [EOL]     try { [EOL]         TimeOfDay.fromDateFields(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_FromDateFields_null() throws Exception { [EOL]     try { [EOL]         TimeOfDay.fromDateFields(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGetField() { [EOL]     TimeOfDay test = new TimeOfDay(COPTIC_PARIS); [EOL]     assertSame(CopticChronology.getInstanceUTC().hourOfDay(), test.getField(0)); [EOL]     assertSame(CopticChronology.getInstanceUTC().minuteOfHour(), test.getField(1)); [EOL]     assertSame(CopticChronology.getInstanceUTC().secondOfMinute(), test.getField(2)); [EOL]     assertSame(CopticChronology.getInstanceUTC().millisOfSecond(), test.getField(3)); [EOL]     try { [EOL]         test.getField(-1); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         test.getField(5); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] }
public void testGetField() { [EOL]     TimeOfDay test = new TimeOfDay(COPTIC_PARIS); [EOL]     assertSame(CopticChronology.getInstanceUTC().hourOfDay(), test.getField(0)); [EOL]     assertSame(CopticChronology.getInstanceUTC().minuteOfHour(), test.getField(1)); [EOL]     assertSame(CopticChronology.getInstanceUTC().secondOfMinute(), test.getField(2)); [EOL]     assertSame(CopticChronology.getInstanceUTC().millisOfSecond(), test.getField(3)); [EOL]     try { [EOL]         test.getField(-1); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         test.getField(5); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] }
public void testGetField() { [EOL]     TimeOfDay test = new TimeOfDay(COPTIC_PARIS); [EOL]     assertSame(CopticChronology.getInstanceUTC().hourOfDay(), test.getField(0)); [EOL]     assertSame(CopticChronology.getInstanceUTC().minuteOfHour(), test.getField(1)); [EOL]     assertSame(CopticChronology.getInstanceUTC().secondOfMinute(), test.getField(2)); [EOL]     assertSame(CopticChronology.getInstanceUTC().millisOfSecond(), test.getField(3)); [EOL]     try { [EOL]         test.getField(-1); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         test.getField(5); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] }
public void testGetField() { [EOL]     TimeOfDay test = new TimeOfDay(COPTIC_PARIS); [EOL]     assertSame(CopticChronology.getInstanceUTC().hourOfDay(), test.getField(0)); [EOL]     assertSame(CopticChronology.getInstanceUTC().minuteOfHour(), test.getField(1)); [EOL]     assertSame(CopticChronology.getInstanceUTC().secondOfMinute(), test.getField(2)); [EOL]     assertSame(CopticChronology.getInstanceUTC().millisOfSecond(), test.getField(3)); [EOL]     try { [EOL]         test.getField(-1); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         test.getField(5); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] }
public void testGetField() { [EOL]     TimeOfDay test = new TimeOfDay(COPTIC_PARIS); [EOL]     assertSame(CopticChronology.getInstanceUTC().hourOfDay(), test.getField(0)); [EOL]     assertSame(CopticChronology.getInstanceUTC().minuteOfHour(), test.getField(1)); [EOL]     assertSame(CopticChronology.getInstanceUTC().secondOfMinute(), test.getField(2)); [EOL]     assertSame(CopticChronology.getInstanceUTC().millisOfSecond(), test.getField(3)); [EOL]     try { [EOL]         test.getField(-1); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         test.getField(5); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] }
public void testGetField() { [EOL]     TimeOfDay test = new TimeOfDay(COPTIC_PARIS); [EOL]     assertSame(CopticChronology.getInstanceUTC().hourOfDay(), test.getField(0)); [EOL]     assertSame(CopticChronology.getInstanceUTC().minuteOfHour(), test.getField(1)); [EOL]     assertSame(CopticChronology.getInstanceUTC().secondOfMinute(), test.getField(2)); [EOL]     assertSame(CopticChronology.getInstanceUTC().millisOfSecond(), test.getField(3)); [EOL]     try { [EOL]         test.getField(-1); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         test.getField(5); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] }
public void testGetField() { [EOL]     TimeOfDay test = new TimeOfDay(COPTIC_PARIS); [EOL]     assertSame(CopticChronology.getInstanceUTC().hourOfDay(), test.getField(0)); [EOL]     assertSame(CopticChronology.getInstanceUTC().minuteOfHour(), test.getField(1)); [EOL]     assertSame(CopticChronology.getInstanceUTC().secondOfMinute(), test.getField(2)); [EOL]     assertSame(CopticChronology.getInstanceUTC().millisOfSecond(), test.getField(3)); [EOL]     try { [EOL]         test.getField(-1); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         test.getField(5); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] }
public void testGetField() { [EOL]     TimeOfDay test = new TimeOfDay(COPTIC_PARIS); [EOL]     assertSame(CopticChronology.getInstanceUTC().hourOfDay(), test.getField(0)); [EOL]     assertSame(CopticChronology.getInstanceUTC().minuteOfHour(), test.getField(1)); [EOL]     assertSame(CopticChronology.getInstanceUTC().secondOfMinute(), test.getField(2)); [EOL]     assertSame(CopticChronology.getInstanceUTC().millisOfSecond(), test.getField(3)); [EOL]     try { [EOL]         test.getField(-1); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         test.getField(5); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] }
public void testGetField() { [EOL]     TimeOfDay test = new TimeOfDay(COPTIC_PARIS); [EOL]     assertSame(CopticChronology.getInstanceUTC().hourOfDay(), test.getField(0)); [EOL]     assertSame(CopticChronology.getInstanceUTC().minuteOfHour(), test.getField(1)); [EOL]     assertSame(CopticChronology.getInstanceUTC().secondOfMinute(), test.getField(2)); [EOL]     assertSame(CopticChronology.getInstanceUTC().millisOfSecond(), test.getField(3)); [EOL]     try { [EOL]         test.getField(-1); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         test.getField(5); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] }
public void testGetField() { [EOL]     TimeOfDay test = new TimeOfDay(COPTIC_PARIS); [EOL]     assertSame(CopticChronology.getInstanceUTC().hourOfDay(), test.getField(0)); [EOL]     assertSame(CopticChronology.getInstanceUTC().minuteOfHour(), test.getField(1)); [EOL]     assertSame(CopticChronology.getInstanceUTC().secondOfMinute(), test.getField(2)); [EOL]     assertSame(CopticChronology.getInstanceUTC().millisOfSecond(), test.getField(3)); [EOL]     try { [EOL]         test.getField(-1); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         test.getField(5); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] }
public void testGetField() { [EOL]     TimeOfDay test = new TimeOfDay(COPTIC_PARIS); [EOL]     assertSame(CopticChronology.getInstanceUTC().hourOfDay(), test.getField(0)); [EOL]     assertSame(CopticChronology.getInstanceUTC().minuteOfHour(), test.getField(1)); [EOL]     assertSame(CopticChronology.getInstanceUTC().secondOfMinute(), test.getField(2)); [EOL]     assertSame(CopticChronology.getInstanceUTC().millisOfSecond(), test.getField(3)); [EOL]     try { [EOL]         test.getField(-1); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         test.getField(5); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] }
public void testGetField() { [EOL]     TimeOfDay test = new TimeOfDay(COPTIC_PARIS); [EOL]     assertSame(CopticChronology.getInstanceUTC().hourOfDay(), test.getField(0)); [EOL]     assertSame(CopticChronology.getInstanceUTC().minuteOfHour(), test.getField(1)); [EOL]     assertSame(CopticChronology.getInstanceUTC().secondOfMinute(), test.getField(2)); [EOL]     assertSame(CopticChronology.getInstanceUTC().millisOfSecond(), test.getField(3)); [EOL]     try { [EOL]         test.getField(-1); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         test.getField(5); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] }
public void testGetField() { [EOL]     TimeOfDay test = new TimeOfDay(COPTIC_PARIS); [EOL]     assertSame(CopticChronology.getInstanceUTC().hourOfDay(), test.getField(0)); [EOL]     assertSame(CopticChronology.getInstanceUTC().minuteOfHour(), test.getField(1)); [EOL]     assertSame(CopticChronology.getInstanceUTC().secondOfMinute(), test.getField(2)); [EOL]     assertSame(CopticChronology.getInstanceUTC().millisOfSecond(), test.getField(3)); [EOL]     try { [EOL]         test.getField(-1); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         test.getField(5); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] }
public void testConstructor_int_int() throws Throwable { [EOL]     TimeOfDay test = new TimeOfDay(10, 20); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(10, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(0, test.getSecondOfMinute()); [EOL]     assertEquals(0, test.getMillisOfSecond()); [EOL]     try { [EOL]         new TimeOfDay(-1, 20); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new TimeOfDay(24, 20); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new TimeOfDay(10, -1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new TimeOfDay(10, 60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testConstructor_int_int() throws Throwable { [EOL]     TimeOfDay test = new TimeOfDay(10, 20); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(10, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(0, test.getSecondOfMinute()); [EOL]     assertEquals(0, test.getMillisOfSecond()); [EOL]     try { [EOL]         new TimeOfDay(-1, 20); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new TimeOfDay(24, 20); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new TimeOfDay(10, -1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new TimeOfDay(10, 60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testConstructor_int_int() throws Throwable { [EOL]     TimeOfDay test = new TimeOfDay(10, 20); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(10, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(0, test.getSecondOfMinute()); [EOL]     assertEquals(0, test.getMillisOfSecond()); [EOL]     try { [EOL]         new TimeOfDay(-1, 20); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new TimeOfDay(24, 20); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new TimeOfDay(10, -1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new TimeOfDay(10, 60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testConstructor_int_int() throws Throwable { [EOL]     TimeOfDay test = new TimeOfDay(10, 20); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(10, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(0, test.getSecondOfMinute()); [EOL]     assertEquals(0, test.getMillisOfSecond()); [EOL]     try { [EOL]         new TimeOfDay(-1, 20); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new TimeOfDay(24, 20); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new TimeOfDay(10, -1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new TimeOfDay(10, 60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testConstructor_int_int() throws Throwable { [EOL]     TimeOfDay test = new TimeOfDay(10, 20); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(10, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(0, test.getSecondOfMinute()); [EOL]     assertEquals(0, test.getMillisOfSecond()); [EOL]     try { [EOL]         new TimeOfDay(-1, 20); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new TimeOfDay(24, 20); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new TimeOfDay(10, -1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new TimeOfDay(10, 60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testConstructor_int_int() throws Throwable { [EOL]     TimeOfDay test = new TimeOfDay(10, 20); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(10, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(0, test.getSecondOfMinute()); [EOL]     assertEquals(0, test.getMillisOfSecond()); [EOL]     try { [EOL]         new TimeOfDay(-1, 20); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new TimeOfDay(24, 20); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new TimeOfDay(10, -1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new TimeOfDay(10, 60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testConstructor_int_int_int() throws Throwable { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(10, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(0, test.getMillisOfSecond()); [EOL]     try { [EOL]         new TimeOfDay(-1, 20, 30); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new TimeOfDay(24, 20, 30); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new TimeOfDay(10, -1, 30); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new TimeOfDay(10, 60, 30); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new TimeOfDay(10, 20, -1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new TimeOfDay(10, 20, 60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testConstructor_int_int_int() throws Throwable { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(10, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(0, test.getMillisOfSecond()); [EOL]     try { [EOL]         new TimeOfDay(-1, 20, 30); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new TimeOfDay(24, 20, 30); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new TimeOfDay(10, -1, 30); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new TimeOfDay(10, 60, 30); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new TimeOfDay(10, 20, -1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new TimeOfDay(10, 20, 60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testConstructor_int_int_int() throws Throwable { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(10, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(0, test.getMillisOfSecond()); [EOL]     try { [EOL]         new TimeOfDay(-1, 20, 30); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new TimeOfDay(24, 20, 30); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new TimeOfDay(10, -1, 30); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new TimeOfDay(10, 60, 30); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new TimeOfDay(10, 20, -1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new TimeOfDay(10, 20, 60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithChronologyRetainFields_Chrono() { [EOL]     TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); [EOL]     TimeOfDay test = base.withChronologyRetainFields(BUDDHIST_TOKYO); [EOL]     check(base, 10, 20, 30, 40); [EOL]     assertEquals(COPTIC_UTC, base.getChronology()); [EOL]     check(test, 10, 20, 30, 40); [EOL]     assertEquals(BUDDHIST_UTC, test.getChronology()); [EOL] }
public void testWithChronologyRetainFields_Chrono() { [EOL]     TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); [EOL]     TimeOfDay test = base.withChronologyRetainFields(BUDDHIST_TOKYO); [EOL]     check(base, 10, 20, 30, 40); [EOL]     assertEquals(COPTIC_UTC, base.getChronology()); [EOL]     check(test, 10, 20, 30, 40); [EOL]     assertEquals(BUDDHIST_UTC, test.getChronology()); [EOL] }
public void testWithChronologyRetainFields_Chrono() { [EOL]     TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); [EOL]     TimeOfDay test = base.withChronologyRetainFields(BUDDHIST_TOKYO); [EOL]     check(base, 10, 20, 30, 40); [EOL]     assertEquals(COPTIC_UTC, base.getChronology()); [EOL]     check(test, 10, 20, 30, 40); [EOL]     assertEquals(BUDDHIST_UTC, test.getChronology()); [EOL] }
public void testGetField() { [EOL]     TimeOfDay test = new TimeOfDay(COPTIC_PARIS); [EOL]     assertSame(CopticChronology.getInstanceUTC().hourOfDay(), test.getField(0)); [EOL]     assertSame(CopticChronology.getInstanceUTC().minuteOfHour(), test.getField(1)); [EOL]     assertSame(CopticChronology.getInstanceUTC().secondOfMinute(), test.getField(2)); [EOL]     assertSame(CopticChronology.getInstanceUTC().millisOfSecond(), test.getField(3)); [EOL]     try { [EOL]         test.getField(-1); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         test.getField(5); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] }
public void testGetFieldTypes() { [EOL]     TimeOfDay test = new TimeOfDay(COPTIC_PARIS); [EOL]     DateTimeFieldType[] fields = test.getFieldTypes(); [EOL]     assertSame(DateTimeFieldType.hourOfDay(), fields[0]); [EOL]     assertSame(DateTimeFieldType.minuteOfHour(), fields[1]); [EOL]     assertSame(DateTimeFieldType.secondOfMinute(), fields[2]); [EOL]     assertSame(DateTimeFieldType.millisOfSecond(), fields[3]); [EOL]     assertNotSame(test.getFieldTypes(), test.getFieldTypes()); [EOL] }
public void testWithChronologyRetainFields_Chrono() { [EOL]     TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); [EOL]     TimeOfDay test = base.withChronologyRetainFields(BUDDHIST_TOKYO); [EOL]     check(base, 10, 20, 30, 40); [EOL]     assertEquals(COPTIC_UTC, base.getChronology()); [EOL]     check(test, 10, 20, 30, 40); [EOL]     assertEquals(BUDDHIST_UTC, test.getChronology()); [EOL] }
public void testMinusSeconds_int() { [EOL]     TimeOfDay test = new TimeOfDay(1, 2, 3, 4, BuddhistChronology.getInstance()); [EOL]     TimeOfDay result = test.minusSeconds(1); [EOL]     TimeOfDay expected = new TimeOfDay(1, 2, 2, 4, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusSeconds(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusMillis_int() { [EOL]     TimeOfDay test = new TimeOfDay(1, 2, 3, 4, BuddhistChronology.getInstance()); [EOL]     TimeOfDay result = test.plusMillis(1); [EOL]     TimeOfDay expected = new TimeOfDay(1, 2, 3, 5, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusMillis(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusSeconds_int() { [EOL]     TimeOfDay test = new TimeOfDay(1, 2, 3, 4, BuddhistChronology.getInstance()); [EOL]     TimeOfDay result = test.minusSeconds(1); [EOL]     TimeOfDay expected = new TimeOfDay(1, 2, 2, 4, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusSeconds(0); [EOL]     assertSame(test, result); [EOL] }
public void testPropertySetTextHour() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.hourOfDay().setCopy("12"); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 12, 20, 30, 40); [EOL] }
public void testPropertySetTextHour() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.hourOfDay().setCopy("12"); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 12, 20, 30, 40); [EOL] }
public void testPropertySetTextHour() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.hourOfDay().setCopy("12"); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 12, 20, 30, 40); [EOL] }
public void testPropertySetTextHour() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.hourOfDay().setCopy("12"); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 12, 20, 30, 40); [EOL] }
public void testPropertySetTextHour() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.hourOfDay().setCopy("12"); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 12, 20, 30, 40); [EOL] }
public void testPropertySetTextHour() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.hourOfDay().setCopy("12"); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 12, 20, 30, 40); [EOL] }
public void testPropertySetTextHour() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.hourOfDay().setCopy("12"); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 12, 20, 30, 40); [EOL] }
public void testPropertySetTextHour() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.hourOfDay().setCopy("12"); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 12, 20, 30, 40); [EOL] }
public void testPropertySetTextHour() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.hourOfDay().setCopy("12"); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 12, 20, 30, 40); [EOL] }
public void testPropertySetTextHour() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.hourOfDay().setCopy("12"); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 12, 20, 30, 40); [EOL] }
public void testPropertySetTextHour() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.hourOfDay().setCopy("12"); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 12, 20, 30, 40); [EOL] }
public void testPropertySetTextHour() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.hourOfDay().setCopy("12"); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 12, 20, 30, 40); [EOL] }
public void testPropertySetTextHour() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.hourOfDay().setCopy("12"); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 12, 20, 30, 40); [EOL] }
public void testPropertySetTextHour() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.hourOfDay().setCopy("12"); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 12, 20, 30, 40); [EOL] }
public void testPropertySetTextHour() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.hourOfDay().setCopy("12"); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 12, 20, 30, 40); [EOL] }
public void testPropertyAddNoWrapMilli() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.millisOfSecond().addNoWrapToCopy(9); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 20, 30, 49); [EOL]     copy = test.millisOfSecond().addNoWrapToCopy(959); [EOL]     check(copy, 10, 20, 30, 999); [EOL]     copy = test.millisOfSecond().addNoWrapToCopy(960); [EOL]     check(copy, 10, 20, 31, 0); [EOL]     copy = test.millisOfSecond().addNoWrapToCopy(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 959); [EOL]     check(copy, 23, 59, 59, 999); [EOL]     try { [EOL]         test.millisOfSecond().addNoWrapToCopy(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 960); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 10, 20, 30, 40); [EOL]     copy = test.millisOfSecond().addNoWrapToCopy(-9); [EOL]     check(copy, 10, 20, 30, 31); [EOL]     copy = test.millisOfSecond().addNoWrapToCopy(-40); [EOL]     check(copy, 10, 20, 30, 0); [EOL]     copy = test.millisOfSecond().addNoWrapToCopy(-41); [EOL]     check(copy, 10, 20, 29, 999); [EOL]     copy = test.millisOfSecond().addNoWrapToCopy(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 40)); [EOL]     check(copy, 0, 0, 0, 0); [EOL]     try { [EOL]         test.millisOfSecond().addNoWrapToCopy(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 41)); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 10, 20, 30, 40); [EOL] }
public void testPropertyAddNoWrapMilli() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.millisOfSecond().addNoWrapToCopy(9); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 20, 30, 49); [EOL]     copy = test.millisOfSecond().addNoWrapToCopy(959); [EOL]     check(copy, 10, 20, 30, 999); [EOL]     copy = test.millisOfSecond().addNoWrapToCopy(960); [EOL]     check(copy, 10, 20, 31, 0); [EOL]     copy = test.millisOfSecond().addNoWrapToCopy(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 959); [EOL]     check(copy, 23, 59, 59, 999); [EOL]     try { [EOL]         test.millisOfSecond().addNoWrapToCopy(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 960); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 10, 20, 30, 40); [EOL]     copy = test.millisOfSecond().addNoWrapToCopy(-9); [EOL]     check(copy, 10, 20, 30, 31); [EOL]     copy = test.millisOfSecond().addNoWrapToCopy(-40); [EOL]     check(copy, 10, 20, 30, 0); [EOL]     copy = test.millisOfSecond().addNoWrapToCopy(-41); [EOL]     check(copy, 10, 20, 29, 999); [EOL]     copy = test.millisOfSecond().addNoWrapToCopy(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 40)); [EOL]     check(copy, 0, 0, 0, 0); [EOL]     try { [EOL]         test.millisOfSecond().addNoWrapToCopy(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 41)); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 10, 20, 30, 40); [EOL] }
public void testPropertyAddNoWrapMilli() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.millisOfSecond().addNoWrapToCopy(9); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 20, 30, 49); [EOL]     copy = test.millisOfSecond().addNoWrapToCopy(959); [EOL]     check(copy, 10, 20, 30, 999); [EOL]     copy = test.millisOfSecond().addNoWrapToCopy(960); [EOL]     check(copy, 10, 20, 31, 0); [EOL]     copy = test.millisOfSecond().addNoWrapToCopy(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 959); [EOL]     check(copy, 23, 59, 59, 999); [EOL]     try { [EOL]         test.millisOfSecond().addNoWrapToCopy(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 960); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 10, 20, 30, 40); [EOL]     copy = test.millisOfSecond().addNoWrapToCopy(-9); [EOL]     check(copy, 10, 20, 30, 31); [EOL]     copy = test.millisOfSecond().addNoWrapToCopy(-40); [EOL]     check(copy, 10, 20, 30, 0); [EOL]     copy = test.millisOfSecond().addNoWrapToCopy(-41); [EOL]     check(copy, 10, 20, 29, 999); [EOL]     copy = test.millisOfSecond().addNoWrapToCopy(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 40)); [EOL]     check(copy, 0, 0, 0, 0); [EOL]     try { [EOL]         test.millisOfSecond().addNoWrapToCopy(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 41)); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 10, 20, 30, 40); [EOL] }
public void testPropertyAddNoWrapMilli() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.millisOfSecond().addNoWrapToCopy(9); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 20, 30, 49); [EOL]     copy = test.millisOfSecond().addNoWrapToCopy(959); [EOL]     check(copy, 10, 20, 30, 999); [EOL]     copy = test.millisOfSecond().addNoWrapToCopy(960); [EOL]     check(copy, 10, 20, 31, 0); [EOL]     copy = test.millisOfSecond().addNoWrapToCopy(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 959); [EOL]     check(copy, 23, 59, 59, 999); [EOL]     try { [EOL]         test.millisOfSecond().addNoWrapToCopy(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 960); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 10, 20, 30, 40); [EOL]     copy = test.millisOfSecond().addNoWrapToCopy(-9); [EOL]     check(copy, 10, 20, 30, 31); [EOL]     copy = test.millisOfSecond().addNoWrapToCopy(-40); [EOL]     check(copy, 10, 20, 30, 0); [EOL]     copy = test.millisOfSecond().addNoWrapToCopy(-41); [EOL]     check(copy, 10, 20, 29, 999); [EOL]     copy = test.millisOfSecond().addNoWrapToCopy(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 40)); [EOL]     check(copy, 0, 0, 0, 0); [EOL]     try { [EOL]         test.millisOfSecond().addNoWrapToCopy(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 41)); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 10, 20, 30, 40); [EOL] }
public void testPropertyAddNoWrapMilli() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.millisOfSecond().addNoWrapToCopy(9); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 20, 30, 49); [EOL]     copy = test.millisOfSecond().addNoWrapToCopy(959); [EOL]     check(copy, 10, 20, 30, 999); [EOL]     copy = test.millisOfSecond().addNoWrapToCopy(960); [EOL]     check(copy, 10, 20, 31, 0); [EOL]     copy = test.millisOfSecond().addNoWrapToCopy(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 959); [EOL]     check(copy, 23, 59, 59, 999); [EOL]     try { [EOL]         test.millisOfSecond().addNoWrapToCopy(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 960); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 10, 20, 30, 40); [EOL]     copy = test.millisOfSecond().addNoWrapToCopy(-9); [EOL]     check(copy, 10, 20, 30, 31); [EOL]     copy = test.millisOfSecond().addNoWrapToCopy(-40); [EOL]     check(copy, 10, 20, 30, 0); [EOL]     copy = test.millisOfSecond().addNoWrapToCopy(-41); [EOL]     check(copy, 10, 20, 29, 999); [EOL]     copy = test.millisOfSecond().addNoWrapToCopy(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 40)); [EOL]     check(copy, 0, 0, 0, 0); [EOL]     try { [EOL]         test.millisOfSecond().addNoWrapToCopy(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 41)); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 10, 20, 30, 40); [EOL] }
public void testPropertySetTextHour() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.hourOfDay().setCopy("12"); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 12, 20, 30, 40); [EOL] }
public void testPropertySetTextHour() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.hourOfDay().setCopy("12"); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 12, 20, 30, 40); [EOL] }
public void testPropertySetTextHour() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.hourOfDay().setCopy("12"); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 12, 20, 30, 40); [EOL] }
public void testPropertySetTextHour() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.hourOfDay().setCopy("12"); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 12, 20, 30, 40); [EOL] }
public void testPropertyWithMaximumValueHour() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.hourOfDay().withMaximumValue(); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 23, 20, 30, 40); [EOL] }
public void testOverlaps_RInterval() { [EOL]     MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     assertEquals(false, test.overlaps(new Interval(TEST_TIME1, TEST_TIME1))); [EOL]     assertEquals(false, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME1))); [EOL]     assertEquals(true, test.overlaps(new Interval(TEST_TIME1, TEST_TIME1 + 1))); [EOL]     assertEquals(true, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME1 + 1))); [EOL]     assertEquals(true, test.overlaps(new Interval(TEST_TIME1 + 1, TEST_TIME1 + 1))); [EOL]     assertEquals(true, test.overlaps(new Interval(TEST_TIME1, TEST_TIME2))); [EOL]     assertEquals(true, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME2))); [EOL]     assertEquals(true, test.overlaps(new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2))); [EOL]     assertEquals(false, test.overlaps(new Interval(TEST_TIME2, TEST_TIME2))); [EOL]     assertEquals(true, test.overlaps(new Interval(TEST_TIME2 - 1, TEST_TIME2))); [EOL]     assertEquals(true, test.overlaps(new Interval(TEST_TIME1, TEST_TIME2 + 1))); [EOL]     assertEquals(true, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME2 + 1))); [EOL]     assertEquals(true, test.overlaps(new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2 + 1))); [EOL]     assertEquals(false, test.overlaps(new Interval(TEST_TIME2, TEST_TIME2 + 1))); [EOL]     assertEquals(true, test.overlaps(new Interval(TEST_TIME2 - 1, TEST_TIME2 + 1))); [EOL]     assertEquals(false, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME1 - 1))); [EOL]     assertEquals(false, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME1))); [EOL]     assertEquals(true, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME1 + 1))); [EOL]     assertEquals(true, test.overlaps((ReadableInterval) null)); [EOL]     MutableInterval empty = new MutableInterval(TEST_TIME1, TEST_TIME1); [EOL]     assertEquals(false, empty.overlaps(empty)); [EOL]     assertEquals(false, empty.overlaps(test)); [EOL]     assertEquals(false, test.overlaps(empty)); [EOL] }
public void testOverlaps_RInterval() { [EOL]     MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     assertEquals(false, test.overlaps(new Interval(TEST_TIME1, TEST_TIME1))); [EOL]     assertEquals(false, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME1))); [EOL]     assertEquals(true, test.overlaps(new Interval(TEST_TIME1, TEST_TIME1 + 1))); [EOL]     assertEquals(true, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME1 + 1))); [EOL]     assertEquals(true, test.overlaps(new Interval(TEST_TIME1 + 1, TEST_TIME1 + 1))); [EOL]     assertEquals(true, test.overlaps(new Interval(TEST_TIME1, TEST_TIME2))); [EOL]     assertEquals(true, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME2))); [EOL]     assertEquals(true, test.overlaps(new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2))); [EOL]     assertEquals(false, test.overlaps(new Interval(TEST_TIME2, TEST_TIME2))); [EOL]     assertEquals(true, test.overlaps(new Interval(TEST_TIME2 - 1, TEST_TIME2))); [EOL]     assertEquals(true, test.overlaps(new Interval(TEST_TIME1, TEST_TIME2 + 1))); [EOL]     assertEquals(true, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME2 + 1))); [EOL]     assertEquals(true, test.overlaps(new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2 + 1))); [EOL]     assertEquals(false, test.overlaps(new Interval(TEST_TIME2, TEST_TIME2 + 1))); [EOL]     assertEquals(true, test.overlaps(new Interval(TEST_TIME2 - 1, TEST_TIME2 + 1))); [EOL]     assertEquals(false, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME1 - 1))); [EOL]     assertEquals(false, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME1))); [EOL]     assertEquals(true, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME1 + 1))); [EOL]     assertEquals(true, test.overlaps((ReadableInterval) null)); [EOL]     MutableInterval empty = new MutableInterval(TEST_TIME1, TEST_TIME1); [EOL]     assertEquals(false, empty.overlaps(empty)); [EOL]     assertEquals(false, empty.overlaps(test)); [EOL]     assertEquals(false, test.overlaps(empty)); [EOL] }
public void testOverlaps_RInterval() { [EOL]     MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     assertEquals(false, test.overlaps(new Interval(TEST_TIME1, TEST_TIME1))); [EOL]     assertEquals(false, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME1))); [EOL]     assertEquals(true, test.overlaps(new Interval(TEST_TIME1, TEST_TIME1 + 1))); [EOL]     assertEquals(true, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME1 + 1))); [EOL]     assertEquals(true, test.overlaps(new Interval(TEST_TIME1 + 1, TEST_TIME1 + 1))); [EOL]     assertEquals(true, test.overlaps(new Interval(TEST_TIME1, TEST_TIME2))); [EOL]     assertEquals(true, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME2))); [EOL]     assertEquals(true, test.overlaps(new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2))); [EOL]     assertEquals(false, test.overlaps(new Interval(TEST_TIME2, TEST_TIME2))); [EOL]     assertEquals(true, test.overlaps(new Interval(TEST_TIME2 - 1, TEST_TIME2))); [EOL]     assertEquals(true, test.overlaps(new Interval(TEST_TIME1, TEST_TIME2 + 1))); [EOL]     assertEquals(true, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME2 + 1))); [EOL]     assertEquals(true, test.overlaps(new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2 + 1))); [EOL]     assertEquals(false, test.overlaps(new Interval(TEST_TIME2, TEST_TIME2 + 1))); [EOL]     assertEquals(true, test.overlaps(new Interval(TEST_TIME2 - 1, TEST_TIME2 + 1))); [EOL]     assertEquals(false, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME1 - 1))); [EOL]     assertEquals(false, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME1))); [EOL]     assertEquals(true, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME1 + 1))); [EOL]     assertEquals(true, test.overlaps((ReadableInterval) null)); [EOL]     MutableInterval empty = new MutableInterval(TEST_TIME1, TEST_TIME1); [EOL]     assertEquals(false, empty.overlaps(empty)); [EOL]     assertEquals(false, empty.overlaps(test)); [EOL]     assertEquals(false, test.overlaps(empty)); [EOL] }
public void testOverlaps_RInterval() { [EOL]     MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     assertEquals(false, test.overlaps(new Interval(TEST_TIME1, TEST_TIME1))); [EOL]     assertEquals(false, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME1))); [EOL]     assertEquals(true, test.overlaps(new Interval(TEST_TIME1, TEST_TIME1 + 1))); [EOL]     assertEquals(true, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME1 + 1))); [EOL]     assertEquals(true, test.overlaps(new Interval(TEST_TIME1 + 1, TEST_TIME1 + 1))); [EOL]     assertEquals(true, test.overlaps(new Interval(TEST_TIME1, TEST_TIME2))); [EOL]     assertEquals(true, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME2))); [EOL]     assertEquals(true, test.overlaps(new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2))); [EOL]     assertEquals(false, test.overlaps(new Interval(TEST_TIME2, TEST_TIME2))); [EOL]     assertEquals(true, test.overlaps(new Interval(TEST_TIME2 - 1, TEST_TIME2))); [EOL]     assertEquals(true, test.overlaps(new Interval(TEST_TIME1, TEST_TIME2 + 1))); [EOL]     assertEquals(true, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME2 + 1))); [EOL]     assertEquals(true, test.overlaps(new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2 + 1))); [EOL]     assertEquals(false, test.overlaps(new Interval(TEST_TIME2, TEST_TIME2 + 1))); [EOL]     assertEquals(true, test.overlaps(new Interval(TEST_TIME2 - 1, TEST_TIME2 + 1))); [EOL]     assertEquals(false, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME1 - 1))); [EOL]     assertEquals(false, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME1))); [EOL]     assertEquals(true, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME1 + 1))); [EOL]     assertEquals(true, test.overlaps((ReadableInterval) null)); [EOL]     MutableInterval empty = new MutableInterval(TEST_TIME1, TEST_TIME1); [EOL]     assertEquals(false, empty.overlaps(empty)); [EOL]     assertEquals(false, empty.overlaps(test)); [EOL]     assertEquals(false, test.overlaps(empty)); [EOL] }
public void testIsBefore_RI() { [EOL]     MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     assertEquals(false, test.isBefore(new Instant(TEST_TIME1 - 1))); [EOL]     assertEquals(false, test.isBefore(new Instant(TEST_TIME1))); [EOL]     assertEquals(false, test.isBefore(new Instant(TEST_TIME1 + 1))); [EOL]     assertEquals(false, test.isBefore(new Instant(TEST_TIME2 - 1))); [EOL]     assertEquals(true, test.isBefore(new Instant(TEST_TIME2))); [EOL]     assertEquals(true, test.isBefore(new Instant(TEST_TIME2 + 1))); [EOL]     assertEquals(false, test.isBefore((ReadableInstant) null)); [EOL] }
public void testIsBefore_RI() { [EOL]     MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     assertEquals(false, test.isBefore(new Instant(TEST_TIME1 - 1))); [EOL]     assertEquals(false, test.isBefore(new Instant(TEST_TIME1))); [EOL]     assertEquals(false, test.isBefore(new Instant(TEST_TIME1 + 1))); [EOL]     assertEquals(false, test.isBefore(new Instant(TEST_TIME2 - 1))); [EOL]     assertEquals(true, test.isBefore(new Instant(TEST_TIME2))); [EOL]     assertEquals(true, test.isBefore(new Instant(TEST_TIME2 + 1))); [EOL]     assertEquals(false, test.isBefore((ReadableInstant) null)); [EOL] }
public void testIsBefore_RI() { [EOL]     MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     assertEquals(false, test.isBefore(new Instant(TEST_TIME1 - 1))); [EOL]     assertEquals(false, test.isBefore(new Instant(TEST_TIME1))); [EOL]     assertEquals(false, test.isBefore(new Instant(TEST_TIME1 + 1))); [EOL]     assertEquals(false, test.isBefore(new Instant(TEST_TIME2 - 1))); [EOL]     assertEquals(true, test.isBefore(new Instant(TEST_TIME2))); [EOL]     assertEquals(true, test.isBefore(new Instant(TEST_TIME2 + 1))); [EOL]     assertEquals(false, test.isBefore((ReadableInstant) null)); [EOL] }
public void testToMutableInterval1() { [EOL]     MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS); [EOL]     MutableInterval result = test.toMutableInterval(); [EOL]     assertEquals(test, result); [EOL]     assertNotSame(test, result); [EOL] }
public void testTypeIndexMethods() { [EOL]     Period test = new Period(1, 0, 0, 4, 5, 6, 7, 8, PeriodType.yearDayTime()); [EOL]     assertEquals(6, test.size()); [EOL]     assertEquals(DurationFieldType.years(), test.getFieldType(0)); [EOL]     assertEquals(DurationFieldType.days(), test.getFieldType(1)); [EOL]     assertEquals(DurationFieldType.hours(), test.getFieldType(2)); [EOL]     assertEquals(DurationFieldType.minutes(), test.getFieldType(3)); [EOL]     assertEquals(DurationFieldType.seconds(), test.getFieldType(4)); [EOL]     assertEquals(DurationFieldType.millis(), test.getFieldType(5)); [EOL]     assertEquals(true, Arrays.equals(new DurationFieldType[] { DurationFieldType.years(), DurationFieldType.days(), DurationFieldType.hours(), DurationFieldType.minutes(), DurationFieldType.seconds(), DurationFieldType.millis() }, test.getFieldTypes())); [EOL] }
public void testTypeIndexMethods() { [EOL]     Period test = new Period(1, 0, 0, 4, 5, 6, 7, 8, PeriodType.yearDayTime()); [EOL]     assertEquals(6, test.size()); [EOL]     assertEquals(DurationFieldType.years(), test.getFieldType(0)); [EOL]     assertEquals(DurationFieldType.days(), test.getFieldType(1)); [EOL]     assertEquals(DurationFieldType.hours(), test.getFieldType(2)); [EOL]     assertEquals(DurationFieldType.minutes(), test.getFieldType(3)); [EOL]     assertEquals(DurationFieldType.seconds(), test.getFieldType(4)); [EOL]     assertEquals(DurationFieldType.millis(), test.getFieldType(5)); [EOL]     assertEquals(true, Arrays.equals(new DurationFieldType[] { DurationFieldType.years(), DurationFieldType.days(), DurationFieldType.hours(), DurationFieldType.minutes(), DurationFieldType.seconds(), DurationFieldType.millis() }, test.getFieldTypes())); [EOL] }
public void testParseCustom1() { [EOL]     PeriodFormatter formatter = new PeriodFormatterBuilder().printZeroAlways().appendHours().appendSuffix(":").minimumPrintedDigits(2).appendMinutes().toFormatter(); [EOL]     Period p; [EOL]     p = new Period(47, 55, 0, 0); [EOL]     assertEquals("47:55", formatter.print(p)); [EOL]     assertEquals(p, formatter.parsePeriod("47:55")); [EOL]     assertEquals(p, formatter.parsePeriod("047:055")); [EOL]     p = new Period(7, 5, 0, 0); [EOL]     assertEquals("7:05", formatter.print(p)); [EOL]     assertEquals(p, formatter.parsePeriod("7:05")); [EOL]     assertEquals(p, formatter.parsePeriod("7:5")); [EOL]     assertEquals(p, formatter.parsePeriod("07:05")); [EOL]     p = new Period(0, 5, 0, 0); [EOL]     assertEquals("0:05", formatter.print(p)); [EOL]     assertEquals(p, formatter.parsePeriod("0:05")); [EOL]     assertEquals(p, formatter.parsePeriod("0:5")); [EOL]     assertEquals(p, formatter.parsePeriod("00:005")); [EOL]     assertEquals(p, formatter.parsePeriod("0:005")); [EOL]     p = new Period(0, 0, 0, 0); [EOL]     assertEquals("0:00", formatter.print(p)); [EOL]     assertEquals(p, formatter.parsePeriod("0:00")); [EOL]     assertEquals(p, formatter.parsePeriod("0:0")); [EOL]     assertEquals(p, formatter.parsePeriod("00:00")); [EOL] }
public void testEqualsHashCode() { [EOL]     Period test1 = new Period(123L); [EOL]     Period test2 = new Period(123L); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     Period test3 = new Period(321L); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockPeriod(123L))); [EOL]     assertEquals(false, test1.equals(new Period(123L, PeriodType.dayTime()))); [EOL] }
public void testEqualsHashCode() { [EOL]     Period test1 = new Period(123L); [EOL]     Period test2 = new Period(123L); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     Period test3 = new Period(321L); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockPeriod(123L))); [EOL]     assertEquals(false, test1.equals(new Period(123L, PeriodType.dayTime()))); [EOL] }
public void testEqualsHashCode() { [EOL]     Period test1 = new Period(123L); [EOL]     Period test2 = new Period(123L); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     Period test3 = new Period(321L); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockPeriod(123L))); [EOL]     assertEquals(false, test1.equals(new Period(123L, PeriodType.dayTime()))); [EOL] }
public void testEqualsHashCode() { [EOL]     Period test1 = new Period(123L); [EOL]     Period test2 = new Period(123L); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     Period test3 = new Period(321L); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockPeriod(123L))); [EOL]     assertEquals(false, test1.equals(new Period(123L, PeriodType.dayTime()))); [EOL] }
public void testToString_PeriodFormatter() { [EOL]     Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     assertEquals("1 year, 2 months, 3 weeks, 4 days, 5 hours, 6 minutes, 7 seconds and 8 milliseconds", test.toString(PeriodFormat.getDefault())); [EOL]     test = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 milliseconds", test.toString(PeriodFormat.getDefault())); [EOL] }
public void testToString_PeriodFormatter() { [EOL]     Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     assertEquals("1 year, 2 months, 3 weeks, 4 days, 5 hours, 6 minutes, 7 seconds and 8 milliseconds", test.toString(PeriodFormat.getDefault())); [EOL]     test = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 milliseconds", test.toString(PeriodFormat.getDefault())); [EOL] }
public void testToPeriod() { [EOL]     MutablePeriod test = new MutablePeriod(123L); [EOL]     Period result = test.toPeriod(); [EOL]     assertEquals(test, result); [EOL] }
public void testToPeriod() { [EOL]     MutablePeriod test = new MutablePeriod(123L); [EOL]     Period result = test.toPeriod(); [EOL]     assertEquals(test, result); [EOL] }
public void testToPeriod() { [EOL]     MutablePeriod test = new MutablePeriod(123L); [EOL]     Period result = test.toPeriod(); [EOL]     assertEquals(test, result); [EOL] }
public void testToPeriod() { [EOL]     MutablePeriod test = new MutablePeriod(123L); [EOL]     Period result = test.toPeriod(); [EOL]     assertEquals(test, result); [EOL] }
public void testClear() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.clear(); [EOL]     assertEquals(new MutablePeriod(), test); [EOL]     test = new MutablePeriod(1, 2, 0, 4, 5, 6, 7, 8, PeriodType.yearMonthDayTime()); [EOL]     test.clear(); [EOL]     assertEquals(new MutablePeriod(PeriodType.yearMonthDayTime()), test); [EOL] }
public void testAdd_RD3() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.add((ReadableDuration) null); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(3, test.getWeeks()); [EOL]     assertEquals(4, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] }
public void testAdd_RD3() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.add((ReadableDuration) null); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(3, test.getWeeks()); [EOL]     assertEquals(4, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] }
public void testMergePeriod_RP5() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.mergePeriod((ReadablePeriod) null); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(3, test.getWeeks()); [EOL]     assertEquals(4, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] }
public void testAddYears() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addYears(10); [EOL]     assertEquals(11, test.getYears()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addYears(-10); [EOL]     assertEquals(-9, test.getYears()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addYears(0); [EOL]     assertEquals(1, test.getYears()); [EOL] }
public void testAddYears() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addYears(10); [EOL]     assertEquals(11, test.getYears()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addYears(-10); [EOL]     assertEquals(-9, test.getYears()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addYears(0); [EOL]     assertEquals(1, test.getYears()); [EOL] }
public void testAddYears() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addYears(10); [EOL]     assertEquals(11, test.getYears()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addYears(-10); [EOL]     assertEquals(-9, test.getYears()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addYears(0); [EOL]     assertEquals(1, test.getYears()); [EOL] }
public void test_roundCeiling_long() { [EOL]     BaseDateTimeField field = new MockPreciseDurationDateTimeField(); [EOL]     assertEquals(-60L, field.roundCeiling(-61L)); [EOL]     assertEquals(-60L, field.roundCeiling(-60L)); [EOL]     assertEquals(0L, field.roundCeiling(-59L)); [EOL]     assertEquals(0L, field.roundCeiling(-1L)); [EOL]     assertEquals(0L, field.roundCeiling(0L)); [EOL]     assertEquals(60L, field.roundCeiling(1L)); [EOL]     assertEquals(60L, field.roundCeiling(29L)); [EOL]     assertEquals(60L, field.roundCeiling(30L)); [EOL]     assertEquals(60L, field.roundCeiling(31L)); [EOL]     assertEquals(60L, field.roundCeiling(60L)); [EOL] }
public void test_roundCeiling_long() { [EOL]     BaseDateTimeField field = new MockPreciseDurationDateTimeField(); [EOL]     assertEquals(-60L, field.roundCeiling(-61L)); [EOL]     assertEquals(-60L, field.roundCeiling(-60L)); [EOL]     assertEquals(0L, field.roundCeiling(-59L)); [EOL]     assertEquals(0L, field.roundCeiling(-1L)); [EOL]     assertEquals(0L, field.roundCeiling(0L)); [EOL]     assertEquals(60L, field.roundCeiling(1L)); [EOL]     assertEquals(60L, field.roundCeiling(29L)); [EOL]     assertEquals(60L, field.roundCeiling(30L)); [EOL]     assertEquals(60L, field.roundCeiling(31L)); [EOL]     assertEquals(60L, field.roundCeiling(60L)); [EOL] }
public void test_roundCeiling_long() { [EOL]     BaseDateTimeField field = new MockPreciseDurationDateTimeField(); [EOL]     assertEquals(-60L, field.roundCeiling(-61L)); [EOL]     assertEquals(-60L, field.roundCeiling(-60L)); [EOL]     assertEquals(0L, field.roundCeiling(-59L)); [EOL]     assertEquals(0L, field.roundCeiling(-1L)); [EOL]     assertEquals(0L, field.roundCeiling(0L)); [EOL]     assertEquals(60L, field.roundCeiling(1L)); [EOL]     assertEquals(60L, field.roundCeiling(29L)); [EOL]     assertEquals(60L, field.roundCeiling(30L)); [EOL]     assertEquals(60L, field.roundCeiling(31L)); [EOL]     assertEquals(60L, field.roundCeiling(60L)); [EOL] }
public void testFormat_yearOfEra_twoDigit() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "04", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "23", f.print(dt)); [EOL]     f = f.withZoneUTC(); [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(1922, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("22")); [EOL]     expect = new DateTime(2021, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("21")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = f.withPivotYear(new Integer(2050)); [EOL]     expect = new DateTime(2000, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("00")); [EOL]     expect = new DateTime(2099, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("99")); [EOL]     f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     f = f.withZoneUTC(); [EOL]     f.parseDateTime("5"); [EOL]     f.parseDateTime("005"); [EOL]     f.parseDateTime("+50"); [EOL]     f.parseDateTime("-50"); [EOL] }
public void testFormat_yearOfEra_twoDigit() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "04", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "23", f.print(dt)); [EOL]     f = f.withZoneUTC(); [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(1922, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("22")); [EOL]     expect = new DateTime(2021, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("21")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = f.withPivotYear(new Integer(2050)); [EOL]     expect = new DateTime(2000, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("00")); [EOL]     expect = new DateTime(2099, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("99")); [EOL]     f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     f = f.withZoneUTC(); [EOL]     f.parseDateTime("5"); [EOL]     f.parseDateTime("005"); [EOL]     f.parseDateTime("+50"); [EOL]     f.parseDateTime("-50"); [EOL] }
public void testFormat_yearOfEra_twoDigit() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "04", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "23", f.print(dt)); [EOL]     f = f.withZoneUTC(); [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(1922, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("22")); [EOL]     expect = new DateTime(2021, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("21")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = f.withPivotYear(new Integer(2050)); [EOL]     expect = new DateTime(2000, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("00")); [EOL]     expect = new DateTime(2099, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("99")); [EOL]     f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     f = f.withZoneUTC(); [EOL]     f.parseDateTime("5"); [EOL]     f.parseDateTime("005"); [EOL]     f.parseDateTime("+50"); [EOL]     f.parseDateTime("-50"); [EOL] }
public void testFormat_yearOfEra_twoDigit() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "04", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "23", f.print(dt)); [EOL]     f = f.withZoneUTC(); [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(1922, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("22")); [EOL]     expect = new DateTime(2021, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("21")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = f.withPivotYear(new Integer(2050)); [EOL]     expect = new DateTime(2000, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("00")); [EOL]     expect = new DateTime(2099, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("99")); [EOL]     f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     f = f.withZoneUTC(); [EOL]     f.parseDateTime("5"); [EOL]     f.parseDateTime("005"); [EOL]     f.parseDateTime("+50"); [EOL]     f.parseDateTime("-50"); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testConstructor_RI_RI4() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2005, 7, 17, 1, 1, 1, 1); [EOL]     DateTime dt2 = null; [EOL]     Period test = new Period(dt1, dt2); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(-3, test.getYears()); [EOL]     assertEquals(-1, test.getMonths()); [EOL]     assertEquals(-1, test.getWeeks()); [EOL]     assertEquals(-1, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(-1, test.getMinutes()); [EOL]     assertEquals(-1, test.getSeconds()); [EOL]     assertEquals(-1, test.getMillis()); [EOL] }
public void testConstructor_RI_RI4() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2005, 7, 17, 1, 1, 1, 1); [EOL]     DateTime dt2 = null; [EOL]     Period test = new Period(dt1, dt2); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(-3, test.getYears()); [EOL]     assertEquals(-1, test.getMonths()); [EOL]     assertEquals(-1, test.getWeeks()); [EOL]     assertEquals(-1, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(-1, test.getMinutes()); [EOL]     assertEquals(-1, test.getSeconds()); [EOL]     assertEquals(-1, test.getMillis()); [EOL] }
public void testConstructor_RI_RI4() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2005, 7, 17, 1, 1, 1, 1); [EOL]     DateTime dt2 = null; [EOL]     Period test = new Period(dt1, dt2); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(-3, test.getYears()); [EOL]     assertEquals(-1, test.getMonths()); [EOL]     assertEquals(-1, test.getWeeks()); [EOL]     assertEquals(-1, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(-1, test.getMinutes()); [EOL]     assertEquals(-1, test.getSeconds()); [EOL]     assertEquals(-1, test.getMillis()); [EOL] }
public void testFormat_yearOfEra_twoDigit() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "04", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "23", f.print(dt)); [EOL]     f = f.withZoneUTC(); [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(1922, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("22")); [EOL]     expect = new DateTime(2021, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("21")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = f.withPivotYear(new Integer(2050)); [EOL]     expect = new DateTime(2000, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("00")); [EOL]     expect = new DateTime(2099, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("99")); [EOL]     f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     f = f.withZoneUTC(); [EOL]     f.parseDateTime("5"); [EOL]     f.parseDateTime("005"); [EOL]     f.parseDateTime("+50"); [EOL]     f.parseDateTime("-50"); [EOL] }
public void testFormat_yearOfEra_twoDigit() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "04", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "23", f.print(dt)); [EOL]     f = f.withZoneUTC(); [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(1922, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("22")); [EOL]     expect = new DateTime(2021, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("21")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = f.withPivotYear(new Integer(2050)); [EOL]     expect = new DateTime(2000, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("00")); [EOL]     expect = new DateTime(2099, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("99")); [EOL]     f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     f = f.withZoneUTC(); [EOL]     f.parseDateTime("5"); [EOL]     f.parseDateTime("005"); [EOL]     f.parseDateTime("+50"); [EOL]     f.parseDateTime("-50"); [EOL] }
public void testFormat_yearOfEra_twoDigit() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "04", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "23", f.print(dt)); [EOL]     f = f.withZoneUTC(); [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(1922, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("22")); [EOL]     expect = new DateTime(2021, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("21")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = f.withPivotYear(new Integer(2050)); [EOL]     expect = new DateTime(2000, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("00")); [EOL]     expect = new DateTime(2099, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("99")); [EOL]     f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     f = f.withZoneUTC(); [EOL]     f.parseDateTime("5"); [EOL]     f.parseDateTime("005"); [EOL]     f.parseDateTime("+50"); [EOL]     f.parseDateTime("-50"); [EOL] }
public void testFormatParse_textMonthApr_Korean() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("EEEE, d MMMM yyyy HH:mm").withLocale(Locale.KOREAN).withZoneUTC(); [EOL]     String str = new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     assertEquals(new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC), date); [EOL] }
public void test_printParseZoneParis() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneId(); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, PARIS); [EOL]     assertEquals("2007-03-04 12:30 Europe/Paris", f.print(dt)); [EOL]     assertEquals(dt, f.parseDateTime("2007-03-04 12:30 Europe/Paris")); [EOL]     assertEquals(dt, f.withOffsetParsed().parseDateTime("2007-03-04 12:30 Europe/Paris")); [EOL] }
public void test_printParseZoneParis() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneId(); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, PARIS); [EOL]     assertEquals("2007-03-04 12:30 Europe/Paris", f.print(dt)); [EOL]     assertEquals(dt, f.parseDateTime("2007-03-04 12:30 Europe/Paris")); [EOL]     assertEquals(dt, f.withOffsetParsed().parseDateTime("2007-03-04 12:30 Europe/Paris")); [EOL] }
public void testFormat_yearOfEra_twoDigit() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "04", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "23", f.print(dt)); [EOL]     f = f.withZoneUTC(); [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(1922, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("22")); [EOL]     expect = new DateTime(2021, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("21")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = f.withPivotYear(new Integer(2050)); [EOL]     expect = new DateTime(2000, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("00")); [EOL]     expect = new DateTime(2099, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("99")); [EOL]     f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     f = f.withZoneUTC(); [EOL]     f.parseDateTime("5"); [EOL]     f.parseDateTime("005"); [EOL]     f.parseDateTime("+50"); [EOL]     f.parseDateTime("-50"); [EOL] }
public void testFormatParse_textMonthApr_Korean() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("EEEE, d MMMM yyyy HH:mm").withLocale(Locale.KOREAN).withZoneUTC(); [EOL]     String str = new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     assertEquals(new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC), date); [EOL] }
public void testFormatParse_textMonthApr_Korean() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("EEEE, d MMMM yyyy HH:mm").withLocale(Locale.KOREAN).withZoneUTC(); [EOL]     String str = new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     assertEquals(new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC), date); [EOL] }
public void testFormatParse_textMonthApr_Korean() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("EEEE, d MMMM yyyy HH:mm").withLocale(Locale.KOREAN).withZoneUTC(); [EOL]     String str = new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     assertEquals(new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC), date); [EOL] }
public void testFormatParse_textMonthApr_Korean() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("EEEE, d MMMM yyyy HH:mm").withLocale(Locale.KOREAN).withZoneUTC(); [EOL]     String str = new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     assertEquals(new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC), date); [EOL] }
public void testParse_noFormatter() throws Throwable { [EOL]     assertEquals(new DateTime(2010, 6, 30, 0, 20, ISOChronology.getInstance(LONDON)).toInstant(), Instant.parse("2010-06-30T01:20+02:00")); [EOL]     assertEquals(new DateTime(2010, 1, 2, 14, 50, ISOChronology.getInstance(LONDON)).toInstant(), Instant.parse("2010-002T14:50")); [EOL] }
public void testFormatParse_textMonthApr_Korean() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("EEEE, d MMMM yyyy HH:mm").withLocale(Locale.KOREAN).withZoneUTC(); [EOL]     String str = new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     assertEquals(new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC), date); [EOL] }
public void testFormatParse_textMonthApr_Korean() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("EEEE, d MMMM yyyy HH:mm").withLocale(Locale.KOREAN).withZoneUTC(); [EOL]     String str = new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     assertEquals(new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC), date); [EOL] }
public void testFormatParse_textMonthApr_Korean() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("EEEE, d MMMM yyyy HH:mm").withLocale(Locale.KOREAN).withZoneUTC(); [EOL]     String str = new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     assertEquals(new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC), date); [EOL] }
public void testFormatParse_textMonthApr_Korean() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("EEEE, d MMMM yyyy HH:mm").withLocale(Locale.KOREAN).withZoneUTC(); [EOL]     String str = new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     assertEquals(new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC), date); [EOL] }
public void testFormatParse_textMonthApr_Korean() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("EEEE, d MMMM yyyy HH:mm").withLocale(Locale.KOREAN).withZoneUTC(); [EOL]     String str = new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     assertEquals(new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC), date); [EOL] }
public void testFormatParse_textMonthApr_Korean() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("EEEE, d MMMM yyyy HH:mm").withLocale(Locale.KOREAN).withZoneUTC(); [EOL]     String str = new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     assertEquals(new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC), date); [EOL] }
public void testFormatParse_textMonthApr_Korean() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("EEEE, d MMMM yyyy HH:mm").withLocale(Locale.KOREAN).withZoneUTC(); [EOL]     String str = new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     assertEquals(new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC), date); [EOL] }
public void testFormatParse_textMonthApr_Korean() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("EEEE, d MMMM yyyy HH:mm").withLocale(Locale.KOREAN).withZoneUTC(); [EOL]     String str = new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     assertEquals(new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC), date); [EOL] }
public void testFormatParse_textMonthApr_Korean() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("EEEE, d MMMM yyyy HH:mm").withLocale(Locale.KOREAN).withZoneUTC(); [EOL]     String str = new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     assertEquals(new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC), date); [EOL] }
public void testFormatParse_textMonthApr_Korean() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("EEEE, d MMMM yyyy HH:mm").withLocale(Locale.KOREAN).withZoneUTC(); [EOL]     String str = new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     assertEquals(new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC), date); [EOL] }
public void test_add_long_int() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals(1001, field.add(1L, 1)); [EOL] }
public void test_add_long_long() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals(1001, field.add(1L, 1L)); [EOL] }
public void test_addWrapField_long_int() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals(29 * 1000L, field.addWrapField(1000L * 29, 0)); [EOL]     assertEquals(59 * 1000L, field.addWrapField(1000L * 29, 30)); [EOL]     assertEquals(0L, field.addWrapField(1000L * 29, 31)); [EOL] }
public void test_addWrapField_long_int() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals(29 * 1000L, field.addWrapField(1000L * 29, 0)); [EOL]     assertEquals(59 * 1000L, field.addWrapField(1000L * 29, 30)); [EOL]     assertEquals(0L, field.addWrapField(1000L * 29, 31)); [EOL] }
public void test_addWrapField_long_int() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals(29 * 1000L, field.addWrapField(1000L * 29, 0)); [EOL]     assertEquals(59 * 1000L, field.addWrapField(1000L * 29, 30)); [EOL]     assertEquals(0L, field.addWrapField(1000L * 29, 31)); [EOL] }
public void test_addWrapField_long_int() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals(29 * 1000L, field.addWrapField(1000L * 29, 0)); [EOL]     assertEquals(59 * 1000L, field.addWrapField(1000L * 29, 30)); [EOL]     assertEquals(0L, field.addWrapField(1000L * 29, 31)); [EOL] }
public void test_roundHalfFloor_long() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals(0L, field.roundHalfFloor(0L)); [EOL]     assertEquals(0L, field.roundHalfFloor(499L)); [EOL]     assertEquals(0L, field.roundHalfFloor(500L)); [EOL]     assertEquals(1000L, field.roundHalfFloor(501L)); [EOL]     assertEquals(1000L, field.roundHalfFloor(1000L)); [EOL] }
public void test_remainder_long() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals(0L, field.remainder(0L)); [EOL]     assertEquals(499L, field.remainder(499L)); [EOL]     assertEquals(500L, field.remainder(500L)); [EOL]     assertEquals(501L, field.remainder(501L)); [EOL]     assertEquals(0L, field.remainder(1000L)); [EOL] }
public void testSerialization() throws Exception { [EOL]     LocalDate test = new LocalDate(1972, 6, 9, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     LocalDate result = (LocalDate) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testSerialization() throws Exception { [EOL]     LocalDate test = new LocalDate(1972, 6, 9, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     LocalDate result = (LocalDate) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testSerialization() throws Exception { [EOL]     LocalDate test = new LocalDate(1972, 6, 9, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     LocalDate result = (LocalDate) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testSerialization() throws Exception { [EOL]     LocalDate test = new LocalDate(1972, 6, 9, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     LocalDate result = (LocalDate) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testSerialization() throws Exception { [EOL]     LocalDate test = new LocalDate(1972, 6, 9, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     LocalDate result = (LocalDate) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testSerialization() throws Exception { [EOL]     LocalDate test = new LocalDate(1972, 6, 9, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     LocalDate result = (LocalDate) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testSerialization() throws Exception { [EOL]     LocalDate test = new LocalDate(1972, 6, 9, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     LocalDate result = (LocalDate) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testSerialization() throws Exception { [EOL]     LocalDate test = new LocalDate(1972, 6, 9, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     LocalDate result = (LocalDate) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testSerialization() throws Exception { [EOL]     LocalDate test = new LocalDate(1972, 6, 9, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     LocalDate result = (LocalDate) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testSerialization() throws Exception { [EOL]     LocalDate test = new LocalDate(1972, 6, 9, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     LocalDate result = (LocalDate) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testSerialization() throws Exception { [EOL]     LocalDate test = new LocalDate(1972, 6, 9, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     LocalDate result = (LocalDate) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testSerialization() throws Exception { [EOL]     LocalDate test = new LocalDate(1972, 6, 9, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     LocalDate result = (LocalDate) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testSerialization() throws Exception { [EOL]     LocalDate test = new LocalDate(1972, 6, 9, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     LocalDate result = (LocalDate) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testSerialization() throws Exception { [EOL]     LocalDate test = new LocalDate(1972, 6, 9, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     LocalDate result = (LocalDate) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testForFields_weekBased_YW() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.weekyear(), DateTimeFieldType.weekOfWeekyear() }; [EOL]     int[] values = new int[] { 2005, 8 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005-W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("2005W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void testForFields_weekBased_YW() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.weekyear(), DateTimeFieldType.weekOfWeekyear() }; [EOL]     int[] values = new int[] { 2005, 8 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005-W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("2005W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] }
public void testGetMethods() { [EOL]     Days test = Days.days(20); [EOL]     assertEquals(20, test.getDays()); [EOL] }
public void testGetMethods() { [EOL]     Days test = Days.days(20); [EOL]     assertEquals(20, test.getDays()); [EOL] }
public void testGetMethods() { [EOL]     Days test = Days.days(20); [EOL]     assertEquals(20, test.getDays()); [EOL] }
public void testGetMethods() { [EOL]     Days test = Days.days(20); [EOL]     assertEquals(20, test.getDays()); [EOL] }
public void testGetMethods() { [EOL]     Days test = Days.days(20); [EOL]     assertEquals(20, test.getDays()); [EOL] }
public void testGetMethods() { [EOL]     Days test = Days.days(20); [EOL]     assertEquals(20, test.getDays()); [EOL] }
public void testGetMethods() { [EOL]     Days test = Days.days(20); [EOL]     assertEquals(20, test.getDays()); [EOL] }
public void testGetMethods() { [EOL]     Days test = Days.days(20); [EOL]     assertEquals(20, test.getDays()); [EOL] }
public void testGetMethods() { [EOL]     Days test = Days.days(20); [EOL]     assertEquals(20, test.getDays()); [EOL] }
public void testGetMethods() { [EOL]     Days test = Days.days(20); [EOL]     assertEquals(20, test.getDays()); [EOL] }
public void testGetMethods() { [EOL]     Days test = Days.days(20); [EOL]     assertEquals(20, test.getDays()); [EOL] }
public void testFactory_daysBetween_RInstant() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 6, 12, 12, 0, 0, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 6, 15, 18, 0, 0, 0, PARIS); [EOL]     assertEquals(3, Days.daysBetween(start, end1).getDays()); [EOL]     assertEquals(0, Days.daysBetween(start, start).getDays()); [EOL]     assertEquals(0, Days.daysBetween(end1, end1).getDays()); [EOL]     assertEquals(-3, Days.daysBetween(end1, start).getDays()); [EOL]     assertEquals(6, Days.daysBetween(start, end2).getDays()); [EOL] }
public void testGetMethods() { [EOL]     Days test = Days.days(20); [EOL]     assertEquals(20, test.getDays()); [EOL] }
public void testSerialization() throws Exception { [EOL]     Days test = Days.SEVEN; [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     Days result = (Days) ois.readObject(); [EOL]     ois.close(); [EOL]     assertSame(test, result); [EOL] }
public void testToStandardWeeks() { [EOL]     Days test = Days.days(14); [EOL]     Weeks expected = Weeks.weeks(2); [EOL]     assertEquals(expected, test.toStandardWeeks()); [EOL] }
public void testToStandardWeeks() { [EOL]     Days test = Days.days(14); [EOL]     Weeks expected = Weeks.weeks(2); [EOL]     assertEquals(expected, test.toStandardWeeks()); [EOL] }
public void testToStandardWeeks() { [EOL]     Days test = Days.days(14); [EOL]     Weeks expected = Weeks.weeks(2); [EOL]     assertEquals(expected, test.toStandardWeeks()); [EOL] }
public void testToStandardWeeks() { [EOL]     Days test = Days.days(14); [EOL]     Weeks expected = Weeks.weeks(2); [EOL]     assertEquals(expected, test.toStandardWeeks()); [EOL] }
public void testToStandardWeeks() { [EOL]     Days test = Days.days(14); [EOL]     Weeks expected = Weeks.weeks(2); [EOL]     assertEquals(expected, test.toStandardWeeks()); [EOL] }
public void testToStandardMinutes() { [EOL]     Days test = Days.days(2); [EOL]     Minutes expected = Minutes.minutes(2 * 24 * 60); [EOL]     assertEquals(expected, test.toStandardMinutes()); [EOL]     try { [EOL]         Days.MAX_VALUE.toStandardMinutes(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testToStandardMinutes() { [EOL]     Days test = Days.days(2); [EOL]     Minutes expected = Minutes.minutes(2 * 24 * 60); [EOL]     assertEquals(expected, test.toStandardMinutes()); [EOL]     try { [EOL]         Days.MAX_VALUE.toStandardMinutes(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testToStandardMinutes() { [EOL]     Days test = Days.days(2); [EOL]     Minutes expected = Minutes.minutes(2 * 24 * 60); [EOL]     assertEquals(expected, test.toStandardMinutes()); [EOL]     try { [EOL]         Days.MAX_VALUE.toStandardMinutes(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testIsGreaterThan() { [EOL]     assertEquals(true, Days.THREE.isGreaterThan(Days.TWO)); [EOL]     assertEquals(false, Days.THREE.isGreaterThan(Days.THREE)); [EOL]     assertEquals(false, Days.TWO.isGreaterThan(Days.THREE)); [EOL]     assertEquals(true, Days.ONE.isGreaterThan(null)); [EOL]     assertEquals(false, Days.days(-1).isGreaterThan(null)); [EOL] }
public void testIsGreaterThan() { [EOL]     assertEquals(true, Days.THREE.isGreaterThan(Days.TWO)); [EOL]     assertEquals(false, Days.THREE.isGreaterThan(Days.THREE)); [EOL]     assertEquals(false, Days.TWO.isGreaterThan(Days.THREE)); [EOL]     assertEquals(true, Days.ONE.isGreaterThan(null)); [EOL]     assertEquals(false, Days.days(-1).isGreaterThan(null)); [EOL] }
public void testIsGreaterThan() { [EOL]     assertEquals(true, Days.THREE.isGreaterThan(Days.TWO)); [EOL]     assertEquals(false, Days.THREE.isGreaterThan(Days.THREE)); [EOL]     assertEquals(false, Days.TWO.isGreaterThan(Days.THREE)); [EOL]     assertEquals(true, Days.ONE.isGreaterThan(null)); [EOL]     assertEquals(false, Days.days(-1).isGreaterThan(null)); [EOL] }
public void testIsGreaterThan() { [EOL]     assertEquals(true, Days.THREE.isGreaterThan(Days.TWO)); [EOL]     assertEquals(false, Days.THREE.isGreaterThan(Days.THREE)); [EOL]     assertEquals(false, Days.TWO.isGreaterThan(Days.THREE)); [EOL]     assertEquals(true, Days.ONE.isGreaterThan(null)); [EOL]     assertEquals(false, Days.days(-1).isGreaterThan(null)); [EOL] }
public void testIsLessThan() { [EOL]     assertEquals(false, Days.THREE.isLessThan(Days.TWO)); [EOL]     assertEquals(false, Days.THREE.isLessThan(Days.THREE)); [EOL]     assertEquals(true, Days.TWO.isLessThan(Days.THREE)); [EOL]     assertEquals(false, Days.ONE.isLessThan(null)); [EOL]     assertEquals(true, Days.days(-1).isLessThan(null)); [EOL] }
public void testIsLessThan() { [EOL]     assertEquals(false, Days.THREE.isLessThan(Days.TWO)); [EOL]     assertEquals(false, Days.THREE.isLessThan(Days.THREE)); [EOL]     assertEquals(true, Days.TWO.isLessThan(Days.THREE)); [EOL]     assertEquals(false, Days.ONE.isLessThan(null)); [EOL]     assertEquals(true, Days.days(-1).isLessThan(null)); [EOL] }
public void testIsLessThan() { [EOL]     assertEquals(false, Days.THREE.isLessThan(Days.TWO)); [EOL]     assertEquals(false, Days.THREE.isLessThan(Days.THREE)); [EOL]     assertEquals(true, Days.TWO.isLessThan(Days.THREE)); [EOL]     assertEquals(false, Days.ONE.isLessThan(null)); [EOL]     assertEquals(true, Days.days(-1).isLessThan(null)); [EOL] }
public void testIsLessThan() { [EOL]     assertEquals(false, Days.THREE.isLessThan(Days.TWO)); [EOL]     assertEquals(false, Days.THREE.isLessThan(Days.THREE)); [EOL]     assertEquals(true, Days.TWO.isLessThan(Days.THREE)); [EOL]     assertEquals(false, Days.ONE.isLessThan(null)); [EOL]     assertEquals(true, Days.days(-1).isLessThan(null)); [EOL] }
public void testIsLessThan() { [EOL]     assertEquals(false, Days.THREE.isLessThan(Days.TWO)); [EOL]     assertEquals(false, Days.THREE.isLessThan(Days.THREE)); [EOL]     assertEquals(true, Days.TWO.isLessThan(Days.THREE)); [EOL]     assertEquals(false, Days.ONE.isLessThan(null)); [EOL]     assertEquals(true, Days.days(-1).isLessThan(null)); [EOL] }
public void testSerialization() throws Exception { [EOL]     LocalDate test = new LocalDate(1972, 6, 9, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     LocalDate result = (LocalDate) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testDurationFields() { [EOL]     final JulianChronology julian = JulianChronology.getInstance(); [EOL]     assertEquals("eras", julian.eras().getName()); [EOL]     assertEquals("centuries", julian.centuries().getName()); [EOL]     assertEquals("years", julian.years().getName()); [EOL]     assertEquals("weekyears", julian.weekyears().getName()); [EOL]     assertEquals("months", julian.months().getName()); [EOL]     assertEquals("weeks", julian.weeks().getName()); [EOL]     assertEquals("days", julian.days().getName()); [EOL]     assertEquals("halfdays", julian.halfdays().getName()); [EOL]     assertEquals("hours", julian.hours().getName()); [EOL]     assertEquals("minutes", julian.minutes().getName()); [EOL]     assertEquals("seconds", julian.seconds().getName()); [EOL]     assertEquals("millis", julian.millis().getName()); [EOL]     assertEquals(false, julian.eras().isSupported()); [EOL]     assertEquals(true, julian.centuries().isSupported()); [EOL]     assertEquals(true, julian.years().isSupported()); [EOL]     assertEquals(true, julian.weekyears().isSupported()); [EOL]     assertEquals(true, julian.months().isSupported()); [EOL]     assertEquals(true, julian.weeks().isSupported()); [EOL]     assertEquals(true, julian.days().isSupported()); [EOL]     assertEquals(true, julian.halfdays().isSupported()); [EOL]     assertEquals(true, julian.hours().isSupported()); [EOL]     assertEquals(true, julian.minutes().isSupported()); [EOL]     assertEquals(true, julian.seconds().isSupported()); [EOL]     assertEquals(true, julian.millis().isSupported()); [EOL]     assertEquals(false, julian.centuries().isPrecise()); [EOL]     assertEquals(false, julian.years().isPrecise()); [EOL]     assertEquals(false, julian.weekyears().isPrecise()); [EOL]     assertEquals(false, julian.months().isPrecise()); [EOL]     assertEquals(false, julian.weeks().isPrecise()); [EOL]     assertEquals(false, julian.days().isPrecise()); [EOL]     assertEquals(false, julian.halfdays().isPrecise()); [EOL]     assertEquals(true, julian.hours().isPrecise()); [EOL]     assertEquals(true, julian.minutes().isPrecise()); [EOL]     assertEquals(true, julian.seconds().isPrecise()); [EOL]     assertEquals(true, julian.millis().isPrecise()); [EOL]     final JulianChronology julianUTC = JulianChronology.getInstanceUTC(); [EOL]     assertEquals(false, julianUTC.centuries().isPrecise()); [EOL]     assertEquals(false, julianUTC.years().isPrecise()); [EOL]     assertEquals(false, julianUTC.weekyears().isPrecise()); [EOL]     assertEquals(false, julianUTC.months().isPrecise()); [EOL]     assertEquals(true, julianUTC.weeks().isPrecise()); [EOL]     assertEquals(true, julianUTC.days().isPrecise()); [EOL]     assertEquals(true, julianUTC.halfdays().isPrecise()); [EOL]     assertEquals(true, julianUTC.hours().isPrecise()); [EOL]     assertEquals(true, julianUTC.minutes().isPrecise()); [EOL]     assertEquals(true, julianUTC.seconds().isPrecise()); [EOL]     assertEquals(true, julianUTC.millis().isPrecise()); [EOL]     final DateTimeZone gmt = DateTimeZone.forID("Etc/GMT"); [EOL]     final JulianChronology julianGMT = JulianChronology.getInstance(gmt); [EOL]     assertEquals(false, julianGMT.centuries().isPrecise()); [EOL]     assertEquals(false, julianGMT.years().isPrecise()); [EOL]     assertEquals(false, julianGMT.weekyears().isPrecise()); [EOL]     assertEquals(false, julianGMT.months().isPrecise()); [EOL]     assertEquals(true, julianGMT.weeks().isPrecise()); [EOL]     assertEquals(true, julianGMT.days().isPrecise()); [EOL]     assertEquals(true, julianGMT.halfdays().isPrecise()); [EOL]     assertEquals(true, julianGMT.hours().isPrecise()); [EOL]     assertEquals(true, julianGMT.minutes().isPrecise()); [EOL]     assertEquals(true, julianGMT.seconds().isPrecise()); [EOL]     assertEquals(true, julianGMT.millis().isPrecise()); [EOL] }
public void testWithers() { [EOL]     DateTime test = new DateTime(1970, 6, 9, 10, 20, 30, 40, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     DateTime test = new DateTime(1970, 6, 9, 10, 20, 30, 40, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testSerialization() throws Exception { [EOL]     LocalDate test = new LocalDate(1972, 6, 9, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     LocalDate result = (LocalDate) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testMonthDay_leapDay() { [EOL]     MonthDay test = new MonthDay(2, 29); [EOL]     String str = StringConvert.INSTANCE.convertToString(test); [EOL]     assertEquals("--02-29", str); [EOL]     assertEquals(test, StringConvert.INSTANCE.convertFromString(MonthDay.class, str)); [EOL] }
public void testMonthDay_leapDay() { [EOL]     MonthDay test = new MonthDay(2, 29); [EOL]     String str = StringConvert.INSTANCE.convertToString(test); [EOL]     assertEquals("--02-29", str); [EOL]     assertEquals(test, StringConvert.INSTANCE.convertFromString(MonthDay.class, str)); [EOL] }
public void testMonthDay_leapDay() { [EOL]     MonthDay test = new MonthDay(2, 29); [EOL]     String str = StringConvert.INSTANCE.convertToString(test); [EOL]     assertEquals("--02-29", str); [EOL]     assertEquals(test, StringConvert.INSTANCE.convertFromString(MonthDay.class, str)); [EOL] }
public void testGetField() { [EOL]     MonthDay test = new MonthDay(COPTIC_PARIS); [EOL]     assertSame(COPTIC_UTC.monthOfYear(), test.getField(0)); [EOL]     assertSame(COPTIC_UTC.dayOfMonth(), test.getField(1)); [EOL]     try { [EOL]         test.getField(-1); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         test.getField(2); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] }
public void testMonthDay_leapDay() { [EOL]     MonthDay test = new MonthDay(2, 29); [EOL]     String str = StringConvert.INSTANCE.convertToString(test); [EOL]     assertEquals("--02-29", str); [EOL]     assertEquals(test, StringConvert.INSTANCE.convertFromString(MonthDay.class, str)); [EOL] }
public void testConstructor_DateTimeZone() throws Throwable { [EOL]     DateTime dt = new DateTime(2005, 6, 8, 23, 59, 0, 0, LONDON); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     LocalDateTime test = new LocalDateTime(LONDON); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2005, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(8, test.getDayOfMonth()); [EOL]     assertEquals(23, test.getHourOfDay()); [EOL]     assertEquals(59, test.getMinuteOfHour()); [EOL]     assertEquals(0, test.getSecondOfMinute()); [EOL]     assertEquals(0, test.getMillisOfSecond()); [EOL]     assertEquals(test, LocalDateTime.now(LONDON)); [EOL]     test = new LocalDateTime(PARIS); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2005, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(0, test.getHourOfDay()); [EOL]     assertEquals(59, test.getMinuteOfHour()); [EOL]     assertEquals(0, test.getSecondOfMinute()); [EOL]     assertEquals(0, test.getMillisOfSecond()); [EOL]     assertEquals(test, LocalDateTime.now(PARIS)); [EOL] }
public void testConstructor_DateTimeZone() throws Throwable { [EOL]     DateTime dt = new DateTime(2005, 6, 8, 23, 59, 0, 0, LONDON); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     LocalDateTime test = new LocalDateTime(LONDON); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2005, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(8, test.getDayOfMonth()); [EOL]     assertEquals(23, test.getHourOfDay()); [EOL]     assertEquals(59, test.getMinuteOfHour()); [EOL]     assertEquals(0, test.getSecondOfMinute()); [EOL]     assertEquals(0, test.getMillisOfSecond()); [EOL]     assertEquals(test, LocalDateTime.now(LONDON)); [EOL]     test = new LocalDateTime(PARIS); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2005, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(0, test.getHourOfDay()); [EOL]     assertEquals(59, test.getMinuteOfHour()); [EOL]     assertEquals(0, test.getSecondOfMinute()); [EOL]     assertEquals(0, test.getMillisOfSecond()); [EOL]     assertEquals(test, LocalDateTime.now(PARIS)); [EOL] }
public void testFactory_fromCalendarFields_null() throws Exception { [EOL]     try { [EOL]         LocalDateTime.fromCalendarFields((Calendar) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_fromCalendarFields_null() throws Exception { [EOL]     try { [EOL]         LocalDateTime.fromCalendarFields((Calendar) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_fromCalendarFields_null() throws Exception { [EOL]     try { [EOL]         LocalDateTime.fromCalendarFields((Calendar) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testConstructor_nullDateTimeZone() throws Throwable { [EOL]     LocalDateTime test = new LocalDateTime((DateTimeZone) null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(10 + OFFSET_MOSCOW, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL] }
public void testConstructor_nullDateTimeZone() throws Throwable { [EOL]     LocalDateTime test = new LocalDateTime((DateTimeZone) null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(10 + OFFSET_MOSCOW, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL] }
public void testConstructor_long_nullDateTimeZone() throws Throwable { [EOL]     LocalDateTime test = new LocalDateTime(TEST_TIME1, (DateTimeZone) null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL]     assertEquals(12 + OFFSET_MOSCOW, test.getHourOfDay()); [EOL]     assertEquals(24, test.getMinuteOfHour()); [EOL]     assertEquals(0, test.getSecondOfMinute()); [EOL]     assertEquals(0, test.getMillisOfSecond()); [EOL] }
public void testConstructor_long_nullDateTimeZone() throws Throwable { [EOL]     LocalDateTime test = new LocalDateTime(TEST_TIME1, (DateTimeZone) null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL]     assertEquals(12 + OFFSET_MOSCOW, test.getHourOfDay()); [EOL]     assertEquals(24, test.getMinuteOfHour()); [EOL]     assertEquals(0, test.getSecondOfMinute()); [EOL]     assertEquals(0, test.getMillisOfSecond()); [EOL] }
public void testIsAfter_LocalDateTime() { [EOL]     LocalDateTime test1 = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     LocalDateTime test1a = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     assertEquals(false, test1.isAfter(test1a)); [EOL]     assertEquals(false, test1a.isAfter(test1)); [EOL]     assertEquals(false, test1.isAfter(test1)); [EOL]     assertEquals(false, test1a.isAfter(test1a)); [EOL]     LocalDateTime test2 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40); [EOL]     assertEquals(false, test1.isAfter(test2)); [EOL]     assertEquals(true, test2.isAfter(test1)); [EOL]     LocalDateTime test3 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40, GREGORIAN_UTC); [EOL]     assertEquals(false, test1.isAfter(test3)); [EOL]     assertEquals(true, test3.isAfter(test1)); [EOL]     assertEquals(false, test3.isAfter(test2)); [EOL]     try { [EOL]         new LocalDateTime(2005, 7, 2, 10, 20, 30, 40).isAfter(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testIsAfter_LocalDateTime() { [EOL]     LocalDateTime test1 = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     LocalDateTime test1a = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     assertEquals(false, test1.isAfter(test1a)); [EOL]     assertEquals(false, test1a.isAfter(test1)); [EOL]     assertEquals(false, test1.isAfter(test1)); [EOL]     assertEquals(false, test1a.isAfter(test1a)); [EOL]     LocalDateTime test2 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40); [EOL]     assertEquals(false, test1.isAfter(test2)); [EOL]     assertEquals(true, test2.isAfter(test1)); [EOL]     LocalDateTime test3 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40, GREGORIAN_UTC); [EOL]     assertEquals(false, test1.isAfter(test3)); [EOL]     assertEquals(true, test3.isAfter(test1)); [EOL]     assertEquals(false, test3.isAfter(test2)); [EOL]     try { [EOL]         new LocalDateTime(2005, 7, 2, 10, 20, 30, 40).isAfter(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testIsAfter_LocalDateTime() { [EOL]     LocalDateTime test1 = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     LocalDateTime test1a = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     assertEquals(false, test1.isAfter(test1a)); [EOL]     assertEquals(false, test1a.isAfter(test1)); [EOL]     assertEquals(false, test1.isAfter(test1)); [EOL]     assertEquals(false, test1a.isAfter(test1a)); [EOL]     LocalDateTime test2 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40); [EOL]     assertEquals(false, test1.isAfter(test2)); [EOL]     assertEquals(true, test2.isAfter(test1)); [EOL]     LocalDateTime test3 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40, GREGORIAN_UTC); [EOL]     assertEquals(false, test1.isAfter(test3)); [EOL]     assertEquals(true, test3.isAfter(test1)); [EOL]     assertEquals(false, test3.isAfter(test2)); [EOL]     try { [EOL]         new LocalDateTime(2005, 7, 2, 10, 20, 30, 40).isAfter(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testIsAfter_LocalDateTime() { [EOL]     LocalDateTime test1 = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     LocalDateTime test1a = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     assertEquals(false, test1.isAfter(test1a)); [EOL]     assertEquals(false, test1a.isAfter(test1)); [EOL]     assertEquals(false, test1.isAfter(test1)); [EOL]     assertEquals(false, test1a.isAfter(test1a)); [EOL]     LocalDateTime test2 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40); [EOL]     assertEquals(false, test1.isAfter(test2)); [EOL]     assertEquals(true, test2.isAfter(test1)); [EOL]     LocalDateTime test3 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40, GREGORIAN_UTC); [EOL]     assertEquals(false, test1.isAfter(test3)); [EOL]     assertEquals(true, test3.isAfter(test1)); [EOL]     assertEquals(false, test3.isAfter(test2)); [EOL]     try { [EOL]         new LocalDateTime(2005, 7, 2, 10, 20, 30, 40).isAfter(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testIsAfter_LocalDateTime() { [EOL]     LocalDateTime test1 = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     LocalDateTime test1a = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     assertEquals(false, test1.isAfter(test1a)); [EOL]     assertEquals(false, test1a.isAfter(test1)); [EOL]     assertEquals(false, test1.isAfter(test1)); [EOL]     assertEquals(false, test1a.isAfter(test1a)); [EOL]     LocalDateTime test2 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40); [EOL]     assertEquals(false, test1.isAfter(test2)); [EOL]     assertEquals(true, test2.isAfter(test1)); [EOL]     LocalDateTime test3 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40, GREGORIAN_UTC); [EOL]     assertEquals(false, test1.isAfter(test3)); [EOL]     assertEquals(true, test3.isAfter(test1)); [EOL]     assertEquals(false, test3.isAfter(test2)); [EOL]     try { [EOL]         new LocalDateTime(2005, 7, 2, 10, 20, 30, 40).isAfter(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testIsAfter_LocalDateTime() { [EOL]     LocalDateTime test1 = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     LocalDateTime test1a = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     assertEquals(false, test1.isAfter(test1a)); [EOL]     assertEquals(false, test1a.isAfter(test1)); [EOL]     assertEquals(false, test1.isAfter(test1)); [EOL]     assertEquals(false, test1a.isAfter(test1a)); [EOL]     LocalDateTime test2 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40); [EOL]     assertEquals(false, test1.isAfter(test2)); [EOL]     assertEquals(true, test2.isAfter(test1)); [EOL]     LocalDateTime test3 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40, GREGORIAN_UTC); [EOL]     assertEquals(false, test1.isAfter(test3)); [EOL]     assertEquals(true, test3.isAfter(test1)); [EOL]     assertEquals(false, test3.isAfter(test2)); [EOL]     try { [EOL]         new LocalDateTime(2005, 7, 2, 10, 20, 30, 40).isAfter(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testIsAfter_LocalDateTime() { [EOL]     LocalDateTime test1 = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     LocalDateTime test1a = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     assertEquals(false, test1.isAfter(test1a)); [EOL]     assertEquals(false, test1a.isAfter(test1)); [EOL]     assertEquals(false, test1.isAfter(test1)); [EOL]     assertEquals(false, test1a.isAfter(test1a)); [EOL]     LocalDateTime test2 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40); [EOL]     assertEquals(false, test1.isAfter(test2)); [EOL]     assertEquals(true, test2.isAfter(test1)); [EOL]     LocalDateTime test3 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40, GREGORIAN_UTC); [EOL]     assertEquals(false, test1.isAfter(test3)); [EOL]     assertEquals(true, test3.isAfter(test1)); [EOL]     assertEquals(false, test3.isAfter(test2)); [EOL]     try { [EOL]         new LocalDateTime(2005, 7, 2, 10, 20, 30, 40).isAfter(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testIsAfter_LocalDateTime() { [EOL]     LocalDateTime test1 = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     LocalDateTime test1a = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     assertEquals(false, test1.isAfter(test1a)); [EOL]     assertEquals(false, test1a.isAfter(test1)); [EOL]     assertEquals(false, test1.isAfter(test1)); [EOL]     assertEquals(false, test1a.isAfter(test1a)); [EOL]     LocalDateTime test2 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40); [EOL]     assertEquals(false, test1.isAfter(test2)); [EOL]     assertEquals(true, test2.isAfter(test1)); [EOL]     LocalDateTime test3 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40, GREGORIAN_UTC); [EOL]     assertEquals(false, test1.isAfter(test3)); [EOL]     assertEquals(true, test3.isAfter(test1)); [EOL]     assertEquals(false, test3.isAfter(test2)); [EOL]     try { [EOL]         new LocalDateTime(2005, 7, 2, 10, 20, 30, 40).isAfter(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testIsAfter_LocalDateTime() { [EOL]     LocalDateTime test1 = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     LocalDateTime test1a = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     assertEquals(false, test1.isAfter(test1a)); [EOL]     assertEquals(false, test1a.isAfter(test1)); [EOL]     assertEquals(false, test1.isAfter(test1)); [EOL]     assertEquals(false, test1a.isAfter(test1a)); [EOL]     LocalDateTime test2 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40); [EOL]     assertEquals(false, test1.isAfter(test2)); [EOL]     assertEquals(true, test2.isAfter(test1)); [EOL]     LocalDateTime test3 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40, GREGORIAN_UTC); [EOL]     assertEquals(false, test1.isAfter(test3)); [EOL]     assertEquals(true, test3.isAfter(test1)); [EOL]     assertEquals(false, test3.isAfter(test2)); [EOL]     try { [EOL]         new LocalDateTime(2005, 7, 2, 10, 20, 30, 40).isAfter(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testIsAfter_LocalDateTime() { [EOL]     LocalDateTime test1 = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     LocalDateTime test1a = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     assertEquals(false, test1.isAfter(test1a)); [EOL]     assertEquals(false, test1a.isAfter(test1)); [EOL]     assertEquals(false, test1.isAfter(test1)); [EOL]     assertEquals(false, test1a.isAfter(test1a)); [EOL]     LocalDateTime test2 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40); [EOL]     assertEquals(false, test1.isAfter(test2)); [EOL]     assertEquals(true, test2.isAfter(test1)); [EOL]     LocalDateTime test3 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40, GREGORIAN_UTC); [EOL]     assertEquals(false, test1.isAfter(test3)); [EOL]     assertEquals(true, test3.isAfter(test1)); [EOL]     assertEquals(false, test3.isAfter(test2)); [EOL]     try { [EOL]         new LocalDateTime(2005, 7, 2, 10, 20, 30, 40).isAfter(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testIsAfter_LocalDateTime() { [EOL]     LocalDateTime test1 = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     LocalDateTime test1a = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     assertEquals(false, test1.isAfter(test1a)); [EOL]     assertEquals(false, test1a.isAfter(test1)); [EOL]     assertEquals(false, test1.isAfter(test1)); [EOL]     assertEquals(false, test1a.isAfter(test1a)); [EOL]     LocalDateTime test2 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40); [EOL]     assertEquals(false, test1.isAfter(test2)); [EOL]     assertEquals(true, test2.isAfter(test1)); [EOL]     LocalDateTime test3 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40, GREGORIAN_UTC); [EOL]     assertEquals(false, test1.isAfter(test3)); [EOL]     assertEquals(true, test3.isAfter(test1)); [EOL]     assertEquals(false, test3.isAfter(test2)); [EOL]     try { [EOL]         new LocalDateTime(2005, 7, 2, 10, 20, 30, 40).isAfter(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testIsAfter_LocalDateTime() { [EOL]     LocalDateTime test1 = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     LocalDateTime test1a = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     assertEquals(false, test1.isAfter(test1a)); [EOL]     assertEquals(false, test1a.isAfter(test1)); [EOL]     assertEquals(false, test1.isAfter(test1)); [EOL]     assertEquals(false, test1a.isAfter(test1a)); [EOL]     LocalDateTime test2 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40); [EOL]     assertEquals(false, test1.isAfter(test2)); [EOL]     assertEquals(true, test2.isAfter(test1)); [EOL]     LocalDateTime test3 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40, GREGORIAN_UTC); [EOL]     assertEquals(false, test1.isAfter(test3)); [EOL]     assertEquals(true, test3.isAfter(test1)); [EOL]     assertEquals(false, test3.isAfter(test2)); [EOL]     try { [EOL]         new LocalDateTime(2005, 7, 2, 10, 20, 30, 40).isAfter(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testIsAfter_LocalDateTime() { [EOL]     LocalDateTime test1 = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     LocalDateTime test1a = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     assertEquals(false, test1.isAfter(test1a)); [EOL]     assertEquals(false, test1a.isAfter(test1)); [EOL]     assertEquals(false, test1.isAfter(test1)); [EOL]     assertEquals(false, test1a.isAfter(test1a)); [EOL]     LocalDateTime test2 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40); [EOL]     assertEquals(false, test1.isAfter(test2)); [EOL]     assertEquals(true, test2.isAfter(test1)); [EOL]     LocalDateTime test3 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40, GREGORIAN_UTC); [EOL]     assertEquals(false, test1.isAfter(test3)); [EOL]     assertEquals(true, test3.isAfter(test1)); [EOL]     assertEquals(false, test3.isAfter(test2)); [EOL]     try { [EOL]         new LocalDateTime(2005, 7, 2, 10, 20, 30, 40).isAfter(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testToLocalTime() { [EOL]     LocalDateTime base = new LocalDateTime(2005, 6, 9, 6, 7, 8, 9, COPTIC_PARIS); [EOL]     LocalTime expected = new LocalTime(6, 7, 8, 9, COPTIC_LONDON); [EOL]     assertEquals(expected, base.toLocalTime()); [EOL] }
public void testToDate_springDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 4, 2, 0, 20, 0, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 4, 2, 0, 20, 0, 0); [EOL]         assertEquals("Mon Apr 02 01:00:00 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_springDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 4, 2, 0, 20, 0, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 4, 2, 0, 20, 0, 0); [EOL]         assertEquals("Mon Apr 02 01:00:00 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_springDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 4, 2, 0, 20, 0, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 4, 2, 0, 20, 0, 0); [EOL]         assertEquals("Mon Apr 02 01:00:00 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testWithField_DateTimeFieldType_int_2() { [EOL]     LocalDateTime test = new LocalDateTime(2004, 6, 9, 10, 20, 30, 40); [EOL]     try { [EOL]         test.withField(null, 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithField_DateTimeFieldType_int_2() { [EOL]     LocalDateTime test = new LocalDateTime(2004, 6, 9, 10, 20, 30, 40); [EOL]     try { [EOL]         test.withField(null, 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testMinus_RP() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1)); [EOL]     LocalDateTime expected = new LocalDateTime(2001, 3, 26, 9, 19, 29, 39, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlusYears_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.plusYears(1); [EOL]     LocalDateTime expected = new LocalDateTime(2003, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusYears(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusYears_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.plusYears(1); [EOL]     LocalDateTime expected = new LocalDateTime(2003, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusYears(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusYears_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.plusYears(1); [EOL]     LocalDateTime expected = new LocalDateTime(2003, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusYears(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusMonths_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.plusMonths(1); [EOL]     LocalDateTime expected = new LocalDateTime(2002, 6, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusMonths(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusMonths_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.plusMonths(1); [EOL]     LocalDateTime expected = new LocalDateTime(2002, 6, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusMonths(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusMonths_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.plusMonths(1); [EOL]     LocalDateTime expected = new LocalDateTime(2002, 6, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusMonths(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusMinutes_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.plusMinutes(1); [EOL]     LocalDateTime expected = new LocalDateTime(2002, 5, 3, 10, 21, 30, 40, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusMinutes(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusMinutes_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.plusMinutes(1); [EOL]     LocalDateTime expected = new LocalDateTime(2002, 5, 3, 10, 21, 30, 40, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusMinutes(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusMinutes_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.plusMinutes(1); [EOL]     LocalDateTime expected = new LocalDateTime(2002, 5, 3, 10, 21, 30, 40, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusMinutes(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusSeconds_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.plusSeconds(1); [EOL]     LocalDateTime expected = new LocalDateTime(2002, 5, 3, 10, 20, 31, 40, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusSeconds(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusSeconds_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.plusSeconds(1); [EOL]     LocalDateTime expected = new LocalDateTime(2002, 5, 3, 10, 20, 31, 40, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusSeconds(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusSeconds_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.plusSeconds(1); [EOL]     LocalDateTime expected = new LocalDateTime(2002, 5, 3, 10, 20, 31, 40, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusSeconds(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinus_RP() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1)); [EOL]     LocalDateTime expected = new LocalDateTime(2001, 3, 26, 9, 19, 29, 39, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testMinus_RP() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1)); [EOL]     LocalDateTime expected = new LocalDateTime(2001, 3, 26, 9, 19, 29, 39, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testMinusSeconds_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.minusSeconds(1); [EOL]     LocalDateTime expected = new LocalDateTime(2002, 5, 3, 10, 20, 29, 40, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusSeconds(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusSeconds_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.minusSeconds(1); [EOL]     LocalDateTime expected = new LocalDateTime(2002, 5, 3, 10, 20, 29, 40, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusSeconds(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusSeconds_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.minusSeconds(1); [EOL]     LocalDateTime expected = new LocalDateTime(2002, 5, 3, 10, 20, 29, 40, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusSeconds(0); [EOL]     assertSame(test, result); [EOL] }
public void testToString() { [EOL]     assertEquals("Converter[java.util.Calendar]", CalendarConverter.INSTANCE.toString()); [EOL] }
public void testGetAvailableIDs() throws Exception { [EOL]     Provider p = new UTCProvider(); [EOL]     Set set = p.getAvailableIDs(); [EOL]     assertEquals(1, set.size()); [EOL]     assertEquals("UTC", set.iterator().next()); [EOL] }
public void testGetAvailableIDs() throws Exception { [EOL]     Provider p = new UTCProvider(); [EOL]     Set set = p.getAvailableIDs(); [EOL]     assertEquals(1, set.size()); [EOL]     assertEquals("UTC", set.iterator().next()); [EOL] }
public void testParseInto_monthDay_feb29_tokyo_startOfYear() { [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("M d").withLocale(Locale.UK); [EOL]     MutableDateTime result = new MutableDateTime(2004, 1, 1, 0, 0, 0, 0, TOKYO); [EOL]     assertEquals(4, f.parseInto(result, "2 29", 0)); [EOL]     assertEquals(new MutableDateTime(2004, 2, 29, 0, 0, 0, 0, TOKYO), result); [EOL] }
public void testParseLocalDate_weekyear_month_week_2011() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("xxxx-MM-ww").withChronology(chrono); [EOL]     assertEquals(new LocalDate(2011, 1, 3, chrono), f.parseLocalDate("2011-01-01")); [EOL] }
public void testParseLocalDate_weekyear_month_week_2011() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("xxxx-MM-ww").withChronology(chrono); [EOL]     assertEquals(new LocalDate(2011, 1, 3, chrono), f.parseLocalDate("2011-01-01")); [EOL] }
public void testWithGetPivotYear() { [EOL]     DateTimeFormatter f2 = f.withPivotYear(13); [EOL]     assertEquals(new Integer(13), f2.getPivotYear()); [EOL]     assertSame(f2, f2.withPivotYear(13)); [EOL]     f2 = f.withPivotYear(new Integer(14)); [EOL]     assertEquals(new Integer(14), f2.getPivotYear()); [EOL]     assertSame(f2, f2.withPivotYear(new Integer(14))); [EOL]     f2 = f.withPivotYear(null); [EOL]     assertEquals(null, f2.getPivotYear()); [EOL]     assertSame(f2, f2.withPivotYear(null)); [EOL] }
public void testParseLocalDate_monthDay_withDefaultYear_feb29() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("M d").withChronology(chrono).withLocale(Locale.UK).withDefaultYear(2012); [EOL]     assertEquals(new LocalDate(2012, 2, 29, chrono), f.parseLocalDate("2 29")); [EOL] }
public void testParseLocalDate_monthDay_withDefaultYear_feb29() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("M d").withChronology(chrono).withLocale(Locale.UK).withDefaultYear(2012); [EOL]     assertEquals(new LocalDate(2012, 2, 29, chrono), f.parseLocalDate("2 29")); [EOL] }
public void testParseInto_monthDay_feb29_tokyo_startOfYear() { [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("M d").withLocale(Locale.UK); [EOL]     MutableDateTime result = new MutableDateTime(2004, 1, 1, 0, 0, 0, 0, TOKYO); [EOL]     assertEquals(4, f.parseInto(result, "2 29", 0)); [EOL]     assertEquals(new MutableDateTime(2004, 2, 29, 0, 0, 0, 0, TOKYO), result); [EOL] }
public void testParseInto_monthDay_feb29_tokyo_startOfYear() { [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("M d").withLocale(Locale.UK); [EOL]     MutableDateTime result = new MutableDateTime(2004, 1, 1, 0, 0, 0, 0, TOKYO); [EOL]     assertEquals(4, f.parseInto(result, "2 29", 0)); [EOL]     assertEquals(new MutableDateTime(2004, 2, 29, 0, 0, 0, 0, TOKYO), result); [EOL] }
public void testParseInto_monthDay_feb29_tokyo_startOfYear() { [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("M d").withLocale(Locale.UK); [EOL]     MutableDateTime result = new MutableDateTime(2004, 1, 1, 0, 0, 0, 0, TOKYO); [EOL]     assertEquals(4, f.parseInto(result, "2 29", 0)); [EOL]     assertEquals(new MutableDateTime(2004, 2, 29, 0, 0, 0, 0, TOKYO), result); [EOL] }
public void testParseInto_monthDay_feb29_tokyo_startOfYear() { [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("M d").withLocale(Locale.UK); [EOL]     MutableDateTime result = new MutableDateTime(2004, 1, 1, 0, 0, 0, 0, TOKYO); [EOL]     assertEquals(4, f.parseInto(result, "2 29", 0)); [EOL]     assertEquals(new MutableDateTime(2004, 2, 29, 0, 0, 0, 0, TOKYO), result); [EOL] }
public void test_basicTTimeNoMillis() { [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL]     DateTimeFormatter parser = ISODateTimeFormat.basicTTimeNoMillis(); [EOL]     assertParse(parser, "T102030Z", new DateTime(1970, 1, 1, 10, 20, 30, 0)); [EOL]     assertParse(parser, false, "T10203Z"); [EOL]     assertParse(parser, false, "T1020Z"); [EOL]     assertParse(parser, false, "T102Z"); [EOL]     assertParse(parser, false, "T10Z"); [EOL]     assertParse(parser, false, "T1Z"); [EOL] }
public void test_basicTTimeNoMillis() { [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL]     DateTimeFormatter parser = ISODateTimeFormat.basicTTimeNoMillis(); [EOL]     assertParse(parser, "T102030Z", new DateTime(1970, 1, 1, 10, 20, 30, 0)); [EOL]     assertParse(parser, false, "T10203Z"); [EOL]     assertParse(parser, false, "T1020Z"); [EOL]     assertParse(parser, false, "T102Z"); [EOL]     assertParse(parser, false, "T10Z"); [EOL]     assertParse(parser, false, "T1Z"); [EOL] }
public void test_basicTTimeNoMillis() { [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL]     DateTimeFormatter parser = ISODateTimeFormat.basicTTimeNoMillis(); [EOL]     assertParse(parser, "T102030Z", new DateTime(1970, 1, 1, 10, 20, 30, 0)); [EOL]     assertParse(parser, false, "T10203Z"); [EOL]     assertParse(parser, false, "T1020Z"); [EOL]     assertParse(parser, false, "T102Z"); [EOL]     assertParse(parser, false, "T10Z"); [EOL]     assertParse(parser, false, "T1Z"); [EOL] }
public void testParseLocalDate_weekyear_month_week_2011() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("xxxx-MM-ww").withChronology(chrono); [EOL]     assertEquals(new LocalDate(2011, 1, 3, chrono), f.parseLocalDate("2011-01-01")); [EOL] }
public void testParseLocalDate_weekyear_month_week_2011() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("xxxx-MM-ww").withChronology(chrono); [EOL]     assertEquals(new LocalDate(2011, 1, 3, chrono), f.parseLocalDate("2011-01-01")); [EOL] }
public void testParseLocalDate_weekyear_month_week_2011() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("xxxx-MM-ww").withChronology(chrono); [EOL]     assertEquals(new LocalDate(2011, 1, 3, chrono), f.parseLocalDate("2011-01-01")); [EOL] }
public void testParseLocalDate_weekyear_month_week_2011() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("xxxx-MM-ww").withChronology(chrono); [EOL]     assertEquals(new LocalDate(2011, 1, 3, chrono), f.parseLocalDate("2011-01-01")); [EOL] }
public void testParseLocalDate_weekyear_month_week_2011() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("xxxx-MM-ww").withChronology(chrono); [EOL]     assertEquals(new LocalDate(2011, 1, 3, chrono), f.parseLocalDate("2011-01-01")); [EOL] }
public void testParseLocalDate_weekyear_month_week_2011() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("xxxx-MM-ww").withChronology(chrono); [EOL]     assertEquals(new LocalDate(2011, 1, 3, chrono), f.parseLocalDate("2011-01-01")); [EOL] }
public void testParseLocalDate_weekyear_month_week_2011() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("xxxx-MM-ww").withChronology(chrono); [EOL]     assertEquals(new LocalDate(2011, 1, 3, chrono), f.parseLocalDate("2011-01-01")); [EOL] }
public void testParseLocalDate_weekyear_month_week_2011() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("xxxx-MM-ww").withChronology(chrono); [EOL]     assertEquals(new LocalDate(2011, 1, 3, chrono), f.parseLocalDate("2011-01-01")); [EOL] }
public void testParseLocalDate_weekyear_month_week_2011() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("xxxx-MM-ww").withChronology(chrono); [EOL]     assertEquals(new LocalDate(2011, 1, 3, chrono), f.parseLocalDate("2011-01-01")); [EOL] }
public void testParseLocalDate_weekyear_month_week_2011() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("xxxx-MM-ww").withChronology(chrono); [EOL]     assertEquals(new LocalDate(2011, 1, 3, chrono), f.parseLocalDate("2011-01-01")); [EOL] }
public void testParseLocalDate_weekyear_month_week_2011() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("xxxx-MM-ww").withChronology(chrono); [EOL]     assertEquals(new LocalDate(2011, 1, 3, chrono), f.parseLocalDate("2011-01-01")); [EOL] }
public void testWithPeriodBeforeEnd2() throws Throwable { [EOL]     Interval base = new Interval(TEST_TIME_NOW, TEST_TIME2, COPTIC_PARIS); [EOL]     Interval test = base.withPeriodBeforeEnd(null); [EOL]     assertEquals(new Interval(TEST_TIME2, TEST_TIME2, COPTIC_PARIS), test); [EOL] }
public void testWithPeriodBeforeEnd2() throws Throwable { [EOL]     Interval base = new Interval(TEST_TIME_NOW, TEST_TIME2, COPTIC_PARIS); [EOL]     Interval test = base.withPeriodBeforeEnd(null); [EOL]     assertEquals(new Interval(TEST_TIME2, TEST_TIME2, COPTIC_PARIS), test); [EOL] }
public void testWithPeriodBeforeEnd2() throws Throwable { [EOL]     Interval base = new Interval(TEST_TIME_NOW, TEST_TIME2, COPTIC_PARIS); [EOL]     Interval test = base.withPeriodBeforeEnd(null); [EOL]     assertEquals(new Interval(TEST_TIME2, TEST_TIME2, COPTIC_PARIS), test); [EOL] }
public void testWithPeriodBeforeEnd2() throws Throwable { [EOL]     Interval base = new Interval(TEST_TIME_NOW, TEST_TIME2, COPTIC_PARIS); [EOL]     Interval test = base.withPeriodBeforeEnd(null); [EOL]     assertEquals(new Interval(TEST_TIME2, TEST_TIME2, COPTIC_PARIS), test); [EOL] }
public void test_getMillis_long_long() { [EOL]     assertEquals(0L, MillisDurationField.INSTANCE.getMillis(0L, 567L)); [EOL]     assertEquals(1234L, MillisDurationField.INSTANCE.getMillis(1234L, 567L)); [EOL]     assertEquals(-1234L, MillisDurationField.INSTANCE.getMillis(-1234L, 567L)); [EOL] }
public void test_toString() { [EOL]     assertEquals("DurationField[millis]", MillisDurationField.INSTANCE.toString()); [EOL] }
public void testIsSupported_DateTimeFieldType() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.minuteOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.secondOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.millisOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.halfdayOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(false, test.isSupported(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(false, test.isSupported((DateTimeFieldType) null)); [EOL]     DateTimeFieldType d = new DateTimeFieldType("hours") { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         public DurationFieldType getDurationType() { [EOL]             return DurationFieldType.hours(); [EOL]         } [EOL]  [EOL]         public DurationFieldType getRangeDurationType() { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public DateTimeField getField(Chronology chronology) { [EOL]             return chronology.hourOfDay(); [EOL]         } [EOL]     }; [EOL]     assertEquals(false, test.isSupported(d)); [EOL]     d = new DateTimeFieldType("hourOfYear") { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         public DurationFieldType getDurationType() { [EOL]             return DurationFieldType.hours(); [EOL]         } [EOL]  [EOL]         public DurationFieldType getRangeDurationType() { [EOL]             return DurationFieldType.years(); [EOL]         } [EOL]  [EOL]         public DateTimeField getField(Chronology chronology) { [EOL]             return chronology.hourOfDay(); [EOL]         } [EOL]     }; [EOL]     assertEquals(false, test.isSupported(d)); [EOL] }
public void test_centuryOfEra() throws Exception { [EOL]     assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra()); [EOL]     assertEquals("centuryOfEra", DateTimeFieldType.centuryOfEra().getName()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.centuryOfEra()); [EOL] }
public void test_centuryOfEra() throws Exception { [EOL]     assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra()); [EOL]     assertEquals("centuryOfEra", DateTimeFieldType.centuryOfEra().getName()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.centuryOfEra()); [EOL] }
public void test_centuryOfEra() throws Exception { [EOL]     assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra()); [EOL]     assertEquals("centuryOfEra", DateTimeFieldType.centuryOfEra().getName()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.centuryOfEra()); [EOL] }
public void test_centuryOfEra() throws Exception { [EOL]     assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra()); [EOL]     assertEquals("centuryOfEra", DateTimeFieldType.centuryOfEra().getName()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.centuryOfEra()); [EOL] }
public void test_centuryOfEra() throws Exception { [EOL]     assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra()); [EOL]     assertEquals("centuryOfEra", DateTimeFieldType.centuryOfEra().getName()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.centuryOfEra()); [EOL] }
public void test_centuryOfEra() throws Exception { [EOL]     assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra()); [EOL]     assertEquals("centuryOfEra", DateTimeFieldType.centuryOfEra().getName()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.centuryOfEra()); [EOL] }
public void test_centuryOfEra() throws Exception { [EOL]     assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra()); [EOL]     assertEquals("centuryOfEra", DateTimeFieldType.centuryOfEra().getName()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.centuryOfEra()); [EOL] }
public void test_centuryOfEra() throws Exception { [EOL]     assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra()); [EOL]     assertEquals("centuryOfEra", DateTimeFieldType.centuryOfEra().getName()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.centuryOfEra()); [EOL] }
public void test_centuryOfEra() throws Exception { [EOL]     assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra()); [EOL]     assertEquals("centuryOfEra", DateTimeFieldType.centuryOfEra().getName()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.centuryOfEra()); [EOL] }
public void test_centuryOfEra() throws Exception { [EOL]     assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra()); [EOL]     assertEquals("centuryOfEra", DateTimeFieldType.centuryOfEra().getName()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.centuryOfEra()); [EOL] }
public void test_centuryOfEra() throws Exception { [EOL]     assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra()); [EOL]     assertEquals("centuryOfEra", DateTimeFieldType.centuryOfEra().getName()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.centuryOfEra()); [EOL] }
public void test_centuryOfEra() throws Exception { [EOL]     assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra()); [EOL]     assertEquals("centuryOfEra", DateTimeFieldType.centuryOfEra().getName()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.centuryOfEra()); [EOL] }
public void test_centuryOfEra() throws Exception { [EOL]     assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra()); [EOL]     assertEquals("centuryOfEra", DateTimeFieldType.centuryOfEra().getName()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.centuryOfEra()); [EOL] }
public void test_centuryOfEra() throws Exception { [EOL]     assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra()); [EOL]     assertEquals("centuryOfEra", DateTimeFieldType.centuryOfEra().getName()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.centuryOfEra()); [EOL] }
public void test_centuryOfEra() throws Exception { [EOL]     assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra()); [EOL]     assertEquals("centuryOfEra", DateTimeFieldType.centuryOfEra().getName()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.centuryOfEra()); [EOL] }
public void test_centuryOfEra() throws Exception { [EOL]     assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra()); [EOL]     assertEquals("centuryOfEra", DateTimeFieldType.centuryOfEra().getName()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.centuryOfEra()); [EOL] }
public void test_centuryOfEra() throws Exception { [EOL]     assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra()); [EOL]     assertEquals("centuryOfEra", DateTimeFieldType.centuryOfEra().getName()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.centuryOfEra()); [EOL] }
public void test_centuryOfEra() throws Exception { [EOL]     assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra()); [EOL]     assertEquals("centuryOfEra", DateTimeFieldType.centuryOfEra().getName()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.centuryOfEra()); [EOL] }
public void test_centuryOfEra() throws Exception { [EOL]     assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra()); [EOL]     assertEquals("centuryOfEra", DateTimeFieldType.centuryOfEra().getName()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.centuryOfEra()); [EOL] }
public void test_centuryOfEra() throws Exception { [EOL]     assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra()); [EOL]     assertEquals("centuryOfEra", DateTimeFieldType.centuryOfEra().getName()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.centuryOfEra()); [EOL] }
public void test_centuryOfEra() throws Exception { [EOL]     assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra()); [EOL]     assertEquals("centuryOfEra", DateTimeFieldType.centuryOfEra().getName()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.centuryOfEra()); [EOL] }
public void test_centuryOfEra() throws Exception { [EOL]     assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra()); [EOL]     assertEquals("centuryOfEra", DateTimeFieldType.centuryOfEra().getName()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.centuryOfEra()); [EOL] }
public void test_centuryOfEra() throws Exception { [EOL]     assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra()); [EOL]     assertEquals("centuryOfEra", DateTimeFieldType.centuryOfEra().getName()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.centuryOfEra()); [EOL] }
public void test_centuryOfEra() throws Exception { [EOL]     assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra()); [EOL]     assertEquals("centuryOfEra", DateTimeFieldType.centuryOfEra().getName()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.centuryOfEra()); [EOL] }
public void test_centuryOfEra() throws Exception { [EOL]     assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra()); [EOL]     assertEquals("centuryOfEra", DateTimeFieldType.centuryOfEra().getName()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.centuryOfEra()); [EOL] }
public void test_centuryOfEra() throws Exception { [EOL]     assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra()); [EOL]     assertEquals("centuryOfEra", DateTimeFieldType.centuryOfEra().getName()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.centuryOfEra()); [EOL] }
public void test_centuryOfEra() throws Exception { [EOL]     assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra()); [EOL]     assertEquals("centuryOfEra", DateTimeFieldType.centuryOfEra().getName()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.centuryOfEra()); [EOL] }
public void test_centuryOfEra() throws Exception { [EOL]     assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra()); [EOL]     assertEquals("centuryOfEra", DateTimeFieldType.centuryOfEra().getName()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.centuryOfEra()); [EOL] }
public void test_centuryOfEra() throws Exception { [EOL]     assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra()); [EOL]     assertEquals("centuryOfEra", DateTimeFieldType.centuryOfEra().getName()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.centuryOfEra()); [EOL] }
public void test_centuryOfEra() throws Exception { [EOL]     assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra()); [EOL]     assertEquals("centuryOfEra", DateTimeFieldType.centuryOfEra().getName()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.centuryOfEra()); [EOL] }
public void test_centuryOfEra() throws Exception { [EOL]     assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra()); [EOL]     assertEquals("centuryOfEra", DateTimeFieldType.centuryOfEra().getName()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.centuryOfEra()); [EOL] }
public void test_centuryOfEra() throws Exception { [EOL]     assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra()); [EOL]     assertEquals("centuryOfEra", DateTimeFieldType.centuryOfEra().getName()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.centuryOfEra()); [EOL] }
public void test_centuryOfEra() throws Exception { [EOL]     assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra()); [EOL]     assertEquals("centuryOfEra", DateTimeFieldType.centuryOfEra().getName()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.centuryOfEra()); [EOL] }
public void test_centuryOfEra() throws Exception { [EOL]     assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra()); [EOL]     assertEquals("centuryOfEra", DateTimeFieldType.centuryOfEra().getName()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.centuryOfEra()); [EOL] }
public void test_centuryOfEra() throws Exception { [EOL]     assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra()); [EOL]     assertEquals("centuryOfEra", DateTimeFieldType.centuryOfEra().getName()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.centuryOfEra()); [EOL] }
public void test_centuryOfEra() throws Exception { [EOL]     assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra()); [EOL]     assertEquals("centuryOfEra", DateTimeFieldType.centuryOfEra().getName()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.centuryOfEra()); [EOL] }
public void test_centuryOfEra() throws Exception { [EOL]     assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra()); [EOL]     assertEquals("centuryOfEra", DateTimeFieldType.centuryOfEra().getName()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.centuryOfEra()); [EOL] }
public void test_centuryOfEra() throws Exception { [EOL]     assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra()); [EOL]     assertEquals("centuryOfEra", DateTimeFieldType.centuryOfEra().getName()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.centuryOfEra()); [EOL] }
public void test_centuryOfEra() throws Exception { [EOL]     assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra()); [EOL]     assertEquals("centuryOfEra", DateTimeFieldType.centuryOfEra().getName()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.centuryOfEra()); [EOL] }
public void test_centuryOfEra() throws Exception { [EOL]     assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra()); [EOL]     assertEquals("centuryOfEra", DateTimeFieldType.centuryOfEra().getName()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.centuryOfEra()); [EOL] }
public void test_centuryOfEra() throws Exception { [EOL]     assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra()); [EOL]     assertEquals("centuryOfEra", DateTimeFieldType.centuryOfEra().getName()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.centuryOfEra()); [EOL] }
public void test_centuryOfEra() throws Exception { [EOL]     assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra()); [EOL]     assertEquals("centuryOfEra", DateTimeFieldType.centuryOfEra().getName()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.centuryOfEra()); [EOL] }
public void test_centuryOfEra() throws Exception { [EOL]     assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra()); [EOL]     assertEquals("centuryOfEra", DateTimeFieldType.centuryOfEra().getName()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.centuryOfEra()); [EOL] }
public void test_centuryOfEra() throws Exception { [EOL]     assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra()); [EOL]     assertEquals("centuryOfEra", DateTimeFieldType.centuryOfEra().getName()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.centuryOfEra()); [EOL] }
public void test_centuryOfEra() throws Exception { [EOL]     assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra()); [EOL]     assertEquals("centuryOfEra", DateTimeFieldType.centuryOfEra().getName()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.centuryOfEra()); [EOL] }
public void test_centuryOfEra() throws Exception { [EOL]     assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra()); [EOL]     assertEquals("centuryOfEra", DateTimeFieldType.centuryOfEra().getName()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.centuryOfEra()); [EOL] }
public void test_centuryOfEra() throws Exception { [EOL]     assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra()); [EOL]     assertEquals("centuryOfEra", DateTimeFieldType.centuryOfEra().getName()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.centuryOfEra()); [EOL] }
public void test_centuryOfEra() throws Exception { [EOL]     assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra()); [EOL]     assertEquals("centuryOfEra", DateTimeFieldType.centuryOfEra().getName()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.centuryOfEra()); [EOL] }
public void test_centuryOfEra() throws Exception { [EOL]     assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra()); [EOL]     assertEquals("centuryOfEra", DateTimeFieldType.centuryOfEra().getName()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.centuryOfEra()); [EOL] }
public void test_centuryOfEra() throws Exception { [EOL]     assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra()); [EOL]     assertEquals("centuryOfEra", DateTimeFieldType.centuryOfEra().getName()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.centuryOfEra()); [EOL] }
public void test_centuryOfEra() throws Exception { [EOL]     assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra()); [EOL]     assertEquals("centuryOfEra", DateTimeFieldType.centuryOfEra().getName()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.centuryOfEra()); [EOL] }
public void test_centuryOfEra() throws Exception { [EOL]     assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra()); [EOL]     assertEquals("centuryOfEra", DateTimeFieldType.centuryOfEra().getName()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.centuryOfEra()); [EOL] }
public void test_centuryOfEra() throws Exception { [EOL]     assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra()); [EOL]     assertEquals("centuryOfEra", DateTimeFieldType.centuryOfEra().getName()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.centuryOfEra()); [EOL] }
public void test_centuryOfEra() throws Exception { [EOL]     assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra()); [EOL]     assertEquals("centuryOfEra", DateTimeFieldType.centuryOfEra().getName()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.centuryOfEra()); [EOL] }
public void test_centuryOfEra() throws Exception { [EOL]     assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra()); [EOL]     assertEquals("centuryOfEra", DateTimeFieldType.centuryOfEra().getName()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.centuryOfEra()); [EOL] }
public void test_centuryOfEra() throws Exception { [EOL]     assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra()); [EOL]     assertEquals("centuryOfEra", DateTimeFieldType.centuryOfEra().getName()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.centuryOfEra()); [EOL] }
public void test_centuryOfEra() throws Exception { [EOL]     assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra()); [EOL]     assertEquals("centuryOfEra", DateTimeFieldType.centuryOfEra().getName()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.centuryOfEra()); [EOL] }
public void test_centuryOfEra() throws Exception { [EOL]     assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra()); [EOL]     assertEquals("centuryOfEra", DateTimeFieldType.centuryOfEra().getName()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.centuryOfEra()); [EOL] }
public void test_centuryOfEra() throws Exception { [EOL]     assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra()); [EOL]     assertEquals("centuryOfEra", DateTimeFieldType.centuryOfEra().getName()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.centuryOfEra()); [EOL] }
public void testIsAfter() { [EOL]     Duration test1 = new Duration(123L); [EOL]     Duration test1a = new Duration(123L); [EOL]     assertEquals(false, test1.isLongerThan(test1a)); [EOL]     assertEquals(false, test1a.isLongerThan(test1)); [EOL]     assertEquals(false, test1.isLongerThan(test1)); [EOL]     assertEquals(false, test1a.isLongerThan(test1a)); [EOL]     Duration test2 = new Duration(321L); [EOL]     assertEquals(false, test1.isLongerThan(test2)); [EOL]     assertEquals(true, test2.isLongerThan(test1)); [EOL]     assertEquals(true, test2.isLongerThan(new MockDuration(123L))); [EOL]     assertEquals(false, test1.isLongerThan(new MockDuration(123L))); [EOL]     assertEquals(true, test1.isLongerThan(null)); [EOL]     assertEquals(false, new Duration(0L).isLongerThan(null)); [EOL] }
public void testIsAfter() { [EOL]     Duration test1 = new Duration(123L); [EOL]     Duration test1a = new Duration(123L); [EOL]     assertEquals(false, test1.isLongerThan(test1a)); [EOL]     assertEquals(false, test1a.isLongerThan(test1)); [EOL]     assertEquals(false, test1.isLongerThan(test1)); [EOL]     assertEquals(false, test1a.isLongerThan(test1a)); [EOL]     Duration test2 = new Duration(321L); [EOL]     assertEquals(false, test1.isLongerThan(test2)); [EOL]     assertEquals(true, test2.isLongerThan(test1)); [EOL]     assertEquals(true, test2.isLongerThan(new MockDuration(123L))); [EOL]     assertEquals(false, test1.isLongerThan(new MockDuration(123L))); [EOL]     assertEquals(true, test1.isLongerThan(null)); [EOL]     assertEquals(false, new Duration(0L).isLongerThan(null)); [EOL] }
public void testIsAfter() { [EOL]     Duration test1 = new Duration(123L); [EOL]     Duration test1a = new Duration(123L); [EOL]     assertEquals(false, test1.isLongerThan(test1a)); [EOL]     assertEquals(false, test1a.isLongerThan(test1)); [EOL]     assertEquals(false, test1.isLongerThan(test1)); [EOL]     assertEquals(false, test1a.isLongerThan(test1a)); [EOL]     Duration test2 = new Duration(321L); [EOL]     assertEquals(false, test1.isLongerThan(test2)); [EOL]     assertEquals(true, test2.isLongerThan(test1)); [EOL]     assertEquals(true, test2.isLongerThan(new MockDuration(123L))); [EOL]     assertEquals(false, test1.isLongerThan(new MockDuration(123L))); [EOL]     assertEquals(true, test1.isLongerThan(null)); [EOL]     assertEquals(false, new Duration(0L).isLongerThan(null)); [EOL] }
public void testIsAfter() { [EOL]     Duration test1 = new Duration(123L); [EOL]     Duration test1a = new Duration(123L); [EOL]     assertEquals(false, test1.isLongerThan(test1a)); [EOL]     assertEquals(false, test1a.isLongerThan(test1)); [EOL]     assertEquals(false, test1.isLongerThan(test1)); [EOL]     assertEquals(false, test1a.isLongerThan(test1a)); [EOL]     Duration test2 = new Duration(321L); [EOL]     assertEquals(false, test1.isLongerThan(test2)); [EOL]     assertEquals(true, test2.isLongerThan(test1)); [EOL]     assertEquals(true, test2.isLongerThan(new MockDuration(123L))); [EOL]     assertEquals(false, test1.isLongerThan(new MockDuration(123L))); [EOL]     assertEquals(true, test1.isLongerThan(null)); [EOL]     assertEquals(false, new Duration(0L).isLongerThan(null)); [EOL] }
public void testEqualsHashCode() { [EOL]     Duration test1 = new Duration(123L); [EOL]     Duration test2 = new Duration(123L); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     Duration test3 = new Duration(321L); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockDuration(123L))); [EOL] }
public void testEqualsHashCode() { [EOL]     Duration test1 = new Duration(123L); [EOL]     Duration test2 = new Duration(123L); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     Duration test3 = new Duration(321L); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockDuration(123L))); [EOL] }
public void testEqualsHashCode() { [EOL]     Duration test1 = new Duration(123L); [EOL]     Duration test2 = new Duration(123L); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     Duration test3 = new Duration(321L); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockDuration(123L))); [EOL] }
public void testFormatParse_textMonthApr_Korean() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("EEEE, d MMMM yyyy HH:mm").withLocale(Locale.KOREAN).withZoneUTC(); [EOL]     String str = new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     assertEquals(new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC), date); [EOL] }
public void testFormatParse_textMonthApr_Korean() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("EEEE, d MMMM yyyy HH:mm").withLocale(Locale.KOREAN).withZoneUTC(); [EOL]     String str = new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     assertEquals(new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC), date); [EOL] }
public void testFormatParse_textMonthApr_Korean() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("EEEE, d MMMM yyyy HH:mm").withLocale(Locale.KOREAN).withZoneUTC(); [EOL]     String str = new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     assertEquals(new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC), date); [EOL] }
public void testFormatParse_textMonthApr_Korean() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("EEEE, d MMMM yyyy HH:mm").withLocale(Locale.KOREAN).withZoneUTC(); [EOL]     String str = new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     assertEquals(new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC), date); [EOL] }
public void testFormatParse_textMonthApr_Korean() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("EEEE, d MMMM yyyy HH:mm").withLocale(Locale.KOREAN).withZoneUTC(); [EOL]     String str = new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     assertEquals(new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC), date); [EOL] }
public void testFormatParse_textMonthApr_Korean() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("EEEE, d MMMM yyyy HH:mm").withLocale(Locale.KOREAN).withZoneUTC(); [EOL]     String str = new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     assertEquals(new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC), date); [EOL] }
public void testFormatParse_textMonthApr_Korean() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("EEEE, d MMMM yyyy HH:mm").withLocale(Locale.KOREAN).withZoneUTC(); [EOL]     String str = new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     assertEquals(new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC), date); [EOL] }
public void testFormatParse_textMonthApr_Korean() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("EEEE, d MMMM yyyy HH:mm").withLocale(Locale.KOREAN).withZoneUTC(); [EOL]     String str = new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     assertEquals(new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC), date); [EOL] }
public void testFormatParse_textMonthApr_Korean() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("EEEE, d MMMM yyyy HH:mm").withLocale(Locale.KOREAN).withZoneUTC(); [EOL]     String str = new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     assertEquals(new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC), date); [EOL] }
public void testFormatParse_textMonthApr_Korean() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("EEEE, d MMMM yyyy HH:mm").withLocale(Locale.KOREAN).withZoneUTC(); [EOL]     String str = new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     assertEquals(new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC), date); [EOL] }
public void testFormatParse_textMonthApr_Korean() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("EEEE, d MMMM yyyy HH:mm").withLocale(Locale.KOREAN).withZoneUTC(); [EOL]     String str = new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     assertEquals(new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC), date); [EOL] }
public void testFormatParse_textMonthApr_Korean() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("EEEE, d MMMM yyyy HH:mm").withLocale(Locale.KOREAN).withZoneUTC(); [EOL]     String str = new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     assertEquals(new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC), date); [EOL] }
public void testFormatParse_textMonthApr_Korean() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("EEEE, d MMMM yyyy HH:mm").withLocale(Locale.KOREAN).withZoneUTC(); [EOL]     String str = new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     assertEquals(new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC), date); [EOL] }
public void testFormatParse_textMonthApr_Korean() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("EEEE, d MMMM yyyy HH:mm").withLocale(Locale.KOREAN).withZoneUTC(); [EOL]     String str = new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     assertEquals(new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC), date); [EOL] }
public void testSetText() { [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().year().set(0, null, java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("year", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("null", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().year().set(0, "nineteen seventy", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("year", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("nineteen seventy", e.getIllegalStringValue()); [EOL]         assertEquals("nineteen seventy", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().era().set(0, "long ago", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.era(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("era", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("long ago", e.getIllegalStringValue()); [EOL]         assertEquals("long ago", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().monthOfYear().set(0, "spring", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("monthOfYear", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("spring", e.getIllegalStringValue()); [EOL]         assertEquals("spring", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().dayOfWeek().set(0, "yesterday", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.dayOfWeek(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("dayOfWeek", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("yesterday", e.getIllegalStringValue()); [EOL]         assertEquals("yesterday", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().halfdayOfDay().set(0, "morning", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.halfdayOfDay(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("halfdayOfDay", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("morning", e.getIllegalStringValue()); [EOL]         assertEquals("morning", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL] }
public void testFormatParse_textMonthApr_Korean() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("EEEE, d MMMM yyyy HH:mm").withLocale(Locale.KOREAN).withZoneUTC(); [EOL]     String str = new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     assertEquals(new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC), date); [EOL] }
public void testFormatParse_textMonthApr_Korean() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("EEEE, d MMMM yyyy HH:mm").withLocale(Locale.KOREAN).withZoneUTC(); [EOL]     String str = new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     assertEquals(new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC), date); [EOL] }
public void testSetText() { [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().year().set(0, null, java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("year", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("null", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().year().set(0, "nineteen seventy", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("year", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("nineteen seventy", e.getIllegalStringValue()); [EOL]         assertEquals("nineteen seventy", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().era().set(0, "long ago", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.era(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("era", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("long ago", e.getIllegalStringValue()); [EOL]         assertEquals("long ago", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().monthOfYear().set(0, "spring", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("monthOfYear", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("spring", e.getIllegalStringValue()); [EOL]         assertEquals("spring", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().dayOfWeek().set(0, "yesterday", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.dayOfWeek(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("dayOfWeek", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("yesterday", e.getIllegalStringValue()); [EOL]         assertEquals("yesterday", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().halfdayOfDay().set(0, "morning", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.halfdayOfDay(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("halfdayOfDay", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("morning", e.getIllegalStringValue()); [EOL]         assertEquals("morning", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL] }
public void testSetText() { [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().year().set(0, null, java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("year", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("null", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().year().set(0, "nineteen seventy", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("year", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("nineteen seventy", e.getIllegalStringValue()); [EOL]         assertEquals("nineteen seventy", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().era().set(0, "long ago", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.era(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("era", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("long ago", e.getIllegalStringValue()); [EOL]         assertEquals("long ago", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().monthOfYear().set(0, "spring", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("monthOfYear", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("spring", e.getIllegalStringValue()); [EOL]         assertEquals("spring", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().dayOfWeek().set(0, "yesterday", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.dayOfWeek(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("dayOfWeek", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("yesterday", e.getIllegalStringValue()); [EOL]         assertEquals("yesterday", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().halfdayOfDay().set(0, "morning", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.halfdayOfDay(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("halfdayOfDay", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("morning", e.getIllegalStringValue()); [EOL]         assertEquals("morning", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL] }
public void testFormatParse_textMonthApr_Korean() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("EEEE, d MMMM yyyy HH:mm").withLocale(Locale.KOREAN).withZoneUTC(); [EOL]     String str = new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     assertEquals(new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC), date); [EOL] }
public void testFormatParse_textMonthApr_Korean() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("EEEE, d MMMM yyyy HH:mm").withLocale(Locale.KOREAN).withZoneUTC(); [EOL]     String str = new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     assertEquals(new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC), date); [EOL] }
public void testFormatParse_textMonthApr_Korean() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("EEEE, d MMMM yyyy HH:mm").withLocale(Locale.KOREAN).withZoneUTC(); [EOL]     String str = new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     assertEquals(new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC), date); [EOL] }
public void testSetText() { [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().year().set(0, null, java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("year", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("null", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().year().set(0, "nineteen seventy", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("year", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("nineteen seventy", e.getIllegalStringValue()); [EOL]         assertEquals("nineteen seventy", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().era().set(0, "long ago", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.era(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("era", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("long ago", e.getIllegalStringValue()); [EOL]         assertEquals("long ago", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().monthOfYear().set(0, "spring", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("monthOfYear", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("spring", e.getIllegalStringValue()); [EOL]         assertEquals("spring", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().dayOfWeek().set(0, "yesterday", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.dayOfWeek(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("dayOfWeek", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("yesterday", e.getIllegalStringValue()); [EOL]         assertEquals("yesterday", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().halfdayOfDay().set(0, "morning", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.halfdayOfDay(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("halfdayOfDay", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("morning", e.getIllegalStringValue()); [EOL]         assertEquals("morning", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL] }
public void testSetText() { [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().year().set(0, null, java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("year", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("null", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().year().set(0, "nineteen seventy", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("year", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("nineteen seventy", e.getIllegalStringValue()); [EOL]         assertEquals("nineteen seventy", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().era().set(0, "long ago", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.era(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("era", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("long ago", e.getIllegalStringValue()); [EOL]         assertEquals("long ago", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().monthOfYear().set(0, "spring", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("monthOfYear", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("spring", e.getIllegalStringValue()); [EOL]         assertEquals("spring", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().dayOfWeek().set(0, "yesterday", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.dayOfWeek(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("dayOfWeek", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("yesterday", e.getIllegalStringValue()); [EOL]         assertEquals("yesterday", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().halfdayOfDay().set(0, "morning", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.halfdayOfDay(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("halfdayOfDay", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("morning", e.getIllegalStringValue()); [EOL]         assertEquals("morning", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL] }
public void testFormatParse_textMonthApr_Korean() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("EEEE, d MMMM yyyy HH:mm").withLocale(Locale.KOREAN).withZoneUTC(); [EOL]     String str = new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     assertEquals(new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC), date); [EOL] }
public void testSetText() { [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().year().set(0, null, java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("year", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("null", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().year().set(0, "nineteen seventy", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("year", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("nineteen seventy", e.getIllegalStringValue()); [EOL]         assertEquals("nineteen seventy", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().era().set(0, "long ago", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.era(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("era", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("long ago", e.getIllegalStringValue()); [EOL]         assertEquals("long ago", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().monthOfYear().set(0, "spring", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("monthOfYear", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("spring", e.getIllegalStringValue()); [EOL]         assertEquals("spring", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().dayOfWeek().set(0, "yesterday", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.dayOfWeek(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("dayOfWeek", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("yesterday", e.getIllegalStringValue()); [EOL]         assertEquals("yesterday", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().halfdayOfDay().set(0, "morning", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.halfdayOfDay(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("halfdayOfDay", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("morning", e.getIllegalStringValue()); [EOL]         assertEquals("morning", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL] }
public void testToInstant() { [EOL]     DateTime test = new DateTime(TEST_TIME1); [EOL]     Instant result = test.toInstant(); [EOL]     assertEquals(TEST_TIME1, result.getMillis()); [EOL] }
public void testToDateTimeISO() { [EOL]     DateTime test = new DateTime(TEST_TIME1); [EOL]     DateTime result = test.toDateTimeISO(); [EOL]     assertSame(test, result); [EOL]     test = new DateTime(TEST_TIME1, ISO_PARIS); [EOL]     result = test.toDateTimeISO(); [EOL]     assertSame(DateTime.class, result.getClass()); [EOL]     assertSame(ISOChronology.class, result.getChronology().getClass()); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     assertNotSame(test, result); [EOL]     test = new DateTime(TEST_TIME1, BUDDHIST_DEFAULT); [EOL]     result = test.toDateTimeISO(); [EOL]     assertSame(DateTime.class, result.getClass()); [EOL]     assertSame(ISOChronology.class, result.getChronology().getClass()); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISO_DEFAULT, result.getChronology()); [EOL]     assertNotSame(test, result); [EOL]     test = new DateTime(TEST_TIME1, new MockNullZoneChronology()); [EOL]     result = test.toDateTimeISO(); [EOL]     assertSame(DateTime.class, result.getClass()); [EOL]     assertSame(ISOChronology.class, result.getChronology().getClass()); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISO_DEFAULT, result.getChronology()); [EOL]     assertNotSame(test, result); [EOL] }
public void testToDateTimeISO() { [EOL]     DateTime test = new DateTime(TEST_TIME1); [EOL]     DateTime result = test.toDateTimeISO(); [EOL]     assertSame(test, result); [EOL]     test = new DateTime(TEST_TIME1, ISO_PARIS); [EOL]     result = test.toDateTimeISO(); [EOL]     assertSame(DateTime.class, result.getClass()); [EOL]     assertSame(ISOChronology.class, result.getChronology().getClass()); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     assertNotSame(test, result); [EOL]     test = new DateTime(TEST_TIME1, BUDDHIST_DEFAULT); [EOL]     result = test.toDateTimeISO(); [EOL]     assertSame(DateTime.class, result.getClass()); [EOL]     assertSame(ISOChronology.class, result.getChronology().getClass()); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISO_DEFAULT, result.getChronology()); [EOL]     assertNotSame(test, result); [EOL]     test = new DateTime(TEST_TIME1, new MockNullZoneChronology()); [EOL]     result = test.toDateTimeISO(); [EOL]     assertSame(DateTime.class, result.getClass()); [EOL]     assertSame(ISOChronology.class, result.getChronology().getClass()); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISO_DEFAULT, result.getChronology()); [EOL]     assertNotSame(test, result); [EOL] }
public void testToDateTime_Chronology() { [EOL]     DateTime test = new DateTime(TEST_TIME1); [EOL]     DateTime result = test.toDateTime(ISO_DEFAULT); [EOL]     assertSame(test, result); [EOL]     test = new DateTime(TEST_TIME1); [EOL]     result = test.toDateTime(GREGORIAN_PARIS); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(GREGORIAN_PARIS, result.getChronology()); [EOL]     test = new DateTime(TEST_TIME1, GREGORIAN_PARIS); [EOL]     result = test.toDateTime((Chronology) null); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISO_DEFAULT, result.getChronology()); [EOL]     test = new DateTime(TEST_TIME1); [EOL]     result = test.toDateTime((Chronology) null); [EOL]     assertSame(test, result); [EOL] }
public void testToDateTime_Chronology() { [EOL]     DateTime test = new DateTime(TEST_TIME1); [EOL]     DateTime result = test.toDateTime(ISO_DEFAULT); [EOL]     assertSame(test, result); [EOL]     test = new DateTime(TEST_TIME1); [EOL]     result = test.toDateTime(GREGORIAN_PARIS); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(GREGORIAN_PARIS, result.getChronology()); [EOL]     test = new DateTime(TEST_TIME1, GREGORIAN_PARIS); [EOL]     result = test.toDateTime((Chronology) null); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISO_DEFAULT, result.getChronology()); [EOL]     test = new DateTime(TEST_TIME1); [EOL]     result = test.toDateTime((Chronology) null); [EOL]     assertSame(test, result); [EOL] }
public void testCompareTo() { [EOL]     MutableDateTime test1 = new MutableDateTime(TEST_TIME1); [EOL]     MutableDateTime test1a = new MutableDateTime(TEST_TIME1); [EOL]     assertEquals(0, test1.compareTo(test1a)); [EOL]     assertEquals(0, test1a.compareTo(test1)); [EOL]     assertEquals(0, test1.compareTo(test1)); [EOL]     assertEquals(0, test1a.compareTo(test1a)); [EOL]     MutableDateTime test2 = new MutableDateTime(TEST_TIME2); [EOL]     assertEquals(-1, test1.compareTo(test2)); [EOL]     assertEquals(+1, test2.compareTo(test1)); [EOL]     MutableDateTime test3 = new MutableDateTime(TEST_TIME2, GregorianChronology.getInstance(PARIS)); [EOL]     assertEquals(-1, test1.compareTo(test3)); [EOL]     assertEquals(+1, test3.compareTo(test1)); [EOL]     assertEquals(0, test3.compareTo(test2)); [EOL]     assertEquals(+1, test2.compareTo(new MockInstant())); [EOL]     assertEquals(0, test1.compareTo(new MockInstant())); [EOL]     try { [EOL]         test1.compareTo(null); [EOL]         fail(); [EOL]     } catch (NullPointerException ex) { [EOL]     } [EOL] }
public void testCompareTo() { [EOL]     MutableDateTime test1 = new MutableDateTime(TEST_TIME1); [EOL]     MutableDateTime test1a = new MutableDateTime(TEST_TIME1); [EOL]     assertEquals(0, test1.compareTo(test1a)); [EOL]     assertEquals(0, test1a.compareTo(test1)); [EOL]     assertEquals(0, test1.compareTo(test1)); [EOL]     assertEquals(0, test1a.compareTo(test1a)); [EOL]     MutableDateTime test2 = new MutableDateTime(TEST_TIME2); [EOL]     assertEquals(-1, test1.compareTo(test2)); [EOL]     assertEquals(+1, test2.compareTo(test1)); [EOL]     MutableDateTime test3 = new MutableDateTime(TEST_TIME2, GregorianChronology.getInstance(PARIS)); [EOL]     assertEquals(-1, test1.compareTo(test3)); [EOL]     assertEquals(+1, test3.compareTo(test1)); [EOL]     assertEquals(0, test3.compareTo(test2)); [EOL]     assertEquals(+1, test2.compareTo(new MockInstant())); [EOL]     assertEquals(0, test1.compareTo(new MockInstant())); [EOL]     try { [EOL]         test1.compareTo(null); [EOL]         fail(); [EOL]     } catch (NullPointerException ex) { [EOL]     } [EOL] }
public void testCompareTo() { [EOL]     MutableDateTime test1 = new MutableDateTime(TEST_TIME1); [EOL]     MutableDateTime test1a = new MutableDateTime(TEST_TIME1); [EOL]     assertEquals(0, test1.compareTo(test1a)); [EOL]     assertEquals(0, test1a.compareTo(test1)); [EOL]     assertEquals(0, test1.compareTo(test1)); [EOL]     assertEquals(0, test1a.compareTo(test1a)); [EOL]     MutableDateTime test2 = new MutableDateTime(TEST_TIME2); [EOL]     assertEquals(-1, test1.compareTo(test2)); [EOL]     assertEquals(+1, test2.compareTo(test1)); [EOL]     MutableDateTime test3 = new MutableDateTime(TEST_TIME2, GregorianChronology.getInstance(PARIS)); [EOL]     assertEquals(-1, test1.compareTo(test3)); [EOL]     assertEquals(+1, test3.compareTo(test1)); [EOL]     assertEquals(0, test3.compareTo(test2)); [EOL]     assertEquals(+1, test2.compareTo(new MockInstant())); [EOL]     assertEquals(0, test1.compareTo(new MockInstant())); [EOL]     try { [EOL]         test1.compareTo(null); [EOL]         fail(); [EOL]     } catch (NullPointerException ex) { [EOL]     } [EOL] }
public void testCompareTo() { [EOL]     MutableDateTime test1 = new MutableDateTime(TEST_TIME1); [EOL]     MutableDateTime test1a = new MutableDateTime(TEST_TIME1); [EOL]     assertEquals(0, test1.compareTo(test1a)); [EOL]     assertEquals(0, test1a.compareTo(test1)); [EOL]     assertEquals(0, test1.compareTo(test1)); [EOL]     assertEquals(0, test1a.compareTo(test1a)); [EOL]     MutableDateTime test2 = new MutableDateTime(TEST_TIME2); [EOL]     assertEquals(-1, test1.compareTo(test2)); [EOL]     assertEquals(+1, test2.compareTo(test1)); [EOL]     MutableDateTime test3 = new MutableDateTime(TEST_TIME2, GregorianChronology.getInstance(PARIS)); [EOL]     assertEquals(-1, test1.compareTo(test3)); [EOL]     assertEquals(+1, test3.compareTo(test1)); [EOL]     assertEquals(0, test3.compareTo(test2)); [EOL]     assertEquals(+1, test2.compareTo(new MockInstant())); [EOL]     assertEquals(0, test1.compareTo(new MockInstant())); [EOL]     try { [EOL]         test1.compareTo(null); [EOL]         fail(); [EOL]     } catch (NullPointerException ex) { [EOL]     } [EOL] }
public void testIsBeforeNow() { [EOL]     assertEquals(true, new Instant(TEST_TIME_NOW - 1).isBeforeNow()); [EOL]     assertEquals(false, new Instant(TEST_TIME_NOW).isBeforeNow()); [EOL]     assertEquals(false, new Instant(TEST_TIME_NOW + 1).isBeforeNow()); [EOL] }
public void testIsEqualNow() { [EOL]     assertEquals(false, new Instant(TEST_TIME_NOW - 1).isEqualNow()); [EOL]     assertEquals(true, new Instant(TEST_TIME_NOW).isEqualNow()); [EOL]     assertEquals(false, new Instant(TEST_TIME_NOW + 1).isEqualNow()); [EOL] }
public void testIsEqualNow() { [EOL]     assertEquals(false, new Instant(TEST_TIME_NOW - 1).isEqualNow()); [EOL]     assertEquals(true, new Instant(TEST_TIME_NOW).isEqualNow()); [EOL]     assertEquals(false, new Instant(TEST_TIME_NOW + 1).isEqualNow()); [EOL] }
public void testIsEqualNow() { [EOL]     assertEquals(false, new Instant(TEST_TIME_NOW - 1).isEqualNow()); [EOL]     assertEquals(true, new Instant(TEST_TIME_NOW).isEqualNow()); [EOL]     assertEquals(false, new Instant(TEST_TIME_NOW + 1).isEqualNow()); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testToString_DTFormatter() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME_NOW); [EOL]     assertEquals("2002 00", test.toString(DateTimeFormat.forPattern("yyyy HH"))); [EOL]     assertEquals("2002-06-09T00:00:00.000+01:00", test.toString((DateTimeFormatter) null)); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testToString_DTFormatter() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME_NOW); [EOL]     assertEquals("2002 00", test.toString(DateTimeFormat.forPattern("yyyy HH"))); [EOL]     assertEquals("2002-06-09T00:00:00.000+01:00", test.toString((DateTimeFormatter) null)); [EOL] }
public void testSerialization() throws Exception { [EOL]     LocalDate test = new LocalDate(1972, 6, 9, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     LocalDate result = (LocalDate) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testSerialization() throws Exception { [EOL]     LocalDate test = new LocalDate(1972, 6, 9, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     LocalDate result = (LocalDate) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testSerialization() throws Exception { [EOL]     LocalDate test = new LocalDate(1972, 6, 9, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     LocalDate result = (LocalDate) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testSerialization() throws Exception { [EOL]     LocalDate test = new LocalDate(1972, 6, 9, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     LocalDate result = (LocalDate) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testSerialization() throws Exception { [EOL]     LocalDate test = new LocalDate(1972, 6, 9, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     LocalDate result = (LocalDate) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testSerialization() throws Exception { [EOL]     LocalDate test = new LocalDate(1972, 6, 9, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     LocalDate result = (LocalDate) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testDurationFields() { [EOL]     final JulianChronology julian = JulianChronology.getInstance(); [EOL]     assertEquals("eras", julian.eras().getName()); [EOL]     assertEquals("centuries", julian.centuries().getName()); [EOL]     assertEquals("years", julian.years().getName()); [EOL]     assertEquals("weekyears", julian.weekyears().getName()); [EOL]     assertEquals("months", julian.months().getName()); [EOL]     assertEquals("weeks", julian.weeks().getName()); [EOL]     assertEquals("days", julian.days().getName()); [EOL]     assertEquals("halfdays", julian.halfdays().getName()); [EOL]     assertEquals("hours", julian.hours().getName()); [EOL]     assertEquals("minutes", julian.minutes().getName()); [EOL]     assertEquals("seconds", julian.seconds().getName()); [EOL]     assertEquals("millis", julian.millis().getName()); [EOL]     assertEquals(false, julian.eras().isSupported()); [EOL]     assertEquals(true, julian.centuries().isSupported()); [EOL]     assertEquals(true, julian.years().isSupported()); [EOL]     assertEquals(true, julian.weekyears().isSupported()); [EOL]     assertEquals(true, julian.months().isSupported()); [EOL]     assertEquals(true, julian.weeks().isSupported()); [EOL]     assertEquals(true, julian.days().isSupported()); [EOL]     assertEquals(true, julian.halfdays().isSupported()); [EOL]     assertEquals(true, julian.hours().isSupported()); [EOL]     assertEquals(true, julian.minutes().isSupported()); [EOL]     assertEquals(true, julian.seconds().isSupported()); [EOL]     assertEquals(true, julian.millis().isSupported()); [EOL]     assertEquals(false, julian.centuries().isPrecise()); [EOL]     assertEquals(false, julian.years().isPrecise()); [EOL]     assertEquals(false, julian.weekyears().isPrecise()); [EOL]     assertEquals(false, julian.months().isPrecise()); [EOL]     assertEquals(false, julian.weeks().isPrecise()); [EOL]     assertEquals(false, julian.days().isPrecise()); [EOL]     assertEquals(false, julian.halfdays().isPrecise()); [EOL]     assertEquals(true, julian.hours().isPrecise()); [EOL]     assertEquals(true, julian.minutes().isPrecise()); [EOL]     assertEquals(true, julian.seconds().isPrecise()); [EOL]     assertEquals(true, julian.millis().isPrecise()); [EOL]     final JulianChronology julianUTC = JulianChronology.getInstanceUTC(); [EOL]     assertEquals(false, julianUTC.centuries().isPrecise()); [EOL]     assertEquals(false, julianUTC.years().isPrecise()); [EOL]     assertEquals(false, julianUTC.weekyears().isPrecise()); [EOL]     assertEquals(false, julianUTC.months().isPrecise()); [EOL]     assertEquals(true, julianUTC.weeks().isPrecise()); [EOL]     assertEquals(true, julianUTC.days().isPrecise()); [EOL]     assertEquals(true, julianUTC.halfdays().isPrecise()); [EOL]     assertEquals(true, julianUTC.hours().isPrecise()); [EOL]     assertEquals(true, julianUTC.minutes().isPrecise()); [EOL]     assertEquals(true, julianUTC.seconds().isPrecise()); [EOL]     assertEquals(true, julianUTC.millis().isPrecise()); [EOL]     final DateTimeZone gmt = DateTimeZone.forID("Etc/GMT"); [EOL]     final JulianChronology julianGMT = JulianChronology.getInstance(gmt); [EOL]     assertEquals(false, julianGMT.centuries().isPrecise()); [EOL]     assertEquals(false, julianGMT.years().isPrecise()); [EOL]     assertEquals(false, julianGMT.weekyears().isPrecise()); [EOL]     assertEquals(false, julianGMT.months().isPrecise()); [EOL]     assertEquals(true, julianGMT.weeks().isPrecise()); [EOL]     assertEquals(true, julianGMT.days().isPrecise()); [EOL]     assertEquals(true, julianGMT.halfdays().isPrecise()); [EOL]     assertEquals(true, julianGMT.hours().isPrecise()); [EOL]     assertEquals(true, julianGMT.minutes().isPrecise()); [EOL]     assertEquals(true, julianGMT.seconds().isPrecise()); [EOL]     assertEquals(true, julianGMT.millis().isPrecise()); [EOL] }
public void testDurationFields() { [EOL]     final JulianChronology julian = JulianChronology.getInstance(); [EOL]     assertEquals("eras", julian.eras().getName()); [EOL]     assertEquals("centuries", julian.centuries().getName()); [EOL]     assertEquals("years", julian.years().getName()); [EOL]     assertEquals("weekyears", julian.weekyears().getName()); [EOL]     assertEquals("months", julian.months().getName()); [EOL]     assertEquals("weeks", julian.weeks().getName()); [EOL]     assertEquals("days", julian.days().getName()); [EOL]     assertEquals("halfdays", julian.halfdays().getName()); [EOL]     assertEquals("hours", julian.hours().getName()); [EOL]     assertEquals("minutes", julian.minutes().getName()); [EOL]     assertEquals("seconds", julian.seconds().getName()); [EOL]     assertEquals("millis", julian.millis().getName()); [EOL]     assertEquals(false, julian.eras().isSupported()); [EOL]     assertEquals(true, julian.centuries().isSupported()); [EOL]     assertEquals(true, julian.years().isSupported()); [EOL]     assertEquals(true, julian.weekyears().isSupported()); [EOL]     assertEquals(true, julian.months().isSupported()); [EOL]     assertEquals(true, julian.weeks().isSupported()); [EOL]     assertEquals(true, julian.days().isSupported()); [EOL]     assertEquals(true, julian.halfdays().isSupported()); [EOL]     assertEquals(true, julian.hours().isSupported()); [EOL]     assertEquals(true, julian.minutes().isSupported()); [EOL]     assertEquals(true, julian.seconds().isSupported()); [EOL]     assertEquals(true, julian.millis().isSupported()); [EOL]     assertEquals(false, julian.centuries().isPrecise()); [EOL]     assertEquals(false, julian.years().isPrecise()); [EOL]     assertEquals(false, julian.weekyears().isPrecise()); [EOL]     assertEquals(false, julian.months().isPrecise()); [EOL]     assertEquals(false, julian.weeks().isPrecise()); [EOL]     assertEquals(false, julian.days().isPrecise()); [EOL]     assertEquals(false, julian.halfdays().isPrecise()); [EOL]     assertEquals(true, julian.hours().isPrecise()); [EOL]     assertEquals(true, julian.minutes().isPrecise()); [EOL]     assertEquals(true, julian.seconds().isPrecise()); [EOL]     assertEquals(true, julian.millis().isPrecise()); [EOL]     final JulianChronology julianUTC = JulianChronology.getInstanceUTC(); [EOL]     assertEquals(false, julianUTC.centuries().isPrecise()); [EOL]     assertEquals(false, julianUTC.years().isPrecise()); [EOL]     assertEquals(false, julianUTC.weekyears().isPrecise()); [EOL]     assertEquals(false, julianUTC.months().isPrecise()); [EOL]     assertEquals(true, julianUTC.weeks().isPrecise()); [EOL]     assertEquals(true, julianUTC.days().isPrecise()); [EOL]     assertEquals(true, julianUTC.halfdays().isPrecise()); [EOL]     assertEquals(true, julianUTC.hours().isPrecise()); [EOL]     assertEquals(true, julianUTC.minutes().isPrecise()); [EOL]     assertEquals(true, julianUTC.seconds().isPrecise()); [EOL]     assertEquals(true, julianUTC.millis().isPrecise()); [EOL]     final DateTimeZone gmt = DateTimeZone.forID("Etc/GMT"); [EOL]     final JulianChronology julianGMT = JulianChronology.getInstance(gmt); [EOL]     assertEquals(false, julianGMT.centuries().isPrecise()); [EOL]     assertEquals(false, julianGMT.years().isPrecise()); [EOL]     assertEquals(false, julianGMT.weekyears().isPrecise()); [EOL]     assertEquals(false, julianGMT.months().isPrecise()); [EOL]     assertEquals(true, julianGMT.weeks().isPrecise()); [EOL]     assertEquals(true, julianGMT.days().isPrecise()); [EOL]     assertEquals(true, julianGMT.halfdays().isPrecise()); [EOL]     assertEquals(true, julianGMT.hours().isPrecise()); [EOL]     assertEquals(true, julianGMT.minutes().isPrecise()); [EOL]     assertEquals(true, julianGMT.seconds().isPrecise()); [EOL]     assertEquals(true, julianGMT.millis().isPrecise()); [EOL] }
public void testWithers() { [EOL]     DateTime test = new DateTime(1970, 6, 9, 10, 20, 30, 40, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     DateTime test = new DateTime(1970, 6, 9, 10, 20, 30, 40, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     DateTime test = new DateTime(1970, 6, 9, 10, 20, 30, 40, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     DateTime test = new DateTime(1970, 6, 9, 10, 20, 30, 40, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testDurationFields() { [EOL]     final JulianChronology julian = JulianChronology.getInstance(); [EOL]     assertEquals("eras", julian.eras().getName()); [EOL]     assertEquals("centuries", julian.centuries().getName()); [EOL]     assertEquals("years", julian.years().getName()); [EOL]     assertEquals("weekyears", julian.weekyears().getName()); [EOL]     assertEquals("months", julian.months().getName()); [EOL]     assertEquals("weeks", julian.weeks().getName()); [EOL]     assertEquals("days", julian.days().getName()); [EOL]     assertEquals("halfdays", julian.halfdays().getName()); [EOL]     assertEquals("hours", julian.hours().getName()); [EOL]     assertEquals("minutes", julian.minutes().getName()); [EOL]     assertEquals("seconds", julian.seconds().getName()); [EOL]     assertEquals("millis", julian.millis().getName()); [EOL]     assertEquals(false, julian.eras().isSupported()); [EOL]     assertEquals(true, julian.centuries().isSupported()); [EOL]     assertEquals(true, julian.years().isSupported()); [EOL]     assertEquals(true, julian.weekyears().isSupported()); [EOL]     assertEquals(true, julian.months().isSupported()); [EOL]     assertEquals(true, julian.weeks().isSupported()); [EOL]     assertEquals(true, julian.days().isSupported()); [EOL]     assertEquals(true, julian.halfdays().isSupported()); [EOL]     assertEquals(true, julian.hours().isSupported()); [EOL]     assertEquals(true, julian.minutes().isSupported()); [EOL]     assertEquals(true, julian.seconds().isSupported()); [EOL]     assertEquals(true, julian.millis().isSupported()); [EOL]     assertEquals(false, julian.centuries().isPrecise()); [EOL]     assertEquals(false, julian.years().isPrecise()); [EOL]     assertEquals(false, julian.weekyears().isPrecise()); [EOL]     assertEquals(false, julian.months().isPrecise()); [EOL]     assertEquals(false, julian.weeks().isPrecise()); [EOL]     assertEquals(false, julian.days().isPrecise()); [EOL]     assertEquals(false, julian.halfdays().isPrecise()); [EOL]     assertEquals(true, julian.hours().isPrecise()); [EOL]     assertEquals(true, julian.minutes().isPrecise()); [EOL]     assertEquals(true, julian.seconds().isPrecise()); [EOL]     assertEquals(true, julian.millis().isPrecise()); [EOL]     final JulianChronology julianUTC = JulianChronology.getInstanceUTC(); [EOL]     assertEquals(false, julianUTC.centuries().isPrecise()); [EOL]     assertEquals(false, julianUTC.years().isPrecise()); [EOL]     assertEquals(false, julianUTC.weekyears().isPrecise()); [EOL]     assertEquals(false, julianUTC.months().isPrecise()); [EOL]     assertEquals(true, julianUTC.weeks().isPrecise()); [EOL]     assertEquals(true, julianUTC.days().isPrecise()); [EOL]     assertEquals(true, julianUTC.halfdays().isPrecise()); [EOL]     assertEquals(true, julianUTC.hours().isPrecise()); [EOL]     assertEquals(true, julianUTC.minutes().isPrecise()); [EOL]     assertEquals(true, julianUTC.seconds().isPrecise()); [EOL]     assertEquals(true, julianUTC.millis().isPrecise()); [EOL]     final DateTimeZone gmt = DateTimeZone.forID("Etc/GMT"); [EOL]     final JulianChronology julianGMT = JulianChronology.getInstance(gmt); [EOL]     assertEquals(false, julianGMT.centuries().isPrecise()); [EOL]     assertEquals(false, julianGMT.years().isPrecise()); [EOL]     assertEquals(false, julianGMT.weekyears().isPrecise()); [EOL]     assertEquals(false, julianGMT.months().isPrecise()); [EOL]     assertEquals(true, julianGMT.weeks().isPrecise()); [EOL]     assertEquals(true, julianGMT.days().isPrecise()); [EOL]     assertEquals(true, julianGMT.halfdays().isPrecise()); [EOL]     assertEquals(true, julianGMT.hours().isPrecise()); [EOL]     assertEquals(true, julianGMT.minutes().isPrecise()); [EOL]     assertEquals(true, julianGMT.seconds().isPrecise()); [EOL]     assertEquals(true, julianGMT.millis().isPrecise()); [EOL] }
public void testCompareTo() { [EOL]     YearMonthDay test1 = new YearMonthDay(2005, 6, 2); [EOL]     YearMonthDay test1a = new YearMonthDay(2005, 6, 2); [EOL]     assertEquals(0, test1.compareTo(test1a)); [EOL]     assertEquals(0, test1a.compareTo(test1)); [EOL]     assertEquals(0, test1.compareTo(test1)); [EOL]     assertEquals(0, test1a.compareTo(test1a)); [EOL]     YearMonthDay test2 = new YearMonthDay(2005, 7, 2); [EOL]     assertEquals(-1, test1.compareTo(test2)); [EOL]     assertEquals(+1, test2.compareTo(test1)); [EOL]     YearMonthDay test3 = new YearMonthDay(2005, 7, 2, GregorianChronology.getInstanceUTC()); [EOL]     assertEquals(-1, test1.compareTo(test3)); [EOL]     assertEquals(+1, test3.compareTo(test1)); [EOL]     assertEquals(0, test3.compareTo(test2)); [EOL]     DateTimeFieldType[] types = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth() }; [EOL]     int[] values = new int[] { 2005, 6, 2 }; [EOL]     Partial p = new Partial(types, values); [EOL]     assertEquals(0, test1.compareTo(p)); [EOL]     try { [EOL]         test1.compareTo(null); [EOL]         fail(); [EOL]     } catch (NullPointerException ex) { [EOL]     } [EOL]     try { [EOL]         test1.compareTo(new TimeOfDay()); [EOL]         fail(); [EOL]     } catch (ClassCastException ex) { [EOL]     } [EOL]     Partial partial = new Partial().with(DateTimeFieldType.centuryOfEra(), 1).with(DateTimeFieldType.halfdayOfDay(), 0).with(DateTimeFieldType.dayOfMonth(), 9); [EOL]     try { [EOL]         new YearMonthDay(1970, 6, 9).compareTo(partial); [EOL]         fail(); [EOL]     } catch (ClassCastException ex) { [EOL]     } [EOL] }
public void testPropertyGetCenturyOfEra() { [EOL]     DateMidnight test = new DateMidnight(2004, 6, 9); [EOL]     assertSame(test.getChronology().centuryOfEra(), test.centuryOfEra().getField()); [EOL]     assertEquals("centuryOfEra", test.centuryOfEra().getName()); [EOL]     assertEquals("Property[centuryOfEra]", test.centuryOfEra().toString()); [EOL]     assertSame(test, test.centuryOfEra().getDateMidnight()); [EOL]     assertEquals(20, test.centuryOfEra().get()); [EOL]     assertEquals("20", test.centuryOfEra().getAsText()); [EOL]     assertEquals("20", test.centuryOfEra().getAsText(Locale.FRENCH)); [EOL]     assertEquals("20", test.centuryOfEra().getAsShortText()); [EOL]     assertEquals("20", test.centuryOfEra().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().centuries(), test.centuryOfEra().getDurationField()); [EOL]     assertEquals(test.getChronology().eras(), test.centuryOfEra().getRangeDurationField()); [EOL]     assertEquals(7, test.centuryOfEra().getMaximumTextLength(null)); [EOL]     assertEquals(7, test.centuryOfEra().getMaximumShortTextLength(null)); [EOL] }
public void testWithers() { [EOL]     DateTime test = new DateTime(1970, 6, 9, 10, 20, 30, 40, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     DateTime test = new DateTime(1970, 6, 9, 10, 20, 30, 40, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     DateTime test = new DateTime(1970, 6, 9, 10, 20, 30, 40, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testSetInterval_RI_RI3() { [EOL]     MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     test.setInterval(null, new Instant(TEST_TIME2 + 1)); [EOL]     assertEquals(TEST_TIME_NOW, test.getStartMillis()); [EOL]     assertEquals(TEST_TIME2 + 1, test.getEndMillis()); [EOL] }
public void testSetInterval_RI_RI3() { [EOL]     MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     test.setInterval(null, new Instant(TEST_TIME2 + 1)); [EOL]     assertEquals(TEST_TIME_NOW, test.getStartMillis()); [EOL]     assertEquals(TEST_TIME2 + 1, test.getEndMillis()); [EOL] }
public void testSetInterval_RI_RI3() { [EOL]     MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     test.setInterval(null, new Instant(TEST_TIME2 + 1)); [EOL]     assertEquals(TEST_TIME_NOW, test.getStartMillis()); [EOL]     assertEquals(TEST_TIME2 + 1, test.getEndMillis()); [EOL] }
public void testToMutableInterval1() { [EOL]     MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS); [EOL]     MutableInterval result = test.toMutableInterval(); [EOL]     assertEquals(test, result); [EOL]     assertNotSame(test, result); [EOL] }
public void testToMutableInterval1() { [EOL]     MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS); [EOL]     MutableInterval result = test.toMutableInterval(); [EOL]     assertEquals(test, result); [EOL]     assertNotSame(test, result); [EOL] }
public void testConstructor_RI_RD1() throws Throwable { [EOL]     long result = TEST_TIME_NOW; [EOL]     result = ISOChronology.getInstance().months().add(result, 6); [EOL]     result = ISOChronology.getInstance().hours().add(result, 1); [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW); [EOL]     Duration dur = new Duration(result - TEST_TIME_NOW); [EOL]     MutableInterval test = new MutableInterval(dt, dur); [EOL]     assertEquals(dt.getMillis(), test.getStartMillis()); [EOL]     assertEquals(result, test.getEndMillis()); [EOL] }
public void testConstructor_RI_RD1() throws Throwable { [EOL]     long result = TEST_TIME_NOW; [EOL]     result = ISOChronology.getInstance().months().add(result, 6); [EOL]     result = ISOChronology.getInstance().hours().add(result, 1); [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW); [EOL]     Duration dur = new Duration(result - TEST_TIME_NOW); [EOL]     MutableInterval test = new MutableInterval(dt, dur); [EOL]     assertEquals(dt.getMillis(), test.getStartMillis()); [EOL]     assertEquals(result, test.getEndMillis()); [EOL] }
public void testConstructor_RD_RI1() throws Throwable { [EOL]     long result = TEST_TIME_NOW; [EOL]     result = ISOChronology.getInstance().months().add(result, -6); [EOL]     result = ISOChronology.getInstance().hours().add(result, -1); [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW); [EOL]     Duration dur = new Duration(TEST_TIME_NOW - result); [EOL]     MutableInterval test = new MutableInterval(dur, dt); [EOL]     assertEquals(result, test.getStartMillis()); [EOL]     assertEquals(dt.getMillis(), test.getEndMillis()); [EOL] }
public void testConstructor_RD_RI1() throws Throwable { [EOL]     long result = TEST_TIME_NOW; [EOL]     result = ISOChronology.getInstance().months().add(result, -6); [EOL]     result = ISOChronology.getInstance().hours().add(result, -1); [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW); [EOL]     Duration dur = new Duration(TEST_TIME_NOW - result); [EOL]     MutableInterval test = new MutableInterval(dur, dt); [EOL]     assertEquals(result, test.getStartMillis()); [EOL]     assertEquals(dt.getMillis(), test.getEndMillis()); [EOL] }
public void testConstructor_Object_Chronology1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     Interval base = new Interval(dt1, dt2); [EOL]     MutableInterval test = new MutableInterval(base, BuddhistChronology.getInstance()); [EOL]     assertEquals(dt1.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt2.getMillis(), test.getEndMillis()); [EOL]     assertEquals(BuddhistChronology.getInstance(), test.getChronology()); [EOL] }
public void testConstructor_Object_Chronology1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     Interval base = new Interval(dt1, dt2); [EOL]     MutableInterval test = new MutableInterval(base, BuddhistChronology.getInstance()); [EOL]     assertEquals(dt1.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt2.getMillis(), test.getEndMillis()); [EOL]     assertEquals(BuddhistChronology.getInstance(), test.getChronology()); [EOL] }
public void testConstructor_Object_Chronology1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     Interval base = new Interval(dt1, dt2); [EOL]     MutableInterval test = new MutableInterval(base, BuddhistChronology.getInstance()); [EOL]     assertEquals(dt1.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt2.getMillis(), test.getEndMillis()); [EOL]     assertEquals(BuddhistChronology.getInstance(), test.getChronology()); [EOL] }
public void testSetInterval_RInterval3() { [EOL]     MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     try { [EOL]         test.setInterval(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testSetInterval_RI_RI3() { [EOL]     MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     test.setInterval(null, new Instant(TEST_TIME2 + 1)); [EOL]     assertEquals(TEST_TIME_NOW, test.getStartMillis()); [EOL]     assertEquals(TEST_TIME2 + 1, test.getEndMillis()); [EOL] }
public void testSetInterval_RI_RI3() { [EOL]     MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     test.setInterval(null, new Instant(TEST_TIME2 + 1)); [EOL]     assertEquals(TEST_TIME_NOW, test.getStartMillis()); [EOL]     assertEquals(TEST_TIME2 + 1, test.getEndMillis()); [EOL] }
public void testSetDurationBeforeEnd_RI3() { [EOL]     MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     test.setDurationBeforeEnd(null); [EOL]     assertEquals(TEST_TIME2, test.getStartMillis()); [EOL]     assertEquals(TEST_TIME2, test.getEndMillis()); [EOL] }
public void testSetDurationBeforeEnd_RI3() { [EOL]     MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     test.setDurationBeforeEnd(null); [EOL]     assertEquals(TEST_TIME2, test.getStartMillis()); [EOL]     assertEquals(TEST_TIME2, test.getEndMillis()); [EOL] }
public void testSetEnd_RI3() { [EOL]     MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     test.setEnd(null); [EOL]     assertEquals(TEST_TIME1, test.getStartMillis()); [EOL]     assertEquals(TEST_TIME_NOW, test.getEndMillis()); [EOL] }
public void testSetDurationAfterStart_long1() { [EOL]     MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     test.setDurationAfterStart(123L); [EOL]     assertEquals(TEST_TIME1, test.getStartMillis()); [EOL]     assertEquals(TEST_TIME1 + 123L, test.getEndMillis()); [EOL] }
public void testSetDurationAfterStart_long1() { [EOL]     MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     test.setDurationAfterStart(123L); [EOL]     assertEquals(TEST_TIME1, test.getStartMillis()); [EOL]     assertEquals(TEST_TIME1 + 123L, test.getEndMillis()); [EOL] }
public void testSetDurationAfterStart_long1() { [EOL]     MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     test.setDurationAfterStart(123L); [EOL]     assertEquals(TEST_TIME1, test.getStartMillis()); [EOL]     assertEquals(TEST_TIME1 + 123L, test.getEndMillis()); [EOL] }
public void testSetDurationBeforeEnd_RI3() { [EOL]     MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     test.setDurationBeforeEnd(null); [EOL]     assertEquals(TEST_TIME2, test.getStartMillis()); [EOL]     assertEquals(TEST_TIME2, test.getEndMillis()); [EOL] }
public void testSetDurationBeforeEnd_RI3() { [EOL]     MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     test.setDurationBeforeEnd(null); [EOL]     assertEquals(TEST_TIME2, test.getStartMillis()); [EOL]     assertEquals(TEST_TIME2, test.getEndMillis()); [EOL] }
public void testSetDurationBeforeEnd_RI3() { [EOL]     MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     test.setDurationBeforeEnd(null); [EOL]     assertEquals(TEST_TIME2, test.getStartMillis()); [EOL]     assertEquals(TEST_TIME2, test.getEndMillis()); [EOL] }
public void testSetPeriodAfterStart_RI3() { [EOL]     MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     test.setPeriodAfterStart(null); [EOL]     assertEquals(TEST_TIME1, test.getStartMillis()); [EOL]     assertEquals(TEST_TIME1, test.getEndMillis()); [EOL] }
public void testSetPeriodAfterStart_RI3() { [EOL]     MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     test.setPeriodAfterStart(null); [EOL]     assertEquals(TEST_TIME1, test.getStartMillis()); [EOL]     assertEquals(TEST_TIME1, test.getEndMillis()); [EOL] }
public void testSetPeriodBeforeEnd_RI3() { [EOL]     MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     test.setPeriodBeforeEnd(null); [EOL]     assertEquals(TEST_TIME2, test.getStartMillis()); [EOL]     assertEquals(TEST_TIME2, test.getEndMillis()); [EOL] }
public void testSetPeriodBeforeEnd_RI3() { [EOL]     MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     test.setPeriodBeforeEnd(null); [EOL]     assertEquals(TEST_TIME2, test.getStartMillis()); [EOL]     assertEquals(TEST_TIME2, test.getEndMillis()); [EOL] }
public void test_now_nullDateTimeZone() throws Throwable { [EOL]     try { [EOL]         DateMidnight.now((DateTimeZone) null); [EOL]         fail(); [EOL]     } catch (NullPointerException ex) { [EOL]     } [EOL] }
public void test_now_nullDateTimeZone() throws Throwable { [EOL]     try { [EOL]         DateMidnight.now((DateTimeZone) null); [EOL]         fail(); [EOL]     } catch (NullPointerException ex) { [EOL]     } [EOL] }
public void testConstructor_nullObject() throws Throwable { [EOL]     DateMidnight test = new DateMidnight((Object) null); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW_LONDON, test.getMillis()); [EOL] }
public void testConstructor_nullObject() throws Throwable { [EOL]     DateMidnight test = new DateMidnight((Object) null); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW_LONDON, test.getMillis()); [EOL] }
public void testConstructor_nullObject() throws Throwable { [EOL]     DateMidnight test = new DateMidnight((Object) null); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW_LONDON, test.getMillis()); [EOL] }
public void testConstructor_nullObject() throws Throwable { [EOL]     DateMidnight test = new DateMidnight((Object) null); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW_LONDON, test.getMillis()); [EOL] }
public void testConstructor_nullObject() throws Throwable { [EOL]     DateMidnight test = new DateMidnight((Object) null); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW_LONDON, test.getMillis()); [EOL] }
public void testPlus_RP() { [EOL]     DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8)); [EOL]     DateMidnight expected = new DateMidnight(2003, 7, 28, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlus_RP() { [EOL]     DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8)); [EOL]     DateMidnight expected = new DateMidnight(2003, 7, 28, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlus_RP() { [EOL]     DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8)); [EOL]     DateMidnight expected = new DateMidnight(2003, 7, 28, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlus_RP() { [EOL]     DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8)); [EOL]     DateMidnight expected = new DateMidnight(2003, 7, 28, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlus_RP() { [EOL]     DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8)); [EOL]     DateMidnight expected = new DateMidnight(2003, 7, 28, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testMinusDays_int() { [EOL]     DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.minusDays(1); [EOL]     DateMidnight expected = new DateMidnight(2002, 5, 2, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusDays(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusDays_int() { [EOL]     DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.minusDays(1); [EOL]     DateMidnight expected = new DateMidnight(2002, 5, 2, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusDays(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusDays_int() { [EOL]     DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.minusDays(1); [EOL]     DateMidnight expected = new DateMidnight(2002, 5, 2, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusDays(0); [EOL]     assertSame(test, result); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testSerializedDateMidnightProperty() throws Exception { [EOL]     DateMidnight.Property test = new DateMidnight().monthOfYear(); [EOL]     loadAndCompare(test, "DateMidnightProperty", false); [EOL]     inlineCompare(test, false); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testSerializedDateMidnightProperty() throws Exception { [EOL]     DateMidnight.Property test = new DateMidnight().monthOfYear(); [EOL]     loadAndCompare(test, "DateMidnightProperty", false); [EOL]     inlineCompare(test, false); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testSerializedDateMidnightProperty() throws Exception { [EOL]     DateMidnight.Property test = new DateMidnight().monthOfYear(); [EOL]     loadAndCompare(test, "DateMidnightProperty", false); [EOL]     inlineCompare(test, false); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testSerializedDateMidnightProperty() throws Exception { [EOL]     DateMidnight.Property test = new DateMidnight().monthOfYear(); [EOL]     loadAndCompare(test, "DateMidnightProperty", false); [EOL]     inlineCompare(test, false); [EOL] }
public void testPropertyAddLongMonthOfYear() { [EOL]     DateMidnight test = new DateMidnight(2004, 6, 9); [EOL]     DateMidnight copy = test.monthOfYear().addToCopy(8L); [EOL]     assertEquals(2005, copy.getYear()); [EOL]     assertEquals(2, copy.getMonthOfYear()); [EOL]     assertEquals(9, copy.getDayOfMonth()); [EOL] }
public void testPropertyAddLongMonthOfYear() { [EOL]     DateMidnight test = new DateMidnight(2004, 6, 9); [EOL]     DateMidnight copy = test.monthOfYear().addToCopy(8L); [EOL]     assertEquals(2005, copy.getYear()); [EOL]     assertEquals(2, copy.getMonthOfYear()); [EOL]     assertEquals(9, copy.getDayOfMonth()); [EOL] }
public void testPropertyAddLongMonthOfYear() { [EOL]     DateMidnight test = new DateMidnight(2004, 6, 9); [EOL]     DateMidnight copy = test.monthOfYear().addToCopy(8L); [EOL]     assertEquals(2005, copy.getYear()); [EOL]     assertEquals(2, copy.getMonthOfYear()); [EOL]     assertEquals(9, copy.getDayOfMonth()); [EOL] }
public void testPropertyRoundHalfFloorMonthOfYear() { [EOL]     DateMidnight test = new DateMidnight(2004, 6, 16); [EOL]     DateMidnight copy = test.monthOfYear().roundHalfFloorCopy(); [EOL]     assertEquals("2004-06-01T00:00:00.000+01:00", copy.toString()); [EOL]     test = new DateMidnight(2004, 6, 17); [EOL]     copy = test.monthOfYear().roundHalfFloorCopy(); [EOL]     assertEquals("2004-07-01T00:00:00.000+01:00", copy.toString()); [EOL]     test = new DateMidnight(2004, 6, 15); [EOL]     copy = test.monthOfYear().roundHalfFloorCopy(); [EOL]     assertEquals("2004-06-01T00:00:00.000+01:00", copy.toString()); [EOL] }
public void testConstructor_Object_Chronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     YearMonthDay test = new YearMonthDay(date, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testConstructor_Object_Chronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     YearMonthDay test = new YearMonthDay(date, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testConstructor_Object_Chronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     YearMonthDay test = new YearMonthDay(date, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testConstructor_Object_Chronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     YearMonthDay test = new YearMonthDay(date, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
