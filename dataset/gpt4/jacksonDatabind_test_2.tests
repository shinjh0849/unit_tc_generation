public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testRootViaWriterAndReader() throws Exception { [EOL]     ObjectMapper mapper = rootMapper(); [EOL]     String json = mapper.writer().writeValueAsString(new Bean()); [EOL]     assertEquals("{\"rudy\":{\"a\":3}}", json); [EOL]     Bean bean = mapper.reader(Bean.class).readValue(json); [EOL]     assertNotNull(bean); [EOL] }
public void testRootViaWriterAndReader() throws Exception { [EOL]     ObjectMapper mapper = rootMapper(); [EOL]     String json = mapper.writer().writeValueAsString(new Bean()); [EOL]     assertEquals("{\"rudy\":{\"a\":3}}", json); [EOL]     Bean bean = mapper.reader(Bean.class).readValue(json); [EOL]     assertNotNull(bean); [EOL] }
public void testSimpleInclusionFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().addFilter("RootFilter", SimpleBeanPropertyFilter.filterOutAllExcept("a")); [EOL]     assertEquals("{\"a\":\"a\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.setFilters(prov); [EOL]     assertEquals("{\"a\":\"a\"}", mapper.writeValueAsString(new Bean())); [EOL] }
public void testSimpleInclusionFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().addFilter("RootFilter", SimpleBeanPropertyFilter.filterOutAllExcept("a")); [EOL]     assertEquals("{\"a\":\"a\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.setFilters(prov); [EOL]     assertEquals("{\"a\":\"a\"}", mapper.writeValueAsString(new Bean())); [EOL] }
public void testSimpleInclusionFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().addFilter("RootFilter", SimpleBeanPropertyFilter.filterOutAllExcept("a")); [EOL]     assertEquals("{\"a\":\"a\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.setFilters(prov); [EOL]     assertEquals("{\"a\":\"a\"}", mapper.writeValueAsString(new Bean())); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testNonNullByClass() throws IOException { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(m, new NoNullsBean()); [EOL]     assertEquals(1, result.size()); [EOL]     assertFalse(result.containsKey("a")); [EOL]     assertNull(result.get("a")); [EOL]     assertTrue(result.containsKey("b")); [EOL]     assertNull(result.get("b")); [EOL] }
public void testNonNullByClass() throws IOException { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(m, new NoNullsBean()); [EOL]     assertEquals(1, result.size()); [EOL]     assertFalse(result.containsKey("a")); [EOL]     assertNull(result.get("a")); [EOL]     assertTrue(result.containsKey("b")); [EOL]     assertNull(result.get("b")); [EOL] }
public void testNonNullByClass() throws IOException { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(m, new NoNullsBean()); [EOL]     assertEquals(1, result.size()); [EOL]     assertFalse(result.containsKey("a")); [EOL]     assertNull(result.get("a")); [EOL]     assertTrue(result.containsKey("b")); [EOL]     assertNull(result.get("b")); [EOL] }
public void testNonNullByClass() throws IOException { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(m, new NoNullsBean()); [EOL]     assertEquals(1, result.size()); [EOL]     assertFalse(result.containsKey("a")); [EOL]     assertNull(result.get("a")); [EOL]     assertTrue(result.containsKey("b")); [EOL]     assertNull(result.get("b")); [EOL] }
public void testNonNullByClass() throws IOException { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(m, new NoNullsBean()); [EOL]     assertEquals(1, result.size()); [EOL]     assertFalse(result.containsKey("a")); [EOL]     assertNull(result.get("a")); [EOL]     assertTrue(result.containsKey("b")); [EOL]     assertNull(result.get("b")); [EOL] }
public void testNonNullByClass() throws IOException { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(m, new NoNullsBean()); [EOL]     assertEquals(1, result.size()); [EOL]     assertFalse(result.containsKey("a")); [EOL]     assertNull(result.get("a")); [EOL]     assertTrue(result.containsKey("b")); [EOL]     assertNull(result.get("b")); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testCustomPropertyViaProperty() throws Exception { [EOL]     IdWrapperCustom src = new IdWrapperCustom(123, 7); [EOL]     src.node.next = src; [EOL]     String json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL]     json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL] }
public void testCustomPropertyViaProperty() throws Exception { [EOL]     IdWrapperCustom src = new IdWrapperCustom(123, 7); [EOL]     src.node.next = src; [EOL]     String json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL]     json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL] }
public void testCustomPropertyViaProperty() throws Exception { [EOL]     IdWrapperCustom src = new IdWrapperCustom(123, 7); [EOL]     src.node.next = src; [EOL]     String json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL]     json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL] }
public void testCustomPropertyViaProperty() throws Exception { [EOL]     IdWrapperCustom src = new IdWrapperCustom(123, 7); [EOL]     src.node.next = src; [EOL]     String json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL]     json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL] }
public void testCustomPropertyViaProperty() throws Exception { [EOL]     IdWrapperCustom src = new IdWrapperCustom(123, 7); [EOL]     src.node.next = src; [EOL]     String json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL]     json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL] }
public void testCustomPropertyViaProperty() throws Exception { [EOL]     IdWrapperCustom src = new IdWrapperCustom(123, 7); [EOL]     src.node.next = src; [EOL]     String json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL]     json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL] }
public void testCustomPropertyViaProperty() throws Exception { [EOL]     IdWrapperCustom src = new IdWrapperCustom(123, 7); [EOL]     src.node.next = src; [EOL]     String json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL]     json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL] }
public void testCustomPropertyViaProperty() throws Exception { [EOL]     IdWrapperCustom src = new IdWrapperCustom(123, 7); [EOL]     src.node.next = src; [EOL]     String json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL]     json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL] }
public void testCustomPropertyViaProperty() throws Exception { [EOL]     IdWrapperCustom src = new IdWrapperCustom(123, 7); [EOL]     src.node.next = src; [EOL]     String json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL]     json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL] }
public void testCustomPropertyViaProperty() throws Exception { [EOL]     IdWrapperCustom src = new IdWrapperCustom(123, 7); [EOL]     src.node.next = src; [EOL]     String json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL]     json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL] }
public void testCustomPropertyViaProperty() throws Exception { [EOL]     IdWrapperCustom src = new IdWrapperCustom(123, 7); [EOL]     src.node.next = src; [EOL]     String json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL]     json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSupport() { [EOL]     assertTrue(MAPPER.canSerialize(String.class)); [EOL]     assertTrue(MAPPER.canDeserialize(TypeFactory.defaultInstance().constructType(String.class))); [EOL] }
public void testSupport() { [EOL]     assertTrue(MAPPER.canSerialize(String.class)); [EOL]     assertTrue(MAPPER.canDeserialize(TypeFactory.defaultInstance().constructType(String.class))); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testNoCtorMap() throws Exception { [EOL]     try { [EOL]         BrokenMap result = MAPPER.readValue("{ \"a\" : 3 }", BrokenMap.class); [EOL]         assertNull(result); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "no default constructor found"); [EOL]     } [EOL] }
public void testNoCtorMap() throws Exception { [EOL]     try { [EOL]         BrokenMap result = MAPPER.readValue("{ \"a\" : 3 }", BrokenMap.class); [EOL]         assertNull(result); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "no default constructor found"); [EOL]     } [EOL] }
public void testNoCtorMap() throws Exception { [EOL]     try { [EOL]         BrokenMap result = MAPPER.readValue("{ \"a\" : 3 }", BrokenMap.class); [EOL]         assertNull(result); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "no default constructor found"); [EOL]     } [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testSimpleKeyDeser() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addKeyDeserializer(String.class, new ContextualDeser("???")); [EOL]     mapper.registerModule(module); [EOL]     MapBean result = mapper.readValue("{\"map\":{\"a\":3}}", MapBean.class); [EOL]     Map<String, Integer> map = result.map; [EOL]     assertNotNull(map); [EOL]     assertEquals(1, map.size()); [EOL]     Map.Entry<String, Integer> entry = map.entrySet().iterator().next(); [EOL]     assertEquals(Integer.valueOf(3), entry.getValue()); [EOL]     assertEquals("map:a", entry.getKey()); [EOL] }
public void testSimpleKeyDeser() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addKeyDeserializer(String.class, new ContextualDeser("???")); [EOL]     mapper.registerModule(module); [EOL]     MapBean result = mapper.readValue("{\"map\":{\"a\":3}}", MapBean.class); [EOL]     Map<String, Integer> map = result.map; [EOL]     assertNotNull(map); [EOL]     assertEquals(1, map.size()); [EOL]     Map.Entry<String, Integer> entry = map.entrySet().iterator().next(); [EOL]     assertEquals(Integer.valueOf(3), entry.getValue()); [EOL]     assertEquals("map:a", entry.getKey()); [EOL] }
public void testSimpleKeyDeser() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addKeyDeserializer(String.class, new ContextualDeser("???")); [EOL]     mapper.registerModule(module); [EOL]     MapBean result = mapper.readValue("{\"map\":{\"a\":3}}", MapBean.class); [EOL]     Map<String, Integer> map = result.map; [EOL]     assertNotNull(map); [EOL]     assertEquals(1, map.size()); [EOL]     Map.Entry<String, Integer> entry = map.entrySet().iterator().next(); [EOL]     assertEquals(Integer.valueOf(3), entry.getValue()); [EOL]     assertEquals("map:a", entry.getKey()); [EOL] }
public void testSimpleKeyDeser() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addKeyDeserializer(String.class, new ContextualDeser("???")); [EOL]     mapper.registerModule(module); [EOL]     MapBean result = mapper.readValue("{\"map\":{\"a\":3}}", MapBean.class); [EOL]     Map<String, Integer> map = result.map; [EOL]     assertNotNull(map); [EOL]     assertEquals(1, map.size()); [EOL]     Map.Entry<String, Integer> entry = map.entrySet().iterator().next(); [EOL]     assertEquals(Integer.valueOf(3), entry.getValue()); [EOL]     assertEquals("map:a", entry.getKey()); [EOL] }
public void testSimpleKeyDeser() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addKeyDeserializer(String.class, new ContextualDeser("???")); [EOL]     mapper.registerModule(module); [EOL]     MapBean result = mapper.readValue("{\"map\":{\"a\":3}}", MapBean.class); [EOL]     Map<String, Integer> map = result.map; [EOL]     assertNotNull(map); [EOL]     assertEquals(1, map.size()); [EOL]     Map.Entry<String, Integer> entry = map.entrySet().iterator().next(); [EOL]     assertEquals(Integer.valueOf(3), entry.getValue()); [EOL]     assertEquals("map:a", entry.getKey()); [EOL] }
public void testSimpleKeyDeser() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addKeyDeserializer(String.class, new ContextualDeser("???")); [EOL]     mapper.registerModule(module); [EOL]     MapBean result = mapper.readValue("{\"map\":{\"a\":3}}", MapBean.class); [EOL]     Map<String, Integer> map = result.map; [EOL]     assertNotNull(map); [EOL]     assertEquals(1, map.size()); [EOL]     Map.Entry<String, Integer> entry = map.entrySet().iterator().next(); [EOL]     assertEquals(Integer.valueOf(3), entry.getValue()); [EOL]     assertEquals("map:a", entry.getKey()); [EOL] }
public void testSimpleKeyDeser() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addKeyDeserializer(String.class, new ContextualDeser("???")); [EOL]     mapper.registerModule(module); [EOL]     MapBean result = mapper.readValue("{\"map\":{\"a\":3}}", MapBean.class); [EOL]     Map<String, Integer> map = result.map; [EOL]     assertNotNull(map); [EOL]     assertEquals(1, map.size()); [EOL]     Map.Entry<String, Integer> entry = map.entrySet().iterator().next(); [EOL]     assertEquals(Integer.valueOf(3), entry.getValue()); [EOL]     assertEquals("map:a", entry.getKey()); [EOL] }
public void testSimpleKeyDeser() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addKeyDeserializer(String.class, new ContextualDeser("???")); [EOL]     mapper.registerModule(module); [EOL]     MapBean result = mapper.readValue("{\"map\":{\"a\":3}}", MapBean.class); [EOL]     Map<String, Integer> map = result.map; [EOL]     assertNotNull(map); [EOL]     assertEquals(1, map.size()); [EOL]     Map.Entry<String, Integer> entry = map.entrySet().iterator().next(); [EOL]     assertEquals(Integer.valueOf(3), entry.getValue()); [EOL]     assertEquals("map:a", entry.getKey()); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSimpleStringGetter() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String value = "abc"; [EOL]     String result = m.writeValueAsString(new ClassGetter<String>(value)); [EOL]     String expected = String.format("{\"nonRaw\":\"%s\",\"raw\":%s,\"value\":%s}", value, value, value); [EOL]     assertEquals(expected, result); [EOL] }
public void testSimpleStringGetter() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String value = "abc"; [EOL]     String result = m.writeValueAsString(new ClassGetter<String>(value)); [EOL]     String expected = String.format("{\"nonRaw\":\"%s\",\"raw\":%s,\"value\":%s}", value, value, value); [EOL]     assertEquals(expected, result); [EOL] }
public void testSimpleStringGetter() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String value = "abc"; [EOL]     String result = m.writeValueAsString(new ClassGetter<String>(value)); [EOL]     String expected = String.format("{\"nonRaw\":\"%s\",\"raw\":%s,\"value\":%s}", value, value, value); [EOL]     assertEquals(expected, result); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testPartialIgnore() { [EOL]     POJOPropertiesCollector coll = collector(mapper, IgnoredSetter.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("value"); [EOL]     assertNotNull(prop); [EOL]     assertFalse(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertTrue(prop.hasField()); [EOL] }
public void testPartialIgnore() { [EOL]     POJOPropertiesCollector coll = collector(mapper, IgnoredSetter.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("value"); [EOL]     assertNotNull(prop); [EOL]     assertFalse(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertTrue(prop.hasField()); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testPartialIgnore() { [EOL]     POJOPropertiesCollector coll = collector(mapper, IgnoredSetter.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("value"); [EOL]     assertNotNull(prop); [EOL]     assertFalse(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertTrue(prop.hasField()); [EOL] }
public void testPartialIgnore() { [EOL]     POJOPropertiesCollector coll = collector(mapper, IgnoredSetter.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("value"); [EOL]     assertNotNull(prop); [EOL]     assertFalse(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertTrue(prop.hasField()); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testPartialIgnore() { [EOL]     POJOPropertiesCollector coll = collector(mapper, IgnoredSetter.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("value"); [EOL]     assertNotNull(prop); [EOL]     assertFalse(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertTrue(prop.hasField()); [EOL] }
public void testPartialIgnore() { [EOL]     POJOPropertiesCollector coll = collector(mapper, IgnoredSetter.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("value"); [EOL]     assertNotNull(prop); [EOL]     assertFalse(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertTrue(prop.hasField()); [EOL] }
public void testPartialIgnore() { [EOL]     POJOPropertiesCollector coll = collector(mapper, IgnoredSetter.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("value"); [EOL]     assertNotNull(prop); [EOL]     assertFalse(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertTrue(prop.hasField()); [EOL] }
public void testPartialIgnore() { [EOL]     POJOPropertiesCollector coll = collector(mapper, IgnoredSetter.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("value"); [EOL]     assertNotNull(prop); [EOL]     assertFalse(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertTrue(prop.hasField()); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testFromMap() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ObjectNode root = mapper.createObjectNode(); [EOL]     root.put(FIELD4, TEXT2); [EOL]     root.put(FIELD3, -1); [EOL]     root.putArray(FIELD2); [EOL]     root.put(FIELD1, DOUBLE_VALUE); [EOL]     for (int i = 0; i < 2; ++i) { [EOL]         StringWriter sw = new StringWriter(); [EOL]         if (i == 0) { [EOL]             JsonGenerator gen = new JsonFactory().createGenerator(sw); [EOL]             root.serialize(gen, null); [EOL]             gen.close(); [EOL]         } else { [EOL]             mapper.writeValue(sw, root); [EOL]         } [EOL]         verifyFromMap(sw.toString()); [EOL]     } [EOL]     verifyFromMap(root.toString()); [EOL] }
public void testFromMap() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ObjectNode root = mapper.createObjectNode(); [EOL]     root.put(FIELD4, TEXT2); [EOL]     root.put(FIELD3, -1); [EOL]     root.putArray(FIELD2); [EOL]     root.put(FIELD1, DOUBLE_VALUE); [EOL]     for (int i = 0; i < 2; ++i) { [EOL]         StringWriter sw = new StringWriter(); [EOL]         if (i == 0) { [EOL]             JsonGenerator gen = new JsonFactory().createGenerator(sw); [EOL]             root.serialize(gen, null); [EOL]             gen.close(); [EOL]         } else { [EOL]             mapper.writeValue(sw, root); [EOL]         } [EOL]         verifyFromMap(sw.toString()); [EOL]     } [EOL]     verifyFromMap(root.toString()); [EOL] }
public void testFromMap() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ObjectNode root = mapper.createObjectNode(); [EOL]     root.put(FIELD4, TEXT2); [EOL]     root.put(FIELD3, -1); [EOL]     root.putArray(FIELD2); [EOL]     root.put(FIELD1, DOUBLE_VALUE); [EOL]     for (int i = 0; i < 2; ++i) { [EOL]         StringWriter sw = new StringWriter(); [EOL]         if (i == 0) { [EOL]             JsonGenerator gen = new JsonFactory().createGenerator(sw); [EOL]             root.serialize(gen, null); [EOL]             gen.close(); [EOL]         } else { [EOL]             mapper.writeValue(sw, root); [EOL]         } [EOL]         verifyFromMap(sw.toString()); [EOL]     } [EOL]     verifyFromMap(root.toString()); [EOL] }
public void testFromMap() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ObjectNode root = mapper.createObjectNode(); [EOL]     root.put(FIELD4, TEXT2); [EOL]     root.put(FIELD3, -1); [EOL]     root.putArray(FIELD2); [EOL]     root.put(FIELD1, DOUBLE_VALUE); [EOL]     for (int i = 0; i < 2; ++i) { [EOL]         StringWriter sw = new StringWriter(); [EOL]         if (i == 0) { [EOL]             JsonGenerator gen = new JsonFactory().createGenerator(sw); [EOL]             root.serialize(gen, null); [EOL]             gen.close(); [EOL]         } else { [EOL]             mapper.writeValue(sw, root); [EOL]         } [EOL]         verifyFromMap(sw.toString()); [EOL]     } [EOL]     verifyFromMap(root.toString()); [EOL] }
public void testSimpleObject() throws Exception { [EOL]     String JSON = "{ \"key\" : 1, \"b\" : \"x\" }"; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode root = mapper.readTree(JSON); [EOL]     assertFalse(root.isValueNode()); [EOL]     assertTrue(root.isContainerNode()); [EOL]     assertFalse(root.isArray()); [EOL]     assertTrue(root.isObject()); [EOL]     assertEquals(2, root.size()); [EOL]     Iterator<JsonNode> it = root.iterator(); [EOL]     assertNotNull(it); [EOL]     assertTrue(it.hasNext()); [EOL]     JsonNode n = it.next(); [EOL]     assertNotNull(n); [EOL]     assertEquals(IntNode.valueOf(1), n); [EOL]     assertTrue(it.hasNext()); [EOL]     n = it.next(); [EOL]     assertNotNull(n); [EOL]     assertEquals(TextNode.valueOf("x"), n); [EOL]     assertFalse(it.hasNext()); [EOL]     ObjectNode obNode = (ObjectNode) root; [EOL]     Iterator<Map.Entry<String, JsonNode>> fit = obNode.fields(); [EOL]     assertTrue(fit.hasNext()); [EOL]     Map.Entry<String, JsonNode> en = fit.next(); [EOL]     assertEquals("key", en.getKey()); [EOL]     assertEquals(IntNode.valueOf(1), en.getValue()); [EOL]     assertTrue(fit.hasNext()); [EOL]     en = fit.next(); [EOL]     assertEquals("b", en.getKey()); [EOL]     assertEquals(TextNode.valueOf("x"), en.getValue()); [EOL]     fit.remove(); [EOL]     assertEquals(1, obNode.size()); [EOL]     assertEquals(IntNode.valueOf(1), root.get("key")); [EOL]     assertNull(root.get("b")); [EOL] }
public void testSimpleObject() throws Exception { [EOL]     String JSON = "{ \"key\" : 1, \"b\" : \"x\" }"; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode root = mapper.readTree(JSON); [EOL]     assertFalse(root.isValueNode()); [EOL]     assertTrue(root.isContainerNode()); [EOL]     assertFalse(root.isArray()); [EOL]     assertTrue(root.isObject()); [EOL]     assertEquals(2, root.size()); [EOL]     Iterator<JsonNode> it = root.iterator(); [EOL]     assertNotNull(it); [EOL]     assertTrue(it.hasNext()); [EOL]     JsonNode n = it.next(); [EOL]     assertNotNull(n); [EOL]     assertEquals(IntNode.valueOf(1), n); [EOL]     assertTrue(it.hasNext()); [EOL]     n = it.next(); [EOL]     assertNotNull(n); [EOL]     assertEquals(TextNode.valueOf("x"), n); [EOL]     assertFalse(it.hasNext()); [EOL]     ObjectNode obNode = (ObjectNode) root; [EOL]     Iterator<Map.Entry<String, JsonNode>> fit = obNode.fields(); [EOL]     assertTrue(fit.hasNext()); [EOL]     Map.Entry<String, JsonNode> en = fit.next(); [EOL]     assertEquals("key", en.getKey()); [EOL]     assertEquals(IntNode.valueOf(1), en.getValue()); [EOL]     assertTrue(fit.hasNext()); [EOL]     en = fit.next(); [EOL]     assertEquals("b", en.getKey()); [EOL]     assertEquals(TextNode.valueOf("x"), en.getValue()); [EOL]     fit.remove(); [EOL]     assertEquals(1, obNode.size()); [EOL]     assertEquals(IntNode.valueOf(1), root.get("key")); [EOL]     assertNull(root.get("b")); [EOL] }
public void testSimpleObject() throws Exception { [EOL]     String JSON = "{ \"key\" : 1, \"b\" : \"x\" }"; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode root = mapper.readTree(JSON); [EOL]     assertFalse(root.isValueNode()); [EOL]     assertTrue(root.isContainerNode()); [EOL]     assertFalse(root.isArray()); [EOL]     assertTrue(root.isObject()); [EOL]     assertEquals(2, root.size()); [EOL]     Iterator<JsonNode> it = root.iterator(); [EOL]     assertNotNull(it); [EOL]     assertTrue(it.hasNext()); [EOL]     JsonNode n = it.next(); [EOL]     assertNotNull(n); [EOL]     assertEquals(IntNode.valueOf(1), n); [EOL]     assertTrue(it.hasNext()); [EOL]     n = it.next(); [EOL]     assertNotNull(n); [EOL]     assertEquals(TextNode.valueOf("x"), n); [EOL]     assertFalse(it.hasNext()); [EOL]     ObjectNode obNode = (ObjectNode) root; [EOL]     Iterator<Map.Entry<String, JsonNode>> fit = obNode.fields(); [EOL]     assertTrue(fit.hasNext()); [EOL]     Map.Entry<String, JsonNode> en = fit.next(); [EOL]     assertEquals("key", en.getKey()); [EOL]     assertEquals(IntNode.valueOf(1), en.getValue()); [EOL]     assertTrue(fit.hasNext()); [EOL]     en = fit.next(); [EOL]     assertEquals("b", en.getKey()); [EOL]     assertEquals(TextNode.valueOf("x"), en.getValue()); [EOL]     fit.remove(); [EOL]     assertEquals(1, obNode.size()); [EOL]     assertEquals(IntNode.valueOf(1), root.get("key")); [EOL]     assertNull(root.get("b")); [EOL] }
public void testSimpleObject() throws Exception { [EOL]     String JSON = "{ \"key\" : 1, \"b\" : \"x\" }"; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode root = mapper.readTree(JSON); [EOL]     assertFalse(root.isValueNode()); [EOL]     assertTrue(root.isContainerNode()); [EOL]     assertFalse(root.isArray()); [EOL]     assertTrue(root.isObject()); [EOL]     assertEquals(2, root.size()); [EOL]     Iterator<JsonNode> it = root.iterator(); [EOL]     assertNotNull(it); [EOL]     assertTrue(it.hasNext()); [EOL]     JsonNode n = it.next(); [EOL]     assertNotNull(n); [EOL]     assertEquals(IntNode.valueOf(1), n); [EOL]     assertTrue(it.hasNext()); [EOL]     n = it.next(); [EOL]     assertNotNull(n); [EOL]     assertEquals(TextNode.valueOf("x"), n); [EOL]     assertFalse(it.hasNext()); [EOL]     ObjectNode obNode = (ObjectNode) root; [EOL]     Iterator<Map.Entry<String, JsonNode>> fit = obNode.fields(); [EOL]     assertTrue(fit.hasNext()); [EOL]     Map.Entry<String, JsonNode> en = fit.next(); [EOL]     assertEquals("key", en.getKey()); [EOL]     assertEquals(IntNode.valueOf(1), en.getValue()); [EOL]     assertTrue(fit.hasNext()); [EOL]     en = fit.next(); [EOL]     assertEquals("b", en.getKey()); [EOL]     assertEquals(TextNode.valueOf("x"), en.getValue()); [EOL]     fit.remove(); [EOL]     assertEquals(1, obNode.size()); [EOL]     assertEquals(IntNode.valueOf(1), root.get("key")); [EOL]     assertNull(root.get("b")); [EOL] }
public void testIssue709() throws Exception { [EOL]     byte[] inputData = new byte[] { 1, 2, 3 }; [EOL]     ObjectNode node = MAPPER.createObjectNode(); [EOL]     node.put("data", inputData); [EOL]     Issue709Bean result = MAPPER.treeToValue(node, Issue709Bean.class); [EOL]     String json = MAPPER.writeValueAsString(node); [EOL]     Issue709Bean resultFromString = MAPPER.readValue(json, Issue709Bean.class); [EOL]     Issue709Bean resultFromConvert = MAPPER.convertValue(node, Issue709Bean.class); [EOL]     Assert.assertArrayEquals(inputData, resultFromString.data); [EOL]     Assert.assertArrayEquals(inputData, resultFromConvert.data); [EOL]     Assert.assertArrayEquals(inputData, result.data); [EOL] }
public void testIssue709() throws Exception { [EOL]     byte[] inputData = new byte[] { 1, 2, 3 }; [EOL]     ObjectNode node = MAPPER.createObjectNode(); [EOL]     node.put("data", inputData); [EOL]     Issue709Bean result = MAPPER.treeToValue(node, Issue709Bean.class); [EOL]     String json = MAPPER.writeValueAsString(node); [EOL]     Issue709Bean resultFromString = MAPPER.readValue(json, Issue709Bean.class); [EOL]     Issue709Bean resultFromConvert = MAPPER.convertValue(node, Issue709Bean.class); [EOL]     Assert.assertArrayEquals(inputData, resultFromString.data); [EOL]     Assert.assertArrayEquals(inputData, resultFromConvert.data); [EOL]     Assert.assertArrayEquals(inputData, result.data); [EOL] }
public void testAsBoolean() throws Exception { [EOL]     assertEquals(false, BooleanNode.FALSE.asBoolean()); [EOL]     assertEquals(true, BooleanNode.TRUE.asBoolean()); [EOL]     assertEquals(false, IntNode.valueOf(0).asBoolean()); [EOL]     assertEquals(true, IntNode.valueOf(1).asBoolean()); [EOL]     assertEquals(false, LongNode.valueOf(0).asBoolean()); [EOL]     assertEquals(true, LongNode.valueOf(-34L).asBoolean()); [EOL]     assertEquals(true, new TextNode("true").asBoolean()); [EOL]     assertEquals(false, new TextNode("false").asBoolean()); [EOL]     assertEquals(false, new TextNode("barf").asBoolean()); [EOL]     assertEquals(true, new TextNode("barf").asBoolean(true)); [EOL]     assertEquals(true, new POJONode(Boolean.TRUE).asBoolean()); [EOL] }
public void testAsBoolean() throws Exception { [EOL]     assertEquals(false, BooleanNode.FALSE.asBoolean()); [EOL]     assertEquals(true, BooleanNode.TRUE.asBoolean()); [EOL]     assertEquals(false, IntNode.valueOf(0).asBoolean()); [EOL]     assertEquals(true, IntNode.valueOf(1).asBoolean()); [EOL]     assertEquals(false, LongNode.valueOf(0).asBoolean()); [EOL]     assertEquals(true, LongNode.valueOf(-34L).asBoolean()); [EOL]     assertEquals(true, new TextNode("true").asBoolean()); [EOL]     assertEquals(false, new TextNode("false").asBoolean()); [EOL]     assertEquals(false, new TextNode("barf").asBoolean()); [EOL]     assertEquals(true, new TextNode("barf").asBoolean(true)); [EOL]     assertEquals(true, new POJONode(Boolean.TRUE).asBoolean()); [EOL] }
public void testMissing() { [EOL]     MissingNode n = MissingNode.getInstance(); [EOL]     assertTrue(n.isMissingNode()); [EOL]     assertEquals(JsonToken.NOT_AVAILABLE, n.asToken()); [EOL]     assertEquals("", n.asText()); [EOL]     assertStandardEquals(n); [EOL]     assertEquals("", n.toString()); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL]     assertTrue(n.asBoolean(true)); [EOL]     assertEquals(4, n.asInt(4)); [EOL]     assertEquals(5L, n.asLong(5)); [EOL]     assertEquals(0.25, n.asDouble(0.25)); [EOL] }
public void testMissing() { [EOL]     MissingNode n = MissingNode.getInstance(); [EOL]     assertTrue(n.isMissingNode()); [EOL]     assertEquals(JsonToken.NOT_AVAILABLE, n.asToken()); [EOL]     assertEquals("", n.asText()); [EOL]     assertStandardEquals(n); [EOL]     assertEquals("", n.toString()); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL]     assertTrue(n.asBoolean(true)); [EOL]     assertEquals(4, n.asInt(4)); [EOL]     assertEquals(5L, n.asLong(5)); [EOL]     assertEquals(0.25, n.asDouble(0.25)); [EOL] }
public void testIssue476() throws Exception { [EOL]     final String JSON = "{\"value1\" : {\"name\" : \"fruit\", \"value\" : \"apple\"}, \"value2\" : {\"name\" : \"color\", \"value\" : \"red\"}}"; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new Issue476Module()); [EOL]     mapper.readValue(JSON, Issue476Bean.class); [EOL]     assertEquals(2, Issue476Deserializer.propCount); [EOL] }
public void testIssue476() throws Exception { [EOL]     final String JSON = "{\"value1\" : {\"name\" : \"fruit\", \"value\" : \"apple\"}, \"value2\" : {\"name\" : \"color\", \"value\" : \"red\"}}"; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new Issue476Module()); [EOL]     mapper.readValue(JSON, Issue476Bean.class); [EOL]     assertEquals(2, Issue476Deserializer.propCount); [EOL] }
public void testIssue476() throws Exception { [EOL]     final String JSON = "{\"value1\" : {\"name\" : \"fruit\", \"value\" : \"apple\"}, \"value2\" : {\"name\" : \"color\", \"value\" : \"red\"}}"; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new Issue476Module()); [EOL]     mapper.readValue(JSON, Issue476Bean.class); [EOL]     assertEquals(2, Issue476Deserializer.propCount); [EOL] }
public void testIssue476() throws Exception { [EOL]     final String JSON = "{\"value1\" : {\"name\" : \"fruit\", \"value\" : \"apple\"}, \"value2\" : {\"name\" : \"color\", \"value\" : \"red\"}}"; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new Issue476Module()); [EOL]     mapper.readValue(JSON, Issue476Bean.class); [EOL]     assertEquals(2, Issue476Deserializer.propCount); [EOL] }
public void testModifyKeyDeserializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setDeserializerModifier(new KeyDeserializerModifier())); [EOL]     Map<?, ?> result = mapper.readValue("{\"a\":1}", Map.class); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("foo", result.entrySet().iterator().next().getKey()); [EOL] }
public void testSuperInterfaces() { [EOL]     Collection<Class<?>> result = ClassUtil.findSuperTypes(SubInt.class, null); [EOL]     Class<?>[] classes = result.toArray(new Class<?>[result.size()]); [EOL]     Class<?>[] exp = new Class[] { BaseInt.class }; [EOL]     assertArrayEquals(exp, classes); [EOL] }
public void testSuperInterfaces() { [EOL]     Collection<Class<?>> result = ClassUtil.findSuperTypes(SubInt.class, null); [EOL]     Class<?>[] classes = result.toArray(new Class<?>[result.size()]); [EOL]     Class<?>[] exp = new Class[] { BaseInt.class }; [EOL]     assertArrayEquals(exp, classes); [EOL] }
public void testSuperInterfaces() { [EOL]     Collection<Class<?>> result = ClassUtil.findSuperTypes(SubInt.class, null); [EOL]     Class<?>[] classes = result.toArray(new Class<?>[result.size()]); [EOL]     Class<?>[] exp = new Class[] { BaseInt.class }; [EOL]     assertArrayEquals(exp, classes); [EOL] }
public void testSuperInterfaces() { [EOL]     Collection<Class<?>> result = ClassUtil.findSuperTypes(SubInt.class, null); [EOL]     Class<?>[] classes = result.toArray(new Class<?>[result.size()]); [EOL]     Class<?>[] exp = new Class[] { BaseInt.class }; [EOL]     assertArrayEquals(exp, classes); [EOL] }
public void testSuperInterfaces() { [EOL]     Collection<Class<?>> result = ClassUtil.findSuperTypes(SubInt.class, null); [EOL]     Class<?>[] classes = result.toArray(new Class<?>[result.size()]); [EOL]     Class<?>[] exp = new Class[] { BaseInt.class }; [EOL]     assertArrayEquals(exp, classes); [EOL] }
public void testSuperInterfaces() { [EOL]     Collection<Class<?>> result = ClassUtil.findSuperTypes(SubInt.class, null); [EOL]     Class<?>[] classes = result.toArray(new Class<?>[result.size()]); [EOL]     Class<?>[] exp = new Class[] { BaseInt.class }; [EOL]     assertArrayEquals(exp, classes); [EOL] }
public void testSuperInterfaces() { [EOL]     Collection<Class<?>> result = ClassUtil.findSuperTypes(SubInt.class, null); [EOL]     Class<?>[] classes = result.toArray(new Class<?>[result.size()]); [EOL]     Class<?>[] exp = new Class[] { BaseInt.class }; [EOL]     assertArrayEquals(exp, classes); [EOL] }
public void testSuperInterfaces() { [EOL]     Collection<Class<?>> result = ClassUtil.findSuperTypes(SubInt.class, null); [EOL]     Class<?>[] classes = result.toArray(new Class<?>[result.size()]); [EOL]     Class<?>[] exp = new Class[] { BaseInt.class }; [EOL]     assertArrayEquals(exp, classes); [EOL] }
public void testSuperInterfaces() { [EOL]     Collection<Class<?>> result = ClassUtil.findSuperTypes(SubInt.class, null); [EOL]     Class<?>[] classes = result.toArray(new Class<?>[result.size()]); [EOL]     Class<?>[] exp = new Class[] { BaseInt.class }; [EOL]     assertArrayEquals(exp, classes); [EOL] }
public void testSuperInterfaces() { [EOL]     Collection<Class<?>> result = ClassUtil.findSuperTypes(SubInt.class, null); [EOL]     Class<?>[] classes = result.toArray(new Class<?>[result.size()]); [EOL]     Class<?>[] exp = new Class[] { BaseInt.class }; [EOL]     assertArrayEquals(exp, classes); [EOL] }
public void testSuperInterfaces() { [EOL]     Collection<Class<?>> result = ClassUtil.findSuperTypes(SubInt.class, null); [EOL]     Class<?>[] classes = result.toArray(new Class<?>[result.size()]); [EOL]     Class<?>[] exp = new Class[] { BaseInt.class }; [EOL]     assertArrayEquals(exp, classes); [EOL] }
public void testSuperInterfaces() { [EOL]     Collection<Class<?>> result = ClassUtil.findSuperTypes(SubInt.class, null); [EOL]     Class<?>[] classes = result.toArray(new Class<?>[result.size()]); [EOL]     Class<?>[] exp = new Class[] { BaseInt.class }; [EOL]     assertArrayEquals(exp, classes); [EOL] }
public void testSuperInterfaces() { [EOL]     Collection<Class<?>> result = ClassUtil.findSuperTypes(SubInt.class, null); [EOL]     Class<?>[] classes = result.toArray(new Class<?>[result.size()]); [EOL]     Class<?>[] exp = new Class[] { BaseInt.class }; [EOL]     assertArrayEquals(exp, classes); [EOL] }
public void testSuperInterfaces() { [EOL]     Collection<Class<?>> result = ClassUtil.findSuperTypes(SubInt.class, null); [EOL]     Class<?>[] classes = result.toArray(new Class<?>[result.size()]); [EOL]     Class<?>[] exp = new Class[] { BaseInt.class }; [EOL]     assertArrayEquals(exp, classes); [EOL] }
public void testSuperInterfaces() { [EOL]     Collection<Class<?>> result = ClassUtil.findSuperTypes(SubInt.class, null); [EOL]     Class<?>[] classes = result.toArray(new Class<?>[result.size()]); [EOL]     Class<?>[] exp = new Class[] { BaseInt.class }; [EOL]     assertArrayEquals(exp, classes); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testCollectionType() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType collectionT = CollectionType.construct(List.class, tf.constructType(String.class)); [EOL]     assertNotNull(collectionT); [EOL]     assertTrue(collectionT.isContainerType()); [EOL]     assertSame(collectionT, collectionT.narrowContentsBy(String.class)); [EOL]     assertNotNull(collectionT.toString()); [EOL]     assertTrue(collectionT.equals(collectionT)); [EOL]     assertFalse(collectionT.equals(null)); [EOL]     assertFalse(collectionT.equals("xyz")); [EOL]     assertTrue(collectionT.equals(CollectionType.construct(List.class, tf.constructType(String.class)))); [EOL]     assertFalse(collectionT.equals(CollectionType.construct(Set.class, tf.constructType(String.class)))); [EOL]     try { [EOL]         SimpleType.construct(ArrayList.class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "for a Collection"); [EOL]     } [EOL] }
public void testWithGetterAsSetter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new CStyleStrategy()); [EOL]     SetterlessWithValue input = new SetterlessWithValue().add(3); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"value_list\":[{\"int_value\":3}]}", json); [EOL]     SetterlessWithValue result = mapper.readValue(json, SetterlessWithValue.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(1, result.values.size()); [EOL]     assertEquals(3, result.values.get(0).intValue); [EOL] }
public void testWithGetterAsSetter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new CStyleStrategy()); [EOL]     SetterlessWithValue input = new SetterlessWithValue().add(3); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"value_list\":[{\"int_value\":3}]}", json); [EOL]     SetterlessWithValue result = mapper.readValue(json, SetterlessWithValue.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(1, result.values.size()); [EOL]     assertEquals(3, result.values.get(0).intValue); [EOL] }
public void testCollectionType() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType collectionT = CollectionType.construct(List.class, tf.constructType(String.class)); [EOL]     assertNotNull(collectionT); [EOL]     assertTrue(collectionT.isContainerType()); [EOL]     assertSame(collectionT, collectionT.narrowContentsBy(String.class)); [EOL]     assertNotNull(collectionT.toString()); [EOL]     assertTrue(collectionT.equals(collectionT)); [EOL]     assertFalse(collectionT.equals(null)); [EOL]     assertFalse(collectionT.equals("xyz")); [EOL]     assertTrue(collectionT.equals(CollectionType.construct(List.class, tf.constructType(String.class)))); [EOL]     assertFalse(collectionT.equals(CollectionType.construct(Set.class, tf.constructType(String.class)))); [EOL]     try { [EOL]         SimpleType.construct(ArrayList.class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "for a Collection"); [EOL]     } [EOL] }
public void testCollectionType() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType collectionT = CollectionType.construct(List.class, tf.constructType(String.class)); [EOL]     assertNotNull(collectionT); [EOL]     assertTrue(collectionT.isContainerType()); [EOL]     assertSame(collectionT, collectionT.narrowContentsBy(String.class)); [EOL]     assertNotNull(collectionT.toString()); [EOL]     assertTrue(collectionT.equals(collectionT)); [EOL]     assertFalse(collectionT.equals(null)); [EOL]     assertFalse(collectionT.equals("xyz")); [EOL]     assertTrue(collectionT.equals(CollectionType.construct(List.class, tf.constructType(String.class)))); [EOL]     assertFalse(collectionT.equals(CollectionType.construct(Set.class, tf.constructType(String.class)))); [EOL]     try { [EOL]         SimpleType.construct(ArrayList.class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "for a Collection"); [EOL]     } [EOL] }
public void testSerializedAsListWithClassAnnotations() throws IOException { [EOL]     SimpleValueList list = new SimpleValueList(); [EOL]     list.add(new ActualValue("foo")); [EOL]     assertEquals("[{\"value\":\"foo\"}]", MAPPER.writeValueAsString(list)); [EOL] }
public void testSerializedAsListWithClassAnnotations() throws IOException { [EOL]     SimpleValueList list = new SimpleValueList(); [EOL]     list.add(new ActualValue("foo")); [EOL]     assertEquals("[{\"value\":\"foo\"}]", MAPPER.writeValueAsString(list)); [EOL] }
public void testCollectionType() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType collectionT = CollectionType.construct(List.class, tf.constructType(String.class)); [EOL]     assertNotNull(collectionT); [EOL]     assertTrue(collectionT.isContainerType()); [EOL]     assertSame(collectionT, collectionT.narrowContentsBy(String.class)); [EOL]     assertNotNull(collectionT.toString()); [EOL]     assertTrue(collectionT.equals(collectionT)); [EOL]     assertFalse(collectionT.equals(null)); [EOL]     assertFalse(collectionT.equals("xyz")); [EOL]     assertTrue(collectionT.equals(CollectionType.construct(List.class, tf.constructType(String.class)))); [EOL]     assertFalse(collectionT.equals(CollectionType.construct(Set.class, tf.constructType(String.class)))); [EOL]     try { [EOL]         SimpleType.construct(ArrayList.class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "for a Collection"); [EOL]     } [EOL] }
public void testCollectionType() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType collectionT = CollectionType.construct(List.class, tf.constructType(String.class)); [EOL]     assertNotNull(collectionT); [EOL]     assertTrue(collectionT.isContainerType()); [EOL]     assertSame(collectionT, collectionT.narrowContentsBy(String.class)); [EOL]     assertNotNull(collectionT.toString()); [EOL]     assertTrue(collectionT.equals(collectionT)); [EOL]     assertFalse(collectionT.equals(null)); [EOL]     assertFalse(collectionT.equals("xyz")); [EOL]     assertTrue(collectionT.equals(CollectionType.construct(List.class, tf.constructType(String.class)))); [EOL]     assertFalse(collectionT.equals(CollectionType.construct(Set.class, tf.constructType(String.class)))); [EOL]     try { [EOL]         SimpleType.construct(ArrayList.class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "for a Collection"); [EOL]     } [EOL] }
public void testCollectionType() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType collectionT = CollectionType.construct(List.class, tf.constructType(String.class)); [EOL]     assertNotNull(collectionT); [EOL]     assertTrue(collectionT.isContainerType()); [EOL]     assertSame(collectionT, collectionT.narrowContentsBy(String.class)); [EOL]     assertNotNull(collectionT.toString()); [EOL]     assertTrue(collectionT.equals(collectionT)); [EOL]     assertFalse(collectionT.equals(null)); [EOL]     assertFalse(collectionT.equals("xyz")); [EOL]     assertTrue(collectionT.equals(CollectionType.construct(List.class, tf.constructType(String.class)))); [EOL]     assertFalse(collectionT.equals(CollectionType.construct(Set.class, tf.constructType(String.class)))); [EOL]     try { [EOL]         SimpleType.construct(ArrayList.class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "for a Collection"); [EOL]     } [EOL] }
public void testDelegating() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addDeserializer(Immutable.class, new StdDelegatingDeserializer<Immutable>(new StdConverter<JsonNode, Immutable>() { [EOL]  [EOL]         @Override [EOL]         public Immutable convert(JsonNode value) { [EOL]             int x = value.path("x").asInt(); [EOL]             int y = value.path("y").asInt(); [EOL]             return new Immutable(x, y); [EOL]         } [EOL]     })); [EOL]     mapper.registerModule(module); [EOL]     Immutable imm = mapper.readValue("{\"x\":3,\"y\":7}", Immutable.class); [EOL]     assertEquals(3, imm.x); [EOL]     assertEquals(7, imm.y); [EOL] }
public void testDelegating() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addDeserializer(Immutable.class, new StdDelegatingDeserializer<Immutable>(new StdConverter<JsonNode, Immutable>() { [EOL]  [EOL]         @Override [EOL]         public Immutable convert(JsonNode value) { [EOL]             int x = value.path("x").asInt(); [EOL]             int y = value.path("y").asInt(); [EOL]             return new Immutable(x, y); [EOL]         } [EOL]     })); [EOL]     mapper.registerModule(module); [EOL]     Immutable imm = mapper.readValue("{\"x\":3,\"y\":7}", Immutable.class); [EOL]     assertEquals(3, imm.x); [EOL]     assertEquals(7, imm.y); [EOL] }
public void testDelegating() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addDeserializer(Immutable.class, new StdDelegatingDeserializer<Immutable>(new StdConverter<JsonNode, Immutable>() { [EOL]  [EOL]         @Override [EOL]         public Immutable convert(JsonNode value) { [EOL]             int x = value.path("x").asInt(); [EOL]             int y = value.path("y").asInt(); [EOL]             return new Immutable(x, y); [EOL]         } [EOL]     })); [EOL]     mapper.registerModule(module); [EOL]     Immutable imm = mapper.readValue("{\"x\":3,\"y\":7}", Immutable.class); [EOL]     assertEquals(3, imm.x); [EOL]     assertEquals(7, imm.y); [EOL] }
public void testDelegating() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addDeserializer(Immutable.class, new StdDelegatingDeserializer<Immutable>(new StdConverter<JsonNode, Immutable>() { [EOL]  [EOL]         @Override [EOL]         public Immutable convert(JsonNode value) { [EOL]             int x = value.path("x").asInt(); [EOL]             int y = value.path("y").asInt(); [EOL]             return new Immutable(x, y); [EOL]         } [EOL]     })); [EOL]     mapper.registerModule(module); [EOL]     Immutable imm = mapper.readValue("{\"x\":3,\"y\":7}", Immutable.class); [EOL]     assertEquals(3, imm.x); [EOL]     assertEquals(7, imm.y); [EOL] }
public void testDelegating() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addDeserializer(Immutable.class, new StdDelegatingDeserializer<Immutable>(new StdConverter<JsonNode, Immutable>() { [EOL]  [EOL]         @Override [EOL]         public Immutable convert(JsonNode value) { [EOL]             int x = value.path("x").asInt(); [EOL]             int y = value.path("y").asInt(); [EOL]             return new Immutable(x, y); [EOL]         } [EOL]     })); [EOL]     mapper.registerModule(module); [EOL]     Immutable imm = mapper.readValue("{\"x\":3,\"y\":7}", Immutable.class); [EOL]     assertEquals(3, imm.x); [EOL]     assertEquals(7, imm.y); [EOL] }
public void testDelegating() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addDeserializer(Immutable.class, new StdDelegatingDeserializer<Immutable>(new StdConverter<JsonNode, Immutable>() { [EOL]  [EOL]         @Override [EOL]         public Immutable convert(JsonNode value) { [EOL]             int x = value.path("x").asInt(); [EOL]             int y = value.path("y").asInt(); [EOL]             return new Immutable(x, y); [EOL]         } [EOL]     })); [EOL]     mapper.registerModule(module); [EOL]     Immutable imm = mapper.readValue("{\"x\":3,\"y\":7}", Immutable.class); [EOL]     assertEquals(3, imm.x); [EOL]     assertEquals(7, imm.y); [EOL] }
public void testDelegating() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addDeserializer(Immutable.class, new StdDelegatingDeserializer<Immutable>(new StdConverter<JsonNode, Immutable>() { [EOL]  [EOL]         @Override [EOL]         public Immutable convert(JsonNode value) { [EOL]             int x = value.path("x").asInt(); [EOL]             int y = value.path("y").asInt(); [EOL]             return new Immutable(x, y); [EOL]         } [EOL]     })); [EOL]     mapper.registerModule(module); [EOL]     Immutable imm = mapper.readValue("{\"x\":3,\"y\":7}", Immutable.class); [EOL]     assertEquals(3, imm.x); [EOL]     assertEquals(7, imm.y); [EOL] }
public void testEnumPolymorphicSerializationTest() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     List<ITestType> testTypesList = new ArrayList<ITestType>(); [EOL]     testTypesList.add(ConcreteType.ONE); [EOL]     testTypesList.add(ConcreteType.TWO); [EOL]     ListContainer listContainer = new ListContainer(); [EOL]     listContainer.testTypes = testTypesList; [EOL]     String json = mapper.writeValueAsString(listContainer); [EOL]     listContainer = mapper.readValue(json, ListContainer.class); [EOL]     EnumMapContainer enumMapContainer = new EnumMapContainer(); [EOL]     EnumMap<KeyEnum, ITestType> testTypesMap = new EnumMap<KeyEnum, ITestType>(KeyEnum.class); [EOL]     testTypesMap.put(KeyEnum.A, ConcreteType.ONE); [EOL]     testTypesMap.put(KeyEnum.B, ConcreteType.TWO); [EOL]     enumMapContainer.testTypes = testTypesMap; [EOL]     json = mapper.writeValueAsString(enumMapContainer); [EOL]     enumMapContainer = mapper.readValue(json, EnumMapContainer.class); [EOL] }
public void testEnumPolymorphicSerializationTest() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     List<ITestType> testTypesList = new ArrayList<ITestType>(); [EOL]     testTypesList.add(ConcreteType.ONE); [EOL]     testTypesList.add(ConcreteType.TWO); [EOL]     ListContainer listContainer = new ListContainer(); [EOL]     listContainer.testTypes = testTypesList; [EOL]     String json = mapper.writeValueAsString(listContainer); [EOL]     listContainer = mapper.readValue(json, ListContainer.class); [EOL]     EnumMapContainer enumMapContainer = new EnumMapContainer(); [EOL]     EnumMap<KeyEnum, ITestType> testTypesMap = new EnumMap<KeyEnum, ITestType>(KeyEnum.class); [EOL]     testTypesMap.put(KeyEnum.A, ConcreteType.ONE); [EOL]     testTypesMap.put(KeyEnum.B, ConcreteType.TWO); [EOL]     enumMapContainer.testTypes = testTypesMap; [EOL]     json = mapper.writeValueAsString(enumMapContainer); [EOL]     enumMapContainer = mapper.readValue(json, EnumMapContainer.class); [EOL] }
public void testEnumPolymorphicSerializationTest() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     List<ITestType> testTypesList = new ArrayList<ITestType>(); [EOL]     testTypesList.add(ConcreteType.ONE); [EOL]     testTypesList.add(ConcreteType.TWO); [EOL]     ListContainer listContainer = new ListContainer(); [EOL]     listContainer.testTypes = testTypesList; [EOL]     String json = mapper.writeValueAsString(listContainer); [EOL]     listContainer = mapper.readValue(json, ListContainer.class); [EOL]     EnumMapContainer enumMapContainer = new EnumMapContainer(); [EOL]     EnumMap<KeyEnum, ITestType> testTypesMap = new EnumMap<KeyEnum, ITestType>(KeyEnum.class); [EOL]     testTypesMap.put(KeyEnum.A, ConcreteType.ONE); [EOL]     testTypesMap.put(KeyEnum.B, ConcreteType.TWO); [EOL]     enumMapContainer.testTypes = testTypesMap; [EOL]     json = mapper.writeValueAsString(enumMapContainer); [EOL]     enumMapContainer = mapper.readValue(json, EnumMapContainer.class); [EOL] }
public void testEnumPolymorphicSerializationTest() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     List<ITestType> testTypesList = new ArrayList<ITestType>(); [EOL]     testTypesList.add(ConcreteType.ONE); [EOL]     testTypesList.add(ConcreteType.TWO); [EOL]     ListContainer listContainer = new ListContainer(); [EOL]     listContainer.testTypes = testTypesList; [EOL]     String json = mapper.writeValueAsString(listContainer); [EOL]     listContainer = mapper.readValue(json, ListContainer.class); [EOL]     EnumMapContainer enumMapContainer = new EnumMapContainer(); [EOL]     EnumMap<KeyEnum, ITestType> testTypesMap = new EnumMap<KeyEnum, ITestType>(KeyEnum.class); [EOL]     testTypesMap.put(KeyEnum.A, ConcreteType.ONE); [EOL]     testTypesMap.put(KeyEnum.B, ConcreteType.TWO); [EOL]     enumMapContainer.testTypes = testTypesMap; [EOL]     json = mapper.writeValueAsString(enumMapContainer); [EOL]     enumMapContainer = mapper.readValue(json, EnumMapContainer.class); [EOL] }
public void testEnumPolymorphicSerializationTest() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     List<ITestType> testTypesList = new ArrayList<ITestType>(); [EOL]     testTypesList.add(ConcreteType.ONE); [EOL]     testTypesList.add(ConcreteType.TWO); [EOL]     ListContainer listContainer = new ListContainer(); [EOL]     listContainer.testTypes = testTypesList; [EOL]     String json = mapper.writeValueAsString(listContainer); [EOL]     listContainer = mapper.readValue(json, ListContainer.class); [EOL]     EnumMapContainer enumMapContainer = new EnumMapContainer(); [EOL]     EnumMap<KeyEnum, ITestType> testTypesMap = new EnumMap<KeyEnum, ITestType>(KeyEnum.class); [EOL]     testTypesMap.put(KeyEnum.A, ConcreteType.ONE); [EOL]     testTypesMap.put(KeyEnum.B, ConcreteType.TWO); [EOL]     enumMapContainer.testTypes = testTypesMap; [EOL]     json = mapper.writeValueAsString(enumMapContainer); [EOL]     enumMapContainer = mapper.readValue(json, EnumMapContainer.class); [EOL] }
public void testEnumPolymorphicSerializationTest() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     List<ITestType> testTypesList = new ArrayList<ITestType>(); [EOL]     testTypesList.add(ConcreteType.ONE); [EOL]     testTypesList.add(ConcreteType.TWO); [EOL]     ListContainer listContainer = new ListContainer(); [EOL]     listContainer.testTypes = testTypesList; [EOL]     String json = mapper.writeValueAsString(listContainer); [EOL]     listContainer = mapper.readValue(json, ListContainer.class); [EOL]     EnumMapContainer enumMapContainer = new EnumMapContainer(); [EOL]     EnumMap<KeyEnum, ITestType> testTypesMap = new EnumMap<KeyEnum, ITestType>(KeyEnum.class); [EOL]     testTypesMap.put(KeyEnum.A, ConcreteType.ONE); [EOL]     testTypesMap.put(KeyEnum.B, ConcreteType.TWO); [EOL]     enumMapContainer.testTypes = testTypesMap; [EOL]     json = mapper.writeValueAsString(enumMapContainer); [EOL]     enumMapContainer = mapper.readValue(json, EnumMapContainer.class); [EOL] }
public void testEnumPolymorphicSerializationTest() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     List<ITestType> testTypesList = new ArrayList<ITestType>(); [EOL]     testTypesList.add(ConcreteType.ONE); [EOL]     testTypesList.add(ConcreteType.TWO); [EOL]     ListContainer listContainer = new ListContainer(); [EOL]     listContainer.testTypes = testTypesList; [EOL]     String json = mapper.writeValueAsString(listContainer); [EOL]     listContainer = mapper.readValue(json, ListContainer.class); [EOL]     EnumMapContainer enumMapContainer = new EnumMapContainer(); [EOL]     EnumMap<KeyEnum, ITestType> testTypesMap = new EnumMap<KeyEnum, ITestType>(KeyEnum.class); [EOL]     testTypesMap.put(KeyEnum.A, ConcreteType.ONE); [EOL]     testTypesMap.put(KeyEnum.B, ConcreteType.TWO); [EOL]     enumMapContainer.testTypes = testTypesMap; [EOL]     json = mapper.writeValueAsString(enumMapContainer); [EOL]     enumMapContainer = mapper.readValue(json, EnumMapContainer.class); [EOL] }
public void testEnumPolymorphicSerializationTest() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     List<ITestType> testTypesList = new ArrayList<ITestType>(); [EOL]     testTypesList.add(ConcreteType.ONE); [EOL]     testTypesList.add(ConcreteType.TWO); [EOL]     ListContainer listContainer = new ListContainer(); [EOL]     listContainer.testTypes = testTypesList; [EOL]     String json = mapper.writeValueAsString(listContainer); [EOL]     listContainer = mapper.readValue(json, ListContainer.class); [EOL]     EnumMapContainer enumMapContainer = new EnumMapContainer(); [EOL]     EnumMap<KeyEnum, ITestType> testTypesMap = new EnumMap<KeyEnum, ITestType>(KeyEnum.class); [EOL]     testTypesMap.put(KeyEnum.A, ConcreteType.ONE); [EOL]     testTypesMap.put(KeyEnum.B, ConcreteType.TWO); [EOL]     enumMapContainer.testTypes = testTypesMap; [EOL]     json = mapper.writeValueAsString(enumMapContainer); [EOL]     enumMapContainer = mapper.readValue(json, EnumMapContainer.class); [EOL] }
public void testEnumPolymorphicSerializationTest() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     List<ITestType> testTypesList = new ArrayList<ITestType>(); [EOL]     testTypesList.add(ConcreteType.ONE); [EOL]     testTypesList.add(ConcreteType.TWO); [EOL]     ListContainer listContainer = new ListContainer(); [EOL]     listContainer.testTypes = testTypesList; [EOL]     String json = mapper.writeValueAsString(listContainer); [EOL]     listContainer = mapper.readValue(json, ListContainer.class); [EOL]     EnumMapContainer enumMapContainer = new EnumMapContainer(); [EOL]     EnumMap<KeyEnum, ITestType> testTypesMap = new EnumMap<KeyEnum, ITestType>(KeyEnum.class); [EOL]     testTypesMap.put(KeyEnum.A, ConcreteType.ONE); [EOL]     testTypesMap.put(KeyEnum.B, ConcreteType.TWO); [EOL]     enumMapContainer.testTypes = testTypesMap; [EOL]     json = mapper.writeValueAsString(enumMapContainer); [EOL]     enumMapContainer = mapper.readValue(json, EnumMapContainer.class); [EOL] }
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(NullNode.instance, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testWithGetterAsSetter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new CStyleStrategy()); [EOL]     SetterlessWithValue input = new SetterlessWithValue().add(3); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"value_list\":[{\"int_value\":3}]}", json); [EOL]     SetterlessWithValue result = mapper.readValue(json, SetterlessWithValue.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(1, result.values.size()); [EOL]     assertEquals(3, result.values.get(0).intValue); [EOL] }
public void testWithGetterAsSetter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new CStyleStrategy()); [EOL]     SetterlessWithValue input = new SetterlessWithValue().add(3); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"value_list\":[{\"int_value\":3}]}", json); [EOL]     SetterlessWithValue result = mapper.readValue(json, SetterlessWithValue.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(1, result.values.size()); [EOL]     assertEquals(3, result.values.get(0).intValue); [EOL] }
public void testWithGetterAsSetter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new CStyleStrategy()); [EOL]     SetterlessWithValue input = new SetterlessWithValue().add(3); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"value_list\":[{\"int_value\":3}]}", json); [EOL]     SetterlessWithValue result = mapper.readValue(json, SetterlessWithValue.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(1, result.values.size()); [EOL]     assertEquals(3, result.values.get(0).intValue); [EOL] }
public void testWithGetterAsSetter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new CStyleStrategy()); [EOL]     SetterlessWithValue input = new SetterlessWithValue().add(3); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"value_list\":[{\"int_value\":3}]}", json); [EOL]     SetterlessWithValue result = mapper.readValue(json, SetterlessWithValue.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(1, result.values.size()); [EOL]     assertEquals(3, result.values.get(0).intValue); [EOL] }
public void testWithGetterAsSetter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new CStyleStrategy()); [EOL]     SetterlessWithValue input = new SetterlessWithValue().add(3); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"value_list\":[{\"int_value\":3}]}", json); [EOL]     SetterlessWithValue result = mapper.readValue(json, SetterlessWithValue.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(1, result.values.size()); [EOL]     assertEquals(3, result.values.get(0).intValue); [EOL] }
public void testWithGetterAsSetter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new CStyleStrategy()); [EOL]     SetterlessWithValue input = new SetterlessWithValue().add(3); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"value_list\":[{\"int_value\":3}]}", json); [EOL]     SetterlessWithValue result = mapper.readValue(json, SetterlessWithValue.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(1, result.values.size()); [EOL]     assertEquals(3, result.values.get(0).intValue); [EOL] }
public void testWithGetterAsSetter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new CStyleStrategy()); [EOL]     SetterlessWithValue input = new SetterlessWithValue().add(3); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"value_list\":[{\"int_value\":3}]}", json); [EOL]     SetterlessWithValue result = mapper.readValue(json, SetterlessWithValue.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(1, result.values.size()); [EOL]     assertEquals(3, result.values.get(0).intValue); [EOL] }
public void testWithGetterAsSetter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new CStyleStrategy()); [EOL]     SetterlessWithValue input = new SetterlessWithValue().add(3); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"value_list\":[{\"int_value\":3}]}", json); [EOL]     SetterlessWithValue result = mapper.readValue(json, SetterlessWithValue.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(1, result.values.size()); [EOL]     assertEquals(3, result.values.get(0).intValue); [EOL] }
public void testWithGetterAsSetter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new CStyleStrategy()); [EOL]     SetterlessWithValue input = new SetterlessWithValue().add(3); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"value_list\":[{\"int_value\":3}]}", json); [EOL]     SetterlessWithValue result = mapper.readValue(json, SetterlessWithValue.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(1, result.values.size()); [EOL]     assertEquals(3, result.values.get(0).intValue); [EOL] }
public void testWithGetterAsSetter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new CStyleStrategy()); [EOL]     SetterlessWithValue input = new SetterlessWithValue().add(3); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"value_list\":[{\"int_value\":3}]}", json); [EOL]     SetterlessWithValue result = mapper.readValue(json, SetterlessWithValue.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(1, result.values.size()); [EOL]     assertEquals(3, result.values.get(0).intValue); [EOL] }
public void testIssue811() throws Exception { [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.disable(MapperFeature.AUTO_DETECT_CREATORS); [EOL]     om.disable(MapperFeature.AUTO_DETECT_GETTERS); [EOL]     om.disable(MapperFeature.AUTO_DETECT_IS_GETTERS); [EOL]     om.setVisibility(PropertyAccessor.FIELD, Visibility.ANY); [EOL]     om.enable(SerializationFeature.WRITE_ENUMS_USING_INDEX); [EOL]     om.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     om.enableDefaultTypingAsProperty(DefaultTyping.NON_FINAL, "@class"); [EOL]     Process p = new Process(); [EOL]     Scope s = new Scope(p, null); [EOL]     FaultHandler fh = new FaultHandler(p); [EOL]     Catch c = new Catch(p, s); [EOL]     fh.catchBlocks.add(c); [EOL]     s.faultHandlers.add(fh); [EOL]     String json = om.writeValueAsString(p); [EOL]     Process restored = om.readValue(json, Process.class); [EOL]     assertNotNull(restored); [EOL]     assertEquals(0, p.id); [EOL]     assertEquals(3, p.children.size()); [EOL]     assertSame(p, p.children.get(0).owner); [EOL]     assertSame(p, p.children.get(1).owner); [EOL]     assertSame(p, p.children.get(2).owner); [EOL] }
public void testIssue811() throws Exception { [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.disable(MapperFeature.AUTO_DETECT_CREATORS); [EOL]     om.disable(MapperFeature.AUTO_DETECT_GETTERS); [EOL]     om.disable(MapperFeature.AUTO_DETECT_IS_GETTERS); [EOL]     om.setVisibility(PropertyAccessor.FIELD, Visibility.ANY); [EOL]     om.enable(SerializationFeature.WRITE_ENUMS_USING_INDEX); [EOL]     om.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     om.enableDefaultTypingAsProperty(DefaultTyping.NON_FINAL, "@class"); [EOL]     Process p = new Process(); [EOL]     Scope s = new Scope(p, null); [EOL]     FaultHandler fh = new FaultHandler(p); [EOL]     Catch c = new Catch(p, s); [EOL]     fh.catchBlocks.add(c); [EOL]     s.faultHandlers.add(fh); [EOL]     String json = om.writeValueAsString(p); [EOL]     Process restored = om.readValue(json, Process.class); [EOL]     assertNotNull(restored); [EOL]     assertEquals(0, p.id); [EOL]     assertEquals(3, p.children.size()); [EOL]     assertSame(p, p.children.get(0).owner); [EOL]     assertSame(p, p.children.get(1).owner); [EOL]     assertSame(p, p.children.get(2).owner); [EOL] }
public void testWithGetterAsSetter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new CStyleStrategy()); [EOL]     SetterlessWithValue input = new SetterlessWithValue().add(3); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"value_list\":[{\"int_value\":3}]}", json); [EOL]     SetterlessWithValue result = mapper.readValue(json, SetterlessWithValue.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(1, result.values.size()); [EOL]     assertEquals(3, result.values.get(0).intValue); [EOL] }
public void testWithGetterAsSetter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new CStyleStrategy()); [EOL]     SetterlessWithValue input = new SetterlessWithValue().add(3); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"value_list\":[{\"int_value\":3}]}", json); [EOL]     SetterlessWithValue result = mapper.readValue(json, SetterlessWithValue.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(1, result.values.size()); [EOL]     assertEquals(3, result.values.get(0).intValue); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
public void testSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setHandlerInstantiator(new MyInstantiator("xyz:")); [EOL]     assertEquals(quote("xyz:456"), mapper.writeValueAsString(new MyBean("456"))); [EOL] }
public void testRootUsingExplicitConfig() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ObjectWriter writer = mapper.writer().withRootName("wrapper"); [EOL]     String json = writer.writeValueAsString(new Bean()); [EOL]     assertEquals("{\"wrapper\":{\"a\":3}}", json); [EOL]     ObjectReader reader = mapper.reader(Bean.class).withRootName("wrapper"); [EOL]     Bean bean = reader.readValue(json); [EOL]     assertNotNull(bean); [EOL]     ObjectMapper wrapping = rootMapper(); [EOL]     json = wrapping.writer().withRootName("something").writeValueAsString(new Bean()); [EOL]     assertEquals("{\"something\":{\"a\":3}}", json); [EOL]     json = wrapping.writer().withRootName("").writeValueAsString(new Bean()); [EOL]     assertEquals("{\"a\":3}", json); [EOL]     bean = wrapping.reader(Bean.class).withRootName("").readValue(json); [EOL]     assertNotNull(bean); [EOL] }
public void testCopy() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertTrue(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     m.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     ObjectMapper m2 = m.copy(); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     m2.enable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES); [EOL]     assertTrue(m2.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     m.enable(DeserializationFeature.UNWRAP_ROOT_VALUE); [EOL]     assertTrue(m.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertNotSame(m.getFactory(), m2.getFactory()); [EOL]     assertEquals(0, m.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m.getDeserializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getDeserializationConfig().mixInCount()); [EOL]     m.addMixInAnnotations(String.class, Integer.class); [EOL]     assertEquals(1, m.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getSerializationConfig().mixInCount()); [EOL]     assertEquals(1, m.getDeserializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getDeserializationConfig().mixInCount()); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testFeature432() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTypingAsProperty(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE, "*CLASS*"); [EOL]     String json = mapper.writeValueAsString(new BeanHolder(new StringBean("punny"))); [EOL]     assertEquals("{\"bean\":{\"*CLASS*\":\"com.fasterxml.jackson.databind.jsontype.TestDefaultForObject$StringBean\",\"name\":\"punny\"}}", json); [EOL] }
public void testFeature432() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTypingAsProperty(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE, "*CLASS*"); [EOL]     String json = mapper.writeValueAsString(new BeanHolder(new StringBean("punny"))); [EOL]     assertEquals("{\"bean\":{\"*CLASS*\":\"com.fasterxml.jackson.databind.jsontype.TestDefaultForObject$StringBean\",\"name\":\"punny\"}}", json); [EOL] }
public void testSimpleFields() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new PrefixStrategy()); [EOL]     String json = mapper.writeValueAsString(new FieldBean(999)); [EOL]     assertEquals("{\"Field-key\":999}", json); [EOL]     FieldBean result = mapper.readValue(json, FieldBean.class); [EOL]     assertEquals(999, result.key); [EOL] }
public void testSimpleFields() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new PrefixStrategy()); [EOL]     String json = mapper.writeValueAsString(new FieldBean(999)); [EOL]     assertEquals("{\"Field-key\":999}", json); [EOL]     FieldBean result = mapper.readValue(json, FieldBean.class); [EOL]     assertEquals(999, result.key); [EOL] }
public void testRootUsingExplicitConfig() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ObjectWriter writer = mapper.writer().withRootName("wrapper"); [EOL]     String json = writer.writeValueAsString(new Bean()); [EOL]     assertEquals("{\"wrapper\":{\"a\":3}}", json); [EOL]     ObjectReader reader = mapper.reader(Bean.class).withRootName("wrapper"); [EOL]     Bean bean = reader.readValue(json); [EOL]     assertNotNull(bean); [EOL]     ObjectMapper wrapping = rootMapper(); [EOL]     json = wrapping.writer().withRootName("something").writeValueAsString(new Bean()); [EOL]     assertEquals("{\"something\":{\"a\":3}}", json); [EOL]     json = wrapping.writer().withRootName("").writeValueAsString(new Bean()); [EOL]     assertEquals("{\"a\":3}", json); [EOL]     bean = wrapping.reader(Bean.class).withRootName("").readValue(json); [EOL]     assertNotNull(bean); [EOL] }
public void testRootUsingExplicitConfig() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ObjectWriter writer = mapper.writer().withRootName("wrapper"); [EOL]     String json = writer.writeValueAsString(new Bean()); [EOL]     assertEquals("{\"wrapper\":{\"a\":3}}", json); [EOL]     ObjectReader reader = mapper.reader(Bean.class).withRootName("wrapper"); [EOL]     Bean bean = reader.readValue(json); [EOL]     assertNotNull(bean); [EOL]     ObjectMapper wrapping = rootMapper(); [EOL]     json = wrapping.writer().withRootName("something").writeValueAsString(new Bean()); [EOL]     assertEquals("{\"something\":{\"a\":3}}", json); [EOL]     json = wrapping.writer().withRootName("").writeValueAsString(new Bean()); [EOL]     assertEquals("{\"a\":3}", json); [EOL]     bean = wrapping.reader(Bean.class).withRootName("").readValue(json); [EOL]     assertNotNull(bean); [EOL] }
public void testRootUsingExplicitConfig() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ObjectWriter writer = mapper.writer().withRootName("wrapper"); [EOL]     String json = writer.writeValueAsString(new Bean()); [EOL]     assertEquals("{\"wrapper\":{\"a\":3}}", json); [EOL]     ObjectReader reader = mapper.reader(Bean.class).withRootName("wrapper"); [EOL]     Bean bean = reader.readValue(json); [EOL]     assertNotNull(bean); [EOL]     ObjectMapper wrapping = rootMapper(); [EOL]     json = wrapping.writer().withRootName("something").writeValueAsString(new Bean()); [EOL]     assertEquals("{\"something\":{\"a\":3}}", json); [EOL]     json = wrapping.writer().withRootName("").writeValueAsString(new Bean()); [EOL]     assertEquals("{\"a\":3}", json); [EOL]     bean = wrapping.reader(Bean.class).withRootName("").readValue(json); [EOL]     assertNotNull(bean); [EOL] }
public void testRootUsingExplicitConfig() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ObjectWriter writer = mapper.writer().withRootName("wrapper"); [EOL]     String json = writer.writeValueAsString(new Bean()); [EOL]     assertEquals("{\"wrapper\":{\"a\":3}}", json); [EOL]     ObjectReader reader = mapper.reader(Bean.class).withRootName("wrapper"); [EOL]     Bean bean = reader.readValue(json); [EOL]     assertNotNull(bean); [EOL]     ObjectMapper wrapping = rootMapper(); [EOL]     json = wrapping.writer().withRootName("something").writeValueAsString(new Bean()); [EOL]     assertEquals("{\"something\":{\"a\":3}}", json); [EOL]     json = wrapping.writer().withRootName("").writeValueAsString(new Bean()); [EOL]     assertEquals("{\"a\":3}", json); [EOL]     bean = wrapping.reader(Bean.class).withRootName("").readValue(json); [EOL]     assertNotNull(bean); [EOL] }
public void testSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setHandlerInstantiator(new MyInstantiator("xyz:")); [EOL]     assertEquals(quote("xyz:456"), mapper.writeValueAsString(new MyBean("456"))); [EOL] }
public void testSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setHandlerInstantiator(new MyInstantiator("xyz:")); [EOL]     assertEquals(quote("xyz:456"), mapper.writeValueAsString(new MyBean("456"))); [EOL] }
public void testSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setHandlerInstantiator(new MyInstantiator("xyz:")); [EOL]     assertEquals(quote("xyz:456"), mapper.writeValueAsString(new MyBean("456"))); [EOL] }
public void testSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setHandlerInstantiator(new MyInstantiator("xyz:")); [EOL]     assertEquals(quote("xyz:456"), mapper.writeValueAsString(new MyBean("456"))); [EOL] }
public void testPOJOFromEmptyString() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.readValue(quote(""), Bean.class); [EOL]         fail("Should not accept Empty String for POJO"); [EOL]     } catch (JsonProcessingException e) { [EOL]         verifyException(e, "from String value"); [EOL]     } [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true); [EOL]     Bean result = mapper.readValue(quote(""), Bean.class); [EOL]     assertNull(result); [EOL] }
public void testPOJOFromEmptyString() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.readValue(quote(""), Bean.class); [EOL]         fail("Should not accept Empty String for POJO"); [EOL]     } catch (JsonProcessingException e) { [EOL]         verifyException(e, "from String value"); [EOL]     } [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true); [EOL]     Bean result = mapper.readValue(quote(""), Bean.class); [EOL]     assertNull(result); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testIssue811() throws Exception { [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.disable(MapperFeature.AUTO_DETECT_CREATORS); [EOL]     om.disable(MapperFeature.AUTO_DETECT_GETTERS); [EOL]     om.disable(MapperFeature.AUTO_DETECT_IS_GETTERS); [EOL]     om.setVisibility(PropertyAccessor.FIELD, Visibility.ANY); [EOL]     om.enable(SerializationFeature.WRITE_ENUMS_USING_INDEX); [EOL]     om.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     om.enableDefaultTypingAsProperty(DefaultTyping.NON_FINAL, "@class"); [EOL]     Process p = new Process(); [EOL]     Scope s = new Scope(p, null); [EOL]     FaultHandler fh = new FaultHandler(p); [EOL]     Catch c = new Catch(p, s); [EOL]     fh.catchBlocks.add(c); [EOL]     s.faultHandlers.add(fh); [EOL]     String json = om.writeValueAsString(p); [EOL]     Process restored = om.readValue(json, Process.class); [EOL]     assertNotNull(restored); [EOL]     assertEquals(0, p.id); [EOL]     assertEquals(3, p.children.size()); [EOL]     assertSame(p, p.children.get(0).owner); [EOL]     assertSame(p, p.children.get(1).owner); [EOL]     assertSame(p, p.children.get(2).owner); [EOL] }
public void testIssue811() throws Exception { [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.disable(MapperFeature.AUTO_DETECT_CREATORS); [EOL]     om.disable(MapperFeature.AUTO_DETECT_GETTERS); [EOL]     om.disable(MapperFeature.AUTO_DETECT_IS_GETTERS); [EOL]     om.setVisibility(PropertyAccessor.FIELD, Visibility.ANY); [EOL]     om.enable(SerializationFeature.WRITE_ENUMS_USING_INDEX); [EOL]     om.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     om.enableDefaultTypingAsProperty(DefaultTyping.NON_FINAL, "@class"); [EOL]     Process p = new Process(); [EOL]     Scope s = new Scope(p, null); [EOL]     FaultHandler fh = new FaultHandler(p); [EOL]     Catch c = new Catch(p, s); [EOL]     fh.catchBlocks.add(c); [EOL]     s.faultHandlers.add(fh); [EOL]     String json = om.writeValueAsString(p); [EOL]     Process restored = om.readValue(json, Process.class); [EOL]     assertNotNull(restored); [EOL]     assertEquals(0, p.id); [EOL]     assertEquals(3, p.children.size()); [EOL]     assertSame(p, p.children.get(0).owner); [EOL]     assertSame(p, p.children.get(1).owner); [EOL]     assertSame(p, p.children.get(2).owner); [EOL] }
public void testIssue811() throws Exception { [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.disable(MapperFeature.AUTO_DETECT_CREATORS); [EOL]     om.disable(MapperFeature.AUTO_DETECT_GETTERS); [EOL]     om.disable(MapperFeature.AUTO_DETECT_IS_GETTERS); [EOL]     om.setVisibility(PropertyAccessor.FIELD, Visibility.ANY); [EOL]     om.enable(SerializationFeature.WRITE_ENUMS_USING_INDEX); [EOL]     om.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     om.enableDefaultTypingAsProperty(DefaultTyping.NON_FINAL, "@class"); [EOL]     Process p = new Process(); [EOL]     Scope s = new Scope(p, null); [EOL]     FaultHandler fh = new FaultHandler(p); [EOL]     Catch c = new Catch(p, s); [EOL]     fh.catchBlocks.add(c); [EOL]     s.faultHandlers.add(fh); [EOL]     String json = om.writeValueAsString(p); [EOL]     Process restored = om.readValue(json, Process.class); [EOL]     assertNotNull(restored); [EOL]     assertEquals(0, p.id); [EOL]     assertEquals(3, p.children.size()); [EOL]     assertSame(p, p.children.get(0).owner); [EOL]     assertSame(p, p.children.get(1).owner); [EOL]     assertSame(p, p.children.get(2).owner); [EOL] }
public void testIssue811() throws Exception { [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.disable(MapperFeature.AUTO_DETECT_CREATORS); [EOL]     om.disable(MapperFeature.AUTO_DETECT_GETTERS); [EOL]     om.disable(MapperFeature.AUTO_DETECT_IS_GETTERS); [EOL]     om.setVisibility(PropertyAccessor.FIELD, Visibility.ANY); [EOL]     om.enable(SerializationFeature.WRITE_ENUMS_USING_INDEX); [EOL]     om.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     om.enableDefaultTypingAsProperty(DefaultTyping.NON_FINAL, "@class"); [EOL]     Process p = new Process(); [EOL]     Scope s = new Scope(p, null); [EOL]     FaultHandler fh = new FaultHandler(p); [EOL]     Catch c = new Catch(p, s); [EOL]     fh.catchBlocks.add(c); [EOL]     s.faultHandlers.add(fh); [EOL]     String json = om.writeValueAsString(p); [EOL]     Process restored = om.readValue(json, Process.class); [EOL]     assertNotNull(restored); [EOL]     assertEquals(0, p.id); [EOL]     assertEquals(3, p.children.size()); [EOL]     assertSame(p, p.children.get(0).owner); [EOL]     assertSame(p, p.children.get(1).owner); [EOL]     assertSame(p, p.children.get(2).owner); [EOL] }
public void testIssue811() throws Exception { [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.disable(MapperFeature.AUTO_DETECT_CREATORS); [EOL]     om.disable(MapperFeature.AUTO_DETECT_GETTERS); [EOL]     om.disable(MapperFeature.AUTO_DETECT_IS_GETTERS); [EOL]     om.setVisibility(PropertyAccessor.FIELD, Visibility.ANY); [EOL]     om.enable(SerializationFeature.WRITE_ENUMS_USING_INDEX); [EOL]     om.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     om.enableDefaultTypingAsProperty(DefaultTyping.NON_FINAL, "@class"); [EOL]     Process p = new Process(); [EOL]     Scope s = new Scope(p, null); [EOL]     FaultHandler fh = new FaultHandler(p); [EOL]     Catch c = new Catch(p, s); [EOL]     fh.catchBlocks.add(c); [EOL]     s.faultHandlers.add(fh); [EOL]     String json = om.writeValueAsString(p); [EOL]     Process restored = om.readValue(json, Process.class); [EOL]     assertNotNull(restored); [EOL]     assertEquals(0, p.id); [EOL]     assertEquals(3, p.children.size()); [EOL]     assertSame(p, p.children.get(0).owner); [EOL]     assertSame(p, p.children.get(1).owner); [EOL]     assertSame(p, p.children.get(2).owner); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSimpleArrayMethod() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     MethodWrapperBeanArray array = new MethodWrapperBeanArray(new MethodWrapperBean[] { new MethodWrapperBean(new StringWrapper("A")) }); [EOL]     String json = mapper.writeValueAsString(array); [EOL]     MethodWrapperBeanArray result = mapper.readValue(json, MethodWrapperBeanArray.class); [EOL]     assertNotNull(result); [EOL]     MethodWrapperBean[] beans = result.beans; [EOL]     assertEquals(1, beans.length); [EOL]     MethodWrapperBean bean = beans[0]; [EOL]     assertEquals(StringWrapper.class, bean.value.getClass()); [EOL]     assertEquals(((StringWrapper) bean.value).str, "A"); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testBrokenConstructor() throws Exception { [EOL]     try { [EOL]         MAPPER.readValue("{ \"x\" : 42 }", BrokenBean.class); [EOL]     } catch (JsonMappingException je) { [EOL]         verifyException(je, "has no property name"); [EOL]     } [EOL] }
public void testBrokenConstructor() throws Exception { [EOL]     try { [EOL]         MAPPER.readValue("{ \"x\" : 42 }", BrokenBean.class); [EOL]     } catch (JsonMappingException je) { [EOL]         verifyException(je, "has no property name"); [EOL]     } [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testBeanAsObject() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String str = m.writeValueAsString(new Object[] { new StringBean("abc") }); [EOL]     _verifySerializationAsMap(str); [EOL]     Object ob = m.readValue(str, Object[].class); [EOL]     assertNotNull(ob); [EOL]     Object[] result = (Object[]) ob; [EOL]     assertNotNull(result[0]); [EOL]     assertEquals(StringBean.class, result[0].getClass()); [EOL]     assertEquals("abc", ((StringBean) result[0]).name); [EOL] }
public void testBeanAsObject() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String str = m.writeValueAsString(new Object[] { new StringBean("abc") }); [EOL]     _verifySerializationAsMap(str); [EOL]     Object ob = m.readValue(str, Object[].class); [EOL]     assertNotNull(ob); [EOL]     Object[] result = (Object[]) ob; [EOL]     assertNotNull(result[0]); [EOL]     assertEquals(StringBean.class, result[0].getClass()); [EOL]     assertEquals("abc", ((StringBean) result[0]).name); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testSimpleInclusionFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().addFilter("RootFilter", SimpleBeanPropertyFilter.filterOutAllExcept("a")); [EOL]     assertEquals("{\"a\":\"a\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.setFilters(prov); [EOL]     assertEquals("{\"a\":\"a\"}", mapper.writeValueAsString(new Bean())); [EOL] }
public void testSimpleInclusionFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().addFilter("RootFilter", SimpleBeanPropertyFilter.filterOutAllExcept("a")); [EOL]     assertEquals("{\"a\":\"a\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.setFilters(prov); [EOL]     assertEquals("{\"a\":\"a\"}", mapper.writeValueAsString(new Bean())); [EOL] }
public void testSimpleInclusionFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().addFilter("RootFilter", SimpleBeanPropertyFilter.filterOutAllExcept("a")); [EOL]     assertEquals("{\"a\":\"a\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.setFilters(prov); [EOL]     assertEquals("{\"a\":\"a\"}", mapper.writeValueAsString(new Bean())); [EOL] }
public void testSimpleInclusionFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().addFilter("RootFilter", SimpleBeanPropertyFilter.filterOutAllExcept("a")); [EOL]     assertEquals("{\"a\":\"a\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.setFilters(prov); [EOL]     assertEquals("{\"a\":\"a\"}", mapper.writeValueAsString(new Bean())); [EOL] }
public void testSimpleInclusionFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().addFilter("RootFilter", SimpleBeanPropertyFilter.filterOutAllExcept("a")); [EOL]     assertEquals("{\"a\":\"a\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.setFilters(prov); [EOL]     assertEquals("{\"a\":\"a\"}", mapper.writeValueAsString(new Bean())); [EOL] }
public void testSimpleInclusionFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().addFilter("RootFilter", SimpleBeanPropertyFilter.filterOutAllExcept("a")); [EOL]     assertEquals("{\"a\":\"a\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.setFilters(prov); [EOL]     assertEquals("{\"a\":\"a\"}", mapper.writeValueAsString(new Bean())); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testCustomPropertyViaProperty() throws Exception { [EOL]     IdWrapperCustom src = new IdWrapperCustom(123, 7); [EOL]     src.node.next = src; [EOL]     String json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL]     json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL] }
public void testCustomPropertyViaProperty() throws Exception { [EOL]     IdWrapperCustom src = new IdWrapperCustom(123, 7); [EOL]     src.node.next = src; [EOL]     String json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL]     json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL] }
public void testCustomPropertyViaProperty() throws Exception { [EOL]     IdWrapperCustom src = new IdWrapperCustom(123, 7); [EOL]     src.node.next = src; [EOL]     String json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL]     json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL] }
public void testCustomPropertyViaProperty() throws Exception { [EOL]     IdWrapperCustom src = new IdWrapperCustom(123, 7); [EOL]     src.node.next = src; [EOL]     String json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL]     json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL] }
public void testCustomPropertyViaProperty() throws Exception { [EOL]     IdWrapperCustom src = new IdWrapperCustom(123, 7); [EOL]     src.node.next = src; [EOL]     String json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL]     json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL] }
public void testCustomPropertyViaProperty() throws Exception { [EOL]     IdWrapperCustom src = new IdWrapperCustom(123, 7); [EOL]     src.node.next = src; [EOL]     String json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL]     json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL] }
public void testCustomPropertyViaProperty() throws Exception { [EOL]     IdWrapperCustom src = new IdWrapperCustom(123, 7); [EOL]     src.node.next = src; [EOL]     String json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL]     json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL] }
public void testCustomPropertyViaProperty() throws Exception { [EOL]     IdWrapperCustom src = new IdWrapperCustom(123, 7); [EOL]     src.node.next = src; [EOL]     String json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL]     json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testFinalFieldIgnoral() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     assertTrue(mapper.isEnabled(MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS)); [EOL]     mapper.disable(MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS); [EOL]     try { [EOL]         mapper.readValue("{\"x\":2}", FixedPoint.class); [EOL]         fail("Should not try to use final field"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "unrecognized field \"x\""); [EOL]     } [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testMapOfRefs() throws Exception { [EOL]     NodeMap root = new NodeMap(); [EOL]     NodeForMap node1 = new NodeForMap("a"); [EOL]     NodeForMap node2 = new NodeForMap("b"); [EOL]     Map<String, NodeForMap> nodes = new HashMap<String, NodeForMap>(); [EOL]     nodes.put("a1", node1); [EOL]     nodes.put("b2", node2); [EOL]     root.nodes = nodes; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = mapper.writeValueAsString(root); [EOL]     NodeMap result = mapper.readValue(json, NodeMap.class); [EOL]     Map<String, NodeForMap> kids = result.nodes; [EOL]     assertNotNull(kids); [EOL]     assertEquals(2, kids.size()); [EOL]     assertNotNull(kids.get("a1")); [EOL]     assertNotNull(kids.get("b2")); [EOL]     assertEquals("a", kids.get("a1").name); [EOL]     assertEquals("b", kids.get("b2").name); [EOL]     assertSame(result, kids.get("a1").parent); [EOL]     assertSame(result, kids.get("b2").parent); [EOL] }
public void testMapOfRefs() throws Exception { [EOL]     NodeMap root = new NodeMap(); [EOL]     NodeForMap node1 = new NodeForMap("a"); [EOL]     NodeForMap node2 = new NodeForMap("b"); [EOL]     Map<String, NodeForMap> nodes = new HashMap<String, NodeForMap>(); [EOL]     nodes.put("a1", node1); [EOL]     nodes.put("b2", node2); [EOL]     root.nodes = nodes; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = mapper.writeValueAsString(root); [EOL]     NodeMap result = mapper.readValue(json, NodeMap.class); [EOL]     Map<String, NodeForMap> kids = result.nodes; [EOL]     assertNotNull(kids); [EOL]     assertEquals(2, kids.size()); [EOL]     assertNotNull(kids.get("a1")); [EOL]     assertNotNull(kids.get("b2")); [EOL]     assertEquals("a", kids.get("a1").name); [EOL]     assertEquals("b", kids.get("b2").name); [EOL]     assertSame(result, kids.get("a1").parent); [EOL]     assertSame(result, kids.get("b2").parent); [EOL] }
public void testMapOfRefs() throws Exception { [EOL]     NodeMap root = new NodeMap(); [EOL]     NodeForMap node1 = new NodeForMap("a"); [EOL]     NodeForMap node2 = new NodeForMap("b"); [EOL]     Map<String, NodeForMap> nodes = new HashMap<String, NodeForMap>(); [EOL]     nodes.put("a1", node1); [EOL]     nodes.put("b2", node2); [EOL]     root.nodes = nodes; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = mapper.writeValueAsString(root); [EOL]     NodeMap result = mapper.readValue(json, NodeMap.class); [EOL]     Map<String, NodeForMap> kids = result.nodes; [EOL]     assertNotNull(kids); [EOL]     assertEquals(2, kids.size()); [EOL]     assertNotNull(kids.get("a1")); [EOL]     assertNotNull(kids.get("b2")); [EOL]     assertEquals("a", kids.get("a1").name); [EOL]     assertEquals("b", kids.get("b2").name); [EOL]     assertSame(result, kids.get("a1").parent); [EOL]     assertSame(result, kids.get("b2").parent); [EOL] }
public void testMapOfRefs() throws Exception { [EOL]     NodeMap root = new NodeMap(); [EOL]     NodeForMap node1 = new NodeForMap("a"); [EOL]     NodeForMap node2 = new NodeForMap("b"); [EOL]     Map<String, NodeForMap> nodes = new HashMap<String, NodeForMap>(); [EOL]     nodes.put("a1", node1); [EOL]     nodes.put("b2", node2); [EOL]     root.nodes = nodes; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = mapper.writeValueAsString(root); [EOL]     NodeMap result = mapper.readValue(json, NodeMap.class); [EOL]     Map<String, NodeForMap> kids = result.nodes; [EOL]     assertNotNull(kids); [EOL]     assertEquals(2, kids.size()); [EOL]     assertNotNull(kids.get("a1")); [EOL]     assertNotNull(kids.get("b2")); [EOL]     assertEquals("a", kids.get("a1").name); [EOL]     assertEquals("b", kids.get("b2").name); [EOL]     assertSame(result, kids.get("a1").parent); [EOL]     assertSame(result, kids.get("b2").parent); [EOL] }
public void testMapOfRefs() throws Exception { [EOL]     NodeMap root = new NodeMap(); [EOL]     NodeForMap node1 = new NodeForMap("a"); [EOL]     NodeForMap node2 = new NodeForMap("b"); [EOL]     Map<String, NodeForMap> nodes = new HashMap<String, NodeForMap>(); [EOL]     nodes.put("a1", node1); [EOL]     nodes.put("b2", node2); [EOL]     root.nodes = nodes; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = mapper.writeValueAsString(root); [EOL]     NodeMap result = mapper.readValue(json, NodeMap.class); [EOL]     Map<String, NodeForMap> kids = result.nodes; [EOL]     assertNotNull(kids); [EOL]     assertEquals(2, kids.size()); [EOL]     assertNotNull(kids.get("a1")); [EOL]     assertNotNull(kids.get("b2")); [EOL]     assertEquals("a", kids.get("a1").name); [EOL]     assertEquals("b", kids.get("b2").name); [EOL]     assertSame(result, kids.get("a1").parent); [EOL]     assertSame(result, kids.get("b2").parent); [EOL] }
public void testMapOfRefs() throws Exception { [EOL]     NodeMap root = new NodeMap(); [EOL]     NodeForMap node1 = new NodeForMap("a"); [EOL]     NodeForMap node2 = new NodeForMap("b"); [EOL]     Map<String, NodeForMap> nodes = new HashMap<String, NodeForMap>(); [EOL]     nodes.put("a1", node1); [EOL]     nodes.put("b2", node2); [EOL]     root.nodes = nodes; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = mapper.writeValueAsString(root); [EOL]     NodeMap result = mapper.readValue(json, NodeMap.class); [EOL]     Map<String, NodeForMap> kids = result.nodes; [EOL]     assertNotNull(kids); [EOL]     assertEquals(2, kids.size()); [EOL]     assertNotNull(kids.get("a1")); [EOL]     assertNotNull(kids.get("b2")); [EOL]     assertEquals("a", kids.get("a1").name); [EOL]     assertEquals("b", kids.get("b2").name); [EOL]     assertSame(result, kids.get("a1").parent); [EOL]     assertSame(result, kids.get("b2").parent); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testMissing() { [EOL]     MissingNode n = MissingNode.getInstance(); [EOL]     assertTrue(n.isMissingNode()); [EOL]     assertEquals(JsonToken.NOT_AVAILABLE, n.asToken()); [EOL]     assertEquals("", n.asText()); [EOL]     assertStandardEquals(n); [EOL]     assertEquals("", n.toString()); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL]     assertTrue(n.asBoolean(true)); [EOL]     assertEquals(4, n.asInt(4)); [EOL]     assertEquals(5L, n.asLong(5)); [EOL]     assertEquals(0.25, n.asDouble(0.25)); [EOL] }
public void testMissing() { [EOL]     MissingNode n = MissingNode.getInstance(); [EOL]     assertTrue(n.isMissingNode()); [EOL]     assertEquals(JsonToken.NOT_AVAILABLE, n.asToken()); [EOL]     assertEquals("", n.asText()); [EOL]     assertStandardEquals(n); [EOL]     assertEquals("", n.toString()); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL]     assertTrue(n.asBoolean(true)); [EOL]     assertEquals(4, n.asInt(4)); [EOL]     assertEquals(5L, n.asLong(5)); [EOL]     assertEquals(0.25, n.asDouble(0.25)); [EOL] }
public void testMissing() { [EOL]     MissingNode n = MissingNode.getInstance(); [EOL]     assertTrue(n.isMissingNode()); [EOL]     assertEquals(JsonToken.NOT_AVAILABLE, n.asToken()); [EOL]     assertEquals("", n.asText()); [EOL]     assertStandardEquals(n); [EOL]     assertEquals("", n.toString()); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL]     assertTrue(n.asBoolean(true)); [EOL]     assertEquals(4, n.asInt(4)); [EOL]     assertEquals(5L, n.asLong(5)); [EOL]     assertEquals(0.25, n.asDouble(0.25)); [EOL] }
public void testMissing() { [EOL]     MissingNode n = MissingNode.getInstance(); [EOL]     assertTrue(n.isMissingNode()); [EOL]     assertEquals(JsonToken.NOT_AVAILABLE, n.asToken()); [EOL]     assertEquals("", n.asText()); [EOL]     assertStandardEquals(n); [EOL]     assertEquals("", n.toString()); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL]     assertTrue(n.asBoolean(true)); [EOL]     assertEquals(4, n.asInt(4)); [EOL]     assertEquals(5L, n.asLong(5)); [EOL]     assertEquals(0.25, n.asDouble(0.25)); [EOL] }
public void testMissing() { [EOL]     MissingNode n = MissingNode.getInstance(); [EOL]     assertTrue(n.isMissingNode()); [EOL]     assertEquals(JsonToken.NOT_AVAILABLE, n.asToken()); [EOL]     assertEquals("", n.asText()); [EOL]     assertStandardEquals(n); [EOL]     assertEquals("", n.toString()); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL]     assertTrue(n.asBoolean(true)); [EOL]     assertEquals(4, n.asInt(4)); [EOL]     assertEquals(5L, n.asLong(5)); [EOL]     assertEquals(0.25, n.asDouble(0.25)); [EOL] }
public void testMissing() { [EOL]     MissingNode n = MissingNode.getInstance(); [EOL]     assertTrue(n.isMissingNode()); [EOL]     assertEquals(JsonToken.NOT_AVAILABLE, n.asToken()); [EOL]     assertEquals("", n.asText()); [EOL]     assertStandardEquals(n); [EOL]     assertEquals("", n.toString()); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL]     assertTrue(n.asBoolean(true)); [EOL]     assertEquals(4, n.asInt(4)); [EOL]     assertEquals(5L, n.asLong(5)); [EOL]     assertEquals(0.25, n.asDouble(0.25)); [EOL] }
public void testMissing() { [EOL]     MissingNode n = MissingNode.getInstance(); [EOL]     assertTrue(n.isMissingNode()); [EOL]     assertEquals(JsonToken.NOT_AVAILABLE, n.asToken()); [EOL]     assertEquals("", n.asText()); [EOL]     assertStandardEquals(n); [EOL]     assertEquals("", n.toString()); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL]     assertTrue(n.asBoolean(true)); [EOL]     assertEquals(4, n.asInt(4)); [EOL]     assertEquals(5L, n.asLong(5)); [EOL]     assertEquals(0.25, n.asDouble(0.25)); [EOL] }
public void testMissing() { [EOL]     MissingNode n = MissingNode.getInstance(); [EOL]     assertTrue(n.isMissingNode()); [EOL]     assertEquals(JsonToken.NOT_AVAILABLE, n.asToken()); [EOL]     assertEquals("", n.asText()); [EOL]     assertStandardEquals(n); [EOL]     assertEquals("", n.toString()); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL]     assertTrue(n.asBoolean(true)); [EOL]     assertEquals(4, n.asInt(4)); [EOL]     assertEquals(5L, n.asLong(5)); [EOL]     assertEquals(0.25, n.asDouble(0.25)); [EOL] }
public void testWithScalar118() throws Exception { [EOL]     ExternalTypeWithNonPOJO input = new ExternalTypeWithNonPOJO(new java.util.Date(123L)); [EOL]     String json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     ExternalTypeWithNonPOJO result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof java.util.Date); [EOL] }
public void testWithScalar118() throws Exception { [EOL]     ExternalTypeWithNonPOJO input = new ExternalTypeWithNonPOJO(new java.util.Date(123L)); [EOL]     String json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     ExternalTypeWithNonPOJO result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof java.util.Date); [EOL] }
public void testWithScalar118() throws Exception { [EOL]     ExternalTypeWithNonPOJO input = new ExternalTypeWithNonPOJO(new java.util.Date(123L)); [EOL]     String json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     ExternalTypeWithNonPOJO result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof java.util.Date); [EOL] }
public void testWithScalar118() throws Exception { [EOL]     ExternalTypeWithNonPOJO input = new ExternalTypeWithNonPOJO(new java.util.Date(123L)); [EOL]     String json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     ExternalTypeWithNonPOJO result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof java.util.Date); [EOL] }
public void testWithScalar118() throws Exception { [EOL]     ExternalTypeWithNonPOJO input = new ExternalTypeWithNonPOJO(new java.util.Date(123L)); [EOL]     String json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     ExternalTypeWithNonPOJO result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof java.util.Date); [EOL] }
public void testWithScalar118() throws Exception { [EOL]     ExternalTypeWithNonPOJO input = new ExternalTypeWithNonPOJO(new java.util.Date(123L)); [EOL]     String json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     ExternalTypeWithNonPOJO result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof java.util.Date); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setHandlerInstantiator(new MyInstantiator("xyz:")); [EOL]     assertEquals(quote("xyz:456"), mapper.writeValueAsString(new MyBean("456"))); [EOL] }
public void testSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setHandlerInstantiator(new MyInstantiator("xyz:")); [EOL]     assertEquals(quote("xyz:456"), mapper.writeValueAsString(new MyBean("456"))); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(NullNode.instance, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(NullNode.instance, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(NullNode.instance, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(NullNode.instance, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testWithObjectSimple() { [EOL]     ObjectNode root = mapper.createObjectNode(); [EOL]     root.put("a", 3); [EOL]     assertEquals(1, root.size()); [EOL]     ObjectNode copy = root.deepCopy(); [EOL]     assertEquals(1, copy.size()); [EOL]     root.put("b", 7); [EOL]     assertEquals(2, root.size()); [EOL]     assertEquals(1, copy.size()); [EOL]     copy.put("c", 3); [EOL]     assertEquals(2, root.size()); [EOL]     assertEquals(2, copy.size()); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testSimpleArrayMethod() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     MethodWrapperBeanArray array = new MethodWrapperBeanArray(new MethodWrapperBean[] { new MethodWrapperBean(new StringWrapper("A")) }); [EOL]     String json = mapper.writeValueAsString(array); [EOL]     MethodWrapperBeanArray result = mapper.readValue(json, MethodWrapperBeanArray.class); [EOL]     assertNotNull(result); [EOL]     MethodWrapperBean[] beans = result.beans; [EOL]     assertEquals(1, beans.length); [EOL]     MethodWrapperBean bean = beans[0]; [EOL]     assertEquals(StringWrapper.class, bean.value.getClass()); [EOL]     assertEquals(((StringWrapper) bean.value).str, "A"); [EOL] }
public void testSimpleArrayMethod() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     MethodWrapperBeanArray array = new MethodWrapperBeanArray(new MethodWrapperBean[] { new MethodWrapperBean(new StringWrapper("A")) }); [EOL]     String json = mapper.writeValueAsString(array); [EOL]     MethodWrapperBeanArray result = mapper.readValue(json, MethodWrapperBeanArray.class); [EOL]     assertNotNull(result); [EOL]     MethodWrapperBean[] beans = result.beans; [EOL]     assertEquals(1, beans.length); [EOL]     MethodWrapperBean bean = beans[0]; [EOL]     assertEquals(StringWrapper.class, bean.value.getClass()); [EOL]     assertEquals(((StringWrapper) bean.value).str, "A"); [EOL] }
public void testOverrideArrayClass() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     ArrayHolder result = m.readValue("{ \"strings\" : [ \"test\" ] }", ArrayHolder.class); [EOL]     String[] strs = result._strings; [EOL]     assertEquals(1, strs.length); [EOL]     assertEquals(String[].class, strs.getClass()); [EOL]     assertEquals("test", strs[0]); [EOL] }
public void testOverrideArrayClass() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     ArrayHolder result = m.readValue("{ \"strings\" : [ \"test\" ] }", ArrayHolder.class); [EOL]     String[] strs = result._strings; [EOL]     assertEquals(1, strs.length); [EOL]     assertEquals(String[].class, strs.getClass()); [EOL]     assertEquals("test", strs[0]); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(NullNode.instance, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(NullNode.instance, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(NullNode.instance, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(NullNode.instance, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(NullNode.instance, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(NullNode.instance, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(NullNode.instance, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(NullNode.instance, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testStringArray() throws Exception { [EOL]     StringWriter sw = new StringWriter(); [EOL]     MAPPER.writeValue(sw, new String[] { "a", "\"foo\"", null }); [EOL]     assertEquals("[\"a\",\"\\\"foo\\\"\",null]", sw.toString().trim()); [EOL] }
public void testStringArray() throws Exception { [EOL]     StringWriter sw = new StringWriter(); [EOL]     MAPPER.writeValue(sw, new String[] { "a", "\"foo\"", null }); [EOL]     assertEquals("[\"a\",\"\\\"foo\\\"\",null]", sw.toString().trim()); [EOL] }
public void testStringArray() throws Exception { [EOL]     StringWriter sw = new StringWriter(); [EOL]     MAPPER.writeValue(sw, new String[] { "a", "\"foo\"", null }); [EOL]     assertEquals("[\"a\",\"\\\"foo\\\"\",null]", sw.toString().trim()); [EOL] }
public void testStringArray() throws Exception { [EOL]     StringWriter sw = new StringWriter(); [EOL]     MAPPER.writeValue(sw, new String[] { "a", "\"foo\"", null }); [EOL]     assertEquals("[\"a\",\"\\\"foo\\\"\",null]", sw.toString().trim()); [EOL] }
public void testAsBoolean() throws Exception { [EOL]     assertEquals(false, BooleanNode.FALSE.asBoolean()); [EOL]     assertEquals(true, BooleanNode.TRUE.asBoolean()); [EOL]     assertEquals(false, IntNode.valueOf(0).asBoolean()); [EOL]     assertEquals(true, IntNode.valueOf(1).asBoolean()); [EOL]     assertEquals(false, LongNode.valueOf(0).asBoolean()); [EOL]     assertEquals(true, LongNode.valueOf(-34L).asBoolean()); [EOL]     assertEquals(true, new TextNode("true").asBoolean()); [EOL]     assertEquals(false, new TextNode("false").asBoolean()); [EOL]     assertEquals(false, new TextNode("barf").asBoolean()); [EOL]     assertEquals(true, new TextNode("barf").asBoolean(true)); [EOL]     assertEquals(true, new POJONode(Boolean.TRUE).asBoolean()); [EOL] }
public void testAsBoolean() throws Exception { [EOL]     assertEquals(false, BooleanNode.FALSE.asBoolean()); [EOL]     assertEquals(true, BooleanNode.TRUE.asBoolean()); [EOL]     assertEquals(false, IntNode.valueOf(0).asBoolean()); [EOL]     assertEquals(true, IntNode.valueOf(1).asBoolean()); [EOL]     assertEquals(false, LongNode.valueOf(0).asBoolean()); [EOL]     assertEquals(true, LongNode.valueOf(-34L).asBoolean()); [EOL]     assertEquals(true, new TextNode("true").asBoolean()); [EOL]     assertEquals(false, new TextNode("false").asBoolean()); [EOL]     assertEquals(false, new TextNode("barf").asBoolean()); [EOL]     assertEquals(true, new TextNode("barf").asBoolean(true)); [EOL]     assertEquals(true, new POJONode(Boolean.TRUE).asBoolean()); [EOL] }
public void testAsBoolean() throws Exception { [EOL]     assertEquals(false, BooleanNode.FALSE.asBoolean()); [EOL]     assertEquals(true, BooleanNode.TRUE.asBoolean()); [EOL]     assertEquals(false, IntNode.valueOf(0).asBoolean()); [EOL]     assertEquals(true, IntNode.valueOf(1).asBoolean()); [EOL]     assertEquals(false, LongNode.valueOf(0).asBoolean()); [EOL]     assertEquals(true, LongNode.valueOf(-34L).asBoolean()); [EOL]     assertEquals(true, new TextNode("true").asBoolean()); [EOL]     assertEquals(false, new TextNode("false").asBoolean()); [EOL]     assertEquals(false, new TextNode("barf").asBoolean()); [EOL]     assertEquals(true, new TextNode("barf").asBoolean(true)); [EOL]     assertEquals(true, new POJONode(Boolean.TRUE).asBoolean()); [EOL] }
public void testAsBoolean() throws Exception { [EOL]     assertEquals(false, BooleanNode.FALSE.asBoolean()); [EOL]     assertEquals(true, BooleanNode.TRUE.asBoolean()); [EOL]     assertEquals(false, IntNode.valueOf(0).asBoolean()); [EOL]     assertEquals(true, IntNode.valueOf(1).asBoolean()); [EOL]     assertEquals(false, LongNode.valueOf(0).asBoolean()); [EOL]     assertEquals(true, LongNode.valueOf(-34L).asBoolean()); [EOL]     assertEquals(true, new TextNode("true").asBoolean()); [EOL]     assertEquals(false, new TextNode("false").asBoolean()); [EOL]     assertEquals(false, new TextNode("barf").asBoolean()); [EOL]     assertEquals(true, new TextNode("barf").asBoolean(true)); [EOL]     assertEquals(true, new POJONode(Boolean.TRUE).asBoolean()); [EOL] }
public void testAsBoolean() throws Exception { [EOL]     assertEquals(false, BooleanNode.FALSE.asBoolean()); [EOL]     assertEquals(true, BooleanNode.TRUE.asBoolean()); [EOL]     assertEquals(false, IntNode.valueOf(0).asBoolean()); [EOL]     assertEquals(true, IntNode.valueOf(1).asBoolean()); [EOL]     assertEquals(false, LongNode.valueOf(0).asBoolean()); [EOL]     assertEquals(true, LongNode.valueOf(-34L).asBoolean()); [EOL]     assertEquals(true, new TextNode("true").asBoolean()); [EOL]     assertEquals(false, new TextNode("false").asBoolean()); [EOL]     assertEquals(false, new TextNode("barf").asBoolean()); [EOL]     assertEquals(true, new TextNode("barf").asBoolean(true)); [EOL]     assertEquals(true, new POJONode(Boolean.TRUE).asBoolean()); [EOL] }
public void testFromEmptyString() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true); [EOL]     assertNull(m.readValue(quote(""), Object[].class)); [EOL]     assertNull(m.readValue(quote(""), String[].class)); [EOL]     assertNull(m.readValue(quote(""), int[].class)); [EOL] }
public void testFromEmptyString() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true); [EOL]     assertNull(m.readValue(quote(""), Object[].class)); [EOL]     assertNull(m.readValue(quote(""), String[].class)); [EOL]     assertNull(m.readValue(quote(""), int[].class)); [EOL] }
public void testFromEmptyString() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true); [EOL]     assertNull(m.readValue(quote(""), Object[].class)); [EOL]     assertNull(m.readValue(quote(""), String[].class)); [EOL]     assertNull(m.readValue(quote(""), int[].class)); [EOL] }
public void testFromEmptyString() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true); [EOL]     assertNull(m.readValue(quote(""), Object[].class)); [EOL]     assertNull(m.readValue(quote(""), String[].class)); [EOL]     assertNull(m.readValue(quote(""), int[].class)); [EOL] }
public void testFromEmptyString() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true); [EOL]     assertNull(m.readValue(quote(""), Object[].class)); [EOL]     assertNull(m.readValue(quote(""), String[].class)); [EOL]     assertNull(m.readValue(quote(""), int[].class)); [EOL] }
public void testFromEmptyString() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true); [EOL]     assertNull(m.readValue(quote(""), Object[].class)); [EOL]     assertNull(m.readValue(quote(""), String[].class)); [EOL]     assertNull(m.readValue(quote(""), int[].class)); [EOL] }
public void testFromEmptyString() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true); [EOL]     assertNull(m.readValue(quote(""), Object[].class)); [EOL]     assertNull(m.readValue(quote(""), String[].class)); [EOL]     assertNull(m.readValue(quote(""), int[].class)); [EOL] }
public void testFromEmptyString() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true); [EOL]     assertNull(m.readValue(quote(""), Object[].class)); [EOL]     assertNull(m.readValue(quote(""), String[].class)); [EOL]     assertNull(m.readValue(quote(""), int[].class)); [EOL] }
public void testFromEmptyString() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true); [EOL]     assertNull(m.readValue(quote(""), Object[].class)); [EOL]     assertNull(m.readValue(quote(""), String[].class)); [EOL]     assertNull(m.readValue(quote(""), int[].class)); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testIgnored() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES); [EOL]     _testIgnorals(mapper); [EOL] }
public void testIgnored() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES); [EOL]     _testIgnorals(mapper); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testIssue811() throws Exception { [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.disable(MapperFeature.AUTO_DETECT_CREATORS); [EOL]     om.disable(MapperFeature.AUTO_DETECT_GETTERS); [EOL]     om.disable(MapperFeature.AUTO_DETECT_IS_GETTERS); [EOL]     om.setVisibility(PropertyAccessor.FIELD, Visibility.ANY); [EOL]     om.enable(SerializationFeature.WRITE_ENUMS_USING_INDEX); [EOL]     om.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     om.enableDefaultTypingAsProperty(DefaultTyping.NON_FINAL, "@class"); [EOL]     Process p = new Process(); [EOL]     Scope s = new Scope(p, null); [EOL]     FaultHandler fh = new FaultHandler(p); [EOL]     Catch c = new Catch(p, s); [EOL]     fh.catchBlocks.add(c); [EOL]     s.faultHandlers.add(fh); [EOL]     String json = om.writeValueAsString(p); [EOL]     Process restored = om.readValue(json, Process.class); [EOL]     assertNotNull(restored); [EOL]     assertEquals(0, p.id); [EOL]     assertEquals(3, p.children.size()); [EOL]     assertSame(p, p.children.get(0).owner); [EOL]     assertSame(p, p.children.get(1).owner); [EOL]     assertSame(p, p.children.get(2).owner); [EOL] }
public void testIssue811() throws Exception { [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.disable(MapperFeature.AUTO_DETECT_CREATORS); [EOL]     om.disable(MapperFeature.AUTO_DETECT_GETTERS); [EOL]     om.disable(MapperFeature.AUTO_DETECT_IS_GETTERS); [EOL]     om.setVisibility(PropertyAccessor.FIELD, Visibility.ANY); [EOL]     om.enable(SerializationFeature.WRITE_ENUMS_USING_INDEX); [EOL]     om.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     om.enableDefaultTypingAsProperty(DefaultTyping.NON_FINAL, "@class"); [EOL]     Process p = new Process(); [EOL]     Scope s = new Scope(p, null); [EOL]     FaultHandler fh = new FaultHandler(p); [EOL]     Catch c = new Catch(p, s); [EOL]     fh.catchBlocks.add(c); [EOL]     s.faultHandlers.add(fh); [EOL]     String json = om.writeValueAsString(p); [EOL]     Process restored = om.readValue(json, Process.class); [EOL]     assertNotNull(restored); [EOL]     assertEquals(0, p.id); [EOL]     assertEquals(3, p.children.size()); [EOL]     assertSame(p, p.children.get(0).owner); [EOL]     assertSame(p, p.children.get(1).owner); [EOL]     assertSame(p, p.children.get(2).owner); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testClass() throws Exception { [EOL]     Class<?> result = MAPPER.readValue("\"java.lang.String\"", Class.class); [EOL]     assertEquals(String.class, result); [EOL] }
public void testIntArray() throws Exception { [EOL]     final int LEN = 70000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(-i); [EOL]     } [EOL]     sb.append(']'); [EOL]     int[] result = MAPPER.readValue(sb.toString(), int[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         assertEquals(-i, result[i]); [EOL]     } [EOL] }
public void testIntArray() throws Exception { [EOL]     final int LEN = 70000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(-i); [EOL]     } [EOL]     sb.append(']'); [EOL]     int[] result = MAPPER.readValue(sb.toString(), int[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         assertEquals(-i, result[i]); [EOL]     } [EOL] }
public void testIntArray() throws Exception { [EOL]     final int LEN = 70000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(-i); [EOL]     } [EOL]     sb.append(']'); [EOL]     int[] result = MAPPER.readValue(sb.toString(), int[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         assertEquals(-i, result[i]); [EOL]     } [EOL] }
public void testSimple() { [EOL]     assertEquals(Boolean.TRUE, MAPPER.convertValue("true", Boolean.class)); [EOL]     assertEquals(Integer.valueOf(-3), MAPPER.convertValue("  -3 ", Integer.class)); [EOL]     assertEquals(Long.valueOf(77), MAPPER.convertValue("77", Long.class)); [EOL]     int[] ints = { 1, 2, 3 }; [EOL]     List<Integer> Ints = new ArrayList<Integer>(); [EOL]     Ints.add(1); [EOL]     Ints.add(2); [EOL]     Ints.add(3); [EOL]     assertArrayEquals(ints, MAPPER.convertValue(Ints, int[].class)); [EOL] }
public void testSimple() { [EOL]     assertEquals(Boolean.TRUE, MAPPER.convertValue("true", Boolean.class)); [EOL]     assertEquals(Integer.valueOf(-3), MAPPER.convertValue("  -3 ", Integer.class)); [EOL]     assertEquals(Long.valueOf(77), MAPPER.convertValue("77", Long.class)); [EOL]     int[] ints = { 1, 2, 3 }; [EOL]     List<Integer> Ints = new ArrayList<Integer>(); [EOL]     Ints.add(1); [EOL]     Ints.add(2); [EOL]     Ints.add(3); [EOL]     assertArrayEquals(ints, MAPPER.convertValue(Ints, int[].class)); [EOL] }
public void testSimple() { [EOL]     assertEquals(Boolean.TRUE, MAPPER.convertValue("true", Boolean.class)); [EOL]     assertEquals(Integer.valueOf(-3), MAPPER.convertValue("  -3 ", Integer.class)); [EOL]     assertEquals(Long.valueOf(77), MAPPER.convertValue("77", Long.class)); [EOL]     int[] ints = { 1, 2, 3 }; [EOL]     List<Integer> Ints = new ArrayList<Integer>(); [EOL]     Ints.add(1); [EOL]     Ints.add(2); [EOL]     Ints.add(3); [EOL]     assertArrayEquals(ints, MAPPER.convertValue(Ints, int[].class)); [EOL] }
public void testSimple() { [EOL]     assertEquals(Boolean.TRUE, MAPPER.convertValue("true", Boolean.class)); [EOL]     assertEquals(Integer.valueOf(-3), MAPPER.convertValue("  -3 ", Integer.class)); [EOL]     assertEquals(Long.valueOf(77), MAPPER.convertValue("77", Long.class)); [EOL]     int[] ints = { 1, 2, 3 }; [EOL]     List<Integer> Ints = new ArrayList<Integer>(); [EOL]     Ints.add(1); [EOL]     Ints.add(2); [EOL]     Ints.add(3); [EOL]     assertArrayEquals(ints, MAPPER.convertValue(Ints, int[].class)); [EOL] }
public void testSimple() { [EOL]     assertEquals(Boolean.TRUE, MAPPER.convertValue("true", Boolean.class)); [EOL]     assertEquals(Integer.valueOf(-3), MAPPER.convertValue("  -3 ", Integer.class)); [EOL]     assertEquals(Long.valueOf(77), MAPPER.convertValue("77", Long.class)); [EOL]     int[] ints = { 1, 2, 3 }; [EOL]     List<Integer> Ints = new ArrayList<Integer>(); [EOL]     Ints.add(1); [EOL]     Ints.add(2); [EOL]     Ints.add(3); [EOL]     assertArrayEquals(ints, MAPPER.convertValue(Ints, int[].class)); [EOL] }
public void testSimple() { [EOL]     assertEquals(Boolean.TRUE, MAPPER.convertValue("true", Boolean.class)); [EOL]     assertEquals(Integer.valueOf(-3), MAPPER.convertValue("  -3 ", Integer.class)); [EOL]     assertEquals(Long.valueOf(77), MAPPER.convertValue("77", Long.class)); [EOL]     int[] ints = { 1, 2, 3 }; [EOL]     List<Integer> Ints = new ArrayList<Integer>(); [EOL]     Ints.add(1); [EOL]     Ints.add(2); [EOL]     Ints.add(3); [EOL]     assertArrayEquals(ints, MAPPER.convertValue(Ints, int[].class)); [EOL] }
public void testSimple() { [EOL]     assertEquals(Boolean.TRUE, MAPPER.convertValue("true", Boolean.class)); [EOL]     assertEquals(Integer.valueOf(-3), MAPPER.convertValue("  -3 ", Integer.class)); [EOL]     assertEquals(Long.valueOf(77), MAPPER.convertValue("77", Long.class)); [EOL]     int[] ints = { 1, 2, 3 }; [EOL]     List<Integer> Ints = new ArrayList<Integer>(); [EOL]     Ints.add(1); [EOL]     Ints.add(2); [EOL]     Ints.add(3); [EOL]     assertArrayEquals(ints, MAPPER.convertValue(Ints, int[].class)); [EOL] }
public void testSimple() { [EOL]     assertEquals(Boolean.TRUE, MAPPER.convertValue("true", Boolean.class)); [EOL]     assertEquals(Integer.valueOf(-3), MAPPER.convertValue("  -3 ", Integer.class)); [EOL]     assertEquals(Long.valueOf(77), MAPPER.convertValue("77", Long.class)); [EOL]     int[] ints = { 1, 2, 3 }; [EOL]     List<Integer> Ints = new ArrayList<Integer>(); [EOL]     Ints.add(1); [EOL]     Ints.add(2); [EOL]     Ints.add(3); [EOL]     assertArrayEquals(ints, MAPPER.convertValue(Ints, int[].class)); [EOL] }
public void testSimple() { [EOL]     assertEquals(Boolean.TRUE, MAPPER.convertValue("true", Boolean.class)); [EOL]     assertEquals(Integer.valueOf(-3), MAPPER.convertValue("  -3 ", Integer.class)); [EOL]     assertEquals(Long.valueOf(77), MAPPER.convertValue("77", Long.class)); [EOL]     int[] ints = { 1, 2, 3 }; [EOL]     List<Integer> Ints = new ArrayList<Integer>(); [EOL]     Ints.add(1); [EOL]     Ints.add(2); [EOL]     Ints.add(3); [EOL]     assertArrayEquals(ints, MAPPER.convertValue(Ints, int[].class)); [EOL] }
public void testSimple() { [EOL]     assertEquals(Boolean.TRUE, MAPPER.convertValue("true", Boolean.class)); [EOL]     assertEquals(Integer.valueOf(-3), MAPPER.convertValue("  -3 ", Integer.class)); [EOL]     assertEquals(Long.valueOf(77), MAPPER.convertValue("77", Long.class)); [EOL]     int[] ints = { 1, 2, 3 }; [EOL]     List<Integer> Ints = new ArrayList<Integer>(); [EOL]     Ints.add(1); [EOL]     Ints.add(2); [EOL]     Ints.add(3); [EOL]     assertArrayEquals(ints, MAPPER.convertValue(Ints, int[].class)); [EOL] }
public void testSimple() { [EOL]     assertEquals(Boolean.TRUE, MAPPER.convertValue("true", Boolean.class)); [EOL]     assertEquals(Integer.valueOf(-3), MAPPER.convertValue("  -3 ", Integer.class)); [EOL]     assertEquals(Long.valueOf(77), MAPPER.convertValue("77", Long.class)); [EOL]     int[] ints = { 1, 2, 3 }; [EOL]     List<Integer> Ints = new ArrayList<Integer>(); [EOL]     Ints.add(1); [EOL]     Ints.add(2); [EOL]     Ints.add(3); [EOL]     assertArrayEquals(ints, MAPPER.convertValue(Ints, int[].class)); [EOL] }
public void testSimple() { [EOL]     assertEquals(Boolean.TRUE, MAPPER.convertValue("true", Boolean.class)); [EOL]     assertEquals(Integer.valueOf(-3), MAPPER.convertValue("  -3 ", Integer.class)); [EOL]     assertEquals(Long.valueOf(77), MAPPER.convertValue("77", Long.class)); [EOL]     int[] ints = { 1, 2, 3 }; [EOL]     List<Integer> Ints = new ArrayList<Integer>(); [EOL]     Ints.add(1); [EOL]     Ints.add(2); [EOL]     Ints.add(3); [EOL]     assertArrayEquals(ints, MAPPER.convertValue(Ints, int[].class)); [EOL] }
public void testSimple() { [EOL]     assertEquals(Boolean.TRUE, MAPPER.convertValue("true", Boolean.class)); [EOL]     assertEquals(Integer.valueOf(-3), MAPPER.convertValue("  -3 ", Integer.class)); [EOL]     assertEquals(Long.valueOf(77), MAPPER.convertValue("77", Long.class)); [EOL]     int[] ints = { 1, 2, 3 }; [EOL]     List<Integer> Ints = new ArrayList<Integer>(); [EOL]     Ints.add(1); [EOL]     Ints.add(2); [EOL]     Ints.add(3); [EOL]     assertArrayEquals(ints, MAPPER.convertValue(Ints, int[].class)); [EOL] }
public void testSerializeSimpleNonNS() throws Exception { [EOL]     Document doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new InputSource(new StringReader(SIMPLE_XML))); [EOL]     assertNotNull(doc); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String outputRaw = mapper.writeValueAsString(doc); [EOL]     String output = mapper.readValue(outputRaw, String.class); [EOL]     assertEquals(SIMPLE_XML, normalizeOutput(output)); [EOL] }
public void testSerializeSimpleNonNS() throws Exception { [EOL]     Document doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new InputSource(new StringReader(SIMPLE_XML))); [EOL]     assertNotNull(doc); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String outputRaw = mapper.writeValueAsString(doc); [EOL]     String output = mapper.readValue(outputRaw, String.class); [EOL]     assertEquals(SIMPLE_XML, normalizeOutput(output)); [EOL] }
public void testSerializeSimpleNonNS() throws Exception { [EOL]     Document doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new InputSource(new StringReader(SIMPLE_XML))); [EOL]     assertNotNull(doc); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String outputRaw = mapper.writeValueAsString(doc); [EOL]     String output = mapper.readValue(outputRaw, String.class); [EOL]     assertEquals(SIMPLE_XML, normalizeOutput(output)); [EOL] }
public void testSerializeSimpleNonNS() throws Exception { [EOL]     Document doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new InputSource(new StringReader(SIMPLE_XML))); [EOL]     assertNotNull(doc); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String outputRaw = mapper.writeValueAsString(doc); [EOL]     String output = mapper.readValue(outputRaw, String.class); [EOL]     assertEquals(SIMPLE_XML, normalizeOutput(output)); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testIssue797() throws Exception { [EOL]     String json = MAPPER.writeValueAsString(new Bean797BaseImpl()); [EOL]     assertEquals("{}", json); [EOL] }
public void testIssue797() throws Exception { [EOL]     String json = MAPPER.writeValueAsString(new Bean797BaseImpl()); [EOL]     assertEquals("{}", json); [EOL] }
public void testMixinMethodInheritance() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.addMixInAnnotations(Beano2.class, BeanoMixinSub2.class); [EOL]     Map<String, Object> result; [EOL]     result = writeAndMap(mapper, new Beano2()); [EOL]     assertEquals(2, result.size()); [EOL]     assertTrue(result.containsKey("id")); [EOL]     assertTrue(result.containsKey("name")); [EOL] }
public void testMixinMethodInheritance() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.addMixInAnnotations(Beano2.class, BeanoMixinSub2.class); [EOL]     Map<String, Object> result; [EOL]     result = writeAndMap(mapper, new Beano2()); [EOL]     assertEquals(2, result.size()); [EOL]     assertTrue(result.containsKey("id")); [EOL]     assertTrue(result.containsKey("name")); [EOL] }
public void testIssue797() throws Exception { [EOL]     String json = MAPPER.writeValueAsString(new Bean797BaseImpl()); [EOL]     assertEquals("{}", json); [EOL] }
public void testIssue797() throws Exception { [EOL]     String json = MAPPER.writeValueAsString(new Bean797BaseImpl()); [EOL]     assertEquals("{}", json); [EOL] }
public void testIssue797() throws Exception { [EOL]     String json = MAPPER.writeValueAsString(new Bean797BaseImpl()); [EOL]     assertEquals("{}", json); [EOL] }
public void testParametricTypes() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t = tf.constructParametricType(ArrayList.class, String.class); [EOL]     assertEquals(CollectionType.class, t.getClass()); [EOL]     JavaType strC = tf.constructType(String.class); [EOL]     assertEquals(1, t.containedTypeCount()); [EOL]     assertEquals(strC, t.containedType(0)); [EOL]     assertNull(t.containedType(1)); [EOL]     JavaType t2 = tf.constructParametricType(Map.class, strC, t); [EOL]     assertEquals(MapType.class, t2.getClass()); [EOL]     assertEquals(2, t2.containedTypeCount()); [EOL]     assertEquals(strC, t2.containedType(0)); [EOL]     assertEquals(t, t2.containedType(1)); [EOL]     assertNull(t2.containedType(2)); [EOL]     JavaType custom = tf.constructParametricType(SingleArgGeneric.class, String.class); [EOL]     assertEquals(SimpleType.class, custom.getClass()); [EOL]     assertEquals(1, custom.containedTypeCount()); [EOL]     assertEquals(strC, custom.containedType(0)); [EOL]     assertNull(custom.containedType(1)); [EOL]     assertEquals("X", custom.containedTypeName(0)); [EOL]     try { [EOL]         tf.constructParametricType(Map.class, strC); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "Need exactly 2 parameter types for Map types"); [EOL]     } [EOL]     try { [EOL]         tf.constructParametricType(SingleArgGeneric.class, strC, strC); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "expected 1 parameters, was given 2"); [EOL]     } [EOL] }
public void testParametricTypes() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t = tf.constructParametricType(ArrayList.class, String.class); [EOL]     assertEquals(CollectionType.class, t.getClass()); [EOL]     JavaType strC = tf.constructType(String.class); [EOL]     assertEquals(1, t.containedTypeCount()); [EOL]     assertEquals(strC, t.containedType(0)); [EOL]     assertNull(t.containedType(1)); [EOL]     JavaType t2 = tf.constructParametricType(Map.class, strC, t); [EOL]     assertEquals(MapType.class, t2.getClass()); [EOL]     assertEquals(2, t2.containedTypeCount()); [EOL]     assertEquals(strC, t2.containedType(0)); [EOL]     assertEquals(t, t2.containedType(1)); [EOL]     assertNull(t2.containedType(2)); [EOL]     JavaType custom = tf.constructParametricType(SingleArgGeneric.class, String.class); [EOL]     assertEquals(SimpleType.class, custom.getClass()); [EOL]     assertEquals(1, custom.containedTypeCount()); [EOL]     assertEquals(strC, custom.containedType(0)); [EOL]     assertNull(custom.containedType(1)); [EOL]     assertEquals("X", custom.containedTypeName(0)); [EOL]     try { [EOL]         tf.constructParametricType(Map.class, strC); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "Need exactly 2 parameter types for Map types"); [EOL]     } [EOL]     try { [EOL]         tf.constructParametricType(SingleArgGeneric.class, strC, strC); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "expected 1 parameters, was given 2"); [EOL]     } [EOL] }
public void testParametricTypes() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t = tf.constructParametricType(ArrayList.class, String.class); [EOL]     assertEquals(CollectionType.class, t.getClass()); [EOL]     JavaType strC = tf.constructType(String.class); [EOL]     assertEquals(1, t.containedTypeCount()); [EOL]     assertEquals(strC, t.containedType(0)); [EOL]     assertNull(t.containedType(1)); [EOL]     JavaType t2 = tf.constructParametricType(Map.class, strC, t); [EOL]     assertEquals(MapType.class, t2.getClass()); [EOL]     assertEquals(2, t2.containedTypeCount()); [EOL]     assertEquals(strC, t2.containedType(0)); [EOL]     assertEquals(t, t2.containedType(1)); [EOL]     assertNull(t2.containedType(2)); [EOL]     JavaType custom = tf.constructParametricType(SingleArgGeneric.class, String.class); [EOL]     assertEquals(SimpleType.class, custom.getClass()); [EOL]     assertEquals(1, custom.containedTypeCount()); [EOL]     assertEquals(strC, custom.containedType(0)); [EOL]     assertNull(custom.containedType(1)); [EOL]     assertEquals("X", custom.containedTypeName(0)); [EOL]     try { [EOL]         tf.constructParametricType(Map.class, strC); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "Need exactly 2 parameter types for Map types"); [EOL]     } [EOL]     try { [EOL]         tf.constructParametricType(SingleArgGeneric.class, strC, strC); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "expected 1 parameters, was given 2"); [EOL]     } [EOL] }
public void testMixinMethodInheritance() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.addMixInAnnotations(Beano2.class, BeanoMixinSub2.class); [EOL]     Map<String, Object> result; [EOL]     result = writeAndMap(mapper, new Beano2()); [EOL]     assertEquals(2, result.size()); [EOL]     assertTrue(result.containsKey("id")); [EOL]     assertTrue(result.containsKey("name")); [EOL] }
public void testMixinMethodInheritance() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.addMixInAnnotations(Beano2.class, BeanoMixinSub2.class); [EOL]     Map<String, Object> result; [EOL]     result = writeAndMap(mapper, new Beano2()); [EOL]     assertEquals(2, result.size()); [EOL]     assertTrue(result.containsKey("id")); [EOL]     assertTrue(result.containsKey("name")); [EOL] }
public void testBoth() throws IOException { [EOL]     final ObjectMapper mapper = new ObjectMapper(); [EOL]     final String value1 = mapper.writeValueAsString(new NotKarlBean()); [EOL]     assertEquals("{\"map\":{\"Not Karl\":1}}", value1); [EOL]     final String value2 = mapper.writeValueAsString(new KarlBean()); [EOL]     assertEquals("{\"map\":{\"Karl\":1}}", value2); [EOL] }
public void testBoth() throws IOException { [EOL]     final ObjectMapper mapper = new ObjectMapper(); [EOL]     final String value1 = mapper.writeValueAsString(new NotKarlBean()); [EOL]     assertEquals("{\"map\":{\"Not Karl\":1}}", value1); [EOL]     final String value2 = mapper.writeValueAsString(new KarlBean()); [EOL]     assertEquals("{\"map\":{\"Karl\":1}}", value2); [EOL] }
public void testBoth() throws IOException { [EOL]     final ObjectMapper mapper = new ObjectMapper(); [EOL]     final String value1 = mapper.writeValueAsString(new NotKarlBean()); [EOL]     assertEquals("{\"map\":{\"Not Karl\":1}}", value1); [EOL]     final String value2 = mapper.writeValueAsString(new KarlBean()); [EOL]     assertEquals("{\"map\":{\"Karl\":1}}", value2); [EOL] }
public void testBoth() throws IOException { [EOL]     final ObjectMapper mapper = new ObjectMapper(); [EOL]     final String value1 = mapper.writeValueAsString(new NotKarlBean()); [EOL]     assertEquals("{\"map\":{\"Not Karl\":1}}", value1); [EOL]     final String value2 = mapper.writeValueAsString(new KarlBean()); [EOL]     assertEquals("{\"map\":{\"Karl\":1}}", value2); [EOL] }
public void testBoth() throws IOException { [EOL]     final ObjectMapper mapper = new ObjectMapper(); [EOL]     final String value1 = mapper.writeValueAsString(new NotKarlBean()); [EOL]     assertEquals("{\"map\":{\"Not Karl\":1}}", value1); [EOL]     final String value2 = mapper.writeValueAsString(new KarlBean()); [EOL]     assertEquals("{\"map\":{\"Karl\":1}}", value2); [EOL] }
public void testBoth() throws IOException { [EOL]     final ObjectMapper mapper = new ObjectMapper(); [EOL]     final String value1 = mapper.writeValueAsString(new NotKarlBean()); [EOL]     assertEquals("{\"map\":{\"Not Karl\":1}}", value1); [EOL]     final String value2 = mapper.writeValueAsString(new KarlBean()); [EOL]     assertEquals("{\"map\":{\"Karl\":1}}", value2); [EOL] }
public void testModifyKeyDeserializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setDeserializerModifier(new KeyDeserializerModifier())); [EOL]     Map<?, ?> result = mapper.readValue("{\"a\":1}", Map.class); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("foo", result.entrySet().iterator().next().getKey()); [EOL] }
public void testModifyKeyDeserializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setDeserializerModifier(new KeyDeserializerModifier())); [EOL]     Map<?, ?> result = mapper.readValue("{\"a\":1}", Map.class); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("foo", result.entrySet().iterator().next().getKey()); [EOL] }
public void testModifyKeyDeserializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setDeserializerModifier(new KeyDeserializerModifier())); [EOL]     Map<?, ?> result = mapper.readValue("{\"a\":1}", Map.class); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("foo", result.entrySet().iterator().next().getKey()); [EOL] }
public void testModifyKeyDeserializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setDeserializerModifier(new KeyDeserializerModifier())); [EOL]     Map<?, ?> result = mapper.readValue("{\"a\":1}", Map.class); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("foo", result.entrySet().iterator().next().getKey()); [EOL] }
public void testModifyKeyDeserializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setDeserializerModifier(new KeyDeserializerModifier())); [EOL]     Map<?, ?> result = mapper.readValue("{\"a\":1}", Map.class); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("foo", result.entrySet().iterator().next().getKey()); [EOL] }
public void testModifyKeyDeserializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setDeserializerModifier(new KeyDeserializerModifier())); [EOL]     Map<?, ?> result = mapper.readValue("{\"a\":1}", Map.class); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("foo", result.entrySet().iterator().next().getKey()); [EOL] }
public void testModifyKeyDeserializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setDeserializerModifier(new KeyDeserializerModifier())); [EOL]     Map<?, ?> result = mapper.readValue("{\"a\":1}", Map.class); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("foo", result.entrySet().iterator().next().getKey()); [EOL] }
public void testModifyKeyDeserializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setDeserializerModifier(new KeyDeserializerModifier())); [EOL]     Map<?, ?> result = mapper.readValue("{\"a\":1}", Map.class); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("foo", result.entrySet().iterator().next().getKey()); [EOL] }
public void testModifyKeyDeserializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setDeserializerModifier(new KeyDeserializerModifier())); [EOL]     Map<?, ?> result = mapper.readValue("{\"a\":1}", Map.class); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("foo", result.entrySet().iterator().next().getKey()); [EOL] }
public void testModifyKeyDeserializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setDeserializerModifier(new KeyDeserializerModifier())); [EOL]     Map<?, ?> result = mapper.readValue("{\"a\":1}", Map.class); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("foo", result.entrySet().iterator().next().getKey()); [EOL] }
public void testModifyKeyDeserializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setDeserializerModifier(new KeyDeserializerModifier())); [EOL]     Map<?, ?> result = mapper.readValue("{\"a\":1}", Map.class); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("foo", result.entrySet().iterator().next().getKey()); [EOL] }
public void testModifyKeyDeserializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setDeserializerModifier(new KeyDeserializerModifier())); [EOL]     Map<?, ?> result = mapper.readValue("{\"a\":1}", Map.class); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("foo", result.entrySet().iterator().next().getKey()); [EOL] }
public void testModifyKeyDeserializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setDeserializerModifier(new KeyDeserializerModifier())); [EOL]     Map<?, ?> result = mapper.readValue("{\"a\":1}", Map.class); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("foo", result.entrySet().iterator().next().getKey()); [EOL] }
public void testModifyKeyDeserializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setDeserializerModifier(new KeyDeserializerModifier())); [EOL]     Map<?, ?> result = mapper.readValue("{\"a\":1}", Map.class); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("foo", result.entrySet().iterator().next().getKey()); [EOL] }
public void testGenericArray() throws Exception { [EOL]     ObjectMapper m; [EOL]     final A[] input = new A[] { new B() }; [EOL]     final String EXP = "[{\"BB\":{\"value\":2}}]"; [EOL]     m = new ObjectMapper(); [EOL]     assertEquals(EXP, m.writeValueAsString(input)); [EOL]     m = new ObjectMapper(); [EOL]     m.configure(MapperFeature.USE_STATIC_TYPING, true); [EOL]     assertEquals(EXP, m.writeValueAsString(input)); [EOL] }
public void testGenericArray() throws Exception { [EOL]     ObjectMapper m; [EOL]     final A[] input = new A[] { new B() }; [EOL]     final String EXP = "[{\"BB\":{\"value\":2}}]"; [EOL]     m = new ObjectMapper(); [EOL]     assertEquals(EXP, m.writeValueAsString(input)); [EOL]     m = new ObjectMapper(); [EOL]     m.configure(MapperFeature.USE_STATIC_TYPING, true); [EOL]     assertEquals(EXP, m.writeValueAsString(input)); [EOL] }
public void testGenericArray() throws Exception { [EOL]     ObjectMapper m; [EOL]     final A[] input = new A[] { new B() }; [EOL]     final String EXP = "[{\"BB\":{\"value\":2}}]"; [EOL]     m = new ObjectMapper(); [EOL]     assertEquals(EXP, m.writeValueAsString(input)); [EOL]     m = new ObjectMapper(); [EOL]     m.configure(MapperFeature.USE_STATIC_TYPING, true); [EOL]     assertEquals(EXP, m.writeValueAsString(input)); [EOL] }
public void testGenericArray() throws Exception { [EOL]     ObjectMapper m; [EOL]     final A[] input = new A[] { new B() }; [EOL]     final String EXP = "[{\"BB\":{\"value\":2}}]"; [EOL]     m = new ObjectMapper(); [EOL]     assertEquals(EXP, m.writeValueAsString(input)); [EOL]     m = new ObjectMapper(); [EOL]     m.configure(MapperFeature.USE_STATIC_TYPING, true); [EOL]     assertEquals(EXP, m.writeValueAsString(input)); [EOL] }
public void testGenericArray() throws Exception { [EOL]     ObjectMapper m; [EOL]     final A[] input = new A[] { new B() }; [EOL]     final String EXP = "[{\"BB\":{\"value\":2}}]"; [EOL]     m = new ObjectMapper(); [EOL]     assertEquals(EXP, m.writeValueAsString(input)); [EOL]     m = new ObjectMapper(); [EOL]     m.configure(MapperFeature.USE_STATIC_TYPING, true); [EOL]     assertEquals(EXP, m.writeValueAsString(input)); [EOL] }
public void testGenericArray() throws Exception { [EOL]     ObjectMapper m; [EOL]     final A[] input = new A[] { new B() }; [EOL]     final String EXP = "[{\"BB\":{\"value\":2}}]"; [EOL]     m = new ObjectMapper(); [EOL]     assertEquals(EXP, m.writeValueAsString(input)); [EOL]     m = new ObjectMapper(); [EOL]     m.configure(MapperFeature.USE_STATIC_TYPING, true); [EOL]     assertEquals(EXP, m.writeValueAsString(input)); [EOL] }
public void testGenericArray() throws Exception { [EOL]     ObjectMapper m; [EOL]     final A[] input = new A[] { new B() }; [EOL]     final String EXP = "[{\"BB\":{\"value\":2}}]"; [EOL]     m = new ObjectMapper(); [EOL]     assertEquals(EXP, m.writeValueAsString(input)); [EOL]     m = new ObjectMapper(); [EOL]     m.configure(MapperFeature.USE_STATIC_TYPING, true); [EOL]     assertEquals(EXP, m.writeValueAsString(input)); [EOL] }
public void testFloat() throws Exception { [EOL]     double[] values = new double[] { 0.0, 1.0, 0.1, -37.01, 999.99, 0.3, 33.3, Double.NaN, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY }; [EOL]     for (double d : values) { [EOL]         float f = (float) d; [EOL]         String expected = String.valueOf(f); [EOL]         if (Float.isNaN(f) || Float.isInfinite(f)) { [EOL]             expected = "\"" + expected + "\""; [EOL]         } [EOL]         assertEquals(expected, serializeAsString(MAPPER, Float.valueOf(f))); [EOL]     } [EOL] }
public void testFloat() throws Exception { [EOL]     double[] values = new double[] { 0.0, 1.0, 0.1, -37.01, 999.99, 0.3, 33.3, Double.NaN, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY }; [EOL]     for (double d : values) { [EOL]         float f = (float) d; [EOL]         String expected = String.valueOf(f); [EOL]         if (Float.isNaN(f) || Float.isInfinite(f)) { [EOL]             expected = "\"" + expected + "\""; [EOL]         } [EOL]         assertEquals(expected, serializeAsString(MAPPER, Float.valueOf(f))); [EOL]     } [EOL] }
public void testFloat() throws Exception { [EOL]     double[] values = new double[] { 0.0, 1.0, 0.1, -37.01, 999.99, 0.3, 33.3, Double.NaN, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY }; [EOL]     for (double d : values) { [EOL]         float f = (float) d; [EOL]         String expected = String.valueOf(f); [EOL]         if (Float.isNaN(f) || Float.isInfinite(f)) { [EOL]             expected = "\"" + expected + "\""; [EOL]         } [EOL]         assertEquals(expected, serializeAsString(MAPPER, Float.valueOf(f))); [EOL]     } [EOL] }
public void testFloat() throws Exception { [EOL]     double[] values = new double[] { 0.0, 1.0, 0.1, -37.01, 999.99, 0.3, 33.3, Double.NaN, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY }; [EOL]     for (double d : values) { [EOL]         float f = (float) d; [EOL]         String expected = String.valueOf(f); [EOL]         if (Float.isNaN(f) || Float.isInfinite(f)) { [EOL]             expected = "\"" + expected + "\""; [EOL]         } [EOL]         assertEquals(expected, serializeAsString(MAPPER, Float.valueOf(f))); [EOL]     } [EOL] }
public void testCollectionType() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType collectionT = CollectionType.construct(List.class, tf.constructType(String.class)); [EOL]     assertNotNull(collectionT); [EOL]     assertTrue(collectionT.isContainerType()); [EOL]     assertSame(collectionT, collectionT.narrowContentsBy(String.class)); [EOL]     assertNotNull(collectionT.toString()); [EOL]     assertTrue(collectionT.equals(collectionT)); [EOL]     assertFalse(collectionT.equals(null)); [EOL]     assertFalse(collectionT.equals("xyz")); [EOL]     assertTrue(collectionT.equals(CollectionType.construct(List.class, tf.constructType(String.class)))); [EOL]     assertFalse(collectionT.equals(CollectionType.construct(Set.class, tf.constructType(String.class)))); [EOL]     try { [EOL]         SimpleType.construct(ArrayList.class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "for a Collection"); [EOL]     } [EOL] }
public void testCollectionType() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType collectionT = CollectionType.construct(List.class, tf.constructType(String.class)); [EOL]     assertNotNull(collectionT); [EOL]     assertTrue(collectionT.isContainerType()); [EOL]     assertSame(collectionT, collectionT.narrowContentsBy(String.class)); [EOL]     assertNotNull(collectionT.toString()); [EOL]     assertTrue(collectionT.equals(collectionT)); [EOL]     assertFalse(collectionT.equals(null)); [EOL]     assertFalse(collectionT.equals("xyz")); [EOL]     assertTrue(collectionT.equals(CollectionType.construct(List.class, tf.constructType(String.class)))); [EOL]     assertFalse(collectionT.equals(CollectionType.construct(Set.class, tf.constructType(String.class)))); [EOL]     try { [EOL]         SimpleType.construct(ArrayList.class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "for a Collection"); [EOL]     } [EOL] }
public void testCollectionType() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType collectionT = CollectionType.construct(List.class, tf.constructType(String.class)); [EOL]     assertNotNull(collectionT); [EOL]     assertTrue(collectionT.isContainerType()); [EOL]     assertSame(collectionT, collectionT.narrowContentsBy(String.class)); [EOL]     assertNotNull(collectionT.toString()); [EOL]     assertTrue(collectionT.equals(collectionT)); [EOL]     assertFalse(collectionT.equals(null)); [EOL]     assertFalse(collectionT.equals("xyz")); [EOL]     assertTrue(collectionT.equals(CollectionType.construct(List.class, tf.constructType(String.class)))); [EOL]     assertFalse(collectionT.equals(CollectionType.construct(Set.class, tf.constructType(String.class)))); [EOL]     try { [EOL]         SimpleType.construct(ArrayList.class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "for a Collection"); [EOL]     } [EOL] }
public void testCollectionType() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType collectionT = CollectionType.construct(List.class, tf.constructType(String.class)); [EOL]     assertNotNull(collectionT); [EOL]     assertTrue(collectionT.isContainerType()); [EOL]     assertSame(collectionT, collectionT.narrowContentsBy(String.class)); [EOL]     assertNotNull(collectionT.toString()); [EOL]     assertTrue(collectionT.equals(collectionT)); [EOL]     assertFalse(collectionT.equals(null)); [EOL]     assertFalse(collectionT.equals("xyz")); [EOL]     assertTrue(collectionT.equals(CollectionType.construct(List.class, tf.constructType(String.class)))); [EOL]     assertFalse(collectionT.equals(CollectionType.construct(Set.class, tf.constructType(String.class)))); [EOL]     try { [EOL]         SimpleType.construct(ArrayList.class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "for a Collection"); [EOL]     } [EOL] }
public void testFloat() throws Exception { [EOL]     double[] values = new double[] { 0.0, 1.0, 0.1, -37.01, 999.99, 0.3, 33.3, Double.NaN, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY }; [EOL]     for (double d : values) { [EOL]         float f = (float) d; [EOL]         String expected = String.valueOf(f); [EOL]         if (Float.isNaN(f) || Float.isInfinite(f)) { [EOL]             expected = "\"" + expected + "\""; [EOL]         } [EOL]         assertEquals(expected, serializeAsString(MAPPER, Float.valueOf(f))); [EOL]     } [EOL] }
public void testIntArray() throws Exception { [EOL]     assertEquals("[0,-3]", serializeAsString(MAPPER, new int[] { 0, -3 })); [EOL]     assertEquals("[13,9]", serializeAsString(MAPPER, new Integer[] { 13, 9 })); [EOL] }
public void testIntArray() throws Exception { [EOL]     assertEquals("[0,-3]", serializeAsString(MAPPER, new int[] { 0, -3 })); [EOL]     assertEquals("[13,9]", serializeAsString(MAPPER, new Integer[] { 13, 9 })); [EOL] }
public void testIntArray() throws Exception { [EOL]     assertEquals("[0,-3]", serializeAsString(MAPPER, new int[] { 0, -3 })); [EOL]     assertEquals("[13,9]", serializeAsString(MAPPER, new Integer[] { 13, 9 })); [EOL] }
public void testIterable() throws IOException { [EOL]     StringWriter sw = new StringWriter(); [EOL]     MAPPER.writeValue(sw, new IterableWrapper(new int[] { 1, 2, 3 })); [EOL]     assertEquals("[1,2,3]", sw.toString().trim()); [EOL] }
public void testIterable() throws IOException { [EOL]     StringWriter sw = new StringWriter(); [EOL]     MAPPER.writeValue(sw, new IterableWrapper(new int[] { 1, 2, 3 })); [EOL]     assertEquals("[1,2,3]", sw.toString().trim()); [EOL] }
public void testIterable() throws IOException { [EOL]     StringWriter sw = new StringWriter(); [EOL]     MAPPER.writeValue(sw, new IterableWrapper(new int[] { 1, 2, 3 })); [EOL]     assertEquals("[1,2,3]", sw.toString().trim()); [EOL] }
public void testIterable() throws IOException { [EOL]     StringWriter sw = new StringWriter(); [EOL]     MAPPER.writeValue(sw, new IterableWrapper(new int[] { 1, 2, 3 })); [EOL]     assertEquals("[1,2,3]", sw.toString().trim()); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testCollections() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t = tf.constructType(ArrayList.class); [EOL]     assertEquals(CollectionType.class, t.getClass()); [EOL]     assertSame(ArrayList.class, t.getRawClass()); [EOL]     t = tf.constructType(new TypeReference<ArrayList<String>>() { [EOL]     }); [EOL]     assertEquals(CollectionType.class, t.getClass()); [EOL]     assertSame(ArrayList.class, t.getRawClass()); [EOL]     JavaType elemType = ((CollectionType) t).getContentType(); [EOL]     assertNotNull(elemType); [EOL]     assertSame(SimpleType.class, elemType.getClass()); [EOL]     assertSame(String.class, elemType.getRawClass()); [EOL]     t = tf.constructCollectionType(ArrayList.class, String.class); [EOL]     assertEquals(CollectionType.class, t.getClass()); [EOL]     assertSame(String.class, ((CollectionType) t).getContentType().getRawClass()); [EOL] }
public void testCollections() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t = tf.constructType(ArrayList.class); [EOL]     assertEquals(CollectionType.class, t.getClass()); [EOL]     assertSame(ArrayList.class, t.getRawClass()); [EOL]     t = tf.constructType(new TypeReference<ArrayList<String>>() { [EOL]     }); [EOL]     assertEquals(CollectionType.class, t.getClass()); [EOL]     assertSame(ArrayList.class, t.getRawClass()); [EOL]     JavaType elemType = ((CollectionType) t).getContentType(); [EOL]     assertNotNull(elemType); [EOL]     assertSame(SimpleType.class, elemType.getClass()); [EOL]     assertSame(String.class, elemType.getRawClass()); [EOL]     t = tf.constructCollectionType(ArrayList.class, String.class); [EOL]     assertEquals(CollectionType.class, t.getClass()); [EOL]     assertSame(String.class, ((CollectionType) t).getContentType().getRawClass()); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
public void testSneakySelfRefs() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = mapper.writeValueAsString(new SneakyBean2()); [EOL]     assertEquals("{\"foobar\":null}", json); [EOL] }
public void testSneakySelfRefs() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = mapper.writeValueAsString(new SneakyBean2()); [EOL]     assertEquals("{\"foobar\":null}", json); [EOL] }
public void testCollections() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t = tf.constructType(ArrayList.class); [EOL]     assertEquals(CollectionType.class, t.getClass()); [EOL]     assertSame(ArrayList.class, t.getRawClass()); [EOL]     t = tf.constructType(new TypeReference<ArrayList<String>>() { [EOL]     }); [EOL]     assertEquals(CollectionType.class, t.getClass()); [EOL]     assertSame(ArrayList.class, t.getRawClass()); [EOL]     JavaType elemType = ((CollectionType) t).getContentType(); [EOL]     assertNotNull(elemType); [EOL]     assertSame(SimpleType.class, elemType.getClass()); [EOL]     assertSame(String.class, elemType.getRawClass()); [EOL]     t = tf.constructCollectionType(ArrayList.class, String.class); [EOL]     assertEquals(CollectionType.class, t.getClass()); [EOL]     assertSame(String.class, ((CollectionType) t).getContentType().getRawClass()); [EOL] }
public void testCollections() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t = tf.constructType(ArrayList.class); [EOL]     assertEquals(CollectionType.class, t.getClass()); [EOL]     assertSame(ArrayList.class, t.getRawClass()); [EOL]     t = tf.constructType(new TypeReference<ArrayList<String>>() { [EOL]     }); [EOL]     assertEquals(CollectionType.class, t.getClass()); [EOL]     assertSame(ArrayList.class, t.getRawClass()); [EOL]     JavaType elemType = ((CollectionType) t).getContentType(); [EOL]     assertNotNull(elemType); [EOL]     assertSame(SimpleType.class, elemType.getClass()); [EOL]     assertSame(String.class, elemType.getRawClass()); [EOL]     t = tf.constructCollectionType(ArrayList.class, String.class); [EOL]     assertEquals(CollectionType.class, t.getClass()); [EOL]     assertSame(String.class, ((CollectionType) t).getContentType().getRawClass()); [EOL] }
public void testCollections() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t = tf.constructType(ArrayList.class); [EOL]     assertEquals(CollectionType.class, t.getClass()); [EOL]     assertSame(ArrayList.class, t.getRawClass()); [EOL]     t = tf.constructType(new TypeReference<ArrayList<String>>() { [EOL]     }); [EOL]     assertEquals(CollectionType.class, t.getClass()); [EOL]     assertSame(ArrayList.class, t.getRawClass()); [EOL]     JavaType elemType = ((CollectionType) t).getContentType(); [EOL]     assertNotNull(elemType); [EOL]     assertSame(SimpleType.class, elemType.getClass()); [EOL]     assertSame(String.class, elemType.getRawClass()); [EOL]     t = tf.constructCollectionType(ArrayList.class, String.class); [EOL]     assertEquals(CollectionType.class, t.getClass()); [EOL]     assertSame(String.class, ((CollectionType) t).getContentType().getRawClass()); [EOL] }
public void testParametricTypes() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t = tf.constructParametricType(ArrayList.class, String.class); [EOL]     assertEquals(CollectionType.class, t.getClass()); [EOL]     JavaType strC = tf.constructType(String.class); [EOL]     assertEquals(1, t.containedTypeCount()); [EOL]     assertEquals(strC, t.containedType(0)); [EOL]     assertNull(t.containedType(1)); [EOL]     JavaType t2 = tf.constructParametricType(Map.class, strC, t); [EOL]     assertEquals(MapType.class, t2.getClass()); [EOL]     assertEquals(2, t2.containedTypeCount()); [EOL]     assertEquals(strC, t2.containedType(0)); [EOL]     assertEquals(t, t2.containedType(1)); [EOL]     assertNull(t2.containedType(2)); [EOL]     JavaType custom = tf.constructParametricType(SingleArgGeneric.class, String.class); [EOL]     assertEquals(SimpleType.class, custom.getClass()); [EOL]     assertEquals(1, custom.containedTypeCount()); [EOL]     assertEquals(strC, custom.containedType(0)); [EOL]     assertNull(custom.containedType(1)); [EOL]     assertEquals("X", custom.containedTypeName(0)); [EOL]     try { [EOL]         tf.constructParametricType(Map.class, strC); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "Need exactly 2 parameter types for Map types"); [EOL]     } [EOL]     try { [EOL]         tf.constructParametricType(SingleArgGeneric.class, strC, strC); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "expected 1 parameters, was given 2"); [EOL]     } [EOL] }
public void testParametricTypes() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t = tf.constructParametricType(ArrayList.class, String.class); [EOL]     assertEquals(CollectionType.class, t.getClass()); [EOL]     JavaType strC = tf.constructType(String.class); [EOL]     assertEquals(1, t.containedTypeCount()); [EOL]     assertEquals(strC, t.containedType(0)); [EOL]     assertNull(t.containedType(1)); [EOL]     JavaType t2 = tf.constructParametricType(Map.class, strC, t); [EOL]     assertEquals(MapType.class, t2.getClass()); [EOL]     assertEquals(2, t2.containedTypeCount()); [EOL]     assertEquals(strC, t2.containedType(0)); [EOL]     assertEquals(t, t2.containedType(1)); [EOL]     assertNull(t2.containedType(2)); [EOL]     JavaType custom = tf.constructParametricType(SingleArgGeneric.class, String.class); [EOL]     assertEquals(SimpleType.class, custom.getClass()); [EOL]     assertEquals(1, custom.containedTypeCount()); [EOL]     assertEquals(strC, custom.containedType(0)); [EOL]     assertNull(custom.containedType(1)); [EOL]     assertEquals("X", custom.containedTypeName(0)); [EOL]     try { [EOL]         tf.constructParametricType(Map.class, strC); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "Need exactly 2 parameter types for Map types"); [EOL]     } [EOL]     try { [EOL]         tf.constructParametricType(SingleArgGeneric.class, strC, strC); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "expected 1 parameters, was given 2"); [EOL]     } [EOL] }
public void testParametricTypes() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t = tf.constructParametricType(ArrayList.class, String.class); [EOL]     assertEquals(CollectionType.class, t.getClass()); [EOL]     JavaType strC = tf.constructType(String.class); [EOL]     assertEquals(1, t.containedTypeCount()); [EOL]     assertEquals(strC, t.containedType(0)); [EOL]     assertNull(t.containedType(1)); [EOL]     JavaType t2 = tf.constructParametricType(Map.class, strC, t); [EOL]     assertEquals(MapType.class, t2.getClass()); [EOL]     assertEquals(2, t2.containedTypeCount()); [EOL]     assertEquals(strC, t2.containedType(0)); [EOL]     assertEquals(t, t2.containedType(1)); [EOL]     assertNull(t2.containedType(2)); [EOL]     JavaType custom = tf.constructParametricType(SingleArgGeneric.class, String.class); [EOL]     assertEquals(SimpleType.class, custom.getClass()); [EOL]     assertEquals(1, custom.containedTypeCount()); [EOL]     assertEquals(strC, custom.containedType(0)); [EOL]     assertNull(custom.containedType(1)); [EOL]     assertEquals("X", custom.containedTypeName(0)); [EOL]     try { [EOL]         tf.constructParametricType(Map.class, strC); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "Need exactly 2 parameter types for Map types"); [EOL]     } [EOL]     try { [EOL]         tf.constructParametricType(SingleArgGeneric.class, strC, strC); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "expected 1 parameters, was given 2"); [EOL]     } [EOL] }
public void testParametricTypes() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t = tf.constructParametricType(ArrayList.class, String.class); [EOL]     assertEquals(CollectionType.class, t.getClass()); [EOL]     JavaType strC = tf.constructType(String.class); [EOL]     assertEquals(1, t.containedTypeCount()); [EOL]     assertEquals(strC, t.containedType(0)); [EOL]     assertNull(t.containedType(1)); [EOL]     JavaType t2 = tf.constructParametricType(Map.class, strC, t); [EOL]     assertEquals(MapType.class, t2.getClass()); [EOL]     assertEquals(2, t2.containedTypeCount()); [EOL]     assertEquals(strC, t2.containedType(0)); [EOL]     assertEquals(t, t2.containedType(1)); [EOL]     assertNull(t2.containedType(2)); [EOL]     JavaType custom = tf.constructParametricType(SingleArgGeneric.class, String.class); [EOL]     assertEquals(SimpleType.class, custom.getClass()); [EOL]     assertEquals(1, custom.containedTypeCount()); [EOL]     assertEquals(strC, custom.containedType(0)); [EOL]     assertNull(custom.containedType(1)); [EOL]     assertEquals("X", custom.containedTypeName(0)); [EOL]     try { [EOL]         tf.constructParametricType(Map.class, strC); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "Need exactly 2 parameter types for Map types"); [EOL]     } [EOL]     try { [EOL]         tf.constructParametricType(SingleArgGeneric.class, strC, strC); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "expected 1 parameters, was given 2"); [EOL]     } [EOL] }
public void testParametricTypes() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t = tf.constructParametricType(ArrayList.class, String.class); [EOL]     assertEquals(CollectionType.class, t.getClass()); [EOL]     JavaType strC = tf.constructType(String.class); [EOL]     assertEquals(1, t.containedTypeCount()); [EOL]     assertEquals(strC, t.containedType(0)); [EOL]     assertNull(t.containedType(1)); [EOL]     JavaType t2 = tf.constructParametricType(Map.class, strC, t); [EOL]     assertEquals(MapType.class, t2.getClass()); [EOL]     assertEquals(2, t2.containedTypeCount()); [EOL]     assertEquals(strC, t2.containedType(0)); [EOL]     assertEquals(t, t2.containedType(1)); [EOL]     assertNull(t2.containedType(2)); [EOL]     JavaType custom = tf.constructParametricType(SingleArgGeneric.class, String.class); [EOL]     assertEquals(SimpleType.class, custom.getClass()); [EOL]     assertEquals(1, custom.containedTypeCount()); [EOL]     assertEquals(strC, custom.containedType(0)); [EOL]     assertNull(custom.containedType(1)); [EOL]     assertEquals("X", custom.containedTypeName(0)); [EOL]     try { [EOL]         tf.constructParametricType(Map.class, strC); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "Need exactly 2 parameter types for Map types"); [EOL]     } [EOL]     try { [EOL]         tf.constructParametricType(SingleArgGeneric.class, strC, strC); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "expected 1 parameters, was given 2"); [EOL]     } [EOL] }
public void testParametricTypes() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t = tf.constructParametricType(ArrayList.class, String.class); [EOL]     assertEquals(CollectionType.class, t.getClass()); [EOL]     JavaType strC = tf.constructType(String.class); [EOL]     assertEquals(1, t.containedTypeCount()); [EOL]     assertEquals(strC, t.containedType(0)); [EOL]     assertNull(t.containedType(1)); [EOL]     JavaType t2 = tf.constructParametricType(Map.class, strC, t); [EOL]     assertEquals(MapType.class, t2.getClass()); [EOL]     assertEquals(2, t2.containedTypeCount()); [EOL]     assertEquals(strC, t2.containedType(0)); [EOL]     assertEquals(t, t2.containedType(1)); [EOL]     assertNull(t2.containedType(2)); [EOL]     JavaType custom = tf.constructParametricType(SingleArgGeneric.class, String.class); [EOL]     assertEquals(SimpleType.class, custom.getClass()); [EOL]     assertEquals(1, custom.containedTypeCount()); [EOL]     assertEquals(strC, custom.containedType(0)); [EOL]     assertNull(custom.containedType(1)); [EOL]     assertEquals("X", custom.containedTypeName(0)); [EOL]     try { [EOL]         tf.constructParametricType(Map.class, strC); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "Need exactly 2 parameter types for Map types"); [EOL]     } [EOL]     try { [EOL]         tf.constructParametricType(SingleArgGeneric.class, strC, strC); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "expected 1 parameters, was given 2"); [EOL]     } [EOL] }
public void testParametricTypes() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t = tf.constructParametricType(ArrayList.class, String.class); [EOL]     assertEquals(CollectionType.class, t.getClass()); [EOL]     JavaType strC = tf.constructType(String.class); [EOL]     assertEquals(1, t.containedTypeCount()); [EOL]     assertEquals(strC, t.containedType(0)); [EOL]     assertNull(t.containedType(1)); [EOL]     JavaType t2 = tf.constructParametricType(Map.class, strC, t); [EOL]     assertEquals(MapType.class, t2.getClass()); [EOL]     assertEquals(2, t2.containedTypeCount()); [EOL]     assertEquals(strC, t2.containedType(0)); [EOL]     assertEquals(t, t2.containedType(1)); [EOL]     assertNull(t2.containedType(2)); [EOL]     JavaType custom = tf.constructParametricType(SingleArgGeneric.class, String.class); [EOL]     assertEquals(SimpleType.class, custom.getClass()); [EOL]     assertEquals(1, custom.containedTypeCount()); [EOL]     assertEquals(strC, custom.containedType(0)); [EOL]     assertNull(custom.containedType(1)); [EOL]     assertEquals("X", custom.containedTypeName(0)); [EOL]     try { [EOL]         tf.constructParametricType(Map.class, strC); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "Need exactly 2 parameter types for Map types"); [EOL]     } [EOL]     try { [EOL]         tf.constructParametricType(SingleArgGeneric.class, strC, strC); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "expected 1 parameters, was given 2"); [EOL]     } [EOL] }
public void testCollectionLikeDeserialization() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setTypeFactory(mapper.getTypeFactory().withModifier(new MyTypeModifier())); [EOL]     mapper.registerModule(new ModifierModule()); [EOL]     MyMapLikeType result = mapper.readValue("{\"a\":13}", MyMapLikeType.class); [EOL]     assertEquals("a", result.getKey()); [EOL]     assertEquals(Integer.valueOf(13), result.getValue()); [EOL] }
public void testCollectionLikeDeserialization() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setTypeFactory(mapper.getTypeFactory().withModifier(new MyTypeModifier())); [EOL]     mapper.registerModule(new ModifierModule()); [EOL]     MyMapLikeType result = mapper.readValue("{\"a\":13}", MyMapLikeType.class); [EOL]     assertEquals("a", result.getKey()); [EOL]     assertEquals(Integer.valueOf(13), result.getValue()); [EOL] }
public void testCollectionLikeDeserialization() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setTypeFactory(mapper.getTypeFactory().withModifier(new MyTypeModifier())); [EOL]     mapper.registerModule(new ModifierModule()); [EOL]     MyMapLikeType result = mapper.readValue("{\"a\":13}", MyMapLikeType.class); [EOL]     assertEquals("a", result.getKey()); [EOL]     assertEquals(Integer.valueOf(13), result.getValue()); [EOL] }
public void testCollectionLikeDeserialization() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setTypeFactory(mapper.getTypeFactory().withModifier(new MyTypeModifier())); [EOL]     mapper.registerModule(new ModifierModule()); [EOL]     MyMapLikeType result = mapper.readValue("{\"a\":13}", MyMapLikeType.class); [EOL]     assertEquals("a", result.getKey()); [EOL]     assertEquals(Integer.valueOf(13), result.getValue()); [EOL] }
public void testParametricTypes() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t = tf.constructParametricType(ArrayList.class, String.class); [EOL]     assertEquals(CollectionType.class, t.getClass()); [EOL]     JavaType strC = tf.constructType(String.class); [EOL]     assertEquals(1, t.containedTypeCount()); [EOL]     assertEquals(strC, t.containedType(0)); [EOL]     assertNull(t.containedType(1)); [EOL]     JavaType t2 = tf.constructParametricType(Map.class, strC, t); [EOL]     assertEquals(MapType.class, t2.getClass()); [EOL]     assertEquals(2, t2.containedTypeCount()); [EOL]     assertEquals(strC, t2.containedType(0)); [EOL]     assertEquals(t, t2.containedType(1)); [EOL]     assertNull(t2.containedType(2)); [EOL]     JavaType custom = tf.constructParametricType(SingleArgGeneric.class, String.class); [EOL]     assertEquals(SimpleType.class, custom.getClass()); [EOL]     assertEquals(1, custom.containedTypeCount()); [EOL]     assertEquals(strC, custom.containedType(0)); [EOL]     assertNull(custom.containedType(1)); [EOL]     assertEquals("X", custom.containedTypeName(0)); [EOL]     try { [EOL]         tf.constructParametricType(Map.class, strC); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "Need exactly 2 parameter types for Map types"); [EOL]     } [EOL]     try { [EOL]         tf.constructParametricType(SingleArgGeneric.class, strC, strC); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "expected 1 parameters, was given 2"); [EOL]     } [EOL] }
public void testParametricTypes() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t = tf.constructParametricType(ArrayList.class, String.class); [EOL]     assertEquals(CollectionType.class, t.getClass()); [EOL]     JavaType strC = tf.constructType(String.class); [EOL]     assertEquals(1, t.containedTypeCount()); [EOL]     assertEquals(strC, t.containedType(0)); [EOL]     assertNull(t.containedType(1)); [EOL]     JavaType t2 = tf.constructParametricType(Map.class, strC, t); [EOL]     assertEquals(MapType.class, t2.getClass()); [EOL]     assertEquals(2, t2.containedTypeCount()); [EOL]     assertEquals(strC, t2.containedType(0)); [EOL]     assertEquals(t, t2.containedType(1)); [EOL]     assertNull(t2.containedType(2)); [EOL]     JavaType custom = tf.constructParametricType(SingleArgGeneric.class, String.class); [EOL]     assertEquals(SimpleType.class, custom.getClass()); [EOL]     assertEquals(1, custom.containedTypeCount()); [EOL]     assertEquals(strC, custom.containedType(0)); [EOL]     assertNull(custom.containedType(1)); [EOL]     assertEquals("X", custom.containedTypeName(0)); [EOL]     try { [EOL]         tf.constructParametricType(Map.class, strC); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "Need exactly 2 parameter types for Map types"); [EOL]     } [EOL]     try { [EOL]         tf.constructParametricType(SingleArgGeneric.class, strC, strC); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "expected 1 parameters, was given 2"); [EOL]     } [EOL] }
public void testSneakySelfRefs() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = mapper.writeValueAsString(new SneakyBean2()); [EOL]     assertEquals("{\"foobar\":null}", json); [EOL] }
public void testSneakySelfRefs() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = mapper.writeValueAsString(new SneakyBean2()); [EOL]     assertEquals("{\"foobar\":null}", json); [EOL] }
public void testParametricTypes() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t = tf.constructParametricType(ArrayList.class, String.class); [EOL]     assertEquals(CollectionType.class, t.getClass()); [EOL]     JavaType strC = tf.constructType(String.class); [EOL]     assertEquals(1, t.containedTypeCount()); [EOL]     assertEquals(strC, t.containedType(0)); [EOL]     assertNull(t.containedType(1)); [EOL]     JavaType t2 = tf.constructParametricType(Map.class, strC, t); [EOL]     assertEquals(MapType.class, t2.getClass()); [EOL]     assertEquals(2, t2.containedTypeCount()); [EOL]     assertEquals(strC, t2.containedType(0)); [EOL]     assertEquals(t, t2.containedType(1)); [EOL]     assertNull(t2.containedType(2)); [EOL]     JavaType custom = tf.constructParametricType(SingleArgGeneric.class, String.class); [EOL]     assertEquals(SimpleType.class, custom.getClass()); [EOL]     assertEquals(1, custom.containedTypeCount()); [EOL]     assertEquals(strC, custom.containedType(0)); [EOL]     assertNull(custom.containedType(1)); [EOL]     assertEquals("X", custom.containedTypeName(0)); [EOL]     try { [EOL]         tf.constructParametricType(Map.class, strC); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "Need exactly 2 parameter types for Map types"); [EOL]     } [EOL]     try { [EOL]         tf.constructParametricType(SingleArgGeneric.class, strC, strC); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "expected 1 parameters, was given 2"); [EOL]     } [EOL] }
public void testParametricTypes() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t = tf.constructParametricType(ArrayList.class, String.class); [EOL]     assertEquals(CollectionType.class, t.getClass()); [EOL]     JavaType strC = tf.constructType(String.class); [EOL]     assertEquals(1, t.containedTypeCount()); [EOL]     assertEquals(strC, t.containedType(0)); [EOL]     assertNull(t.containedType(1)); [EOL]     JavaType t2 = tf.constructParametricType(Map.class, strC, t); [EOL]     assertEquals(MapType.class, t2.getClass()); [EOL]     assertEquals(2, t2.containedTypeCount()); [EOL]     assertEquals(strC, t2.containedType(0)); [EOL]     assertEquals(t, t2.containedType(1)); [EOL]     assertNull(t2.containedType(2)); [EOL]     JavaType custom = tf.constructParametricType(SingleArgGeneric.class, String.class); [EOL]     assertEquals(SimpleType.class, custom.getClass()); [EOL]     assertEquals(1, custom.containedTypeCount()); [EOL]     assertEquals(strC, custom.containedType(0)); [EOL]     assertNull(custom.containedType(1)); [EOL]     assertEquals("X", custom.containedTypeName(0)); [EOL]     try { [EOL]         tf.constructParametricType(Map.class, strC); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "Need exactly 2 parameter types for Map types"); [EOL]     } [EOL]     try { [EOL]         tf.constructParametricType(SingleArgGeneric.class, strC, strC); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "expected 1 parameters, was given 2"); [EOL]     } [EOL] }
public void testParametricTypes() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t = tf.constructParametricType(ArrayList.class, String.class); [EOL]     assertEquals(CollectionType.class, t.getClass()); [EOL]     JavaType strC = tf.constructType(String.class); [EOL]     assertEquals(1, t.containedTypeCount()); [EOL]     assertEquals(strC, t.containedType(0)); [EOL]     assertNull(t.containedType(1)); [EOL]     JavaType t2 = tf.constructParametricType(Map.class, strC, t); [EOL]     assertEquals(MapType.class, t2.getClass()); [EOL]     assertEquals(2, t2.containedTypeCount()); [EOL]     assertEquals(strC, t2.containedType(0)); [EOL]     assertEquals(t, t2.containedType(1)); [EOL]     assertNull(t2.containedType(2)); [EOL]     JavaType custom = tf.constructParametricType(SingleArgGeneric.class, String.class); [EOL]     assertEquals(SimpleType.class, custom.getClass()); [EOL]     assertEquals(1, custom.containedTypeCount()); [EOL]     assertEquals(strC, custom.containedType(0)); [EOL]     assertNull(custom.containedType(1)); [EOL]     assertEquals("X", custom.containedTypeName(0)); [EOL]     try { [EOL]         tf.constructParametricType(Map.class, strC); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "Need exactly 2 parameter types for Map types"); [EOL]     } [EOL]     try { [EOL]         tf.constructParametricType(SingleArgGeneric.class, strC, strC); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "expected 1 parameters, was given 2"); [EOL]     } [EOL] }
public void testParametricTypes() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t = tf.constructParametricType(ArrayList.class, String.class); [EOL]     assertEquals(CollectionType.class, t.getClass()); [EOL]     JavaType strC = tf.constructType(String.class); [EOL]     assertEquals(1, t.containedTypeCount()); [EOL]     assertEquals(strC, t.containedType(0)); [EOL]     assertNull(t.containedType(1)); [EOL]     JavaType t2 = tf.constructParametricType(Map.class, strC, t); [EOL]     assertEquals(MapType.class, t2.getClass()); [EOL]     assertEquals(2, t2.containedTypeCount()); [EOL]     assertEquals(strC, t2.containedType(0)); [EOL]     assertEquals(t, t2.containedType(1)); [EOL]     assertNull(t2.containedType(2)); [EOL]     JavaType custom = tf.constructParametricType(SingleArgGeneric.class, String.class); [EOL]     assertEquals(SimpleType.class, custom.getClass()); [EOL]     assertEquals(1, custom.containedTypeCount()); [EOL]     assertEquals(strC, custom.containedType(0)); [EOL]     assertNull(custom.containedType(1)); [EOL]     assertEquals("X", custom.containedTypeName(0)); [EOL]     try { [EOL]         tf.constructParametricType(Map.class, strC); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "Need exactly 2 parameter types for Map types"); [EOL]     } [EOL]     try { [EOL]         tf.constructParametricType(SingleArgGeneric.class, strC, strC); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "expected 1 parameters, was given 2"); [EOL]     } [EOL] }
public void testParametricTypes() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t = tf.constructParametricType(ArrayList.class, String.class); [EOL]     assertEquals(CollectionType.class, t.getClass()); [EOL]     JavaType strC = tf.constructType(String.class); [EOL]     assertEquals(1, t.containedTypeCount()); [EOL]     assertEquals(strC, t.containedType(0)); [EOL]     assertNull(t.containedType(1)); [EOL]     JavaType t2 = tf.constructParametricType(Map.class, strC, t); [EOL]     assertEquals(MapType.class, t2.getClass()); [EOL]     assertEquals(2, t2.containedTypeCount()); [EOL]     assertEquals(strC, t2.containedType(0)); [EOL]     assertEquals(t, t2.containedType(1)); [EOL]     assertNull(t2.containedType(2)); [EOL]     JavaType custom = tf.constructParametricType(SingleArgGeneric.class, String.class); [EOL]     assertEquals(SimpleType.class, custom.getClass()); [EOL]     assertEquals(1, custom.containedTypeCount()); [EOL]     assertEquals(strC, custom.containedType(0)); [EOL]     assertNull(custom.containedType(1)); [EOL]     assertEquals("X", custom.containedTypeName(0)); [EOL]     try { [EOL]         tf.constructParametricType(Map.class, strC); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "Need exactly 2 parameter types for Map types"); [EOL]     } [EOL]     try { [EOL]         tf.constructParametricType(SingleArgGeneric.class, strC, strC); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "expected 1 parameters, was given 2"); [EOL]     } [EOL] }
public void testParametricTypes() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t = tf.constructParametricType(ArrayList.class, String.class); [EOL]     assertEquals(CollectionType.class, t.getClass()); [EOL]     JavaType strC = tf.constructType(String.class); [EOL]     assertEquals(1, t.containedTypeCount()); [EOL]     assertEquals(strC, t.containedType(0)); [EOL]     assertNull(t.containedType(1)); [EOL]     JavaType t2 = tf.constructParametricType(Map.class, strC, t); [EOL]     assertEquals(MapType.class, t2.getClass()); [EOL]     assertEquals(2, t2.containedTypeCount()); [EOL]     assertEquals(strC, t2.containedType(0)); [EOL]     assertEquals(t, t2.containedType(1)); [EOL]     assertNull(t2.containedType(2)); [EOL]     JavaType custom = tf.constructParametricType(SingleArgGeneric.class, String.class); [EOL]     assertEquals(SimpleType.class, custom.getClass()); [EOL]     assertEquals(1, custom.containedTypeCount()); [EOL]     assertEquals(strC, custom.containedType(0)); [EOL]     assertNull(custom.containedType(1)); [EOL]     assertEquals("X", custom.containedTypeName(0)); [EOL]     try { [EOL]         tf.constructParametricType(Map.class, strC); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "Need exactly 2 parameter types for Map types"); [EOL]     } [EOL]     try { [EOL]         tf.constructParametricType(SingleArgGeneric.class, strC, strC); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "expected 1 parameters, was given 2"); [EOL]     } [EOL] }
public void testParametricTypes() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t = tf.constructParametricType(ArrayList.class, String.class); [EOL]     assertEquals(CollectionType.class, t.getClass()); [EOL]     JavaType strC = tf.constructType(String.class); [EOL]     assertEquals(1, t.containedTypeCount()); [EOL]     assertEquals(strC, t.containedType(0)); [EOL]     assertNull(t.containedType(1)); [EOL]     JavaType t2 = tf.constructParametricType(Map.class, strC, t); [EOL]     assertEquals(MapType.class, t2.getClass()); [EOL]     assertEquals(2, t2.containedTypeCount()); [EOL]     assertEquals(strC, t2.containedType(0)); [EOL]     assertEquals(t, t2.containedType(1)); [EOL]     assertNull(t2.containedType(2)); [EOL]     JavaType custom = tf.constructParametricType(SingleArgGeneric.class, String.class); [EOL]     assertEquals(SimpleType.class, custom.getClass()); [EOL]     assertEquals(1, custom.containedTypeCount()); [EOL]     assertEquals(strC, custom.containedType(0)); [EOL]     assertNull(custom.containedType(1)); [EOL]     assertEquals("X", custom.containedTypeName(0)); [EOL]     try { [EOL]         tf.constructParametricType(Map.class, strC); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "Need exactly 2 parameter types for Map types"); [EOL]     } [EOL]     try { [EOL]         tf.constructParametricType(SingleArgGeneric.class, strC, strC); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "expected 1 parameters, was given 2"); [EOL]     } [EOL] }
public void testParametricTypes() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t = tf.constructParametricType(ArrayList.class, String.class); [EOL]     assertEquals(CollectionType.class, t.getClass()); [EOL]     JavaType strC = tf.constructType(String.class); [EOL]     assertEquals(1, t.containedTypeCount()); [EOL]     assertEquals(strC, t.containedType(0)); [EOL]     assertNull(t.containedType(1)); [EOL]     JavaType t2 = tf.constructParametricType(Map.class, strC, t); [EOL]     assertEquals(MapType.class, t2.getClass()); [EOL]     assertEquals(2, t2.containedTypeCount()); [EOL]     assertEquals(strC, t2.containedType(0)); [EOL]     assertEquals(t, t2.containedType(1)); [EOL]     assertNull(t2.containedType(2)); [EOL]     JavaType custom = tf.constructParametricType(SingleArgGeneric.class, String.class); [EOL]     assertEquals(SimpleType.class, custom.getClass()); [EOL]     assertEquals(1, custom.containedTypeCount()); [EOL]     assertEquals(strC, custom.containedType(0)); [EOL]     assertNull(custom.containedType(1)); [EOL]     assertEquals("X", custom.containedTypeName(0)); [EOL]     try { [EOL]         tf.constructParametricType(Map.class, strC); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "Need exactly 2 parameter types for Map types"); [EOL]     } [EOL]     try { [EOL]         tf.constructParametricType(SingleArgGeneric.class, strC, strC); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "expected 1 parameters, was given 2"); [EOL]     } [EOL] }
public void testParametricTypes() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t = tf.constructParametricType(ArrayList.class, String.class); [EOL]     assertEquals(CollectionType.class, t.getClass()); [EOL]     JavaType strC = tf.constructType(String.class); [EOL]     assertEquals(1, t.containedTypeCount()); [EOL]     assertEquals(strC, t.containedType(0)); [EOL]     assertNull(t.containedType(1)); [EOL]     JavaType t2 = tf.constructParametricType(Map.class, strC, t); [EOL]     assertEquals(MapType.class, t2.getClass()); [EOL]     assertEquals(2, t2.containedTypeCount()); [EOL]     assertEquals(strC, t2.containedType(0)); [EOL]     assertEquals(t, t2.containedType(1)); [EOL]     assertNull(t2.containedType(2)); [EOL]     JavaType custom = tf.constructParametricType(SingleArgGeneric.class, String.class); [EOL]     assertEquals(SimpleType.class, custom.getClass()); [EOL]     assertEquals(1, custom.containedTypeCount()); [EOL]     assertEquals(strC, custom.containedType(0)); [EOL]     assertNull(custom.containedType(1)); [EOL]     assertEquals("X", custom.containedTypeName(0)); [EOL]     try { [EOL]         tf.constructParametricType(Map.class, strC); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "Need exactly 2 parameter types for Map types"); [EOL]     } [EOL]     try { [EOL]         tf.constructParametricType(SingleArgGeneric.class, strC, strC); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "expected 1 parameters, was given 2"); [EOL]     } [EOL] }
public void testParametricTypes() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t = tf.constructParametricType(ArrayList.class, String.class); [EOL]     assertEquals(CollectionType.class, t.getClass()); [EOL]     JavaType strC = tf.constructType(String.class); [EOL]     assertEquals(1, t.containedTypeCount()); [EOL]     assertEquals(strC, t.containedType(0)); [EOL]     assertNull(t.containedType(1)); [EOL]     JavaType t2 = tf.constructParametricType(Map.class, strC, t); [EOL]     assertEquals(MapType.class, t2.getClass()); [EOL]     assertEquals(2, t2.containedTypeCount()); [EOL]     assertEquals(strC, t2.containedType(0)); [EOL]     assertEquals(t, t2.containedType(1)); [EOL]     assertNull(t2.containedType(2)); [EOL]     JavaType custom = tf.constructParametricType(SingleArgGeneric.class, String.class); [EOL]     assertEquals(SimpleType.class, custom.getClass()); [EOL]     assertEquals(1, custom.containedTypeCount()); [EOL]     assertEquals(strC, custom.containedType(0)); [EOL]     assertNull(custom.containedType(1)); [EOL]     assertEquals("X", custom.containedTypeName(0)); [EOL]     try { [EOL]         tf.constructParametricType(Map.class, strC); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "Need exactly 2 parameter types for Map types"); [EOL]     } [EOL]     try { [EOL]         tf.constructParametricType(SingleArgGeneric.class, strC, strC); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "expected 1 parameters, was given 2"); [EOL]     } [EOL] }
public void testUnboundIssue572() throws Exception { [EOL]     GenericBogusWrapper<Integer> list = new GenericBogusWrapper<Integer>(Integer.valueOf(7)); [EOL]     String json = new ObjectMapper().writeValueAsString(list); [EOL]     assertEquals("{\"wrapped\":{\"value\":7}}", json); [EOL] }
public void testSneakySelfRefs() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = mapper.writeValueAsString(new SneakyBean2()); [EOL]     assertEquals("{\"foobar\":null}", json); [EOL] }
public void testSneakySelfRefs() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = mapper.writeValueAsString(new SneakyBean2()); [EOL]     assertEquals("{\"foobar\":null}", json); [EOL] }
public void testSneakySelfRefs() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = mapper.writeValueAsString(new SneakyBean2()); [EOL]     assertEquals("{\"foobar\":null}", json); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
public void testSuperTypeDetectionClass() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     HierarchicType sub = tf._findSuperTypeChain(MyStringIntMap.class, HashMap.class); [EOL]     assertNotNull(sub); [EOL]     assertEquals(2, _countSupers(sub)); [EOL]     assertSame(MyStringIntMap.class, sub.getRawClass()); [EOL]     HierarchicType sup = sub.getSuperType(); [EOL]     assertSame(MyStringXMap.class, sup.getRawClass()); [EOL]     HierarchicType sup2 = sup.getSuperType(); [EOL]     assertSame(HashMap.class, sup2.getRawClass()); [EOL]     assertNull(sup2.getSuperType()); [EOL] }
public void testSuperTypeDetectionClass() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     HierarchicType sub = tf._findSuperTypeChain(MyStringIntMap.class, HashMap.class); [EOL]     assertNotNull(sub); [EOL]     assertEquals(2, _countSupers(sub)); [EOL]     assertSame(MyStringIntMap.class, sub.getRawClass()); [EOL]     HierarchicType sup = sub.getSuperType(); [EOL]     assertSame(MyStringXMap.class, sup.getRawClass()); [EOL]     HierarchicType sup2 = sup.getSuperType(); [EOL]     assertSame(HashMap.class, sup2.getRawClass()); [EOL]     assertNull(sup2.getSuperType()); [EOL] }
public void testSuperTypeDetectionInterface() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     HierarchicType sub = tf._findSuperTypeChain(MyList.class, List.class); [EOL]     assertNotNull(sub); [EOL]     assertEquals(2, _countSupers(sub)); [EOL]     assertSame(MyList.class, sub.getRawClass()); [EOL]     HierarchicType sup = sub.getSuperType(); [EOL]     assertSame(IntermediateList.class, sup.getRawClass()); [EOL]     HierarchicType sup2 = sup.getSuperType(); [EOL]     assertSame(List.class, sup2.getRawClass()); [EOL]     assertNull(sup2.getSuperType()); [EOL]     sub = tf._findSuperTypeChain(MyMap.class, Map.class); [EOL]     assertNotNull(sub); [EOL]     assertEquals(2, _countSupers(sub)); [EOL]     assertSame(MyMap.class, sub.getRawClass()); [EOL]     sup = sub.getSuperType(); [EOL]     assertSame(IntermediateMap.class, sup.getRawClass()); [EOL]     sup2 = sup.getSuperType(); [EOL]     assertSame(Map.class, sup2.getRawClass()); [EOL]     assertNull(sup2.getSuperType()); [EOL] }
public void testSuperTypeDetectionInterface() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     HierarchicType sub = tf._findSuperTypeChain(MyList.class, List.class); [EOL]     assertNotNull(sub); [EOL]     assertEquals(2, _countSupers(sub)); [EOL]     assertSame(MyList.class, sub.getRawClass()); [EOL]     HierarchicType sup = sub.getSuperType(); [EOL]     assertSame(IntermediateList.class, sup.getRawClass()); [EOL]     HierarchicType sup2 = sup.getSuperType(); [EOL]     assertSame(List.class, sup2.getRawClass()); [EOL]     assertNull(sup2.getSuperType()); [EOL]     sub = tf._findSuperTypeChain(MyMap.class, Map.class); [EOL]     assertNotNull(sub); [EOL]     assertEquals(2, _countSupers(sub)); [EOL]     assertSame(MyMap.class, sub.getRawClass()); [EOL]     sup = sub.getSuperType(); [EOL]     assertSame(IntermediateMap.class, sup.getRawClass()); [EOL]     sup2 = sup.getSuperType(); [EOL]     assertSame(Map.class, sup2.getRawClass()); [EOL]     assertNull(sup2.getSuperType()); [EOL] }
public void testSuperTypeDetectionInterface() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     HierarchicType sub = tf._findSuperTypeChain(MyList.class, List.class); [EOL]     assertNotNull(sub); [EOL]     assertEquals(2, _countSupers(sub)); [EOL]     assertSame(MyList.class, sub.getRawClass()); [EOL]     HierarchicType sup = sub.getSuperType(); [EOL]     assertSame(IntermediateList.class, sup.getRawClass()); [EOL]     HierarchicType sup2 = sup.getSuperType(); [EOL]     assertSame(List.class, sup2.getRawClass()); [EOL]     assertNull(sup2.getSuperType()); [EOL]     sub = tf._findSuperTypeChain(MyMap.class, Map.class); [EOL]     assertNotNull(sub); [EOL]     assertEquals(2, _countSupers(sub)); [EOL]     assertSame(MyMap.class, sub.getRawClass()); [EOL]     sup = sub.getSuperType(); [EOL]     assertSame(IntermediateMap.class, sup.getRawClass()); [EOL]     sup2 = sup.getSuperType(); [EOL]     assertSame(Map.class, sup2.getRawClass()); [EOL]     assertNull(sup2.getSuperType()); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setHandlerInstantiator(new MyInstantiator("xyz:")); [EOL]     assertEquals(quote("xyz:456"), mapper.writeValueAsString(new MyBean("456"))); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testRootUsingExplicitConfig() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ObjectWriter writer = mapper.writer().withRootName("wrapper"); [EOL]     String json = writer.writeValueAsString(new Bean()); [EOL]     assertEquals("{\"wrapper\":{\"a\":3}}", json); [EOL]     ObjectReader reader = mapper.reader(Bean.class).withRootName("wrapper"); [EOL]     Bean bean = reader.readValue(json); [EOL]     assertNotNull(bean); [EOL]     ObjectMapper wrapping = rootMapper(); [EOL]     json = wrapping.writer().withRootName("something").writeValueAsString(new Bean()); [EOL]     assertEquals("{\"something\":{\"a\":3}}", json); [EOL]     json = wrapping.writer().withRootName("").writeValueAsString(new Bean()); [EOL]     assertEquals("{\"a\":3}", json); [EOL]     bean = wrapping.reader(Bean.class).withRootName("").readValue(json); [EOL]     assertNotNull(bean); [EOL] }
public void testRootUsingExplicitConfig() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ObjectWriter writer = mapper.writer().withRootName("wrapper"); [EOL]     String json = writer.writeValueAsString(new Bean()); [EOL]     assertEquals("{\"wrapper\":{\"a\":3}}", json); [EOL]     ObjectReader reader = mapper.reader(Bean.class).withRootName("wrapper"); [EOL]     Bean bean = reader.readValue(json); [EOL]     assertNotNull(bean); [EOL]     ObjectMapper wrapping = rootMapper(); [EOL]     json = wrapping.writer().withRootName("something").writeValueAsString(new Bean()); [EOL]     assertEquals("{\"something\":{\"a\":3}}", json); [EOL]     json = wrapping.writer().withRootName("").writeValueAsString(new Bean()); [EOL]     assertEquals("{\"a\":3}", json); [EOL]     bean = wrapping.reader(Bean.class).withRootName("").readValue(json); [EOL]     assertNotNull(bean); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
public void testCopy() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertTrue(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     m.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     ObjectMapper m2 = m.copy(); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     m2.enable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES); [EOL]     assertTrue(m2.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     m.enable(DeserializationFeature.UNWRAP_ROOT_VALUE); [EOL]     assertTrue(m.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertNotSame(m.getFactory(), m2.getFactory()); [EOL]     assertEquals(0, m.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m.getDeserializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getDeserializationConfig().mixInCount()); [EOL]     m.addMixInAnnotations(String.class, Integer.class); [EOL]     assertEquals(1, m.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getSerializationConfig().mixInCount()); [EOL]     assertEquals(1, m.getDeserializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getDeserializationConfig().mixInCount()); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testCopy() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertTrue(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     m.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     ObjectMapper m2 = m.copy(); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     m2.enable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES); [EOL]     assertTrue(m2.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     m.enable(DeserializationFeature.UNWRAP_ROOT_VALUE); [EOL]     assertTrue(m.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertNotSame(m.getFactory(), m2.getFactory()); [EOL]     assertEquals(0, m.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m.getDeserializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getDeserializationConfig().mixInCount()); [EOL]     m.addMixInAnnotations(String.class, Integer.class); [EOL]     assertEquals(1, m.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getSerializationConfig().mixInCount()); [EOL]     assertEquals(1, m.getDeserializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getDeserializationConfig().mixInCount()); [EOL] }
public void testCopy() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertTrue(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     m.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     ObjectMapper m2 = m.copy(); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     m2.enable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES); [EOL]     assertTrue(m2.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     m.enable(DeserializationFeature.UNWRAP_ROOT_VALUE); [EOL]     assertTrue(m.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertNotSame(m.getFactory(), m2.getFactory()); [EOL]     assertEquals(0, m.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m.getDeserializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getDeserializationConfig().mixInCount()); [EOL]     m.addMixInAnnotations(String.class, Integer.class); [EOL]     assertEquals(1, m.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getSerializationConfig().mixInCount()); [EOL]     assertEquals(1, m.getDeserializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getDeserializationConfig().mixInCount()); [EOL] }
public void testOverflows() { [EOL]     try { [EOL]         mapper.convertValue(new int[] { 1000 }, byte[].class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, OVERFLOW_MSG_BYTE); [EOL]     } [EOL]     try { [EOL]         mapper.convertValue(new int[] { -99999 }, short[].class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, OVERFLOW_MSG); [EOL]     } [EOL]     try { [EOL]         mapper.convertValue(new long[] { Long.MAX_VALUE }, int[].class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, OVERFLOW_MSG); [EOL]     } [EOL]     BigInteger biggie = BigInteger.valueOf(Long.MAX_VALUE); [EOL]     biggie.add(BigInteger.ONE); [EOL]     List<BigInteger> l = new ArrayList<BigInteger>(); [EOL]     l.add(biggie); [EOL]     try { [EOL]         mapper.convertValue(l, int[].class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, OVERFLOW_MSG); [EOL]     } [EOL] }
public void testOverflows() { [EOL]     try { [EOL]         mapper.convertValue(new int[] { 1000 }, byte[].class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, OVERFLOW_MSG_BYTE); [EOL]     } [EOL]     try { [EOL]         mapper.convertValue(new int[] { -99999 }, short[].class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, OVERFLOW_MSG); [EOL]     } [EOL]     try { [EOL]         mapper.convertValue(new long[] { Long.MAX_VALUE }, int[].class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, OVERFLOW_MSG); [EOL]     } [EOL]     BigInteger biggie = BigInteger.valueOf(Long.MAX_VALUE); [EOL]     biggie.add(BigInteger.ONE); [EOL]     List<BigInteger> l = new ArrayList<BigInteger>(); [EOL]     l.add(biggie); [EOL]     try { [EOL]         mapper.convertValue(l, int[].class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, OVERFLOW_MSG); [EOL]     } [EOL] }
public void testOverflows() { [EOL]     try { [EOL]         mapper.convertValue(new int[] { 1000 }, byte[].class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, OVERFLOW_MSG_BYTE); [EOL]     } [EOL]     try { [EOL]         mapper.convertValue(new int[] { -99999 }, short[].class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, OVERFLOW_MSG); [EOL]     } [EOL]     try { [EOL]         mapper.convertValue(new long[] { Long.MAX_VALUE }, int[].class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, OVERFLOW_MSG); [EOL]     } [EOL]     BigInteger biggie = BigInteger.valueOf(Long.MAX_VALUE); [EOL]     biggie.add(BigInteger.ONE); [EOL]     List<BigInteger> l = new ArrayList<BigInteger>(); [EOL]     l.add(biggie); [EOL]     try { [EOL]         mapper.convertValue(l, int[].class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, OVERFLOW_MSG); [EOL]     } [EOL] }
public void testOverflows() { [EOL]     try { [EOL]         mapper.convertValue(new int[] { 1000 }, byte[].class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, OVERFLOW_MSG_BYTE); [EOL]     } [EOL]     try { [EOL]         mapper.convertValue(new int[] { -99999 }, short[].class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, OVERFLOW_MSG); [EOL]     } [EOL]     try { [EOL]         mapper.convertValue(new long[] { Long.MAX_VALUE }, int[].class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, OVERFLOW_MSG); [EOL]     } [EOL]     BigInteger biggie = BigInteger.valueOf(Long.MAX_VALUE); [EOL]     biggie.add(BigInteger.ONE); [EOL]     List<BigInteger> l = new ArrayList<BigInteger>(); [EOL]     l.add(biggie); [EOL]     try { [EOL]         mapper.convertValue(l, int[].class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, OVERFLOW_MSG); [EOL]     } [EOL] }
public void testWithScalar118() throws Exception { [EOL]     ExternalTypeWithNonPOJO input = new ExternalTypeWithNonPOJO(new java.util.Date(123L)); [EOL]     String json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     ExternalTypeWithNonPOJO result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof java.util.Date); [EOL] }
public void testWithScalar118() throws Exception { [EOL]     ExternalTypeWithNonPOJO input = new ExternalTypeWithNonPOJO(new java.util.Date(123L)); [EOL]     String json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     ExternalTypeWithNonPOJO result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof java.util.Date); [EOL] }
public void testSimpleClass() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType baseType = tf.constructType(BaseType.class); [EOL]     assertSame(BaseType.class, baseType.getRawClass()); [EOL]     assertTrue(baseType.hasRawClass(BaseType.class)); [EOL]     assertFalse(baseType.isArrayType()); [EOL]     assertFalse(baseType.isContainerType()); [EOL]     assertFalse(baseType.isEnumType()); [EOL]     assertFalse(baseType.isInterface()); [EOL]     assertFalse(baseType.isPrimitive()); [EOL]     assertNull(baseType.getContentType()); [EOL]     assertNull(baseType.getValueHandler()); [EOL]     assertSame(baseType, baseType.narrowBy(BaseType.class)); [EOL]     assertSame(baseType, baseType.widenBy(BaseType.class)); [EOL]     try { [EOL]         baseType.narrowBy(SubType.class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "should never be called"); [EOL]     } [EOL] }
public void testSimpleClass() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType baseType = tf.constructType(BaseType.class); [EOL]     assertSame(BaseType.class, baseType.getRawClass()); [EOL]     assertTrue(baseType.hasRawClass(BaseType.class)); [EOL]     assertFalse(baseType.isArrayType()); [EOL]     assertFalse(baseType.isContainerType()); [EOL]     assertFalse(baseType.isEnumType()); [EOL]     assertFalse(baseType.isInterface()); [EOL]     assertFalse(baseType.isPrimitive()); [EOL]     assertNull(baseType.getContentType()); [EOL]     assertNull(baseType.getValueHandler()); [EOL]     assertSame(baseType, baseType.narrowBy(BaseType.class)); [EOL]     assertSame(baseType, baseType.widenBy(BaseType.class)); [EOL]     try { [EOL]         baseType.narrowBy(SubType.class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "should never be called"); [EOL]     } [EOL] }
public void testSimpleClass() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType baseType = tf.constructType(BaseType.class); [EOL]     assertSame(BaseType.class, baseType.getRawClass()); [EOL]     assertTrue(baseType.hasRawClass(BaseType.class)); [EOL]     assertFalse(baseType.isArrayType()); [EOL]     assertFalse(baseType.isContainerType()); [EOL]     assertFalse(baseType.isEnumType()); [EOL]     assertFalse(baseType.isInterface()); [EOL]     assertFalse(baseType.isPrimitive()); [EOL]     assertNull(baseType.getContentType()); [EOL]     assertNull(baseType.getValueHandler()); [EOL]     assertSame(baseType, baseType.narrowBy(BaseType.class)); [EOL]     assertSame(baseType, baseType.widenBy(BaseType.class)); [EOL]     try { [EOL]         baseType.narrowBy(SubType.class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "should never be called"); [EOL]     } [EOL] }
public void testSimpleClass() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType baseType = tf.constructType(BaseType.class); [EOL]     assertSame(BaseType.class, baseType.getRawClass()); [EOL]     assertTrue(baseType.hasRawClass(BaseType.class)); [EOL]     assertFalse(baseType.isArrayType()); [EOL]     assertFalse(baseType.isContainerType()); [EOL]     assertFalse(baseType.isEnumType()); [EOL]     assertFalse(baseType.isInterface()); [EOL]     assertFalse(baseType.isPrimitive()); [EOL]     assertNull(baseType.getContentType()); [EOL]     assertNull(baseType.getValueHandler()); [EOL]     assertSame(baseType, baseType.narrowBy(BaseType.class)); [EOL]     assertSame(baseType, baseType.widenBy(BaseType.class)); [EOL]     try { [EOL]         baseType.narrowBy(SubType.class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "should never be called"); [EOL]     } [EOL] }
public void testSimpleClass() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType baseType = tf.constructType(BaseType.class); [EOL]     assertSame(BaseType.class, baseType.getRawClass()); [EOL]     assertTrue(baseType.hasRawClass(BaseType.class)); [EOL]     assertFalse(baseType.isArrayType()); [EOL]     assertFalse(baseType.isContainerType()); [EOL]     assertFalse(baseType.isEnumType()); [EOL]     assertFalse(baseType.isInterface()); [EOL]     assertFalse(baseType.isPrimitive()); [EOL]     assertNull(baseType.getContentType()); [EOL]     assertNull(baseType.getValueHandler()); [EOL]     assertSame(baseType, baseType.narrowBy(BaseType.class)); [EOL]     assertSame(baseType, baseType.widenBy(BaseType.class)); [EOL]     try { [EOL]         baseType.narrowBy(SubType.class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "should never be called"); [EOL]     } [EOL] }
public void testSimpleClass() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType baseType = tf.constructType(BaseType.class); [EOL]     assertSame(BaseType.class, baseType.getRawClass()); [EOL]     assertTrue(baseType.hasRawClass(BaseType.class)); [EOL]     assertFalse(baseType.isArrayType()); [EOL]     assertFalse(baseType.isContainerType()); [EOL]     assertFalse(baseType.isEnumType()); [EOL]     assertFalse(baseType.isInterface()); [EOL]     assertFalse(baseType.isPrimitive()); [EOL]     assertNull(baseType.getContentType()); [EOL]     assertNull(baseType.getValueHandler()); [EOL]     assertSame(baseType, baseType.narrowBy(BaseType.class)); [EOL]     assertSame(baseType, baseType.widenBy(BaseType.class)); [EOL]     try { [EOL]         baseType.narrowBy(SubType.class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "should never be called"); [EOL]     } [EOL] }
public void testSimpleClass() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType baseType = tf.constructType(BaseType.class); [EOL]     assertSame(BaseType.class, baseType.getRawClass()); [EOL]     assertTrue(baseType.hasRawClass(BaseType.class)); [EOL]     assertFalse(baseType.isArrayType()); [EOL]     assertFalse(baseType.isContainerType()); [EOL]     assertFalse(baseType.isEnumType()); [EOL]     assertFalse(baseType.isInterface()); [EOL]     assertFalse(baseType.isPrimitive()); [EOL]     assertNull(baseType.getContentType()); [EOL]     assertNull(baseType.getValueHandler()); [EOL]     assertSame(baseType, baseType.narrowBy(BaseType.class)); [EOL]     assertSame(baseType, baseType.widenBy(BaseType.class)); [EOL]     try { [EOL]         baseType.narrowBy(SubType.class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "should never be called"); [EOL]     } [EOL] }
public void testSimpleClass() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType baseType = tf.constructType(BaseType.class); [EOL]     assertSame(BaseType.class, baseType.getRawClass()); [EOL]     assertTrue(baseType.hasRawClass(BaseType.class)); [EOL]     assertFalse(baseType.isArrayType()); [EOL]     assertFalse(baseType.isContainerType()); [EOL]     assertFalse(baseType.isEnumType()); [EOL]     assertFalse(baseType.isInterface()); [EOL]     assertFalse(baseType.isPrimitive()); [EOL]     assertNull(baseType.getContentType()); [EOL]     assertNull(baseType.getValueHandler()); [EOL]     assertSame(baseType, baseType.narrowBy(BaseType.class)); [EOL]     assertSame(baseType, baseType.widenBy(BaseType.class)); [EOL]     try { [EOL]         baseType.narrowBy(SubType.class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "should never be called"); [EOL]     } [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testSimpleValueDefinition() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(m, new WrapperClassForAs()); [EOL]     assertEquals(1, result.size()); [EOL]     Object ob = result.get("value"); [EOL]     result = (Map<String, Object>) ob; [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals(Integer.valueOf(3), result.get("x")); [EOL] }
public void testSimpleClass() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType baseType = tf.constructType(BaseType.class); [EOL]     assertSame(BaseType.class, baseType.getRawClass()); [EOL]     assertTrue(baseType.hasRawClass(BaseType.class)); [EOL]     assertFalse(baseType.isArrayType()); [EOL]     assertFalse(baseType.isContainerType()); [EOL]     assertFalse(baseType.isEnumType()); [EOL]     assertFalse(baseType.isInterface()); [EOL]     assertFalse(baseType.isPrimitive()); [EOL]     assertNull(baseType.getContentType()); [EOL]     assertNull(baseType.getValueHandler()); [EOL]     assertSame(baseType, baseType.narrowBy(BaseType.class)); [EOL]     assertSame(baseType, baseType.widenBy(BaseType.class)); [EOL]     try { [EOL]         baseType.narrowBy(SubType.class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "should never be called"); [EOL]     } [EOL] }
public void testSimpleClass() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType baseType = tf.constructType(BaseType.class); [EOL]     assertSame(BaseType.class, baseType.getRawClass()); [EOL]     assertTrue(baseType.hasRawClass(BaseType.class)); [EOL]     assertFalse(baseType.isArrayType()); [EOL]     assertFalse(baseType.isContainerType()); [EOL]     assertFalse(baseType.isEnumType()); [EOL]     assertFalse(baseType.isInterface()); [EOL]     assertFalse(baseType.isPrimitive()); [EOL]     assertNull(baseType.getContentType()); [EOL]     assertNull(baseType.getValueHandler()); [EOL]     assertSame(baseType, baseType.narrowBy(BaseType.class)); [EOL]     assertSame(baseType, baseType.widenBy(BaseType.class)); [EOL]     try { [EOL]         baseType.narrowBy(SubType.class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "should never be called"); [EOL]     } [EOL] }
public void testSimpleClass() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType baseType = tf.constructType(BaseType.class); [EOL]     assertSame(BaseType.class, baseType.getRawClass()); [EOL]     assertTrue(baseType.hasRawClass(BaseType.class)); [EOL]     assertFalse(baseType.isArrayType()); [EOL]     assertFalse(baseType.isContainerType()); [EOL]     assertFalse(baseType.isEnumType()); [EOL]     assertFalse(baseType.isInterface()); [EOL]     assertFalse(baseType.isPrimitive()); [EOL]     assertNull(baseType.getContentType()); [EOL]     assertNull(baseType.getValueHandler()); [EOL]     assertSame(baseType, baseType.narrowBy(BaseType.class)); [EOL]     assertSame(baseType, baseType.widenBy(BaseType.class)); [EOL]     try { [EOL]         baseType.narrowBy(SubType.class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "should never be called"); [EOL]     } [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testSimpleClass() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType baseType = tf.constructType(BaseType.class); [EOL]     assertSame(BaseType.class, baseType.getRawClass()); [EOL]     assertTrue(baseType.hasRawClass(BaseType.class)); [EOL]     assertFalse(baseType.isArrayType()); [EOL]     assertFalse(baseType.isContainerType()); [EOL]     assertFalse(baseType.isEnumType()); [EOL]     assertFalse(baseType.isInterface()); [EOL]     assertFalse(baseType.isPrimitive()); [EOL]     assertNull(baseType.getContentType()); [EOL]     assertNull(baseType.getValueHandler()); [EOL]     assertSame(baseType, baseType.narrowBy(BaseType.class)); [EOL]     assertSame(baseType, baseType.widenBy(BaseType.class)); [EOL]     try { [EOL]         baseType.narrowBy(SubType.class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "should never be called"); [EOL]     } [EOL] }
public void testSimpleClass() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType baseType = tf.constructType(BaseType.class); [EOL]     assertSame(BaseType.class, baseType.getRawClass()); [EOL]     assertTrue(baseType.hasRawClass(BaseType.class)); [EOL]     assertFalse(baseType.isArrayType()); [EOL]     assertFalse(baseType.isContainerType()); [EOL]     assertFalse(baseType.isEnumType()); [EOL]     assertFalse(baseType.isInterface()); [EOL]     assertFalse(baseType.isPrimitive()); [EOL]     assertNull(baseType.getContentType()); [EOL]     assertNull(baseType.getValueHandler()); [EOL]     assertSame(baseType, baseType.narrowBy(BaseType.class)); [EOL]     assertSame(baseType, baseType.widenBy(BaseType.class)); [EOL]     try { [EOL]         baseType.narrowBy(SubType.class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "should never be called"); [EOL]     } [EOL] }
public void testSimpleClass() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType baseType = tf.constructType(BaseType.class); [EOL]     assertSame(BaseType.class, baseType.getRawClass()); [EOL]     assertTrue(baseType.hasRawClass(BaseType.class)); [EOL]     assertFalse(baseType.isArrayType()); [EOL]     assertFalse(baseType.isContainerType()); [EOL]     assertFalse(baseType.isEnumType()); [EOL]     assertFalse(baseType.isInterface()); [EOL]     assertFalse(baseType.isPrimitive()); [EOL]     assertNull(baseType.getContentType()); [EOL]     assertNull(baseType.getValueHandler()); [EOL]     assertSame(baseType, baseType.narrowBy(BaseType.class)); [EOL]     assertSame(baseType, baseType.widenBy(BaseType.class)); [EOL]     try { [EOL]         baseType.narrowBy(SubType.class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "should never be called"); [EOL]     } [EOL] }
public void testSimpleClass() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType baseType = tf.constructType(BaseType.class); [EOL]     assertSame(BaseType.class, baseType.getRawClass()); [EOL]     assertTrue(baseType.hasRawClass(BaseType.class)); [EOL]     assertFalse(baseType.isArrayType()); [EOL]     assertFalse(baseType.isContainerType()); [EOL]     assertFalse(baseType.isEnumType()); [EOL]     assertFalse(baseType.isInterface()); [EOL]     assertFalse(baseType.isPrimitive()); [EOL]     assertNull(baseType.getContentType()); [EOL]     assertNull(baseType.getValueHandler()); [EOL]     assertSame(baseType, baseType.narrowBy(BaseType.class)); [EOL]     assertSame(baseType, baseType.widenBy(BaseType.class)); [EOL]     try { [EOL]         baseType.narrowBy(SubType.class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "should never be called"); [EOL]     } [EOL] }
public void testSimpleClass() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType baseType = tf.constructType(BaseType.class); [EOL]     assertSame(BaseType.class, baseType.getRawClass()); [EOL]     assertTrue(baseType.hasRawClass(BaseType.class)); [EOL]     assertFalse(baseType.isArrayType()); [EOL]     assertFalse(baseType.isContainerType()); [EOL]     assertFalse(baseType.isEnumType()); [EOL]     assertFalse(baseType.isInterface()); [EOL]     assertFalse(baseType.isPrimitive()); [EOL]     assertNull(baseType.getContentType()); [EOL]     assertNull(baseType.getValueHandler()); [EOL]     assertSame(baseType, baseType.narrowBy(BaseType.class)); [EOL]     assertSame(baseType, baseType.widenBy(BaseType.class)); [EOL]     try { [EOL]         baseType.narrowBy(SubType.class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "should never be called"); [EOL]     } [EOL] }
public void testSimpleClass() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType baseType = tf.constructType(BaseType.class); [EOL]     assertSame(BaseType.class, baseType.getRawClass()); [EOL]     assertTrue(baseType.hasRawClass(BaseType.class)); [EOL]     assertFalse(baseType.isArrayType()); [EOL]     assertFalse(baseType.isContainerType()); [EOL]     assertFalse(baseType.isEnumType()); [EOL]     assertFalse(baseType.isInterface()); [EOL]     assertFalse(baseType.isPrimitive()); [EOL]     assertNull(baseType.getContentType()); [EOL]     assertNull(baseType.getValueHandler()); [EOL]     assertSame(baseType, baseType.narrowBy(BaseType.class)); [EOL]     assertSame(baseType, baseType.widenBy(BaseType.class)); [EOL]     try { [EOL]         baseType.narrowBy(SubType.class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "should never be called"); [EOL]     } [EOL] }
public void testSimpleClass() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType baseType = tf.constructType(BaseType.class); [EOL]     assertSame(BaseType.class, baseType.getRawClass()); [EOL]     assertTrue(baseType.hasRawClass(BaseType.class)); [EOL]     assertFalse(baseType.isArrayType()); [EOL]     assertFalse(baseType.isContainerType()); [EOL]     assertFalse(baseType.isEnumType()); [EOL]     assertFalse(baseType.isInterface()); [EOL]     assertFalse(baseType.isPrimitive()); [EOL]     assertNull(baseType.getContentType()); [EOL]     assertNull(baseType.getValueHandler()); [EOL]     assertSame(baseType, baseType.narrowBy(BaseType.class)); [EOL]     assertSame(baseType, baseType.widenBy(BaseType.class)); [EOL]     try { [EOL]         baseType.narrowBy(SubType.class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "should never be called"); [EOL]     } [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testSimpleClass() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType baseType = tf.constructType(BaseType.class); [EOL]     assertSame(BaseType.class, baseType.getRawClass()); [EOL]     assertTrue(baseType.hasRawClass(BaseType.class)); [EOL]     assertFalse(baseType.isArrayType()); [EOL]     assertFalse(baseType.isContainerType()); [EOL]     assertFalse(baseType.isEnumType()); [EOL]     assertFalse(baseType.isInterface()); [EOL]     assertFalse(baseType.isPrimitive()); [EOL]     assertNull(baseType.getContentType()); [EOL]     assertNull(baseType.getValueHandler()); [EOL]     assertSame(baseType, baseType.narrowBy(BaseType.class)); [EOL]     assertSame(baseType, baseType.widenBy(BaseType.class)); [EOL]     try { [EOL]         baseType.narrowBy(SubType.class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "should never be called"); [EOL]     } [EOL] }
public void testSimpleClass() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType baseType = tf.constructType(BaseType.class); [EOL]     assertSame(BaseType.class, baseType.getRawClass()); [EOL]     assertTrue(baseType.hasRawClass(BaseType.class)); [EOL]     assertFalse(baseType.isArrayType()); [EOL]     assertFalse(baseType.isContainerType()); [EOL]     assertFalse(baseType.isEnumType()); [EOL]     assertFalse(baseType.isInterface()); [EOL]     assertFalse(baseType.isPrimitive()); [EOL]     assertNull(baseType.getContentType()); [EOL]     assertNull(baseType.getValueHandler()); [EOL]     assertSame(baseType, baseType.narrowBy(BaseType.class)); [EOL]     assertSame(baseType, baseType.widenBy(BaseType.class)); [EOL]     try { [EOL]         baseType.narrowBy(SubType.class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "should never be called"); [EOL]     } [EOL] }
public void testAsBoolean() throws Exception { [EOL]     assertEquals(false, BooleanNode.FALSE.asBoolean()); [EOL]     assertEquals(true, BooleanNode.TRUE.asBoolean()); [EOL]     assertEquals(false, IntNode.valueOf(0).asBoolean()); [EOL]     assertEquals(true, IntNode.valueOf(1).asBoolean()); [EOL]     assertEquals(false, LongNode.valueOf(0).asBoolean()); [EOL]     assertEquals(true, LongNode.valueOf(-34L).asBoolean()); [EOL]     assertEquals(true, new TextNode("true").asBoolean()); [EOL]     assertEquals(false, new TextNode("false").asBoolean()); [EOL]     assertEquals(false, new TextNode("barf").asBoolean()); [EOL]     assertEquals(true, new TextNode("barf").asBoolean(true)); [EOL]     assertEquals(true, new POJONode(Boolean.TRUE).asBoolean()); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithGetterAsSetter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new CStyleStrategy()); [EOL]     SetterlessWithValue input = new SetterlessWithValue().add(3); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"value_list\":[{\"int_value\":3}]}", json); [EOL]     SetterlessWithValue result = mapper.readValue(json, SetterlessWithValue.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(1, result.values.size()); [EOL]     assertEquals(3, result.values.get(0).intValue); [EOL] }
public void testWithGetterAsSetter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new CStyleStrategy()); [EOL]     SetterlessWithValue input = new SetterlessWithValue().add(3); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"value_list\":[{\"int_value\":3}]}", json); [EOL]     SetterlessWithValue result = mapper.readValue(json, SetterlessWithValue.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(1, result.values.size()); [EOL]     assertEquals(3, result.values.get(0).intValue); [EOL] }
public void testWithGetterAsSetter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new CStyleStrategy()); [EOL]     SetterlessWithValue input = new SetterlessWithValue().add(3); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"value_list\":[{\"int_value\":3}]}", json); [EOL]     SetterlessWithValue result = mapper.readValue(json, SetterlessWithValue.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(1, result.values.size()); [EOL]     assertEquals(3, result.values.get(0).intValue); [EOL] }
public void testWithGetterAsSetter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new CStyleStrategy()); [EOL]     SetterlessWithValue input = new SetterlessWithValue().add(3); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"value_list\":[{\"int_value\":3}]}", json); [EOL]     SetterlessWithValue result = mapper.readValue(json, SetterlessWithValue.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(1, result.values.size()); [EOL]     assertEquals(3, result.values.get(0).intValue); [EOL] }
public void testIssue811() throws Exception { [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.disable(MapperFeature.AUTO_DETECT_CREATORS); [EOL]     om.disable(MapperFeature.AUTO_DETECT_GETTERS); [EOL]     om.disable(MapperFeature.AUTO_DETECT_IS_GETTERS); [EOL]     om.setVisibility(PropertyAccessor.FIELD, Visibility.ANY); [EOL]     om.enable(SerializationFeature.WRITE_ENUMS_USING_INDEX); [EOL]     om.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     om.enableDefaultTypingAsProperty(DefaultTyping.NON_FINAL, "@class"); [EOL]     Process p = new Process(); [EOL]     Scope s = new Scope(p, null); [EOL]     FaultHandler fh = new FaultHandler(p); [EOL]     Catch c = new Catch(p, s); [EOL]     fh.catchBlocks.add(c); [EOL]     s.faultHandlers.add(fh); [EOL]     String json = om.writeValueAsString(p); [EOL]     Process restored = om.readValue(json, Process.class); [EOL]     assertNotNull(restored); [EOL]     assertEquals(0, p.id); [EOL]     assertEquals(3, p.children.size()); [EOL]     assertSame(p, p.children.get(0).owner); [EOL]     assertSame(p, p.children.get(1).owner); [EOL]     assertSame(p, p.children.get(2).owner); [EOL] }
public void testIssue811() throws Exception { [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.disable(MapperFeature.AUTO_DETECT_CREATORS); [EOL]     om.disable(MapperFeature.AUTO_DETECT_GETTERS); [EOL]     om.disable(MapperFeature.AUTO_DETECT_IS_GETTERS); [EOL]     om.setVisibility(PropertyAccessor.FIELD, Visibility.ANY); [EOL]     om.enable(SerializationFeature.WRITE_ENUMS_USING_INDEX); [EOL]     om.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     om.enableDefaultTypingAsProperty(DefaultTyping.NON_FINAL, "@class"); [EOL]     Process p = new Process(); [EOL]     Scope s = new Scope(p, null); [EOL]     FaultHandler fh = new FaultHandler(p); [EOL]     Catch c = new Catch(p, s); [EOL]     fh.catchBlocks.add(c); [EOL]     s.faultHandlers.add(fh); [EOL]     String json = om.writeValueAsString(p); [EOL]     Process restored = om.readValue(json, Process.class); [EOL]     assertNotNull(restored); [EOL]     assertEquals(0, p.id); [EOL]     assertEquals(3, p.children.size()); [EOL]     assertSame(p, p.children.get(0).owner); [EOL]     assertSame(p, p.children.get(1).owner); [EOL]     assertSame(p, p.children.get(2).owner); [EOL] }
public void testIssue811() throws Exception { [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.disable(MapperFeature.AUTO_DETECT_CREATORS); [EOL]     om.disable(MapperFeature.AUTO_DETECT_GETTERS); [EOL]     om.disable(MapperFeature.AUTO_DETECT_IS_GETTERS); [EOL]     om.setVisibility(PropertyAccessor.FIELD, Visibility.ANY); [EOL]     om.enable(SerializationFeature.WRITE_ENUMS_USING_INDEX); [EOL]     om.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     om.enableDefaultTypingAsProperty(DefaultTyping.NON_FINAL, "@class"); [EOL]     Process p = new Process(); [EOL]     Scope s = new Scope(p, null); [EOL]     FaultHandler fh = new FaultHandler(p); [EOL]     Catch c = new Catch(p, s); [EOL]     fh.catchBlocks.add(c); [EOL]     s.faultHandlers.add(fh); [EOL]     String json = om.writeValueAsString(p); [EOL]     Process restored = om.readValue(json, Process.class); [EOL]     assertNotNull(restored); [EOL]     assertEquals(0, p.id); [EOL]     assertEquals(3, p.children.size()); [EOL]     assertSame(p, p.children.get(0).owner); [EOL]     assertSame(p, p.children.get(1).owner); [EOL]     assertSame(p, p.children.get(2).owner); [EOL] }
public void testFeature432() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTypingAsProperty(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE, "*CLASS*"); [EOL]     String json = mapper.writeValueAsString(new BeanHolder(new StringBean("punny"))); [EOL]     assertEquals("{\"bean\":{\"*CLASS*\":\"com.fasterxml.jackson.databind.jsontype.TestDefaultForObject$StringBean\",\"name\":\"punny\"}}", json); [EOL] }
public void testFeature432() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTypingAsProperty(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE, "*CLASS*"); [EOL]     String json = mapper.writeValueAsString(new BeanHolder(new StringBean("punny"))); [EOL]     assertEquals("{\"bean\":{\"*CLASS*\":\"com.fasterxml.jackson.databind.jsontype.TestDefaultForObject$StringBean\",\"name\":\"punny\"}}", json); [EOL] }
public void testFeature432() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTypingAsProperty(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE, "*CLASS*"); [EOL]     String json = mapper.writeValueAsString(new BeanHolder(new StringBean("punny"))); [EOL]     assertEquals("{\"bean\":{\"*CLASS*\":\"com.fasterxml.jackson.databind.jsontype.TestDefaultForObject$StringBean\",\"name\":\"punny\"}}", json); [EOL] }
public void testFeature432() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTypingAsProperty(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE, "*CLASS*"); [EOL]     String json = mapper.writeValueAsString(new BeanHolder(new StringBean("punny"))); [EOL]     assertEquals("{\"bean\":{\"*CLASS*\":\"com.fasterxml.jackson.databind.jsontype.TestDefaultForObject$StringBean\",\"name\":\"punny\"}}", json); [EOL] }
public void testFeature432() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTypingAsProperty(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE, "*CLASS*"); [EOL]     String json = mapper.writeValueAsString(new BeanHolder(new StringBean("punny"))); [EOL]     assertEquals("{\"bean\":{\"*CLASS*\":\"com.fasterxml.jackson.databind.jsontype.TestDefaultForObject$StringBean\",\"name\":\"punny\"}}", json); [EOL] }
public void testFeature432() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTypingAsProperty(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE, "*CLASS*"); [EOL]     String json = mapper.writeValueAsString(new BeanHolder(new StringBean("punny"))); [EOL]     assertEquals("{\"bean\":{\"*CLASS*\":\"com.fasterxml.jackson.databind.jsontype.TestDefaultForObject$StringBean\",\"name\":\"punny\"}}", json); [EOL] }
public void testFeature432() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTypingAsProperty(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE, "*CLASS*"); [EOL]     String json = mapper.writeValueAsString(new BeanHolder(new StringBean("punny"))); [EOL]     assertEquals("{\"bean\":{\"*CLASS*\":\"com.fasterxml.jackson.databind.jsontype.TestDefaultForObject$StringBean\",\"name\":\"punny\"}}", json); [EOL] }
public void testFeature432() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTypingAsProperty(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE, "*CLASS*"); [EOL]     String json = mapper.writeValueAsString(new BeanHolder(new StringBean("punny"))); [EOL]     assertEquals("{\"bean\":{\"*CLASS*\":\"com.fasterxml.jackson.databind.jsontype.TestDefaultForObject$StringBean\",\"name\":\"punny\"}}", json); [EOL] }
public void testCopy() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertTrue(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     m.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     ObjectMapper m2 = m.copy(); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     m2.enable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES); [EOL]     assertTrue(m2.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     m.enable(DeserializationFeature.UNWRAP_ROOT_VALUE); [EOL]     assertTrue(m.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertNotSame(m.getFactory(), m2.getFactory()); [EOL]     assertEquals(0, m.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m.getDeserializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getDeserializationConfig().mixInCount()); [EOL]     m.addMixInAnnotations(String.class, Integer.class); [EOL]     assertEquals(1, m.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getSerializationConfig().mixInCount()); [EOL]     assertEquals(1, m.getDeserializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getDeserializationConfig().mixInCount()); [EOL] }
public void testCopy() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertTrue(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     m.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     ObjectMapper m2 = m.copy(); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     m2.enable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES); [EOL]     assertTrue(m2.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     m.enable(DeserializationFeature.UNWRAP_ROOT_VALUE); [EOL]     assertTrue(m.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertNotSame(m.getFactory(), m2.getFactory()); [EOL]     assertEquals(0, m.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m.getDeserializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getDeserializationConfig().mixInCount()); [EOL]     m.addMixInAnnotations(String.class, Integer.class); [EOL]     assertEquals(1, m.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getSerializationConfig().mixInCount()); [EOL]     assertEquals(1, m.getDeserializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getDeserializationConfig().mixInCount()); [EOL] }
public void testCopy() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertTrue(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     m.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     ObjectMapper m2 = m.copy(); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     m2.enable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES); [EOL]     assertTrue(m2.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     m.enable(DeserializationFeature.UNWRAP_ROOT_VALUE); [EOL]     assertTrue(m.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertNotSame(m.getFactory(), m2.getFactory()); [EOL]     assertEquals(0, m.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m.getDeserializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getDeserializationConfig().mixInCount()); [EOL]     m.addMixInAnnotations(String.class, Integer.class); [EOL]     assertEquals(1, m.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getSerializationConfig().mixInCount()); [EOL]     assertEquals(1, m.getDeserializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getDeserializationConfig().mixInCount()); [EOL] }
public void testCopy() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertTrue(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     m.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     ObjectMapper m2 = m.copy(); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     m2.enable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES); [EOL]     assertTrue(m2.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     m.enable(DeserializationFeature.UNWRAP_ROOT_VALUE); [EOL]     assertTrue(m.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertNotSame(m.getFactory(), m2.getFactory()); [EOL]     assertEquals(0, m.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m.getDeserializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getDeserializationConfig().mixInCount()); [EOL]     m.addMixInAnnotations(String.class, Integer.class); [EOL]     assertEquals(1, m.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getSerializationConfig().mixInCount()); [EOL]     assertEquals(1, m.getDeserializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getDeserializationConfig().mixInCount()); [EOL] }
public void testCopy() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertTrue(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     m.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     ObjectMapper m2 = m.copy(); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     m2.enable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES); [EOL]     assertTrue(m2.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     m.enable(DeserializationFeature.UNWRAP_ROOT_VALUE); [EOL]     assertTrue(m.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertNotSame(m.getFactory(), m2.getFactory()); [EOL]     assertEquals(0, m.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m.getDeserializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getDeserializationConfig().mixInCount()); [EOL]     m.addMixInAnnotations(String.class, Integer.class); [EOL]     assertEquals(1, m.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getSerializationConfig().mixInCount()); [EOL]     assertEquals(1, m.getDeserializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getDeserializationConfig().mixInCount()); [EOL] }
public void testCopy() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertTrue(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     m.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     ObjectMapper m2 = m.copy(); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     m2.enable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES); [EOL]     assertTrue(m2.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     m.enable(DeserializationFeature.UNWRAP_ROOT_VALUE); [EOL]     assertTrue(m.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertNotSame(m.getFactory(), m2.getFactory()); [EOL]     assertEquals(0, m.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m.getDeserializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getDeserializationConfig().mixInCount()); [EOL]     m.addMixInAnnotations(String.class, Integer.class); [EOL]     assertEquals(1, m.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getSerializationConfig().mixInCount()); [EOL]     assertEquals(1, m.getDeserializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getDeserializationConfig().mixInCount()); [EOL] }
public void testCopy() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertTrue(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     m.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     ObjectMapper m2 = m.copy(); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     m2.enable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES); [EOL]     assertTrue(m2.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     m.enable(DeserializationFeature.UNWRAP_ROOT_VALUE); [EOL]     assertTrue(m.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertNotSame(m.getFactory(), m2.getFactory()); [EOL]     assertEquals(0, m.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m.getDeserializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getDeserializationConfig().mixInCount()); [EOL]     m.addMixInAnnotations(String.class, Integer.class); [EOL]     assertEquals(1, m.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getSerializationConfig().mixInCount()); [EOL]     assertEquals(1, m.getDeserializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getDeserializationConfig().mixInCount()); [EOL] }
public void testCopy() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertTrue(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     m.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     ObjectMapper m2 = m.copy(); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     m2.enable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES); [EOL]     assertTrue(m2.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     m.enable(DeserializationFeature.UNWRAP_ROOT_VALUE); [EOL]     assertTrue(m.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertNotSame(m.getFactory(), m2.getFactory()); [EOL]     assertEquals(0, m.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m.getDeserializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getDeserializationConfig().mixInCount()); [EOL]     m.addMixInAnnotations(String.class, Integer.class); [EOL]     assertEquals(1, m.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getSerializationConfig().mixInCount()); [EOL]     assertEquals(1, m.getDeserializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getDeserializationConfig().mixInCount()); [EOL] }
public void testCopy() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertTrue(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     m.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     ObjectMapper m2 = m.copy(); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     m2.enable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES); [EOL]     assertTrue(m2.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     m.enable(DeserializationFeature.UNWRAP_ROOT_VALUE); [EOL]     assertTrue(m.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertNotSame(m.getFactory(), m2.getFactory()); [EOL]     assertEquals(0, m.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m.getDeserializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getDeserializationConfig().mixInCount()); [EOL]     m.addMixInAnnotations(String.class, Integer.class); [EOL]     assertEquals(1, m.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getSerializationConfig().mixInCount()); [EOL]     assertEquals(1, m.getDeserializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getDeserializationConfig().mixInCount()); [EOL] }
public void testCopy() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertTrue(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     m.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     ObjectMapper m2 = m.copy(); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     m2.enable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES); [EOL]     assertTrue(m2.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     m.enable(DeserializationFeature.UNWRAP_ROOT_VALUE); [EOL]     assertTrue(m.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertNotSame(m.getFactory(), m2.getFactory()); [EOL]     assertEquals(0, m.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m.getDeserializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getDeserializationConfig().mixInCount()); [EOL]     m.addMixInAnnotations(String.class, Integer.class); [EOL]     assertEquals(1, m.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getSerializationConfig().mixInCount()); [EOL]     assertEquals(1, m.getDeserializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getDeserializationConfig().mixInCount()); [EOL] }
public void testSimpleKeyDeser() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addKeyDeserializer(String.class, new ContextualDeser("???")); [EOL]     mapper.registerModule(module); [EOL]     MapBean result = mapper.readValue("{\"map\":{\"a\":3}}", MapBean.class); [EOL]     Map<String, Integer> map = result.map; [EOL]     assertNotNull(map); [EOL]     assertEquals(1, map.size()); [EOL]     Map.Entry<String, Integer> entry = map.entrySet().iterator().next(); [EOL]     assertEquals(Integer.valueOf(3), entry.getValue()); [EOL]     assertEquals("map:a", entry.getKey()); [EOL] }
public void testSimpleKeyDeser() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addKeyDeserializer(String.class, new ContextualDeser("???")); [EOL]     mapper.registerModule(module); [EOL]     MapBean result = mapper.readValue("{\"map\":{\"a\":3}}", MapBean.class); [EOL]     Map<String, Integer> map = result.map; [EOL]     assertNotNull(map); [EOL]     assertEquals(1, map.size()); [EOL]     Map.Entry<String, Integer> entry = map.entrySet().iterator().next(); [EOL]     assertEquals(Integer.valueOf(3), entry.getValue()); [EOL]     assertEquals("map:a", entry.getKey()); [EOL] }
public void testSimpleKeyDeser() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addKeyDeserializer(String.class, new ContextualDeser("???")); [EOL]     mapper.registerModule(module); [EOL]     MapBean result = mapper.readValue("{\"map\":{\"a\":3}}", MapBean.class); [EOL]     Map<String, Integer> map = result.map; [EOL]     assertNotNull(map); [EOL]     assertEquals(1, map.size()); [EOL]     Map.Entry<String, Integer> entry = map.entrySet().iterator().next(); [EOL]     assertEquals(Integer.valueOf(3), entry.getValue()); [EOL]     assertEquals("map:a", entry.getKey()); [EOL] }
public void testJackson430() throws Exception { [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.setSerializerFactory(new CustomJsonSerializerFactory()); [EOL]     MyClass mc = new MyClass(); [EOL]     mc.params.add(new MyParam<Integer>(1)); [EOL]     String str = om.writeValueAsString(mc); [EOL]     MyClass mc2 = om.readValue(str, MyClass.class); [EOL]     assertNotNull(mc2); [EOL]     assertNotNull(mc2.params); [EOL]     assertEquals(1, mc2.params.size()); [EOL] }
public void testJackson430() throws Exception { [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.setSerializerFactory(new CustomJsonSerializerFactory()); [EOL]     MyClass mc = new MyClass(); [EOL]     mc.params.add(new MyParam<Integer>(1)); [EOL]     String str = om.writeValueAsString(mc); [EOL]     MyClass mc2 = om.readValue(str, MyClass.class); [EOL]     assertNotNull(mc2); [EOL]     assertNotNull(mc2.params); [EOL]     assertEquals(1, mc2.params.size()); [EOL] }
public void testCopy() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertTrue(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     m.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     ObjectMapper m2 = m.copy(); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     m2.enable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES); [EOL]     assertTrue(m2.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     m.enable(DeserializationFeature.UNWRAP_ROOT_VALUE); [EOL]     assertTrue(m.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertNotSame(m.getFactory(), m2.getFactory()); [EOL]     assertEquals(0, m.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m.getDeserializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getDeserializationConfig().mixInCount()); [EOL]     m.addMixInAnnotations(String.class, Integer.class); [EOL]     assertEquals(1, m.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getSerializationConfig().mixInCount()); [EOL]     assertEquals(1, m.getDeserializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getDeserializationConfig().mixInCount()); [EOL] }
public void testCopy() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertTrue(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     m.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     ObjectMapper m2 = m.copy(); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     m2.enable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES); [EOL]     assertTrue(m2.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     m.enable(DeserializationFeature.UNWRAP_ROOT_VALUE); [EOL]     assertTrue(m.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertNotSame(m.getFactory(), m2.getFactory()); [EOL]     assertEquals(0, m.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m.getDeserializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getDeserializationConfig().mixInCount()); [EOL]     m.addMixInAnnotations(String.class, Integer.class); [EOL]     assertEquals(1, m.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getSerializationConfig().mixInCount()); [EOL]     assertEquals(1, m.getDeserializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getDeserializationConfig().mixInCount()); [EOL] }
public void testCopy() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertTrue(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     m.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     ObjectMapper m2 = m.copy(); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     m2.enable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES); [EOL]     assertTrue(m2.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     m.enable(DeserializationFeature.UNWRAP_ROOT_VALUE); [EOL]     assertTrue(m.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertNotSame(m.getFactory(), m2.getFactory()); [EOL]     assertEquals(0, m.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m.getDeserializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getDeserializationConfig().mixInCount()); [EOL]     m.addMixInAnnotations(String.class, Integer.class); [EOL]     assertEquals(1, m.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getSerializationConfig().mixInCount()); [EOL]     assertEquals(1, m.getDeserializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getDeserializationConfig().mixInCount()); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testSimpleFields() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new PrefixStrategy()); [EOL]     String json = mapper.writeValueAsString(new FieldBean(999)); [EOL]     assertEquals("{\"Field-key\":999}", json); [EOL]     FieldBean result = mapper.readValue(json, FieldBean.class); [EOL]     assertEquals(999, result.key); [EOL] }
public void testSimpleFields() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new PrefixStrategy()); [EOL]     String json = mapper.writeValueAsString(new FieldBean(999)); [EOL]     assertEquals("{\"Field-key\":999}", json); [EOL]     FieldBean result = mapper.readValue(json, FieldBean.class); [EOL]     assertEquals(999, result.key); [EOL] }
public void testFeature432() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTypingAsProperty(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE, "*CLASS*"); [EOL]     String json = mapper.writeValueAsString(new BeanHolder(new StringBean("punny"))); [EOL]     assertEquals("{\"bean\":{\"*CLASS*\":\"com.fasterxml.jackson.databind.jsontype.TestDefaultForObject$StringBean\",\"name\":\"punny\"}}", json); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testInArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.disableDefaultTyping(); [EOL]     Animal[] animals = new Animal[] { new Cat("Miuku", "white"), new Dog("Murre", 9) }; [EOL]     Map<String, Object> map = new HashMap<String, Object>(); [EOL]     map.put("a", animals); [EOL]     String json = m.writeValueAsString(map); [EOL]     Map<String, Object> result = m.readValue(json, Map.class); [EOL]     assertEquals(1, result.size()); [EOL]     Object ob = result.get("a"); [EOL]     if (!(ob instanceof List<?>)) { [EOL]         fail("Did not map to entry with 'a' as List (but as " + ob.getClass().getName() + "): JSON == '" + json + "'"); [EOL]     } [EOL]     List<?> l = (List<?>) ob; [EOL]     assertNotNull(l); [EOL]     assertEquals(2, l.size()); [EOL]     Map<?, ?> a1 = (Map<?, ?>) l.get(0); [EOL]     assertEquals(3, a1.size()); [EOL]     String classProp = Id.CLASS.getDefaultPropertyName(); [EOL]     assertEquals(Cat.class.getName(), a1.get(classProp)); [EOL]     Map<?, ?> a2 = (Map<?, ?>) l.get(1); [EOL]     assertEquals(3, a2.size()); [EOL]     assertEquals(Dog.class.getName(), a2.get(classProp)); [EOL] }
public void testFeature432() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTypingAsProperty(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE, "*CLASS*"); [EOL]     String json = mapper.writeValueAsString(new BeanHolder(new StringBean("punny"))); [EOL]     assertEquals("{\"bean\":{\"*CLASS*\":\"com.fasterxml.jackson.databind.jsontype.TestDefaultForObject$StringBean\",\"name\":\"punny\"}}", json); [EOL] }
public void testFeature432() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTypingAsProperty(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE, "*CLASS*"); [EOL]     String json = mapper.writeValueAsString(new BeanHolder(new StringBean("punny"))); [EOL]     assertEquals("{\"bean\":{\"*CLASS*\":\"com.fasterxml.jackson.databind.jsontype.TestDefaultForObject$StringBean\",\"name\":\"punny\"}}", json); [EOL] }
public void testSimpleInclusionFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().addFilter("RootFilter", SimpleBeanPropertyFilter.filterOutAllExcept("a")); [EOL]     assertEquals("{\"a\":\"a\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.setFilters(prov); [EOL]     assertEquals("{\"a\":\"a\"}", mapper.writeValueAsString(new Bean())); [EOL] }
public void testSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setHandlerInstantiator(new MyInstantiator("xyz:")); [EOL]     assertEquals(quote("xyz:456"), mapper.writeValueAsString(new MyBean("456"))); [EOL] }
public void testSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setHandlerInstantiator(new MyInstantiator("xyz:")); [EOL]     assertEquals(quote("xyz:456"), mapper.writeValueAsString(new MyBean("456"))); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
public void testPOJOFromEmptyString() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.readValue(quote(""), Bean.class); [EOL]         fail("Should not accept Empty String for POJO"); [EOL]     } catch (JsonProcessingException e) { [EOL]         verifyException(e, "from String value"); [EOL]     } [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true); [EOL]     Bean result = mapper.readValue(quote(""), Bean.class); [EOL]     assertNull(result); [EOL] }
public void testPOJOFromEmptyString() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.readValue(quote(""), Bean.class); [EOL]         fail("Should not accept Empty String for POJO"); [EOL]     } catch (JsonProcessingException e) { [EOL]         verifyException(e, "from String value"); [EOL]     } [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true); [EOL]     Bean result = mapper.readValue(quote(""), Bean.class); [EOL]     assertNull(result); [EOL] }
public void testConfigForPropertySorting() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertFalse(m.isEnabled(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY)); [EOL]     SerializationConfig sc = m.getSerializationConfig(); [EOL]     assertFalse(sc.isEnabled(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY)); [EOL]     assertFalse(sc.shouldSortPropertiesAlphabetically()); [EOL]     DeserializationConfig dc = m.getDeserializationConfig(); [EOL]     assertFalse(dc.shouldSortPropertiesAlphabetically()); [EOL]     m.enable(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY); [EOL]     sc = m.getSerializationConfig(); [EOL]     assertTrue(sc.isEnabled(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY)); [EOL]     assertTrue(sc.shouldSortPropertiesAlphabetically()); [EOL]     dc = m.getDeserializationConfig(); [EOL]     assertTrue(dc.isEnabled(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY)); [EOL]     assertTrue(dc.shouldSortPropertiesAlphabetically()); [EOL] }
public void testConfigForPropertySorting() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertFalse(m.isEnabled(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY)); [EOL]     SerializationConfig sc = m.getSerializationConfig(); [EOL]     assertFalse(sc.isEnabled(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY)); [EOL]     assertFalse(sc.shouldSortPropertiesAlphabetically()); [EOL]     DeserializationConfig dc = m.getDeserializationConfig(); [EOL]     assertFalse(dc.shouldSortPropertiesAlphabetically()); [EOL]     m.enable(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY); [EOL]     sc = m.getSerializationConfig(); [EOL]     assertTrue(sc.isEnabled(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY)); [EOL]     assertTrue(sc.shouldSortPropertiesAlphabetically()); [EOL]     dc = m.getDeserializationConfig(); [EOL]     assertTrue(dc.isEnabled(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY)); [EOL]     assertTrue(dc.shouldSortPropertiesAlphabetically()); [EOL] }
public void testConfigForPropertySorting() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertFalse(m.isEnabled(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY)); [EOL]     SerializationConfig sc = m.getSerializationConfig(); [EOL]     assertFalse(sc.isEnabled(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY)); [EOL]     assertFalse(sc.shouldSortPropertiesAlphabetically()); [EOL]     DeserializationConfig dc = m.getDeserializationConfig(); [EOL]     assertFalse(dc.shouldSortPropertiesAlphabetically()); [EOL]     m.enable(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY); [EOL]     sc = m.getSerializationConfig(); [EOL]     assertTrue(sc.isEnabled(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY)); [EOL]     assertTrue(sc.shouldSortPropertiesAlphabetically()); [EOL]     dc = m.getDeserializationConfig(); [EOL]     assertTrue(dc.isEnabled(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY)); [EOL]     assertTrue(dc.shouldSortPropertiesAlphabetically()); [EOL] }
public void testConfigForPropertySorting() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertFalse(m.isEnabled(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY)); [EOL]     SerializationConfig sc = m.getSerializationConfig(); [EOL]     assertFalse(sc.isEnabled(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY)); [EOL]     assertFalse(sc.shouldSortPropertiesAlphabetically()); [EOL]     DeserializationConfig dc = m.getDeserializationConfig(); [EOL]     assertFalse(dc.shouldSortPropertiesAlphabetically()); [EOL]     m.enable(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY); [EOL]     sc = m.getSerializationConfig(); [EOL]     assertTrue(sc.isEnabled(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY)); [EOL]     assertTrue(sc.shouldSortPropertiesAlphabetically()); [EOL]     dc = m.getDeserializationConfig(); [EOL]     assertTrue(dc.isEnabled(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY)); [EOL]     assertTrue(dc.shouldSortPropertiesAlphabetically()); [EOL] }
public void testCopy() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertTrue(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     m.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     ObjectMapper m2 = m.copy(); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     m2.enable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES); [EOL]     assertTrue(m2.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     m.enable(DeserializationFeature.UNWRAP_ROOT_VALUE); [EOL]     assertTrue(m.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertNotSame(m.getFactory(), m2.getFactory()); [EOL]     assertEquals(0, m.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m.getDeserializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getDeserializationConfig().mixInCount()); [EOL]     m.addMixInAnnotations(String.class, Integer.class); [EOL]     assertEquals(1, m.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getSerializationConfig().mixInCount()); [EOL]     assertEquals(1, m.getDeserializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getDeserializationConfig().mixInCount()); [EOL] }
public void testCopy() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertTrue(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     m.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     ObjectMapper m2 = m.copy(); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     m2.enable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES); [EOL]     assertTrue(m2.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     m.enable(DeserializationFeature.UNWRAP_ROOT_VALUE); [EOL]     assertTrue(m.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertNotSame(m.getFactory(), m2.getFactory()); [EOL]     assertEquals(0, m.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m.getDeserializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getDeserializationConfig().mixInCount()); [EOL]     m.addMixInAnnotations(String.class, Integer.class); [EOL]     assertEquals(1, m.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getSerializationConfig().mixInCount()); [EOL]     assertEquals(1, m.getDeserializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getDeserializationConfig().mixInCount()); [EOL] }
public void testCopy() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertTrue(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     m.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     ObjectMapper m2 = m.copy(); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     m2.enable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES); [EOL]     assertTrue(m2.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     m.enable(DeserializationFeature.UNWRAP_ROOT_VALUE); [EOL]     assertTrue(m.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertNotSame(m.getFactory(), m2.getFactory()); [EOL]     assertEquals(0, m.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m.getDeserializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getDeserializationConfig().mixInCount()); [EOL]     m.addMixInAnnotations(String.class, Integer.class); [EOL]     assertEquals(1, m.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getSerializationConfig().mixInCount()); [EOL]     assertEquals(1, m.getDeserializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getDeserializationConfig().mixInCount()); [EOL] }
public void testCopy() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertTrue(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     m.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     ObjectMapper m2 = m.copy(); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     m2.enable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES); [EOL]     assertTrue(m2.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     m.enable(DeserializationFeature.UNWRAP_ROOT_VALUE); [EOL]     assertTrue(m.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertNotSame(m.getFactory(), m2.getFactory()); [EOL]     assertEquals(0, m.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m.getDeserializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getDeserializationConfig().mixInCount()); [EOL]     m.addMixInAnnotations(String.class, Integer.class); [EOL]     assertEquals(1, m.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getSerializationConfig().mixInCount()); [EOL]     assertEquals(1, m.getDeserializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getDeserializationConfig().mixInCount()); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testConfigForPropertySorting() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertFalse(m.isEnabled(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY)); [EOL]     SerializationConfig sc = m.getSerializationConfig(); [EOL]     assertFalse(sc.isEnabled(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY)); [EOL]     assertFalse(sc.shouldSortPropertiesAlphabetically()); [EOL]     DeserializationConfig dc = m.getDeserializationConfig(); [EOL]     assertFalse(dc.shouldSortPropertiesAlphabetically()); [EOL]     m.enable(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY); [EOL]     sc = m.getSerializationConfig(); [EOL]     assertTrue(sc.isEnabled(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY)); [EOL]     assertTrue(sc.shouldSortPropertiesAlphabetically()); [EOL]     dc = m.getDeserializationConfig(); [EOL]     assertTrue(dc.isEnabled(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY)); [EOL]     assertTrue(dc.shouldSortPropertiesAlphabetically()); [EOL] }
public void testConfigForPropertySorting() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertFalse(m.isEnabled(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY)); [EOL]     SerializationConfig sc = m.getSerializationConfig(); [EOL]     assertFalse(sc.isEnabled(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY)); [EOL]     assertFalse(sc.shouldSortPropertiesAlphabetically()); [EOL]     DeserializationConfig dc = m.getDeserializationConfig(); [EOL]     assertFalse(dc.shouldSortPropertiesAlphabetically()); [EOL]     m.enable(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY); [EOL]     sc = m.getSerializationConfig(); [EOL]     assertTrue(sc.isEnabled(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY)); [EOL]     assertTrue(sc.shouldSortPropertiesAlphabetically()); [EOL]     dc = m.getDeserializationConfig(); [EOL]     assertTrue(dc.isEnabled(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY)); [EOL]     assertTrue(dc.shouldSortPropertiesAlphabetically()); [EOL] }
public void testCopy() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertTrue(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     m.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     ObjectMapper m2 = m.copy(); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     m2.enable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES); [EOL]     assertTrue(m2.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     m.enable(DeserializationFeature.UNWRAP_ROOT_VALUE); [EOL]     assertTrue(m.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertNotSame(m.getFactory(), m2.getFactory()); [EOL]     assertEquals(0, m.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m.getDeserializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getDeserializationConfig().mixInCount()); [EOL]     m.addMixInAnnotations(String.class, Integer.class); [EOL]     assertEquals(1, m.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getSerializationConfig().mixInCount()); [EOL]     assertEquals(1, m.getDeserializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getDeserializationConfig().mixInCount()); [EOL] }
public void testCopy() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertTrue(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     m.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     ObjectMapper m2 = m.copy(); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     m2.enable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES); [EOL]     assertTrue(m2.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     m.enable(DeserializationFeature.UNWRAP_ROOT_VALUE); [EOL]     assertTrue(m.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertNotSame(m.getFactory(), m2.getFactory()); [EOL]     assertEquals(0, m.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m.getDeserializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getDeserializationConfig().mixInCount()); [EOL]     m.addMixInAnnotations(String.class, Integer.class); [EOL]     assertEquals(1, m.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getSerializationConfig().mixInCount()); [EOL]     assertEquals(1, m.getDeserializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getDeserializationConfig().mixInCount()); [EOL] }
public void testTreeRead() throws Exception { [EOL]     String JSON = "{ }"; [EOL]     JsonNode n = MAPPER.readTree(JSON); [EOL]     assertTrue(n instanceof ObjectNode); [EOL]     n = MAPPER.readTree(new StringReader(JSON)); [EOL]     assertTrue(n instanceof ObjectNode); [EOL]     n = MAPPER.readTree(new ByteArrayInputStream(JSON.getBytes("UTF-8"))); [EOL]     assertTrue(n instanceof ObjectNode); [EOL] }
public void testTreeRead() throws Exception { [EOL]     String JSON = "{ }"; [EOL]     JsonNode n = MAPPER.readTree(JSON); [EOL]     assertTrue(n instanceof ObjectNode); [EOL]     n = MAPPER.readTree(new StringReader(JSON)); [EOL]     assertTrue(n instanceof ObjectNode); [EOL]     n = MAPPER.readTree(new ByteArrayInputStream(JSON.getBytes("UTF-8"))); [EOL]     assertTrue(n instanceof ObjectNode); [EOL] }
public void testTreeRead() throws Exception { [EOL]     String JSON = "{ }"; [EOL]     JsonNode n = MAPPER.readTree(JSON); [EOL]     assertTrue(n instanceof ObjectNode); [EOL]     n = MAPPER.readTree(new StringReader(JSON)); [EOL]     assertTrue(n instanceof ObjectNode); [EOL]     n = MAPPER.readTree(new ByteArrayInputStream(JSON.getBytes("UTF-8"))); [EOL]     assertTrue(n instanceof ObjectNode); [EOL] }
public void testTreeRead() throws Exception { [EOL]     String JSON = "{ }"; [EOL]     JsonNode n = MAPPER.readTree(JSON); [EOL]     assertTrue(n instanceof ObjectNode); [EOL]     n = MAPPER.readTree(new StringReader(JSON)); [EOL]     assertTrue(n instanceof ObjectNode); [EOL]     n = MAPPER.readTree(new ByteArrayInputStream(JSON.getBytes("UTF-8"))); [EOL]     assertTrue(n instanceof ObjectNode); [EOL] }
public void testTreeRead() throws Exception { [EOL]     String JSON = "{ }"; [EOL]     JsonNode n = MAPPER.readTree(JSON); [EOL]     assertTrue(n instanceof ObjectNode); [EOL]     n = MAPPER.readTree(new StringReader(JSON)); [EOL]     assertTrue(n instanceof ObjectNode); [EOL]     n = MAPPER.readTree(new ByteArrayInputStream(JSON.getBytes("UTF-8"))); [EOL]     assertTrue(n instanceof ObjectNode); [EOL] }
public void testTreeRead() throws Exception { [EOL]     String JSON = "{ }"; [EOL]     JsonNode n = MAPPER.readTree(JSON); [EOL]     assertTrue(n instanceof ObjectNode); [EOL]     n = MAPPER.readTree(new StringReader(JSON)); [EOL]     assertTrue(n instanceof ObjectNode); [EOL]     n = MAPPER.readTree(new ByteArrayInputStream(JSON.getBytes("UTF-8"))); [EOL]     assertTrue(n instanceof ObjectNode); [EOL] }
public void testTreeRead() throws Exception { [EOL]     String JSON = "{ }"; [EOL]     JsonNode n = MAPPER.readTree(JSON); [EOL]     assertTrue(n instanceof ObjectNode); [EOL]     n = MAPPER.readTree(new StringReader(JSON)); [EOL]     assertTrue(n instanceof ObjectNode); [EOL]     n = MAPPER.readTree(new ByteArrayInputStream(JSON.getBytes("UTF-8"))); [EOL]     assertTrue(n instanceof ObjectNode); [EOL] }
public void testSupport() { [EOL]     assertTrue(MAPPER.canSerialize(String.class)); [EOL]     assertTrue(MAPPER.canDeserialize(TypeFactory.defaultInstance().constructType(String.class))); [EOL] }
public void testSupport() { [EOL]     assertTrue(MAPPER.canSerialize(String.class)); [EOL]     assertTrue(MAPPER.canDeserialize(TypeFactory.defaultInstance().constructType(String.class))); [EOL] }
public void testSupport() { [EOL]     assertTrue(MAPPER.canSerialize(String.class)); [EOL]     assertTrue(MAPPER.canDeserialize(TypeFactory.defaultInstance().constructType(String.class))); [EOL] }
public void testSupport() { [EOL]     assertTrue(MAPPER.canSerialize(String.class)); [EOL]     assertTrue(MAPPER.canDeserialize(TypeFactory.defaultInstance().constructType(String.class))); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
public void testSimpleInclusionFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().addFilter("RootFilter", SimpleBeanPropertyFilter.filterOutAllExcept("a")); [EOL]     assertEquals("{\"a\":\"a\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.setFilters(prov); [EOL]     assertEquals("{\"a\":\"a\"}", mapper.writeValueAsString(new Bean())); [EOL] }
public void testSimpleInclusionFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().addFilter("RootFilter", SimpleBeanPropertyFilter.filterOutAllExcept("a")); [EOL]     assertEquals("{\"a\":\"a\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.setFilters(prov); [EOL]     assertEquals("{\"a\":\"a\"}", mapper.writeValueAsString(new Bean())); [EOL] }
public void testSimple() throws Exception { [EOL]     Bean bean = mapper.readValue("{\"a\":3, \"aa\":\"foo\", \"b\": 9 }", Bean.class); [EOL]     assertEquals(3, bean.a); [EOL]     assertEquals("foo", bean.aa); [EOL]     assertEquals(9, bean.b); [EOL]     bean = mapper.readerWithView(ViewAA.class).withType(Bean.class).readValue("{\"a\":3, \"aa\":\"foo\", \"b\": 9 }"); [EOL]     assertEquals(3, bean.a); [EOL]     assertEquals("foo", bean.aa); [EOL]     assertEquals(0, bean.b); [EOL]     bean = mapper.readerWithView(ViewA.class).withType(Bean.class).readValue("{\"a\":1, \"aa\":\"x\", \"b\": 3 }"); [EOL]     assertEquals(1, bean.a); [EOL]     assertNull(bean.aa); [EOL]     assertEquals(0, bean.b); [EOL]     bean = mapper.reader(Bean.class).withView(ViewB.class).readValue("{\"a\":-3, \"aa\":\"y\", \"b\": 2 }"); [EOL]     assertEquals(0, bean.a); [EOL]     assertEquals("y", bean.aa); [EOL]     assertEquals(2, bean.b); [EOL] }
public void testSimple() throws Exception { [EOL]     Bean bean = mapper.readValue("{\"a\":3, \"aa\":\"foo\", \"b\": 9 }", Bean.class); [EOL]     assertEquals(3, bean.a); [EOL]     assertEquals("foo", bean.aa); [EOL]     assertEquals(9, bean.b); [EOL]     bean = mapper.readerWithView(ViewAA.class).withType(Bean.class).readValue("{\"a\":3, \"aa\":\"foo\", \"b\": 9 }"); [EOL]     assertEquals(3, bean.a); [EOL]     assertEquals("foo", bean.aa); [EOL]     assertEquals(0, bean.b); [EOL]     bean = mapper.readerWithView(ViewA.class).withType(Bean.class).readValue("{\"a\":1, \"aa\":\"x\", \"b\": 3 }"); [EOL]     assertEquals(1, bean.a); [EOL]     assertNull(bean.aa); [EOL]     assertEquals(0, bean.b); [EOL]     bean = mapper.reader(Bean.class).withView(ViewB.class).readValue("{\"a\":-3, \"aa\":\"y\", \"b\": 2 }"); [EOL]     assertEquals(0, bean.a); [EOL]     assertEquals("y", bean.aa); [EOL]     assertEquals(2, bean.b); [EOL] }
public void testConvertUsingCast() throws Exception { [EOL]     String str = new String("foo"); [EOL]     CharSequence seq = str; [EOL]     String result = MAPPER.convertValue(seq, String.class); [EOL]     assertSame(str, result); [EOL] }
public void testConvertUsingCast() throws Exception { [EOL]     String str = new String("foo"); [EOL]     CharSequence seq = str; [EOL]     String result = MAPPER.convertValue(seq, String.class); [EOL]     assertSame(str, result); [EOL] }
public void testConvertUsingCast() throws Exception { [EOL]     String str = new String("foo"); [EOL]     CharSequence seq = str; [EOL]     String result = MAPPER.convertValue(seq, String.class); [EOL]     assertSame(str, result); [EOL] }
public void testConvertUsingCast() throws Exception { [EOL]     String str = new String("foo"); [EOL]     CharSequence seq = str; [EOL]     String result = MAPPER.convertValue(seq, String.class); [EOL]     assertSame(str, result); [EOL] }
public void testConvertUsingCast() throws Exception { [EOL]     String str = new String("foo"); [EOL]     CharSequence seq = str; [EOL]     String result = MAPPER.convertValue(seq, String.class); [EOL]     assertSame(str, result); [EOL] }
public void testConvertUsingCast() throws Exception { [EOL]     String str = new String("foo"); [EOL]     CharSequence seq = str; [EOL]     String result = MAPPER.convertValue(seq, String.class); [EOL]     assertSame(str, result); [EOL] }
public void testTreeRead() throws Exception { [EOL]     String JSON = "{ }"; [EOL]     JsonNode n = MAPPER.readTree(JSON); [EOL]     assertTrue(n instanceof ObjectNode); [EOL]     n = MAPPER.readTree(new StringReader(JSON)); [EOL]     assertTrue(n instanceof ObjectNode); [EOL]     n = MAPPER.readTree(new ByteArrayInputStream(JSON.getBytes("UTF-8"))); [EOL]     assertTrue(n instanceof ObjectNode); [EOL] }
public void testTreeRead() throws Exception { [EOL]     String JSON = "{ }"; [EOL]     JsonNode n = MAPPER.readTree(JSON); [EOL]     assertTrue(n instanceof ObjectNode); [EOL]     n = MAPPER.readTree(new StringReader(JSON)); [EOL]     assertTrue(n instanceof ObjectNode); [EOL]     n = MAPPER.readTree(new ByteArrayInputStream(JSON.getBytes("UTF-8"))); [EOL]     assertTrue(n instanceof ObjectNode); [EOL] }
public void testTreeRead() throws Exception { [EOL]     String JSON = "{ }"; [EOL]     JsonNode n = MAPPER.readTree(JSON); [EOL]     assertTrue(n instanceof ObjectNode); [EOL]     n = MAPPER.readTree(new StringReader(JSON)); [EOL]     assertTrue(n instanceof ObjectNode); [EOL]     n = MAPPER.readTree(new ByteArrayInputStream(JSON.getBytes("UTF-8"))); [EOL]     assertTrue(n instanceof ObjectNode); [EOL] }
public void testJsonLocation() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonLocation loc = new JsonLocation("whatever", -1, -1, 100, 13); [EOL]     String ser = serializeAsString(m, loc); [EOL]     JsonLocation result = m.readValue(ser, JsonLocation.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(loc.getSourceRef(), result.getSourceRef()); [EOL]     assertEquals(loc.getByteOffset(), result.getByteOffset()); [EOL]     assertEquals(loc.getCharOffset(), result.getCharOffset()); [EOL]     assertEquals(loc.getColumnNr(), result.getColumnNr()); [EOL]     assertEquals(loc.getLineNr(), result.getLineNr()); [EOL] }
public void testSimpleBuilder() throws Exception { [EOL]     ValueClassXY value = MAPPER.readValue("[1,2]", ValueClassXY.class); [EOL]     assertEquals(2, value._x); [EOL]     assertEquals(3, value._y); [EOL] }
public void testSimpleBuilder() throws Exception { [EOL]     ValueClassXY value = MAPPER.readValue("[1,2]", ValueClassXY.class); [EOL]     assertEquals(2, value._x); [EOL]     assertEquals(3, value._y); [EOL] }
public void testSimpleBuilder() throws Exception { [EOL]     ValueClassXY value = MAPPER.readValue("[1,2]", ValueClassXY.class); [EOL]     assertEquals(2, value._x); [EOL]     assertEquals(3, value._y); [EOL] }
public void testSimpleBuilder() throws Exception { [EOL]     ValueClassXY value = MAPPER.readValue("[1,2]", ValueClassXY.class); [EOL]     assertEquals(2, value._x); [EOL]     assertEquals(3, value._y); [EOL] }
public void testSimpleBuilder() throws Exception { [EOL]     ValueClassXY value = MAPPER.readValue("[1,2]", ValueClassXY.class); [EOL]     assertEquals(2, value._x); [EOL]     assertEquals(3, value._y); [EOL] }
public void testSimpleBuilder() throws Exception { [EOL]     ValueClassXY value = MAPPER.readValue("[1,2]", ValueClassXY.class); [EOL]     assertEquals(2, value._x); [EOL]     assertEquals(3, value._y); [EOL] }
public void testSimpleBuilder() throws Exception { [EOL]     ValueClassXY value = MAPPER.readValue("[1,2]", ValueClassXY.class); [EOL]     assertEquals(2, value._x); [EOL]     assertEquals(3, value._y); [EOL] }
public void testSimpleBuilder() throws Exception { [EOL]     ValueClassXY value = MAPPER.readValue("[1,2]", ValueClassXY.class); [EOL]     assertEquals(2, value._x); [EOL]     assertEquals(3, value._y); [EOL] }
public void testSimpleBuilder() throws Exception { [EOL]     ValueClassXY value = MAPPER.readValue("[1,2]", ValueClassXY.class); [EOL]     assertEquals(2, value._x); [EOL]     assertEquals(3, value._y); [EOL] }
public void testSimpleBuilder() throws Exception { [EOL]     ValueClassXY value = MAPPER.readValue("[1,2]", ValueClassXY.class); [EOL]     assertEquals(2, value._x); [EOL]     assertEquals(3, value._y); [EOL] }
public void testSimpleBuilder() throws Exception { [EOL]     ValueClassXY value = MAPPER.readValue("[1,2]", ValueClassXY.class); [EOL]     assertEquals(2, value._x); [EOL]     assertEquals(3, value._y); [EOL] }
public void testSimpleBuilder() throws Exception { [EOL]     ValueClassXY value = MAPPER.readValue("[1,2]", ValueClassXY.class); [EOL]     assertEquals(2, value._x); [EOL]     assertEquals(3, value._y); [EOL] }
public void testSimpleBuilder() throws Exception { [EOL]     ValueClassXY value = MAPPER.readValue("[1,2]", ValueClassXY.class); [EOL]     assertEquals(2, value._x); [EOL]     assertEquals(3, value._y); [EOL] }
public void testSimpleBuilder() throws Exception { [EOL]     ValueClassXY value = MAPPER.readValue("[1,2]", ValueClassXY.class); [EOL]     assertEquals(2, value._x); [EOL]     assertEquals(3, value._y); [EOL] }
public void testSimpleBuilder() throws Exception { [EOL]     ValueClassXY value = MAPPER.readValue("[1,2]", ValueClassXY.class); [EOL]     assertEquals(2, value._x); [EOL]     assertEquals(3, value._y); [EOL] }
public void testSimpleBuilder() throws Exception { [EOL]     ValueClassXY value = MAPPER.readValue("[1,2]", ValueClassXY.class); [EOL]     assertEquals(2, value._x); [EOL]     assertEquals(3, value._y); [EOL] }
public void testSimpleBuilder() throws Exception { [EOL]     ValueClassXY value = MAPPER.readValue("[1,2]", ValueClassXY.class); [EOL]     assertEquals(2, value._x); [EOL]     assertEquals(3, value._y); [EOL] }
public void testAsBoolean() throws Exception { [EOL]     assertEquals(false, BooleanNode.FALSE.asBoolean()); [EOL]     assertEquals(true, BooleanNode.TRUE.asBoolean()); [EOL]     assertEquals(false, IntNode.valueOf(0).asBoolean()); [EOL]     assertEquals(true, IntNode.valueOf(1).asBoolean()); [EOL]     assertEquals(false, LongNode.valueOf(0).asBoolean()); [EOL]     assertEquals(true, LongNode.valueOf(-34L).asBoolean()); [EOL]     assertEquals(true, new TextNode("true").asBoolean()); [EOL]     assertEquals(false, new TextNode("false").asBoolean()); [EOL]     assertEquals(false, new TextNode("barf").asBoolean()); [EOL]     assertEquals(true, new TextNode("barf").asBoolean(true)); [EOL]     assertEquals(true, new POJONode(Boolean.TRUE).asBoolean()); [EOL] }
public void testAsBoolean() throws Exception { [EOL]     assertEquals(false, BooleanNode.FALSE.asBoolean()); [EOL]     assertEquals(true, BooleanNode.TRUE.asBoolean()); [EOL]     assertEquals(false, IntNode.valueOf(0).asBoolean()); [EOL]     assertEquals(true, IntNode.valueOf(1).asBoolean()); [EOL]     assertEquals(false, LongNode.valueOf(0).asBoolean()); [EOL]     assertEquals(true, LongNode.valueOf(-34L).asBoolean()); [EOL]     assertEquals(true, new TextNode("true").asBoolean()); [EOL]     assertEquals(false, new TextNode("false").asBoolean()); [EOL]     assertEquals(false, new TextNode("barf").asBoolean()); [EOL]     assertEquals(true, new TextNode("barf").asBoolean(true)); [EOL]     assertEquals(true, new POJONode(Boolean.TRUE).asBoolean()); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testMixinMethodInheritance() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.addMixInAnnotations(Beano2.class, BeanoMixinSub2.class); [EOL]     Map<String, Object> result; [EOL]     result = writeAndMap(mapper, new Beano2()); [EOL]     assertEquals(2, result.size()); [EOL]     assertTrue(result.containsKey("id")); [EOL]     assertTrue(result.containsKey("name")); [EOL] }
public void testMixinMethodInheritance() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.addMixInAnnotations(Beano2.class, BeanoMixinSub2.class); [EOL]     Map<String, Object> result; [EOL]     result = writeAndMap(mapper, new Beano2()); [EOL]     assertEquals(2, result.size()); [EOL]     assertTrue(result.containsKey("id")); [EOL]     assertTrue(result.containsKey("name")); [EOL] }
public void testMixinMethodInheritance() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.addMixInAnnotations(Beano2.class, BeanoMixinSub2.class); [EOL]     Map<String, Object> result; [EOL]     result = writeAndMap(mapper, new Beano2()); [EOL]     assertEquals(2, result.size()); [EOL]     assertTrue(result.containsKey("id")); [EOL]     assertTrue(result.containsKey("name")); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testOverflows() { [EOL]     try { [EOL]         mapper.convertValue(new int[] { 1000 }, byte[].class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, OVERFLOW_MSG_BYTE); [EOL]     } [EOL]     try { [EOL]         mapper.convertValue(new int[] { -99999 }, short[].class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, OVERFLOW_MSG); [EOL]     } [EOL]     try { [EOL]         mapper.convertValue(new long[] { Long.MAX_VALUE }, int[].class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, OVERFLOW_MSG); [EOL]     } [EOL]     BigInteger biggie = BigInteger.valueOf(Long.MAX_VALUE); [EOL]     biggie.add(BigInteger.ONE); [EOL]     List<BigInteger> l = new ArrayList<BigInteger>(); [EOL]     l.add(biggie); [EOL]     try { [EOL]         mapper.convertValue(l, int[].class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, OVERFLOW_MSG); [EOL]     } [EOL] }
public void testOverflows() { [EOL]     try { [EOL]         mapper.convertValue(new int[] { 1000 }, byte[].class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, OVERFLOW_MSG_BYTE); [EOL]     } [EOL]     try { [EOL]         mapper.convertValue(new int[] { -99999 }, short[].class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, OVERFLOW_MSG); [EOL]     } [EOL]     try { [EOL]         mapper.convertValue(new long[] { Long.MAX_VALUE }, int[].class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, OVERFLOW_MSG); [EOL]     } [EOL]     BigInteger biggie = BigInteger.valueOf(Long.MAX_VALUE); [EOL]     biggie.add(BigInteger.ONE); [EOL]     List<BigInteger> l = new ArrayList<BigInteger>(); [EOL]     l.add(biggie); [EOL]     try { [EOL]         mapper.convertValue(l, int[].class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, OVERFLOW_MSG); [EOL]     } [EOL] }
public void testOverflows() { [EOL]     try { [EOL]         mapper.convertValue(new int[] { 1000 }, byte[].class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, OVERFLOW_MSG_BYTE); [EOL]     } [EOL]     try { [EOL]         mapper.convertValue(new int[] { -99999 }, short[].class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, OVERFLOW_MSG); [EOL]     } [EOL]     try { [EOL]         mapper.convertValue(new long[] { Long.MAX_VALUE }, int[].class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, OVERFLOW_MSG); [EOL]     } [EOL]     BigInteger biggie = BigInteger.valueOf(Long.MAX_VALUE); [EOL]     biggie.add(BigInteger.ONE); [EOL]     List<BigInteger> l = new ArrayList<BigInteger>(); [EOL]     l.add(biggie); [EOL]     try { [EOL]         mapper.convertValue(l, int[].class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, OVERFLOW_MSG); [EOL]     } [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testIterable() throws IOException { [EOL]     StringWriter sw = new StringWriter(); [EOL]     MAPPER.writeValue(sw, new IterableWrapper(new int[] { 1, 2, 3 })); [EOL]     assertEquals("[1,2,3]", sw.toString().trim()); [EOL] }
public void testIterable() throws IOException { [EOL]     StringWriter sw = new StringWriter(); [EOL]     MAPPER.writeValue(sw, new IterableWrapper(new int[] { 1, 2, 3 })); [EOL]     assertEquals("[1,2,3]", sw.toString().trim()); [EOL] }
public void testIterable() throws IOException { [EOL]     StringWriter sw = new StringWriter(); [EOL]     MAPPER.writeValue(sw, new IterableWrapper(new int[] { 1, 2, 3 })); [EOL]     assertEquals("[1,2,3]", sw.toString().trim()); [EOL] }
public void testIterable() throws IOException { [EOL]     StringWriter sw = new StringWriter(); [EOL]     MAPPER.writeValue(sw, new IterableWrapper(new int[] { 1, 2, 3 })); [EOL]     assertEquals("[1,2,3]", sw.toString().trim()); [EOL] }
public void testIterable() throws IOException { [EOL]     StringWriter sw = new StringWriter(); [EOL]     MAPPER.writeValue(sw, new IterableWrapper(new int[] { 1, 2, 3 })); [EOL]     assertEquals("[1,2,3]", sw.toString().trim()); [EOL] }
public void testIterable() throws IOException { [EOL]     StringWriter sw = new StringWriter(); [EOL]     MAPPER.writeValue(sw, new IterableWrapper(new int[] { 1, 2, 3 })); [EOL]     assertEquals("[1,2,3]", sw.toString().trim()); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setHandlerInstantiator(new MyInstantiator("xyz:")); [EOL]     assertEquals(quote("xyz:456"), mapper.writeValueAsString(new MyBean("456"))); [EOL] }
public void testSimpleInclusionFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().addFilter("RootFilter", SimpleBeanPropertyFilter.filterOutAllExcept("a")); [EOL]     assertEquals("{\"a\":\"a\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.setFilters(prov); [EOL]     assertEquals("{\"a\":\"a\"}", mapper.writeValueAsString(new Bean())); [EOL] }
public void testSimpleInclusionFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().addFilter("RootFilter", SimpleBeanPropertyFilter.filterOutAllExcept("a")); [EOL]     assertEquals("{\"a\":\"a\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.setFilters(prov); [EOL]     assertEquals("{\"a\":\"a\"}", mapper.writeValueAsString(new Bean())); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
public void testRootUsingExplicitConfig() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ObjectWriter writer = mapper.writer().withRootName("wrapper"); [EOL]     String json = writer.writeValueAsString(new Bean()); [EOL]     assertEquals("{\"wrapper\":{\"a\":3}}", json); [EOL]     ObjectReader reader = mapper.reader(Bean.class).withRootName("wrapper"); [EOL]     Bean bean = reader.readValue(json); [EOL]     assertNotNull(bean); [EOL]     ObjectMapper wrapping = rootMapper(); [EOL]     json = wrapping.writer().withRootName("something").writeValueAsString(new Bean()); [EOL]     assertEquals("{\"something\":{\"a\":3}}", json); [EOL]     json = wrapping.writer().withRootName("").writeValueAsString(new Bean()); [EOL]     assertEquals("{\"a\":3}", json); [EOL]     bean = wrapping.reader(Bean.class).withRootName("").readValue(json); [EOL]     assertNotNull(bean); [EOL] }
public void testCopy() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertTrue(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     m.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     ObjectMapper m2 = m.copy(); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     m2.enable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES); [EOL]     assertTrue(m2.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     m.enable(DeserializationFeature.UNWRAP_ROOT_VALUE); [EOL]     assertTrue(m.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertNotSame(m.getFactory(), m2.getFactory()); [EOL]     assertEquals(0, m.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m.getDeserializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getDeserializationConfig().mixInCount()); [EOL]     m.addMixInAnnotations(String.class, Integer.class); [EOL]     assertEquals(1, m.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getSerializationConfig().mixInCount()); [EOL]     assertEquals(1, m.getDeserializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getDeserializationConfig().mixInCount()); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
public void testAnnotationOverride() throws Exception { [EOL]     assertEquals("{\"value\":{\"x\":1,\"y\":2}}", MAPPER.writeValueAsString(new A())); [EOL]     ObjectMapper mapper2 = new ObjectMapper(); [EOL]     mapper2.setAnnotationIntrospector(new ForceArraysIntrospector()); [EOL]     assertEquals("[[1,2]]", mapper2.writeValueAsString(new A())); [EOL] }
public void testSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setHandlerInstantiator(new MyInstantiator("xyz:")); [EOL]     assertEquals(quote("xyz:456"), mapper.writeValueAsString(new MyBean("456"))); [EOL] }
public void testRootUsingExplicitConfig() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ObjectWriter writer = mapper.writer().withRootName("wrapper"); [EOL]     String json = writer.writeValueAsString(new Bean()); [EOL]     assertEquals("{\"wrapper\":{\"a\":3}}", json); [EOL]     ObjectReader reader = mapper.reader(Bean.class).withRootName("wrapper"); [EOL]     Bean bean = reader.readValue(json); [EOL]     assertNotNull(bean); [EOL]     ObjectMapper wrapping = rootMapper(); [EOL]     json = wrapping.writer().withRootName("something").writeValueAsString(new Bean()); [EOL]     assertEquals("{\"something\":{\"a\":3}}", json); [EOL]     json = wrapping.writer().withRootName("").writeValueAsString(new Bean()); [EOL]     assertEquals("{\"a\":3}", json); [EOL]     bean = wrapping.reader(Bean.class).withRootName("").readValue(json); [EOL]     assertNotNull(bean); [EOL] }
public void testRootUsingExplicitConfig() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ObjectWriter writer = mapper.writer().withRootName("wrapper"); [EOL]     String json = writer.writeValueAsString(new Bean()); [EOL]     assertEquals("{\"wrapper\":{\"a\":3}}", json); [EOL]     ObjectReader reader = mapper.reader(Bean.class).withRootName("wrapper"); [EOL]     Bean bean = reader.readValue(json); [EOL]     assertNotNull(bean); [EOL]     ObjectMapper wrapping = rootMapper(); [EOL]     json = wrapping.writer().withRootName("something").writeValueAsString(new Bean()); [EOL]     assertEquals("{\"something\":{\"a\":3}}", json); [EOL]     json = wrapping.writer().withRootName("").writeValueAsString(new Bean()); [EOL]     assertEquals("{\"a\":3}", json); [EOL]     bean = wrapping.reader(Bean.class).withRootName("").readValue(json); [EOL]     assertNotNull(bean); [EOL] }
public void testRootUsingExplicitConfig() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ObjectWriter writer = mapper.writer().withRootName("wrapper"); [EOL]     String json = writer.writeValueAsString(new Bean()); [EOL]     assertEquals("{\"wrapper\":{\"a\":3}}", json); [EOL]     ObjectReader reader = mapper.reader(Bean.class).withRootName("wrapper"); [EOL]     Bean bean = reader.readValue(json); [EOL]     assertNotNull(bean); [EOL]     ObjectMapper wrapping = rootMapper(); [EOL]     json = wrapping.writer().withRootName("something").writeValueAsString(new Bean()); [EOL]     assertEquals("{\"something\":{\"a\":3}}", json); [EOL]     json = wrapping.writer().withRootName("").writeValueAsString(new Bean()); [EOL]     assertEquals("{\"a\":3}", json); [EOL]     bean = wrapping.reader(Bean.class).withRootName("").readValue(json); [EOL]     assertNotNull(bean); [EOL] }
public void testRootUsingExplicitConfig() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ObjectWriter writer = mapper.writer().withRootName("wrapper"); [EOL]     String json = writer.writeValueAsString(new Bean()); [EOL]     assertEquals("{\"wrapper\":{\"a\":3}}", json); [EOL]     ObjectReader reader = mapper.reader(Bean.class).withRootName("wrapper"); [EOL]     Bean bean = reader.readValue(json); [EOL]     assertNotNull(bean); [EOL]     ObjectMapper wrapping = rootMapper(); [EOL]     json = wrapping.writer().withRootName("something").writeValueAsString(new Bean()); [EOL]     assertEquals("{\"something\":{\"a\":3}}", json); [EOL]     json = wrapping.writer().withRootName("").writeValueAsString(new Bean()); [EOL]     assertEquals("{\"a\":3}", json); [EOL]     bean = wrapping.reader(Bean.class).withRootName("").readValue(json); [EOL]     assertNotNull(bean); [EOL] }
public void testCollectionLikeDeserialization() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setTypeFactory(mapper.getTypeFactory().withModifier(new MyTypeModifier())); [EOL]     mapper.registerModule(new ModifierModule()); [EOL]     MyMapLikeType result = mapper.readValue("{\"a\":13}", MyMapLikeType.class); [EOL]     assertEquals("a", result.getKey()); [EOL]     assertEquals(Integer.valueOf(13), result.getValue()); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
public void testSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setHandlerInstantiator(new MyInstantiator("xyz:")); [EOL]     assertEquals(quote("xyz:456"), mapper.writeValueAsString(new MyBean("456"))); [EOL] }
public void testSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setHandlerInstantiator(new MyInstantiator("xyz:")); [EOL]     assertEquals(quote("xyz:456"), mapper.writeValueAsString(new MyBean("456"))); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSimpleInclusionFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().addFilter("RootFilter", SimpleBeanPropertyFilter.filterOutAllExcept("a")); [EOL]     assertEquals("{\"a\":\"a\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.setFilters(prov); [EOL]     assertEquals("{\"a\":\"a\"}", mapper.writeValueAsString(new Bean())); [EOL] }
public void testSimpleInclusionFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().addFilter("RootFilter", SimpleBeanPropertyFilter.filterOutAllExcept("a")); [EOL]     assertEquals("{\"a\":\"a\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.setFilters(prov); [EOL]     assertEquals("{\"a\":\"a\"}", mapper.writeValueAsString(new Bean())); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSimpleInclusionFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().addFilter("RootFilter", SimpleBeanPropertyFilter.filterOutAllExcept("a")); [EOL]     assertEquals("{\"a\":\"a\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.setFilters(prov); [EOL]     assertEquals("{\"a\":\"a\"}", mapper.writeValueAsString(new Bean())); [EOL] }
public void testSimpleInclusionFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().addFilter("RootFilter", SimpleBeanPropertyFilter.filterOutAllExcept("a")); [EOL]     assertEquals("{\"a\":\"a\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.setFilters(prov); [EOL]     assertEquals("{\"a\":\"a\"}", mapper.writeValueAsString(new Bean())); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testSimpleUUIDForClassRoundTrip() throws Exception { [EOL]     UUIDNode root = new UUIDNode(1); [EOL]     UUIDNode child1 = new UUIDNode(2); [EOL]     UUIDNode child2 = new UUIDNode(3); [EOL]     root.first = child1; [EOL]     root.second = child2; [EOL]     child1.parent = root; [EOL]     child2.parent = root; [EOL]     child1.first = child2; [EOL]     String json = mapper.writeValueAsString(root); [EOL]     UUIDNode result = mapper.readValue(json, UUIDNode.class); [EOL]     assertEquals(1, result.value); [EOL]     UUIDNode result2 = result.first; [EOL]     UUIDNode result3 = result.second; [EOL]     assertNotNull(result2); [EOL]     assertNotNull(result3); [EOL]     assertEquals(2, result2.value); [EOL]     assertEquals(3, result3.value); [EOL]     assertSame(result, result2.parent); [EOL]     assertSame(result, result3.parent); [EOL]     assertSame(result3, result2.first); [EOL] }
public void testSimpleUUIDForClassRoundTrip() throws Exception { [EOL]     UUIDNode root = new UUIDNode(1); [EOL]     UUIDNode child1 = new UUIDNode(2); [EOL]     UUIDNode child2 = new UUIDNode(3); [EOL]     root.first = child1; [EOL]     root.second = child2; [EOL]     child1.parent = root; [EOL]     child2.parent = root; [EOL]     child1.first = child2; [EOL]     String json = mapper.writeValueAsString(root); [EOL]     UUIDNode result = mapper.readValue(json, UUIDNode.class); [EOL]     assertEquals(1, result.value); [EOL]     UUIDNode result2 = result.first; [EOL]     UUIDNode result3 = result.second; [EOL]     assertNotNull(result2); [EOL]     assertNotNull(result3); [EOL]     assertEquals(2, result2.value); [EOL]     assertEquals(3, result3.value); [EOL]     assertSame(result, result2.parent); [EOL]     assertSame(result, result3.parent); [EOL]     assertSame(result3, result2.first); [EOL] }
public void testSimpleUUIDForClassRoundTrip() throws Exception { [EOL]     UUIDNode root = new UUIDNode(1); [EOL]     UUIDNode child1 = new UUIDNode(2); [EOL]     UUIDNode child2 = new UUIDNode(3); [EOL]     root.first = child1; [EOL]     root.second = child2; [EOL]     child1.parent = root; [EOL]     child2.parent = root; [EOL]     child1.first = child2; [EOL]     String json = mapper.writeValueAsString(root); [EOL]     UUIDNode result = mapper.readValue(json, UUIDNode.class); [EOL]     assertEquals(1, result.value); [EOL]     UUIDNode result2 = result.first; [EOL]     UUIDNode result3 = result.second; [EOL]     assertNotNull(result2); [EOL]     assertNotNull(result3); [EOL]     assertEquals(2, result2.value); [EOL]     assertEquals(3, result3.value); [EOL]     assertSame(result, result2.parent); [EOL]     assertSame(result, result3.parent); [EOL]     assertSame(result3, result2.first); [EOL] }
public void testLocale() throws IOException { [EOL]     assertEquals(new Locale("en"), mapper.readValue(quote("en"), Locale.class)); [EOL]     assertEquals(new Locale("es", "ES"), mapper.readValue(quote("es_ES"), Locale.class)); [EOL]     assertEquals(new Locale("FI", "fi", "savo"), mapper.readValue(quote("fi_FI_savo"), Locale.class)); [EOL] }
public void testLocale() throws IOException { [EOL]     assertEquals(new Locale("en"), mapper.readValue(quote("en"), Locale.class)); [EOL]     assertEquals(new Locale("es", "ES"), mapper.readValue(quote("es_ES"), Locale.class)); [EOL]     assertEquals(new Locale("FI", "fi", "savo"), mapper.readValue(quote("fi_FI_savo"), Locale.class)); [EOL] }
public void testLocale() throws IOException { [EOL]     assertEquals(new Locale("en"), mapper.readValue(quote("en"), Locale.class)); [EOL]     assertEquals(new Locale("es", "ES"), mapper.readValue(quote("es_ES"), Locale.class)); [EOL]     assertEquals(new Locale("FI", "fi", "savo"), mapper.readValue(quote("fi_FI_savo"), Locale.class)); [EOL] }
public void testLocale() throws IOException { [EOL]     assertEquals(new Locale("en"), mapper.readValue(quote("en"), Locale.class)); [EOL]     assertEquals(new Locale("es", "ES"), mapper.readValue(quote("es_ES"), Locale.class)); [EOL]     assertEquals(new Locale("FI", "fi", "savo"), mapper.readValue(quote("fi_FI_savo"), Locale.class)); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testSimpleSetterlessCollectionFailure() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertTrue(m.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS)); [EOL]     m.configure(MapperFeature.USE_GETTERS_AS_SETTERS, false); [EOL]     assertFalse(m.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS)); [EOL]     try { [EOL]         m.readValue("{\"values\":[ \"abc\", \"def\" ]}", CollectionBean.class); [EOL]         fail("Expected an exception"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Unrecognized field"); [EOL]     } [EOL] }
public void testSimpleSetterlessCollectionFailure() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertTrue(m.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS)); [EOL]     m.configure(MapperFeature.USE_GETTERS_AS_SETTERS, false); [EOL]     assertFalse(m.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS)); [EOL]     try { [EOL]         m.readValue("{\"values\":[ \"abc\", \"def\" ]}", CollectionBean.class); [EOL]         fail("Expected an exception"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Unrecognized field"); [EOL]     } [EOL] }
public void testCustomDeserializationProperty() throws Exception { [EOL]     IdWrapperExt result = mapper.readValue(EXP_CUSTOM_VIA_PROP, IdWrapperExt.class); [EOL]     assertEquals(99, result.node.value); [EOL]     assertSame(result.node, result.node.next.node); [EOL]     assertEquals(3, result.node.customId); [EOL] }
public void testCustomDeserializationProperty() throws Exception { [EOL]     IdWrapperExt result = mapper.readValue(EXP_CUSTOM_VIA_PROP, IdWrapperExt.class); [EOL]     assertEquals(99, result.node.value); [EOL]     assertSame(result.node, result.node.next.node); [EOL]     assertEquals(3, result.node.customId); [EOL] }
public void testCustomDeserializationProperty() throws Exception { [EOL]     IdWrapperExt result = mapper.readValue(EXP_CUSTOM_VIA_PROP, IdWrapperExt.class); [EOL]     assertEquals(99, result.node.value); [EOL]     assertSame(result.node, result.node.next.node); [EOL]     assertEquals(3, result.node.customId); [EOL] }
public void testCustomDeserializationProperty() throws Exception { [EOL]     IdWrapperExt result = mapper.readValue(EXP_CUSTOM_VIA_PROP, IdWrapperExt.class); [EOL]     assertEquals(99, result.node.value); [EOL]     assertSame(result.node, result.node.next.node); [EOL]     assertEquals(3, result.node.customId); [EOL] }
public void testCustomDeserializationProperty() throws Exception { [EOL]     IdWrapperExt result = mapper.readValue(EXP_CUSTOM_VIA_PROP, IdWrapperExt.class); [EOL]     assertEquals(99, result.node.value); [EOL]     assertSame(result.node, result.node.next.node); [EOL]     assertEquals(3, result.node.customId); [EOL] }
public void testIssue811() throws Exception { [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.disable(MapperFeature.AUTO_DETECT_CREATORS); [EOL]     om.disable(MapperFeature.AUTO_DETECT_GETTERS); [EOL]     om.disable(MapperFeature.AUTO_DETECT_IS_GETTERS); [EOL]     om.setVisibility(PropertyAccessor.FIELD, Visibility.ANY); [EOL]     om.enable(SerializationFeature.WRITE_ENUMS_USING_INDEX); [EOL]     om.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     om.enableDefaultTypingAsProperty(DefaultTyping.NON_FINAL, "@class"); [EOL]     Process p = new Process(); [EOL]     Scope s = new Scope(p, null); [EOL]     FaultHandler fh = new FaultHandler(p); [EOL]     Catch c = new Catch(p, s); [EOL]     fh.catchBlocks.add(c); [EOL]     s.faultHandlers.add(fh); [EOL]     String json = om.writeValueAsString(p); [EOL]     Process restored = om.readValue(json, Process.class); [EOL]     assertNotNull(restored); [EOL]     assertEquals(0, p.id); [EOL]     assertEquals(3, p.children.size()); [EOL]     assertSame(p, p.children.get(0).owner); [EOL]     assertSame(p, p.children.get(1).owner); [EOL]     assertSame(p, p.children.get(2).owner); [EOL] }
public void testIssue811() throws Exception { [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.disable(MapperFeature.AUTO_DETECT_CREATORS); [EOL]     om.disable(MapperFeature.AUTO_DETECT_GETTERS); [EOL]     om.disable(MapperFeature.AUTO_DETECT_IS_GETTERS); [EOL]     om.setVisibility(PropertyAccessor.FIELD, Visibility.ANY); [EOL]     om.enable(SerializationFeature.WRITE_ENUMS_USING_INDEX); [EOL]     om.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     om.enableDefaultTypingAsProperty(DefaultTyping.NON_FINAL, "@class"); [EOL]     Process p = new Process(); [EOL]     Scope s = new Scope(p, null); [EOL]     FaultHandler fh = new FaultHandler(p); [EOL]     Catch c = new Catch(p, s); [EOL]     fh.catchBlocks.add(c); [EOL]     s.faultHandlers.add(fh); [EOL]     String json = om.writeValueAsString(p); [EOL]     Process restored = om.readValue(json, Process.class); [EOL]     assertNotNull(restored); [EOL]     assertEquals(0, p.id); [EOL]     assertEquals(3, p.children.size()); [EOL]     assertSame(p, p.children.get(0).owner); [EOL]     assertSame(p, p.children.get(1).owner); [EOL]     assertSame(p, p.children.get(2).owner); [EOL] }
public void testIssue811() throws Exception { [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.disable(MapperFeature.AUTO_DETECT_CREATORS); [EOL]     om.disable(MapperFeature.AUTO_DETECT_GETTERS); [EOL]     om.disable(MapperFeature.AUTO_DETECT_IS_GETTERS); [EOL]     om.setVisibility(PropertyAccessor.FIELD, Visibility.ANY); [EOL]     om.enable(SerializationFeature.WRITE_ENUMS_USING_INDEX); [EOL]     om.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     om.enableDefaultTypingAsProperty(DefaultTyping.NON_FINAL, "@class"); [EOL]     Process p = new Process(); [EOL]     Scope s = new Scope(p, null); [EOL]     FaultHandler fh = new FaultHandler(p); [EOL]     Catch c = new Catch(p, s); [EOL]     fh.catchBlocks.add(c); [EOL]     s.faultHandlers.add(fh); [EOL]     String json = om.writeValueAsString(p); [EOL]     Process restored = om.readValue(json, Process.class); [EOL]     assertNotNull(restored); [EOL]     assertEquals(0, p.id); [EOL]     assertEquals(3, p.children.size()); [EOL]     assertSame(p, p.children.get(0).owner); [EOL]     assertSame(p, p.children.get(1).owner); [EOL]     assertSame(p, p.children.get(2).owner); [EOL] }
public void testIssue811() throws Exception { [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.disable(MapperFeature.AUTO_DETECT_CREATORS); [EOL]     om.disable(MapperFeature.AUTO_DETECT_GETTERS); [EOL]     om.disable(MapperFeature.AUTO_DETECT_IS_GETTERS); [EOL]     om.setVisibility(PropertyAccessor.FIELD, Visibility.ANY); [EOL]     om.enable(SerializationFeature.WRITE_ENUMS_USING_INDEX); [EOL]     om.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     om.enableDefaultTypingAsProperty(DefaultTyping.NON_FINAL, "@class"); [EOL]     Process p = new Process(); [EOL]     Scope s = new Scope(p, null); [EOL]     FaultHandler fh = new FaultHandler(p); [EOL]     Catch c = new Catch(p, s); [EOL]     fh.catchBlocks.add(c); [EOL]     s.faultHandlers.add(fh); [EOL]     String json = om.writeValueAsString(p); [EOL]     Process restored = om.readValue(json, Process.class); [EOL]     assertNotNull(restored); [EOL]     assertEquals(0, p.id); [EOL]     assertEquals(3, p.children.size()); [EOL]     assertSame(p, p.children.get(0).owner); [EOL]     assertSame(p, p.children.get(1).owner); [EOL]     assertSame(p, p.children.get(2).owner); [EOL] }
public void testIssue811() throws Exception { [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.disable(MapperFeature.AUTO_DETECT_CREATORS); [EOL]     om.disable(MapperFeature.AUTO_DETECT_GETTERS); [EOL]     om.disable(MapperFeature.AUTO_DETECT_IS_GETTERS); [EOL]     om.setVisibility(PropertyAccessor.FIELD, Visibility.ANY); [EOL]     om.enable(SerializationFeature.WRITE_ENUMS_USING_INDEX); [EOL]     om.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     om.enableDefaultTypingAsProperty(DefaultTyping.NON_FINAL, "@class"); [EOL]     Process p = new Process(); [EOL]     Scope s = new Scope(p, null); [EOL]     FaultHandler fh = new FaultHandler(p); [EOL]     Catch c = new Catch(p, s); [EOL]     fh.catchBlocks.add(c); [EOL]     s.faultHandlers.add(fh); [EOL]     String json = om.writeValueAsString(p); [EOL]     Process restored = om.readValue(json, Process.class); [EOL]     assertNotNull(restored); [EOL]     assertEquals(0, p.id); [EOL]     assertEquals(3, p.children.size()); [EOL]     assertSame(p, p.children.get(0).owner); [EOL]     assertSame(p, p.children.get(1).owner); [EOL]     assertSame(p, p.children.get(2).owner); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testWithFactoryAndDelegate() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setInjectableValues(new InjectableValues.Std().addValue(String.class, "Fygar")); [EOL]     FactoryBean711 bean = null; [EOL]     try { [EOL]         bean = mapper.readValue("38", FactoryBean711.class); [EOL]     } catch (JsonMappingException e) { [EOL]         fail("Did not expect problems, got: " + e.getMessage()); [EOL]     } [EOL]     assertEquals(38, bean.age); [EOL]     assertEquals("Fygar", bean.name1); [EOL]     assertEquals("Fygar", bean.name2); [EOL] }
public void testWithFactoryAndDelegate() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setInjectableValues(new InjectableValues.Std().addValue(String.class, "Fygar")); [EOL]     FactoryBean711 bean = null; [EOL]     try { [EOL]         bean = mapper.readValue("38", FactoryBean711.class); [EOL]     } catch (JsonMappingException e) { [EOL]         fail("Did not expect problems, got: " + e.getMessage()); [EOL]     } [EOL]     assertEquals(38, bean.age); [EOL]     assertEquals("Fygar", bean.name1); [EOL]     assertEquals("Fygar", bean.name2); [EOL] }
public void testWithFactoryAndDelegate() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setInjectableValues(new InjectableValues.Std().addValue(String.class, "Fygar")); [EOL]     FactoryBean711 bean = null; [EOL]     try { [EOL]         bean = mapper.readValue("38", FactoryBean711.class); [EOL]     } catch (JsonMappingException e) { [EOL]         fail("Did not expect problems, got: " + e.getMessage()); [EOL]     } [EOL]     assertEquals(38, bean.age); [EOL]     assertEquals("Fygar", bean.name1); [EOL]     assertEquals("Fygar", bean.name2); [EOL] }
public void testWithFactoryAndDelegate() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setInjectableValues(new InjectableValues.Std().addValue(String.class, "Fygar")); [EOL]     FactoryBean711 bean = null; [EOL]     try { [EOL]         bean = mapper.readValue("38", FactoryBean711.class); [EOL]     } catch (JsonMappingException e) { [EOL]         fail("Did not expect problems, got: " + e.getMessage()); [EOL]     } [EOL]     assertEquals(38, bean.age); [EOL]     assertEquals("Fygar", bean.name1); [EOL]     assertEquals("Fygar", bean.name2); [EOL] }
public void testWithFactoryAndDelegate() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setInjectableValues(new InjectableValues.Std().addValue(String.class, "Fygar")); [EOL]     FactoryBean711 bean = null; [EOL]     try { [EOL]         bean = mapper.readValue("38", FactoryBean711.class); [EOL]     } catch (JsonMappingException e) { [EOL]         fail("Did not expect problems, got: " + e.getMessage()); [EOL]     } [EOL]     assertEquals(38, bean.age); [EOL]     assertEquals("Fygar", bean.name1); [EOL]     assertEquals("Fygar", bean.name2); [EOL] }
public void testWithFactoryAndDelegate() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setInjectableValues(new InjectableValues.Std().addValue(String.class, "Fygar")); [EOL]     FactoryBean711 bean = null; [EOL]     try { [EOL]         bean = mapper.readValue("38", FactoryBean711.class); [EOL]     } catch (JsonMappingException e) { [EOL]         fail("Did not expect problems, got: " + e.getMessage()); [EOL]     } [EOL]     assertEquals(38, bean.age); [EOL]     assertEquals("Fygar", bean.name1); [EOL]     assertEquals("Fygar", bean.name2); [EOL] }
public void testWithFactoryAndDelegate() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setInjectableValues(new InjectableValues.Std().addValue(String.class, "Fygar")); [EOL]     FactoryBean711 bean = null; [EOL]     try { [EOL]         bean = mapper.readValue("38", FactoryBean711.class); [EOL]     } catch (JsonMappingException e) { [EOL]         fail("Did not expect problems, got: " + e.getMessage()); [EOL]     } [EOL]     assertEquals(38, bean.age); [EOL]     assertEquals("Fygar", bean.name1); [EOL]     assertEquals("Fygar", bean.name2); [EOL] }
public void testSimpleUUIDForClassRoundTrip() throws Exception { [EOL]     UUIDNode root = new UUIDNode(1); [EOL]     UUIDNode child1 = new UUIDNode(2); [EOL]     UUIDNode child2 = new UUIDNode(3); [EOL]     root.first = child1; [EOL]     root.second = child2; [EOL]     child1.parent = root; [EOL]     child2.parent = root; [EOL]     child1.first = child2; [EOL]     String json = mapper.writeValueAsString(root); [EOL]     UUIDNode result = mapper.readValue(json, UUIDNode.class); [EOL]     assertEquals(1, result.value); [EOL]     UUIDNode result2 = result.first; [EOL]     UUIDNode result3 = result.second; [EOL]     assertNotNull(result2); [EOL]     assertNotNull(result3); [EOL]     assertEquals(2, result2.value); [EOL]     assertEquals(3, result3.value); [EOL]     assertSame(result, result2.parent); [EOL]     assertSame(result, result3.parent); [EOL]     assertSame(result3, result2.first); [EOL] }
public void testSimpleUUIDForClassRoundTrip() throws Exception { [EOL]     UUIDNode root = new UUIDNode(1); [EOL]     UUIDNode child1 = new UUIDNode(2); [EOL]     UUIDNode child2 = new UUIDNode(3); [EOL]     root.first = child1; [EOL]     root.second = child2; [EOL]     child1.parent = root; [EOL]     child2.parent = root; [EOL]     child1.first = child2; [EOL]     String json = mapper.writeValueAsString(root); [EOL]     UUIDNode result = mapper.readValue(json, UUIDNode.class); [EOL]     assertEquals(1, result.value); [EOL]     UUIDNode result2 = result.first; [EOL]     UUIDNode result3 = result.second; [EOL]     assertNotNull(result2); [EOL]     assertNotNull(result3); [EOL]     assertEquals(2, result2.value); [EOL]     assertEquals(3, result3.value); [EOL]     assertSame(result, result2.parent); [EOL]     assertSame(result, result3.parent); [EOL]     assertSame(result3, result2.first); [EOL] }
public void testSimpleUUIDForClassRoundTrip() throws Exception { [EOL]     UUIDNode root = new UUIDNode(1); [EOL]     UUIDNode child1 = new UUIDNode(2); [EOL]     UUIDNode child2 = new UUIDNode(3); [EOL]     root.first = child1; [EOL]     root.second = child2; [EOL]     child1.parent = root; [EOL]     child2.parent = root; [EOL]     child1.first = child2; [EOL]     String json = mapper.writeValueAsString(root); [EOL]     UUIDNode result = mapper.readValue(json, UUIDNode.class); [EOL]     assertEquals(1, result.value); [EOL]     UUIDNode result2 = result.first; [EOL]     UUIDNode result3 = result.second; [EOL]     assertNotNull(result2); [EOL]     assertNotNull(result3); [EOL]     assertEquals(2, result2.value); [EOL]     assertEquals(3, result3.value); [EOL]     assertSame(result, result2.parent); [EOL]     assertSame(result, result3.parent); [EOL]     assertSame(result3, result2.first); [EOL] }
public void testSpecialMap() throws IOException { [EOL]     final ObjectWrapperMap map = MAPPER.readValue(UNTYPED_MAP_JSON, ObjectWrapperMap.class); [EOL]     _doTestUntyped(map); [EOL] }
public void testSpecialMap() throws IOException { [EOL]     final ObjectWrapperMap map = MAPPER.readValue(UNTYPED_MAP_JSON, ObjectWrapperMap.class); [EOL]     _doTestUntyped(map); [EOL] }
public void testSpecialMap() throws IOException { [EOL]     final ObjectWrapperMap map = MAPPER.readValue(UNTYPED_MAP_JSON, ObjectWrapperMap.class); [EOL]     _doTestUntyped(map); [EOL] }
public void testSpecialMap() throws IOException { [EOL]     final ObjectWrapperMap map = MAPPER.readValue(UNTYPED_MAP_JSON, ObjectWrapperMap.class); [EOL]     _doTestUntyped(map); [EOL] }
public void testSpecialMap() throws IOException { [EOL]     final ObjectWrapperMap map = MAPPER.readValue(UNTYPED_MAP_JSON, ObjectWrapperMap.class); [EOL]     _doTestUntyped(map); [EOL] }
public void testSpecialMap() throws IOException { [EOL]     final ObjectWrapperMap map = MAPPER.readValue(UNTYPED_MAP_JSON, ObjectWrapperMap.class); [EOL]     _doTestUntyped(map); [EOL] }
public void testSpecialMap() throws IOException { [EOL]     final ObjectWrapperMap map = MAPPER.readValue(UNTYPED_MAP_JSON, ObjectWrapperMap.class); [EOL]     _doTestUntyped(map); [EOL] }
public void testSpecialMap() throws IOException { [EOL]     final ObjectWrapperMap map = MAPPER.readValue(UNTYPED_MAP_JSON, ObjectWrapperMap.class); [EOL]     _doTestUntyped(map); [EOL] }
public void testSpecialMap() throws IOException { [EOL]     final ObjectWrapperMap map = MAPPER.readValue(UNTYPED_MAP_JSON, ObjectWrapperMap.class); [EOL]     _doTestUntyped(map); [EOL] }
public void testSpecialMap() throws IOException { [EOL]     final ObjectWrapperMap map = MAPPER.readValue(UNTYPED_MAP_JSON, ObjectWrapperMap.class); [EOL]     _doTestUntyped(map); [EOL] }
public void testSimpleSetterlessCollectionFailure() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertTrue(m.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS)); [EOL]     m.configure(MapperFeature.USE_GETTERS_AS_SETTERS, false); [EOL]     assertFalse(m.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS)); [EOL]     try { [EOL]         m.readValue("{\"values\":[ \"abc\", \"def\" ]}", CollectionBean.class); [EOL]         fail("Expected an exception"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Unrecognized field"); [EOL]     } [EOL] }
public void testSimpleSetterlessCollectionFailure() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertTrue(m.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS)); [EOL]     m.configure(MapperFeature.USE_GETTERS_AS_SETTERS, false); [EOL]     assertFalse(m.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS)); [EOL]     try { [EOL]         m.readValue("{\"values\":[ \"abc\", \"def\" ]}", CollectionBean.class); [EOL]         fail("Expected an exception"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Unrecognized field"); [EOL]     } [EOL] }
public void testSimpleSetterlessCollectionFailure() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertTrue(m.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS)); [EOL]     m.configure(MapperFeature.USE_GETTERS_AS_SETTERS, false); [EOL]     assertFalse(m.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS)); [EOL]     try { [EOL]         m.readValue("{\"values\":[ \"abc\", \"def\" ]}", CollectionBean.class); [EOL]         fail("Expected an exception"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Unrecognized field"); [EOL]     } [EOL] }
public void testSimpleBuilder() throws Exception { [EOL]     ValueClassXY value = MAPPER.readValue("[1,2]", ValueClassXY.class); [EOL]     assertEquals(2, value._x); [EOL]     assertEquals(3, value._y); [EOL] }
public void testWithCreator() throws Exception { [EOL]     final String json = "{\"a\":1,\"c\":3,\"b\":2}"; [EOL]     CreatorValue value = mapper.readValue(json, CreatorValue.class); [EOL]     assertEquals(1, value.a); [EOL]     assertEquals(2, value.b); [EOL]     assertEquals(3, value.c); [EOL] }
public void testWithCreator() throws Exception { [EOL]     final String json = "{\"a\":1,\"c\":3,\"b\":2}"; [EOL]     CreatorValue value = mapper.readValue(json, CreatorValue.class); [EOL]     assertEquals(1, value.a); [EOL]     assertEquals(2, value.b); [EOL]     assertEquals(3, value.c); [EOL] }
public void testWithCreator() throws Exception { [EOL]     final String json = "{\"a\":1,\"c\":3,\"b\":2}"; [EOL]     CreatorValue value = mapper.readValue(json, CreatorValue.class); [EOL]     assertEquals(1, value.a); [EOL]     assertEquals(2, value.b); [EOL]     assertEquals(3, value.c); [EOL] }
public void testWithCreator() throws Exception { [EOL]     final String json = "{\"a\":1,\"c\":3,\"b\":2}"; [EOL]     CreatorValue value = mapper.readValue(json, CreatorValue.class); [EOL]     assertEquals(1, value.a); [EOL]     assertEquals(2, value.b); [EOL]     assertEquals(3, value.c); [EOL] }
public void testWithCreator() throws Exception { [EOL]     final String json = "{\"a\":1,\"c\":3,\"b\":2}"; [EOL]     CreatorValue value = mapper.readValue(json, CreatorValue.class); [EOL]     assertEquals(1, value.a); [EOL]     assertEquals(2, value.b); [EOL]     assertEquals(3, value.c); [EOL] }
public void testWithCreator() throws Exception { [EOL]     final String json = "{\"a\":1,\"c\":3,\"b\":2}"; [EOL]     CreatorValue value = mapper.readValue(json, CreatorValue.class); [EOL]     assertEquals(1, value.a); [EOL]     assertEquals(2, value.b); [EOL]     assertEquals(3, value.c); [EOL] }
public void testWithCreator() throws Exception { [EOL]     final String json = "{\"a\":1,\"c\":3,\"b\":2}"; [EOL]     CreatorValue value = mapper.readValue(json, CreatorValue.class); [EOL]     assertEquals(1, value.a); [EOL]     assertEquals(2, value.b); [EOL]     assertEquals(3, value.c); [EOL] }
public void testWithCreator() throws Exception { [EOL]     final String json = "{\"a\":1,\"c\":3,\"b\":2}"; [EOL]     CreatorValue value = mapper.readValue(json, CreatorValue.class); [EOL]     assertEquals(1, value.a); [EOL]     assertEquals(2, value.b); [EOL]     assertEquals(3, value.c); [EOL] }
public void testWithCreator() throws Exception { [EOL]     final String json = "{\"a\":1,\"c\":3,\"b\":2}"; [EOL]     CreatorValue value = mapper.readValue(json, CreatorValue.class); [EOL]     assertEquals(1, value.a); [EOL]     assertEquals(2, value.b); [EOL]     assertEquals(3, value.c); [EOL] }
public void testWithCreator() throws Exception { [EOL]     final String json = "{\"a\":1,\"c\":3,\"b\":2}"; [EOL]     CreatorValue value = mapper.readValue(json, CreatorValue.class); [EOL]     assertEquals(1, value.a); [EOL]     assertEquals(2, value.b); [EOL]     assertEquals(3, value.c); [EOL] }
public void testWithCreator() throws Exception { [EOL]     final String json = "{\"a\":1,\"c\":3,\"b\":2}"; [EOL]     CreatorValue value = mapper.readValue(json, CreatorValue.class); [EOL]     assertEquals(1, value.a); [EOL]     assertEquals(2, value.b); [EOL]     assertEquals(3, value.c); [EOL] }
public void testWithCreator() throws Exception { [EOL]     final String json = "{\"a\":1,\"c\":3,\"b\":2}"; [EOL]     CreatorValue value = mapper.readValue(json, CreatorValue.class); [EOL]     assertEquals(1, value.a); [EOL]     assertEquals(2, value.b); [EOL]     assertEquals(3, value.c); [EOL] }
public void testWithCreator() throws Exception { [EOL]     final String json = "{\"a\":1,\"c\":3,\"b\":2}"; [EOL]     CreatorValue value = mapper.readValue(json, CreatorValue.class); [EOL]     assertEquals(1, value.a); [EOL]     assertEquals(2, value.b); [EOL]     assertEquals(3, value.c); [EOL] }
public void testWithCreator() throws Exception { [EOL]     final String json = "{\"a\":1,\"c\":3,\"b\":2}"; [EOL]     CreatorValue value = mapper.readValue(json, CreatorValue.class); [EOL]     assertEquals(1, value.a); [EOL]     assertEquals(2, value.b); [EOL]     assertEquals(3, value.c); [EOL] }
public void testWithCreator() throws Exception { [EOL]     final String json = "{\"a\":1,\"c\":3,\"b\":2}"; [EOL]     CreatorValue value = mapper.readValue(json, CreatorValue.class); [EOL]     assertEquals(1, value.a); [EOL]     assertEquals(2, value.b); [EOL]     assertEquals(3, value.c); [EOL] }
public void testWithCreator() throws Exception { [EOL]     final String json = "{\"a\":1,\"c\":3,\"b\":2}"; [EOL]     CreatorValue value = mapper.readValue(json, CreatorValue.class); [EOL]     assertEquals(1, value.a); [EOL]     assertEquals(2, value.b); [EOL]     assertEquals(3, value.c); [EOL] }
public void testWithCreator() throws Exception { [EOL]     final String json = "{\"a\":1,\"c\":3,\"b\":2}"; [EOL]     CreatorValue value = mapper.readValue(json, CreatorValue.class); [EOL]     assertEquals(1, value.a); [EOL]     assertEquals(2, value.b); [EOL]     assertEquals(3, value.c); [EOL] }
public void testWithCreator() throws Exception { [EOL]     final String json = "{\"a\":1,\"c\":3,\"b\":2}"; [EOL]     CreatorValue value = mapper.readValue(json, CreatorValue.class); [EOL]     assertEquals(1, value.a); [EOL]     assertEquals(2, value.b); [EOL]     assertEquals(3, value.c); [EOL] }
public void testWithCreator() throws Exception { [EOL]     final String json = "{\"a\":1,\"c\":3,\"b\":2}"; [EOL]     CreatorValue value = mapper.readValue(json, CreatorValue.class); [EOL]     assertEquals(1, value.a); [EOL]     assertEquals(2, value.b); [EOL]     assertEquals(3, value.c); [EOL] }
public void testWithCreator() throws Exception { [EOL]     final String json = "{\"a\":1,\"c\":3,\"b\":2}"; [EOL]     CreatorValue value = mapper.readValue(json, CreatorValue.class); [EOL]     assertEquals(1, value.a); [EOL]     assertEquals(2, value.b); [EOL]     assertEquals(3, value.c); [EOL] }
public void testWithCreator() throws Exception { [EOL]     final String json = "{\"a\":1,\"c\":3,\"b\":2}"; [EOL]     CreatorValue value = mapper.readValue(json, CreatorValue.class); [EOL]     assertEquals(1, value.a); [EOL]     assertEquals(2, value.b); [EOL]     assertEquals(3, value.c); [EOL] }
public void testWithCreator() throws Exception { [EOL]     final String json = "{\"a\":1,\"c\":3,\"b\":2}"; [EOL]     CreatorValue value = mapper.readValue(json, CreatorValue.class); [EOL]     assertEquals(1, value.a); [EOL]     assertEquals(2, value.b); [EOL]     assertEquals(3, value.c); [EOL] }
public void testWithCreator() throws Exception { [EOL]     final String json = "{\"a\":1,\"c\":3,\"b\":2}"; [EOL]     CreatorValue value = mapper.readValue(json, CreatorValue.class); [EOL]     assertEquals(1, value.a); [EOL]     assertEquals(2, value.b); [EOL]     assertEquals(3, value.c); [EOL] }
public void testSimple() throws Exception { [EOL]     Bean bean = mapper.readValue("{\"a\":3, \"aa\":\"foo\", \"b\": 9 }", Bean.class); [EOL]     assertEquals(3, bean.a); [EOL]     assertEquals("foo", bean.aa); [EOL]     assertEquals(9, bean.b); [EOL]     bean = mapper.readerWithView(ViewAA.class).withType(Bean.class).readValue("{\"a\":3, \"aa\":\"foo\", \"b\": 9 }"); [EOL]     assertEquals(3, bean.a); [EOL]     assertEquals("foo", bean.aa); [EOL]     assertEquals(0, bean.b); [EOL]     bean = mapper.readerWithView(ViewA.class).withType(Bean.class).readValue("{\"a\":1, \"aa\":\"x\", \"b\": 3 }"); [EOL]     assertEquals(1, bean.a); [EOL]     assertNull(bean.aa); [EOL]     assertEquals(0, bean.b); [EOL]     bean = mapper.reader(Bean.class).withView(ViewB.class).readValue("{\"a\":-3, \"aa\":\"y\", \"b\": 2 }"); [EOL]     assertEquals(0, bean.a); [EOL]     assertEquals("y", bean.aa); [EOL]     assertEquals(2, bean.b); [EOL] }
public void testSimple() throws Exception { [EOL]     Bean bean = mapper.readValue("{\"a\":3, \"aa\":\"foo\", \"b\": 9 }", Bean.class); [EOL]     assertEquals(3, bean.a); [EOL]     assertEquals("foo", bean.aa); [EOL]     assertEquals(9, bean.b); [EOL]     bean = mapper.readerWithView(ViewAA.class).withType(Bean.class).readValue("{\"a\":3, \"aa\":\"foo\", \"b\": 9 }"); [EOL]     assertEquals(3, bean.a); [EOL]     assertEquals("foo", bean.aa); [EOL]     assertEquals(0, bean.b); [EOL]     bean = mapper.readerWithView(ViewA.class).withType(Bean.class).readValue("{\"a\":1, \"aa\":\"x\", \"b\": 3 }"); [EOL]     assertEquals(1, bean.a); [EOL]     assertNull(bean.aa); [EOL]     assertEquals(0, bean.b); [EOL]     bean = mapper.reader(Bean.class).withView(ViewB.class).readValue("{\"a\":-3, \"aa\":\"y\", \"b\": 2 }"); [EOL]     assertEquals(0, bean.a); [EOL]     assertEquals("y", bean.aa); [EOL]     assertEquals(2, bean.b); [EOL] }
public void testSimple() throws Exception { [EOL]     Bean bean = mapper.readValue("{\"a\":3, \"aa\":\"foo\", \"b\": 9 }", Bean.class); [EOL]     assertEquals(3, bean.a); [EOL]     assertEquals("foo", bean.aa); [EOL]     assertEquals(9, bean.b); [EOL]     bean = mapper.readerWithView(ViewAA.class).withType(Bean.class).readValue("{\"a\":3, \"aa\":\"foo\", \"b\": 9 }"); [EOL]     assertEquals(3, bean.a); [EOL]     assertEquals("foo", bean.aa); [EOL]     assertEquals(0, bean.b); [EOL]     bean = mapper.readerWithView(ViewA.class).withType(Bean.class).readValue("{\"a\":1, \"aa\":\"x\", \"b\": 3 }"); [EOL]     assertEquals(1, bean.a); [EOL]     assertNull(bean.aa); [EOL]     assertEquals(0, bean.b); [EOL]     bean = mapper.reader(Bean.class).withView(ViewB.class).readValue("{\"a\":-3, \"aa\":\"y\", \"b\": 2 }"); [EOL]     assertEquals(0, bean.a); [EOL]     assertEquals("y", bean.aa); [EOL]     assertEquals(2, bean.b); [EOL] }
public void testSimple() throws Exception { [EOL]     Bean bean = mapper.readValue("{\"a\":3, \"aa\":\"foo\", \"b\": 9 }", Bean.class); [EOL]     assertEquals(3, bean.a); [EOL]     assertEquals("foo", bean.aa); [EOL]     assertEquals(9, bean.b); [EOL]     bean = mapper.readerWithView(ViewAA.class).withType(Bean.class).readValue("{\"a\":3, \"aa\":\"foo\", \"b\": 9 }"); [EOL]     assertEquals(3, bean.a); [EOL]     assertEquals("foo", bean.aa); [EOL]     assertEquals(0, bean.b); [EOL]     bean = mapper.readerWithView(ViewA.class).withType(Bean.class).readValue("{\"a\":1, \"aa\":\"x\", \"b\": 3 }"); [EOL]     assertEquals(1, bean.a); [EOL]     assertNull(bean.aa); [EOL]     assertEquals(0, bean.b); [EOL]     bean = mapper.reader(Bean.class).withView(ViewB.class).readValue("{\"a\":-3, \"aa\":\"y\", \"b\": 2 }"); [EOL]     assertEquals(0, bean.a); [EOL]     assertEquals("y", bean.aa); [EOL]     assertEquals(2, bean.b); [EOL] }
public void testSimple() throws Exception { [EOL]     Bean bean = mapper.readValue("{\"a\":3, \"aa\":\"foo\", \"b\": 9 }", Bean.class); [EOL]     assertEquals(3, bean.a); [EOL]     assertEquals("foo", bean.aa); [EOL]     assertEquals(9, bean.b); [EOL]     bean = mapper.readerWithView(ViewAA.class).withType(Bean.class).readValue("{\"a\":3, \"aa\":\"foo\", \"b\": 9 }"); [EOL]     assertEquals(3, bean.a); [EOL]     assertEquals("foo", bean.aa); [EOL]     assertEquals(0, bean.b); [EOL]     bean = mapper.readerWithView(ViewA.class).withType(Bean.class).readValue("{\"a\":1, \"aa\":\"x\", \"b\": 3 }"); [EOL]     assertEquals(1, bean.a); [EOL]     assertNull(bean.aa); [EOL]     assertEquals(0, bean.b); [EOL]     bean = mapper.reader(Bean.class).withView(ViewB.class).readValue("{\"a\":-3, \"aa\":\"y\", \"b\": 2 }"); [EOL]     assertEquals(0, bean.a); [EOL]     assertEquals("y", bean.aa); [EOL]     assertEquals(2, bean.b); [EOL] }
public void testSimple() throws Exception { [EOL]     Bean bean = mapper.readValue("{\"a\":3, \"aa\":\"foo\", \"b\": 9 }", Bean.class); [EOL]     assertEquals(3, bean.a); [EOL]     assertEquals("foo", bean.aa); [EOL]     assertEquals(9, bean.b); [EOL]     bean = mapper.readerWithView(ViewAA.class).withType(Bean.class).readValue("{\"a\":3, \"aa\":\"foo\", \"b\": 9 }"); [EOL]     assertEquals(3, bean.a); [EOL]     assertEquals("foo", bean.aa); [EOL]     assertEquals(0, bean.b); [EOL]     bean = mapper.readerWithView(ViewA.class).withType(Bean.class).readValue("{\"a\":1, \"aa\":\"x\", \"b\": 3 }"); [EOL]     assertEquals(1, bean.a); [EOL]     assertNull(bean.aa); [EOL]     assertEquals(0, bean.b); [EOL]     bean = mapper.reader(Bean.class).withView(ViewB.class).readValue("{\"a\":-3, \"aa\":\"y\", \"b\": 2 }"); [EOL]     assertEquals(0, bean.a); [EOL]     assertEquals("y", bean.aa); [EOL]     assertEquals(2, bean.b); [EOL] }
public void testSimple() throws Exception { [EOL]     Bean bean = mapper.readValue("{\"a\":3, \"aa\":\"foo\", \"b\": 9 }", Bean.class); [EOL]     assertEquals(3, bean.a); [EOL]     assertEquals("foo", bean.aa); [EOL]     assertEquals(9, bean.b); [EOL]     bean = mapper.readerWithView(ViewAA.class).withType(Bean.class).readValue("{\"a\":3, \"aa\":\"foo\", \"b\": 9 }"); [EOL]     assertEquals(3, bean.a); [EOL]     assertEquals("foo", bean.aa); [EOL]     assertEquals(0, bean.b); [EOL]     bean = mapper.readerWithView(ViewA.class).withType(Bean.class).readValue("{\"a\":1, \"aa\":\"x\", \"b\": 3 }"); [EOL]     assertEquals(1, bean.a); [EOL]     assertNull(bean.aa); [EOL]     assertEquals(0, bean.b); [EOL]     bean = mapper.reader(Bean.class).withView(ViewB.class).readValue("{\"a\":-3, \"aa\":\"y\", \"b\": 2 }"); [EOL]     assertEquals(0, bean.a); [EOL]     assertEquals("y", bean.aa); [EOL]     assertEquals(2, bean.b); [EOL] }
public void testSimple() throws Exception { [EOL]     Bean bean = mapper.readValue("{\"a\":3, \"aa\":\"foo\", \"b\": 9 }", Bean.class); [EOL]     assertEquals(3, bean.a); [EOL]     assertEquals("foo", bean.aa); [EOL]     assertEquals(9, bean.b); [EOL]     bean = mapper.readerWithView(ViewAA.class).withType(Bean.class).readValue("{\"a\":3, \"aa\":\"foo\", \"b\": 9 }"); [EOL]     assertEquals(3, bean.a); [EOL]     assertEquals("foo", bean.aa); [EOL]     assertEquals(0, bean.b); [EOL]     bean = mapper.readerWithView(ViewA.class).withType(Bean.class).readValue("{\"a\":1, \"aa\":\"x\", \"b\": 3 }"); [EOL]     assertEquals(1, bean.a); [EOL]     assertNull(bean.aa); [EOL]     assertEquals(0, bean.b); [EOL]     bean = mapper.reader(Bean.class).withView(ViewB.class).readValue("{\"a\":-3, \"aa\":\"y\", \"b\": 2 }"); [EOL]     assertEquals(0, bean.a); [EOL]     assertEquals("y", bean.aa); [EOL]     assertEquals(2, bean.b); [EOL] }
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(NullNode.instance, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(NullNode.instance, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(NullNode.instance, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(NullNode.instance, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(NullNode.instance, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(NullNode.instance, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(NullNode.instance, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(NullNode.instance, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(NullNode.instance, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(NullNode.instance, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(NullNode.instance, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(NullNode.instance, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(NullNode.instance, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(NullNode.instance, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(NullNode.instance, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(NullNode.instance, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(NullNode.instance, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(NullNode.instance, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(NullNode.instance, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(NullNode.instance, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(NullNode.instance, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(NullNode.instance, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testIgnored() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES); [EOL]     _testIgnorals(mapper); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testMissingFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.writeValueAsString(new Bean()); [EOL]         fail("Should have failed without configured filter"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Can not resolve BeanPropertyFilter with id 'RootFilter'"); [EOL]     } [EOL]     SimpleFilterProvider fp = new SimpleFilterProvider().setFailOnUnknownId(false); [EOL]     mapper.setFilters(fp); [EOL]     String json = mapper.writeValueAsString(new Bean()); [EOL]     assertEquals("{\"a\":\"a\",\"b\":\"b\"}", json); [EOL] }
public void testMissingFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.writeValueAsString(new Bean()); [EOL]         fail("Should have failed without configured filter"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Can not resolve BeanPropertyFilter with id 'RootFilter'"); [EOL]     } [EOL]     SimpleFilterProvider fp = new SimpleFilterProvider().setFailOnUnknownId(false); [EOL]     mapper.setFilters(fp); [EOL]     String json = mapper.writeValueAsString(new Bean()); [EOL]     assertEquals("{\"a\":\"a\",\"b\":\"b\"}", json); [EOL] }
public void testContextualViaAnnotation() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     AnnotatedContextualBean bean = new AnnotatedContextualBean("abc"); [EOL]     assertEquals("{\"value\":\"prefix->abc\"}", mapper.writeValueAsString(bean)); [EOL] }
public void testContextualViaAnnotation() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     AnnotatedContextualBean bean = new AnnotatedContextualBean("abc"); [EOL]     assertEquals("{\"value\":\"prefix->abc\"}", mapper.writeValueAsString(bean)); [EOL] }
public void testContextualViaAnnotation() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     AnnotatedContextualBean bean = new AnnotatedContextualBean("abc"); [EOL]     assertEquals("{\"value\":\"prefix->abc\"}", mapper.writeValueAsString(bean)); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testIssue797() throws Exception { [EOL]     String json = MAPPER.writeValueAsString(new Bean797BaseImpl()); [EOL]     assertEquals("{}", json); [EOL] }
public void testCurrency() throws IOException { [EOL]     Currency usd = Currency.getInstance("USD"); [EOL]     assertEquals(quote("USD"), MAPPER.writeValueAsString(usd)); [EOL] }
public void testCurrency() throws IOException { [EOL]     Currency usd = Currency.getInstance("USD"); [EOL]     assertEquals(quote("USD"), MAPPER.writeValueAsString(usd)); [EOL] }
public void testCustomPropertyViaProperty() throws Exception { [EOL]     IdWrapperCustom src = new IdWrapperCustom(123, 7); [EOL]     src.node.next = src; [EOL]     String json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL]     json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL] }
public void testCustomPropertyViaProperty() throws Exception { [EOL]     IdWrapperCustom src = new IdWrapperCustom(123, 7); [EOL]     src.node.next = src; [EOL]     String json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL]     json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL] }
public void testCustomPropertyViaProperty() throws Exception { [EOL]     IdWrapperCustom src = new IdWrapperCustom(123, 7); [EOL]     src.node.next = src; [EOL]     String json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL]     json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL] }
public void testCustomPropertyViaProperty() throws Exception { [EOL]     IdWrapperCustom src = new IdWrapperCustom(123, 7); [EOL]     src.node.next = src; [EOL]     String json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL]     json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL] }
public void testCustomPropertyViaProperty() throws Exception { [EOL]     IdWrapperCustom src = new IdWrapperCustom(123, 7); [EOL]     src.node.next = src; [EOL]     String json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL]     json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testIterable() throws IOException { [EOL]     StringWriter sw = new StringWriter(); [EOL]     MAPPER.writeValue(sw, new IterableWrapper(new int[] { 1, 2, 3 })); [EOL]     assertEquals("[1,2,3]", sw.toString().trim()); [EOL] }
public void testIterable() throws IOException { [EOL]     StringWriter sw = new StringWriter(); [EOL]     MAPPER.writeValue(sw, new IterableWrapper(new int[] { 1, 2, 3 })); [EOL]     assertEquals("[1,2,3]", sw.toString().trim()); [EOL] }
public void testIterable() throws IOException { [EOL]     StringWriter sw = new StringWriter(); [EOL]     MAPPER.writeValue(sw, new IterableWrapper(new int[] { 1, 2, 3 })); [EOL]     assertEquals("[1,2,3]", sw.toString().trim()); [EOL] }
public void testIterable() throws IOException { [EOL]     StringWriter sw = new StringWriter(); [EOL]     MAPPER.writeValue(sw, new IterableWrapper(new int[] { 1, 2, 3 })); [EOL]     assertEquals("[1,2,3]", sw.toString().trim()); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setHandlerInstantiator(new MyInstantiator("xyz:")); [EOL]     assertEquals(quote("xyz:456"), mapper.writeValueAsString(new MyBean("456"))); [EOL] }
public void testSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setHandlerInstantiator(new MyInstantiator("xyz:")); [EOL]     assertEquals(quote("xyz:456"), mapper.writeValueAsString(new MyBean("456"))); [EOL] }
public void testSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setHandlerInstantiator(new MyInstantiator("xyz:")); [EOL]     assertEquals(quote("xyz:456"), mapper.writeValueAsString(new MyBean("456"))); [EOL] }
public void testSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setHandlerInstantiator(new MyInstantiator("xyz:")); [EOL]     assertEquals(quote("xyz:456"), mapper.writeValueAsString(new MyBean("456"))); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testModifyCollectionSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setSerializerModifier(new CollectionSerializerModifier())); [EOL]     assertEquals("123", mapper.writeValueAsString(new ArrayList<Integer>())); [EOL] }
public void testModifyCollectionSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setSerializerModifier(new CollectionSerializerModifier())); [EOL]     assertEquals("123", mapper.writeValueAsString(new ArrayList<Integer>())); [EOL] }
public void testModifyCollectionSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setSerializerModifier(new CollectionSerializerModifier())); [EOL]     assertEquals("123", mapper.writeValueAsString(new ArrayList<Integer>())); [EOL] }
public void testModifyCollectionSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setSerializerModifier(new CollectionSerializerModifier())); [EOL]     assertEquals("123", mapper.writeValueAsString(new ArrayList<Integer>())); [EOL] }
public void testModifyCollectionSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setSerializerModifier(new CollectionSerializerModifier())); [EOL]     assertEquals("123", mapper.writeValueAsString(new ArrayList<Integer>())); [EOL] }
public void testModifyCollectionSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setSerializerModifier(new CollectionSerializerModifier())); [EOL]     assertEquals("123", mapper.writeValueAsString(new ArrayList<Integer>())); [EOL] }
public void testModifyCollectionSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setSerializerModifier(new CollectionSerializerModifier())); [EOL]     assertEquals("123", mapper.writeValueAsString(new ArrayList<Integer>())); [EOL] }
public void testEnumPolymorphicSerializationTest() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     List<ITestType> testTypesList = new ArrayList<ITestType>(); [EOL]     testTypesList.add(ConcreteType.ONE); [EOL]     testTypesList.add(ConcreteType.TWO); [EOL]     ListContainer listContainer = new ListContainer(); [EOL]     listContainer.testTypes = testTypesList; [EOL]     String json = mapper.writeValueAsString(listContainer); [EOL]     listContainer = mapper.readValue(json, ListContainer.class); [EOL]     EnumMapContainer enumMapContainer = new EnumMapContainer(); [EOL]     EnumMap<KeyEnum, ITestType> testTypesMap = new EnumMap<KeyEnum, ITestType>(KeyEnum.class); [EOL]     testTypesMap.put(KeyEnum.A, ConcreteType.ONE); [EOL]     testTypesMap.put(KeyEnum.B, ConcreteType.TWO); [EOL]     enumMapContainer.testTypes = testTypesMap; [EOL]     json = mapper.writeValueAsString(enumMapContainer); [EOL]     enumMapContainer = mapper.readValue(json, EnumMapContainer.class); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testIterable() throws IOException { [EOL]     StringWriter sw = new StringWriter(); [EOL]     MAPPER.writeValue(sw, new IterableWrapper(new int[] { 1, 2, 3 })); [EOL]     assertEquals("[1,2,3]", sw.toString().trim()); [EOL] }
public void testIterable() throws IOException { [EOL]     StringWriter sw = new StringWriter(); [EOL]     MAPPER.writeValue(sw, new IterableWrapper(new int[] { 1, 2, 3 })); [EOL]     assertEquals("[1,2,3]", sw.toString().trim()); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testIssue797() throws Exception { [EOL]     String json = MAPPER.writeValueAsString(new Bean797BaseImpl()); [EOL]     assertEquals("{}", json); [EOL] }
public void testIssue797() throws Exception { [EOL]     String json = MAPPER.writeValueAsString(new Bean797BaseImpl()); [EOL]     assertEquals("{}", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testEmptyWithFeature() throws Exception { [EOL]     assertTrue(mapper.getSerializationConfig().isEnabled(SerializationFeature.FAIL_ON_EMPTY_BEANS)); [EOL]     mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false); [EOL]     assertEquals("{}", serializeAsString(mapper, new Empty())); [EOL] }
public void testEmptyWithFeature() throws Exception { [EOL]     assertTrue(mapper.getSerializationConfig().isEnabled(SerializationFeature.FAIL_ON_EMPTY_BEANS)); [EOL]     mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false); [EOL]     assertEquals("{}", serializeAsString(mapper, new Empty())); [EOL] }
public void testEmptyBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, true); [EOL]     String json = mapper.writeValueAsString(new EmptyBean()); [EOL]     assertEquals("{\"@type\":\"TestSubtypes$EmptyBean\"}", json); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false); [EOL]     json = mapper.writeValueAsString(new EmptyBean()); [EOL]     assertEquals("{\"@type\":\"TestSubtypes$EmptyBean\"}", json); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL); [EOL]     mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false); [EOL]     json = mapper.writeValueAsString(new EmptyNonFinal()); [EOL]     assertEquals("[\"com.fasterxml.jackson.databind.jsontype.TestSubtypes$EmptyNonFinal\",{}]", json); [EOL] }
public void testEmptyBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, true); [EOL]     String json = mapper.writeValueAsString(new EmptyBean()); [EOL]     assertEquals("{\"@type\":\"TestSubtypes$EmptyBean\"}", json); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false); [EOL]     json = mapper.writeValueAsString(new EmptyBean()); [EOL]     assertEquals("{\"@type\":\"TestSubtypes$EmptyBean\"}", json); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL); [EOL]     mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false); [EOL]     json = mapper.writeValueAsString(new EmptyNonFinal()); [EOL]     assertEquals("[\"com.fasterxml.jackson.databind.jsontype.TestSubtypes$EmptyNonFinal\",{}]", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testIssue797() throws Exception { [EOL]     String json = MAPPER.writeValueAsString(new Bean797BaseImpl()); [EOL]     assertEquals("{}", json); [EOL] }
public void testIssue797() throws Exception { [EOL]     String json = MAPPER.writeValueAsString(new Bean797BaseImpl()); [EOL]     assertEquals("{}", json); [EOL] }
public void testIssue797() throws Exception { [EOL]     String json = MAPPER.writeValueAsString(new Bean797BaseImpl()); [EOL]     assertEquals("{}", json); [EOL] }
public void testIssue797() throws Exception { [EOL]     String json = MAPPER.writeValueAsString(new Bean797BaseImpl()); [EOL]     assertEquals("{}", json); [EOL] }
public void testIssue797() throws Exception { [EOL]     String json = MAPPER.writeValueAsString(new Bean797BaseImpl()); [EOL]     assertEquals("{}", json); [EOL] }
public void testBrokenWithDoubleAnnotations() throws Exception { [EOL]     try { [EOL]         @SuppressWarnings("unused") [EOL]         Broken b = MAPPER.readValue("{ \"a\" : 3 }", Broken.class); [EOL]         fail("Should have gotten an exception"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Multiple 'any-setters'"); [EOL]     } [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testEnumWithCreatorEnumSets() throws Exception { [EOL]     EnumSet<EnumWithCreator> value = MAPPER.readValue("[\"enumA\"]", new TypeReference<EnumSet<EnumWithCreator>>() { [EOL]     }); [EOL]     assertTrue(value.contains(EnumWithCreator.A)); [EOL] }
public void testEnumWithCreatorEnumSets() throws Exception { [EOL]     EnumSet<EnumWithCreator> value = MAPPER.readValue("[\"enumA\"]", new TypeReference<EnumSet<EnumWithCreator>>() { [EOL]     }); [EOL]     assertTrue(value.contains(EnumWithCreator.A)); [EOL] }
public void testEnumWithCreatorEnumSets() throws Exception { [EOL]     EnumSet<EnumWithCreator> value = MAPPER.readValue("[\"enumA\"]", new TypeReference<EnumSet<EnumWithCreator>>() { [EOL]     }); [EOL]     assertTrue(value.contains(EnumWithCreator.A)); [EOL] }
public void testEnumWithCreatorEnumSets() throws Exception { [EOL]     EnumSet<EnumWithCreator> value = MAPPER.readValue("[\"enumA\"]", new TypeReference<EnumSet<EnumWithCreator>>() { [EOL]     }); [EOL]     assertTrue(value.contains(EnumWithCreator.A)); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testEnumWithCreatorEnumSets() throws Exception { [EOL]     EnumSet<EnumWithCreator> value = MAPPER.readValue("[\"enumA\"]", new TypeReference<EnumSet<EnumWithCreator>>() { [EOL]     }); [EOL]     assertTrue(value.contains(EnumWithCreator.A)); [EOL] }
public void testEnumWithCreatorEnumSets() throws Exception { [EOL]     EnumSet<EnumWithCreator> value = MAPPER.readValue("[\"enumA\"]", new TypeReference<EnumSet<EnumWithCreator>>() { [EOL]     }); [EOL]     assertTrue(value.contains(EnumWithCreator.A)); [EOL] }
public void testEnumWithCreatorEnumSets() throws Exception { [EOL]     EnumSet<EnumWithCreator> value = MAPPER.readValue("[\"enumA\"]", new TypeReference<EnumSet<EnumWithCreator>>() { [EOL]     }); [EOL]     assertTrue(value.contains(EnumWithCreator.A)); [EOL] }
public void testEnumWithCreatorEnumSets() throws Exception { [EOL]     EnumSet<EnumWithCreator> value = MAPPER.readValue("[\"enumA\"]", new TypeReference<EnumSet<EnumWithCreator>>() { [EOL]     }); [EOL]     assertTrue(value.contains(EnumWithCreator.A)); [EOL] }
public void testEnumWithCreatorEnumSets() throws Exception { [EOL]     EnumSet<EnumWithCreator> value = MAPPER.readValue("[\"enumA\"]", new TypeReference<EnumSet<EnumWithCreator>>() { [EOL]     }); [EOL]     assertTrue(value.contains(EnumWithCreator.A)); [EOL] }
public void testEnumWithCreatorEnumSets() throws Exception { [EOL]     EnumSet<EnumWithCreator> value = MAPPER.readValue("[\"enumA\"]", new TypeReference<EnumSet<EnumWithCreator>>() { [EOL]     }); [EOL]     assertTrue(value.contains(EnumWithCreator.A)); [EOL] }
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(NullNode.instance, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testClassMixInsMidLevel() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Object> result; [EOL]     LeafClass bean = new LeafClass("xyz"); [EOL]     bean._c = "c2"; [EOL]     result = writeAndMap(mapper, bean); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("xyz", result.get("a")); [EOL]     assertEquals("c2", result.get("c")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.addMixInAnnotations(BaseClass.class, MixInAutoDetect.class); [EOL]     result = writeAndMap(mapper, bean); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("c2", result.get("c")); [EOL] }
public void testClassMixInsMidLevel() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Object> result; [EOL]     LeafClass bean = new LeafClass("xyz"); [EOL]     bean._c = "c2"; [EOL]     result = writeAndMap(mapper, bean); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("xyz", result.get("a")); [EOL]     assertEquals("c2", result.get("c")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.addMixInAnnotations(BaseClass.class, MixInAutoDetect.class); [EOL]     result = writeAndMap(mapper, bean); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("c2", result.get("c")); [EOL] }
public void testClassMixInsMidLevel() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Object> result; [EOL]     LeafClass bean = new LeafClass("xyz"); [EOL]     bean._c = "c2"; [EOL]     result = writeAndMap(mapper, bean); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("xyz", result.get("a")); [EOL]     assertEquals("c2", result.get("c")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.addMixInAnnotations(BaseClass.class, MixInAutoDetect.class); [EOL]     result = writeAndMap(mapper, bean); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("c2", result.get("c")); [EOL] }
public void testClassMixInsMidLevel() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Object> result; [EOL]     LeafClass bean = new LeafClass("xyz"); [EOL]     bean._c = "c2"; [EOL]     result = writeAndMap(mapper, bean); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("xyz", result.get("a")); [EOL]     assertEquals("c2", result.get("c")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.addMixInAnnotations(BaseClass.class, MixInAutoDetect.class); [EOL]     result = writeAndMap(mapper, bean); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("c2", result.get("c")); [EOL] }
public void testClassMixInsMidLevel() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Object> result; [EOL]     LeafClass bean = new LeafClass("xyz"); [EOL]     bean._c = "c2"; [EOL]     result = writeAndMap(mapper, bean); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("xyz", result.get("a")); [EOL]     assertEquals("c2", result.get("c")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.addMixInAnnotations(BaseClass.class, MixInAutoDetect.class); [EOL]     result = writeAndMap(mapper, bean); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("c2", result.get("c")); [EOL] }
public void testClassMixInsMidLevel() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Object> result; [EOL]     LeafClass bean = new LeafClass("xyz"); [EOL]     bean._c = "c2"; [EOL]     result = writeAndMap(mapper, bean); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("xyz", result.get("a")); [EOL]     assertEquals("c2", result.get("c")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.addMixInAnnotations(BaseClass.class, MixInAutoDetect.class); [EOL]     result = writeAndMap(mapper, bean); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("c2", result.get("c")); [EOL] }
public void testSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setHandlerInstantiator(new MyInstantiator("xyz:")); [EOL]     assertEquals(quote("xyz:456"), mapper.writeValueAsString(new MyBean("456"))); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testSimpleFields() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new PrefixStrategy()); [EOL]     String json = mapper.writeValueAsString(new FieldBean(999)); [EOL]     assertEquals("{\"Field-key\":999}", json); [EOL]     FieldBean result = mapper.readValue(json, FieldBean.class); [EOL]     assertEquals(999, result.key); [EOL] }
public void testSimpleFields() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new PrefixStrategy()); [EOL]     String json = mapper.writeValueAsString(new FieldBean(999)); [EOL]     assertEquals("{\"Field-key\":999}", json); [EOL]     FieldBean result = mapper.readValue(json, FieldBean.class); [EOL]     assertEquals(999, result.key); [EOL] }
public void testFeature432() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTypingAsProperty(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE, "*CLASS*"); [EOL]     String json = mapper.writeValueAsString(new BeanHolder(new StringBean("punny"))); [EOL]     assertEquals("{\"bean\":{\"*CLASS*\":\"com.fasterxml.jackson.databind.jsontype.TestDefaultForObject$StringBean\",\"name\":\"punny\"}}", json); [EOL] }
public void testFeature432() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTypingAsProperty(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE, "*CLASS*"); [EOL]     String json = mapper.writeValueAsString(new BeanHolder(new StringBean("punny"))); [EOL]     assertEquals("{\"bean\":{\"*CLASS*\":\"com.fasterxml.jackson.databind.jsontype.TestDefaultForObject$StringBean\",\"name\":\"punny\"}}", json); [EOL] }
public void testSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setHandlerInstantiator(new MyInstantiator("xyz:")); [EOL]     assertEquals(quote("xyz:456"), mapper.writeValueAsString(new MyBean("456"))); [EOL] }
public void testSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setHandlerInstantiator(new MyInstantiator("xyz:")); [EOL]     assertEquals(quote("xyz:456"), mapper.writeValueAsString(new MyBean("456"))); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setHandlerInstantiator(new MyInstantiator("xyz:")); [EOL]     assertEquals(quote("xyz:456"), mapper.writeValueAsString(new MyBean("456"))); [EOL] }
public void testSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setHandlerInstantiator(new MyInstantiator("xyz:")); [EOL]     assertEquals(quote("xyz:456"), mapper.writeValueAsString(new MyBean("456"))); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(NullNode.instance, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(NullNode.instance, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(NullNode.instance, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(NullNode.instance, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(NullNode.instance, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(NullNode.instance, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(NullNode.instance, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(NullNode.instance, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testSimpleKeyDeser() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addKeyDeserializer(String.class, new ContextualDeser("???")); [EOL]     mapper.registerModule(module); [EOL]     MapBean result = mapper.readValue("{\"map\":{\"a\":3}}", MapBean.class); [EOL]     Map<String, Integer> map = result.map; [EOL]     assertNotNull(map); [EOL]     assertEquals(1, map.size()); [EOL]     Map.Entry<String, Integer> entry = map.entrySet().iterator().next(); [EOL]     assertEquals(Integer.valueOf(3), entry.getValue()); [EOL]     assertEquals("map:a", entry.getKey()); [EOL] }
public void testSimpleKeyDeser() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addKeyDeserializer(String.class, new ContextualDeser("???")); [EOL]     mapper.registerModule(module); [EOL]     MapBean result = mapper.readValue("{\"map\":{\"a\":3}}", MapBean.class); [EOL]     Map<String, Integer> map = result.map; [EOL]     assertNotNull(map); [EOL]     assertEquals(1, map.size()); [EOL]     Map.Entry<String, Integer> entry = map.entrySet().iterator().next(); [EOL]     assertEquals(Integer.valueOf(3), entry.getValue()); [EOL]     assertEquals("map:a", entry.getKey()); [EOL] }
public void testCustomMapInstantiator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new MyModule(MyMap.class, new MyMapInstantiator())); [EOL]     MyMap result = mapper.readValue("{ \"a\":\"b\" }", MyMap.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(MyMap.class, result.getClass()); [EOL]     assertEquals(1, result.size()); [EOL] }
public void testCustomMapInstantiator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new MyModule(MyMap.class, new MyMapInstantiator())); [EOL]     MyMap result = mapper.readValue("{ \"a\":\"b\" }", MyMap.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(MyMap.class, result.getClass()); [EOL]     assertEquals(1, result.size()); [EOL] }
public void testMixinMethodInheritance() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.addMixInAnnotations(Beano2.class, BeanoMixinSub2.class); [EOL]     Map<String, Object> result; [EOL]     result = writeAndMap(mapper, new Beano2()); [EOL]     assertEquals(2, result.size()); [EOL]     assertTrue(result.containsKey("id")); [EOL]     assertTrue(result.containsKey("name")); [EOL] }
public void testMixinMethodInheritance() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.addMixInAnnotations(Beano2.class, BeanoMixinSub2.class); [EOL]     Map<String, Object> result; [EOL]     result = writeAndMap(mapper, new Beano2()); [EOL]     assertEquals(2, result.size()); [EOL]     assertTrue(result.containsKey("id")); [EOL]     assertTrue(result.containsKey("name")); [EOL] }
public void testMixinMethodInheritance() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.addMixInAnnotations(Beano2.class, BeanoMixinSub2.class); [EOL]     Map<String, Object> result; [EOL]     result = writeAndMap(mapper, new Beano2()); [EOL]     assertEquals(2, result.size()); [EOL]     assertTrue(result.containsKey("id")); [EOL]     assertTrue(result.containsKey("name")); [EOL] }
public void testMixinMethodInheritance() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.addMixInAnnotations(Beano2.class, BeanoMixinSub2.class); [EOL]     Map<String, Object> result; [EOL]     result = writeAndMap(mapper, new Beano2()); [EOL]     assertEquals(2, result.size()); [EOL]     assertTrue(result.containsKey("id")); [EOL]     assertTrue(result.containsKey("name")); [EOL] }
public void testCustomMapInstantiator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new MyModule(MyMap.class, new MyMapInstantiator())); [EOL]     MyMap result = mapper.readValue("{ \"a\":\"b\" }", MyMap.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(MyMap.class, result.getClass()); [EOL]     assertEquals(1, result.size()); [EOL] }
public void testCustomMapInstantiator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new MyModule(MyMap.class, new MyMapInstantiator())); [EOL]     MyMap result = mapper.readValue("{ \"a\":\"b\" }", MyMap.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(MyMap.class, result.getClass()); [EOL]     assertEquals(1, result.size()); [EOL] }
public void testCustomMapInstantiator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new MyModule(MyMap.class, new MyMapInstantiator())); [EOL]     MyMap result = mapper.readValue("{ \"a\":\"b\" }", MyMap.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(MyMap.class, result.getClass()); [EOL]     assertEquals(1, result.size()); [EOL] }
public void testCustomMapInstantiator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new MyModule(MyMap.class, new MyMapInstantiator())); [EOL]     MyMap result = mapper.readValue("{ \"a\":\"b\" }", MyMap.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(MyMap.class, result.getClass()); [EOL]     assertEquals(1, result.size()); [EOL] }
public void testCustomMapInstantiator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new MyModule(MyMap.class, new MyMapInstantiator())); [EOL]     MyMap result = mapper.readValue("{ \"a\":\"b\" }", MyMap.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(MyMap.class, result.getClass()); [EOL]     assertEquals(1, result.size()); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testSelfReference() throws Exception { [EOL]     Bean selfRef = new Bean(null, "self-refs"); [EOL]     Bean first = new Bean(selfRef, "first"); [EOL]     selfRef.assignNext(selfRef); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Bean[] wrapper = new Bean[] { first }; [EOL]     try { [EOL]         writeAndMap(m, wrapper); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Direct self-reference leading to cycle"); [EOL]     } [EOL] }
public void testSelfReference() throws Exception { [EOL]     Bean selfRef = new Bean(null, "self-refs"); [EOL]     Bean first = new Bean(selfRef, "first"); [EOL]     selfRef.assignNext(selfRef); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Bean[] wrapper = new Bean[] { first }; [EOL]     try { [EOL]         writeAndMap(m, wrapper); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Direct self-reference leading to cycle"); [EOL]     } [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testMissingFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.writeValueAsString(new Bean()); [EOL]         fail("Should have failed without configured filter"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Can not resolve BeanPropertyFilter with id 'RootFilter'"); [EOL]     } [EOL]     SimpleFilterProvider fp = new SimpleFilterProvider().setFailOnUnknownId(false); [EOL]     mapper.setFilters(fp); [EOL]     String json = mapper.writeValueAsString(new Bean()); [EOL]     assertEquals("{\"a\":\"a\",\"b\":\"b\"}", json); [EOL] }
public void testMissingFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.writeValueAsString(new Bean()); [EOL]         fail("Should have failed without configured filter"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Can not resolve BeanPropertyFilter with id 'RootFilter'"); [EOL]     } [EOL]     SimpleFilterProvider fp = new SimpleFilterProvider().setFailOnUnknownId(false); [EOL]     mapper.setFilters(fp); [EOL]     String json = mapper.writeValueAsString(new Bean()); [EOL]     assertEquals("{\"a\":\"a\",\"b\":\"b\"}", json); [EOL] }
public void testMissingFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.writeValueAsString(new Bean()); [EOL]         fail("Should have failed without configured filter"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Can not resolve BeanPropertyFilter with id 'RootFilter'"); [EOL]     } [EOL]     SimpleFilterProvider fp = new SimpleFilterProvider().setFailOnUnknownId(false); [EOL]     mapper.setFilters(fp); [EOL]     String json = mapper.writeValueAsString(new Bean()); [EOL]     assertEquals("{\"a\":\"a\",\"b\":\"b\"}", json); [EOL] }
public void testMissingFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.writeValueAsString(new Bean()); [EOL]         fail("Should have failed without configured filter"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Can not resolve BeanPropertyFilter with id 'RootFilter'"); [EOL]     } [EOL]     SimpleFilterProvider fp = new SimpleFilterProvider().setFailOnUnknownId(false); [EOL]     mapper.setFilters(fp); [EOL]     String json = mapper.writeValueAsString(new Bean()); [EOL]     assertEquals("{\"a\":\"a\",\"b\":\"b\"}", json); [EOL] }
public void testMissingFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.writeValueAsString(new Bean()); [EOL]         fail("Should have failed without configured filter"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Can not resolve BeanPropertyFilter with id 'RootFilter'"); [EOL]     } [EOL]     SimpleFilterProvider fp = new SimpleFilterProvider().setFailOnUnknownId(false); [EOL]     mapper.setFilters(fp); [EOL]     String json = mapper.writeValueAsString(new Bean()); [EOL]     assertEquals("{\"a\":\"a\",\"b\":\"b\"}", json); [EOL] }
public void testMissingFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.writeValueAsString(new Bean()); [EOL]         fail("Should have failed without configured filter"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Can not resolve BeanPropertyFilter with id 'RootFilter'"); [EOL]     } [EOL]     SimpleFilterProvider fp = new SimpleFilterProvider().setFailOnUnknownId(false); [EOL]     mapper.setFilters(fp); [EOL]     String json = mapper.writeValueAsString(new Bean()); [EOL]     assertEquals("{\"a\":\"a\",\"b\":\"b\"}", json); [EOL] }
public void testMissingFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.writeValueAsString(new Bean()); [EOL]         fail("Should have failed without configured filter"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Can not resolve BeanPropertyFilter with id 'RootFilter'"); [EOL]     } [EOL]     SimpleFilterProvider fp = new SimpleFilterProvider().setFailOnUnknownId(false); [EOL]     mapper.setFilters(fp); [EOL]     String json = mapper.writeValueAsString(new Bean()); [EOL]     assertEquals("{\"a\":\"a\",\"b\":\"b\"}", json); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testSimple() throws IOException { [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Bean bean = new Bean(); [EOL]     Map<String, Object> map = writeAndMap(mapper, bean); [EOL]     assertEquals(3, map.size()); [EOL]     sw = new StringWriter(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     sw = new StringWriter(); [EOL]     mapper.writerWithView(ViewAA.class).writeValue(sw, bean); [EOL]     map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("aa")); [EOL]     String json = mapper.writerWithView(ViewB.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("2", map.get("aa")); [EOL]     assertEquals("3", map.get("b")); [EOL]     json = mapper.writerWithView(ViewBB.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("2", map.get("aa")); [EOL]     assertEquals("3", map.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testSimple() throws IOException { [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Bean bean = new Bean(); [EOL]     Map<String, Object> map = writeAndMap(mapper, bean); [EOL]     assertEquals(3, map.size()); [EOL]     sw = new StringWriter(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     sw = new StringWriter(); [EOL]     mapper.writerWithView(ViewAA.class).writeValue(sw, bean); [EOL]     map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("aa")); [EOL]     String json = mapper.writerWithView(ViewB.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("2", map.get("aa")); [EOL]     assertEquals("3", map.get("b")); [EOL]     json = mapper.writerWithView(ViewBB.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("2", map.get("aa")); [EOL]     assertEquals("3", map.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testSimple() throws IOException { [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Bean bean = new Bean(); [EOL]     Map<String, Object> map = writeAndMap(mapper, bean); [EOL]     assertEquals(3, map.size()); [EOL]     sw = new StringWriter(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     sw = new StringWriter(); [EOL]     mapper.writerWithView(ViewAA.class).writeValue(sw, bean); [EOL]     map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("aa")); [EOL]     String json = mapper.writerWithView(ViewB.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("2", map.get("aa")); [EOL]     assertEquals("3", map.get("b")); [EOL]     json = mapper.writerWithView(ViewBB.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("2", map.get("aa")); [EOL]     assertEquals("3", map.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testSimple() throws IOException { [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Bean bean = new Bean(); [EOL]     Map<String, Object> map = writeAndMap(mapper, bean); [EOL]     assertEquals(3, map.size()); [EOL]     sw = new StringWriter(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     sw = new StringWriter(); [EOL]     mapper.writerWithView(ViewAA.class).writeValue(sw, bean); [EOL]     map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("aa")); [EOL]     String json = mapper.writerWithView(ViewB.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("2", map.get("aa")); [EOL]     assertEquals("3", map.get("b")); [EOL]     json = mapper.writerWithView(ViewBB.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("2", map.get("aa")); [EOL]     assertEquals("3", map.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testSimple() throws IOException { [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Bean bean = new Bean(); [EOL]     Map<String, Object> map = writeAndMap(mapper, bean); [EOL]     assertEquals(3, map.size()); [EOL]     sw = new StringWriter(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     sw = new StringWriter(); [EOL]     mapper.writerWithView(ViewAA.class).writeValue(sw, bean); [EOL]     map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("aa")); [EOL]     String json = mapper.writerWithView(ViewB.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("2", map.get("aa")); [EOL]     assertEquals("3", map.get("b")); [EOL]     json = mapper.writerWithView(ViewBB.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("2", map.get("aa")); [EOL]     assertEquals("3", map.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testSimple() throws IOException { [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Bean bean = new Bean(); [EOL]     Map<String, Object> map = writeAndMap(mapper, bean); [EOL]     assertEquals(3, map.size()); [EOL]     sw = new StringWriter(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     sw = new StringWriter(); [EOL]     mapper.writerWithView(ViewAA.class).writeValue(sw, bean); [EOL]     map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("aa")); [EOL]     String json = mapper.writerWithView(ViewB.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("2", map.get("aa")); [EOL]     assertEquals("3", map.get("b")); [EOL]     json = mapper.writerWithView(ViewBB.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("2", map.get("aa")); [EOL]     assertEquals("3", map.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testSimple() throws IOException { [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Bean bean = new Bean(); [EOL]     Map<String, Object> map = writeAndMap(mapper, bean); [EOL]     assertEquals(3, map.size()); [EOL]     sw = new StringWriter(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     sw = new StringWriter(); [EOL]     mapper.writerWithView(ViewAA.class).writeValue(sw, bean); [EOL]     map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("aa")); [EOL]     String json = mapper.writerWithView(ViewB.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("2", map.get("aa")); [EOL]     assertEquals("3", map.get("b")); [EOL]     json = mapper.writerWithView(ViewBB.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("2", map.get("aa")); [EOL]     assertEquals("3", map.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testSimple() throws IOException { [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Bean bean = new Bean(); [EOL]     Map<String, Object> map = writeAndMap(mapper, bean); [EOL]     assertEquals(3, map.size()); [EOL]     sw = new StringWriter(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     sw = new StringWriter(); [EOL]     mapper.writerWithView(ViewAA.class).writeValue(sw, bean); [EOL]     map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("aa")); [EOL]     String json = mapper.writerWithView(ViewB.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("2", map.get("aa")); [EOL]     assertEquals("3", map.get("b")); [EOL]     json = mapper.writerWithView(ViewBB.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("2", map.get("aa")); [EOL]     assertEquals("3", map.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testSimple() throws IOException { [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Bean bean = new Bean(); [EOL]     Map<String, Object> map = writeAndMap(mapper, bean); [EOL]     assertEquals(3, map.size()); [EOL]     sw = new StringWriter(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     sw = new StringWriter(); [EOL]     mapper.writerWithView(ViewAA.class).writeValue(sw, bean); [EOL]     map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("aa")); [EOL]     String json = mapper.writerWithView(ViewB.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("2", map.get("aa")); [EOL]     assertEquals("3", map.get("b")); [EOL]     json = mapper.writerWithView(ViewBB.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("2", map.get("aa")); [EOL]     assertEquals("3", map.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testSimple() throws IOException { [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Bean bean = new Bean(); [EOL]     Map<String, Object> map = writeAndMap(mapper, bean); [EOL]     assertEquals(3, map.size()); [EOL]     sw = new StringWriter(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     sw = new StringWriter(); [EOL]     mapper.writerWithView(ViewAA.class).writeValue(sw, bean); [EOL]     map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("aa")); [EOL]     String json = mapper.writerWithView(ViewB.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("2", map.get("aa")); [EOL]     assertEquals("3", map.get("b")); [EOL]     json = mapper.writerWithView(ViewBB.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("2", map.get("aa")); [EOL]     assertEquals("3", map.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testSimple() throws IOException { [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Bean bean = new Bean(); [EOL]     Map<String, Object> map = writeAndMap(mapper, bean); [EOL]     assertEquals(3, map.size()); [EOL]     sw = new StringWriter(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     sw = new StringWriter(); [EOL]     mapper.writerWithView(ViewAA.class).writeValue(sw, bean); [EOL]     map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("aa")); [EOL]     String json = mapper.writerWithView(ViewB.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("2", map.get("aa")); [EOL]     assertEquals("3", map.get("b")); [EOL]     json = mapper.writerWithView(ViewBB.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("2", map.get("aa")); [EOL]     assertEquals("3", map.get("b")); [EOL] }
public void testIssue797() throws Exception { [EOL]     String json = MAPPER.writeValueAsString(new Bean797BaseImpl()); [EOL]     assertEquals("{}", json); [EOL] }
public void testIssue797() throws Exception { [EOL]     String json = MAPPER.writeValueAsString(new Bean797BaseImpl()); [EOL]     assertEquals("{}", json); [EOL] }
public void testIssue797() throws Exception { [EOL]     String json = MAPPER.writeValueAsString(new Bean797BaseImpl()); [EOL]     assertEquals("{}", json); [EOL] }
public void testIssue797() throws Exception { [EOL]     String json = MAPPER.writeValueAsString(new Bean797BaseImpl()); [EOL]     assertEquals("{}", json); [EOL] }
public void testJackson744() throws Exception { [EOL]     BasicBeanDescription beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue744Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     AnnotatedMethod setter = beanDesc.findAnySetter(); [EOL]     assertNotNull(setter); [EOL] }
public void testJackson744() throws Exception { [EOL]     BasicBeanDescription beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue744Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     AnnotatedMethod setter = beanDesc.findAnySetter(); [EOL]     assertNotNull(setter); [EOL] }
public void testJackson744() throws Exception { [EOL]     BasicBeanDescription beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue744Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     AnnotatedMethod setter = beanDesc.findAnySetter(); [EOL]     assertNotNull(setter); [EOL] }
public void testSimpleFields() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new PrefixStrategy()); [EOL]     String json = mapper.writeValueAsString(new FieldBean(999)); [EOL]     assertEquals("{\"Field-key\":999}", json); [EOL]     FieldBean result = mapper.readValue(json, FieldBean.class); [EOL]     assertEquals(999, result.key); [EOL] }
public void testSimpleFields() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new PrefixStrategy()); [EOL]     String json = mapper.writeValueAsString(new FieldBean(999)); [EOL]     assertEquals("{\"Field-key\":999}", json); [EOL]     FieldBean result = mapper.readValue(json, FieldBean.class); [EOL]     assertEquals(999, result.key); [EOL] }
public void testSimpleStringGetter() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String value = "abc"; [EOL]     String result = m.writeValueAsString(new ClassGetter<String>(value)); [EOL]     String expected = String.format("{\"nonRaw\":\"%s\",\"raw\":%s,\"value\":%s}", value, value, value); [EOL]     assertEquals(expected, result); [EOL] }
public void testSimpleStringGetter() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String value = "abc"; [EOL]     String result = m.writeValueAsString(new ClassGetter<String>(value)); [EOL]     String expected = String.format("{\"nonRaw\":\"%s\",\"raw\":%s,\"value\":%s}", value, value, value); [EOL]     assertEquals(expected, result); [EOL] }
public void testSimpleStringGetter() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String value = "abc"; [EOL]     String result = m.writeValueAsString(new ClassGetter<String>(value)); [EOL]     String expected = String.format("{\"nonRaw\":\"%s\",\"raw\":%s,\"value\":%s}", value, value, value); [EOL]     assertEquals(expected, result); [EOL] }
public void testSimpleStringGetter() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String value = "abc"; [EOL]     String result = m.writeValueAsString(new ClassGetter<String>(value)); [EOL]     String expected = String.format("{\"nonRaw\":\"%s\",\"raw\":%s,\"value\":%s}", value, value, value); [EOL]     assertEquals(expected, result); [EOL] }
public void testSimpleStringGetter() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String value = "abc"; [EOL]     String result = m.writeValueAsString(new ClassGetter<String>(value)); [EOL]     String expected = String.format("{\"nonRaw\":\"%s\",\"raw\":%s,\"value\":%s}", value, value, value); [EOL]     assertEquals(expected, result); [EOL] }
public void testFinalFieldIgnoral() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     assertTrue(mapper.isEnabled(MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS)); [EOL]     mapper.disable(MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS); [EOL]     try { [EOL]         mapper.readValue("{\"x\":2}", FixedPoint.class); [EOL]         fail("Should not try to use final field"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "unrecognized field \"x\""); [EOL]     } [EOL] }
public void testFinalFieldIgnoral() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     assertTrue(mapper.isEnabled(MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS)); [EOL]     mapper.disable(MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS); [EOL]     try { [EOL]         mapper.readValue("{\"x\":2}", FixedPoint.class); [EOL]         fail("Should not try to use final field"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "unrecognized field \"x\""); [EOL]     } [EOL] }
public void testFinalFieldIgnoral() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     assertTrue(mapper.isEnabled(MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS)); [EOL]     mapper.disable(MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS); [EOL]     try { [EOL]         mapper.readValue("{\"x\":2}", FixedPoint.class); [EOL]         fail("Should not try to use final field"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "unrecognized field \"x\""); [EOL]     } [EOL] }
public void testFinalFieldIgnoral() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     assertTrue(mapper.isEnabled(MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS)); [EOL]     mapper.disable(MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS); [EOL]     try { [EOL]         mapper.readValue("{\"x\":2}", FixedPoint.class); [EOL]         fail("Should not try to use final field"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "unrecognized field \"x\""); [EOL]     } [EOL] }
public void testFinalFieldIgnoral() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     assertTrue(mapper.isEnabled(MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS)); [EOL]     mapper.disable(MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS); [EOL]     try { [EOL]         mapper.readValue("{\"x\":2}", FixedPoint.class); [EOL]         fail("Should not try to use final field"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "unrecognized field \"x\""); [EOL]     } [EOL] }
public void testFinalFieldIgnoral() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     assertTrue(mapper.isEnabled(MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS)); [EOL]     mapper.disable(MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS); [EOL]     try { [EOL]         mapper.readValue("{\"x\":2}", FixedPoint.class); [EOL]         fail("Should not try to use final field"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "unrecognized field \"x\""); [EOL]     } [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testJackson744() throws Exception { [EOL]     BasicBeanDescription beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue744Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     AnnotatedMethod setter = beanDesc.findAnySetter(); [EOL]     assertNotNull(setter); [EOL] }
public void testJackson744() throws Exception { [EOL]     BasicBeanDescription beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue744Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     AnnotatedMethod setter = beanDesc.findAnySetter(); [EOL]     assertNotNull(setter); [EOL] }
public void testJackson744() throws Exception { [EOL]     BasicBeanDescription beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue744Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     AnnotatedMethod setter = beanDesc.findAnySetter(); [EOL]     assertNotNull(setter); [EOL] }
public void testJackson744() throws Exception { [EOL]     BasicBeanDescription beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue744Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     AnnotatedMethod setter = beanDesc.findAnySetter(); [EOL]     assertNotNull(setter); [EOL] }
public void testJackson744() throws Exception { [EOL]     BasicBeanDescription beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue744Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     AnnotatedMethod setter = beanDesc.findAnySetter(); [EOL]     assertNotNull(setter); [EOL] }
public void testJackson744() throws Exception { [EOL]     BasicBeanDescription beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue744Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     AnnotatedMethod setter = beanDesc.findAnySetter(); [EOL]     assertNotNull(setter); [EOL] }
public void testJackson744() throws Exception { [EOL]     BasicBeanDescription beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue744Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     AnnotatedMethod setter = beanDesc.findAnySetter(); [EOL]     assertNotNull(setter); [EOL] }
public void testJackson744() throws Exception { [EOL]     BasicBeanDescription beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue744Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     AnnotatedMethod setter = beanDesc.findAnySetter(); [EOL]     assertNotNull(setter); [EOL] }
public void testJackson744() throws Exception { [EOL]     BasicBeanDescription beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue744Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     AnnotatedMethod setter = beanDesc.findAnySetter(); [EOL]     assertNotNull(setter); [EOL] }
public void testJackson744() throws Exception { [EOL]     BasicBeanDescription beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue744Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     AnnotatedMethod setter = beanDesc.findAnySetter(); [EOL]     assertNotNull(setter); [EOL] }
public void testInvalidDup() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.readValue("{}", BadBean1.class); [EOL]     } catch (Exception e) { [EOL]         verifyException(e, "Duplicate injectable value"); [EOL]     } [EOL]     try { [EOL]         mapper.readValue("{}", BadBean2.class); [EOL]     } catch (Exception e) { [EOL]         verifyException(e, "Duplicate injectable value"); [EOL]     } [EOL] }
public void testInvalidDup() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.readValue("{}", BadBean1.class); [EOL]     } catch (Exception e) { [EOL]         verifyException(e, "Duplicate injectable value"); [EOL]     } [EOL]     try { [EOL]         mapper.readValue("{}", BadBean2.class); [EOL]     } catch (Exception e) { [EOL]         verifyException(e, "Duplicate injectable value"); [EOL]     } [EOL] }
public void testInvalidDup() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.readValue("{}", BadBean1.class); [EOL]     } catch (Exception e) { [EOL]         verifyException(e, "Duplicate injectable value"); [EOL]     } [EOL]     try { [EOL]         mapper.readValue("{}", BadBean2.class); [EOL]     } catch (Exception e) { [EOL]         verifyException(e, "Duplicate injectable value"); [EOL]     } [EOL] }
public void testJackson744() throws Exception { [EOL]     BasicBeanDescription beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue744Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     AnnotatedMethod setter = beanDesc.findAnySetter(); [EOL]     assertNotNull(setter); [EOL] }
public void testJackson744() throws Exception { [EOL]     BasicBeanDescription beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue744Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     AnnotatedMethod setter = beanDesc.findAnySetter(); [EOL]     assertNotNull(setter); [EOL] }
public void testJackson744() throws Exception { [EOL]     BasicBeanDescription beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue744Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     AnnotatedMethod setter = beanDesc.findAnySetter(); [EOL]     assertNotNull(setter); [EOL] }
public void testJackson744() throws Exception { [EOL]     BasicBeanDescription beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue744Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     AnnotatedMethod setter = beanDesc.findAnySetter(); [EOL]     assertNotNull(setter); [EOL] }
public void testJackson744() throws Exception { [EOL]     BasicBeanDescription beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue744Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     AnnotatedMethod setter = beanDesc.findAnySetter(); [EOL]     assertNotNull(setter); [EOL] }
public void testJackson744() throws Exception { [EOL]     BasicBeanDescription beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue744Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     AnnotatedMethod setter = beanDesc.findAnySetter(); [EOL]     assertNotNull(setter); [EOL] }
public void testJackson744() throws Exception { [EOL]     BasicBeanDescription beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue744Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     AnnotatedMethod setter = beanDesc.findAnySetter(); [EOL]     assertNotNull(setter); [EOL] }
public void testJackson744() throws Exception { [EOL]     BasicBeanDescription beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue744Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     AnnotatedMethod setter = beanDesc.findAnySetter(); [EOL]     assertNotNull(setter); [EOL] }
public void testJackson744() throws Exception { [EOL]     BasicBeanDescription beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue744Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     AnnotatedMethod setter = beanDesc.findAnySetter(); [EOL]     assertNotNull(setter); [EOL] }
public void testSimpleStringGetter() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String value = "abc"; [EOL]     String result = m.writeValueAsString(new ClassGetter<String>(value)); [EOL]     String expected = String.format("{\"nonRaw\":\"%s\",\"raw\":%s,\"value\":%s}", value, value, value); [EOL]     assertEquals(expected, result); [EOL] }
public void testSimpleStringGetter() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String value = "abc"; [EOL]     String result = m.writeValueAsString(new ClassGetter<String>(value)); [EOL]     String expected = String.format("{\"nonRaw\":\"%s\",\"raw\":%s,\"value\":%s}", value, value, value); [EOL]     assertEquals(expected, result); [EOL] }
public void testSimpleStringGetter() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String value = "abc"; [EOL]     String result = m.writeValueAsString(new ClassGetter<String>(value)); [EOL]     String expected = String.format("{\"nonRaw\":\"%s\",\"raw\":%s,\"value\":%s}", value, value, value); [EOL]     assertEquals(expected, result); [EOL] }
public void testSimpleStringGetter() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String value = "abc"; [EOL]     String result = m.writeValueAsString(new ClassGetter<String>(value)); [EOL]     String expected = String.format("{\"nonRaw\":\"%s\",\"raw\":%s,\"value\":%s}", value, value, value); [EOL]     assertEquals(expected, result); [EOL] }
public void testSimpleFields() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new PrefixStrategy()); [EOL]     String json = mapper.writeValueAsString(new FieldBean(999)); [EOL]     assertEquals("{\"Field-key\":999}", json); [EOL]     FieldBean result = mapper.readValue(json, FieldBean.class); [EOL]     assertEquals(999, result.key); [EOL] }
public void testSimpleFields() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new PrefixStrategy()); [EOL]     String json = mapper.writeValueAsString(new FieldBean(999)); [EOL]     assertEquals("{\"Field-key\":999}", json); [EOL]     FieldBean result = mapper.readValue(json, FieldBean.class); [EOL]     assertEquals(999, result.key); [EOL] }
public void testSimpleFields() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new PrefixStrategy()); [EOL]     String json = mapper.writeValueAsString(new FieldBean(999)); [EOL]     assertEquals("{\"Field-key\":999}", json); [EOL]     FieldBean result = mapper.readValue(json, FieldBean.class); [EOL]     assertEquals(999, result.key); [EOL] }
public void testSimpleFields() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new PrefixStrategy()); [EOL]     String json = mapper.writeValueAsString(new FieldBean(999)); [EOL]     assertEquals("{\"Field-key\":999}", json); [EOL]     FieldBean result = mapper.readValue(json, FieldBean.class); [EOL]     assertEquals(999, result.key); [EOL] }
public void testSimpleFields() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new PrefixStrategy()); [EOL]     String json = mapper.writeValueAsString(new FieldBean(999)); [EOL]     assertEquals("{\"Field-key\":999}", json); [EOL]     FieldBean result = mapper.readValue(json, FieldBean.class); [EOL]     assertEquals(999, result.key); [EOL] }
public void testSimpleFields() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new PrefixStrategy()); [EOL]     String json = mapper.writeValueAsString(new FieldBean(999)); [EOL]     assertEquals("{\"Field-key\":999}", json); [EOL]     FieldBean result = mapper.readValue(json, FieldBean.class); [EOL]     assertEquals(999, result.key); [EOL] }
public void testSimpleFields() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new PrefixStrategy()); [EOL]     String json = mapper.writeValueAsString(new FieldBean(999)); [EOL]     assertEquals("{\"Field-key\":999}", json); [EOL]     FieldBean result = mapper.readValue(json, FieldBean.class); [EOL]     assertEquals(999, result.key); [EOL] }
public void testBrokenWithDoubleAnnotations() throws Exception { [EOL]     try { [EOL]         @SuppressWarnings("unused") [EOL]         Broken b = MAPPER.readValue("{ \"a\" : 3 }", Broken.class); [EOL]         fail("Should have gotten an exception"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Multiple 'any-setters'"); [EOL]     } [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testAbstractBean() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     AbstractBean[] input = new AbstractBean[] { new StringBean("xyz") }; [EOL]     String serial = m.writeValueAsString(input); [EOL]     try { [EOL]         m.readValue(serial, AbstractBean[].class); [EOL]         fail("Should have failed"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "can not construct"); [EOL]     } [EOL]     m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE); [EOL]     serial = m.writeValueAsString(input); [EOL]     AbstractBean[] beans = m.readValue(serial, AbstractBean[].class); [EOL]     assertEquals(1, beans.length); [EOL]     assertEquals(StringBean.class, beans[0].getClass()); [EOL]     assertEquals("xyz", ((StringBean) beans[0]).name); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testWithGetterAsSetter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new CStyleStrategy()); [EOL]     SetterlessWithValue input = new SetterlessWithValue().add(3); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"value_list\":[{\"int_value\":3}]}", json); [EOL]     SetterlessWithValue result = mapper.readValue(json, SetterlessWithValue.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(1, result.values.size()); [EOL]     assertEquals(3, result.values.get(0).intValue); [EOL] }
public void testWithGetterAsSetter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new CStyleStrategy()); [EOL]     SetterlessWithValue input = new SetterlessWithValue().add(3); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"value_list\":[{\"int_value\":3}]}", json); [EOL]     SetterlessWithValue result = mapper.readValue(json, SetterlessWithValue.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(1, result.values.size()); [EOL]     assertEquals(3, result.values.get(0).intValue); [EOL] }
public void testWithGetterAsSetter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new CStyleStrategy()); [EOL]     SetterlessWithValue input = new SetterlessWithValue().add(3); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"value_list\":[{\"int_value\":3}]}", json); [EOL]     SetterlessWithValue result = mapper.readValue(json, SetterlessWithValue.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(1, result.values.size()); [EOL]     assertEquals(3, result.values.get(0).intValue); [EOL] }
public void testWithGetterAsSetter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new CStyleStrategy()); [EOL]     SetterlessWithValue input = new SetterlessWithValue().add(3); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"value_list\":[{\"int_value\":3}]}", json); [EOL]     SetterlessWithValue result = mapper.readValue(json, SetterlessWithValue.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(1, result.values.size()); [EOL]     assertEquals(3, result.values.get(0).intValue); [EOL] }
public void testWithGetterAsSetter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new CStyleStrategy()); [EOL]     SetterlessWithValue input = new SetterlessWithValue().add(3); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"value_list\":[{\"int_value\":3}]}", json); [EOL]     SetterlessWithValue result = mapper.readValue(json, SetterlessWithValue.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(1, result.values.size()); [EOL]     assertEquals(3, result.values.get(0).intValue); [EOL] }
public void testWithGetterAsSetter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new CStyleStrategy()); [EOL]     SetterlessWithValue input = new SetterlessWithValue().add(3); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"value_list\":[{\"int_value\":3}]}", json); [EOL]     SetterlessWithValue result = mapper.readValue(json, SetterlessWithValue.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(1, result.values.size()); [EOL]     assertEquals(3, result.values.get(0).intValue); [EOL] }
public void testWithGetterAsSetter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new CStyleStrategy()); [EOL]     SetterlessWithValue input = new SetterlessWithValue().add(3); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"value_list\":[{\"int_value\":3}]}", json); [EOL]     SetterlessWithValue result = mapper.readValue(json, SetterlessWithValue.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(1, result.values.size()); [EOL]     assertEquals(3, result.values.get(0).intValue); [EOL] }
public void testWithGetterAsSetter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new CStyleStrategy()); [EOL]     SetterlessWithValue input = new SetterlessWithValue().add(3); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"value_list\":[{\"int_value\":3}]}", json); [EOL]     SetterlessWithValue result = mapper.readValue(json, SetterlessWithValue.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(1, result.values.size()); [EOL]     assertEquals(3, result.values.get(0).intValue); [EOL] }
public void testReconfiguringOfWrapping() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     final Bean input = new Bean(); [EOL]     String jsonUnwrapped = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"a\":3}", jsonUnwrapped); [EOL]     String jsonWrapped = mapper.writer(SerializationFeature.WRAP_ROOT_VALUE).writeValueAsString(input); [EOL]     assertEquals("{\"rudy\":{\"a\":3}}", jsonWrapped); [EOL]     Bean result = mapper.readValue(jsonUnwrapped, Bean.class); [EOL]     assertNotNull(result); [EOL]     try { [EOL]         result = mapper.reader(Bean.class).with(DeserializationFeature.UNWRAP_ROOT_VALUE).readValue(jsonUnwrapped); [EOL]         fail("Should have failed"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Root name 'a'"); [EOL]     } [EOL]     result = mapper.reader(Bean.class).with(DeserializationFeature.UNWRAP_ROOT_VALUE).readValue(jsonWrapped); [EOL]     assertNotNull(result); [EOL] }
public void testReconfiguringOfWrapping() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     final Bean input = new Bean(); [EOL]     String jsonUnwrapped = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"a\":3}", jsonUnwrapped); [EOL]     String jsonWrapped = mapper.writer(SerializationFeature.WRAP_ROOT_VALUE).writeValueAsString(input); [EOL]     assertEquals("{\"rudy\":{\"a\":3}}", jsonWrapped); [EOL]     Bean result = mapper.readValue(jsonUnwrapped, Bean.class); [EOL]     assertNotNull(result); [EOL]     try { [EOL]         result = mapper.reader(Bean.class).with(DeserializationFeature.UNWRAP_ROOT_VALUE).readValue(jsonUnwrapped); [EOL]         fail("Should have failed"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Root name 'a'"); [EOL]     } [EOL]     result = mapper.reader(Bean.class).with(DeserializationFeature.UNWRAP_ROOT_VALUE).readValue(jsonWrapped); [EOL]     assertNotNull(result); [EOL] }
public void testRootUsingExplicitConfig() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ObjectWriter writer = mapper.writer().withRootName("wrapper"); [EOL]     String json = writer.writeValueAsString(new Bean()); [EOL]     assertEquals("{\"wrapper\":{\"a\":3}}", json); [EOL]     ObjectReader reader = mapper.reader(Bean.class).withRootName("wrapper"); [EOL]     Bean bean = reader.readValue(json); [EOL]     assertNotNull(bean); [EOL]     ObjectMapper wrapping = rootMapper(); [EOL]     json = wrapping.writer().withRootName("something").writeValueAsString(new Bean()); [EOL]     assertEquals("{\"something\":{\"a\":3}}", json); [EOL]     json = wrapping.writer().withRootName("").writeValueAsString(new Bean()); [EOL]     assertEquals("{\"a\":3}", json); [EOL]     bean = wrapping.reader(Bean.class).withRootName("").readValue(json); [EOL]     assertNotNull(bean); [EOL] }
public void testRootUsingExplicitConfig() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ObjectWriter writer = mapper.writer().withRootName("wrapper"); [EOL]     String json = writer.writeValueAsString(new Bean()); [EOL]     assertEquals("{\"wrapper\":{\"a\":3}}", json); [EOL]     ObjectReader reader = mapper.reader(Bean.class).withRootName("wrapper"); [EOL]     Bean bean = reader.readValue(json); [EOL]     assertNotNull(bean); [EOL]     ObjectMapper wrapping = rootMapper(); [EOL]     json = wrapping.writer().withRootName("something").writeValueAsString(new Bean()); [EOL]     assertEquals("{\"something\":{\"a\":3}}", json); [EOL]     json = wrapping.writer().withRootName("").writeValueAsString(new Bean()); [EOL]     assertEquals("{\"a\":3}", json); [EOL]     bean = wrapping.reader(Bean.class).withRootName("").readValue(json); [EOL]     assertNotNull(bean); [EOL] }
public void testReconfiguringOfWrapping() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     final Bean input = new Bean(); [EOL]     String jsonUnwrapped = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"a\":3}", jsonUnwrapped); [EOL]     String jsonWrapped = mapper.writer(SerializationFeature.WRAP_ROOT_VALUE).writeValueAsString(input); [EOL]     assertEquals("{\"rudy\":{\"a\":3}}", jsonWrapped); [EOL]     Bean result = mapper.readValue(jsonUnwrapped, Bean.class); [EOL]     assertNotNull(result); [EOL]     try { [EOL]         result = mapper.reader(Bean.class).with(DeserializationFeature.UNWRAP_ROOT_VALUE).readValue(jsonUnwrapped); [EOL]         fail("Should have failed"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Root name 'a'"); [EOL]     } [EOL]     result = mapper.reader(Bean.class).with(DeserializationFeature.UNWRAP_ROOT_VALUE).readValue(jsonWrapped); [EOL]     assertNotNull(result); [EOL] }
public void testReconfiguringOfWrapping() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     final Bean input = new Bean(); [EOL]     String jsonUnwrapped = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"a\":3}", jsonUnwrapped); [EOL]     String jsonWrapped = mapper.writer(SerializationFeature.WRAP_ROOT_VALUE).writeValueAsString(input); [EOL]     assertEquals("{\"rudy\":{\"a\":3}}", jsonWrapped); [EOL]     Bean result = mapper.readValue(jsonUnwrapped, Bean.class); [EOL]     assertNotNull(result); [EOL]     try { [EOL]         result = mapper.reader(Bean.class).with(DeserializationFeature.UNWRAP_ROOT_VALUE).readValue(jsonUnwrapped); [EOL]         fail("Should have failed"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Root name 'a'"); [EOL]     } [EOL]     result = mapper.reader(Bean.class).with(DeserializationFeature.UNWRAP_ROOT_VALUE).readValue(jsonWrapped); [EOL]     assertNotNull(result); [EOL] }
public void testReconfiguringOfWrapping() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     final Bean input = new Bean(); [EOL]     String jsonUnwrapped = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"a\":3}", jsonUnwrapped); [EOL]     String jsonWrapped = mapper.writer(SerializationFeature.WRAP_ROOT_VALUE).writeValueAsString(input); [EOL]     assertEquals("{\"rudy\":{\"a\":3}}", jsonWrapped); [EOL]     Bean result = mapper.readValue(jsonUnwrapped, Bean.class); [EOL]     assertNotNull(result); [EOL]     try { [EOL]         result = mapper.reader(Bean.class).with(DeserializationFeature.UNWRAP_ROOT_VALUE).readValue(jsonUnwrapped); [EOL]         fail("Should have failed"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Root name 'a'"); [EOL]     } [EOL]     result = mapper.reader(Bean.class).with(DeserializationFeature.UNWRAP_ROOT_VALUE).readValue(jsonWrapped); [EOL]     assertNotNull(result); [EOL] }
public void testReconfiguringOfWrapping() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     final Bean input = new Bean(); [EOL]     String jsonUnwrapped = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"a\":3}", jsonUnwrapped); [EOL]     String jsonWrapped = mapper.writer(SerializationFeature.WRAP_ROOT_VALUE).writeValueAsString(input); [EOL]     assertEquals("{\"rudy\":{\"a\":3}}", jsonWrapped); [EOL]     Bean result = mapper.readValue(jsonUnwrapped, Bean.class); [EOL]     assertNotNull(result); [EOL]     try { [EOL]         result = mapper.reader(Bean.class).with(DeserializationFeature.UNWRAP_ROOT_VALUE).readValue(jsonUnwrapped); [EOL]         fail("Should have failed"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Root name 'a'"); [EOL]     } [EOL]     result = mapper.reader(Bean.class).with(DeserializationFeature.UNWRAP_ROOT_VALUE).readValue(jsonWrapped); [EOL]     assertNotNull(result); [EOL] }
public void testReconfiguringOfWrapping() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     final Bean input = new Bean(); [EOL]     String jsonUnwrapped = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"a\":3}", jsonUnwrapped); [EOL]     String jsonWrapped = mapper.writer(SerializationFeature.WRAP_ROOT_VALUE).writeValueAsString(input); [EOL]     assertEquals("{\"rudy\":{\"a\":3}}", jsonWrapped); [EOL]     Bean result = mapper.readValue(jsonUnwrapped, Bean.class); [EOL]     assertNotNull(result); [EOL]     try { [EOL]         result = mapper.reader(Bean.class).with(DeserializationFeature.UNWRAP_ROOT_VALUE).readValue(jsonUnwrapped); [EOL]         fail("Should have failed"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Root name 'a'"); [EOL]     } [EOL]     result = mapper.reader(Bean.class).with(DeserializationFeature.UNWRAP_ROOT_VALUE).readValue(jsonWrapped); [EOL]     assertNotNull(result); [EOL] }
public void testReconfiguringOfWrapping() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     final Bean input = new Bean(); [EOL]     String jsonUnwrapped = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"a\":3}", jsonUnwrapped); [EOL]     String jsonWrapped = mapper.writer(SerializationFeature.WRAP_ROOT_VALUE).writeValueAsString(input); [EOL]     assertEquals("{\"rudy\":{\"a\":3}}", jsonWrapped); [EOL]     Bean result = mapper.readValue(jsonUnwrapped, Bean.class); [EOL]     assertNotNull(result); [EOL]     try { [EOL]         result = mapper.reader(Bean.class).with(DeserializationFeature.UNWRAP_ROOT_VALUE).readValue(jsonUnwrapped); [EOL]         fail("Should have failed"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Root name 'a'"); [EOL]     } [EOL]     result = mapper.reader(Bean.class).with(DeserializationFeature.UNWRAP_ROOT_VALUE).readValue(jsonWrapped); [EOL]     assertNotNull(result); [EOL] }
public void testReconfiguringOfWrapping() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     final Bean input = new Bean(); [EOL]     String jsonUnwrapped = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"a\":3}", jsonUnwrapped); [EOL]     String jsonWrapped = mapper.writer(SerializationFeature.WRAP_ROOT_VALUE).writeValueAsString(input); [EOL]     assertEquals("{\"rudy\":{\"a\":3}}", jsonWrapped); [EOL]     Bean result = mapper.readValue(jsonUnwrapped, Bean.class); [EOL]     assertNotNull(result); [EOL]     try { [EOL]         result = mapper.reader(Bean.class).with(DeserializationFeature.UNWRAP_ROOT_VALUE).readValue(jsonUnwrapped); [EOL]         fail("Should have failed"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Root name 'a'"); [EOL]     } [EOL]     result = mapper.reader(Bean.class).with(DeserializationFeature.UNWRAP_ROOT_VALUE).readValue(jsonWrapped); [EOL]     assertNotNull(result); [EOL] }
public void testReconfiguringOfWrapping() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     final Bean input = new Bean(); [EOL]     String jsonUnwrapped = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"a\":3}", jsonUnwrapped); [EOL]     String jsonWrapped = mapper.writer(SerializationFeature.WRAP_ROOT_VALUE).writeValueAsString(input); [EOL]     assertEquals("{\"rudy\":{\"a\":3}}", jsonWrapped); [EOL]     Bean result = mapper.readValue(jsonUnwrapped, Bean.class); [EOL]     assertNotNull(result); [EOL]     try { [EOL]         result = mapper.reader(Bean.class).with(DeserializationFeature.UNWRAP_ROOT_VALUE).readValue(jsonUnwrapped); [EOL]         fail("Should have failed"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Root name 'a'"); [EOL]     } [EOL]     result = mapper.reader(Bean.class).with(DeserializationFeature.UNWRAP_ROOT_VALUE).readValue(jsonWrapped); [EOL]     assertNotNull(result); [EOL] }
public void testReconfiguringOfWrapping() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     final Bean input = new Bean(); [EOL]     String jsonUnwrapped = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"a\":3}", jsonUnwrapped); [EOL]     String jsonWrapped = mapper.writer(SerializationFeature.WRAP_ROOT_VALUE).writeValueAsString(input); [EOL]     assertEquals("{\"rudy\":{\"a\":3}}", jsonWrapped); [EOL]     Bean result = mapper.readValue(jsonUnwrapped, Bean.class); [EOL]     assertNotNull(result); [EOL]     try { [EOL]         result = mapper.reader(Bean.class).with(DeserializationFeature.UNWRAP_ROOT_VALUE).readValue(jsonUnwrapped); [EOL]         fail("Should have failed"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Root name 'a'"); [EOL]     } [EOL]     result = mapper.reader(Bean.class).with(DeserializationFeature.UNWRAP_ROOT_VALUE).readValue(jsonWrapped); [EOL]     assertNotNull(result); [EOL] }
public void testReconfiguringOfWrapping() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     final Bean input = new Bean(); [EOL]     String jsonUnwrapped = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"a\":3}", jsonUnwrapped); [EOL]     String jsonWrapped = mapper.writer(SerializationFeature.WRAP_ROOT_VALUE).writeValueAsString(input); [EOL]     assertEquals("{\"rudy\":{\"a\":3}}", jsonWrapped); [EOL]     Bean result = mapper.readValue(jsonUnwrapped, Bean.class); [EOL]     assertNotNull(result); [EOL]     try { [EOL]         result = mapper.reader(Bean.class).with(DeserializationFeature.UNWRAP_ROOT_VALUE).readValue(jsonUnwrapped); [EOL]         fail("Should have failed"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Root name 'a'"); [EOL]     } [EOL]     result = mapper.reader(Bean.class).with(DeserializationFeature.UNWRAP_ROOT_VALUE).readValue(jsonWrapped); [EOL]     assertNotNull(result); [EOL] }
public void testReconfiguringOfWrapping() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     final Bean input = new Bean(); [EOL]     String jsonUnwrapped = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"a\":3}", jsonUnwrapped); [EOL]     String jsonWrapped = mapper.writer(SerializationFeature.WRAP_ROOT_VALUE).writeValueAsString(input); [EOL]     assertEquals("{\"rudy\":{\"a\":3}}", jsonWrapped); [EOL]     Bean result = mapper.readValue(jsonUnwrapped, Bean.class); [EOL]     assertNotNull(result); [EOL]     try { [EOL]         result = mapper.reader(Bean.class).with(DeserializationFeature.UNWRAP_ROOT_VALUE).readValue(jsonUnwrapped); [EOL]         fail("Should have failed"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Root name 'a'"); [EOL]     } [EOL]     result = mapper.reader(Bean.class).with(DeserializationFeature.UNWRAP_ROOT_VALUE).readValue(jsonWrapped); [EOL]     assertNotNull(result); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testReconfiguringOfWrapping() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     final Bean input = new Bean(); [EOL]     String jsonUnwrapped = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"a\":3}", jsonUnwrapped); [EOL]     String jsonWrapped = mapper.writer(SerializationFeature.WRAP_ROOT_VALUE).writeValueAsString(input); [EOL]     assertEquals("{\"rudy\":{\"a\":3}}", jsonWrapped); [EOL]     Bean result = mapper.readValue(jsonUnwrapped, Bean.class); [EOL]     assertNotNull(result); [EOL]     try { [EOL]         result = mapper.reader(Bean.class).with(DeserializationFeature.UNWRAP_ROOT_VALUE).readValue(jsonUnwrapped); [EOL]         fail("Should have failed"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Root name 'a'"); [EOL]     } [EOL]     result = mapper.reader(Bean.class).with(DeserializationFeature.UNWRAP_ROOT_VALUE).readValue(jsonWrapped); [EOL]     assertNotNull(result); [EOL] }
public void testReconfiguringOfWrapping() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     final Bean input = new Bean(); [EOL]     String jsonUnwrapped = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"a\":3}", jsonUnwrapped); [EOL]     String jsonWrapped = mapper.writer(SerializationFeature.WRAP_ROOT_VALUE).writeValueAsString(input); [EOL]     assertEquals("{\"rudy\":{\"a\":3}}", jsonWrapped); [EOL]     Bean result = mapper.readValue(jsonUnwrapped, Bean.class); [EOL]     assertNotNull(result); [EOL]     try { [EOL]         result = mapper.reader(Bean.class).with(DeserializationFeature.UNWRAP_ROOT_VALUE).readValue(jsonUnwrapped); [EOL]         fail("Should have failed"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Root name 'a'"); [EOL]     } [EOL]     result = mapper.reader(Bean.class).with(DeserializationFeature.UNWRAP_ROOT_VALUE).readValue(jsonWrapped); [EOL]     assertNotNull(result); [EOL] }
public void testWithGetterAsSetter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new CStyleStrategy()); [EOL]     SetterlessWithValue input = new SetterlessWithValue().add(3); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"value_list\":[{\"int_value\":3}]}", json); [EOL]     SetterlessWithValue result = mapper.readValue(json, SetterlessWithValue.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(1, result.values.size()); [EOL]     assertEquals(3, result.values.get(0).intValue); [EOL] }
public void testWithGetterAsSetter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new CStyleStrategy()); [EOL]     SetterlessWithValue input = new SetterlessWithValue().add(3); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"value_list\":[{\"int_value\":3}]}", json); [EOL]     SetterlessWithValue result = mapper.readValue(json, SetterlessWithValue.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(1, result.values.size()); [EOL]     assertEquals(3, result.values.get(0).intValue); [EOL] }
public void testWithGetterAsSetter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new CStyleStrategy()); [EOL]     SetterlessWithValue input = new SetterlessWithValue().add(3); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"value_list\":[{\"int_value\":3}]}", json); [EOL]     SetterlessWithValue result = mapper.readValue(json, SetterlessWithValue.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(1, result.values.size()); [EOL]     assertEquals(3, result.values.get(0).intValue); [EOL] }
public void testWithGetterAsSetter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new CStyleStrategy()); [EOL]     SetterlessWithValue input = new SetterlessWithValue().add(3); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"value_list\":[{\"int_value\":3}]}", json); [EOL]     SetterlessWithValue result = mapper.readValue(json, SetterlessWithValue.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(1, result.values.size()); [EOL]     assertEquals(3, result.values.get(0).intValue); [EOL] }
public void testWithGetterAsSetter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new CStyleStrategy()); [EOL]     SetterlessWithValue input = new SetterlessWithValue().add(3); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"value_list\":[{\"int_value\":3}]}", json); [EOL]     SetterlessWithValue result = mapper.readValue(json, SetterlessWithValue.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(1, result.values.size()); [EOL]     assertEquals(3, result.values.get(0).intValue); [EOL] }
public void testWithGetterAsSetter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new CStyleStrategy()); [EOL]     SetterlessWithValue input = new SetterlessWithValue().add(3); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"value_list\":[{\"int_value\":3}]}", json); [EOL]     SetterlessWithValue result = mapper.readValue(json, SetterlessWithValue.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(1, result.values.size()); [EOL]     assertEquals(3, result.values.get(0).intValue); [EOL] }
public void testWithGetterAsSetter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new CStyleStrategy()); [EOL]     SetterlessWithValue input = new SetterlessWithValue().add(3); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"value_list\":[{\"int_value\":3}]}", json); [EOL]     SetterlessWithValue result = mapper.readValue(json, SetterlessWithValue.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(1, result.values.size()); [EOL]     assertEquals(3, result.values.get(0).intValue); [EOL] }
public void testParametricTypes() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t = tf.constructParametricType(ArrayList.class, String.class); [EOL]     assertEquals(CollectionType.class, t.getClass()); [EOL]     JavaType strC = tf.constructType(String.class); [EOL]     assertEquals(1, t.containedTypeCount()); [EOL]     assertEquals(strC, t.containedType(0)); [EOL]     assertNull(t.containedType(1)); [EOL]     JavaType t2 = tf.constructParametricType(Map.class, strC, t); [EOL]     assertEquals(MapType.class, t2.getClass()); [EOL]     assertEquals(2, t2.containedTypeCount()); [EOL]     assertEquals(strC, t2.containedType(0)); [EOL]     assertEquals(t, t2.containedType(1)); [EOL]     assertNull(t2.containedType(2)); [EOL]     JavaType custom = tf.constructParametricType(SingleArgGeneric.class, String.class); [EOL]     assertEquals(SimpleType.class, custom.getClass()); [EOL]     assertEquals(1, custom.containedTypeCount()); [EOL]     assertEquals(strC, custom.containedType(0)); [EOL]     assertNull(custom.containedType(1)); [EOL]     assertEquals("X", custom.containedTypeName(0)); [EOL]     try { [EOL]         tf.constructParametricType(Map.class, strC); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "Need exactly 2 parameter types for Map types"); [EOL]     } [EOL]     try { [EOL]         tf.constructParametricType(SingleArgGeneric.class, strC, strC); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "expected 1 parameters, was given 2"); [EOL]     } [EOL] }
public void testParametricTypes() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t = tf.constructParametricType(ArrayList.class, String.class); [EOL]     assertEquals(CollectionType.class, t.getClass()); [EOL]     JavaType strC = tf.constructType(String.class); [EOL]     assertEquals(1, t.containedTypeCount()); [EOL]     assertEquals(strC, t.containedType(0)); [EOL]     assertNull(t.containedType(1)); [EOL]     JavaType t2 = tf.constructParametricType(Map.class, strC, t); [EOL]     assertEquals(MapType.class, t2.getClass()); [EOL]     assertEquals(2, t2.containedTypeCount()); [EOL]     assertEquals(strC, t2.containedType(0)); [EOL]     assertEquals(t, t2.containedType(1)); [EOL]     assertNull(t2.containedType(2)); [EOL]     JavaType custom = tf.constructParametricType(SingleArgGeneric.class, String.class); [EOL]     assertEquals(SimpleType.class, custom.getClass()); [EOL]     assertEquals(1, custom.containedTypeCount()); [EOL]     assertEquals(strC, custom.containedType(0)); [EOL]     assertNull(custom.containedType(1)); [EOL]     assertEquals("X", custom.containedTypeName(0)); [EOL]     try { [EOL]         tf.constructParametricType(Map.class, strC); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "Need exactly 2 parameter types for Map types"); [EOL]     } [EOL]     try { [EOL]         tf.constructParametricType(SingleArgGeneric.class, strC, strC); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "expected 1 parameters, was given 2"); [EOL]     } [EOL] }
public void testWithGetterAsSetter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new CStyleStrategy()); [EOL]     SetterlessWithValue input = new SetterlessWithValue().add(3); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"value_list\":[{\"int_value\":3}]}", json); [EOL]     SetterlessWithValue result = mapper.readValue(json, SetterlessWithValue.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(1, result.values.size()); [EOL]     assertEquals(3, result.values.get(0).intValue); [EOL] }
public void testWithGetterAsSetter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new CStyleStrategy()); [EOL]     SetterlessWithValue input = new SetterlessWithValue().add(3); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"value_list\":[{\"int_value\":3}]}", json); [EOL]     SetterlessWithValue result = mapper.readValue(json, SetterlessWithValue.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(1, result.values.size()); [EOL]     assertEquals(3, result.values.get(0).intValue); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testRootUsingExplicitConfig() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ObjectWriter writer = mapper.writer().withRootName("wrapper"); [EOL]     String json = writer.writeValueAsString(new Bean()); [EOL]     assertEquals("{\"wrapper\":{\"a\":3}}", json); [EOL]     ObjectReader reader = mapper.reader(Bean.class).withRootName("wrapper"); [EOL]     Bean bean = reader.readValue(json); [EOL]     assertNotNull(bean); [EOL]     ObjectMapper wrapping = rootMapper(); [EOL]     json = wrapping.writer().withRootName("something").writeValueAsString(new Bean()); [EOL]     assertEquals("{\"something\":{\"a\":3}}", json); [EOL]     json = wrapping.writer().withRootName("").writeValueAsString(new Bean()); [EOL]     assertEquals("{\"a\":3}", json); [EOL]     bean = wrapping.reader(Bean.class).withRootName("").readValue(json); [EOL]     assertNotNull(bean); [EOL] }
public void testRootUsingExplicitConfig() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ObjectWriter writer = mapper.writer().withRootName("wrapper"); [EOL]     String json = writer.writeValueAsString(new Bean()); [EOL]     assertEquals("{\"wrapper\":{\"a\":3}}", json); [EOL]     ObjectReader reader = mapper.reader(Bean.class).withRootName("wrapper"); [EOL]     Bean bean = reader.readValue(json); [EOL]     assertNotNull(bean); [EOL]     ObjectMapper wrapping = rootMapper(); [EOL]     json = wrapping.writer().withRootName("something").writeValueAsString(new Bean()); [EOL]     assertEquals("{\"something\":{\"a\":3}}", json); [EOL]     json = wrapping.writer().withRootName("").writeValueAsString(new Bean()); [EOL]     assertEquals("{\"a\":3}", json); [EOL]     bean = wrapping.reader(Bean.class).withRootName("").readValue(json); [EOL]     assertNotNull(bean); [EOL] }
public void testRootUsingExplicitConfig() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ObjectWriter writer = mapper.writer().withRootName("wrapper"); [EOL]     String json = writer.writeValueAsString(new Bean()); [EOL]     assertEquals("{\"wrapper\":{\"a\":3}}", json); [EOL]     ObjectReader reader = mapper.reader(Bean.class).withRootName("wrapper"); [EOL]     Bean bean = reader.readValue(json); [EOL]     assertNotNull(bean); [EOL]     ObjectMapper wrapping = rootMapper(); [EOL]     json = wrapping.writer().withRootName("something").writeValueAsString(new Bean()); [EOL]     assertEquals("{\"something\":{\"a\":3}}", json); [EOL]     json = wrapping.writer().withRootName("").writeValueAsString(new Bean()); [EOL]     assertEquals("{\"a\":3}", json); [EOL]     bean = wrapping.reader(Bean.class).withRootName("").readValue(json); [EOL]     assertNotNull(bean); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(NullNode.instance, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(NullNode.instance, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(NullNode.instance, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(NullNode.instance, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(NullNode.instance, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(NullNode.instance, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(NullNode.instance, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSimpleArrayMethod() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     MethodWrapperBeanArray array = new MethodWrapperBeanArray(new MethodWrapperBean[] { new MethodWrapperBean(new StringWrapper("A")) }); [EOL]     String json = mapper.writeValueAsString(array); [EOL]     MethodWrapperBeanArray result = mapper.readValue(json, MethodWrapperBeanArray.class); [EOL]     assertNotNull(result); [EOL]     MethodWrapperBean[] beans = result.beans; [EOL]     assertEquals(1, beans.length); [EOL]     MethodWrapperBean bean = beans[0]; [EOL]     assertEquals(StringWrapper.class, bean.value.getClass()); [EOL]     assertEquals(((StringWrapper) bean.value).str, "A"); [EOL] }
public void testSimpleArrayMethod() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     MethodWrapperBeanArray array = new MethodWrapperBeanArray(new MethodWrapperBean[] { new MethodWrapperBean(new StringWrapper("A")) }); [EOL]     String json = mapper.writeValueAsString(array); [EOL]     MethodWrapperBeanArray result = mapper.readValue(json, MethodWrapperBeanArray.class); [EOL]     assertNotNull(result); [EOL]     MethodWrapperBean[] beans = result.beans; [EOL]     assertEquals(1, beans.length); [EOL]     MethodWrapperBean bean = beans[0]; [EOL]     assertEquals(StringWrapper.class, bean.value.getClass()); [EOL]     assertEquals(((StringWrapper) bean.value).str, "A"); [EOL] }
public void testSimpleArrayMethod() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     MethodWrapperBeanArray array = new MethodWrapperBeanArray(new MethodWrapperBean[] { new MethodWrapperBean(new StringWrapper("A")) }); [EOL]     String json = mapper.writeValueAsString(array); [EOL]     MethodWrapperBeanArray result = mapper.readValue(json, MethodWrapperBeanArray.class); [EOL]     assertNotNull(result); [EOL]     MethodWrapperBean[] beans = result.beans; [EOL]     assertEquals(1, beans.length); [EOL]     MethodWrapperBean bean = beans[0]; [EOL]     assertEquals(StringWrapper.class, bean.value.getClass()); [EOL]     assertEquals(((StringWrapper) bean.value).str, "A"); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
public void testSupport() { [EOL]     assertTrue(MAPPER.canSerialize(String.class)); [EOL]     assertTrue(MAPPER.canDeserialize(TypeFactory.defaultInstance().constructType(String.class))); [EOL] }
public void testSupport() { [EOL]     assertTrue(MAPPER.canSerialize(String.class)); [EOL]     assertTrue(MAPPER.canDeserialize(TypeFactory.defaultInstance().constructType(String.class))); [EOL] }
public void testSupport() { [EOL]     assertTrue(MAPPER.canSerialize(String.class)); [EOL]     assertTrue(MAPPER.canDeserialize(TypeFactory.defaultInstance().constructType(String.class))); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testBrokenWithDoubleAnnotations() throws Exception { [EOL]     try { [EOL]         @SuppressWarnings("unused") [EOL]         Broken b = MAPPER.readValue("{ \"a\" : 3 }", Broken.class); [EOL]         fail("Should have gotten an exception"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Multiple 'any-setters'"); [EOL]     } [EOL] }
public void testBrokenWithDoubleAnnotations() throws Exception { [EOL]     try { [EOL]         @SuppressWarnings("unused") [EOL]         Broken b = MAPPER.readValue("{ \"a\" : 3 }", Broken.class); [EOL]         fail("Should have gotten an exception"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Multiple 'any-setters'"); [EOL]     } [EOL] }
public void testBrokenWithDoubleAnnotations() throws Exception { [EOL]     try { [EOL]         @SuppressWarnings("unused") [EOL]         Broken b = MAPPER.readValue("{ \"a\" : 3 }", Broken.class); [EOL]         fail("Should have gotten an exception"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Multiple 'any-setters'"); [EOL]     } [EOL] }
public void testBrokenWithDoubleAnnotations() throws Exception { [EOL]     try { [EOL]         @SuppressWarnings("unused") [EOL]         Broken b = MAPPER.readValue("{ \"a\" : 3 }", Broken.class); [EOL]         fail("Should have gotten an exception"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Multiple 'any-setters'"); [EOL]     } [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
public void testRootInterfaceAs() throws Exception { [EOL]     RootInterface value = new ObjectMapper().readValue("{\"a\":\"abc\" }", RootInterface.class); [EOL]     assertTrue(value instanceof RootInterfaceImpl); [EOL]     assertEquals("abc", value.getA()); [EOL] }
public void testCustomPropertyViaProperty() throws Exception { [EOL]     IdWrapperCustom src = new IdWrapperCustom(123, 7); [EOL]     src.node.next = src; [EOL]     String json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL]     json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL] }
public void testCustomPropertyViaProperty() throws Exception { [EOL]     IdWrapperCustom src = new IdWrapperCustom(123, 7); [EOL]     src.node.next = src; [EOL]     String json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL]     json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL] }
public void testCustomPropertyViaProperty() throws Exception { [EOL]     IdWrapperCustom src = new IdWrapperCustom(123, 7); [EOL]     src.node.next = src; [EOL]     String json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL]     json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL] }
public void testCustomPropertyViaProperty() throws Exception { [EOL]     IdWrapperCustom src = new IdWrapperCustom(123, 7); [EOL]     src.node.next = src; [EOL]     String json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL]     json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL] }
public void testCustomPropertyViaProperty() throws Exception { [EOL]     IdWrapperCustom src = new IdWrapperCustom(123, 7); [EOL]     src.node.next = src; [EOL]     String json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL]     json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL] }
public void testIssue811() throws Exception { [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.disable(MapperFeature.AUTO_DETECT_CREATORS); [EOL]     om.disable(MapperFeature.AUTO_DETECT_GETTERS); [EOL]     om.disable(MapperFeature.AUTO_DETECT_IS_GETTERS); [EOL]     om.setVisibility(PropertyAccessor.FIELD, Visibility.ANY); [EOL]     om.enable(SerializationFeature.WRITE_ENUMS_USING_INDEX); [EOL]     om.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     om.enableDefaultTypingAsProperty(DefaultTyping.NON_FINAL, "@class"); [EOL]     Process p = new Process(); [EOL]     Scope s = new Scope(p, null); [EOL]     FaultHandler fh = new FaultHandler(p); [EOL]     Catch c = new Catch(p, s); [EOL]     fh.catchBlocks.add(c); [EOL]     s.faultHandlers.add(fh); [EOL]     String json = om.writeValueAsString(p); [EOL]     Process restored = om.readValue(json, Process.class); [EOL]     assertNotNull(restored); [EOL]     assertEquals(0, p.id); [EOL]     assertEquals(3, p.children.size()); [EOL]     assertSame(p, p.children.get(0).owner); [EOL]     assertSame(p, p.children.get(1).owner); [EOL]     assertSame(p, p.children.get(2).owner); [EOL] }
public void testIssue811() throws Exception { [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.disable(MapperFeature.AUTO_DETECT_CREATORS); [EOL]     om.disable(MapperFeature.AUTO_DETECT_GETTERS); [EOL]     om.disable(MapperFeature.AUTO_DETECT_IS_GETTERS); [EOL]     om.setVisibility(PropertyAccessor.FIELD, Visibility.ANY); [EOL]     om.enable(SerializationFeature.WRITE_ENUMS_USING_INDEX); [EOL]     om.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     om.enableDefaultTypingAsProperty(DefaultTyping.NON_FINAL, "@class"); [EOL]     Process p = new Process(); [EOL]     Scope s = new Scope(p, null); [EOL]     FaultHandler fh = new FaultHandler(p); [EOL]     Catch c = new Catch(p, s); [EOL]     fh.catchBlocks.add(c); [EOL]     s.faultHandlers.add(fh); [EOL]     String json = om.writeValueAsString(p); [EOL]     Process restored = om.readValue(json, Process.class); [EOL]     assertNotNull(restored); [EOL]     assertEquals(0, p.id); [EOL]     assertEquals(3, p.children.size()); [EOL]     assertSame(p, p.children.get(0).owner); [EOL]     assertSame(p, p.children.get(1).owner); [EOL]     assertSame(p, p.children.get(2).owner); [EOL] }
public void testIssue811() throws Exception { [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.disable(MapperFeature.AUTO_DETECT_CREATORS); [EOL]     om.disable(MapperFeature.AUTO_DETECT_GETTERS); [EOL]     om.disable(MapperFeature.AUTO_DETECT_IS_GETTERS); [EOL]     om.setVisibility(PropertyAccessor.FIELD, Visibility.ANY); [EOL]     om.enable(SerializationFeature.WRITE_ENUMS_USING_INDEX); [EOL]     om.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     om.enableDefaultTypingAsProperty(DefaultTyping.NON_FINAL, "@class"); [EOL]     Process p = new Process(); [EOL]     Scope s = new Scope(p, null); [EOL]     FaultHandler fh = new FaultHandler(p); [EOL]     Catch c = new Catch(p, s); [EOL]     fh.catchBlocks.add(c); [EOL]     s.faultHandlers.add(fh); [EOL]     String json = om.writeValueAsString(p); [EOL]     Process restored = om.readValue(json, Process.class); [EOL]     assertNotNull(restored); [EOL]     assertEquals(0, p.id); [EOL]     assertEquals(3, p.children.size()); [EOL]     assertSame(p, p.children.get(0).owner); [EOL]     assertSame(p, p.children.get(1).owner); [EOL]     assertSame(p, p.children.get(2).owner); [EOL] }
public void testIssue811() throws Exception { [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.disable(MapperFeature.AUTO_DETECT_CREATORS); [EOL]     om.disable(MapperFeature.AUTO_DETECT_GETTERS); [EOL]     om.disable(MapperFeature.AUTO_DETECT_IS_GETTERS); [EOL]     om.setVisibility(PropertyAccessor.FIELD, Visibility.ANY); [EOL]     om.enable(SerializationFeature.WRITE_ENUMS_USING_INDEX); [EOL]     om.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     om.enableDefaultTypingAsProperty(DefaultTyping.NON_FINAL, "@class"); [EOL]     Process p = new Process(); [EOL]     Scope s = new Scope(p, null); [EOL]     FaultHandler fh = new FaultHandler(p); [EOL]     Catch c = new Catch(p, s); [EOL]     fh.catchBlocks.add(c); [EOL]     s.faultHandlers.add(fh); [EOL]     String json = om.writeValueAsString(p); [EOL]     Process restored = om.readValue(json, Process.class); [EOL]     assertNotNull(restored); [EOL]     assertEquals(0, p.id); [EOL]     assertEquals(3, p.children.size()); [EOL]     assertSame(p, p.children.get(0).owner); [EOL]     assertSame(p, p.children.get(1).owner); [EOL]     assertSame(p, p.children.get(2).owner); [EOL] }
public void testCustomPropertyViaProperty() throws Exception { [EOL]     IdWrapperCustom src = new IdWrapperCustom(123, 7); [EOL]     src.node.next = src; [EOL]     String json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL]     json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL] }
public void testCustomPropertyViaProperty() throws Exception { [EOL]     IdWrapperCustom src = new IdWrapperCustom(123, 7); [EOL]     src.node.next = src; [EOL]     String json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL]     json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL] }
public void testCustomPropertyViaProperty() throws Exception { [EOL]     IdWrapperCustom src = new IdWrapperCustom(123, 7); [EOL]     src.node.next = src; [EOL]     String json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL]     json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL] }
public void testCustomPropertyViaProperty() throws Exception { [EOL]     IdWrapperCustom src = new IdWrapperCustom(123, 7); [EOL]     src.node.next = src; [EOL]     String json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL]     json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL] }
public void testBeanAsObject() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String str = m.writeValueAsString(new Object[] { new StringBean("abc") }); [EOL]     _verifySerializationAsMap(str); [EOL]     Object ob = m.readValue(str, Object[].class); [EOL]     assertNotNull(ob); [EOL]     Object[] result = (Object[]) ob; [EOL]     assertNotNull(result[0]); [EOL]     assertEquals(StringBean.class, result[0].getClass()); [EOL]     assertEquals("abc", ((StringBean) result[0]).name); [EOL] }
public void testBeanAsObject() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String str = m.writeValueAsString(new Object[] { new StringBean("abc") }); [EOL]     _verifySerializationAsMap(str); [EOL]     Object ob = m.readValue(str, Object[].class); [EOL]     assertNotNull(ob); [EOL]     Object[] result = (Object[]) ob; [EOL]     assertNotNull(result[0]); [EOL]     assertEquals(StringBean.class, result[0].getClass()); [EOL]     assertEquals("abc", ((StringBean) result[0]).name); [EOL] }
public void testBeanAsObject() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String str = m.writeValueAsString(new Object[] { new StringBean("abc") }); [EOL]     _verifySerializationAsMap(str); [EOL]     Object ob = m.readValue(str, Object[].class); [EOL]     assertNotNull(ob); [EOL]     Object[] result = (Object[]) ob; [EOL]     assertNotNull(result[0]); [EOL]     assertEquals(StringBean.class, result[0].getClass()); [EOL]     assertEquals("abc", ((StringBean) result[0]).name); [EOL] }
public void testBeanAsObject() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String str = m.writeValueAsString(new Object[] { new StringBean("abc") }); [EOL]     _verifySerializationAsMap(str); [EOL]     Object ob = m.readValue(str, Object[].class); [EOL]     assertNotNull(ob); [EOL]     Object[] result = (Object[]) ob; [EOL]     assertNotNull(result[0]); [EOL]     assertEquals(StringBean.class, result[0].getClass()); [EOL]     assertEquals("abc", ((StringBean) result[0]).name); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testSpecialMap() throws IOException { [EOL]     final ObjectWrapperMap map = MAPPER.readValue(UNTYPED_MAP_JSON, ObjectWrapperMap.class); [EOL]     _doTestUntyped(map); [EOL] }
public void testSpecialMap() throws IOException { [EOL]     final ObjectWrapperMap map = MAPPER.readValue(UNTYPED_MAP_JSON, ObjectWrapperMap.class); [EOL]     _doTestUntyped(map); [EOL] }
public void testSpecialMap() throws IOException { [EOL]     final ObjectWrapperMap map = MAPPER.readValue(UNTYPED_MAP_JSON, ObjectWrapperMap.class); [EOL]     _doTestUntyped(map); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testWithScalar118() throws Exception { [EOL]     ExternalTypeWithNonPOJO input = new ExternalTypeWithNonPOJO(new java.util.Date(123L)); [EOL]     String json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     ExternalTypeWithNonPOJO result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof java.util.Date); [EOL] }
public void testWithScalar118() throws Exception { [EOL]     ExternalTypeWithNonPOJO input = new ExternalTypeWithNonPOJO(new java.util.Date(123L)); [EOL]     String json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     ExternalTypeWithNonPOJO result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof java.util.Date); [EOL] }
public void testWithScalar118() throws Exception { [EOL]     ExternalTypeWithNonPOJO input = new ExternalTypeWithNonPOJO(new java.util.Date(123L)); [EOL]     String json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     ExternalTypeWithNonPOJO result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof java.util.Date); [EOL] }
public void testWithScalar118() throws Exception { [EOL]     ExternalTypeWithNonPOJO input = new ExternalTypeWithNonPOJO(new java.util.Date(123L)); [EOL]     String json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     ExternalTypeWithNonPOJO result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof java.util.Date); [EOL] }
public void testCustomCalendarWithAnnotation() throws Exception { [EOL]     CalendarAsStringBean cbean = MAPPER.readValue("{\"cal\":\";2007/07/13;\"}", CalendarAsStringBean.class); [EOL]     assertNotNull(cbean); [EOL]     assertNotNull(cbean.cal); [EOL]     Calendar c = cbean.cal; [EOL]     assertEquals(2007, c.get(Calendar.YEAR)); [EOL]     assertEquals(Calendar.JULY, c.get(Calendar.MONTH)); [EOL]     assertEquals(13, c.get(Calendar.DAY_OF_MONTH)); [EOL] }
public void testCustomCalendarWithAnnotation() throws Exception { [EOL]     CalendarAsStringBean cbean = MAPPER.readValue("{\"cal\":\";2007/07/13;\"}", CalendarAsStringBean.class); [EOL]     assertNotNull(cbean); [EOL]     assertNotNull(cbean.cal); [EOL]     Calendar c = cbean.cal; [EOL]     assertEquals(2007, c.get(Calendar.YEAR)); [EOL]     assertEquals(Calendar.JULY, c.get(Calendar.MONTH)); [EOL]     assertEquals(13, c.get(Calendar.DAY_OF_MONTH)); [EOL] }
public void testCustomCalendarWithAnnotation() throws Exception { [EOL]     CalendarAsStringBean cbean = MAPPER.readValue("{\"cal\":\";2007/07/13;\"}", CalendarAsStringBean.class); [EOL]     assertNotNull(cbean); [EOL]     assertNotNull(cbean.cal); [EOL]     Calendar c = cbean.cal; [EOL]     assertEquals(2007, c.get(Calendar.YEAR)); [EOL]     assertEquals(Calendar.JULY, c.get(Calendar.MONTH)); [EOL]     assertEquals(13, c.get(Calendar.DAY_OF_MONTH)); [EOL] }
public void testWithScalar118() throws Exception { [EOL]     ExternalTypeWithNonPOJO input = new ExternalTypeWithNonPOJO(new java.util.Date(123L)); [EOL]     String json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     ExternalTypeWithNonPOJO result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof java.util.Date); [EOL] }
public void testWithScalar118() throws Exception { [EOL]     ExternalTypeWithNonPOJO input = new ExternalTypeWithNonPOJO(new java.util.Date(123L)); [EOL]     String json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     ExternalTypeWithNonPOJO result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof java.util.Date); [EOL] }
public void testWithScalar118() throws Exception { [EOL]     ExternalTypeWithNonPOJO input = new ExternalTypeWithNonPOJO(new java.util.Date(123L)); [EOL]     String json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     ExternalTypeWithNonPOJO result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof java.util.Date); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testNoArgsFactory() throws Exception { [EOL]     NoArgFactoryBean value = MAPPER.readValue("{\"y\":13}", NoArgFactoryBean.class); [EOL]     assertEquals(13, value.y); [EOL]     assertEquals(123, value.x); [EOL] }
public void testIssue797() throws Exception { [EOL]     String json = MAPPER.writeValueAsString(new Bean797BaseImpl()); [EOL]     assertEquals("{}", json); [EOL] }
public void testIssue797() throws Exception { [EOL]     String json = MAPPER.writeValueAsString(new Bean797BaseImpl()); [EOL]     assertEquals("{}", json); [EOL] }
public void testIssue797() throws Exception { [EOL]     String json = MAPPER.writeValueAsString(new Bean797BaseImpl()); [EOL]     assertEquals("{}", json); [EOL] }
public void testBrokenWithDoubleAnnotations() throws Exception { [EOL]     try { [EOL]         @SuppressWarnings("unused") [EOL]         Broken b = MAPPER.readValue("{ \"a\" : 3 }", Broken.class); [EOL]         fail("Should have gotten an exception"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Multiple 'any-setters'"); [EOL]     } [EOL] }
public void testBrokenWithDoubleAnnotations() throws Exception { [EOL]     try { [EOL]         @SuppressWarnings("unused") [EOL]         Broken b = MAPPER.readValue("{ \"a\" : 3 }", Broken.class); [EOL]         fail("Should have gotten an exception"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Multiple 'any-setters'"); [EOL]     } [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testIssue709() throws Exception { [EOL]     byte[] inputData = new byte[] { 1, 2, 3 }; [EOL]     ObjectNode node = MAPPER.createObjectNode(); [EOL]     node.put("data", inputData); [EOL]     Issue709Bean result = MAPPER.treeToValue(node, Issue709Bean.class); [EOL]     String json = MAPPER.writeValueAsString(node); [EOL]     Issue709Bean resultFromString = MAPPER.readValue(json, Issue709Bean.class); [EOL]     Issue709Bean resultFromConvert = MAPPER.convertValue(node, Issue709Bean.class); [EOL]     Assert.assertArrayEquals(inputData, resultFromString.data); [EOL]     Assert.assertArrayEquals(inputData, resultFromConvert.data); [EOL]     Assert.assertArrayEquals(inputData, result.data); [EOL] }
public void testIssue709() throws Exception { [EOL]     byte[] inputData = new byte[] { 1, 2, 3 }; [EOL]     ObjectNode node = MAPPER.createObjectNode(); [EOL]     node.put("data", inputData); [EOL]     Issue709Bean result = MAPPER.treeToValue(node, Issue709Bean.class); [EOL]     String json = MAPPER.writeValueAsString(node); [EOL]     Issue709Bean resultFromString = MAPPER.readValue(json, Issue709Bean.class); [EOL]     Issue709Bean resultFromConvert = MAPPER.convertValue(node, Issue709Bean.class); [EOL]     Assert.assertArrayEquals(inputData, resultFromString.data); [EOL]     Assert.assertArrayEquals(inputData, resultFromConvert.data); [EOL]     Assert.assertArrayEquals(inputData, result.data); [EOL] }
public void testIssue709() throws Exception { [EOL]     byte[] inputData = new byte[] { 1, 2, 3 }; [EOL]     ObjectNode node = MAPPER.createObjectNode(); [EOL]     node.put("data", inputData); [EOL]     Issue709Bean result = MAPPER.treeToValue(node, Issue709Bean.class); [EOL]     String json = MAPPER.writeValueAsString(node); [EOL]     Issue709Bean resultFromString = MAPPER.readValue(json, Issue709Bean.class); [EOL]     Issue709Bean resultFromConvert = MAPPER.convertValue(node, Issue709Bean.class); [EOL]     Assert.assertArrayEquals(inputData, resultFromString.data); [EOL]     Assert.assertArrayEquals(inputData, resultFromConvert.data); [EOL]     Assert.assertArrayEquals(inputData, result.data); [EOL] }
public void testIssue709() throws Exception { [EOL]     byte[] inputData = new byte[] { 1, 2, 3 }; [EOL]     ObjectNode node = MAPPER.createObjectNode(); [EOL]     node.put("data", inputData); [EOL]     Issue709Bean result = MAPPER.treeToValue(node, Issue709Bean.class); [EOL]     String json = MAPPER.writeValueAsString(node); [EOL]     Issue709Bean resultFromString = MAPPER.readValue(json, Issue709Bean.class); [EOL]     Issue709Bean resultFromConvert = MAPPER.convertValue(node, Issue709Bean.class); [EOL]     Assert.assertArrayEquals(inputData, resultFromString.data); [EOL]     Assert.assertArrayEquals(inputData, resultFromConvert.data); [EOL]     Assert.assertArrayEquals(inputData, result.data); [EOL] }
public void testBeanAsObject() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String str = m.writeValueAsString(new Object[] { new StringBean("abc") }); [EOL]     _verifySerializationAsMap(str); [EOL]     Object ob = m.readValue(str, Object[].class); [EOL]     assertNotNull(ob); [EOL]     Object[] result = (Object[]) ob; [EOL]     assertNotNull(result[0]); [EOL]     assertEquals(StringBean.class, result[0].getClass()); [EOL]     assertEquals("abc", ((StringBean) result[0]).name); [EOL] }
public void testBeanAsObject() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String str = m.writeValueAsString(new Object[] { new StringBean("abc") }); [EOL]     _verifySerializationAsMap(str); [EOL]     Object ob = m.readValue(str, Object[].class); [EOL]     assertNotNull(ob); [EOL]     Object[] result = (Object[]) ob; [EOL]     assertNotNull(result[0]); [EOL]     assertEquals(StringBean.class, result[0].getClass()); [EOL]     assertEquals("abc", ((StringBean) result[0]).name); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testBeanAsObject() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String str = m.writeValueAsString(new Object[] { new StringBean("abc") }); [EOL]     _verifySerializationAsMap(str); [EOL]     Object ob = m.readValue(str, Object[].class); [EOL]     assertNotNull(ob); [EOL]     Object[] result = (Object[]) ob; [EOL]     assertNotNull(result[0]); [EOL]     assertEquals(StringBean.class, result[0].getClass()); [EOL]     assertEquals("abc", ((StringBean) result[0]).name); [EOL] }
public void testBeanAsObject() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String str = m.writeValueAsString(new Object[] { new StringBean("abc") }); [EOL]     _verifySerializationAsMap(str); [EOL]     Object ob = m.readValue(str, Object[].class); [EOL]     assertNotNull(ob); [EOL]     Object[] result = (Object[]) ob; [EOL]     assertNotNull(result[0]); [EOL]     assertEquals(StringBean.class, result[0].getClass()); [EOL]     assertEquals("abc", ((StringBean) result[0]).name); [EOL] }
public void testBeanAsObject() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String str = m.writeValueAsString(new Object[] { new StringBean("abc") }); [EOL]     _verifySerializationAsMap(str); [EOL]     Object ob = m.readValue(str, Object[].class); [EOL]     assertNotNull(ob); [EOL]     Object[] result = (Object[]) ob; [EOL]     assertNotNull(result[0]); [EOL]     assertEquals(StringBean.class, result[0].getClass()); [EOL]     assertEquals("abc", ((StringBean) result[0]).name); [EOL] }
public void testLong() { [EOL]     LongNode n = LongNode.valueOf(1L); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.LONG, n.numberType()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(LongNode.valueOf(0).canConvertToInt()); [EOL]     assertTrue(LongNode.valueOf(Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(LongNode.valueOf(Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertFalse(LongNode.valueOf(1L + Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertFalse(LongNode.valueOf(-1L + Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(LongNode.valueOf(0L).canConvertToLong()); [EOL]     assertTrue(LongNode.valueOf(Long.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(LongNode.valueOf(Long.MIN_VALUE).canConvertToLong()); [EOL] }
public void testLong() { [EOL]     LongNode n = LongNode.valueOf(1L); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.LONG, n.numberType()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(LongNode.valueOf(0).canConvertToInt()); [EOL]     assertTrue(LongNode.valueOf(Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(LongNode.valueOf(Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertFalse(LongNode.valueOf(1L + Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertFalse(LongNode.valueOf(-1L + Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(LongNode.valueOf(0L).canConvertToLong()); [EOL]     assertTrue(LongNode.valueOf(Long.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(LongNode.valueOf(Long.MIN_VALUE).canConvertToLong()); [EOL] }
public void testLong() { [EOL]     LongNode n = LongNode.valueOf(1L); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.LONG, n.numberType()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(LongNode.valueOf(0).canConvertToInt()); [EOL]     assertTrue(LongNode.valueOf(Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(LongNode.valueOf(Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertFalse(LongNode.valueOf(1L + Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertFalse(LongNode.valueOf(-1L + Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(LongNode.valueOf(0L).canConvertToLong()); [EOL]     assertTrue(LongNode.valueOf(Long.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(LongNode.valueOf(Long.MIN_VALUE).canConvertToLong()); [EOL] }
public void testLong() { [EOL]     LongNode n = LongNode.valueOf(1L); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.LONG, n.numberType()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(LongNode.valueOf(0).canConvertToInt()); [EOL]     assertTrue(LongNode.valueOf(Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(LongNode.valueOf(Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertFalse(LongNode.valueOf(1L + Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertFalse(LongNode.valueOf(-1L + Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(LongNode.valueOf(0L).canConvertToLong()); [EOL]     assertTrue(LongNode.valueOf(Long.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(LongNode.valueOf(Long.MIN_VALUE).canConvertToLong()); [EOL] }
public void testLong() { [EOL]     LongNode n = LongNode.valueOf(1L); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.LONG, n.numberType()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(LongNode.valueOf(0).canConvertToInt()); [EOL]     assertTrue(LongNode.valueOf(Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(LongNode.valueOf(Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertFalse(LongNode.valueOf(1L + Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertFalse(LongNode.valueOf(-1L + Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(LongNode.valueOf(0L).canConvertToLong()); [EOL]     assertTrue(LongNode.valueOf(Long.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(LongNode.valueOf(Long.MIN_VALUE).canConvertToLong()); [EOL] }
public void testLong() { [EOL]     LongNode n = LongNode.valueOf(1L); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.LONG, n.numberType()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(LongNode.valueOf(0).canConvertToInt()); [EOL]     assertTrue(LongNode.valueOf(Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(LongNode.valueOf(Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertFalse(LongNode.valueOf(1L + Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertFalse(LongNode.valueOf(-1L + Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(LongNode.valueOf(0L).canConvertToLong()); [EOL]     assertTrue(LongNode.valueOf(Long.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(LongNode.valueOf(Long.MIN_VALUE).canConvertToLong()); [EOL] }
public void testLong() { [EOL]     LongNode n = LongNode.valueOf(1L); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.LONG, n.numberType()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(LongNode.valueOf(0).canConvertToInt()); [EOL]     assertTrue(LongNode.valueOf(Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(LongNode.valueOf(Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertFalse(LongNode.valueOf(1L + Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertFalse(LongNode.valueOf(-1L + Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(LongNode.valueOf(0L).canConvertToLong()); [EOL]     assertTrue(LongNode.valueOf(Long.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(LongNode.valueOf(Long.MIN_VALUE).canConvertToLong()); [EOL] }
public void testLong() { [EOL]     LongNode n = LongNode.valueOf(1L); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.LONG, n.numberType()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(LongNode.valueOf(0).canConvertToInt()); [EOL]     assertTrue(LongNode.valueOf(Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(LongNode.valueOf(Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertFalse(LongNode.valueOf(1L + Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertFalse(LongNode.valueOf(-1L + Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(LongNode.valueOf(0L).canConvertToLong()); [EOL]     assertTrue(LongNode.valueOf(Long.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(LongNode.valueOf(Long.MIN_VALUE).canConvertToLong()); [EOL] }
public void testLong() { [EOL]     LongNode n = LongNode.valueOf(1L); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.LONG, n.numberType()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(LongNode.valueOf(0).canConvertToInt()); [EOL]     assertTrue(LongNode.valueOf(Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(LongNode.valueOf(Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertFalse(LongNode.valueOf(1L + Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertFalse(LongNode.valueOf(-1L + Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(LongNode.valueOf(0L).canConvertToLong()); [EOL]     assertTrue(LongNode.valueOf(Long.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(LongNode.valueOf(Long.MIN_VALUE).canConvertToLong()); [EOL] }
public void testLong() { [EOL]     LongNode n = LongNode.valueOf(1L); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.LONG, n.numberType()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(LongNode.valueOf(0).canConvertToInt()); [EOL]     assertTrue(LongNode.valueOf(Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(LongNode.valueOf(Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertFalse(LongNode.valueOf(1L + Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertFalse(LongNode.valueOf(-1L + Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(LongNode.valueOf(0L).canConvertToLong()); [EOL]     assertTrue(LongNode.valueOf(Long.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(LongNode.valueOf(Long.MIN_VALUE).canConvertToLong()); [EOL] }
public void testAsBoolean() throws Exception { [EOL]     assertEquals(false, BooleanNode.FALSE.asBoolean()); [EOL]     assertEquals(true, BooleanNode.TRUE.asBoolean()); [EOL]     assertEquals(false, IntNode.valueOf(0).asBoolean()); [EOL]     assertEquals(true, IntNode.valueOf(1).asBoolean()); [EOL]     assertEquals(false, LongNode.valueOf(0).asBoolean()); [EOL]     assertEquals(true, LongNode.valueOf(-34L).asBoolean()); [EOL]     assertEquals(true, new TextNode("true").asBoolean()); [EOL]     assertEquals(false, new TextNode("false").asBoolean()); [EOL]     assertEquals(false, new TextNode("barf").asBoolean()); [EOL]     assertEquals(true, new TextNode("barf").asBoolean(true)); [EOL]     assertEquals(true, new POJONode(Boolean.TRUE).asBoolean()); [EOL] }
public void testAsBoolean() throws Exception { [EOL]     assertEquals(false, BooleanNode.FALSE.asBoolean()); [EOL]     assertEquals(true, BooleanNode.TRUE.asBoolean()); [EOL]     assertEquals(false, IntNode.valueOf(0).asBoolean()); [EOL]     assertEquals(true, IntNode.valueOf(1).asBoolean()); [EOL]     assertEquals(false, LongNode.valueOf(0).asBoolean()); [EOL]     assertEquals(true, LongNode.valueOf(-34L).asBoolean()); [EOL]     assertEquals(true, new TextNode("true").asBoolean()); [EOL]     assertEquals(false, new TextNode("false").asBoolean()); [EOL]     assertEquals(false, new TextNode("barf").asBoolean()); [EOL]     assertEquals(true, new TextNode("barf").asBoolean(true)); [EOL]     assertEquals(true, new POJONode(Boolean.TRUE).asBoolean()); [EOL] }
public void testLong() { [EOL]     LongNode n = LongNode.valueOf(1L); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.LONG, n.numberType()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(LongNode.valueOf(0).canConvertToInt()); [EOL]     assertTrue(LongNode.valueOf(Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(LongNode.valueOf(Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertFalse(LongNode.valueOf(1L + Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertFalse(LongNode.valueOf(-1L + Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(LongNode.valueOf(0L).canConvertToLong()); [EOL]     assertTrue(LongNode.valueOf(Long.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(LongNode.valueOf(Long.MIN_VALUE).canConvertToLong()); [EOL] }
public void testLong() { [EOL]     LongNode n = LongNode.valueOf(1L); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.LONG, n.numberType()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(LongNode.valueOf(0).canConvertToInt()); [EOL]     assertTrue(LongNode.valueOf(Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(LongNode.valueOf(Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertFalse(LongNode.valueOf(1L + Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertFalse(LongNode.valueOf(-1L + Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(LongNode.valueOf(0L).canConvertToLong()); [EOL]     assertTrue(LongNode.valueOf(Long.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(LongNode.valueOf(Long.MIN_VALUE).canConvertToLong()); [EOL] }
public void testLong() { [EOL]     LongNode n = LongNode.valueOf(1L); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.LONG, n.numberType()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(LongNode.valueOf(0).canConvertToInt()); [EOL]     assertTrue(LongNode.valueOf(Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(LongNode.valueOf(Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertFalse(LongNode.valueOf(1L + Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertFalse(LongNode.valueOf(-1L + Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(LongNode.valueOf(0L).canConvertToLong()); [EOL]     assertTrue(LongNode.valueOf(Long.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(LongNode.valueOf(Long.MIN_VALUE).canConvertToLong()); [EOL] }
public void testLong() { [EOL]     LongNode n = LongNode.valueOf(1L); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.LONG, n.numberType()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(LongNode.valueOf(0).canConvertToInt()); [EOL]     assertTrue(LongNode.valueOf(Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(LongNode.valueOf(Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertFalse(LongNode.valueOf(1L + Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertFalse(LongNode.valueOf(-1L + Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(LongNode.valueOf(0L).canConvertToLong()); [EOL]     assertTrue(LongNode.valueOf(Long.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(LongNode.valueOf(Long.MIN_VALUE).canConvertToLong()); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
public void testIssue797() throws Exception { [EOL]     String json = MAPPER.writeValueAsString(new Bean797BaseImpl()); [EOL]     assertEquals("{}", json); [EOL] }
public void testIssue797() throws Exception { [EOL]     String json = MAPPER.writeValueAsString(new Bean797BaseImpl()); [EOL]     assertEquals("{}", json); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testSimple() throws Exception { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     TypeBindings b = new TypeBindings(tf, LongStringType.class); [EOL]     assertEquals(2, b.getBindingCount()); [EOL]     assertEquals(tf.constructType(Long.class), b.findType("A")); [EOL]     assertEquals(tf.constructType(String.class), b.findType("B")); [EOL] }
public void testSimple() throws Exception { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     TypeBindings b = new TypeBindings(tf, LongStringType.class); [EOL]     assertEquals(2, b.getBindingCount()); [EOL]     assertEquals(tf.constructType(Long.class), b.findType("A")); [EOL]     assertEquals(tf.constructType(String.class), b.findType("B")); [EOL] }
public void testSimple() throws Exception { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     TypeBindings b = new TypeBindings(tf, LongStringType.class); [EOL]     assertEquals(2, b.getBindingCount()); [EOL]     assertEquals(tf.constructType(Long.class), b.findType("A")); [EOL]     assertEquals(tf.constructType(String.class), b.findType("B")); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testEnumPolymorphicSerializationTest() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     List<ITestType> testTypesList = new ArrayList<ITestType>(); [EOL]     testTypesList.add(ConcreteType.ONE); [EOL]     testTypesList.add(ConcreteType.TWO); [EOL]     ListContainer listContainer = new ListContainer(); [EOL]     listContainer.testTypes = testTypesList; [EOL]     String json = mapper.writeValueAsString(listContainer); [EOL]     listContainer = mapper.readValue(json, ListContainer.class); [EOL]     EnumMapContainer enumMapContainer = new EnumMapContainer(); [EOL]     EnumMap<KeyEnum, ITestType> testTypesMap = new EnumMap<KeyEnum, ITestType>(KeyEnum.class); [EOL]     testTypesMap.put(KeyEnum.A, ConcreteType.ONE); [EOL]     testTypesMap.put(KeyEnum.B, ConcreteType.TWO); [EOL]     enumMapContainer.testTypes = testTypesMap; [EOL]     json = mapper.writeValueAsString(enumMapContainer); [EOL]     enumMapContainer = mapper.readValue(json, EnumMapContainer.class); [EOL] }
public void testEnumPolymorphicSerializationTest() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     List<ITestType> testTypesList = new ArrayList<ITestType>(); [EOL]     testTypesList.add(ConcreteType.ONE); [EOL]     testTypesList.add(ConcreteType.TWO); [EOL]     ListContainer listContainer = new ListContainer(); [EOL]     listContainer.testTypes = testTypesList; [EOL]     String json = mapper.writeValueAsString(listContainer); [EOL]     listContainer = mapper.readValue(json, ListContainer.class); [EOL]     EnumMapContainer enumMapContainer = new EnumMapContainer(); [EOL]     EnumMap<KeyEnum, ITestType> testTypesMap = new EnumMap<KeyEnum, ITestType>(KeyEnum.class); [EOL]     testTypesMap.put(KeyEnum.A, ConcreteType.ONE); [EOL]     testTypesMap.put(KeyEnum.B, ConcreteType.TWO); [EOL]     enumMapContainer.testTypes = testTypesMap; [EOL]     json = mapper.writeValueAsString(enumMapContainer); [EOL]     enumMapContainer = mapper.readValue(json, EnumMapContainer.class); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testOverrideClassValid() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     CollectionHolder result = m.readValue("{ \"strings\" : [ \"test\" ] }", CollectionHolder.class); [EOL]     Collection<String> strs = result._strings; [EOL]     assertEquals(1, strs.size()); [EOL]     assertEquals(TreeSet.class, strs.getClass()); [EOL]     assertEquals("test", strs.iterator().next()); [EOL] }
public void testOverrideClassValid() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     CollectionHolder result = m.readValue("{ \"strings\" : [ \"test\" ] }", CollectionHolder.class); [EOL]     Collection<String> strs = result._strings; [EOL]     assertEquals(1, strs.size()); [EOL]     assertEquals(TreeSet.class, strs.getClass()); [EOL]     assertEquals("test", strs.iterator().next()); [EOL] }
public void testIssue709() throws Exception { [EOL]     byte[] inputData = new byte[] { 1, 2, 3 }; [EOL]     ObjectNode node = MAPPER.createObjectNode(); [EOL]     node.put("data", inputData); [EOL]     Issue709Bean result = MAPPER.treeToValue(node, Issue709Bean.class); [EOL]     String json = MAPPER.writeValueAsString(node); [EOL]     Issue709Bean resultFromString = MAPPER.readValue(json, Issue709Bean.class); [EOL]     Issue709Bean resultFromConvert = MAPPER.convertValue(node, Issue709Bean.class); [EOL]     Assert.assertArrayEquals(inputData, resultFromString.data); [EOL]     Assert.assertArrayEquals(inputData, resultFromConvert.data); [EOL]     Assert.assertArrayEquals(inputData, result.data); [EOL] }
public void testIssue709() throws Exception { [EOL]     byte[] inputData = new byte[] { 1, 2, 3 }; [EOL]     ObjectNode node = MAPPER.createObjectNode(); [EOL]     node.put("data", inputData); [EOL]     Issue709Bean result = MAPPER.treeToValue(node, Issue709Bean.class); [EOL]     String json = MAPPER.writeValueAsString(node); [EOL]     Issue709Bean resultFromString = MAPPER.readValue(json, Issue709Bean.class); [EOL]     Issue709Bean resultFromConvert = MAPPER.convertValue(node, Issue709Bean.class); [EOL]     Assert.assertArrayEquals(inputData, resultFromString.data); [EOL]     Assert.assertArrayEquals(inputData, resultFromConvert.data); [EOL]     Assert.assertArrayEquals(inputData, result.data); [EOL] }
public void testIssue709() throws Exception { [EOL]     byte[] inputData = new byte[] { 1, 2, 3 }; [EOL]     ObjectNode node = MAPPER.createObjectNode(); [EOL]     node.put("data", inputData); [EOL]     Issue709Bean result = MAPPER.treeToValue(node, Issue709Bean.class); [EOL]     String json = MAPPER.writeValueAsString(node); [EOL]     Issue709Bean resultFromString = MAPPER.readValue(json, Issue709Bean.class); [EOL]     Issue709Bean resultFromConvert = MAPPER.convertValue(node, Issue709Bean.class); [EOL]     Assert.assertArrayEquals(inputData, resultFromString.data); [EOL]     Assert.assertArrayEquals(inputData, resultFromConvert.data); [EOL]     Assert.assertArrayEquals(inputData, result.data); [EOL] }
public void testRootViaWriterAndReader() throws Exception { [EOL]     ObjectMapper mapper = rootMapper(); [EOL]     String json = mapper.writer().writeValueAsString(new Bean()); [EOL]     assertEquals("{\"rudy\":{\"a\":3}}", json); [EOL]     Bean bean = mapper.reader(Bean.class).readValue(json); [EOL]     assertNotNull(bean); [EOL] }
public void testReconfiguringOfWrapping() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     final Bean input = new Bean(); [EOL]     String jsonUnwrapped = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"a\":3}", jsonUnwrapped); [EOL]     String jsonWrapped = mapper.writer(SerializationFeature.WRAP_ROOT_VALUE).writeValueAsString(input); [EOL]     assertEquals("{\"rudy\":{\"a\":3}}", jsonWrapped); [EOL]     Bean result = mapper.readValue(jsonUnwrapped, Bean.class); [EOL]     assertNotNull(result); [EOL]     try { [EOL]         result = mapper.reader(Bean.class).with(DeserializationFeature.UNWRAP_ROOT_VALUE).readValue(jsonUnwrapped); [EOL]         fail("Should have failed"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Root name 'a'"); [EOL]     } [EOL]     result = mapper.reader(Bean.class).with(DeserializationFeature.UNWRAP_ROOT_VALUE).readValue(jsonWrapped); [EOL]     assertNotNull(result); [EOL] }
public void testReconfiguringOfWrapping() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     final Bean input = new Bean(); [EOL]     String jsonUnwrapped = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"a\":3}", jsonUnwrapped); [EOL]     String jsonWrapped = mapper.writer(SerializationFeature.WRAP_ROOT_VALUE).writeValueAsString(input); [EOL]     assertEquals("{\"rudy\":{\"a\":3}}", jsonWrapped); [EOL]     Bean result = mapper.readValue(jsonUnwrapped, Bean.class); [EOL]     assertNotNull(result); [EOL]     try { [EOL]         result = mapper.reader(Bean.class).with(DeserializationFeature.UNWRAP_ROOT_VALUE).readValue(jsonUnwrapped); [EOL]         fail("Should have failed"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Root name 'a'"); [EOL]     } [EOL]     result = mapper.reader(Bean.class).with(DeserializationFeature.UNWRAP_ROOT_VALUE).readValue(jsonWrapped); [EOL]     assertNotNull(result); [EOL] }
public void testReconfiguringOfWrapping() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     final Bean input = new Bean(); [EOL]     String jsonUnwrapped = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"a\":3}", jsonUnwrapped); [EOL]     String jsonWrapped = mapper.writer(SerializationFeature.WRAP_ROOT_VALUE).writeValueAsString(input); [EOL]     assertEquals("{\"rudy\":{\"a\":3}}", jsonWrapped); [EOL]     Bean result = mapper.readValue(jsonUnwrapped, Bean.class); [EOL]     assertNotNull(result); [EOL]     try { [EOL]         result = mapper.reader(Bean.class).with(DeserializationFeature.UNWRAP_ROOT_VALUE).readValue(jsonUnwrapped); [EOL]         fail("Should have failed"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Root name 'a'"); [EOL]     } [EOL]     result = mapper.reader(Bean.class).with(DeserializationFeature.UNWRAP_ROOT_VALUE).readValue(jsonWrapped); [EOL]     assertNotNull(result); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testSimple() throws Exception { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     TypeBindings b = new TypeBindings(tf, LongStringType.class); [EOL]     assertEquals(2, b.getBindingCount()); [EOL]     assertEquals(tf.constructType(Long.class), b.findType("A")); [EOL]     assertEquals(tf.constructType(String.class), b.findType("B")); [EOL] }
public void testSimple() throws Exception { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     TypeBindings b = new TypeBindings(tf, LongStringType.class); [EOL]     assertEquals(2, b.getBindingCount()); [EOL]     assertEquals(tf.constructType(Long.class), b.findType("A")); [EOL]     assertEquals(tf.constructType(String.class), b.findType("B")); [EOL] }
public void testSneakySelfRefs() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = mapper.writeValueAsString(new SneakyBean2()); [EOL]     assertEquals("{\"foobar\":null}", json); [EOL] }
public void testSneakySelfRefs() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = mapper.writeValueAsString(new SneakyBean2()); [EOL]     assertEquals("{\"foobar\":null}", json); [EOL] }
public void testSimple() throws Exception { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     TypeBindings b = new TypeBindings(tf, LongStringType.class); [EOL]     assertEquals(2, b.getBindingCount()); [EOL]     assertEquals(tf.constructType(Long.class), b.findType("A")); [EOL]     assertEquals(tf.constructType(String.class), b.findType("B")); [EOL] }
public void testSimple() throws Exception { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     TypeBindings b = new TypeBindings(tf, LongStringType.class); [EOL]     assertEquals(2, b.getBindingCount()); [EOL]     assertEquals(tf.constructType(Long.class), b.findType("A")); [EOL]     assertEquals(tf.constructType(String.class), b.findType("B")); [EOL] }
public void testSimple() throws Exception { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     TypeBindings b = new TypeBindings(tf, LongStringType.class); [EOL]     assertEquals(2, b.getBindingCount()); [EOL]     assertEquals(tf.constructType(Long.class), b.findType("A")); [EOL]     assertEquals(tf.constructType(String.class), b.findType("B")); [EOL] }
public void testSimple() throws Exception { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     TypeBindings b = new TypeBindings(tf, LongStringType.class); [EOL]     assertEquals(2, b.getBindingCount()); [EOL]     assertEquals(tf.constructType(Long.class), b.findType("A")); [EOL]     assertEquals(tf.constructType(String.class), b.findType("B")); [EOL] }
public void testSimple() throws Exception { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     TypeBindings b = new TypeBindings(tf, LongStringType.class); [EOL]     assertEquals(2, b.getBindingCount()); [EOL]     assertEquals(tf.constructType(Long.class), b.findType("A")); [EOL]     assertEquals(tf.constructType(String.class), b.findType("B")); [EOL] }
public void testSimple() throws Exception { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     TypeBindings b = new TypeBindings(tf, LongStringType.class); [EOL]     assertEquals(2, b.getBindingCount()); [EOL]     assertEquals(tf.constructType(Long.class), b.findType("A")); [EOL]     assertEquals(tf.constructType(String.class), b.findType("B")); [EOL] }
public void testSimple() throws Exception { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     TypeBindings b = new TypeBindings(tf, LongStringType.class); [EOL]     assertEquals(2, b.getBindingCount()); [EOL]     assertEquals(tf.constructType(Long.class), b.findType("A")); [EOL]     assertEquals(tf.constructType(String.class), b.findType("B")); [EOL] }
public void testSimple() throws Exception { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     TypeBindings b = new TypeBindings(tf, LongStringType.class); [EOL]     assertEquals(2, b.getBindingCount()); [EOL]     assertEquals(tf.constructType(Long.class), b.findType("A")); [EOL]     assertEquals(tf.constructType(String.class), b.findType("B")); [EOL] }
public void testSimple() throws Exception { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     TypeBindings b = new TypeBindings(tf, LongStringType.class); [EOL]     assertEquals(2, b.getBindingCount()); [EOL]     assertEquals(tf.constructType(Long.class), b.findType("A")); [EOL]     assertEquals(tf.constructType(String.class), b.findType("B")); [EOL] }
public void testSimple() throws Exception { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     TypeBindings b = new TypeBindings(tf, LongStringType.class); [EOL]     assertEquals(2, b.getBindingCount()); [EOL]     assertEquals(tf.constructType(Long.class), b.findType("A")); [EOL]     assertEquals(tf.constructType(String.class), b.findType("B")); [EOL] }
public void testInnerType() throws Exception { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType type = tf.constructType(InnerGenericTyping.InnerClass.class); [EOL]     assertEquals(MapType.class, type.getClass()); [EOL]     JavaType keyType = type.getKeyType(); [EOL]     assertEquals(Object.class, keyType.getRawClass()); [EOL]     JavaType valueType = type.getContentType(); [EOL]     assertEquals(Collection.class, valueType.getRawClass()); [EOL]     JavaType vt2 = valueType.getContentType(); [EOL]     assertEquals(Object.class, vt2.getRawClass()); [EOL] }
public void testInnerType() throws Exception { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType type = tf.constructType(InnerGenericTyping.InnerClass.class); [EOL]     assertEquals(MapType.class, type.getClass()); [EOL]     JavaType keyType = type.getKeyType(); [EOL]     assertEquals(Object.class, keyType.getRawClass()); [EOL]     JavaType valueType = type.getContentType(); [EOL]     assertEquals(Collection.class, valueType.getRawClass()); [EOL]     JavaType vt2 = valueType.getContentType(); [EOL]     assertEquals(Object.class, vt2.getRawClass()); [EOL] }
public void testInnerType() throws Exception { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType type = tf.constructType(InnerGenericTyping.InnerClass.class); [EOL]     assertEquals(MapType.class, type.getClass()); [EOL]     JavaType keyType = type.getKeyType(); [EOL]     assertEquals(Object.class, keyType.getRawClass()); [EOL]     JavaType valueType = type.getContentType(); [EOL]     assertEquals(Collection.class, valueType.getRawClass()); [EOL]     JavaType vt2 = valueType.getContentType(); [EOL]     assertEquals(Object.class, vt2.getRawClass()); [EOL] }
public void testInnerType() throws Exception { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType type = tf.constructType(InnerGenericTyping.InnerClass.class); [EOL]     assertEquals(MapType.class, type.getClass()); [EOL]     JavaType keyType = type.getKeyType(); [EOL]     assertEquals(Object.class, keyType.getRawClass()); [EOL]     JavaType valueType = type.getContentType(); [EOL]     assertEquals(Collection.class, valueType.getRawClass()); [EOL]     JavaType vt2 = valueType.getContentType(); [EOL]     assertEquals(Object.class, vt2.getRawClass()); [EOL] }
public void testInnerType() throws Exception { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType type = tf.constructType(InnerGenericTyping.InnerClass.class); [EOL]     assertEquals(MapType.class, type.getClass()); [EOL]     JavaType keyType = type.getKeyType(); [EOL]     assertEquals(Object.class, keyType.getRawClass()); [EOL]     JavaType valueType = type.getContentType(); [EOL]     assertEquals(Collection.class, valueType.getRawClass()); [EOL]     JavaType vt2 = valueType.getContentType(); [EOL]     assertEquals(Object.class, vt2.getRawClass()); [EOL] }
public void testSimple() throws Exception { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     TypeBindings b = new TypeBindings(tf, LongStringType.class); [EOL]     assertEquals(2, b.getBindingCount()); [EOL]     assertEquals(tf.constructType(Long.class), b.findType("A")); [EOL]     assertEquals(tf.constructType(String.class), b.findType("B")); [EOL] }
public void testSimple() throws Exception { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     TypeBindings b = new TypeBindings(tf, LongStringType.class); [EOL]     assertEquals(2, b.getBindingCount()); [EOL]     assertEquals(tf.constructType(Long.class), b.findType("A")); [EOL]     assertEquals(tf.constructType(String.class), b.findType("B")); [EOL] }
public void testSimple() throws Exception { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     TypeBindings b = new TypeBindings(tf, LongStringType.class); [EOL]     assertEquals(2, b.getBindingCount()); [EOL]     assertEquals(tf.constructType(Long.class), b.findType("A")); [EOL]     assertEquals(tf.constructType(String.class), b.findType("B")); [EOL] }
public void testSimple() throws Exception { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     TypeBindings b = new TypeBindings(tf, LongStringType.class); [EOL]     assertEquals(2, b.getBindingCount()); [EOL]     assertEquals(tf.constructType(Long.class), b.findType("A")); [EOL]     assertEquals(tf.constructType(String.class), b.findType("B")); [EOL] }
public void testSimple() throws Exception { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     TypeBindings b = new TypeBindings(tf, LongStringType.class); [EOL]     assertEquals(2, b.getBindingCount()); [EOL]     assertEquals(tf.constructType(Long.class), b.findType("A")); [EOL]     assertEquals(tf.constructType(String.class), b.findType("B")); [EOL] }
public void testSimple() throws Exception { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     TypeBindings b = new TypeBindings(tf, LongStringType.class); [EOL]     assertEquals(2, b.getBindingCount()); [EOL]     assertEquals(tf.constructType(Long.class), b.findType("A")); [EOL]     assertEquals(tf.constructType(String.class), b.findType("B")); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testSelfReference() throws Exception { [EOL]     Bean selfRef = new Bean(null, "self-refs"); [EOL]     Bean first = new Bean(selfRef, "first"); [EOL]     selfRef.assignNext(selfRef); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Bean[] wrapper = new Bean[] { first }; [EOL]     try { [EOL]         writeAndMap(m, wrapper); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Direct self-reference leading to cycle"); [EOL]     } [EOL] }
public void testSelfReference() throws Exception { [EOL]     Bean selfRef = new Bean(null, "self-refs"); [EOL]     Bean first = new Bean(selfRef, "first"); [EOL]     selfRef.assignNext(selfRef); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Bean[] wrapper = new Bean[] { first }; [EOL]     try { [EOL]         writeAndMap(m, wrapper); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Direct self-reference leading to cycle"); [EOL]     } [EOL] }
public void testSelfReference() throws Exception { [EOL]     Bean selfRef = new Bean(null, "self-refs"); [EOL]     Bean first = new Bean(selfRef, "first"); [EOL]     selfRef.assignNext(selfRef); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Bean[] wrapper = new Bean[] { first }; [EOL]     try { [EOL]         writeAndMap(m, wrapper); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Direct self-reference leading to cycle"); [EOL]     } [EOL] }
public void testSelfReference() throws Exception { [EOL]     Bean selfRef = new Bean(null, "self-refs"); [EOL]     Bean first = new Bean(selfRef, "first"); [EOL]     selfRef.assignNext(selfRef); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Bean[] wrapper = new Bean[] { first }; [EOL]     try { [EOL]         writeAndMap(m, wrapper); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Direct self-reference leading to cycle"); [EOL]     } [EOL] }
public void testSelfReference() throws Exception { [EOL]     Bean selfRef = new Bean(null, "self-refs"); [EOL]     Bean first = new Bean(selfRef, "first"); [EOL]     selfRef.assignNext(selfRef); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Bean[] wrapper = new Bean[] { first }; [EOL]     try { [EOL]         writeAndMap(m, wrapper); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Direct self-reference leading to cycle"); [EOL]     } [EOL] }
public void testSelfReference() throws Exception { [EOL]     Bean selfRef = new Bean(null, "self-refs"); [EOL]     Bean first = new Bean(selfRef, "first"); [EOL]     selfRef.assignNext(selfRef); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Bean[] wrapper = new Bean[] { first }; [EOL]     try { [EOL]         writeAndMap(m, wrapper); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Direct self-reference leading to cycle"); [EOL]     } [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(NullNode.instance, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testSimpleKeyDeser() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addKeyDeserializer(String.class, new ContextualDeser("???")); [EOL]     mapper.registerModule(module); [EOL]     MapBean result = mapper.readValue("{\"map\":{\"a\":3}}", MapBean.class); [EOL]     Map<String, Integer> map = result.map; [EOL]     assertNotNull(map); [EOL]     assertEquals(1, map.size()); [EOL]     Map.Entry<String, Integer> entry = map.entrySet().iterator().next(); [EOL]     assertEquals(Integer.valueOf(3), entry.getValue()); [EOL]     assertEquals("map:a", entry.getKey()); [EOL] }
public void testSimpleKeyDeser() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addKeyDeserializer(String.class, new ContextualDeser("???")); [EOL]     mapper.registerModule(module); [EOL]     MapBean result = mapper.readValue("{\"map\":{\"a\":3}}", MapBean.class); [EOL]     Map<String, Integer> map = result.map; [EOL]     assertNotNull(map); [EOL]     assertEquals(1, map.size()); [EOL]     Map.Entry<String, Integer> entry = map.entrySet().iterator().next(); [EOL]     assertEquals(Integer.valueOf(3), entry.getValue()); [EOL]     assertEquals("map:a", entry.getKey()); [EOL] }
public void testCustomMapInstantiator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new MyModule(MyMap.class, new MyMapInstantiator())); [EOL]     MyMap result = mapper.readValue("{ \"a\":\"b\" }", MyMap.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(MyMap.class, result.getClass()); [EOL]     assertEquals(1, result.size()); [EOL] }
public void testCustomMapInstantiator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new MyModule(MyMap.class, new MyMapInstantiator())); [EOL]     MyMap result = mapper.readValue("{ \"a\":\"b\" }", MyMap.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(MyMap.class, result.getClass()); [EOL]     assertEquals(1, result.size()); [EOL] }
public void testCustomMapInstantiator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new MyModule(MyMap.class, new MyMapInstantiator())); [EOL]     MyMap result = mapper.readValue("{ \"a\":\"b\" }", MyMap.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(MyMap.class, result.getClass()); [EOL]     assertEquals(1, result.size()); [EOL] }
public void testCustomMapInstantiator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new MyModule(MyMap.class, new MyMapInstantiator())); [EOL]     MyMap result = mapper.readValue("{ \"a\":\"b\" }", MyMap.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(MyMap.class, result.getClass()); [EOL]     assertEquals(1, result.size()); [EOL] }
public void testCustomMapInstantiator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new MyModule(MyMap.class, new MyMapInstantiator())); [EOL]     MyMap result = mapper.readValue("{ \"a\":\"b\" }", MyMap.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(MyMap.class, result.getClass()); [EOL]     assertEquals(1, result.size()); [EOL] }
public void testCustomMapInstantiator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new MyModule(MyMap.class, new MyMapInstantiator())); [EOL]     MyMap result = mapper.readValue("{ \"a\":\"b\" }", MyMap.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(MyMap.class, result.getClass()); [EOL]     assertEquals(1, result.size()); [EOL] }
public void testCustomMapInstantiator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new MyModule(MyMap.class, new MyMapInstantiator())); [EOL]     MyMap result = mapper.readValue("{ \"a\":\"b\" }", MyMap.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(MyMap.class, result.getClass()); [EOL]     assertEquals(1, result.size()); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testNoArgsFactory() throws Exception { [EOL]     NoArgFactoryBean value = MAPPER.readValue("{\"y\":13}", NoArgFactoryBean.class); [EOL]     assertEquals(13, value.y); [EOL]     assertEquals(123, value.x); [EOL] }
public void testFromIntFactory() throws Exception { [EOL]     FactoryValueBean result = MAPPER.readValue("13", FactoryValueBean.class); [EOL]     assertEquals("13", result.toString()); [EOL] }
public void testFromIntFactory() throws Exception { [EOL]     FactoryValueBean result = MAPPER.readValue("13", FactoryValueBean.class); [EOL]     assertEquals("13", result.toString()); [EOL] }
public void testFromIntFactory() throws Exception { [EOL]     FactoryValueBean result = MAPPER.readValue("13", FactoryValueBean.class); [EOL]     assertEquals("13", result.toString()); [EOL] }
public void testFromIntFactory() throws Exception { [EOL]     FactoryValueBean result = MAPPER.readValue("13", FactoryValueBean.class); [EOL]     assertEquals("13", result.toString()); [EOL] }
public void testFromIntFactory() throws Exception { [EOL]     FactoryValueBean result = MAPPER.readValue("13", FactoryValueBean.class); [EOL]     assertEquals("13", result.toString()); [EOL] }
public void testFromIntFactory() throws Exception { [EOL]     FactoryValueBean result = MAPPER.readValue("13", FactoryValueBean.class); [EOL]     assertEquals("13", result.toString()); [EOL] }
public void testFromIntFactory() throws Exception { [EOL]     FactoryValueBean result = MAPPER.readValue("13", FactoryValueBean.class); [EOL]     assertEquals("13", result.toString()); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testModifyCollectionDeserializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setDeserializerModifier(new CollectionDeserializerModifier())); [EOL]     List<?> result = mapper.readValue("[1,2]", List.class); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("foo", result.get(0)); [EOL] }
public void testModifyCollectionDeserializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setDeserializerModifier(new CollectionDeserializerModifier())); [EOL]     List<?> result = mapper.readValue("[1,2]", List.class); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("foo", result.get(0)); [EOL] }
public void testModifyCollectionDeserializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setDeserializerModifier(new CollectionDeserializerModifier())); [EOL]     List<?> result = mapper.readValue("[1,2]", List.class); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("foo", result.get(0)); [EOL] }
public void testModifyCollectionDeserializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setDeserializerModifier(new CollectionDeserializerModifier())); [EOL]     List<?> result = mapper.readValue("[1,2]", List.class); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("foo", result.get(0)); [EOL] }
public void testModifyCollectionDeserializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setDeserializerModifier(new CollectionDeserializerModifier())); [EOL]     List<?> result = mapper.readValue("[1,2]", List.class); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("foo", result.get(0)); [EOL] }
public void testMixinMethodInheritance() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.addMixInAnnotations(Beano2.class, BeanoMixinSub2.class); [EOL]     Map<String, Object> result; [EOL]     result = writeAndMap(mapper, new Beano2()); [EOL]     assertEquals(2, result.size()); [EOL]     assertTrue(result.containsKey("id")); [EOL]     assertTrue(result.containsKey("name")); [EOL] }
public void testMixinMethodInheritance() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.addMixInAnnotations(Beano2.class, BeanoMixinSub2.class); [EOL]     Map<String, Object> result; [EOL]     result = writeAndMap(mapper, new Beano2()); [EOL]     assertEquals(2, result.size()); [EOL]     assertTrue(result.containsKey("id")); [EOL]     assertTrue(result.containsKey("name")); [EOL] }
public void testMixinMethodInheritance() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.addMixInAnnotations(Beano2.class, BeanoMixinSub2.class); [EOL]     Map<String, Object> result; [EOL]     result = writeAndMap(mapper, new Beano2()); [EOL]     assertEquals(2, result.size()); [EOL]     assertTrue(result.containsKey("id")); [EOL]     assertTrue(result.containsKey("name")); [EOL] }
public void testMixinMethodInheritance() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.addMixInAnnotations(Beano2.class, BeanoMixinSub2.class); [EOL]     Map<String, Object> result; [EOL]     result = writeAndMap(mapper, new Beano2()); [EOL]     assertEquals(2, result.size()); [EOL]     assertTrue(result.containsKey("id")); [EOL]     assertTrue(result.containsKey("name")); [EOL] }
public void testCollectionLikeDeserialization() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setTypeFactory(mapper.getTypeFactory().withModifier(new MyTypeModifier())); [EOL]     mapper.registerModule(new ModifierModule()); [EOL]     MyMapLikeType result = mapper.readValue("{\"a\":13}", MyMapLikeType.class); [EOL]     assertEquals("a", result.getKey()); [EOL]     assertEquals(Integer.valueOf(13), result.getValue()); [EOL] }
public void testCollectionLikeDeserialization() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setTypeFactory(mapper.getTypeFactory().withModifier(new MyTypeModifier())); [EOL]     mapper.registerModule(new ModifierModule()); [EOL]     MyMapLikeType result = mapper.readValue("{\"a\":13}", MyMapLikeType.class); [EOL]     assertEquals("a", result.getKey()); [EOL]     assertEquals(Integer.valueOf(13), result.getValue()); [EOL] }
public void testCollectionLikeDeserialization() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setTypeFactory(mapper.getTypeFactory().withModifier(new MyTypeModifier())); [EOL]     mapper.registerModule(new ModifierModule()); [EOL]     MyMapLikeType result = mapper.readValue("{\"a\":13}", MyMapLikeType.class); [EOL]     assertEquals("a", result.getKey()); [EOL]     assertEquals(Integer.valueOf(13), result.getValue()); [EOL] }
public void testMixinMethodInheritance() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.addMixInAnnotations(Beano2.class, BeanoMixinSub2.class); [EOL]     Map<String, Object> result; [EOL]     result = writeAndMap(mapper, new Beano2()); [EOL]     assertEquals(2, result.size()); [EOL]     assertTrue(result.containsKey("id")); [EOL]     assertTrue(result.containsKey("name")); [EOL] }
public void testMixinMethodInheritance() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.addMixInAnnotations(Beano2.class, BeanoMixinSub2.class); [EOL]     Map<String, Object> result; [EOL]     result = writeAndMap(mapper, new Beano2()); [EOL]     assertEquals(2, result.size()); [EOL]     assertTrue(result.containsKey("id")); [EOL]     assertTrue(result.containsKey("name")); [EOL] }
public void testCollectionLikeDeserialization() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setTypeFactory(mapper.getTypeFactory().withModifier(new MyTypeModifier())); [EOL]     mapper.registerModule(new ModifierModule()); [EOL]     MyMapLikeType result = mapper.readValue("{\"a\":13}", MyMapLikeType.class); [EOL]     assertEquals("a", result.getKey()); [EOL]     assertEquals(Integer.valueOf(13), result.getValue()); [EOL] }
public void testCollectionLikeDeserialization() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setTypeFactory(mapper.getTypeFactory().withModifier(new MyTypeModifier())); [EOL]     mapper.registerModule(new ModifierModule()); [EOL]     MyMapLikeType result = mapper.readValue("{\"a\":13}", MyMapLikeType.class); [EOL]     assertEquals("a", result.getKey()); [EOL]     assertEquals(Integer.valueOf(13), result.getValue()); [EOL] }
public void testDelegating() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addDeserializer(Immutable.class, new StdDelegatingDeserializer<Immutable>(new StdConverter<JsonNode, Immutable>() { [EOL]  [EOL]         @Override [EOL]         public Immutable convert(JsonNode value) { [EOL]             int x = value.path("x").asInt(); [EOL]             int y = value.path("y").asInt(); [EOL]             return new Immutable(x, y); [EOL]         } [EOL]     })); [EOL]     mapper.registerModule(module); [EOL]     Immutable imm = mapper.readValue("{\"x\":3,\"y\":7}", Immutable.class); [EOL]     assertEquals(3, imm.x); [EOL]     assertEquals(7, imm.y); [EOL] }
public void testDelegating() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addDeserializer(Immutable.class, new StdDelegatingDeserializer<Immutable>(new StdConverter<JsonNode, Immutable>() { [EOL]  [EOL]         @Override [EOL]         public Immutable convert(JsonNode value) { [EOL]             int x = value.path("x").asInt(); [EOL]             int y = value.path("y").asInt(); [EOL]             return new Immutable(x, y); [EOL]         } [EOL]     })); [EOL]     mapper.registerModule(module); [EOL]     Immutable imm = mapper.readValue("{\"x\":3,\"y\":7}", Immutable.class); [EOL]     assertEquals(3, imm.x); [EOL]     assertEquals(7, imm.y); [EOL] }
public void testMixinMethodInheritance() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.addMixInAnnotations(Beano2.class, BeanoMixinSub2.class); [EOL]     Map<String, Object> result; [EOL]     result = writeAndMap(mapper, new Beano2()); [EOL]     assertEquals(2, result.size()); [EOL]     assertTrue(result.containsKey("id")); [EOL]     assertTrue(result.containsKey("name")); [EOL] }
public void testMixinMethodInheritance() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.addMixInAnnotations(Beano2.class, BeanoMixinSub2.class); [EOL]     Map<String, Object> result; [EOL]     result = writeAndMap(mapper, new Beano2()); [EOL]     assertEquals(2, result.size()); [EOL]     assertTrue(result.containsKey("id")); [EOL]     assertTrue(result.containsKey("name")); [EOL] }
public void testMixinMethodInheritance() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.addMixInAnnotations(Beano2.class, BeanoMixinSub2.class); [EOL]     Map<String, Object> result; [EOL]     result = writeAndMap(mapper, new Beano2()); [EOL]     assertEquals(2, result.size()); [EOL]     assertTrue(result.containsKey("id")); [EOL]     assertTrue(result.containsKey("name")); [EOL] }
public void testMixinMethodInheritance() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.addMixInAnnotations(Beano2.class, BeanoMixinSub2.class); [EOL]     Map<String, Object> result; [EOL]     result = writeAndMap(mapper, new Beano2()); [EOL]     assertEquals(2, result.size()); [EOL]     assertTrue(result.containsKey("id")); [EOL]     assertTrue(result.containsKey("name")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testInvalidCall() throws Exception { [EOL]     try { [EOL]         MAPPER.generateJsonSchema(null); [EOL]         fail("Should have failed"); [EOL]     } catch (IllegalArgumentException iae) { [EOL]         verifyException(iae, "class must be provided"); [EOL]     } [EOL] }
public void testInvalidCall() throws Exception { [EOL]     try { [EOL]         MAPPER.generateJsonSchema(null); [EOL]         fail("Should have failed"); [EOL]     } catch (IllegalArgumentException iae) { [EOL]         verifyException(iae, "class must be provided"); [EOL]     } [EOL] }
public void testInvalidCall() throws Exception { [EOL]     try { [EOL]         MAPPER.generateJsonSchema(null); [EOL]         fail("Should have failed"); [EOL]     } catch (IllegalArgumentException iae) { [EOL]         verifyException(iae, "class must be provided"); [EOL]     } [EOL] }
public void testSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setHandlerInstantiator(new MyInstantiator("xyz:")); [EOL]     assertEquals(quote("xyz:456"), mapper.writeValueAsString(new MyBean("456"))); [EOL] }
public void testSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setHandlerInstantiator(new MyInstantiator("xyz:")); [EOL]     assertEquals(quote("xyz:456"), mapper.writeValueAsString(new MyBean("456"))); [EOL] }
public void testSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setHandlerInstantiator(new MyInstantiator("xyz:")); [EOL]     assertEquals(quote("xyz:456"), mapper.writeValueAsString(new MyBean("456"))); [EOL] }
public void testSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setHandlerInstantiator(new MyInstantiator("xyz:")); [EOL]     assertEquals(quote("xyz:456"), mapper.writeValueAsString(new MyBean("456"))); [EOL] }
public void testSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setHandlerInstantiator(new MyInstantiator("xyz:")); [EOL]     assertEquals(quote("xyz:456"), mapper.writeValueAsString(new MyBean("456"))); [EOL] }
public void testSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setHandlerInstantiator(new MyInstantiator("xyz:")); [EOL]     assertEquals(quote("xyz:456"), mapper.writeValueAsString(new MyBean("456"))); [EOL] }
public void testSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setHandlerInstantiator(new MyInstantiator("xyz:")); [EOL]     assertEquals(quote("xyz:456"), mapper.writeValueAsString(new MyBean("456"))); [EOL] }
public void testSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setHandlerInstantiator(new MyInstantiator("xyz:")); [EOL]     assertEquals(quote("xyz:456"), mapper.writeValueAsString(new MyBean("456"))); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testIssue476() throws Exception { [EOL]     final String JSON = "{\"value1\" : {\"name\" : \"fruit\", \"value\" : \"apple\"}, \"value2\" : {\"name\" : \"color\", \"value\" : \"red\"}}"; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new Issue476Module()); [EOL]     mapper.readValue(JSON, Issue476Bean.class); [EOL]     assertEquals(2, Issue476Deserializer.propCount); [EOL] }
public void testPOJOFromEmptyString() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.readValue(quote(""), Bean.class); [EOL]         fail("Should not accept Empty String for POJO"); [EOL]     } catch (JsonProcessingException e) { [EOL]         verifyException(e, "from String value"); [EOL]     } [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true); [EOL]     Bean result = mapper.readValue(quote(""), Bean.class); [EOL]     assertNull(result); [EOL] }
public void testPOJOFromEmptyString() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.readValue(quote(""), Bean.class); [EOL]         fail("Should not accept Empty String for POJO"); [EOL]     } catch (JsonProcessingException e) { [EOL]         verifyException(e, "from String value"); [EOL]     } [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true); [EOL]     Bean result = mapper.readValue(quote(""), Bean.class); [EOL]     assertNull(result); [EOL] }
public void testPOJOFromEmptyString() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.readValue(quote(""), Bean.class); [EOL]         fail("Should not accept Empty String for POJO"); [EOL]     } catch (JsonProcessingException e) { [EOL]         verifyException(e, "from String value"); [EOL]     } [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true); [EOL]     Bean result = mapper.readValue(quote(""), Bean.class); [EOL]     assertNull(result); [EOL] }
public void testPOJOFromEmptyString() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.readValue(quote(""), Bean.class); [EOL]         fail("Should not accept Empty String for POJO"); [EOL]     } catch (JsonProcessingException e) { [EOL]         verifyException(e, "from String value"); [EOL]     } [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true); [EOL]     Bean result = mapper.readValue(quote(""), Bean.class); [EOL]     assertNull(result); [EOL] }
public void testPOJOFromEmptyString() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.readValue(quote(""), Bean.class); [EOL]         fail("Should not accept Empty String for POJO"); [EOL]     } catch (JsonProcessingException e) { [EOL]         verifyException(e, "from String value"); [EOL]     } [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true); [EOL]     Bean result = mapper.readValue(quote(""), Bean.class); [EOL]     assertNull(result); [EOL] }
public void testPOJOFromEmptyString() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.readValue(quote(""), Bean.class); [EOL]         fail("Should not accept Empty String for POJO"); [EOL]     } catch (JsonProcessingException e) { [EOL]         verifyException(e, "from String value"); [EOL]     } [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true); [EOL]     Bean result = mapper.readValue(quote(""), Bean.class); [EOL]     assertNull(result); [EOL] }
public void testPOJOFromEmptyString() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.readValue(quote(""), Bean.class); [EOL]         fail("Should not accept Empty String for POJO"); [EOL]     } catch (JsonProcessingException e) { [EOL]         verifyException(e, "from String value"); [EOL]     } [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true); [EOL]     Bean result = mapper.readValue(quote(""), Bean.class); [EOL]     assertNull(result); [EOL] }
public void testPOJOFromEmptyString() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.readValue(quote(""), Bean.class); [EOL]         fail("Should not accept Empty String for POJO"); [EOL]     } catch (JsonProcessingException e) { [EOL]         verifyException(e, "from String value"); [EOL]     } [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true); [EOL]     Bean result = mapper.readValue(quote(""), Bean.class); [EOL]     assertNull(result); [EOL] }
public void testPOJOFromEmptyString() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.readValue(quote(""), Bean.class); [EOL]         fail("Should not accept Empty String for POJO"); [EOL]     } catch (JsonProcessingException e) { [EOL]         verifyException(e, "from String value"); [EOL]     } [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true); [EOL]     Bean result = mapper.readValue(quote(""), Bean.class); [EOL]     assertNull(result); [EOL] }
public void testPOJOFromEmptyString() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.readValue(quote(""), Bean.class); [EOL]         fail("Should not accept Empty String for POJO"); [EOL]     } catch (JsonProcessingException e) { [EOL]         verifyException(e, "from String value"); [EOL]     } [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true); [EOL]     Bean result = mapper.readValue(quote(""), Bean.class); [EOL]     assertNull(result); [EOL] }
public void testPOJOFromEmptyString() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.readValue(quote(""), Bean.class); [EOL]         fail("Should not accept Empty String for POJO"); [EOL]     } catch (JsonProcessingException e) { [EOL]         verifyException(e, "from String value"); [EOL]     } [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true); [EOL]     Bean result = mapper.readValue(quote(""), Bean.class); [EOL]     assertNull(result); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testEnumAsObjectBroken() throws Exception { [EOL]     try { [EOL]         String json = mapper.writeValueAsString(BrokenPoNum.A); [EOL]         fail("Should not have succeeded, produced: " + json); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Unsupported serialization shape"); [EOL]     } [EOL] }
public void testEnumAsObjectBroken() throws Exception { [EOL]     try { [EOL]         String json = mapper.writeValueAsString(BrokenPoNum.A); [EOL]         fail("Should not have succeeded, produced: " + json); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Unsupported serialization shape"); [EOL]     } [EOL] }
public void testEnumAsObjectBroken() throws Exception { [EOL]     try { [EOL]         String json = mapper.writeValueAsString(BrokenPoNum.A); [EOL]         fail("Should not have succeeded, produced: " + json); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Unsupported serialization shape"); [EOL]     } [EOL] }
public void testEnumAsObjectBroken() throws Exception { [EOL]     try { [EOL]         String json = mapper.writeValueAsString(BrokenPoNum.A); [EOL]         fail("Should not have succeeded, produced: " + json); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Unsupported serialization shape"); [EOL]     } [EOL] }
public void testEnumAsObjectBroken() throws Exception { [EOL]     try { [EOL]         String json = mapper.writeValueAsString(BrokenPoNum.A); [EOL]         fail("Should not have succeeded, produced: " + json); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Unsupported serialization shape"); [EOL]     } [EOL] }
public void testEnumAsObjectBroken() throws Exception { [EOL]     try { [EOL]         String json = mapper.writeValueAsString(BrokenPoNum.A); [EOL]         fail("Should not have succeeded, produced: " + json); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Unsupported serialization shape"); [EOL]     } [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testIssue811() throws Exception { [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.disable(MapperFeature.AUTO_DETECT_CREATORS); [EOL]     om.disable(MapperFeature.AUTO_DETECT_GETTERS); [EOL]     om.disable(MapperFeature.AUTO_DETECT_IS_GETTERS); [EOL]     om.setVisibility(PropertyAccessor.FIELD, Visibility.ANY); [EOL]     om.enable(SerializationFeature.WRITE_ENUMS_USING_INDEX); [EOL]     om.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     om.enableDefaultTypingAsProperty(DefaultTyping.NON_FINAL, "@class"); [EOL]     Process p = new Process(); [EOL]     Scope s = new Scope(p, null); [EOL]     FaultHandler fh = new FaultHandler(p); [EOL]     Catch c = new Catch(p, s); [EOL]     fh.catchBlocks.add(c); [EOL]     s.faultHandlers.add(fh); [EOL]     String json = om.writeValueAsString(p); [EOL]     Process restored = om.readValue(json, Process.class); [EOL]     assertNotNull(restored); [EOL]     assertEquals(0, p.id); [EOL]     assertEquals(3, p.children.size()); [EOL]     assertSame(p, p.children.get(0).owner); [EOL]     assertSame(p, p.children.get(1).owner); [EOL]     assertSame(p, p.children.get(2).owner); [EOL] }
public void testIssue811() throws Exception { [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.disable(MapperFeature.AUTO_DETECT_CREATORS); [EOL]     om.disable(MapperFeature.AUTO_DETECT_GETTERS); [EOL]     om.disable(MapperFeature.AUTO_DETECT_IS_GETTERS); [EOL]     om.setVisibility(PropertyAccessor.FIELD, Visibility.ANY); [EOL]     om.enable(SerializationFeature.WRITE_ENUMS_USING_INDEX); [EOL]     om.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     om.enableDefaultTypingAsProperty(DefaultTyping.NON_FINAL, "@class"); [EOL]     Process p = new Process(); [EOL]     Scope s = new Scope(p, null); [EOL]     FaultHandler fh = new FaultHandler(p); [EOL]     Catch c = new Catch(p, s); [EOL]     fh.catchBlocks.add(c); [EOL]     s.faultHandlers.add(fh); [EOL]     String json = om.writeValueAsString(p); [EOL]     Process restored = om.readValue(json, Process.class); [EOL]     assertNotNull(restored); [EOL]     assertEquals(0, p.id); [EOL]     assertEquals(3, p.children.size()); [EOL]     assertSame(p, p.children.get(0).owner); [EOL]     assertSame(p, p.children.get(1).owner); [EOL]     assertSame(p, p.children.get(2).owner); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testIssue709() throws Exception { [EOL]     byte[] inputData = new byte[] { 1, 2, 3 }; [EOL]     ObjectNode node = MAPPER.createObjectNode(); [EOL]     node.put("data", inputData); [EOL]     Issue709Bean result = MAPPER.treeToValue(node, Issue709Bean.class); [EOL]     String json = MAPPER.writeValueAsString(node); [EOL]     Issue709Bean resultFromString = MAPPER.readValue(json, Issue709Bean.class); [EOL]     Issue709Bean resultFromConvert = MAPPER.convertValue(node, Issue709Bean.class); [EOL]     Assert.assertArrayEquals(inputData, resultFromString.data); [EOL]     Assert.assertArrayEquals(inputData, resultFromConvert.data); [EOL]     Assert.assertArrayEquals(inputData, result.data); [EOL] }
public void testIssue709() throws Exception { [EOL]     byte[] inputData = new byte[] { 1, 2, 3 }; [EOL]     ObjectNode node = MAPPER.createObjectNode(); [EOL]     node.put("data", inputData); [EOL]     Issue709Bean result = MAPPER.treeToValue(node, Issue709Bean.class); [EOL]     String json = MAPPER.writeValueAsString(node); [EOL]     Issue709Bean resultFromString = MAPPER.readValue(json, Issue709Bean.class); [EOL]     Issue709Bean resultFromConvert = MAPPER.convertValue(node, Issue709Bean.class); [EOL]     Assert.assertArrayEquals(inputData, resultFromString.data); [EOL]     Assert.assertArrayEquals(inputData, resultFromConvert.data); [EOL]     Assert.assertArrayEquals(inputData, result.data); [EOL] }
public void testIssue709() throws Exception { [EOL]     byte[] inputData = new byte[] { 1, 2, 3 }; [EOL]     ObjectNode node = MAPPER.createObjectNode(); [EOL]     node.put("data", inputData); [EOL]     Issue709Bean result = MAPPER.treeToValue(node, Issue709Bean.class); [EOL]     String json = MAPPER.writeValueAsString(node); [EOL]     Issue709Bean resultFromString = MAPPER.readValue(json, Issue709Bean.class); [EOL]     Issue709Bean resultFromConvert = MAPPER.convertValue(node, Issue709Bean.class); [EOL]     Assert.assertArrayEquals(inputData, resultFromString.data); [EOL]     Assert.assertArrayEquals(inputData, resultFromConvert.data); [EOL]     Assert.assertArrayEquals(inputData, result.data); [EOL] }
public void testIssue709() throws Exception { [EOL]     byte[] inputData = new byte[] { 1, 2, 3 }; [EOL]     ObjectNode node = MAPPER.createObjectNode(); [EOL]     node.put("data", inputData); [EOL]     Issue709Bean result = MAPPER.treeToValue(node, Issue709Bean.class); [EOL]     String json = MAPPER.writeValueAsString(node); [EOL]     Issue709Bean resultFromString = MAPPER.readValue(json, Issue709Bean.class); [EOL]     Issue709Bean resultFromConvert = MAPPER.convertValue(node, Issue709Bean.class); [EOL]     Assert.assertArrayEquals(inputData, resultFromString.data); [EOL]     Assert.assertArrayEquals(inputData, resultFromConvert.data); [EOL]     Assert.assertArrayEquals(inputData, result.data); [EOL] }
public void testIssue709() throws Exception { [EOL]     byte[] inputData = new byte[] { 1, 2, 3 }; [EOL]     ObjectNode node = MAPPER.createObjectNode(); [EOL]     node.put("data", inputData); [EOL]     Issue709Bean result = MAPPER.treeToValue(node, Issue709Bean.class); [EOL]     String json = MAPPER.writeValueAsString(node); [EOL]     Issue709Bean resultFromString = MAPPER.readValue(json, Issue709Bean.class); [EOL]     Issue709Bean resultFromConvert = MAPPER.convertValue(node, Issue709Bean.class); [EOL]     Assert.assertArrayEquals(inputData, resultFromString.data); [EOL]     Assert.assertArrayEquals(inputData, resultFromConvert.data); [EOL]     Assert.assertArrayEquals(inputData, result.data); [EOL] }
public void testIssue709() throws Exception { [EOL]     byte[] inputData = new byte[] { 1, 2, 3 }; [EOL]     ObjectNode node = MAPPER.createObjectNode(); [EOL]     node.put("data", inputData); [EOL]     Issue709Bean result = MAPPER.treeToValue(node, Issue709Bean.class); [EOL]     String json = MAPPER.writeValueAsString(node); [EOL]     Issue709Bean resultFromString = MAPPER.readValue(json, Issue709Bean.class); [EOL]     Issue709Bean resultFromConvert = MAPPER.convertValue(node, Issue709Bean.class); [EOL]     Assert.assertArrayEquals(inputData, resultFromString.data); [EOL]     Assert.assertArrayEquals(inputData, resultFromConvert.data); [EOL]     Assert.assertArrayEquals(inputData, result.data); [EOL] }
public void testIssue709() throws Exception { [EOL]     byte[] inputData = new byte[] { 1, 2, 3 }; [EOL]     ObjectNode node = MAPPER.createObjectNode(); [EOL]     node.put("data", inputData); [EOL]     Issue709Bean result = MAPPER.treeToValue(node, Issue709Bean.class); [EOL]     String json = MAPPER.writeValueAsString(node); [EOL]     Issue709Bean resultFromString = MAPPER.readValue(json, Issue709Bean.class); [EOL]     Issue709Bean resultFromConvert = MAPPER.convertValue(node, Issue709Bean.class); [EOL]     Assert.assertArrayEquals(inputData, resultFromString.data); [EOL]     Assert.assertArrayEquals(inputData, resultFromConvert.data); [EOL]     Assert.assertArrayEquals(inputData, result.data); [EOL] }
public void testShortArray() throws Exception { [EOL]     final int LEN = 31001; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(i); [EOL]     } [EOL]     sb.append(']'); [EOL]     short[] result = MAPPER.readValue(sb.toString(), short[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         short exp = (short) i; [EOL]         assertEquals(exp, result[i]); [EOL]     } [EOL] }
public void testShortArray() throws Exception { [EOL]     final int LEN = 31001; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(i); [EOL]     } [EOL]     sb.append(']'); [EOL]     short[] result = MAPPER.readValue(sb.toString(), short[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         short exp = (short) i; [EOL]         assertEquals(exp, result[i]); [EOL]     } [EOL] }
public void testShortArray() throws Exception { [EOL]     final int LEN = 31001; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(i); [EOL]     } [EOL]     sb.append(']'); [EOL]     short[] result = MAPPER.readValue(sb.toString(), short[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         short exp = (short) i; [EOL]         assertEquals(exp, result[i]); [EOL]     } [EOL] }
public void testShortArray() throws Exception { [EOL]     final int LEN = 31001; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(i); [EOL]     } [EOL]     sb.append(']'); [EOL]     short[] result = MAPPER.readValue(sb.toString(), short[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         short exp = (short) i; [EOL]         assertEquals(exp, result[i]); [EOL]     } [EOL] }
public void testFromEmptyString() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true); [EOL]     assertNull(m.readValue(quote(""), Object[].class)); [EOL]     assertNull(m.readValue(quote(""), String[].class)); [EOL]     assertNull(m.readValue(quote(""), int[].class)); [EOL] }
public void testFromEmptyString() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true); [EOL]     assertNull(m.readValue(quote(""), Object[].class)); [EOL]     assertNull(m.readValue(quote(""), String[].class)); [EOL]     assertNull(m.readValue(quote(""), int[].class)); [EOL] }
public void testFromEmptyString() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true); [EOL]     assertNull(m.readValue(quote(""), Object[].class)); [EOL]     assertNull(m.readValue(quote(""), String[].class)); [EOL]     assertNull(m.readValue(quote(""), int[].class)); [EOL] }
public void testFromEmptyString() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true); [EOL]     assertNull(m.readValue(quote(""), Object[].class)); [EOL]     assertNull(m.readValue(quote(""), String[].class)); [EOL]     assertNull(m.readValue(quote(""), int[].class)); [EOL] }
public void testFromEmptyString() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true); [EOL]     assertNull(m.readValue(quote(""), Object[].class)); [EOL]     assertNull(m.readValue(quote(""), String[].class)); [EOL]     assertNull(m.readValue(quote(""), int[].class)); [EOL] }
public void testFromEmptyString() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true); [EOL]     assertNull(m.readValue(quote(""), Object[].class)); [EOL]     assertNull(m.readValue(quote(""), String[].class)); [EOL]     assertNull(m.readValue(quote(""), int[].class)); [EOL] }
public void testFromEmptyString() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true); [EOL]     assertNull(m.readValue(quote(""), Object[].class)); [EOL]     assertNull(m.readValue(quote(""), String[].class)); [EOL]     assertNull(m.readValue(quote(""), int[].class)); [EOL] }
public void testFromEmptyString() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true); [EOL]     assertNull(m.readValue(quote(""), Object[].class)); [EOL]     assertNull(m.readValue(quote(""), String[].class)); [EOL]     assertNull(m.readValue(quote(""), int[].class)); [EOL] }
public void testWithGetterAsSetter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new CStyleStrategy()); [EOL]     SetterlessWithValue input = new SetterlessWithValue().add(3); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"value_list\":[{\"int_value\":3}]}", json); [EOL]     SetterlessWithValue result = mapper.readValue(json, SetterlessWithValue.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(1, result.values.size()); [EOL]     assertEquals(3, result.values.get(0).intValue); [EOL] }
public void testWithGetterAsSetter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new CStyleStrategy()); [EOL]     SetterlessWithValue input = new SetterlessWithValue().add(3); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"value_list\":[{\"int_value\":3}]}", json); [EOL]     SetterlessWithValue result = mapper.readValue(json, SetterlessWithValue.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(1, result.values.size()); [EOL]     assertEquals(3, result.values.get(0).intValue); [EOL] }
public void testWithGetterAsSetter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new CStyleStrategy()); [EOL]     SetterlessWithValue input = new SetterlessWithValue().add(3); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"value_list\":[{\"int_value\":3}]}", json); [EOL]     SetterlessWithValue result = mapper.readValue(json, SetterlessWithValue.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(1, result.values.size()); [EOL]     assertEquals(3, result.values.get(0).intValue); [EOL] }
public void testWithGetterAsSetter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new CStyleStrategy()); [EOL]     SetterlessWithValue input = new SetterlessWithValue().add(3); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"value_list\":[{\"int_value\":3}]}", json); [EOL]     SetterlessWithValue result = mapper.readValue(json, SetterlessWithValue.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(1, result.values.size()); [EOL]     assertEquals(3, result.values.get(0).intValue); [EOL] }
public void testWithGetterAsSetter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new CStyleStrategy()); [EOL]     SetterlessWithValue input = new SetterlessWithValue().add(3); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"value_list\":[{\"int_value\":3}]}", json); [EOL]     SetterlessWithValue result = mapper.readValue(json, SetterlessWithValue.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(1, result.values.size()); [EOL]     assertEquals(3, result.values.get(0).intValue); [EOL] }
public void testWithGetterAsSetter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new CStyleStrategy()); [EOL]     SetterlessWithValue input = new SetterlessWithValue().add(3); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"value_list\":[{\"int_value\":3}]}", json); [EOL]     SetterlessWithValue result = mapper.readValue(json, SetterlessWithValue.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(1, result.values.size()); [EOL]     assertEquals(3, result.values.get(0).intValue); [EOL] }
public void testWithGetterAsSetter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new CStyleStrategy()); [EOL]     SetterlessWithValue input = new SetterlessWithValue().add(3); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"value_list\":[{\"int_value\":3}]}", json); [EOL]     SetterlessWithValue result = mapper.readValue(json, SetterlessWithValue.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(1, result.values.size()); [EOL]     assertEquals(3, result.values.get(0).intValue); [EOL] }
public void testWithGetterAsSetter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new CStyleStrategy()); [EOL]     SetterlessWithValue input = new SetterlessWithValue().add(3); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"value_list\":[{\"int_value\":3}]}", json); [EOL]     SetterlessWithValue result = mapper.readValue(json, SetterlessWithValue.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(1, result.values.size()); [EOL]     assertEquals(3, result.values.get(0).intValue); [EOL] }
public void testWithGetterAsSetter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new CStyleStrategy()); [EOL]     SetterlessWithValue input = new SetterlessWithValue().add(3); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"value_list\":[{\"int_value\":3}]}", json); [EOL]     SetterlessWithValue result = mapper.readValue(json, SetterlessWithValue.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(1, result.values.size()); [EOL]     assertEquals(3, result.values.get(0).intValue); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testBeanAsObject() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String str = m.writeValueAsString(new Object[] { new StringBean("abc") }); [EOL]     _verifySerializationAsMap(str); [EOL]     Object ob = m.readValue(str, Object[].class); [EOL]     assertNotNull(ob); [EOL]     Object[] result = (Object[]) ob; [EOL]     assertNotNull(result[0]); [EOL]     assertEquals(StringBean.class, result[0].getClass()); [EOL]     assertEquals("abc", ((StringBean) result[0]).name); [EOL] }
public void testBeanAsObject() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String str = m.writeValueAsString(new Object[] { new StringBean("abc") }); [EOL]     _verifySerializationAsMap(str); [EOL]     Object ob = m.readValue(str, Object[].class); [EOL]     assertNotNull(ob); [EOL]     Object[] result = (Object[]) ob; [EOL]     assertNotNull(result[0]); [EOL]     assertEquals(StringBean.class, result[0].getClass()); [EOL]     assertEquals("abc", ((StringBean) result[0]).name); [EOL] }
public void testBeanAsObject() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String str = m.writeValueAsString(new Object[] { new StringBean("abc") }); [EOL]     _verifySerializationAsMap(str); [EOL]     Object ob = m.readValue(str, Object[].class); [EOL]     assertNotNull(ob); [EOL]     Object[] result = (Object[]) ob; [EOL]     assertNotNull(result[0]); [EOL]     assertEquals(StringBean.class, result[0].getClass()); [EOL]     assertEquals("abc", ((StringBean) result[0]).name); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testBeanAsObject() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String str = m.writeValueAsString(new Object[] { new StringBean("abc") }); [EOL]     _verifySerializationAsMap(str); [EOL]     Object ob = m.readValue(str, Object[].class); [EOL]     assertNotNull(ob); [EOL]     Object[] result = (Object[]) ob; [EOL]     assertNotNull(result[0]); [EOL]     assertEquals(StringBean.class, result[0].getClass()); [EOL]     assertEquals("abc", ((StringBean) result[0]).name); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(NullNode.instance, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testWithObjectSimple() { [EOL]     ObjectNode root = mapper.createObjectNode(); [EOL]     root.put("a", 3); [EOL]     assertEquals(1, root.size()); [EOL]     ObjectNode copy = root.deepCopy(); [EOL]     assertEquals(1, copy.size()); [EOL]     root.put("b", 7); [EOL]     assertEquals(2, root.size()); [EOL]     assertEquals(1, copy.size()); [EOL]     copy.put("c", 3); [EOL]     assertEquals(2, root.size()); [EOL]     assertEquals(2, copy.size()); [EOL] }
public void testWithObjectSimple() { [EOL]     ObjectNode root = mapper.createObjectNode(); [EOL]     root.put("a", 3); [EOL]     assertEquals(1, root.size()); [EOL]     ObjectNode copy = root.deepCopy(); [EOL]     assertEquals(1, copy.size()); [EOL]     root.put("b", 7); [EOL]     assertEquals(2, root.size()); [EOL]     assertEquals(1, copy.size()); [EOL]     copy.put("c", 3); [EOL]     assertEquals(2, root.size()); [EOL]     assertEquals(2, copy.size()); [EOL] }
public void testWithObjectSimple() { [EOL]     ObjectNode root = mapper.createObjectNode(); [EOL]     root.put("a", 3); [EOL]     assertEquals(1, root.size()); [EOL]     ObjectNode copy = root.deepCopy(); [EOL]     assertEquals(1, copy.size()); [EOL]     root.put("b", 7); [EOL]     assertEquals(2, root.size()); [EOL]     assertEquals(1, copy.size()); [EOL]     copy.put("c", 3); [EOL]     assertEquals(2, root.size()); [EOL]     assertEquals(2, copy.size()); [EOL] }
public void testFromMap() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ObjectNode root = mapper.createObjectNode(); [EOL]     root.put(FIELD4, TEXT2); [EOL]     root.put(FIELD3, -1); [EOL]     root.putArray(FIELD2); [EOL]     root.put(FIELD1, DOUBLE_VALUE); [EOL]     for (int i = 0; i < 2; ++i) { [EOL]         StringWriter sw = new StringWriter(); [EOL]         if (i == 0) { [EOL]             JsonGenerator gen = new JsonFactory().createGenerator(sw); [EOL]             root.serialize(gen, null); [EOL]             gen.close(); [EOL]         } else { [EOL]             mapper.writeValue(sw, root); [EOL]         } [EOL]         verifyFromMap(sw.toString()); [EOL]     } [EOL]     verifyFromMap(root.toString()); [EOL] }
public void testFromMap() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ObjectNode root = mapper.createObjectNode(); [EOL]     root.put(FIELD4, TEXT2); [EOL]     root.put(FIELD3, -1); [EOL]     root.putArray(FIELD2); [EOL]     root.put(FIELD1, DOUBLE_VALUE); [EOL]     for (int i = 0; i < 2; ++i) { [EOL]         StringWriter sw = new StringWriter(); [EOL]         if (i == 0) { [EOL]             JsonGenerator gen = new JsonFactory().createGenerator(sw); [EOL]             root.serialize(gen, null); [EOL]             gen.close(); [EOL]         } else { [EOL]             mapper.writeValue(sw, root); [EOL]         } [EOL]         verifyFromMap(sw.toString()); [EOL]     } [EOL]     verifyFromMap(root.toString()); [EOL] }
public void testFromMap() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ObjectNode root = mapper.createObjectNode(); [EOL]     root.put(FIELD4, TEXT2); [EOL]     root.put(FIELD3, -1); [EOL]     root.putArray(FIELD2); [EOL]     root.put(FIELD1, DOUBLE_VALUE); [EOL]     for (int i = 0; i < 2; ++i) { [EOL]         StringWriter sw = new StringWriter(); [EOL]         if (i == 0) { [EOL]             JsonGenerator gen = new JsonFactory().createGenerator(sw); [EOL]             root.serialize(gen, null); [EOL]             gen.close(); [EOL]         } else { [EOL]             mapper.writeValue(sw, root); [EOL]         } [EOL]         verifyFromMap(sw.toString()); [EOL]     } [EOL]     verifyFromMap(root.toString()); [EOL] }
public void testIssue709() throws Exception { [EOL]     byte[] inputData = new byte[] { 1, 2, 3 }; [EOL]     ObjectNode node = MAPPER.createObjectNode(); [EOL]     node.put("data", inputData); [EOL]     Issue709Bean result = MAPPER.treeToValue(node, Issue709Bean.class); [EOL]     String json = MAPPER.writeValueAsString(node); [EOL]     Issue709Bean resultFromString = MAPPER.readValue(json, Issue709Bean.class); [EOL]     Issue709Bean resultFromConvert = MAPPER.convertValue(node, Issue709Bean.class); [EOL]     Assert.assertArrayEquals(inputData, resultFromString.data); [EOL]     Assert.assertArrayEquals(inputData, resultFromConvert.data); [EOL]     Assert.assertArrayEquals(inputData, result.data); [EOL] }
public void testIssue709() throws Exception { [EOL]     byte[] inputData = new byte[] { 1, 2, 3 }; [EOL]     ObjectNode node = MAPPER.createObjectNode(); [EOL]     node.put("data", inputData); [EOL]     Issue709Bean result = MAPPER.treeToValue(node, Issue709Bean.class); [EOL]     String json = MAPPER.writeValueAsString(node); [EOL]     Issue709Bean resultFromString = MAPPER.readValue(json, Issue709Bean.class); [EOL]     Issue709Bean resultFromConvert = MAPPER.convertValue(node, Issue709Bean.class); [EOL]     Assert.assertArrayEquals(inputData, resultFromString.data); [EOL]     Assert.assertArrayEquals(inputData, resultFromConvert.data); [EOL]     Assert.assertArrayEquals(inputData, result.data); [EOL] }
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(NullNode.instance, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testSimpleUUIDForClassRoundTrip() throws Exception { [EOL]     UUIDNode root = new UUIDNode(1); [EOL]     UUIDNode child1 = new UUIDNode(2); [EOL]     UUIDNode child2 = new UUIDNode(3); [EOL]     root.first = child1; [EOL]     root.second = child2; [EOL]     child1.parent = root; [EOL]     child2.parent = root; [EOL]     child1.first = child2; [EOL]     String json = mapper.writeValueAsString(root); [EOL]     UUIDNode result = mapper.readValue(json, UUIDNode.class); [EOL]     assertEquals(1, result.value); [EOL]     UUIDNode result2 = result.first; [EOL]     UUIDNode result3 = result.second; [EOL]     assertNotNull(result2); [EOL]     assertNotNull(result3); [EOL]     assertEquals(2, result2.value); [EOL]     assertEquals(3, result3.value); [EOL]     assertSame(result, result2.parent); [EOL]     assertSame(result, result3.parent); [EOL]     assertSame(result3, result2.first); [EOL] }
public void testSimpleUUIDForClassRoundTrip() throws Exception { [EOL]     UUIDNode root = new UUIDNode(1); [EOL]     UUIDNode child1 = new UUIDNode(2); [EOL]     UUIDNode child2 = new UUIDNode(3); [EOL]     root.first = child1; [EOL]     root.second = child2; [EOL]     child1.parent = root; [EOL]     child2.parent = root; [EOL]     child1.first = child2; [EOL]     String json = mapper.writeValueAsString(root); [EOL]     UUIDNode result = mapper.readValue(json, UUIDNode.class); [EOL]     assertEquals(1, result.value); [EOL]     UUIDNode result2 = result.first; [EOL]     UUIDNode result3 = result.second; [EOL]     assertNotNull(result2); [EOL]     assertNotNull(result3); [EOL]     assertEquals(2, result2.value); [EOL]     assertEquals(3, result3.value); [EOL]     assertSame(result, result2.parent); [EOL]     assertSame(result, result3.parent); [EOL]     assertSame(result3, result2.first); [EOL] }
public void testSimpleUUIDForClassRoundTrip() throws Exception { [EOL]     UUIDNode root = new UUIDNode(1); [EOL]     UUIDNode child1 = new UUIDNode(2); [EOL]     UUIDNode child2 = new UUIDNode(3); [EOL]     root.first = child1; [EOL]     root.second = child2; [EOL]     child1.parent = root; [EOL]     child2.parent = root; [EOL]     child1.first = child2; [EOL]     String json = mapper.writeValueAsString(root); [EOL]     UUIDNode result = mapper.readValue(json, UUIDNode.class); [EOL]     assertEquals(1, result.value); [EOL]     UUIDNode result2 = result.first; [EOL]     UUIDNode result3 = result.second; [EOL]     assertNotNull(result2); [EOL]     assertNotNull(result3); [EOL]     assertEquals(2, result2.value); [EOL]     assertEquals(3, result3.value); [EOL]     assertSame(result, result2.parent); [EOL]     assertSame(result, result3.parent); [EOL]     assertSame(result3, result2.first); [EOL] }
public void testModifyCollectionDeserializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setDeserializerModifier(new CollectionDeserializerModifier())); [EOL]     List<?> result = mapper.readValue("[1,2]", List.class); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("foo", result.get(0)); [EOL] }
public void testModifyCollectionDeserializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setDeserializerModifier(new CollectionDeserializerModifier())); [EOL]     List<?> result = mapper.readValue("[1,2]", List.class); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("foo", result.get(0)); [EOL] }
public void testModifyCollectionDeserializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setDeserializerModifier(new CollectionDeserializerModifier())); [EOL]     List<?> result = mapper.readValue("[1,2]", List.class); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("foo", result.get(0)); [EOL] }
public void testWithGetterAsSetter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new CStyleStrategy()); [EOL]     SetterlessWithValue input = new SetterlessWithValue().add(3); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"value_list\":[{\"int_value\":3}]}", json); [EOL]     SetterlessWithValue result = mapper.readValue(json, SetterlessWithValue.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(1, result.values.size()); [EOL]     assertEquals(3, result.values.get(0).intValue); [EOL] }
public void testWithGetterAsSetter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new CStyleStrategy()); [EOL]     SetterlessWithValue input = new SetterlessWithValue().add(3); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"value_list\":[{\"int_value\":3}]}", json); [EOL]     SetterlessWithValue result = mapper.readValue(json, SetterlessWithValue.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(1, result.values.size()); [EOL]     assertEquals(3, result.values.get(0).intValue); [EOL] }
public void testWithGetterAsSetter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new CStyleStrategy()); [EOL]     SetterlessWithValue input = new SetterlessWithValue().add(3); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"value_list\":[{\"int_value\":3}]}", json); [EOL]     SetterlessWithValue result = mapper.readValue(json, SetterlessWithValue.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(1, result.values.size()); [EOL]     assertEquals(3, result.values.get(0).intValue); [EOL] }
public void testWithGetterAsSetter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new CStyleStrategy()); [EOL]     SetterlessWithValue input = new SetterlessWithValue().add(3); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"value_list\":[{\"int_value\":3}]}", json); [EOL]     SetterlessWithValue result = mapper.readValue(json, SetterlessWithValue.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(1, result.values.size()); [EOL]     assertEquals(3, result.values.get(0).intValue); [EOL] }
public void testWithGetterAsSetter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new CStyleStrategy()); [EOL]     SetterlessWithValue input = new SetterlessWithValue().add(3); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"value_list\":[{\"int_value\":3}]}", json); [EOL]     SetterlessWithValue result = mapper.readValue(json, SetterlessWithValue.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(1, result.values.size()); [EOL]     assertEquals(3, result.values.get(0).intValue); [EOL] }
public void testWithGetterAsSetter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new CStyleStrategy()); [EOL]     SetterlessWithValue input = new SetterlessWithValue().add(3); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"value_list\":[{\"int_value\":3}]}", json); [EOL]     SetterlessWithValue result = mapper.readValue(json, SetterlessWithValue.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(1, result.values.size()); [EOL]     assertEquals(3, result.values.get(0).intValue); [EOL] }
public void testWithGetterAsSetter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new CStyleStrategy()); [EOL]     SetterlessWithValue input = new SetterlessWithValue().add(3); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"value_list\":[{\"int_value\":3}]}", json); [EOL]     SetterlessWithValue result = mapper.readValue(json, SetterlessWithValue.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(1, result.values.size()); [EOL]     assertEquals(3, result.values.get(0).intValue); [EOL] }
public void testWithGetterAsSetter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new CStyleStrategy()); [EOL]     SetterlessWithValue input = new SetterlessWithValue().add(3); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"value_list\":[{\"int_value\":3}]}", json); [EOL]     SetterlessWithValue result = mapper.readValue(json, SetterlessWithValue.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(1, result.values.size()); [EOL]     assertEquals(3, result.values.get(0).intValue); [EOL] }
public void testWithGetterAsSetter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new CStyleStrategy()); [EOL]     SetterlessWithValue input = new SetterlessWithValue().add(3); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"value_list\":[{\"int_value\":3}]}", json); [EOL]     SetterlessWithValue result = mapper.readValue(json, SetterlessWithValue.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(1, result.values.size()); [EOL]     assertEquals(3, result.values.get(0).intValue); [EOL] }
public void testBeanAsObject() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String str = m.writeValueAsString(new Object[] { new StringBean("abc") }); [EOL]     _verifySerializationAsMap(str); [EOL]     Object ob = m.readValue(str, Object[].class); [EOL]     assertNotNull(ob); [EOL]     Object[] result = (Object[]) ob; [EOL]     assertNotNull(result[0]); [EOL]     assertEquals(StringBean.class, result[0].getClass()); [EOL]     assertEquals("abc", ((StringBean) result[0]).name); [EOL] }
public void testBeanAsObject() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String str = m.writeValueAsString(new Object[] { new StringBean("abc") }); [EOL]     _verifySerializationAsMap(str); [EOL]     Object ob = m.readValue(str, Object[].class); [EOL]     assertNotNull(ob); [EOL]     Object[] result = (Object[]) ob; [EOL]     assertNotNull(result[0]); [EOL]     assertEquals(StringBean.class, result[0].getClass()); [EOL]     assertEquals("abc", ((StringBean) result[0]).name); [EOL] }
public void testBeanAsObject() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String str = m.writeValueAsString(new Object[] { new StringBean("abc") }); [EOL]     _verifySerializationAsMap(str); [EOL]     Object ob = m.readValue(str, Object[].class); [EOL]     assertNotNull(ob); [EOL]     Object[] result = (Object[]) ob; [EOL]     assertNotNull(result[0]); [EOL]     assertEquals(StringBean.class, result[0].getClass()); [EOL]     assertEquals("abc", ((StringBean) result[0]).name); [EOL] }
public void testWithGetterAsSetter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new CStyleStrategy()); [EOL]     SetterlessWithValue input = new SetterlessWithValue().add(3); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"value_list\":[{\"int_value\":3}]}", json); [EOL]     SetterlessWithValue result = mapper.readValue(json, SetterlessWithValue.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(1, result.values.size()); [EOL]     assertEquals(3, result.values.get(0).intValue); [EOL] }
public void testWithGetterAsSetter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new CStyleStrategy()); [EOL]     SetterlessWithValue input = new SetterlessWithValue().add(3); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"value_list\":[{\"int_value\":3}]}", json); [EOL]     SetterlessWithValue result = mapper.readValue(json, SetterlessWithValue.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(1, result.values.size()); [EOL]     assertEquals(3, result.values.get(0).intValue); [EOL] }
public void testWithGetterAsSetter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new CStyleStrategy()); [EOL]     SetterlessWithValue input = new SetterlessWithValue().add(3); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"value_list\":[{\"int_value\":3}]}", json); [EOL]     SetterlessWithValue result = mapper.readValue(json, SetterlessWithValue.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(1, result.values.size()); [EOL]     assertEquals(3, result.values.get(0).intValue); [EOL] }
public void testWithGetterAsSetter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new CStyleStrategy()); [EOL]     SetterlessWithValue input = new SetterlessWithValue().add(3); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"value_list\":[{\"int_value\":3}]}", json); [EOL]     SetterlessWithValue result = mapper.readValue(json, SetterlessWithValue.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(1, result.values.size()); [EOL]     assertEquals(3, result.values.get(0).intValue); [EOL] }
public void testWithGetterAsSetter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new CStyleStrategy()); [EOL]     SetterlessWithValue input = new SetterlessWithValue().add(3); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"value_list\":[{\"int_value\":3}]}", json); [EOL]     SetterlessWithValue result = mapper.readValue(json, SetterlessWithValue.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(1, result.values.size()); [EOL]     assertEquals(3, result.values.get(0).intValue); [EOL] }
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(NullNode.instance, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(NullNode.instance, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testBeanAsObject() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String str = m.writeValueAsString(new Object[] { new StringBean("abc") }); [EOL]     _verifySerializationAsMap(str); [EOL]     Object ob = m.readValue(str, Object[].class); [EOL]     assertNotNull(ob); [EOL]     Object[] result = (Object[]) ob; [EOL]     assertNotNull(result[0]); [EOL]     assertEquals(StringBean.class, result[0].getClass()); [EOL]     assertEquals("abc", ((StringBean) result[0]).name); [EOL] }
public void testBeanAsObject() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String str = m.writeValueAsString(new Object[] { new StringBean("abc") }); [EOL]     _verifySerializationAsMap(str); [EOL]     Object ob = m.readValue(str, Object[].class); [EOL]     assertNotNull(ob); [EOL]     Object[] result = (Object[]) ob; [EOL]     assertNotNull(result[0]); [EOL]     assertEquals(StringBean.class, result[0].getClass()); [EOL]     assertEquals("abc", ((StringBean) result[0]).name); [EOL] }
public void testBeanAsObject() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String str = m.writeValueAsString(new Object[] { new StringBean("abc") }); [EOL]     _verifySerializationAsMap(str); [EOL]     Object ob = m.readValue(str, Object[].class); [EOL]     assertNotNull(ob); [EOL]     Object[] result = (Object[]) ob; [EOL]     assertNotNull(result[0]); [EOL]     assertEquals(StringBean.class, result[0].getClass()); [EOL]     assertEquals("abc", ((StringBean) result[0]).name); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testSimpleArrayMethod() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     MethodWrapperBeanArray array = new MethodWrapperBeanArray(new MethodWrapperBean[] { new MethodWrapperBean(new StringWrapper("A")) }); [EOL]     String json = mapper.writeValueAsString(array); [EOL]     MethodWrapperBeanArray result = mapper.readValue(json, MethodWrapperBeanArray.class); [EOL]     assertNotNull(result); [EOL]     MethodWrapperBean[] beans = result.beans; [EOL]     assertEquals(1, beans.length); [EOL]     MethodWrapperBean bean = beans[0]; [EOL]     assertEquals(StringWrapper.class, bean.value.getClass()); [EOL]     assertEquals(((StringWrapper) bean.value).str, "A"); [EOL] }
public void testSimpleArrayMethod() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     MethodWrapperBeanArray array = new MethodWrapperBeanArray(new MethodWrapperBean[] { new MethodWrapperBean(new StringWrapper("A")) }); [EOL]     String json = mapper.writeValueAsString(array); [EOL]     MethodWrapperBeanArray result = mapper.readValue(json, MethodWrapperBeanArray.class); [EOL]     assertNotNull(result); [EOL]     MethodWrapperBean[] beans = result.beans; [EOL]     assertEquals(1, beans.length); [EOL]     MethodWrapperBean bean = beans[0]; [EOL]     assertEquals(StringWrapper.class, bean.value.getClass()); [EOL]     assertEquals(((StringWrapper) bean.value).str, "A"); [EOL] }
public void testBeanAsObject() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String str = m.writeValueAsString(new Object[] { new StringBean("abc") }); [EOL]     _verifySerializationAsMap(str); [EOL]     Object ob = m.readValue(str, Object[].class); [EOL]     assertNotNull(ob); [EOL]     Object[] result = (Object[]) ob; [EOL]     assertNotNull(result[0]); [EOL]     assertEquals(StringBean.class, result[0].getClass()); [EOL]     assertEquals("abc", ((StringBean) result[0]).name); [EOL] }
public void testBeanAsObject() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String str = m.writeValueAsString(new Object[] { new StringBean("abc") }); [EOL]     _verifySerializationAsMap(str); [EOL]     Object ob = m.readValue(str, Object[].class); [EOL]     assertNotNull(ob); [EOL]     Object[] result = (Object[]) ob; [EOL]     assertNotNull(result[0]); [EOL]     assertEquals(StringBean.class, result[0].getClass()); [EOL]     assertEquals("abc", ((StringBean) result[0]).name); [EOL] }
public void testBeanAsObject() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String str = m.writeValueAsString(new Object[] { new StringBean("abc") }); [EOL]     _verifySerializationAsMap(str); [EOL]     Object ob = m.readValue(str, Object[].class); [EOL]     assertNotNull(ob); [EOL]     Object[] result = (Object[]) ob; [EOL]     assertNotNull(result[0]); [EOL]     assertEquals(StringBean.class, result[0].getClass()); [EOL]     assertEquals("abc", ((StringBean) result[0]).name); [EOL] }
public void testBeanAsObject() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String str = m.writeValueAsString(new Object[] { new StringBean("abc") }); [EOL]     _verifySerializationAsMap(str); [EOL]     Object ob = m.readValue(str, Object[].class); [EOL]     assertNotNull(ob); [EOL]     Object[] result = (Object[]) ob; [EOL]     assertNotNull(result[0]); [EOL]     assertEquals(StringBean.class, result[0].getClass()); [EOL]     assertEquals("abc", ((StringBean) result[0]).name); [EOL] }
public void testBeanAsObject() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String str = m.writeValueAsString(new Object[] { new StringBean("abc") }); [EOL]     _verifySerializationAsMap(str); [EOL]     Object ob = m.readValue(str, Object[].class); [EOL]     assertNotNull(ob); [EOL]     Object[] result = (Object[]) ob; [EOL]     assertNotNull(result[0]); [EOL]     assertEquals(StringBean.class, result[0].getClass()); [EOL]     assertEquals("abc", ((StringBean) result[0]).name); [EOL] }
public void testBeanAsObject() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String str = m.writeValueAsString(new Object[] { new StringBean("abc") }); [EOL]     _verifySerializationAsMap(str); [EOL]     Object ob = m.readValue(str, Object[].class); [EOL]     assertNotNull(ob); [EOL]     Object[] result = (Object[]) ob; [EOL]     assertNotNull(result[0]); [EOL]     assertEquals(StringBean.class, result[0].getClass()); [EOL]     assertEquals("abc", ((StringBean) result[0]).name); [EOL] }
public void testBeanAsObject() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String str = m.writeValueAsString(new Object[] { new StringBean("abc") }); [EOL]     _verifySerializationAsMap(str); [EOL]     Object ob = m.readValue(str, Object[].class); [EOL]     assertNotNull(ob); [EOL]     Object[] result = (Object[]) ob; [EOL]     assertNotNull(result[0]); [EOL]     assertEquals(StringBean.class, result[0].getClass()); [EOL]     assertEquals("abc", ((StringBean) result[0]).name); [EOL] }
public void testBeanAsObject() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String str = m.writeValueAsString(new Object[] { new StringBean("abc") }); [EOL]     _verifySerializationAsMap(str); [EOL]     Object ob = m.readValue(str, Object[].class); [EOL]     assertNotNull(ob); [EOL]     Object[] result = (Object[]) ob; [EOL]     assertNotNull(result[0]); [EOL]     assertEquals(StringBean.class, result[0].getClass()); [EOL]     assertEquals("abc", ((StringBean) result[0]).name); [EOL] }
public void testBeanAsObject() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String str = m.writeValueAsString(new Object[] { new StringBean("abc") }); [EOL]     _verifySerializationAsMap(str); [EOL]     Object ob = m.readValue(str, Object[].class); [EOL]     assertNotNull(ob); [EOL]     Object[] result = (Object[]) ob; [EOL]     assertNotNull(result[0]); [EOL]     assertEquals(StringBean.class, result[0].getClass()); [EOL]     assertEquals("abc", ((StringBean) result[0]).name); [EOL] }
public void testBeanAsObject() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String str = m.writeValueAsString(new Object[] { new StringBean("abc") }); [EOL]     _verifySerializationAsMap(str); [EOL]     Object ob = m.readValue(str, Object[].class); [EOL]     assertNotNull(ob); [EOL]     Object[] result = (Object[]) ob; [EOL]     assertNotNull(result[0]); [EOL]     assertEquals(StringBean.class, result[0].getClass()); [EOL]     assertEquals("abc", ((StringBean) result[0]).name); [EOL] }
public void testBeanAsObject() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String str = m.writeValueAsString(new Object[] { new StringBean("abc") }); [EOL]     _verifySerializationAsMap(str); [EOL]     Object ob = m.readValue(str, Object[].class); [EOL]     assertNotNull(ob); [EOL]     Object[] result = (Object[]) ob; [EOL]     assertNotNull(result[0]); [EOL]     assertEquals(StringBean.class, result[0].getClass()); [EOL]     assertEquals("abc", ((StringBean) result[0]).name); [EOL] }
public void testBeanAsObject() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String str = m.writeValueAsString(new Object[] { new StringBean("abc") }); [EOL]     _verifySerializationAsMap(str); [EOL]     Object ob = m.readValue(str, Object[].class); [EOL]     assertNotNull(ob); [EOL]     Object[] result = (Object[]) ob; [EOL]     assertNotNull(result[0]); [EOL]     assertEquals(StringBean.class, result[0].getClass()); [EOL]     assertEquals("abc", ((StringBean) result[0]).name); [EOL] }
public void testBeanAsObject() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String str = m.writeValueAsString(new Object[] { new StringBean("abc") }); [EOL]     _verifySerializationAsMap(str); [EOL]     Object ob = m.readValue(str, Object[].class); [EOL]     assertNotNull(ob); [EOL]     Object[] result = (Object[]) ob; [EOL]     assertNotNull(result[0]); [EOL]     assertEquals(StringBean.class, result[0].getClass()); [EOL]     assertEquals("abc", ((StringBean) result[0]).name); [EOL] }
public void testBeanAsObject() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String str = m.writeValueAsString(new Object[] { new StringBean("abc") }); [EOL]     _verifySerializationAsMap(str); [EOL]     Object ob = m.readValue(str, Object[].class); [EOL]     assertNotNull(ob); [EOL]     Object[] result = (Object[]) ob; [EOL]     assertNotNull(result[0]); [EOL]     assertEquals(StringBean.class, result[0].getClass()); [EOL]     assertEquals("abc", ((StringBean) result[0]).name); [EOL] }
public void testBeanAsObject() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String str = m.writeValueAsString(new Object[] { new StringBean("abc") }); [EOL]     _verifySerializationAsMap(str); [EOL]     Object ob = m.readValue(str, Object[].class); [EOL]     assertNotNull(ob); [EOL]     Object[] result = (Object[]) ob; [EOL]     assertNotNull(result[0]); [EOL]     assertEquals(StringBean.class, result[0].getClass()); [EOL]     assertEquals("abc", ((StringBean) result[0]).name); [EOL] }
public void testBeanAsObject() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String str = m.writeValueAsString(new Object[] { new StringBean("abc") }); [EOL]     _verifySerializationAsMap(str); [EOL]     Object ob = m.readValue(str, Object[].class); [EOL]     assertNotNull(ob); [EOL]     Object[] result = (Object[]) ob; [EOL]     assertNotNull(result[0]); [EOL]     assertEquals(StringBean.class, result[0].getClass()); [EOL]     assertEquals("abc", ((StringBean) result[0]).name); [EOL] }
public void testBeanAsObject() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String str = m.writeValueAsString(new Object[] { new StringBean("abc") }); [EOL]     _verifySerializationAsMap(str); [EOL]     Object ob = m.readValue(str, Object[].class); [EOL]     assertNotNull(ob); [EOL]     Object[] result = (Object[]) ob; [EOL]     assertNotNull(result[0]); [EOL]     assertEquals(StringBean.class, result[0].getClass()); [EOL]     assertEquals("abc", ((StringBean) result[0]).name); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testWithType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Object ob = new Impl("abc", "def"); [EOL]     JavaType type = TypeFactory.defaultInstance().uncheckedSimpleType(Base.class); [EOL]     assertEquals("do({\"a\":\"abc\"})", serializeAsString(m, new JSONPObject("do", ob, type))); [EOL] }
public void testWithType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Object ob = new Impl("abc", "def"); [EOL]     JavaType type = TypeFactory.defaultInstance().uncheckedSimpleType(Base.class); [EOL]     assertEquals("do({\"a\":\"abc\"})", serializeAsString(m, new JSONPObject("do", ob, type))); [EOL] }
public void testWithType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Object ob = new Impl("abc", "def"); [EOL]     JavaType type = TypeFactory.defaultInstance().uncheckedSimpleType(Base.class); [EOL]     assertEquals("do({\"a\":\"abc\"})", serializeAsString(m, new JSONPObject("do", ob, type))); [EOL] }
public void testWithType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Object ob = new Impl("abc", "def"); [EOL]     JavaType type = TypeFactory.defaultInstance().uncheckedSimpleType(Base.class); [EOL]     assertEquals("do({\"a\":\"abc\"})", serializeAsString(m, new JSONPObject("do", ob, type))); [EOL] }
public void testWithType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Object ob = new Impl("abc", "def"); [EOL]     JavaType type = TypeFactory.defaultInstance().uncheckedSimpleType(Base.class); [EOL]     assertEquals("do({\"a\":\"abc\"})", serializeAsString(m, new JSONPObject("do", ob, type))); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testBrokenConstructor() throws Exception { [EOL]     try { [EOL]         MAPPER.readValue("{ \"x\" : 42 }", BrokenBean.class); [EOL]     } catch (JsonMappingException je) { [EOL]         verifyException(je, "has no property name"); [EOL]     } [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testBrokenConstructor() throws Exception { [EOL]     try { [EOL]         MAPPER.readValue("{ \"x\" : 42 }", BrokenBean.class); [EOL]     } catch (JsonMappingException je) { [EOL]         verifyException(je, "has no property name"); [EOL]     } [EOL] }
public void testEnumPolymorphicSerializationTest() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     List<ITestType> testTypesList = new ArrayList<ITestType>(); [EOL]     testTypesList.add(ConcreteType.ONE); [EOL]     testTypesList.add(ConcreteType.TWO); [EOL]     ListContainer listContainer = new ListContainer(); [EOL]     listContainer.testTypes = testTypesList; [EOL]     String json = mapper.writeValueAsString(listContainer); [EOL]     listContainer = mapper.readValue(json, ListContainer.class); [EOL]     EnumMapContainer enumMapContainer = new EnumMapContainer(); [EOL]     EnumMap<KeyEnum, ITestType> testTypesMap = new EnumMap<KeyEnum, ITestType>(KeyEnum.class); [EOL]     testTypesMap.put(KeyEnum.A, ConcreteType.ONE); [EOL]     testTypesMap.put(KeyEnum.B, ConcreteType.TWO); [EOL]     enumMapContainer.testTypes = testTypesMap; [EOL]     json = mapper.writeValueAsString(enumMapContainer); [EOL]     enumMapContainer = mapper.readValue(json, EnumMapContainer.class); [EOL] }
public void testEnumPolymorphicSerializationTest() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     List<ITestType> testTypesList = new ArrayList<ITestType>(); [EOL]     testTypesList.add(ConcreteType.ONE); [EOL]     testTypesList.add(ConcreteType.TWO); [EOL]     ListContainer listContainer = new ListContainer(); [EOL]     listContainer.testTypes = testTypesList; [EOL]     String json = mapper.writeValueAsString(listContainer); [EOL]     listContainer = mapper.readValue(json, ListContainer.class); [EOL]     EnumMapContainer enumMapContainer = new EnumMapContainer(); [EOL]     EnumMap<KeyEnum, ITestType> testTypesMap = new EnumMap<KeyEnum, ITestType>(KeyEnum.class); [EOL]     testTypesMap.put(KeyEnum.A, ConcreteType.ONE); [EOL]     testTypesMap.put(KeyEnum.B, ConcreteType.TWO); [EOL]     enumMapContainer.testTypes = testTypesMap; [EOL]     json = mapper.writeValueAsString(enumMapContainer); [EOL]     enumMapContainer = mapper.readValue(json, EnumMapContainer.class); [EOL] }
public void testEnumPolymorphicSerializationTest() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     List<ITestType> testTypesList = new ArrayList<ITestType>(); [EOL]     testTypesList.add(ConcreteType.ONE); [EOL]     testTypesList.add(ConcreteType.TWO); [EOL]     ListContainer listContainer = new ListContainer(); [EOL]     listContainer.testTypes = testTypesList; [EOL]     String json = mapper.writeValueAsString(listContainer); [EOL]     listContainer = mapper.readValue(json, ListContainer.class); [EOL]     EnumMapContainer enumMapContainer = new EnumMapContainer(); [EOL]     EnumMap<KeyEnum, ITestType> testTypesMap = new EnumMap<KeyEnum, ITestType>(KeyEnum.class); [EOL]     testTypesMap.put(KeyEnum.A, ConcreteType.ONE); [EOL]     testTypesMap.put(KeyEnum.B, ConcreteType.TWO); [EOL]     enumMapContainer.testTypes = testTypesMap; [EOL]     json = mapper.writeValueAsString(enumMapContainer); [EOL]     enumMapContainer = mapper.readValue(json, EnumMapContainer.class); [EOL] }
public void testEnumMap() throws Exception { [EOL]     String JSON = "{ \"KEY1\" : \"\", \"WHATEVER\" : null }"; [EOL]     EnumMap<Key, String> result = MAPPER.readValue(JSON, new TypeReference<EnumMap<Key, String>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(EnumMap.class, result.getClass()); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("", result.get(Key.KEY1)); [EOL]     assertTrue(result.containsKey(Key.WHATEVER)); [EOL]     assertNull(result.get(Key.WHATEVER)); [EOL]     assertFalse(result.containsKey(Key.KEY2)); [EOL]     assertNull(result.get(Key.KEY2)); [EOL] }
public void testEnumMap() throws Exception { [EOL]     String JSON = "{ \"KEY1\" : \"\", \"WHATEVER\" : null }"; [EOL]     EnumMap<Key, String> result = MAPPER.readValue(JSON, new TypeReference<EnumMap<Key, String>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(EnumMap.class, result.getClass()); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("", result.get(Key.KEY1)); [EOL]     assertTrue(result.containsKey(Key.WHATEVER)); [EOL]     assertNull(result.get(Key.WHATEVER)); [EOL]     assertFalse(result.containsKey(Key.KEY2)); [EOL]     assertNull(result.get(Key.KEY2)); [EOL] }
public void testEnumMap() throws Exception { [EOL]     String JSON = "{ \"KEY1\" : \"\", \"WHATEVER\" : null }"; [EOL]     EnumMap<Key, String> result = MAPPER.readValue(JSON, new TypeReference<EnumMap<Key, String>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(EnumMap.class, result.getClass()); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("", result.get(Key.KEY1)); [EOL]     assertTrue(result.containsKey(Key.WHATEVER)); [EOL]     assertNull(result.get(Key.WHATEVER)); [EOL]     assertFalse(result.containsKey(Key.KEY2)); [EOL]     assertNull(result.get(Key.KEY2)); [EOL] }
public void testEnumMap() throws Exception { [EOL]     String JSON = "{ \"KEY1\" : \"\", \"WHATEVER\" : null }"; [EOL]     EnumMap<Key, String> result = MAPPER.readValue(JSON, new TypeReference<EnumMap<Key, String>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(EnumMap.class, result.getClass()); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("", result.get(Key.KEY1)); [EOL]     assertTrue(result.containsKey(Key.WHATEVER)); [EOL]     assertNull(result.get(Key.WHATEVER)); [EOL]     assertFalse(result.containsKey(Key.KEY2)); [EOL]     assertNull(result.get(Key.KEY2)); [EOL] }
public void testEnumMap() throws Exception { [EOL]     String JSON = "{ \"KEY1\" : \"\", \"WHATEVER\" : null }"; [EOL]     EnumMap<Key, String> result = MAPPER.readValue(JSON, new TypeReference<EnumMap<Key, String>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(EnumMap.class, result.getClass()); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("", result.get(Key.KEY1)); [EOL]     assertTrue(result.containsKey(Key.WHATEVER)); [EOL]     assertNull(result.get(Key.WHATEVER)); [EOL]     assertFalse(result.containsKey(Key.KEY2)); [EOL]     assertNull(result.get(Key.KEY2)); [EOL] }
public void testEnumMap() throws Exception { [EOL]     String JSON = "{ \"KEY1\" : \"\", \"WHATEVER\" : null }"; [EOL]     EnumMap<Key, String> result = MAPPER.readValue(JSON, new TypeReference<EnumMap<Key, String>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(EnumMap.class, result.getClass()); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("", result.get(Key.KEY1)); [EOL]     assertTrue(result.containsKey(Key.WHATEVER)); [EOL]     assertNull(result.get(Key.WHATEVER)); [EOL]     assertFalse(result.containsKey(Key.KEY2)); [EOL]     assertNull(result.get(Key.KEY2)); [EOL] }
public void testEnumMap() throws Exception { [EOL]     String JSON = "{ \"KEY1\" : \"\", \"WHATEVER\" : null }"; [EOL]     EnumMap<Key, String> result = MAPPER.readValue(JSON, new TypeReference<EnumMap<Key, String>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(EnumMap.class, result.getClass()); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("", result.get(Key.KEY1)); [EOL]     assertTrue(result.containsKey(Key.WHATEVER)); [EOL]     assertNull(result.get(Key.WHATEVER)); [EOL]     assertFalse(result.containsKey(Key.KEY2)); [EOL]     assertNull(result.get(Key.KEY2)); [EOL] }
public void testSimpleStringGetter() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String value = "abc"; [EOL]     String result = m.writeValueAsString(new ClassGetter<String>(value)); [EOL]     String expected = String.format("{\"nonRaw\":\"%s\",\"raw\":%s,\"value\":%s}", value, value, value); [EOL]     assertEquals(expected, result); [EOL] }
public void testSimpleStringGetter() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String value = "abc"; [EOL]     String result = m.writeValueAsString(new ClassGetter<String>(value)); [EOL]     String expected = String.format("{\"nonRaw\":\"%s\",\"raw\":%s,\"value\":%s}", value, value, value); [EOL]     assertEquals(expected, result); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testSimple() { [EOL]     assertEquals(Boolean.TRUE, MAPPER.convertValue("true", Boolean.class)); [EOL]     assertEquals(Integer.valueOf(-3), MAPPER.convertValue("  -3 ", Integer.class)); [EOL]     assertEquals(Long.valueOf(77), MAPPER.convertValue("77", Long.class)); [EOL]     int[] ints = { 1, 2, 3 }; [EOL]     List<Integer> Ints = new ArrayList<Integer>(); [EOL]     Ints.add(1); [EOL]     Ints.add(2); [EOL]     Ints.add(3); [EOL]     assertArrayEquals(ints, MAPPER.convertValue(Ints, int[].class)); [EOL] }
public void testSimple() { [EOL]     assertEquals(Boolean.TRUE, MAPPER.convertValue("true", Boolean.class)); [EOL]     assertEquals(Integer.valueOf(-3), MAPPER.convertValue("  -3 ", Integer.class)); [EOL]     assertEquals(Long.valueOf(77), MAPPER.convertValue("77", Long.class)); [EOL]     int[] ints = { 1, 2, 3 }; [EOL]     List<Integer> Ints = new ArrayList<Integer>(); [EOL]     Ints.add(1); [EOL]     Ints.add(2); [EOL]     Ints.add(3); [EOL]     assertArrayEquals(ints, MAPPER.convertValue(Ints, int[].class)); [EOL] }
public void testSimple() { [EOL]     assertEquals(Boolean.TRUE, MAPPER.convertValue("true", Boolean.class)); [EOL]     assertEquals(Integer.valueOf(-3), MAPPER.convertValue("  -3 ", Integer.class)); [EOL]     assertEquals(Long.valueOf(77), MAPPER.convertValue("77", Long.class)); [EOL]     int[] ints = { 1, 2, 3 }; [EOL]     List<Integer> Ints = new ArrayList<Integer>(); [EOL]     Ints.add(1); [EOL]     Ints.add(2); [EOL]     Ints.add(3); [EOL]     assertArrayEquals(ints, MAPPER.convertValue(Ints, int[].class)); [EOL] }
public void testSimple() { [EOL]     assertEquals(Boolean.TRUE, MAPPER.convertValue("true", Boolean.class)); [EOL]     assertEquals(Integer.valueOf(-3), MAPPER.convertValue("  -3 ", Integer.class)); [EOL]     assertEquals(Long.valueOf(77), MAPPER.convertValue("77", Long.class)); [EOL]     int[] ints = { 1, 2, 3 }; [EOL]     List<Integer> Ints = new ArrayList<Integer>(); [EOL]     Ints.add(1); [EOL]     Ints.add(2); [EOL]     Ints.add(3); [EOL]     assertArrayEquals(ints, MAPPER.convertValue(Ints, int[].class)); [EOL] }
public void testSimple() { [EOL]     assertEquals(Boolean.TRUE, MAPPER.convertValue("true", Boolean.class)); [EOL]     assertEquals(Integer.valueOf(-3), MAPPER.convertValue("  -3 ", Integer.class)); [EOL]     assertEquals(Long.valueOf(77), MAPPER.convertValue("77", Long.class)); [EOL]     int[] ints = { 1, 2, 3 }; [EOL]     List<Integer> Ints = new ArrayList<Integer>(); [EOL]     Ints.add(1); [EOL]     Ints.add(2); [EOL]     Ints.add(3); [EOL]     assertArrayEquals(ints, MAPPER.convertValue(Ints, int[].class)); [EOL] }
public void testSimple() { [EOL]     assertEquals(Boolean.TRUE, MAPPER.convertValue("true", Boolean.class)); [EOL]     assertEquals(Integer.valueOf(-3), MAPPER.convertValue("  -3 ", Integer.class)); [EOL]     assertEquals(Long.valueOf(77), MAPPER.convertValue("77", Long.class)); [EOL]     int[] ints = { 1, 2, 3 }; [EOL]     List<Integer> Ints = new ArrayList<Integer>(); [EOL]     Ints.add(1); [EOL]     Ints.add(2); [EOL]     Ints.add(3); [EOL]     assertArrayEquals(ints, MAPPER.convertValue(Ints, int[].class)); [EOL] }
public void testSimple() { [EOL]     assertEquals(Boolean.TRUE, MAPPER.convertValue("true", Boolean.class)); [EOL]     assertEquals(Integer.valueOf(-3), MAPPER.convertValue("  -3 ", Integer.class)); [EOL]     assertEquals(Long.valueOf(77), MAPPER.convertValue("77", Long.class)); [EOL]     int[] ints = { 1, 2, 3 }; [EOL]     List<Integer> Ints = new ArrayList<Integer>(); [EOL]     Ints.add(1); [EOL]     Ints.add(2); [EOL]     Ints.add(3); [EOL]     assertArrayEquals(ints, MAPPER.convertValue(Ints, int[].class)); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testIntAsNumber() throws Exception { [EOL]     Number result = new ObjectMapper().readValue(new StringReader(" 123 "), Number.class); [EOL]     assertEquals(Integer.valueOf(123), result); [EOL] }
public void testBigIntAsNumber() throws Exception { [EOL]     BigInteger biggie = new BigInteger("1234567890123456789012345678901234567890"); [EOL]     Number result = new ObjectMapper().readValue(biggie.toString(), Number.class); [EOL]     assertEquals(BigInteger.class, biggie.getClass()); [EOL]     assertEquals(biggie, result); [EOL] }
public void testBigIntAsNumber() throws Exception { [EOL]     BigInteger biggie = new BigInteger("1234567890123456789012345678901234567890"); [EOL]     Number result = new ObjectMapper().readValue(biggie.toString(), Number.class); [EOL]     assertEquals(BigInteger.class, biggie.getClass()); [EOL]     assertEquals(biggie, result); [EOL] }
public void testBigIntAsNumber() throws Exception { [EOL]     BigInteger biggie = new BigInteger("1234567890123456789012345678901234567890"); [EOL]     Number result = new ObjectMapper().readValue(biggie.toString(), Number.class); [EOL]     assertEquals(BigInteger.class, biggie.getClass()); [EOL]     assertEquals(biggie, result); [EOL] }
public void testBigIntAsNumber() throws Exception { [EOL]     BigInteger biggie = new BigInteger("1234567890123456789012345678901234567890"); [EOL]     Number result = new ObjectMapper().readValue(biggie.toString(), Number.class); [EOL]     assertEquals(BigInteger.class, biggie.getClass()); [EOL]     assertEquals(biggie, result); [EOL] }
public void testBigIntAsNumber() throws Exception { [EOL]     BigInteger biggie = new BigInteger("1234567890123456789012345678901234567890"); [EOL]     Number result = new ObjectMapper().readValue(biggie.toString(), Number.class); [EOL]     assertEquals(BigInteger.class, biggie.getClass()); [EOL]     assertEquals(biggie, result); [EOL] }
public void testBigIntAsNumber() throws Exception { [EOL]     BigInteger biggie = new BigInteger("1234567890123456789012345678901234567890"); [EOL]     Number result = new ObjectMapper().readValue(biggie.toString(), Number.class); [EOL]     assertEquals(BigInteger.class, biggie.getClass()); [EOL]     assertEquals(biggie, result); [EOL] }
public void testBigIntAsNumber() throws Exception { [EOL]     BigInteger biggie = new BigInteger("1234567890123456789012345678901234567890"); [EOL]     Number result = new ObjectMapper().readValue(biggie.toString(), Number.class); [EOL]     assertEquals(BigInteger.class, biggie.getClass()); [EOL]     assertEquals(biggie, result); [EOL] }
public void testBigIntAsNumber() throws Exception { [EOL]     BigInteger biggie = new BigInteger("1234567890123456789012345678901234567890"); [EOL]     Number result = new ObjectMapper().readValue(biggie.toString(), Number.class); [EOL]     assertEquals(BigInteger.class, biggie.getClass()); [EOL]     assertEquals(biggie, result); [EOL] }
public void testBigIntAsNumber() throws Exception { [EOL]     BigInteger biggie = new BigInteger("1234567890123456789012345678901234567890"); [EOL]     Number result = new ObjectMapper().readValue(biggie.toString(), Number.class); [EOL]     assertEquals(BigInteger.class, biggie.getClass()); [EOL]     assertEquals(biggie, result); [EOL] }
public void testBigIntAsNumber() throws Exception { [EOL]     BigInteger biggie = new BigInteger("1234567890123456789012345678901234567890"); [EOL]     Number result = new ObjectMapper().readValue(biggie.toString(), Number.class); [EOL]     assertEquals(BigInteger.class, biggie.getClass()); [EOL]     assertEquals(biggie, result); [EOL] }
public void testBigIntAsNumber() throws Exception { [EOL]     BigInteger biggie = new BigInteger("1234567890123456789012345678901234567890"); [EOL]     Number result = new ObjectMapper().readValue(biggie.toString(), Number.class); [EOL]     assertEquals(BigInteger.class, biggie.getClass()); [EOL]     assertEquals(biggie, result); [EOL] }
public void testEmptyAsNumber() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertNull(m.readValue(quote(""), Integer.class)); [EOL]     assertNull(m.readValue(quote(""), Long.class)); [EOL]     assertNull(m.readValue(quote(""), Float.class)); [EOL]     assertNull(m.readValue(quote(""), Double.class)); [EOL]     assertNull(m.readValue(quote(""), BigInteger.class)); [EOL]     assertNull(m.readValue(quote(""), BigDecimal.class)); [EOL] }
public void testEmptyAsNumber() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertNull(m.readValue(quote(""), Integer.class)); [EOL]     assertNull(m.readValue(quote(""), Long.class)); [EOL]     assertNull(m.readValue(quote(""), Float.class)); [EOL]     assertNull(m.readValue(quote(""), Double.class)); [EOL]     assertNull(m.readValue(quote(""), BigInteger.class)); [EOL]     assertNull(m.readValue(quote(""), BigDecimal.class)); [EOL] }
public void testEmptyAsNumber() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertNull(m.readValue(quote(""), Integer.class)); [EOL]     assertNull(m.readValue(quote(""), Long.class)); [EOL]     assertNull(m.readValue(quote(""), Float.class)); [EOL]     assertNull(m.readValue(quote(""), Double.class)); [EOL]     assertNull(m.readValue(quote(""), BigInteger.class)); [EOL]     assertNull(m.readValue(quote(""), BigDecimal.class)); [EOL] }
public void testEmptyAsNumber() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertNull(m.readValue(quote(""), Integer.class)); [EOL]     assertNull(m.readValue(quote(""), Long.class)); [EOL]     assertNull(m.readValue(quote(""), Float.class)); [EOL]     assertNull(m.readValue(quote(""), Double.class)); [EOL]     assertNull(m.readValue(quote(""), BigInteger.class)); [EOL]     assertNull(m.readValue(quote(""), BigDecimal.class)); [EOL] }
public void testEmptyAsNumber() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertNull(m.readValue(quote(""), Integer.class)); [EOL]     assertNull(m.readValue(quote(""), Long.class)); [EOL]     assertNull(m.readValue(quote(""), Float.class)); [EOL]     assertNull(m.readValue(quote(""), Double.class)); [EOL]     assertNull(m.readValue(quote(""), BigInteger.class)); [EOL]     assertNull(m.readValue(quote(""), BigDecimal.class)); [EOL] }
public void testEmptyAsNumber() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertNull(m.readValue(quote(""), Integer.class)); [EOL]     assertNull(m.readValue(quote(""), Long.class)); [EOL]     assertNull(m.readValue(quote(""), Float.class)); [EOL]     assertNull(m.readValue(quote(""), Double.class)); [EOL]     assertNull(m.readValue(quote(""), BigInteger.class)); [EOL]     assertNull(m.readValue(quote(""), BigDecimal.class)); [EOL] }
public void testEmptyAsNumber() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertNull(m.readValue(quote(""), Integer.class)); [EOL]     assertNull(m.readValue(quote(""), Long.class)); [EOL]     assertNull(m.readValue(quote(""), Float.class)); [EOL]     assertNull(m.readValue(quote(""), Double.class)); [EOL]     assertNull(m.readValue(quote(""), BigInteger.class)); [EOL]     assertNull(m.readValue(quote(""), BigDecimal.class)); [EOL] }
public void testViaFactoryUsingString() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     FactoryFromDecimalString result = m.readValue("\"12.57\"", FactoryFromDecimalString.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(12, result._value); [EOL] }
public void testViaFactoryUsingString() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     FactoryFromDecimalString result = m.readValue("\"12.57\"", FactoryFromDecimalString.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(12, result._value); [EOL] }
public void testViaFactoryUsingString() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     FactoryFromDecimalString result = m.readValue("\"12.57\"", FactoryFromDecimalString.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(12, result._value); [EOL] }
public void testViaFactoryUsingString() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     FactoryFromDecimalString result = m.readValue("\"12.57\"", FactoryFromDecimalString.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(12, result._value); [EOL] }
public void testViaFactoryUsingString() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     FactoryFromDecimalString result = m.readValue("\"12.57\"", FactoryFromDecimalString.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(12, result._value); [EOL] }
public void testViaFactoryUsingString() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     FactoryFromDecimalString result = m.readValue("\"12.57\"", FactoryFromDecimalString.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(12, result._value); [EOL] }
public void testViaFactoryUsingString() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     FactoryFromDecimalString result = m.readValue("\"12.57\"", FactoryFromDecimalString.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(12, result._value); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
public void testKeyViaCtor() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<KeyTypeCtor, Integer> map = mapper.readValue("{\"a\":123}", TypeFactory.defaultInstance().constructMapType(HashMap.class, KeyTypeCtor.class, Integer.class)); [EOL]     assertEquals(1, map.size()); [EOL]     Map.Entry<?, ?> entry = map.entrySet().iterator().next(); [EOL]     assertEquals(Integer.valueOf(123), entry.getValue()); [EOL]     Object key = entry.getKey(); [EOL]     assertEquals(KeyTypeCtor.class, key.getClass()); [EOL]     assertEquals("a", ((KeyTypeCtor) key).value); [EOL] }
public void testKeyViaCtor() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<KeyTypeCtor, Integer> map = mapper.readValue("{\"a\":123}", TypeFactory.defaultInstance().constructMapType(HashMap.class, KeyTypeCtor.class, Integer.class)); [EOL]     assertEquals(1, map.size()); [EOL]     Map.Entry<?, ?> entry = map.entrySet().iterator().next(); [EOL]     assertEquals(Integer.valueOf(123), entry.getValue()); [EOL]     Object key = entry.getKey(); [EOL]     assertEquals(KeyTypeCtor.class, key.getClass()); [EOL]     assertEquals("a", ((KeyTypeCtor) key).value); [EOL] }
public void testKeyViaCtor() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<KeyTypeCtor, Integer> map = mapper.readValue("{\"a\":123}", TypeFactory.defaultInstance().constructMapType(HashMap.class, KeyTypeCtor.class, Integer.class)); [EOL]     assertEquals(1, map.size()); [EOL]     Map.Entry<?, ?> entry = map.entrySet().iterator().next(); [EOL]     assertEquals(Integer.valueOf(123), entry.getValue()); [EOL]     Object key = entry.getKey(); [EOL]     assertEquals(KeyTypeCtor.class, key.getClass()); [EOL]     assertEquals("a", ((KeyTypeCtor) key).value); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testFromMap() throws Exception { [EOL]     LinkedHashMap<String, Object> doc = new LinkedHashMap<String, Object>(); [EOL]     JsonFactory f = new JsonFactory(); [EOL]     doc.put("a1", "\"text\""); [EOL]     doc.put("int", Integer.valueOf(137)); [EOL]     doc.put("foo bar", Long.valueOf(1234567890L)); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int i = 0; i < 3; ++i) { [EOL]         String str = mapper.writeValueAsString(doc); [EOL]         JsonParser jp = f.createParser(str); [EOL]         assertEquals(JsonToken.START_OBJECT, jp.nextToken()); [EOL]         assertEquals(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]         assertEquals("a1", getAndVerifyText(jp)); [EOL]         assertEquals(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]         assertEquals("\"text\"", getAndVerifyText(jp)); [EOL]         assertEquals(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]         assertEquals("int", getAndVerifyText(jp)); [EOL]         assertEquals(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]         assertEquals(137, jp.getIntValue()); [EOL]         assertEquals(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]         assertEquals("foo bar", getAndVerifyText(jp)); [EOL]         assertEquals(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]         assertEquals(1234567890L, jp.getLongValue()); [EOL]         assertEquals(JsonToken.END_OBJECT, jp.nextToken()); [EOL]         assertNull(jp.nextToken()); [EOL]     } [EOL] }
public void testKeyViaCtor() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<KeyTypeCtor, Integer> map = mapper.readValue("{\"a\":123}", TypeFactory.defaultInstance().constructMapType(HashMap.class, KeyTypeCtor.class, Integer.class)); [EOL]     assertEquals(1, map.size()); [EOL]     Map.Entry<?, ?> entry = map.entrySet().iterator().next(); [EOL]     assertEquals(Integer.valueOf(123), entry.getValue()); [EOL]     Object key = entry.getKey(); [EOL]     assertEquals(KeyTypeCtor.class, key.getClass()); [EOL]     assertEquals("a", ((KeyTypeCtor) key).value); [EOL] }
public void testKeyViaCtor() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<KeyTypeCtor, Integer> map = mapper.readValue("{\"a\":123}", TypeFactory.defaultInstance().constructMapType(HashMap.class, KeyTypeCtor.class, Integer.class)); [EOL]     assertEquals(1, map.size()); [EOL]     Map.Entry<?, ?> entry = map.entrySet().iterator().next(); [EOL]     assertEquals(Integer.valueOf(123), entry.getValue()); [EOL]     Object key = entry.getKey(); [EOL]     assertEquals(KeyTypeCtor.class, key.getClass()); [EOL]     assertEquals("a", ((KeyTypeCtor) key).value); [EOL] }
public void testJackson430() throws Exception { [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.setSerializerFactory(new CustomJsonSerializerFactory()); [EOL]     MyClass mc = new MyClass(); [EOL]     mc.params.add(new MyParam<Integer>(1)); [EOL]     String str = om.writeValueAsString(mc); [EOL]     MyClass mc2 = om.readValue(str, MyClass.class); [EOL]     assertNotNull(mc2); [EOL]     assertNotNull(mc2.params); [EOL]     assertEquals(1, mc2.params.size()); [EOL] }
public void testJackson430() throws Exception { [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.setSerializerFactory(new CustomJsonSerializerFactory()); [EOL]     MyClass mc = new MyClass(); [EOL]     mc.params.add(new MyParam<Integer>(1)); [EOL]     String str = om.writeValueAsString(mc); [EOL]     MyClass mc2 = om.readValue(str, MyClass.class); [EOL]     assertNotNull(mc2); [EOL]     assertNotNull(mc2.params); [EOL]     assertEquals(1, mc2.params.size()); [EOL] }
public void testJackson430() throws Exception { [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.setSerializerFactory(new CustomJsonSerializerFactory()); [EOL]     MyClass mc = new MyClass(); [EOL]     mc.params.add(new MyParam<Integer>(1)); [EOL]     String str = om.writeValueAsString(mc); [EOL]     MyClass mc2 = om.readValue(str, MyClass.class); [EOL]     assertNotNull(mc2); [EOL]     assertNotNull(mc2.params); [EOL]     assertEquals(1, mc2.params.size()); [EOL] }
public void testJackson430() throws Exception { [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.setSerializerFactory(new CustomJsonSerializerFactory()); [EOL]     MyClass mc = new MyClass(); [EOL]     mc.params.add(new MyParam<Integer>(1)); [EOL]     String str = om.writeValueAsString(mc); [EOL]     MyClass mc2 = om.readValue(str, MyClass.class); [EOL]     assertNotNull(mc2); [EOL]     assertNotNull(mc2.params); [EOL]     assertEquals(1, mc2.params.size()); [EOL] }
public void testJackson430() throws Exception { [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.setSerializerFactory(new CustomJsonSerializerFactory()); [EOL]     MyClass mc = new MyClass(); [EOL]     mc.params.add(new MyParam<Integer>(1)); [EOL]     String str = om.writeValueAsString(mc); [EOL]     MyClass mc2 = om.readValue(str, MyClass.class); [EOL]     assertNotNull(mc2); [EOL]     assertNotNull(mc2.params); [EOL]     assertEquals(1, mc2.params.size()); [EOL] }
public void testJackson430() throws Exception { [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.setSerializerFactory(new CustomJsonSerializerFactory()); [EOL]     MyClass mc = new MyClass(); [EOL]     mc.params.add(new MyParam<Integer>(1)); [EOL]     String str = om.writeValueAsString(mc); [EOL]     MyClass mc2 = om.readValue(str, MyClass.class); [EOL]     assertNotNull(mc2); [EOL]     assertNotNull(mc2.params); [EOL]     assertEquals(1, mc2.params.size()); [EOL] }
public void testJackson430() throws Exception { [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.setSerializerFactory(new CustomJsonSerializerFactory()); [EOL]     MyClass mc = new MyClass(); [EOL]     mc.params.add(new MyParam<Integer>(1)); [EOL]     String str = om.writeValueAsString(mc); [EOL]     MyClass mc2 = om.readValue(str, MyClass.class); [EOL]     assertNotNull(mc2); [EOL]     assertNotNull(mc2.params); [EOL]     assertEquals(1, mc2.params.size()); [EOL] }
public void testJackson430() throws Exception { [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.setSerializerFactory(new CustomJsonSerializerFactory()); [EOL]     MyClass mc = new MyClass(); [EOL]     mc.params.add(new MyParam<Integer>(1)); [EOL]     String str = om.writeValueAsString(mc); [EOL]     MyClass mc2 = om.readValue(str, MyClass.class); [EOL]     assertNotNull(mc2); [EOL]     assertNotNull(mc2.params); [EOL]     assertEquals(1, mc2.params.size()); [EOL] }
public void testJackson430() throws Exception { [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.setSerializerFactory(new CustomJsonSerializerFactory()); [EOL]     MyClass mc = new MyClass(); [EOL]     mc.params.add(new MyParam<Integer>(1)); [EOL]     String str = om.writeValueAsString(mc); [EOL]     MyClass mc2 = om.readValue(str, MyClass.class); [EOL]     assertNotNull(mc2); [EOL]     assertNotNull(mc2.params); [EOL]     assertEquals(1, mc2.params.size()); [EOL] }
public void testJackson430() throws Exception { [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.setSerializerFactory(new CustomJsonSerializerFactory()); [EOL]     MyClass mc = new MyClass(); [EOL]     mc.params.add(new MyParam<Integer>(1)); [EOL]     String str = om.writeValueAsString(mc); [EOL]     MyClass mc2 = om.readValue(str, MyClass.class); [EOL]     assertNotNull(mc2); [EOL]     assertNotNull(mc2.params); [EOL]     assertEquals(1, mc2.params.size()); [EOL] }
public void testJackson430() throws Exception { [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.setSerializerFactory(new CustomJsonSerializerFactory()); [EOL]     MyClass mc = new MyClass(); [EOL]     mc.params.add(new MyParam<Integer>(1)); [EOL]     String str = om.writeValueAsString(mc); [EOL]     MyClass mc2 = om.readValue(str, MyClass.class); [EOL]     assertNotNull(mc2); [EOL]     assertNotNull(mc2.params); [EOL]     assertEquals(1, mc2.params.size()); [EOL] }
public void testJackson430() throws Exception { [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.setSerializerFactory(new CustomJsonSerializerFactory()); [EOL]     MyClass mc = new MyClass(); [EOL]     mc.params.add(new MyParam<Integer>(1)); [EOL]     String str = om.writeValueAsString(mc); [EOL]     MyClass mc2 = om.readValue(str, MyClass.class); [EOL]     assertNotNull(mc2); [EOL]     assertNotNull(mc2.params); [EOL]     assertEquals(1, mc2.params.size()); [EOL] }
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(NullNode.instance, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(NullNode.instance, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testSimpleKeyDeser() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addKeyDeserializer(String.class, new ContextualDeser("???")); [EOL]     mapper.registerModule(module); [EOL]     MapBean result = mapper.readValue("{\"map\":{\"a\":3}}", MapBean.class); [EOL]     Map<String, Integer> map = result.map; [EOL]     assertNotNull(map); [EOL]     assertEquals(1, map.size()); [EOL]     Map.Entry<String, Integer> entry = map.entrySet().iterator().next(); [EOL]     assertEquals(Integer.valueOf(3), entry.getValue()); [EOL]     assertEquals("map:a", entry.getKey()); [EOL] }
public void testSimpleKeyDeser() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addKeyDeserializer(String.class, new ContextualDeser("???")); [EOL]     mapper.registerModule(module); [EOL]     MapBean result = mapper.readValue("{\"map\":{\"a\":3}}", MapBean.class); [EOL]     Map<String, Integer> map = result.map; [EOL]     assertNotNull(map); [EOL]     assertEquals(1, map.size()); [EOL]     Map.Entry<String, Integer> entry = map.entrySet().iterator().next(); [EOL]     assertEquals(Integer.valueOf(3), entry.getValue()); [EOL]     assertEquals("map:a", entry.getKey()); [EOL] }
public void testSimpleKeyDeser() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addKeyDeserializer(String.class, new ContextualDeser("???")); [EOL]     mapper.registerModule(module); [EOL]     MapBean result = mapper.readValue("{\"map\":{\"a\":3}}", MapBean.class); [EOL]     Map<String, Integer> map = result.map; [EOL]     assertNotNull(map); [EOL]     assertEquals(1, map.size()); [EOL]     Map.Entry<String, Integer> entry = map.entrySet().iterator().next(); [EOL]     assertEquals(Integer.valueOf(3), entry.getValue()); [EOL]     assertEquals("map:a", entry.getKey()); [EOL] }
public void testSimpleKeyDeser() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addKeyDeserializer(String.class, new ContextualDeser("???")); [EOL]     mapper.registerModule(module); [EOL]     MapBean result = mapper.readValue("{\"map\":{\"a\":3}}", MapBean.class); [EOL]     Map<String, Integer> map = result.map; [EOL]     assertNotNull(map); [EOL]     assertEquals(1, map.size()); [EOL]     Map.Entry<String, Integer> entry = map.entrySet().iterator().next(); [EOL]     assertEquals(Integer.valueOf(3), entry.getValue()); [EOL]     assertEquals("map:a", entry.getKey()); [EOL] }
public void testSimpleKeyDeser() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addKeyDeserializer(String.class, new ContextualDeser("???")); [EOL]     mapper.registerModule(module); [EOL]     MapBean result = mapper.readValue("{\"map\":{\"a\":3}}", MapBean.class); [EOL]     Map<String, Integer> map = result.map; [EOL]     assertNotNull(map); [EOL]     assertEquals(1, map.size()); [EOL]     Map.Entry<String, Integer> entry = map.entrySet().iterator().next(); [EOL]     assertEquals(Integer.valueOf(3), entry.getValue()); [EOL]     assertEquals("map:a", entry.getKey()); [EOL] }
public void testAtomicReference() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String[] strs = new String[] { "abc" }; [EOL]     assertEquals("[\"abc\"]", serializeAsString(mapper, new AtomicReference<String[]>(strs))); [EOL] }
public void testAtomicReference() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String[] strs = new String[] { "abc" }; [EOL]     assertEquals("[\"abc\"]", serializeAsString(mapper, new AtomicReference<String[]>(strs))); [EOL] }
public void testAtomicReference() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String[] strs = new String[] { "abc" }; [EOL]     assertEquals("[\"abc\"]", serializeAsString(mapper, new AtomicReference<String[]>(strs))); [EOL] }
public void testWithObjectSimple() { [EOL]     ObjectNode root = mapper.createObjectNode(); [EOL]     root.put("a", 3); [EOL]     assertEquals(1, root.size()); [EOL]     ObjectNode copy = root.deepCopy(); [EOL]     assertEquals(1, copy.size()); [EOL]     root.put("b", 7); [EOL]     assertEquals(2, root.size()); [EOL]     assertEquals(1, copy.size()); [EOL]     copy.put("c", 3); [EOL]     assertEquals(2, root.size()); [EOL]     assertEquals(2, copy.size()); [EOL] }
public void testWithObjectSimple() { [EOL]     ObjectNode root = mapper.createObjectNode(); [EOL]     root.put("a", 3); [EOL]     assertEquals(1, root.size()); [EOL]     ObjectNode copy = root.deepCopy(); [EOL]     assertEquals(1, copy.size()); [EOL]     root.put("b", 7); [EOL]     assertEquals(2, root.size()); [EOL]     assertEquals(1, copy.size()); [EOL]     copy.put("c", 3); [EOL]     assertEquals(2, root.size()); [EOL]     assertEquals(2, copy.size()); [EOL] }
public void testFromMap() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ObjectNode root = mapper.createObjectNode(); [EOL]     root.put(FIELD4, TEXT2); [EOL]     root.put(FIELD3, -1); [EOL]     root.putArray(FIELD2); [EOL]     root.put(FIELD1, DOUBLE_VALUE); [EOL]     for (int i = 0; i < 2; ++i) { [EOL]         StringWriter sw = new StringWriter(); [EOL]         if (i == 0) { [EOL]             JsonGenerator gen = new JsonFactory().createGenerator(sw); [EOL]             root.serialize(gen, null); [EOL]             gen.close(); [EOL]         } else { [EOL]             mapper.writeValue(sw, root); [EOL]         } [EOL]         verifyFromMap(sw.toString()); [EOL]     } [EOL]     verifyFromMap(root.toString()); [EOL] }
public void testIssue709() throws Exception { [EOL]     byte[] inputData = new byte[] { 1, 2, 3 }; [EOL]     ObjectNode node = MAPPER.createObjectNode(); [EOL]     node.put("data", inputData); [EOL]     Issue709Bean result = MAPPER.treeToValue(node, Issue709Bean.class); [EOL]     String json = MAPPER.writeValueAsString(node); [EOL]     Issue709Bean resultFromString = MAPPER.readValue(json, Issue709Bean.class); [EOL]     Issue709Bean resultFromConvert = MAPPER.convertValue(node, Issue709Bean.class); [EOL]     Assert.assertArrayEquals(inputData, resultFromString.data); [EOL]     Assert.assertArrayEquals(inputData, resultFromConvert.data); [EOL]     Assert.assertArrayEquals(inputData, result.data); [EOL] }
public void testIssue709() throws Exception { [EOL]     byte[] inputData = new byte[] { 1, 2, 3 }; [EOL]     ObjectNode node = MAPPER.createObjectNode(); [EOL]     node.put("data", inputData); [EOL]     Issue709Bean result = MAPPER.treeToValue(node, Issue709Bean.class); [EOL]     String json = MAPPER.writeValueAsString(node); [EOL]     Issue709Bean resultFromString = MAPPER.readValue(json, Issue709Bean.class); [EOL]     Issue709Bean resultFromConvert = MAPPER.convertValue(node, Issue709Bean.class); [EOL]     Assert.assertArrayEquals(inputData, resultFromString.data); [EOL]     Assert.assertArrayEquals(inputData, resultFromConvert.data); [EOL]     Assert.assertArrayEquals(inputData, result.data); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSimpleStringGetter() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String value = "abc"; [EOL]     String result = m.writeValueAsString(new ClassGetter<String>(value)); [EOL]     String expected = String.format("{\"nonRaw\":\"%s\",\"raw\":%s,\"value\":%s}", value, value, value); [EOL]     assertEquals(expected, result); [EOL] }
public void testSimpleStringGetter() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String value = "abc"; [EOL]     String result = m.writeValueAsString(new ClassGetter<String>(value)); [EOL]     String expected = String.format("{\"nonRaw\":\"%s\",\"raw\":%s,\"value\":%s}", value, value, value); [EOL]     assertEquals(expected, result); [EOL] }
public void testCopy() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertTrue(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     m.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     ObjectMapper m2 = m.copy(); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     m2.enable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES); [EOL]     assertTrue(m2.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     m.enable(DeserializationFeature.UNWRAP_ROOT_VALUE); [EOL]     assertTrue(m.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertNotSame(m.getFactory(), m2.getFactory()); [EOL]     assertEquals(0, m.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m.getDeserializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getDeserializationConfig().mixInCount()); [EOL]     m.addMixInAnnotations(String.class, Integer.class); [EOL]     assertEquals(1, m.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getSerializationConfig().mixInCount()); [EOL]     assertEquals(1, m.getDeserializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getDeserializationConfig().mixInCount()); [EOL] }
public void testWithObjectSimple() { [EOL]     ObjectNode root = mapper.createObjectNode(); [EOL]     root.put("a", 3); [EOL]     assertEquals(1, root.size()); [EOL]     ObjectNode copy = root.deepCopy(); [EOL]     assertEquals(1, copy.size()); [EOL]     root.put("b", 7); [EOL]     assertEquals(2, root.size()); [EOL]     assertEquals(1, copy.size()); [EOL]     copy.put("c", 3); [EOL]     assertEquals(2, root.size()); [EOL]     assertEquals(2, copy.size()); [EOL] }
public void testWithObjectSimple() { [EOL]     ObjectNode root = mapper.createObjectNode(); [EOL]     root.put("a", 3); [EOL]     assertEquals(1, root.size()); [EOL]     ObjectNode copy = root.deepCopy(); [EOL]     assertEquals(1, copy.size()); [EOL]     root.put("b", 7); [EOL]     assertEquals(2, root.size()); [EOL]     assertEquals(1, copy.size()); [EOL]     copy.put("c", 3); [EOL]     assertEquals(2, root.size()); [EOL]     assertEquals(2, copy.size()); [EOL] }
public void testWithObjectSimple() { [EOL]     ObjectNode root = mapper.createObjectNode(); [EOL]     root.put("a", 3); [EOL]     assertEquals(1, root.size()); [EOL]     ObjectNode copy = root.deepCopy(); [EOL]     assertEquals(1, copy.size()); [EOL]     root.put("b", 7); [EOL]     assertEquals(2, root.size()); [EOL]     assertEquals(1, copy.size()); [EOL]     copy.put("c", 3); [EOL]     assertEquals(2, root.size()); [EOL]     assertEquals(2, copy.size()); [EOL] }
public void testInt() { [EOL]     IntNode n = IntNode.valueOf(1); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, n.numberType()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(IntNode.valueOf(0).canConvertToInt()); [EOL]     assertTrue(IntNode.valueOf(Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(IntNode.valueOf(Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(IntNode.valueOf(0).canConvertToLong()); [EOL]     assertTrue(IntNode.valueOf(Integer.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(IntNode.valueOf(Integer.MIN_VALUE).canConvertToLong()); [EOL] }
public void testInt() { [EOL]     IntNode n = IntNode.valueOf(1); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, n.numberType()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(IntNode.valueOf(0).canConvertToInt()); [EOL]     assertTrue(IntNode.valueOf(Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(IntNode.valueOf(Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(IntNode.valueOf(0).canConvertToLong()); [EOL]     assertTrue(IntNode.valueOf(Integer.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(IntNode.valueOf(Integer.MIN_VALUE).canConvertToLong()); [EOL] }
public void testInt() { [EOL]     IntNode n = IntNode.valueOf(1); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, n.numberType()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(IntNode.valueOf(0).canConvertToInt()); [EOL]     assertTrue(IntNode.valueOf(Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(IntNode.valueOf(Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(IntNode.valueOf(0).canConvertToLong()); [EOL]     assertTrue(IntNode.valueOf(Integer.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(IntNode.valueOf(Integer.MIN_VALUE).canConvertToLong()); [EOL] }
public void testInt() { [EOL]     IntNode n = IntNode.valueOf(1); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, n.numberType()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(IntNode.valueOf(0).canConvertToInt()); [EOL]     assertTrue(IntNode.valueOf(Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(IntNode.valueOf(Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(IntNode.valueOf(0).canConvertToLong()); [EOL]     assertTrue(IntNode.valueOf(Integer.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(IntNode.valueOf(Integer.MIN_VALUE).canConvertToLong()); [EOL] }
public void testInt() { [EOL]     IntNode n = IntNode.valueOf(1); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, n.numberType()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(IntNode.valueOf(0).canConvertToInt()); [EOL]     assertTrue(IntNode.valueOf(Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(IntNode.valueOf(Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(IntNode.valueOf(0).canConvertToLong()); [EOL]     assertTrue(IntNode.valueOf(Integer.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(IntNode.valueOf(Integer.MIN_VALUE).canConvertToLong()); [EOL] }
public void testInt() { [EOL]     IntNode n = IntNode.valueOf(1); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, n.numberType()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(IntNode.valueOf(0).canConvertToInt()); [EOL]     assertTrue(IntNode.valueOf(Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(IntNode.valueOf(Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(IntNode.valueOf(0).canConvertToLong()); [EOL]     assertTrue(IntNode.valueOf(Integer.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(IntNode.valueOf(Integer.MIN_VALUE).canConvertToLong()); [EOL] }
public void testSpecialMap() throws IOException { [EOL]     final ObjectWrapperMap map = MAPPER.readValue(UNTYPED_MAP_JSON, ObjectWrapperMap.class); [EOL]     _doTestUntyped(map); [EOL] }
public void testSpecialMap() throws IOException { [EOL]     final ObjectWrapperMap map = MAPPER.readValue(UNTYPED_MAP_JSON, ObjectWrapperMap.class); [EOL]     _doTestUntyped(map); [EOL] }
public void testSpecialMap() throws IOException { [EOL]     final ObjectWrapperMap map = MAPPER.readValue(UNTYPED_MAP_JSON, ObjectWrapperMap.class); [EOL]     _doTestUntyped(map); [EOL] }
public void testNoArgsFactory() throws Exception { [EOL]     NoArgFactoryBean value = MAPPER.readValue("{\"y\":13}", NoArgFactoryBean.class); [EOL]     assertEquals(13, value.y); [EOL]     assertEquals(123, value.x); [EOL] }
public void testNoArgsFactory() throws Exception { [EOL]     NoArgFactoryBean value = MAPPER.readValue("{\"y\":13}", NoArgFactoryBean.class); [EOL]     assertEquals(13, value.y); [EOL]     assertEquals(123, value.x); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testFromIntFactory() throws Exception { [EOL]     FactoryValueBean result = MAPPER.readValue("13", FactoryValueBean.class); [EOL]     assertEquals("13", result.toString()); [EOL] }
public void testFromIntFactory() throws Exception { [EOL]     FactoryValueBean result = MAPPER.readValue("13", FactoryValueBean.class); [EOL]     assertEquals("13", result.toString()); [EOL] }
public void testFromIntFactory() throws Exception { [EOL]     FactoryValueBean result = MAPPER.readValue("13", FactoryValueBean.class); [EOL]     assertEquals("13", result.toString()); [EOL] }
public void testSpecialMap() throws IOException { [EOL]     final ObjectWrapperMap map = MAPPER.readValue(UNTYPED_MAP_JSON, ObjectWrapperMap.class); [EOL]     _doTestUntyped(map); [EOL] }
public void testSpecialMap() throws IOException { [EOL]     final ObjectWrapperMap map = MAPPER.readValue(UNTYPED_MAP_JSON, ObjectWrapperMap.class); [EOL]     _doTestUntyped(map); [EOL] }
public void testSpecialMap() throws IOException { [EOL]     final ObjectWrapperMap map = MAPPER.readValue(UNTYPED_MAP_JSON, ObjectWrapperMap.class); [EOL]     _doTestUntyped(map); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testBrokenConstructor() throws Exception { [EOL]     try { [EOL]         MAPPER.readValue("{ \"x\" : 42 }", BrokenBean.class); [EOL]     } catch (JsonMappingException je) { [EOL]         verifyException(je, "has no property name"); [EOL]     } [EOL] }
public void testBrokenConstructor() throws Exception { [EOL]     try { [EOL]         MAPPER.readValue("{ \"x\" : 42 }", BrokenBean.class); [EOL]     } catch (JsonMappingException je) { [EOL]         verifyException(je, "has no property name"); [EOL]     } [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testDelegating() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addDeserializer(Immutable.class, new StdDelegatingDeserializer<Immutable>(new StdConverter<JsonNode, Immutable>() { [EOL]  [EOL]         @Override [EOL]         public Immutable convert(JsonNode value) { [EOL]             int x = value.path("x").asInt(); [EOL]             int y = value.path("y").asInt(); [EOL]             return new Immutable(x, y); [EOL]         } [EOL]     })); [EOL]     mapper.registerModule(module); [EOL]     Immutable imm = mapper.readValue("{\"x\":3,\"y\":7}", Immutable.class); [EOL]     assertEquals(3, imm.x); [EOL]     assertEquals(7, imm.y); [EOL] }
public void testDelegating() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addDeserializer(Immutable.class, new StdDelegatingDeserializer<Immutable>(new StdConverter<JsonNode, Immutable>() { [EOL]  [EOL]         @Override [EOL]         public Immutable convert(JsonNode value) { [EOL]             int x = value.path("x").asInt(); [EOL]             int y = value.path("y").asInt(); [EOL]             return new Immutable(x, y); [EOL]         } [EOL]     })); [EOL]     mapper.registerModule(module); [EOL]     Immutable imm = mapper.readValue("{\"x\":3,\"y\":7}", Immutable.class); [EOL]     assertEquals(3, imm.x); [EOL]     assertEquals(7, imm.y); [EOL] }
public void testDelegating() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addDeserializer(Immutable.class, new StdDelegatingDeserializer<Immutable>(new StdConverter<JsonNode, Immutable>() { [EOL]  [EOL]         @Override [EOL]         public Immutable convert(JsonNode value) { [EOL]             int x = value.path("x").asInt(); [EOL]             int y = value.path("y").asInt(); [EOL]             return new Immutable(x, y); [EOL]         } [EOL]     })); [EOL]     mapper.registerModule(module); [EOL]     Immutable imm = mapper.readValue("{\"x\":3,\"y\":7}", Immutable.class); [EOL]     assertEquals(3, imm.x); [EOL]     assertEquals(7, imm.y); [EOL] }
public void testDecimalNode() throws Exception { [EOL]     DecimalNode n = DecimalNode.valueOf(BigDecimal.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new DecimalNode(BigDecimal.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_FLOAT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_DECIMAL, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertFalse(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigDecimal()); [EOL]     assertEquals(BigDecimal.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToLong()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testDecimalNode() throws Exception { [EOL]     DecimalNode n = DecimalNode.valueOf(BigDecimal.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new DecimalNode(BigDecimal.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_FLOAT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_DECIMAL, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertFalse(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigDecimal()); [EOL]     assertEquals(BigDecimal.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToLong()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testDecimalNode() throws Exception { [EOL]     DecimalNode n = DecimalNode.valueOf(BigDecimal.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new DecimalNode(BigDecimal.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_FLOAT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_DECIMAL, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertFalse(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigDecimal()); [EOL]     assertEquals(BigDecimal.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToLong()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testDecimalNode() throws Exception { [EOL]     DecimalNode n = DecimalNode.valueOf(BigDecimal.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new DecimalNode(BigDecimal.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_FLOAT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_DECIMAL, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertFalse(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigDecimal()); [EOL]     assertEquals(BigDecimal.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToLong()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testDecimalNode() throws Exception { [EOL]     DecimalNode n = DecimalNode.valueOf(BigDecimal.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new DecimalNode(BigDecimal.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_FLOAT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_DECIMAL, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertFalse(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigDecimal()); [EOL]     assertEquals(BigDecimal.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToLong()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testDecimalNode() throws Exception { [EOL]     DecimalNode n = DecimalNode.valueOf(BigDecimal.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new DecimalNode(BigDecimal.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_FLOAT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_DECIMAL, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertFalse(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigDecimal()); [EOL]     assertEquals(BigDecimal.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToLong()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testDecimalNode() throws Exception { [EOL]     DecimalNode n = DecimalNode.valueOf(BigDecimal.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new DecimalNode(BigDecimal.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_FLOAT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_DECIMAL, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertFalse(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigDecimal()); [EOL]     assertEquals(BigDecimal.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToLong()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testDecimalNode() throws Exception { [EOL]     DecimalNode n = DecimalNode.valueOf(BigDecimal.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new DecimalNode(BigDecimal.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_FLOAT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_DECIMAL, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertFalse(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigDecimal()); [EOL]     assertEquals(BigDecimal.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToLong()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testDecimalNode() throws Exception { [EOL]     DecimalNode n = DecimalNode.valueOf(BigDecimal.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new DecimalNode(BigDecimal.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_FLOAT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_DECIMAL, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertFalse(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigDecimal()); [EOL]     assertEquals(BigDecimal.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToLong()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testDecimalNode() throws Exception { [EOL]     DecimalNode n = DecimalNode.valueOf(BigDecimal.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new DecimalNode(BigDecimal.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_FLOAT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_DECIMAL, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertFalse(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigDecimal()); [EOL]     assertEquals(BigDecimal.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToLong()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testDecimalNode() throws Exception { [EOL]     DecimalNode n = DecimalNode.valueOf(BigDecimal.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new DecimalNode(BigDecimal.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_FLOAT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_DECIMAL, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertFalse(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigDecimal()); [EOL]     assertEquals(BigDecimal.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToLong()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testDecimalNode() throws Exception { [EOL]     DecimalNode n = DecimalNode.valueOf(BigDecimal.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new DecimalNode(BigDecimal.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_FLOAT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_DECIMAL, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertFalse(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigDecimal()); [EOL]     assertEquals(BigDecimal.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToLong()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testDecimalNode() throws Exception { [EOL]     DecimalNode n = DecimalNode.valueOf(BigDecimal.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new DecimalNode(BigDecimal.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_FLOAT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_DECIMAL, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertFalse(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigDecimal()); [EOL]     assertEquals(BigDecimal.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToLong()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testDecimalNode() throws Exception { [EOL]     DecimalNode n = DecimalNode.valueOf(BigDecimal.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new DecimalNode(BigDecimal.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_FLOAT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_DECIMAL, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertFalse(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigDecimal()); [EOL]     assertEquals(BigDecimal.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToLong()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testDecimalNode() throws Exception { [EOL]     DecimalNode n = DecimalNode.valueOf(BigDecimal.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new DecimalNode(BigDecimal.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_FLOAT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_DECIMAL, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertFalse(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigDecimal()); [EOL]     assertEquals(BigDecimal.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToLong()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testDecimalNode() throws Exception { [EOL]     DecimalNode n = DecimalNode.valueOf(BigDecimal.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new DecimalNode(BigDecimal.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_FLOAT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_DECIMAL, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertFalse(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigDecimal()); [EOL]     assertEquals(BigDecimal.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToLong()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testDecimalNode() throws Exception { [EOL]     DecimalNode n = DecimalNode.valueOf(BigDecimal.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new DecimalNode(BigDecimal.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_FLOAT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_DECIMAL, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertFalse(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigDecimal()); [EOL]     assertEquals(BigDecimal.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToLong()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testDecimalNode() throws Exception { [EOL]     DecimalNode n = DecimalNode.valueOf(BigDecimal.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new DecimalNode(BigDecimal.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_FLOAT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_DECIMAL, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertFalse(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigDecimal()); [EOL]     assertEquals(BigDecimal.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToLong()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testDecimalNode() throws Exception { [EOL]     DecimalNode n = DecimalNode.valueOf(BigDecimal.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new DecimalNode(BigDecimal.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_FLOAT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_DECIMAL, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertFalse(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigDecimal()); [EOL]     assertEquals(BigDecimal.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToLong()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testDecimalNode() throws Exception { [EOL]     DecimalNode n = DecimalNode.valueOf(BigDecimal.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new DecimalNode(BigDecimal.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_FLOAT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_DECIMAL, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertFalse(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigDecimal()); [EOL]     assertEquals(BigDecimal.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToLong()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testDecimalNode() throws Exception { [EOL]     DecimalNode n = DecimalNode.valueOf(BigDecimal.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new DecimalNode(BigDecimal.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_FLOAT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_DECIMAL, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertFalse(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigDecimal()); [EOL]     assertEquals(BigDecimal.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToLong()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testDecimalNode() throws Exception { [EOL]     DecimalNode n = DecimalNode.valueOf(BigDecimal.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new DecimalNode(BigDecimal.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_FLOAT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_DECIMAL, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertFalse(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigDecimal()); [EOL]     assertEquals(BigDecimal.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToLong()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testDecimalNode() throws Exception { [EOL]     DecimalNode n = DecimalNode.valueOf(BigDecimal.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new DecimalNode(BigDecimal.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_FLOAT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_DECIMAL, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertFalse(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigDecimal()); [EOL]     assertEquals(BigDecimal.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToLong()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testDecimalNode() throws Exception { [EOL]     DecimalNode n = DecimalNode.valueOf(BigDecimal.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new DecimalNode(BigDecimal.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_FLOAT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_DECIMAL, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertFalse(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigDecimal()); [EOL]     assertEquals(BigDecimal.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToLong()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testDecimalNode() throws Exception { [EOL]     DecimalNode n = DecimalNode.valueOf(BigDecimal.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new DecimalNode(BigDecimal.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_FLOAT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_DECIMAL, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertFalse(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigDecimal()); [EOL]     assertEquals(BigDecimal.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToLong()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testDecimalNode() throws Exception { [EOL]     DecimalNode n = DecimalNode.valueOf(BigDecimal.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new DecimalNode(BigDecimal.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_FLOAT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_DECIMAL, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertFalse(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigDecimal()); [EOL]     assertEquals(BigDecimal.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToLong()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testDecimalNode() throws Exception { [EOL]     DecimalNode n = DecimalNode.valueOf(BigDecimal.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new DecimalNode(BigDecimal.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_FLOAT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_DECIMAL, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertFalse(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigDecimal()); [EOL]     assertEquals(BigDecimal.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToLong()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testDecimalNode() throws Exception { [EOL]     DecimalNode n = DecimalNode.valueOf(BigDecimal.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new DecimalNode(BigDecimal.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_FLOAT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_DECIMAL, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertFalse(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigDecimal()); [EOL]     assertEquals(BigDecimal.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToLong()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testDecimalNode() throws Exception { [EOL]     DecimalNode n = DecimalNode.valueOf(BigDecimal.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new DecimalNode(BigDecimal.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_FLOAT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_DECIMAL, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertFalse(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigDecimal()); [EOL]     assertEquals(BigDecimal.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToLong()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testDecimalNode() throws Exception { [EOL]     DecimalNode n = DecimalNode.valueOf(BigDecimal.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new DecimalNode(BigDecimal.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_FLOAT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_DECIMAL, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertFalse(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigDecimal()); [EOL]     assertEquals(BigDecimal.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToLong()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testClassMixInsMidLevel() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Object> result; [EOL]     LeafClass bean = new LeafClass("xyz"); [EOL]     bean._c = "c2"; [EOL]     result = writeAndMap(mapper, bean); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("xyz", result.get("a")); [EOL]     assertEquals("c2", result.get("c")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.addMixInAnnotations(BaseClass.class, MixInAutoDetect.class); [EOL]     result = writeAndMap(mapper, bean); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("c2", result.get("c")); [EOL] }
public void testClassMixInsMidLevel() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Object> result; [EOL]     LeafClass bean = new LeafClass("xyz"); [EOL]     bean._c = "c2"; [EOL]     result = writeAndMap(mapper, bean); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("xyz", result.get("a")); [EOL]     assertEquals("c2", result.get("c")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.addMixInAnnotations(BaseClass.class, MixInAutoDetect.class); [EOL]     result = writeAndMap(mapper, bean); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("c2", result.get("c")); [EOL] }
public void testClassMixInsMidLevel() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Object> result; [EOL]     LeafClass bean = new LeafClass("xyz"); [EOL]     bean._c = "c2"; [EOL]     result = writeAndMap(mapper, bean); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("xyz", result.get("a")); [EOL]     assertEquals("c2", result.get("c")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.addMixInAnnotations(BaseClass.class, MixInAutoDetect.class); [EOL]     result = writeAndMap(mapper, bean); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("c2", result.get("c")); [EOL] }
public void testClassMixInsMidLevel() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Object> result; [EOL]     LeafClass bean = new LeafClass("xyz"); [EOL]     bean._c = "c2"; [EOL]     result = writeAndMap(mapper, bean); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("xyz", result.get("a")); [EOL]     assertEquals("c2", result.get("c")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.addMixInAnnotations(BaseClass.class, MixInAutoDetect.class); [EOL]     result = writeAndMap(mapper, bean); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("c2", result.get("c")); [EOL] }
public void testClassMixInsMidLevel() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Object> result; [EOL]     LeafClass bean = new LeafClass("xyz"); [EOL]     bean._c = "c2"; [EOL]     result = writeAndMap(mapper, bean); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("xyz", result.get("a")); [EOL]     assertEquals("c2", result.get("c")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.addMixInAnnotations(BaseClass.class, MixInAutoDetect.class); [EOL]     result = writeAndMap(mapper, bean); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("c2", result.get("c")); [EOL] }
public void testClassMixInsMidLevel() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Object> result; [EOL]     LeafClass bean = new LeafClass("xyz"); [EOL]     bean._c = "c2"; [EOL]     result = writeAndMap(mapper, bean); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("xyz", result.get("a")); [EOL]     assertEquals("c2", result.get("c")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.addMixInAnnotations(BaseClass.class, MixInAutoDetect.class); [EOL]     result = writeAndMap(mapper, bean); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("c2", result.get("c")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testJsonLocation() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonLocation loc = new JsonLocation("whatever", -1, -1, 100, 13); [EOL]     String ser = serializeAsString(m, loc); [EOL]     JsonLocation result = m.readValue(ser, JsonLocation.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(loc.getSourceRef(), result.getSourceRef()); [EOL]     assertEquals(loc.getByteOffset(), result.getByteOffset()); [EOL]     assertEquals(loc.getCharOffset(), result.getCharOffset()); [EOL]     assertEquals(loc.getColumnNr(), result.getColumnNr()); [EOL]     assertEquals(loc.getLineNr(), result.getLineNr()); [EOL] }
public void testJsonLocation() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonLocation loc = new JsonLocation("whatever", -1, -1, 100, 13); [EOL]     String ser = serializeAsString(m, loc); [EOL]     JsonLocation result = m.readValue(ser, JsonLocation.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(loc.getSourceRef(), result.getSourceRef()); [EOL]     assertEquals(loc.getByteOffset(), result.getByteOffset()); [EOL]     assertEquals(loc.getCharOffset(), result.getCharOffset()); [EOL]     assertEquals(loc.getColumnNr(), result.getColumnNr()); [EOL]     assertEquals(loc.getLineNr(), result.getLineNr()); [EOL] }
public void testJsonLocation() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonLocation loc = new JsonLocation("whatever", -1, -1, 100, 13); [EOL]     String ser = serializeAsString(m, loc); [EOL]     JsonLocation result = m.readValue(ser, JsonLocation.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(loc.getSourceRef(), result.getSourceRef()); [EOL]     assertEquals(loc.getByteOffset(), result.getByteOffset()); [EOL]     assertEquals(loc.getCharOffset(), result.getCharOffset()); [EOL]     assertEquals(loc.getColumnNr(), result.getColumnNr()); [EOL]     assertEquals(loc.getLineNr(), result.getLineNr()); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testKeyViaCtor() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<KeyTypeCtor, Integer> map = mapper.readValue("{\"a\":123}", TypeFactory.defaultInstance().constructMapType(HashMap.class, KeyTypeCtor.class, Integer.class)); [EOL]     assertEquals(1, map.size()); [EOL]     Map.Entry<?, ?> entry = map.entrySet().iterator().next(); [EOL]     assertEquals(Integer.valueOf(123), entry.getValue()); [EOL]     Object key = entry.getKey(); [EOL]     assertEquals(KeyTypeCtor.class, key.getClass()); [EOL]     assertEquals("a", ((KeyTypeCtor) key).value); [EOL] }
public void testKeyViaCtor() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<KeyTypeCtor, Integer> map = mapper.readValue("{\"a\":123}", TypeFactory.defaultInstance().constructMapType(HashMap.class, KeyTypeCtor.class, Integer.class)); [EOL]     assertEquals(1, map.size()); [EOL]     Map.Entry<?, ?> entry = map.entrySet().iterator().next(); [EOL]     assertEquals(Integer.valueOf(123), entry.getValue()); [EOL]     Object key = entry.getKey(); [EOL]     assertEquals(KeyTypeCtor.class, key.getClass()); [EOL]     assertEquals("a", ((KeyTypeCtor) key).value); [EOL] }
public void testKeyViaCtor() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<KeyTypeCtor, Integer> map = mapper.readValue("{\"a\":123}", TypeFactory.defaultInstance().constructMapType(HashMap.class, KeyTypeCtor.class, Integer.class)); [EOL]     assertEquals(1, map.size()); [EOL]     Map.Entry<?, ?> entry = map.entrySet().iterator().next(); [EOL]     assertEquals(Integer.valueOf(123), entry.getValue()); [EOL]     Object key = entry.getKey(); [EOL]     assertEquals(KeyTypeCtor.class, key.getClass()); [EOL]     assertEquals("a", ((KeyTypeCtor) key).value); [EOL] }
public void testKeyViaCtor() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<KeyTypeCtor, Integer> map = mapper.readValue("{\"a\":123}", TypeFactory.defaultInstance().constructMapType(HashMap.class, KeyTypeCtor.class, Integer.class)); [EOL]     assertEquals(1, map.size()); [EOL]     Map.Entry<?, ?> entry = map.entrySet().iterator().next(); [EOL]     assertEquals(Integer.valueOf(123), entry.getValue()); [EOL]     Object key = entry.getKey(); [EOL]     assertEquals(KeyTypeCtor.class, key.getClass()); [EOL]     assertEquals("a", ((KeyTypeCtor) key).value); [EOL] }
public void testSpecialMap() throws IOException { [EOL]     final ObjectWrapperMap map = MAPPER.readValue(UNTYPED_MAP_JSON, ObjectWrapperMap.class); [EOL]     _doTestUntyped(map); [EOL] }
public void testSpecialMap() throws IOException { [EOL]     final ObjectWrapperMap map = MAPPER.readValue(UNTYPED_MAP_JSON, ObjectWrapperMap.class); [EOL]     _doTestUntyped(map); [EOL] }
public void testSpecialMap() throws IOException { [EOL]     final ObjectWrapperMap map = MAPPER.readValue(UNTYPED_MAP_JSON, ObjectWrapperMap.class); [EOL]     _doTestUntyped(map); [EOL] }
public void testSpecialMap() throws IOException { [EOL]     final ObjectWrapperMap map = MAPPER.readValue(UNTYPED_MAP_JSON, ObjectWrapperMap.class); [EOL]     _doTestUntyped(map); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSpecialMap() throws IOException { [EOL]     final ObjectWrapperMap map = MAPPER.readValue(UNTYPED_MAP_JSON, ObjectWrapperMap.class); [EOL]     _doTestUntyped(map); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testSpecialMap() throws IOException { [EOL]     final ObjectWrapperMap map = MAPPER.readValue(UNTYPED_MAP_JSON, ObjectWrapperMap.class); [EOL]     _doTestUntyped(map); [EOL] }
public void testSpecialMap() throws IOException { [EOL]     final ObjectWrapperMap map = MAPPER.readValue(UNTYPED_MAP_JSON, ObjectWrapperMap.class); [EOL]     _doTestUntyped(map); [EOL] }
public void testSpecialMap() throws IOException { [EOL]     final ObjectWrapperMap map = MAPPER.readValue(UNTYPED_MAP_JSON, ObjectWrapperMap.class); [EOL]     _doTestUntyped(map); [EOL] }
public void testSpecialMap() throws IOException { [EOL]     final ObjectWrapperMap map = MAPPER.readValue(UNTYPED_MAP_JSON, ObjectWrapperMap.class); [EOL]     _doTestUntyped(map); [EOL] }
public void testSpecialMap() throws IOException { [EOL]     final ObjectWrapperMap map = MAPPER.readValue(UNTYPED_MAP_JSON, ObjectWrapperMap.class); [EOL]     _doTestUntyped(map); [EOL] }
public void testFromIntFactory() throws Exception { [EOL]     FactoryValueBean result = MAPPER.readValue("13", FactoryValueBean.class); [EOL]     assertEquals("13", result.toString()); [EOL] }
public void testFromIntFactory() throws Exception { [EOL]     FactoryValueBean result = MAPPER.readValue("13", FactoryValueBean.class); [EOL]     assertEquals("13", result.toString()); [EOL] }
public void testFromIntFactory() throws Exception { [EOL]     FactoryValueBean result = MAPPER.readValue("13", FactoryValueBean.class); [EOL]     assertEquals("13", result.toString()); [EOL] }
public void testFromIntFactory() throws Exception { [EOL]     FactoryValueBean result = MAPPER.readValue("13", FactoryValueBean.class); [EOL]     assertEquals("13", result.toString()); [EOL] }
public void testFromIntFactory() throws Exception { [EOL]     FactoryValueBean result = MAPPER.readValue("13", FactoryValueBean.class); [EOL]     assertEquals("13", result.toString()); [EOL] }
public void testSpecialMap() throws IOException { [EOL]     final ObjectWrapperMap map = MAPPER.readValue(UNTYPED_MAP_JSON, ObjectWrapperMap.class); [EOL]     _doTestUntyped(map); [EOL] }
public void testSpecialMap() throws IOException { [EOL]     final ObjectWrapperMap map = MAPPER.readValue(UNTYPED_MAP_JSON, ObjectWrapperMap.class); [EOL]     _doTestUntyped(map); [EOL] }
public void testPOJOFromEmptyString() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.readValue(quote(""), Bean.class); [EOL]         fail("Should not accept Empty String for POJO"); [EOL]     } catch (JsonProcessingException e) { [EOL]         verifyException(e, "from String value"); [EOL]     } [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true); [EOL]     Bean result = mapper.readValue(quote(""), Bean.class); [EOL]     assertNull(result); [EOL] }
public void testPOJOFromEmptyString() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.readValue(quote(""), Bean.class); [EOL]         fail("Should not accept Empty String for POJO"); [EOL]     } catch (JsonProcessingException e) { [EOL]         verifyException(e, "from String value"); [EOL]     } [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true); [EOL]     Bean result = mapper.readValue(quote(""), Bean.class); [EOL]     assertNull(result); [EOL] }
public void testPOJOFromEmptyString() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.readValue(quote(""), Bean.class); [EOL]         fail("Should not accept Empty String for POJO"); [EOL]     } catch (JsonProcessingException e) { [EOL]         verifyException(e, "from String value"); [EOL]     } [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true); [EOL]     Bean result = mapper.readValue(quote(""), Bean.class); [EOL]     assertNull(result); [EOL] }
public void testPOJOFromEmptyString() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.readValue(quote(""), Bean.class); [EOL]         fail("Should not accept Empty String for POJO"); [EOL]     } catch (JsonProcessingException e) { [EOL]         verifyException(e, "from String value"); [EOL]     } [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true); [EOL]     Bean result = mapper.readValue(quote(""), Bean.class); [EOL]     assertNull(result); [EOL] }
public void testCharArrays() throws IOException { [EOL]     char[] chars = new char[] { 'a', 'b', 'c' }; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertEquals(quote("abc"), m.writeValueAsString(chars)); [EOL]     m.configure(SerializationFeature.WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS, true); [EOL]     assertEquals("[\"a\",\"b\",\"c\"]", m.writeValueAsString(chars)); [EOL] }
public void testCharArrays() throws IOException { [EOL]     char[] chars = new char[] { 'a', 'b', 'c' }; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertEquals(quote("abc"), m.writeValueAsString(chars)); [EOL]     m.configure(SerializationFeature.WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS, true); [EOL]     assertEquals("[\"a\",\"b\",\"c\"]", m.writeValueAsString(chars)); [EOL] }
public void testCharArrays() throws IOException { [EOL]     char[] chars = new char[] { 'a', 'b', 'c' }; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertEquals(quote("abc"), m.writeValueAsString(chars)); [EOL]     m.configure(SerializationFeature.WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS, true); [EOL]     assertEquals("[\"a\",\"b\",\"c\"]", m.writeValueAsString(chars)); [EOL] }
public void testCharArrays() throws IOException { [EOL]     char[] chars = new char[] { 'a', 'b', 'c' }; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertEquals(quote("abc"), m.writeValueAsString(chars)); [EOL]     m.configure(SerializationFeature.WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS, true); [EOL]     assertEquals("[\"a\",\"b\",\"c\"]", m.writeValueAsString(chars)); [EOL] }
public void testCharArrays() throws IOException { [EOL]     char[] chars = new char[] { 'a', 'b', 'c' }; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertEquals(quote("abc"), m.writeValueAsString(chars)); [EOL]     m.configure(SerializationFeature.WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS, true); [EOL]     assertEquals("[\"a\",\"b\",\"c\"]", m.writeValueAsString(chars)); [EOL] }
public void testMixinMethodInheritance() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.addMixInAnnotations(Beano2.class, BeanoMixinSub2.class); [EOL]     Map<String, Object> result; [EOL]     result = writeAndMap(mapper, new Beano2()); [EOL]     assertEquals(2, result.size()); [EOL]     assertTrue(result.containsKey("id")); [EOL]     assertTrue(result.containsKey("name")); [EOL] }
public void testMixinMethodInheritance() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.addMixInAnnotations(Beano2.class, BeanoMixinSub2.class); [EOL]     Map<String, Object> result; [EOL]     result = writeAndMap(mapper, new Beano2()); [EOL]     assertEquals(2, result.size()); [EOL]     assertTrue(result.containsKey("id")); [EOL]     assertTrue(result.containsKey("name")); [EOL] }
public void testEnumPolymorphicSerializationTest() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     List<ITestType> testTypesList = new ArrayList<ITestType>(); [EOL]     testTypesList.add(ConcreteType.ONE); [EOL]     testTypesList.add(ConcreteType.TWO); [EOL]     ListContainer listContainer = new ListContainer(); [EOL]     listContainer.testTypes = testTypesList; [EOL]     String json = mapper.writeValueAsString(listContainer); [EOL]     listContainer = mapper.readValue(json, ListContainer.class); [EOL]     EnumMapContainer enumMapContainer = new EnumMapContainer(); [EOL]     EnumMap<KeyEnum, ITestType> testTypesMap = new EnumMap<KeyEnum, ITestType>(KeyEnum.class); [EOL]     testTypesMap.put(KeyEnum.A, ConcreteType.ONE); [EOL]     testTypesMap.put(KeyEnum.B, ConcreteType.TWO); [EOL]     enumMapContainer.testTypes = testTypesMap; [EOL]     json = mapper.writeValueAsString(enumMapContainer); [EOL]     enumMapContainer = mapper.readValue(json, EnumMapContainer.class); [EOL] }
public void testEnumPolymorphicSerializationTest() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     List<ITestType> testTypesList = new ArrayList<ITestType>(); [EOL]     testTypesList.add(ConcreteType.ONE); [EOL]     testTypesList.add(ConcreteType.TWO); [EOL]     ListContainer listContainer = new ListContainer(); [EOL]     listContainer.testTypes = testTypesList; [EOL]     String json = mapper.writeValueAsString(listContainer); [EOL]     listContainer = mapper.readValue(json, ListContainer.class); [EOL]     EnumMapContainer enumMapContainer = new EnumMapContainer(); [EOL]     EnumMap<KeyEnum, ITestType> testTypesMap = new EnumMap<KeyEnum, ITestType>(KeyEnum.class); [EOL]     testTypesMap.put(KeyEnum.A, ConcreteType.ONE); [EOL]     testTypesMap.put(KeyEnum.B, ConcreteType.TWO); [EOL]     enumMapContainer.testTypes = testTypesMap; [EOL]     json = mapper.writeValueAsString(enumMapContainer); [EOL]     enumMapContainer = mapper.readValue(json, EnumMapContainer.class); [EOL] }
public void testMixinMethodInheritance() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.addMixInAnnotations(Beano2.class, BeanoMixinSub2.class); [EOL]     Map<String, Object> result; [EOL]     result = writeAndMap(mapper, new Beano2()); [EOL]     assertEquals(2, result.size()); [EOL]     assertTrue(result.containsKey("id")); [EOL]     assertTrue(result.containsKey("name")); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testSelfReference() throws Exception { [EOL]     Bean selfRef = new Bean(null, "self-refs"); [EOL]     Bean first = new Bean(selfRef, "first"); [EOL]     selfRef.assignNext(selfRef); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Bean[] wrapper = new Bean[] { first }; [EOL]     try { [EOL]         writeAndMap(m, wrapper); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Direct self-reference leading to cycle"); [EOL]     } [EOL] }
public void testSelfReference() throws Exception { [EOL]     Bean selfRef = new Bean(null, "self-refs"); [EOL]     Bean first = new Bean(selfRef, "first"); [EOL]     selfRef.assignNext(selfRef); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Bean[] wrapper = new Bean[] { first }; [EOL]     try { [EOL]         writeAndMap(m, wrapper); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Direct self-reference leading to cycle"); [EOL]     } [EOL] }
public void testBeanAsObject() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String str = m.writeValueAsString(new Object[] { new StringBean("abc") }); [EOL]     _verifySerializationAsMap(str); [EOL]     Object ob = m.readValue(str, Object[].class); [EOL]     assertNotNull(ob); [EOL]     Object[] result = (Object[]) ob; [EOL]     assertNotNull(result[0]); [EOL]     assertEquals(StringBean.class, result[0].getClass()); [EOL]     assertEquals("abc", ((StringBean) result[0]).name); [EOL] }
public void testBeanAsObject() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String str = m.writeValueAsString(new Object[] { new StringBean("abc") }); [EOL]     _verifySerializationAsMap(str); [EOL]     Object ob = m.readValue(str, Object[].class); [EOL]     assertNotNull(ob); [EOL]     Object[] result = (Object[]) ob; [EOL]     assertNotNull(result[0]); [EOL]     assertEquals(StringBean.class, result[0].getClass()); [EOL]     assertEquals("abc", ((StringBean) result[0]).name); [EOL] }
public void testBeanAsObject() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String str = m.writeValueAsString(new Object[] { new StringBean("abc") }); [EOL]     _verifySerializationAsMap(str); [EOL]     Object ob = m.readValue(str, Object[].class); [EOL]     assertNotNull(ob); [EOL]     Object[] result = (Object[]) ob; [EOL]     assertNotNull(result[0]); [EOL]     assertEquals(StringBean.class, result[0].getClass()); [EOL]     assertEquals("abc", ((StringBean) result[0]).name); [EOL] }
public void testBeanAsObject() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String str = m.writeValueAsString(new Object[] { new StringBean("abc") }); [EOL]     _verifySerializationAsMap(str); [EOL]     Object ob = m.readValue(str, Object[].class); [EOL]     assertNotNull(ob); [EOL]     Object[] result = (Object[]) ob; [EOL]     assertNotNull(result[0]); [EOL]     assertEquals(StringBean.class, result[0].getClass()); [EOL]     assertEquals("abc", ((StringBean) result[0]).name); [EOL] }
public void testBeanAsObject() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String str = m.writeValueAsString(new Object[] { new StringBean("abc") }); [EOL]     _verifySerializationAsMap(str); [EOL]     Object ob = m.readValue(str, Object[].class); [EOL]     assertNotNull(ob); [EOL]     Object[] result = (Object[]) ob; [EOL]     assertNotNull(result[0]); [EOL]     assertEquals(StringBean.class, result[0].getClass()); [EOL]     assertEquals("abc", ((StringBean) result[0]).name); [EOL] }
public void testBeanAsObject() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String str = m.writeValueAsString(new Object[] { new StringBean("abc") }); [EOL]     _verifySerializationAsMap(str); [EOL]     Object ob = m.readValue(str, Object[].class); [EOL]     assertNotNull(ob); [EOL]     Object[] result = (Object[]) ob; [EOL]     assertNotNull(result[0]); [EOL]     assertEquals(StringBean.class, result[0].getClass()); [EOL]     assertEquals("abc", ((StringBean) result[0]).name); [EOL] }
public void testBeanAsObject() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String str = m.writeValueAsString(new Object[] { new StringBean("abc") }); [EOL]     _verifySerializationAsMap(str); [EOL]     Object ob = m.readValue(str, Object[].class); [EOL]     assertNotNull(ob); [EOL]     Object[] result = (Object[]) ob; [EOL]     assertNotNull(result[0]); [EOL]     assertEquals(StringBean.class, result[0].getClass()); [EOL]     assertEquals("abc", ((StringBean) result[0]).name); [EOL] }
public void testBeanAsObject() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String str = m.writeValueAsString(new Object[] { new StringBean("abc") }); [EOL]     _verifySerializationAsMap(str); [EOL]     Object ob = m.readValue(str, Object[].class); [EOL]     assertNotNull(ob); [EOL]     Object[] result = (Object[]) ob; [EOL]     assertNotNull(result[0]); [EOL]     assertEquals(StringBean.class, result[0].getClass()); [EOL]     assertEquals("abc", ((StringBean) result[0]).name); [EOL] }
public void testBeanAsObject() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String str = m.writeValueAsString(new Object[] { new StringBean("abc") }); [EOL]     _verifySerializationAsMap(str); [EOL]     Object ob = m.readValue(str, Object[].class); [EOL]     assertNotNull(ob); [EOL]     Object[] result = (Object[]) ob; [EOL]     assertNotNull(result[0]); [EOL]     assertEquals(StringBean.class, result[0].getClass()); [EOL]     assertEquals("abc", ((StringBean) result[0]).name); [EOL] }
public void testBeanAsObject() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String str = m.writeValueAsString(new Object[] { new StringBean("abc") }); [EOL]     _verifySerializationAsMap(str); [EOL]     Object ob = m.readValue(str, Object[].class); [EOL]     assertNotNull(ob); [EOL]     Object[] result = (Object[]) ob; [EOL]     assertNotNull(result[0]); [EOL]     assertEquals(StringBean.class, result[0].getClass()); [EOL]     assertEquals("abc", ((StringBean) result[0]).name); [EOL] }
public void testFromEmptyString() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true); [EOL]     assertNull(m.readValue(quote(""), Object[].class)); [EOL]     assertNull(m.readValue(quote(""), String[].class)); [EOL]     assertNull(m.readValue(quote(""), int[].class)); [EOL] }
public void testFromEmptyString() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true); [EOL]     assertNull(m.readValue(quote(""), Object[].class)); [EOL]     assertNull(m.readValue(quote(""), String[].class)); [EOL]     assertNull(m.readValue(quote(""), int[].class)); [EOL] }
public void testFromEmptyString() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true); [EOL]     assertNull(m.readValue(quote(""), Object[].class)); [EOL]     assertNull(m.readValue(quote(""), String[].class)); [EOL]     assertNull(m.readValue(quote(""), int[].class)); [EOL] }
public void testFromEmptyString() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true); [EOL]     assertNull(m.readValue(quote(""), Object[].class)); [EOL]     assertNull(m.readValue(quote(""), String[].class)); [EOL]     assertNull(m.readValue(quote(""), int[].class)); [EOL] }
public void testAnnotationsDisabled() throws Exception { [EOL]     assertTrue(MAPPER.isEnabled(MapperFeature.USE_ANNOTATIONS)); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, new AnnoBean()); [EOL]     assertEquals(2, result.size()); [EOL]     ObjectMapper m2 = new ObjectMapper(); [EOL]     m2.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     result = writeAndMap(m2, new AnnoBean()); [EOL]     assertEquals(1, result.size()); [EOL] }
public void testAnnotationsDisabled() throws Exception { [EOL]     assertTrue(MAPPER.isEnabled(MapperFeature.USE_ANNOTATIONS)); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, new AnnoBean()); [EOL]     assertEquals(2, result.size()); [EOL]     ObjectMapper m2 = new ObjectMapper(); [EOL]     m2.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     result = writeAndMap(m2, new AnnoBean()); [EOL]     assertEquals(1, result.size()); [EOL] }
public void testAnnotationsDisabled() throws Exception { [EOL]     assertTrue(MAPPER.isEnabled(MapperFeature.USE_ANNOTATIONS)); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, new AnnoBean()); [EOL]     assertEquals(2, result.size()); [EOL]     ObjectMapper m2 = new ObjectMapper(); [EOL]     m2.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     result = writeAndMap(m2, new AnnoBean()); [EOL]     assertEquals(1, result.size()); [EOL] }
public void testAnnotationsDisabled() throws Exception { [EOL]     assertTrue(MAPPER.isEnabled(MapperFeature.USE_ANNOTATIONS)); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, new AnnoBean()); [EOL]     assertEquals(2, result.size()); [EOL]     ObjectMapper m2 = new ObjectMapper(); [EOL]     m2.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     result = writeAndMap(m2, new AnnoBean()); [EOL]     assertEquals(1, result.size()); [EOL] }
public void testAnnotationsDisabled() throws Exception { [EOL]     assertTrue(MAPPER.isEnabled(MapperFeature.USE_ANNOTATIONS)); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, new AnnoBean()); [EOL]     assertEquals(2, result.size()); [EOL]     ObjectMapper m2 = new ObjectMapper(); [EOL]     m2.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     result = writeAndMap(m2, new AnnoBean()); [EOL]     assertEquals(1, result.size()); [EOL] }
public void testAnnotationsDisabled() throws Exception { [EOL]     assertTrue(MAPPER.isEnabled(MapperFeature.USE_ANNOTATIONS)); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, new AnnoBean()); [EOL]     assertEquals(2, result.size()); [EOL]     ObjectMapper m2 = new ObjectMapper(); [EOL]     m2.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     result = writeAndMap(m2, new AnnoBean()); [EOL]     assertEquals(1, result.size()); [EOL] }
public void testAnnotationsDisabled() throws Exception { [EOL]     assertTrue(MAPPER.isEnabled(MapperFeature.USE_ANNOTATIONS)); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, new AnnoBean()); [EOL]     assertEquals(2, result.size()); [EOL]     ObjectMapper m2 = new ObjectMapper(); [EOL]     m2.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     result = writeAndMap(m2, new AnnoBean()); [EOL]     assertEquals(1, result.size()); [EOL] }
public void testAnnotationsDisabled() throws Exception { [EOL]     assertTrue(MAPPER.isEnabled(MapperFeature.USE_ANNOTATIONS)); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, new AnnoBean()); [EOL]     assertEquals(2, result.size()); [EOL]     ObjectMapper m2 = new ObjectMapper(); [EOL]     m2.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     result = writeAndMap(m2, new AnnoBean()); [EOL]     assertEquals(1, result.size()); [EOL] }
public void testAnnotationsDisabled() throws Exception { [EOL]     assertTrue(MAPPER.isEnabled(MapperFeature.USE_ANNOTATIONS)); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, new AnnoBean()); [EOL]     assertEquals(2, result.size()); [EOL]     ObjectMapper m2 = new ObjectMapper(); [EOL]     m2.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     result = writeAndMap(m2, new AnnoBean()); [EOL]     assertEquals(1, result.size()); [EOL] }
public void testAnnotationsDisabled() throws Exception { [EOL]     assertTrue(MAPPER.isEnabled(MapperFeature.USE_ANNOTATIONS)); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, new AnnoBean()); [EOL]     assertEquals(2, result.size()); [EOL]     ObjectMapper m2 = new ObjectMapper(); [EOL]     m2.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     result = writeAndMap(m2, new AnnoBean()); [EOL]     assertEquals(1, result.size()); [EOL] }
public void testAnnotationsDisabled() throws Exception { [EOL]     assertTrue(MAPPER.isEnabled(MapperFeature.USE_ANNOTATIONS)); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, new AnnoBean()); [EOL]     assertEquals(2, result.size()); [EOL]     ObjectMapper m2 = new ObjectMapper(); [EOL]     m2.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     result = writeAndMap(m2, new AnnoBean()); [EOL]     assertEquals(1, result.size()); [EOL] }
public void testAnnotationsDisabled() throws Exception { [EOL]     assertTrue(MAPPER.isEnabled(MapperFeature.USE_ANNOTATIONS)); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, new AnnoBean()); [EOL]     assertEquals(2, result.size()); [EOL]     ObjectMapper m2 = new ObjectMapper(); [EOL]     m2.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     result = writeAndMap(m2, new AnnoBean()); [EOL]     assertEquals(1, result.size()); [EOL] }
public void testAnnotationsDisabled() throws Exception { [EOL]     assertTrue(MAPPER.isEnabled(MapperFeature.USE_ANNOTATIONS)); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, new AnnoBean()); [EOL]     assertEquals(2, result.size()); [EOL]     ObjectMapper m2 = new ObjectMapper(); [EOL]     m2.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     result = writeAndMap(m2, new AnnoBean()); [EOL]     assertEquals(1, result.size()); [EOL] }
public void testAnnotationsDisabled() throws Exception { [EOL]     assertTrue(MAPPER.isEnabled(MapperFeature.USE_ANNOTATIONS)); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, new AnnoBean()); [EOL]     assertEquals(2, result.size()); [EOL]     ObjectMapper m2 = new ObjectMapper(); [EOL]     m2.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     result = writeAndMap(m2, new AnnoBean()); [EOL]     assertEquals(1, result.size()); [EOL] }
public void testAnnotationsDisabled() throws Exception { [EOL]     assertTrue(MAPPER.isEnabled(MapperFeature.USE_ANNOTATIONS)); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, new AnnoBean()); [EOL]     assertEquals(2, result.size()); [EOL]     ObjectMapper m2 = new ObjectMapper(); [EOL]     m2.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     result = writeAndMap(m2, new AnnoBean()); [EOL]     assertEquals(1, result.size()); [EOL] }
public void testAnnotationsDisabled() throws Exception { [EOL]     assertTrue(MAPPER.isEnabled(MapperFeature.USE_ANNOTATIONS)); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, new AnnoBean()); [EOL]     assertEquals(2, result.size()); [EOL]     ObjectMapper m2 = new ObjectMapper(); [EOL]     m2.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     result = writeAndMap(m2, new AnnoBean()); [EOL]     assertEquals(1, result.size()); [EOL] }
public void testAnnotationsDisabled() throws Exception { [EOL]     assertTrue(MAPPER.isEnabled(MapperFeature.USE_ANNOTATIONS)); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, new AnnoBean()); [EOL]     assertEquals(2, result.size()); [EOL]     ObjectMapper m2 = new ObjectMapper(); [EOL]     m2.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     result = writeAndMap(m2, new AnnoBean()); [EOL]     assertEquals(1, result.size()); [EOL] }
public void testAnnotationsDisabled() throws Exception { [EOL]     assertTrue(MAPPER.isEnabled(MapperFeature.USE_ANNOTATIONS)); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, new AnnoBean()); [EOL]     assertEquals(2, result.size()); [EOL]     ObjectMapper m2 = new ObjectMapper(); [EOL]     m2.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     result = writeAndMap(m2, new AnnoBean()); [EOL]     assertEquals(1, result.size()); [EOL] }
public void testAnnotationsDisabled() throws Exception { [EOL]     assertTrue(MAPPER.isEnabled(MapperFeature.USE_ANNOTATIONS)); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, new AnnoBean()); [EOL]     assertEquals(2, result.size()); [EOL]     ObjectMapper m2 = new ObjectMapper(); [EOL]     m2.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     result = writeAndMap(m2, new AnnoBean()); [EOL]     assertEquals(1, result.size()); [EOL] }
public void testAnnotationsDisabled() throws Exception { [EOL]     assertTrue(MAPPER.isEnabled(MapperFeature.USE_ANNOTATIONS)); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, new AnnoBean()); [EOL]     assertEquals(2, result.size()); [EOL]     ObjectMapper m2 = new ObjectMapper(); [EOL]     m2.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     result = writeAndMap(m2, new AnnoBean()); [EOL]     assertEquals(1, result.size()); [EOL] }
public void testAnnotationsDisabled() throws Exception { [EOL]     assertTrue(MAPPER.isEnabled(MapperFeature.USE_ANNOTATIONS)); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, new AnnoBean()); [EOL]     assertEquals(2, result.size()); [EOL]     ObjectMapper m2 = new ObjectMapper(); [EOL]     m2.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     result = writeAndMap(m2, new AnnoBean()); [EOL]     assertEquals(1, result.size()); [EOL] }
public void testAnnotationsDisabled() throws Exception { [EOL]     assertTrue(MAPPER.isEnabled(MapperFeature.USE_ANNOTATIONS)); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, new AnnoBean()); [EOL]     assertEquals(2, result.size()); [EOL]     ObjectMapper m2 = new ObjectMapper(); [EOL]     m2.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     result = writeAndMap(m2, new AnnoBean()); [EOL]     assertEquals(1, result.size()); [EOL] }
public void testAnnotationsDisabled() throws Exception { [EOL]     assertTrue(MAPPER.isEnabled(MapperFeature.USE_ANNOTATIONS)); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, new AnnoBean()); [EOL]     assertEquals(2, result.size()); [EOL]     ObjectMapper m2 = new ObjectMapper(); [EOL]     m2.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     result = writeAndMap(m2, new AnnoBean()); [EOL]     assertEquals(1, result.size()); [EOL] }
public void testAnnotationsDisabled() throws Exception { [EOL]     assertTrue(MAPPER.isEnabled(MapperFeature.USE_ANNOTATIONS)); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, new AnnoBean()); [EOL]     assertEquals(2, result.size()); [EOL]     ObjectMapper m2 = new ObjectMapper(); [EOL]     m2.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     result = writeAndMap(m2, new AnnoBean()); [EOL]     assertEquals(1, result.size()); [EOL] }
public void testAnnotationsDisabled() throws Exception { [EOL]     assertTrue(MAPPER.isEnabled(MapperFeature.USE_ANNOTATIONS)); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, new AnnoBean()); [EOL]     assertEquals(2, result.size()); [EOL]     ObjectMapper m2 = new ObjectMapper(); [EOL]     m2.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     result = writeAndMap(m2, new AnnoBean()); [EOL]     assertEquals(1, result.size()); [EOL] }
public void testAnnotationsDisabled() throws Exception { [EOL]     assertTrue(MAPPER.isEnabled(MapperFeature.USE_ANNOTATIONS)); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, new AnnoBean()); [EOL]     assertEquals(2, result.size()); [EOL]     ObjectMapper m2 = new ObjectMapper(); [EOL]     m2.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     result = writeAndMap(m2, new AnnoBean()); [EOL]     assertEquals(1, result.size()); [EOL] }
public void testAnnotationsDisabled() throws Exception { [EOL]     assertTrue(MAPPER.isEnabled(MapperFeature.USE_ANNOTATIONS)); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, new AnnoBean()); [EOL]     assertEquals(2, result.size()); [EOL]     ObjectMapper m2 = new ObjectMapper(); [EOL]     m2.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     result = writeAndMap(m2, new AnnoBean()); [EOL]     assertEquals(1, result.size()); [EOL] }
public void testAnnotationsDisabled() throws Exception { [EOL]     assertTrue(MAPPER.isEnabled(MapperFeature.USE_ANNOTATIONS)); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, new AnnoBean()); [EOL]     assertEquals(2, result.size()); [EOL]     ObjectMapper m2 = new ObjectMapper(); [EOL]     m2.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     result = writeAndMap(m2, new AnnoBean()); [EOL]     assertEquals(1, result.size()); [EOL] }
public void testAnnotationsDisabled() throws Exception { [EOL]     assertTrue(MAPPER.isEnabled(MapperFeature.USE_ANNOTATIONS)); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, new AnnoBean()); [EOL]     assertEquals(2, result.size()); [EOL]     ObjectMapper m2 = new ObjectMapper(); [EOL]     m2.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     result = writeAndMap(m2, new AnnoBean()); [EOL]     assertEquals(1, result.size()); [EOL] }
public void testAnnotationsDisabled() throws Exception { [EOL]     assertTrue(MAPPER.isEnabled(MapperFeature.USE_ANNOTATIONS)); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, new AnnoBean()); [EOL]     assertEquals(2, result.size()); [EOL]     ObjectMapper m2 = new ObjectMapper(); [EOL]     m2.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     result = writeAndMap(m2, new AnnoBean()); [EOL]     assertEquals(1, result.size()); [EOL] }
public void testAnnotationsDisabled() throws Exception { [EOL]     assertTrue(MAPPER.isEnabled(MapperFeature.USE_ANNOTATIONS)); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, new AnnoBean()); [EOL]     assertEquals(2, result.size()); [EOL]     ObjectMapper m2 = new ObjectMapper(); [EOL]     m2.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     result = writeAndMap(m2, new AnnoBean()); [EOL]     assertEquals(1, result.size()); [EOL] }
public void testAnnotationsDisabled() throws Exception { [EOL]     assertTrue(MAPPER.isEnabled(MapperFeature.USE_ANNOTATIONS)); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, new AnnoBean()); [EOL]     assertEquals(2, result.size()); [EOL]     ObjectMapper m2 = new ObjectMapper(); [EOL]     m2.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     result = writeAndMap(m2, new AnnoBean()); [EOL]     assertEquals(1, result.size()); [EOL] }
public void testAnnotationsDisabled() throws Exception { [EOL]     assertTrue(MAPPER.isEnabled(MapperFeature.USE_ANNOTATIONS)); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, new AnnoBean()); [EOL]     assertEquals(2, result.size()); [EOL]     ObjectMapper m2 = new ObjectMapper(); [EOL]     m2.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     result = writeAndMap(m2, new AnnoBean()); [EOL]     assertEquals(1, result.size()); [EOL] }
public void testAnnotationsDisabled() throws Exception { [EOL]     assertTrue(MAPPER.isEnabled(MapperFeature.USE_ANNOTATIONS)); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, new AnnoBean()); [EOL]     assertEquals(2, result.size()); [EOL]     ObjectMapper m2 = new ObjectMapper(); [EOL]     m2.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     result = writeAndMap(m2, new AnnoBean()); [EOL]     assertEquals(1, result.size()); [EOL] }
public void testAnnotationsDisabled() throws Exception { [EOL]     assertTrue(MAPPER.isEnabled(MapperFeature.USE_ANNOTATIONS)); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, new AnnoBean()); [EOL]     assertEquals(2, result.size()); [EOL]     ObjectMapper m2 = new ObjectMapper(); [EOL]     m2.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     result = writeAndMap(m2, new AnnoBean()); [EOL]     assertEquals(1, result.size()); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testDeserializeNonNS() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int i = 0; i < 2; ++i) { [EOL]         Document doc; [EOL]         if (i == 0) { [EOL]             doc = mapper.readValue(quote(SIMPLE_XML), Document.class); [EOL]         } else { [EOL]             Node node = mapper.readValue(quote(SIMPLE_XML), Node.class); [EOL]             doc = (Document) node; [EOL]         } [EOL]         Element root = doc.getDocumentElement(); [EOL]         assertNotNull(root); [EOL]         assertEquals("root", root.getTagName()); [EOL]         assertEquals("3", root.getAttribute("attr")); [EOL]         assertEquals(1, root.getAttributes().getLength()); [EOL]         NodeList nodes = root.getChildNodes(); [EOL]         assertEquals(2, nodes.getLength()); [EOL]         Element leaf = (Element) nodes.item(0); [EOL]         assertEquals("leaf", leaf.getTagName()); [EOL]         assertEquals(0, leaf.getAttributes().getLength()); [EOL]         ProcessingInstruction pi = (ProcessingInstruction) nodes.item(1); [EOL]         assertEquals("proc", pi.getTarget()); [EOL]         assertEquals("instr", pi.getData()); [EOL]     } [EOL] }
public void testDeserializeNonNS() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int i = 0; i < 2; ++i) { [EOL]         Document doc; [EOL]         if (i == 0) { [EOL]             doc = mapper.readValue(quote(SIMPLE_XML), Document.class); [EOL]         } else { [EOL]             Node node = mapper.readValue(quote(SIMPLE_XML), Node.class); [EOL]             doc = (Document) node; [EOL]         } [EOL]         Element root = doc.getDocumentElement(); [EOL]         assertNotNull(root); [EOL]         assertEquals("root", root.getTagName()); [EOL]         assertEquals("3", root.getAttribute("attr")); [EOL]         assertEquals(1, root.getAttributes().getLength()); [EOL]         NodeList nodes = root.getChildNodes(); [EOL]         assertEquals(2, nodes.getLength()); [EOL]         Element leaf = (Element) nodes.item(0); [EOL]         assertEquals("leaf", leaf.getTagName()); [EOL]         assertEquals(0, leaf.getAttributes().getLength()); [EOL]         ProcessingInstruction pi = (ProcessingInstruction) nodes.item(1); [EOL]         assertEquals("proc", pi.getTarget()); [EOL]         assertEquals("instr", pi.getData()); [EOL]     } [EOL] }
public void testDeserializeNonNS() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int i = 0; i < 2; ++i) { [EOL]         Document doc; [EOL]         if (i == 0) { [EOL]             doc = mapper.readValue(quote(SIMPLE_XML), Document.class); [EOL]         } else { [EOL]             Node node = mapper.readValue(quote(SIMPLE_XML), Node.class); [EOL]             doc = (Document) node; [EOL]         } [EOL]         Element root = doc.getDocumentElement(); [EOL]         assertNotNull(root); [EOL]         assertEquals("root", root.getTagName()); [EOL]         assertEquals("3", root.getAttribute("attr")); [EOL]         assertEquals(1, root.getAttributes().getLength()); [EOL]         NodeList nodes = root.getChildNodes(); [EOL]         assertEquals(2, nodes.getLength()); [EOL]         Element leaf = (Element) nodes.item(0); [EOL]         assertEquals("leaf", leaf.getTagName()); [EOL]         assertEquals(0, leaf.getAttributes().getLength()); [EOL]         ProcessingInstruction pi = (ProcessingInstruction) nodes.item(1); [EOL]         assertEquals("proc", pi.getTarget()); [EOL]         assertEquals("instr", pi.getData()); [EOL]     } [EOL] }
public void testDeserializeNonNS() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int i = 0; i < 2; ++i) { [EOL]         Document doc; [EOL]         if (i == 0) { [EOL]             doc = mapper.readValue(quote(SIMPLE_XML), Document.class); [EOL]         } else { [EOL]             Node node = mapper.readValue(quote(SIMPLE_XML), Node.class); [EOL]             doc = (Document) node; [EOL]         } [EOL]         Element root = doc.getDocumentElement(); [EOL]         assertNotNull(root); [EOL]         assertEquals("root", root.getTagName()); [EOL]         assertEquals("3", root.getAttribute("attr")); [EOL]         assertEquals(1, root.getAttributes().getLength()); [EOL]         NodeList nodes = root.getChildNodes(); [EOL]         assertEquals(2, nodes.getLength()); [EOL]         Element leaf = (Element) nodes.item(0); [EOL]         assertEquals("leaf", leaf.getTagName()); [EOL]         assertEquals(0, leaf.getAttributes().getLength()); [EOL]         ProcessingInstruction pi = (ProcessingInstruction) nodes.item(1); [EOL]         assertEquals("proc", pi.getTarget()); [EOL]         assertEquals("instr", pi.getData()); [EOL]     } [EOL] }
public void testDeserializeNonNS() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int i = 0; i < 2; ++i) { [EOL]         Document doc; [EOL]         if (i == 0) { [EOL]             doc = mapper.readValue(quote(SIMPLE_XML), Document.class); [EOL]         } else { [EOL]             Node node = mapper.readValue(quote(SIMPLE_XML), Node.class); [EOL]             doc = (Document) node; [EOL]         } [EOL]         Element root = doc.getDocumentElement(); [EOL]         assertNotNull(root); [EOL]         assertEquals("root", root.getTagName()); [EOL]         assertEquals("3", root.getAttribute("attr")); [EOL]         assertEquals(1, root.getAttributes().getLength()); [EOL]         NodeList nodes = root.getChildNodes(); [EOL]         assertEquals(2, nodes.getLength()); [EOL]         Element leaf = (Element) nodes.item(0); [EOL]         assertEquals("leaf", leaf.getTagName()); [EOL]         assertEquals(0, leaf.getAttributes().getLength()); [EOL]         ProcessingInstruction pi = (ProcessingInstruction) nodes.item(1); [EOL]         assertEquals("proc", pi.getTarget()); [EOL]         assertEquals("instr", pi.getData()); [EOL]     } [EOL] }
public void testDeserializeNonNS() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int i = 0; i < 2; ++i) { [EOL]         Document doc; [EOL]         if (i == 0) { [EOL]             doc = mapper.readValue(quote(SIMPLE_XML), Document.class); [EOL]         } else { [EOL]             Node node = mapper.readValue(quote(SIMPLE_XML), Node.class); [EOL]             doc = (Document) node; [EOL]         } [EOL]         Element root = doc.getDocumentElement(); [EOL]         assertNotNull(root); [EOL]         assertEquals("root", root.getTagName()); [EOL]         assertEquals("3", root.getAttribute("attr")); [EOL]         assertEquals(1, root.getAttributes().getLength()); [EOL]         NodeList nodes = root.getChildNodes(); [EOL]         assertEquals(2, nodes.getLength()); [EOL]         Element leaf = (Element) nodes.item(0); [EOL]         assertEquals("leaf", leaf.getTagName()); [EOL]         assertEquals(0, leaf.getAttributes().getLength()); [EOL]         ProcessingInstruction pi = (ProcessingInstruction) nodes.item(1); [EOL]         assertEquals("proc", pi.getTarget()); [EOL]         assertEquals("instr", pi.getData()); [EOL]     } [EOL] }
public void testBoth() throws IOException { [EOL]     final ObjectMapper mapper = new ObjectMapper(); [EOL]     final String value1 = mapper.writeValueAsString(new NotKarlBean()); [EOL]     assertEquals("{\"map\":{\"Not Karl\":1}}", value1); [EOL]     final String value2 = mapper.writeValueAsString(new KarlBean()); [EOL]     assertEquals("{\"map\":{\"Karl\":1}}", value2); [EOL] }
public void testBoth() throws IOException { [EOL]     final ObjectMapper mapper = new ObjectMapper(); [EOL]     final String value1 = mapper.writeValueAsString(new NotKarlBean()); [EOL]     assertEquals("{\"map\":{\"Not Karl\":1}}", value1); [EOL]     final String value2 = mapper.writeValueAsString(new KarlBean()); [EOL]     assertEquals("{\"map\":{\"Karl\":1}}", value2); [EOL] }
public void testBoth() throws IOException { [EOL]     final ObjectMapper mapper = new ObjectMapper(); [EOL]     final String value1 = mapper.writeValueAsString(new NotKarlBean()); [EOL]     assertEquals("{\"map\":{\"Not Karl\":1}}", value1); [EOL]     final String value2 = mapper.writeValueAsString(new KarlBean()); [EOL]     assertEquals("{\"map\":{\"Karl\":1}}", value2); [EOL] }
public void testBoth() throws IOException { [EOL]     final ObjectMapper mapper = new ObjectMapper(); [EOL]     final String value1 = mapper.writeValueAsString(new NotKarlBean()); [EOL]     assertEquals("{\"map\":{\"Not Karl\":1}}", value1); [EOL]     final String value2 = mapper.writeValueAsString(new KarlBean()); [EOL]     assertEquals("{\"map\":{\"Karl\":1}}", value2); [EOL] }
public void testBoth() throws IOException { [EOL]     final ObjectMapper mapper = new ObjectMapper(); [EOL]     final String value1 = mapper.writeValueAsString(new NotKarlBean()); [EOL]     assertEquals("{\"map\":{\"Not Karl\":1}}", value1); [EOL]     final String value2 = mapper.writeValueAsString(new KarlBean()); [EOL]     assertEquals("{\"map\":{\"Karl\":1}}", value2); [EOL] }
public void testModifyMapDeserializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setDeserializerModifier(new MapDeserializerModifier())); [EOL]     Map<?, ?> result = mapper.readValue("{\"a\":1,\"b\":2}", Map.class); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("foo", result.get("a")); [EOL] }
public void testModifyMapDeserializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setDeserializerModifier(new MapDeserializerModifier())); [EOL]     Map<?, ?> result = mapper.readValue("{\"a\":1,\"b\":2}", Map.class); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("foo", result.get("a")); [EOL] }
public void testModifyMapDeserializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setDeserializerModifier(new MapDeserializerModifier())); [EOL]     Map<?, ?> result = mapper.readValue("{\"a\":1,\"b\":2}", Map.class); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("foo", result.get("a")); [EOL] }
public void testModifyMapDeserializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setDeserializerModifier(new MapDeserializerModifier())); [EOL]     Map<?, ?> result = mapper.readValue("{\"a\":1,\"b\":2}", Map.class); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("foo", result.get("a")); [EOL] }
public void testModifyMapDeserializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setDeserializerModifier(new MapDeserializerModifier())); [EOL]     Map<?, ?> result = mapper.readValue("{\"a\":1,\"b\":2}", Map.class); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("foo", result.get("a")); [EOL] }
public void testModifyMapDeserializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setDeserializerModifier(new MapDeserializerModifier())); [EOL]     Map<?, ?> result = mapper.readValue("{\"a\":1,\"b\":2}", Map.class); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("foo", result.get("a")); [EOL] }
public void testModifyMapDeserializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setDeserializerModifier(new MapDeserializerModifier())); [EOL]     Map<?, ?> result = mapper.readValue("{\"a\":1,\"b\":2}", Map.class); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("foo", result.get("a")); [EOL] }
public void testModifyMapDeserializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setDeserializerModifier(new MapDeserializerModifier())); [EOL]     Map<?, ?> result = mapper.readValue("{\"a\":1,\"b\":2}", Map.class); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("foo", result.get("a")); [EOL] }
public void testModifyMapDeserializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setDeserializerModifier(new MapDeserializerModifier())); [EOL]     Map<?, ?> result = mapper.readValue("{\"a\":1,\"b\":2}", Map.class); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("foo", result.get("a")); [EOL] }
public void testModifyMapDeserializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setDeserializerModifier(new MapDeserializerModifier())); [EOL]     Map<?, ?> result = mapper.readValue("{\"a\":1,\"b\":2}", Map.class); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("foo", result.get("a")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
public void testMapOfRefs() throws Exception { [EOL]     NodeMap root = new NodeMap(); [EOL]     NodeForMap node1 = new NodeForMap("a"); [EOL]     NodeForMap node2 = new NodeForMap("b"); [EOL]     Map<String, NodeForMap> nodes = new HashMap<String, NodeForMap>(); [EOL]     nodes.put("a1", node1); [EOL]     nodes.put("b2", node2); [EOL]     root.nodes = nodes; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = mapper.writeValueAsString(root); [EOL]     NodeMap result = mapper.readValue(json, NodeMap.class); [EOL]     Map<String, NodeForMap> kids = result.nodes; [EOL]     assertNotNull(kids); [EOL]     assertEquals(2, kids.size()); [EOL]     assertNotNull(kids.get("a1")); [EOL]     assertNotNull(kids.get("b2")); [EOL]     assertEquals("a", kids.get("a1").name); [EOL]     assertEquals("b", kids.get("b2").name); [EOL]     assertSame(result, kids.get("a1").parent); [EOL]     assertSame(result, kids.get("b2").parent); [EOL] }
public void testMapOfRefs() throws Exception { [EOL]     NodeMap root = new NodeMap(); [EOL]     NodeForMap node1 = new NodeForMap("a"); [EOL]     NodeForMap node2 = new NodeForMap("b"); [EOL]     Map<String, NodeForMap> nodes = new HashMap<String, NodeForMap>(); [EOL]     nodes.put("a1", node1); [EOL]     nodes.put("b2", node2); [EOL]     root.nodes = nodes; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = mapper.writeValueAsString(root); [EOL]     NodeMap result = mapper.readValue(json, NodeMap.class); [EOL]     Map<String, NodeForMap> kids = result.nodes; [EOL]     assertNotNull(kids); [EOL]     assertEquals(2, kids.size()); [EOL]     assertNotNull(kids.get("a1")); [EOL]     assertNotNull(kids.get("b2")); [EOL]     assertEquals("a", kids.get("a1").name); [EOL]     assertEquals("b", kids.get("b2").name); [EOL]     assertSame(result, kids.get("a1").parent); [EOL]     assertSame(result, kids.get("b2").parent); [EOL] }
public void testNoCtorMap() throws Exception { [EOL]     try { [EOL]         BrokenMap result = MAPPER.readValue("{ \"a\" : 3 }", BrokenMap.class); [EOL]         assertNull(result); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "no default constructor found"); [EOL]     } [EOL] }
public void testNoCtorMap() throws Exception { [EOL]     try { [EOL]         BrokenMap result = MAPPER.readValue("{ \"a\" : 3 }", BrokenMap.class); [EOL]         assertNull(result); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "no default constructor found"); [EOL]     } [EOL] }
public void testNoCtorMap() throws Exception { [EOL]     try { [EOL]         BrokenMap result = MAPPER.readValue("{ \"a\" : 3 }", BrokenMap.class); [EOL]         assertNull(result); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "no default constructor found"); [EOL]     } [EOL] }
public void testNoCtorMap() throws Exception { [EOL]     try { [EOL]         BrokenMap result = MAPPER.readValue("{ \"a\" : 3 }", BrokenMap.class); [EOL]         assertNull(result); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "no default constructor found"); [EOL]     } [EOL] }
public void testNoCtorMap() throws Exception { [EOL]     try { [EOL]         BrokenMap result = MAPPER.readValue("{ \"a\" : 3 }", BrokenMap.class); [EOL]         assertNull(result); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "no default constructor found"); [EOL]     } [EOL] }
public void testNoCtorMap() throws Exception { [EOL]     try { [EOL]         BrokenMap result = MAPPER.readValue("{ \"a\" : 3 }", BrokenMap.class); [EOL]         assertNull(result); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "no default constructor found"); [EOL]     } [EOL] }
public void testNoCtorMap() throws Exception { [EOL]     try { [EOL]         BrokenMap result = MAPPER.readValue("{ \"a\" : 3 }", BrokenMap.class); [EOL]         assertNull(result); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "no default constructor found"); [EOL]     } [EOL] }
public void testSpecialMap() throws IOException { [EOL]     final ObjectWrapperMap map = MAPPER.readValue(UNTYPED_MAP_JSON, ObjectWrapperMap.class); [EOL]     _doTestUntyped(map); [EOL] }
public void testSpecialMap() throws IOException { [EOL]     final ObjectWrapperMap map = MAPPER.readValue(UNTYPED_MAP_JSON, ObjectWrapperMap.class); [EOL]     _doTestUntyped(map); [EOL] }
public void testSpecialMap() throws IOException { [EOL]     final ObjectWrapperMap map = MAPPER.readValue(UNTYPED_MAP_JSON, ObjectWrapperMap.class); [EOL]     _doTestUntyped(map); [EOL] }
public void testSpecialMap() throws IOException { [EOL]     final ObjectWrapperMap map = MAPPER.readValue(UNTYPED_MAP_JSON, ObjectWrapperMap.class); [EOL]     _doTestUntyped(map); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testDeserializeNonNS() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int i = 0; i < 2; ++i) { [EOL]         Document doc; [EOL]         if (i == 0) { [EOL]             doc = mapper.readValue(quote(SIMPLE_XML), Document.class); [EOL]         } else { [EOL]             Node node = mapper.readValue(quote(SIMPLE_XML), Node.class); [EOL]             doc = (Document) node; [EOL]         } [EOL]         Element root = doc.getDocumentElement(); [EOL]         assertNotNull(root); [EOL]         assertEquals("root", root.getTagName()); [EOL]         assertEquals("3", root.getAttribute("attr")); [EOL]         assertEquals(1, root.getAttributes().getLength()); [EOL]         NodeList nodes = root.getChildNodes(); [EOL]         assertEquals(2, nodes.getLength()); [EOL]         Element leaf = (Element) nodes.item(0); [EOL]         assertEquals("leaf", leaf.getTagName()); [EOL]         assertEquals(0, leaf.getAttributes().getLength()); [EOL]         ProcessingInstruction pi = (ProcessingInstruction) nodes.item(1); [EOL]         assertEquals("proc", pi.getTarget()); [EOL]         assertEquals("instr", pi.getData()); [EOL]     } [EOL] }
public void testDeserializeNonNS() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int i = 0; i < 2; ++i) { [EOL]         Document doc; [EOL]         if (i == 0) { [EOL]             doc = mapper.readValue(quote(SIMPLE_XML), Document.class); [EOL]         } else { [EOL]             Node node = mapper.readValue(quote(SIMPLE_XML), Node.class); [EOL]             doc = (Document) node; [EOL]         } [EOL]         Element root = doc.getDocumentElement(); [EOL]         assertNotNull(root); [EOL]         assertEquals("root", root.getTagName()); [EOL]         assertEquals("3", root.getAttribute("attr")); [EOL]         assertEquals(1, root.getAttributes().getLength()); [EOL]         NodeList nodes = root.getChildNodes(); [EOL]         assertEquals(2, nodes.getLength()); [EOL]         Element leaf = (Element) nodes.item(0); [EOL]         assertEquals("leaf", leaf.getTagName()); [EOL]         assertEquals(0, leaf.getAttributes().getLength()); [EOL]         ProcessingInstruction pi = (ProcessingInstruction) nodes.item(1); [EOL]         assertEquals("proc", pi.getTarget()); [EOL]         assertEquals("instr", pi.getData()); [EOL]     } [EOL] }
public void testDeserializeNonNS() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int i = 0; i < 2; ++i) { [EOL]         Document doc; [EOL]         if (i == 0) { [EOL]             doc = mapper.readValue(quote(SIMPLE_XML), Document.class); [EOL]         } else { [EOL]             Node node = mapper.readValue(quote(SIMPLE_XML), Node.class); [EOL]             doc = (Document) node; [EOL]         } [EOL]         Element root = doc.getDocumentElement(); [EOL]         assertNotNull(root); [EOL]         assertEquals("root", root.getTagName()); [EOL]         assertEquals("3", root.getAttribute("attr")); [EOL]         assertEquals(1, root.getAttributes().getLength()); [EOL]         NodeList nodes = root.getChildNodes(); [EOL]         assertEquals(2, nodes.getLength()); [EOL]         Element leaf = (Element) nodes.item(0); [EOL]         assertEquals("leaf", leaf.getTagName()); [EOL]         assertEquals(0, leaf.getAttributes().getLength()); [EOL]         ProcessingInstruction pi = (ProcessingInstruction) nodes.item(1); [EOL]         assertEquals("proc", pi.getTarget()); [EOL]         assertEquals("instr", pi.getData()); [EOL]     } [EOL] }
public void testDeserializeNonNS() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int i = 0; i < 2; ++i) { [EOL]         Document doc; [EOL]         if (i == 0) { [EOL]             doc = mapper.readValue(quote(SIMPLE_XML), Document.class); [EOL]         } else { [EOL]             Node node = mapper.readValue(quote(SIMPLE_XML), Node.class); [EOL]             doc = (Document) node; [EOL]         } [EOL]         Element root = doc.getDocumentElement(); [EOL]         assertNotNull(root); [EOL]         assertEquals("root", root.getTagName()); [EOL]         assertEquals("3", root.getAttribute("attr")); [EOL]         assertEquals(1, root.getAttributes().getLength()); [EOL]         NodeList nodes = root.getChildNodes(); [EOL]         assertEquals(2, nodes.getLength()); [EOL]         Element leaf = (Element) nodes.item(0); [EOL]         assertEquals("leaf", leaf.getTagName()); [EOL]         assertEquals(0, leaf.getAttributes().getLength()); [EOL]         ProcessingInstruction pi = (ProcessingInstruction) nodes.item(1); [EOL]         assertEquals("proc", pi.getTarget()); [EOL]         assertEquals("instr", pi.getData()); [EOL]     } [EOL] }
public void testDeserializeNonNS() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int i = 0; i < 2; ++i) { [EOL]         Document doc; [EOL]         if (i == 0) { [EOL]             doc = mapper.readValue(quote(SIMPLE_XML), Document.class); [EOL]         } else { [EOL]             Node node = mapper.readValue(quote(SIMPLE_XML), Node.class); [EOL]             doc = (Document) node; [EOL]         } [EOL]         Element root = doc.getDocumentElement(); [EOL]         assertNotNull(root); [EOL]         assertEquals("root", root.getTagName()); [EOL]         assertEquals("3", root.getAttribute("attr")); [EOL]         assertEquals(1, root.getAttributes().getLength()); [EOL]         NodeList nodes = root.getChildNodes(); [EOL]         assertEquals(2, nodes.getLength()); [EOL]         Element leaf = (Element) nodes.item(0); [EOL]         assertEquals("leaf", leaf.getTagName()); [EOL]         assertEquals(0, leaf.getAttributes().getLength()); [EOL]         ProcessingInstruction pi = (ProcessingInstruction) nodes.item(1); [EOL]         assertEquals("proc", pi.getTarget()); [EOL]         assertEquals("instr", pi.getData()); [EOL]     } [EOL] }
public void testDeserializeNonNS() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int i = 0; i < 2; ++i) { [EOL]         Document doc; [EOL]         if (i == 0) { [EOL]             doc = mapper.readValue(quote(SIMPLE_XML), Document.class); [EOL]         } else { [EOL]             Node node = mapper.readValue(quote(SIMPLE_XML), Node.class); [EOL]             doc = (Document) node; [EOL]         } [EOL]         Element root = doc.getDocumentElement(); [EOL]         assertNotNull(root); [EOL]         assertEquals("root", root.getTagName()); [EOL]         assertEquals("3", root.getAttribute("attr")); [EOL]         assertEquals(1, root.getAttributes().getLength()); [EOL]         NodeList nodes = root.getChildNodes(); [EOL]         assertEquals(2, nodes.getLength()); [EOL]         Element leaf = (Element) nodes.item(0); [EOL]         assertEquals("leaf", leaf.getTagName()); [EOL]         assertEquals(0, leaf.getAttributes().getLength()); [EOL]         ProcessingInstruction pi = (ProcessingInstruction) nodes.item(1); [EOL]         assertEquals("proc", pi.getTarget()); [EOL]         assertEquals("instr", pi.getData()); [EOL]     } [EOL] }
public void testDeserializeNonNS() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int i = 0; i < 2; ++i) { [EOL]         Document doc; [EOL]         if (i == 0) { [EOL]             doc = mapper.readValue(quote(SIMPLE_XML), Document.class); [EOL]         } else { [EOL]             Node node = mapper.readValue(quote(SIMPLE_XML), Node.class); [EOL]             doc = (Document) node; [EOL]         } [EOL]         Element root = doc.getDocumentElement(); [EOL]         assertNotNull(root); [EOL]         assertEquals("root", root.getTagName()); [EOL]         assertEquals("3", root.getAttribute("attr")); [EOL]         assertEquals(1, root.getAttributes().getLength()); [EOL]         NodeList nodes = root.getChildNodes(); [EOL]         assertEquals(2, nodes.getLength()); [EOL]         Element leaf = (Element) nodes.item(0); [EOL]         assertEquals("leaf", leaf.getTagName()); [EOL]         assertEquals(0, leaf.getAttributes().getLength()); [EOL]         ProcessingInstruction pi = (ProcessingInstruction) nodes.item(1); [EOL]         assertEquals("proc", pi.getTarget()); [EOL]         assertEquals("instr", pi.getData()); [EOL]     } [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(NullNode.instance, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(NullNode.instance, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testIssue811() throws Exception { [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.disable(MapperFeature.AUTO_DETECT_CREATORS); [EOL]     om.disable(MapperFeature.AUTO_DETECT_GETTERS); [EOL]     om.disable(MapperFeature.AUTO_DETECT_IS_GETTERS); [EOL]     om.setVisibility(PropertyAccessor.FIELD, Visibility.ANY); [EOL]     om.enable(SerializationFeature.WRITE_ENUMS_USING_INDEX); [EOL]     om.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     om.enableDefaultTypingAsProperty(DefaultTyping.NON_FINAL, "@class"); [EOL]     Process p = new Process(); [EOL]     Scope s = new Scope(p, null); [EOL]     FaultHandler fh = new FaultHandler(p); [EOL]     Catch c = new Catch(p, s); [EOL]     fh.catchBlocks.add(c); [EOL]     s.faultHandlers.add(fh); [EOL]     String json = om.writeValueAsString(p); [EOL]     Process restored = om.readValue(json, Process.class); [EOL]     assertNotNull(restored); [EOL]     assertEquals(0, p.id); [EOL]     assertEquals(3, p.children.size()); [EOL]     assertSame(p, p.children.get(0).owner); [EOL]     assertSame(p, p.children.get(1).owner); [EOL]     assertSame(p, p.children.get(2).owner); [EOL] }
public void testIssue811() throws Exception { [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.disable(MapperFeature.AUTO_DETECT_CREATORS); [EOL]     om.disable(MapperFeature.AUTO_DETECT_GETTERS); [EOL]     om.disable(MapperFeature.AUTO_DETECT_IS_GETTERS); [EOL]     om.setVisibility(PropertyAccessor.FIELD, Visibility.ANY); [EOL]     om.enable(SerializationFeature.WRITE_ENUMS_USING_INDEX); [EOL]     om.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     om.enableDefaultTypingAsProperty(DefaultTyping.NON_FINAL, "@class"); [EOL]     Process p = new Process(); [EOL]     Scope s = new Scope(p, null); [EOL]     FaultHandler fh = new FaultHandler(p); [EOL]     Catch c = new Catch(p, s); [EOL]     fh.catchBlocks.add(c); [EOL]     s.faultHandlers.add(fh); [EOL]     String json = om.writeValueAsString(p); [EOL]     Process restored = om.readValue(json, Process.class); [EOL]     assertNotNull(restored); [EOL]     assertEquals(0, p.id); [EOL]     assertEquals(3, p.children.size()); [EOL]     assertSame(p, p.children.get(0).owner); [EOL]     assertSame(p, p.children.get(1).owner); [EOL]     assertSame(p, p.children.get(2).owner); [EOL] }
public void testIssue811() throws Exception { [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.disable(MapperFeature.AUTO_DETECT_CREATORS); [EOL]     om.disable(MapperFeature.AUTO_DETECT_GETTERS); [EOL]     om.disable(MapperFeature.AUTO_DETECT_IS_GETTERS); [EOL]     om.setVisibility(PropertyAccessor.FIELD, Visibility.ANY); [EOL]     om.enable(SerializationFeature.WRITE_ENUMS_USING_INDEX); [EOL]     om.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     om.enableDefaultTypingAsProperty(DefaultTyping.NON_FINAL, "@class"); [EOL]     Process p = new Process(); [EOL]     Scope s = new Scope(p, null); [EOL]     FaultHandler fh = new FaultHandler(p); [EOL]     Catch c = new Catch(p, s); [EOL]     fh.catchBlocks.add(c); [EOL]     s.faultHandlers.add(fh); [EOL]     String json = om.writeValueAsString(p); [EOL]     Process restored = om.readValue(json, Process.class); [EOL]     assertNotNull(restored); [EOL]     assertEquals(0, p.id); [EOL]     assertEquals(3, p.children.size()); [EOL]     assertSame(p, p.children.get(0).owner); [EOL]     assertSame(p, p.children.get(1).owner); [EOL]     assertSame(p, p.children.get(2).owner); [EOL] }
public void testIssue811() throws Exception { [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.disable(MapperFeature.AUTO_DETECT_CREATORS); [EOL]     om.disable(MapperFeature.AUTO_DETECT_GETTERS); [EOL]     om.disable(MapperFeature.AUTO_DETECT_IS_GETTERS); [EOL]     om.setVisibility(PropertyAccessor.FIELD, Visibility.ANY); [EOL]     om.enable(SerializationFeature.WRITE_ENUMS_USING_INDEX); [EOL]     om.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     om.enableDefaultTypingAsProperty(DefaultTyping.NON_FINAL, "@class"); [EOL]     Process p = new Process(); [EOL]     Scope s = new Scope(p, null); [EOL]     FaultHandler fh = new FaultHandler(p); [EOL]     Catch c = new Catch(p, s); [EOL]     fh.catchBlocks.add(c); [EOL]     s.faultHandlers.add(fh); [EOL]     String json = om.writeValueAsString(p); [EOL]     Process restored = om.readValue(json, Process.class); [EOL]     assertNotNull(restored); [EOL]     assertEquals(0, p.id); [EOL]     assertEquals(3, p.children.size()); [EOL]     assertSame(p, p.children.get(0).owner); [EOL]     assertSame(p, p.children.get(1).owner); [EOL]     assertSame(p, p.children.get(2).owner); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testJsonLocation() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonLocation loc = new JsonLocation("whatever", -1, -1, 100, 13); [EOL]     String ser = serializeAsString(m, loc); [EOL]     JsonLocation result = m.readValue(ser, JsonLocation.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(loc.getSourceRef(), result.getSourceRef()); [EOL]     assertEquals(loc.getByteOffset(), result.getByteOffset()); [EOL]     assertEquals(loc.getCharOffset(), result.getCharOffset()); [EOL]     assertEquals(loc.getColumnNr(), result.getColumnNr()); [EOL]     assertEquals(loc.getLineNr(), result.getLineNr()); [EOL] }
public void testJsonLocation() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonLocation loc = new JsonLocation("whatever", -1, -1, 100, 13); [EOL]     String ser = serializeAsString(m, loc); [EOL]     JsonLocation result = m.readValue(ser, JsonLocation.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(loc.getSourceRef(), result.getSourceRef()); [EOL]     assertEquals(loc.getByteOffset(), result.getByteOffset()); [EOL]     assertEquals(loc.getCharOffset(), result.getCharOffset()); [EOL]     assertEquals(loc.getColumnNr(), result.getColumnNr()); [EOL]     assertEquals(loc.getLineNr(), result.getLineNr()); [EOL] }
public void testJsonLocation() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonLocation loc = new JsonLocation("whatever", -1, -1, 100, 13); [EOL]     String ser = serializeAsString(m, loc); [EOL]     JsonLocation result = m.readValue(ser, JsonLocation.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(loc.getSourceRef(), result.getSourceRef()); [EOL]     assertEquals(loc.getByteOffset(), result.getByteOffset()); [EOL]     assertEquals(loc.getCharOffset(), result.getCharOffset()); [EOL]     assertEquals(loc.getColumnNr(), result.getColumnNr()); [EOL]     assertEquals(loc.getLineNr(), result.getLineNr()); [EOL] }
public void testJsonLocation() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonLocation loc = new JsonLocation("whatever", -1, -1, 100, 13); [EOL]     String ser = serializeAsString(m, loc); [EOL]     JsonLocation result = m.readValue(ser, JsonLocation.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(loc.getSourceRef(), result.getSourceRef()); [EOL]     assertEquals(loc.getByteOffset(), result.getByteOffset()); [EOL]     assertEquals(loc.getCharOffset(), result.getCharOffset()); [EOL]     assertEquals(loc.getColumnNr(), result.getColumnNr()); [EOL]     assertEquals(loc.getLineNr(), result.getLineNr()); [EOL] }
public void testJsonLocation() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonLocation loc = new JsonLocation("whatever", -1, -1, 100, 13); [EOL]     String ser = serializeAsString(m, loc); [EOL]     JsonLocation result = m.readValue(ser, JsonLocation.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(loc.getSourceRef(), result.getSourceRef()); [EOL]     assertEquals(loc.getByteOffset(), result.getByteOffset()); [EOL]     assertEquals(loc.getCharOffset(), result.getCharOffset()); [EOL]     assertEquals(loc.getColumnNr(), result.getColumnNr()); [EOL]     assertEquals(loc.getLineNr(), result.getLineNr()); [EOL] }
public void testJsonLocation() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonLocation loc = new JsonLocation("whatever", -1, -1, 100, 13); [EOL]     String ser = serializeAsString(m, loc); [EOL]     JsonLocation result = m.readValue(ser, JsonLocation.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(loc.getSourceRef(), result.getSourceRef()); [EOL]     assertEquals(loc.getByteOffset(), result.getByteOffset()); [EOL]     assertEquals(loc.getCharOffset(), result.getCharOffset()); [EOL]     assertEquals(loc.getColumnNr(), result.getColumnNr()); [EOL]     assertEquals(loc.getLineNr(), result.getLineNr()); [EOL] }
public void testJsonLocation() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonLocation loc = new JsonLocation("whatever", -1, -1, 100, 13); [EOL]     String ser = serializeAsString(m, loc); [EOL]     JsonLocation result = m.readValue(ser, JsonLocation.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(loc.getSourceRef(), result.getSourceRef()); [EOL]     assertEquals(loc.getByteOffset(), result.getByteOffset()); [EOL]     assertEquals(loc.getCharOffset(), result.getCharOffset()); [EOL]     assertEquals(loc.getColumnNr(), result.getColumnNr()); [EOL]     assertEquals(loc.getLineNr(), result.getLineNr()); [EOL] }
public void testJsonLocation() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonLocation loc = new JsonLocation("whatever", -1, -1, 100, 13); [EOL]     String ser = serializeAsString(m, loc); [EOL]     JsonLocation result = m.readValue(ser, JsonLocation.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(loc.getSourceRef(), result.getSourceRef()); [EOL]     assertEquals(loc.getByteOffset(), result.getByteOffset()); [EOL]     assertEquals(loc.getCharOffset(), result.getCharOffset()); [EOL]     assertEquals(loc.getColumnNr(), result.getColumnNr()); [EOL]     assertEquals(loc.getLineNr(), result.getLineNr()); [EOL] }
public void testJsonLocation() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonLocation loc = new JsonLocation("whatever", -1, -1, 100, 13); [EOL]     String ser = serializeAsString(m, loc); [EOL]     JsonLocation result = m.readValue(ser, JsonLocation.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(loc.getSourceRef(), result.getSourceRef()); [EOL]     assertEquals(loc.getByteOffset(), result.getByteOffset()); [EOL]     assertEquals(loc.getCharOffset(), result.getCharOffset()); [EOL]     assertEquals(loc.getColumnNr(), result.getColumnNr()); [EOL]     assertEquals(loc.getLineNr(), result.getLineNr()); [EOL] }
public void testJsonLocation() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonLocation loc = new JsonLocation("whatever", -1, -1, 100, 13); [EOL]     String ser = serializeAsString(m, loc); [EOL]     JsonLocation result = m.readValue(ser, JsonLocation.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(loc.getSourceRef(), result.getSourceRef()); [EOL]     assertEquals(loc.getByteOffset(), result.getByteOffset()); [EOL]     assertEquals(loc.getCharOffset(), result.getCharOffset()); [EOL]     assertEquals(loc.getColumnNr(), result.getColumnNr()); [EOL]     assertEquals(loc.getLineNr(), result.getLineNr()); [EOL] }
public void testJsonLocation() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonLocation loc = new JsonLocation("whatever", -1, -1, 100, 13); [EOL]     String ser = serializeAsString(m, loc); [EOL]     JsonLocation result = m.readValue(ser, JsonLocation.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(loc.getSourceRef(), result.getSourceRef()); [EOL]     assertEquals(loc.getByteOffset(), result.getByteOffset()); [EOL]     assertEquals(loc.getCharOffset(), result.getCharOffset()); [EOL]     assertEquals(loc.getColumnNr(), result.getColumnNr()); [EOL]     assertEquals(loc.getLineNr(), result.getLineNr()); [EOL] }
public void testJsonLocation() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonLocation loc = new JsonLocation("whatever", -1, -1, 100, 13); [EOL]     String ser = serializeAsString(m, loc); [EOL]     JsonLocation result = m.readValue(ser, JsonLocation.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(loc.getSourceRef(), result.getSourceRef()); [EOL]     assertEquals(loc.getByteOffset(), result.getByteOffset()); [EOL]     assertEquals(loc.getCharOffset(), result.getCharOffset()); [EOL]     assertEquals(loc.getColumnNr(), result.getColumnNr()); [EOL]     assertEquals(loc.getLineNr(), result.getLineNr()); [EOL] }
public void testJsonLocation() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonLocation loc = new JsonLocation("whatever", -1, -1, 100, 13); [EOL]     String ser = serializeAsString(m, loc); [EOL]     JsonLocation result = m.readValue(ser, JsonLocation.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(loc.getSourceRef(), result.getSourceRef()); [EOL]     assertEquals(loc.getByteOffset(), result.getByteOffset()); [EOL]     assertEquals(loc.getCharOffset(), result.getCharOffset()); [EOL]     assertEquals(loc.getColumnNr(), result.getColumnNr()); [EOL]     assertEquals(loc.getLineNr(), result.getLineNr()); [EOL] }
public void testPrivateCtor() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     PrivateBean bean = m.readValue("\"abc\"", PrivateBean.class); [EOL]     assertEquals("abc", bean.a); [EOL]     m = new ObjectMapper(); [EOL]     VisibilityChecker<?> vc = m.getVisibilityChecker(); [EOL]     vc = vc.withCreatorVisibility(JsonAutoDetect.Visibility.PUBLIC_ONLY); [EOL]     m.setVisibilityChecker(vc); [EOL]     try { [EOL]         m.readValue("\"abc\"", PrivateBean.class); [EOL]         fail("Expected exception for missing constructor"); [EOL]     } catch (JsonProcessingException e) { [EOL]         verifyException(e, "no single-String constructor/factory"); [EOL]     } [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSimpleInclusionFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().addFilter("RootFilter", SimpleBeanPropertyFilter.filterOutAllExcept("a")); [EOL]     assertEquals("{\"a\":\"a\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.setFilters(prov); [EOL]     assertEquals("{\"a\":\"a\"}", mapper.writeValueAsString(new Bean())); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testAtomicReference() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String[] strs = new String[] { "abc" }; [EOL]     assertEquals("[\"abc\"]", serializeAsString(mapper, new AtomicReference<String[]>(strs))); [EOL] }
public void testAtomicReference() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String[] strs = new String[] { "abc" }; [EOL]     assertEquals("[\"abc\"]", serializeAsString(mapper, new AtomicReference<String[]>(strs))); [EOL] }
public void testSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setHandlerInstantiator(new MyInstantiator("xyz:")); [EOL]     assertEquals(quote("xyz:456"), mapper.writeValueAsString(new MyBean("456"))); [EOL] }
public void testSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setHandlerInstantiator(new MyInstantiator("xyz:")); [EOL]     assertEquals(quote("xyz:456"), mapper.writeValueAsString(new MyBean("456"))); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
