public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testSelfReferenceSerialization() throws Exception { [EOL]     ClassOverridingEquals objA = new ClassOverridingEquals(); [EOL]     objA.ref = objA; [EOL]     try { [EOL]         gson.toJson(objA); [EOL]         fail("Circular reference to self can not be serialized!"); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL] }
public void testSelfReferenceSerialization() throws Exception { [EOL]     ClassOverridingEquals objA = new ClassOverridingEquals(); [EOL]     objA.ref = objA; [EOL]     try { [EOL]         gson.toJson(objA); [EOL]         fail("Circular reference to self can not be serialized!"); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL] }
public void testSelfReferenceSerialization() throws Exception { [EOL]     ClassOverridingEquals objA = new ClassOverridingEquals(); [EOL]     objA.ref = objA; [EOL]     try { [EOL]         gson.toJson(objA); [EOL]         fail("Circular reference to self can not be serialized!"); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL] }
public void testSelfReferenceSerialization() throws Exception { [EOL]     ClassOverridingEquals objA = new ClassOverridingEquals(); [EOL]     objA.ref = objA; [EOL]     try { [EOL]         gson.toJson(objA); [EOL]         fail("Circular reference to self can not be serialized!"); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testNullsInArraySerialization() { [EOL]     String[] array = { "foo", null, "bar" }; [EOL]     String expected = "[\"foo\",null,\"bar\"]"; [EOL]     String json = gson.toJson(array); [EOL]     assertEquals(expected, json); [EOL] }
public void testNullsInArraySerialization() { [EOL]     String[] array = { "foo", null, "bar" }; [EOL]     String expected = "[\"foo\",null,\"bar\"]"; [EOL]     String json = gson.toJson(array); [EOL]     assertEquals(expected, json); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testJsonObjectSerialization() { [EOL]     Gson gson = new GsonBuilder().serializeNulls().create(); [EOL]     JsonObject obj = new JsonObject(); [EOL]     String json = gson.toJson(obj); [EOL]     assertEquals("{}", json); [EOL] }
public void testJsonObjectSerialization() { [EOL]     Gson gson = new GsonBuilder().serializeNulls().create(); [EOL]     JsonObject obj = new JsonObject(); [EOL]     String json = gson.toJson(obj); [EOL]     assertEquals("{}", json); [EOL] }
public void testJsonObjectSerialization() { [EOL]     Gson gson = new GsonBuilder().serializeNulls().create(); [EOL]     JsonObject obj = new JsonObject(); [EOL]     String json = gson.toJson(obj); [EOL]     assertEquals("{}", json); [EOL] }
public void testJsonObjectSerialization() { [EOL]     Gson gson = new GsonBuilder().serializeNulls().create(); [EOL]     JsonObject obj = new JsonObject(); [EOL]     String json = gson.toJson(obj); [EOL]     assertEquals("{}", json); [EOL] }
public void testJsonObjectSerialization() { [EOL]     Gson gson = new GsonBuilder().serializeNulls().create(); [EOL]     JsonObject obj = new JsonObject(); [EOL]     String json = gson.toJson(obj); [EOL]     assertEquals("{}", json); [EOL] }
public void testJsonObjectSerialization() { [EOL]     Gson gson = new GsonBuilder().serializeNulls().create(); [EOL]     JsonObject obj = new JsonObject(); [EOL]     String json = gson.toJson(obj); [EOL]     assertEquals("{}", json); [EOL] }
public void testJsonObjectSerialization() { [EOL]     Gson gson = new GsonBuilder().serializeNulls().create(); [EOL]     JsonObject obj = new JsonObject(); [EOL]     String json = gson.toJson(obj); [EOL]     assertEquals("{}", json); [EOL] }
public void testJsonObjectSerialization() { [EOL]     Gson gson = new GsonBuilder().serializeNulls().create(); [EOL]     JsonObject obj = new JsonObject(); [EOL]     String json = gson.toJson(obj); [EOL]     assertEquals("{}", json); [EOL] }
public void testEmptyObject() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.endObject(); [EOL]     assertEquals("{}", stringWriter.toString()); [EOL] }
public void testEmptyObject() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.endObject(); [EOL]     assertEquals("{}", stringWriter.toString()); [EOL] }
public void testEmptyObject() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.endObject(); [EOL]     assertEquals("{}", stringWriter.toString()); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testRequiredEscapingUnicodeCharacter() throws Exception { [EOL]     char unicodeChar = '\u2028'; [EOL]     String unicodeString = "Testing" + unicodeChar; [EOL]     String escapedString = escapeHtmlChar.escapeJsonString(unicodeString); [EOL]     assertFalse(unicodeString.equals(escapedString)); [EOL]     assertEquals("Testing\\u2028", escapedString); [EOL] }
public void testRequiredEscapingUnicodeCharacter() throws Exception { [EOL]     char unicodeChar = '\u2028'; [EOL]     String unicodeString = "Testing" + unicodeChar; [EOL]     String escapedString = escapeHtmlChar.escapeJsonString(unicodeString); [EOL]     assertFalse(unicodeString.equals(escapedString)); [EOL]     assertEquals("Testing\\u2028", escapedString); [EOL] }
public void testRequiredEscapingUnicodeCharacter() throws Exception { [EOL]     char unicodeChar = '\u2028'; [EOL]     String unicodeString = "Testing" + unicodeChar; [EOL]     String escapedString = escapeHtmlChar.escapeJsonString(unicodeString); [EOL]     assertFalse(unicodeString.equals(escapedString)); [EOL]     assertEquals("Testing\\u2028", escapedString); [EOL] }
public void testRequiredEscapingUnicodeCharacter() throws Exception { [EOL]     char unicodeChar = '\u2028'; [EOL]     String unicodeString = "Testing" + unicodeChar; [EOL]     String escapedString = escapeHtmlChar.escapeJsonString(unicodeString); [EOL]     assertFalse(unicodeString.equals(escapedString)); [EOL]     assertEquals("Testing\\u2028", escapedString); [EOL] }
public void testRequiredEscapingUnicodeCharacter() throws Exception { [EOL]     char unicodeChar = '\u2028'; [EOL]     String unicodeString = "Testing" + unicodeChar; [EOL]     String escapedString = escapeHtmlChar.escapeJsonString(unicodeString); [EOL]     assertFalse(unicodeString.equals(escapedString)); [EOL]     assertEquals("Testing\\u2028", escapedString); [EOL] }
public void testRequiredEscapingUnicodeCharacter() throws Exception { [EOL]     char unicodeChar = '\u2028'; [EOL]     String unicodeString = "Testing" + unicodeChar; [EOL]     String escapedString = escapeHtmlChar.escapeJsonString(unicodeString); [EOL]     assertFalse(unicodeString.equals(escapedString)); [EOL]     assertEquals("Testing\\u2028", escapedString); [EOL] }
public void testRequiredEscapingUnicodeCharacter() throws Exception { [EOL]     char unicodeChar = '\u2028'; [EOL]     String unicodeString = "Testing" + unicodeChar; [EOL]     String escapedString = escapeHtmlChar.escapeJsonString(unicodeString); [EOL]     assertFalse(unicodeString.equals(escapedString)); [EOL]     assertEquals("Testing\\u2028", escapedString); [EOL] }
public void testRequiredEscapingUnicodeCharacter() throws Exception { [EOL]     char unicodeChar = '\u2028'; [EOL]     String unicodeString = "Testing" + unicodeChar; [EOL]     String escapedString = escapeHtmlChar.escapeJsonString(unicodeString); [EOL]     assertFalse(unicodeString.equals(escapedString)); [EOL]     assertEquals("Testing\\u2028", escapedString); [EOL] }
public void testRequiredEscapingUnicodeCharacter() throws Exception { [EOL]     char unicodeChar = '\u2028'; [EOL]     String unicodeString = "Testing" + unicodeChar; [EOL]     String escapedString = escapeHtmlChar.escapeJsonString(unicodeString); [EOL]     assertFalse(unicodeString.equals(escapedString)); [EOL]     assertEquals("Testing\\u2028", escapedString); [EOL] }
public void testRequiredEscapingUnicodeCharacter() throws Exception { [EOL]     char unicodeChar = '\u2028'; [EOL]     String unicodeString = "Testing" + unicodeChar; [EOL]     String escapedString = escapeHtmlChar.escapeJsonString(unicodeString); [EOL]     assertFalse(unicodeString.equals(escapedString)); [EOL]     assertEquals("Testing\\u2028", escapedString); [EOL] }
public void testRequiredEscapingUnicodeCharacter() throws Exception { [EOL]     char unicodeChar = '\u2028'; [EOL]     String unicodeString = "Testing" + unicodeChar; [EOL]     String escapedString = escapeHtmlChar.escapeJsonString(unicodeString); [EOL]     assertFalse(unicodeString.equals(escapedString)); [EOL]     assertEquals("Testing\\u2028", escapedString); [EOL] }
public void testRequiredEscapingUnicodeCharacter() throws Exception { [EOL]     char unicodeChar = '\u2028'; [EOL]     String unicodeString = "Testing" + unicodeChar; [EOL]     String escapedString = escapeHtmlChar.escapeJsonString(unicodeString); [EOL]     assertFalse(unicodeString.equals(escapedString)); [EOL]     assertEquals("Testing\\u2028", escapedString); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testDoubles() throws IOException { [EOL]     String json = "[-0.0," + "1.0," + "1.7976931348623157E308," + "4.9E-324," + "0.0," + "-0.5," + "2.2250738585072014E-308," + "3.141592653589793," + "2.718281828459045]"; [EOL]     JsonReader reader = new JsonReader(new StringReader(json)); [EOL]     reader.beginArray(); [EOL]     assertEquals(-0.0, reader.nextDouble()); [EOL]     assertEquals(1.0, reader.nextDouble()); [EOL]     assertEquals(1.7976931348623157E308, reader.nextDouble()); [EOL]     assertEquals(4.9E-324, reader.nextDouble()); [EOL]     assertEquals(0.0, reader.nextDouble()); [EOL]     assertEquals(-0.5, reader.nextDouble()); [EOL]     assertEquals(2.2250738585072014E-308, reader.nextDouble()); [EOL]     assertEquals(3.141592653589793, reader.nextDouble()); [EOL]     assertEquals(2.718281828459045, reader.nextDouble()); [EOL]     reader.endArray(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testDoubles() throws IOException { [EOL]     String json = "[-0.0," + "1.0," + "1.7976931348623157E308," + "4.9E-324," + "0.0," + "-0.5," + "2.2250738585072014E-308," + "3.141592653589793," + "2.718281828459045]"; [EOL]     JsonReader reader = new JsonReader(new StringReader(json)); [EOL]     reader.beginArray(); [EOL]     assertEquals(-0.0, reader.nextDouble()); [EOL]     assertEquals(1.0, reader.nextDouble()); [EOL]     assertEquals(1.7976931348623157E308, reader.nextDouble()); [EOL]     assertEquals(4.9E-324, reader.nextDouble()); [EOL]     assertEquals(0.0, reader.nextDouble()); [EOL]     assertEquals(-0.5, reader.nextDouble()); [EOL]     assertEquals(2.2250738585072014E-308, reader.nextDouble()); [EOL]     assertEquals(3.141592653589793, reader.nextDouble()); [EOL]     assertEquals(2.718281828459045, reader.nextDouble()); [EOL]     reader.endArray(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testReadEmptyObject() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{}")); [EOL]     reader.beginObject(); [EOL]     assertFalse(reader.hasNext()); [EOL]     reader.endObject(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testReadEmptyObject() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{}")); [EOL]     reader.beginObject(); [EOL]     assertFalse(reader.hasNext()); [EOL]     reader.endObject(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testReadEmptyObject() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{}")); [EOL]     reader.beginObject(); [EOL]     assertFalse(reader.hasNext()); [EOL]     reader.endObject(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testReadEmptyObject() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{}")); [EOL]     reader.beginObject(); [EOL]     assertFalse(reader.hasNext()); [EOL]     reader.endObject(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testReadEmptyObject() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{}")); [EOL]     reader.beginObject(); [EOL]     assertFalse(reader.hasNext()); [EOL]     reader.endObject(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testReadEmptyObject() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{}")); [EOL]     reader.beginObject(); [EOL]     assertFalse(reader.hasNext()); [EOL]     reader.endObject(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testReadEmptyObject() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{}")); [EOL]     reader.beginObject(); [EOL]     assertFalse(reader.hasNext()); [EOL]     reader.endObject(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testNextFailuresDoNotAdvance() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{\"a\":true}")); [EOL]     reader.beginObject(); [EOL]     try { [EOL]         reader.nextString(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     assertEquals("a", reader.nextName()); [EOL]     try { [EOL]         reader.nextName(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     try { [EOL]         reader.beginArray(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     try { [EOL]         reader.endArray(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     try { [EOL]         reader.beginObject(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     try { [EOL]         reader.endObject(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     try { [EOL]         reader.nextString(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     try { [EOL]         reader.nextName(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     try { [EOL]         reader.beginArray(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     try { [EOL]         reader.endArray(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     reader.endObject(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL]     reader.close(); [EOL] }
public void testNextFailuresDoNotAdvance() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{\"a\":true}")); [EOL]     reader.beginObject(); [EOL]     try { [EOL]         reader.nextString(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     assertEquals("a", reader.nextName()); [EOL]     try { [EOL]         reader.nextName(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     try { [EOL]         reader.beginArray(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     try { [EOL]         reader.endArray(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     try { [EOL]         reader.beginObject(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     try { [EOL]         reader.endObject(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     try { [EOL]         reader.nextString(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     try { [EOL]         reader.nextName(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     try { [EOL]         reader.beginArray(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     try { [EOL]         reader.endArray(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     reader.endObject(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL]     reader.close(); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testStringNullIsNotNull() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[\"null\"]")); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextNull(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL] }
public void testStringNullIsNotNull() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[\"null\"]")); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextNull(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL] }
public void testStringNullIsNotNull() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[\"null\"]")); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextNull(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL] }
public void testDoubles() throws IOException { [EOL]     String json = "[-0.0," + "1.0," + "1.7976931348623157E308," + "4.9E-324," + "0.0," + "-0.5," + "2.2250738585072014E-308," + "3.141592653589793," + "2.718281828459045]"; [EOL]     JsonReader reader = new JsonReader(new StringReader(json)); [EOL]     reader.beginArray(); [EOL]     assertEquals(-0.0, reader.nextDouble()); [EOL]     assertEquals(1.0, reader.nextDouble()); [EOL]     assertEquals(1.7976931348623157E308, reader.nextDouble()); [EOL]     assertEquals(4.9E-324, reader.nextDouble()); [EOL]     assertEquals(0.0, reader.nextDouble()); [EOL]     assertEquals(-0.5, reader.nextDouble()); [EOL]     assertEquals(2.2250738585072014E-308, reader.nextDouble()); [EOL]     assertEquals(3.141592653589793, reader.nextDouble()); [EOL]     assertEquals(2.718281828459045, reader.nextDouble()); [EOL]     reader.endArray(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testDoubles() throws IOException { [EOL]     String json = "[-0.0," + "1.0," + "1.7976931348623157E308," + "4.9E-324," + "0.0," + "-0.5," + "2.2250738585072014E-308," + "3.141592653589793," + "2.718281828459045]"; [EOL]     JsonReader reader = new JsonReader(new StringReader(json)); [EOL]     reader.beginArray(); [EOL]     assertEquals(-0.0, reader.nextDouble()); [EOL]     assertEquals(1.0, reader.nextDouble()); [EOL]     assertEquals(1.7976931348623157E308, reader.nextDouble()); [EOL]     assertEquals(4.9E-324, reader.nextDouble()); [EOL]     assertEquals(0.0, reader.nextDouble()); [EOL]     assertEquals(-0.5, reader.nextDouble()); [EOL]     assertEquals(2.2250738585072014E-308, reader.nextDouble()); [EOL]     assertEquals(3.141592653589793, reader.nextDouble()); [EOL]     assertEquals(2.718281828459045, reader.nextDouble()); [EOL]     reader.endArray(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testDoubles() throws IOException { [EOL]     String json = "[-0.0," + "1.0," + "1.7976931348623157E308," + "4.9E-324," + "0.0," + "-0.5," + "2.2250738585072014E-308," + "3.141592653589793," + "2.718281828459045]"; [EOL]     JsonReader reader = new JsonReader(new StringReader(json)); [EOL]     reader.beginArray(); [EOL]     assertEquals(-0.0, reader.nextDouble()); [EOL]     assertEquals(1.0, reader.nextDouble()); [EOL]     assertEquals(1.7976931348623157E308, reader.nextDouble()); [EOL]     assertEquals(4.9E-324, reader.nextDouble()); [EOL]     assertEquals(0.0, reader.nextDouble()); [EOL]     assertEquals(-0.5, reader.nextDouble()); [EOL]     assertEquals(2.2250738585072014E-308, reader.nextDouble()); [EOL]     assertEquals(3.141592653589793, reader.nextDouble()); [EOL]     assertEquals(2.718281828459045, reader.nextDouble()); [EOL]     reader.endArray(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testDoubles() throws IOException { [EOL]     String json = "[-0.0," + "1.0," + "1.7976931348623157E308," + "4.9E-324," + "0.0," + "-0.5," + "2.2250738585072014E-308," + "3.141592653589793," + "2.718281828459045]"; [EOL]     JsonReader reader = new JsonReader(new StringReader(json)); [EOL]     reader.beginArray(); [EOL]     assertEquals(-0.0, reader.nextDouble()); [EOL]     assertEquals(1.0, reader.nextDouble()); [EOL]     assertEquals(1.7976931348623157E308, reader.nextDouble()); [EOL]     assertEquals(4.9E-324, reader.nextDouble()); [EOL]     assertEquals(0.0, reader.nextDouble()); [EOL]     assertEquals(-0.5, reader.nextDouble()); [EOL]     assertEquals(2.2250738585072014E-308, reader.nextDouble()); [EOL]     assertEquals(3.141592653589793, reader.nextDouble()); [EOL]     assertEquals(2.718281828459045, reader.nextDouble()); [EOL]     reader.endArray(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testDoubles() throws IOException { [EOL]     String json = "[-0.0," + "1.0," + "1.7976931348623157E308," + "4.9E-324," + "0.0," + "-0.5," + "2.2250738585072014E-308," + "3.141592653589793," + "2.718281828459045]"; [EOL]     JsonReader reader = new JsonReader(new StringReader(json)); [EOL]     reader.beginArray(); [EOL]     assertEquals(-0.0, reader.nextDouble()); [EOL]     assertEquals(1.0, reader.nextDouble()); [EOL]     assertEquals(1.7976931348623157E308, reader.nextDouble()); [EOL]     assertEquals(4.9E-324, reader.nextDouble()); [EOL]     assertEquals(0.0, reader.nextDouble()); [EOL]     assertEquals(-0.5, reader.nextDouble()); [EOL]     assertEquals(2.2250738585072014E-308, reader.nextDouble()); [EOL]     assertEquals(3.141592653589793, reader.nextDouble()); [EOL]     assertEquals(2.718281828459045, reader.nextDouble()); [EOL]     reader.endArray(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testNextFailuresDoNotAdvance() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{\"a\":true}")); [EOL]     reader.beginObject(); [EOL]     try { [EOL]         reader.nextString(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     assertEquals("a", reader.nextName()); [EOL]     try { [EOL]         reader.nextName(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     try { [EOL]         reader.beginArray(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     try { [EOL]         reader.endArray(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     try { [EOL]         reader.beginObject(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     try { [EOL]         reader.endObject(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     try { [EOL]         reader.nextString(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     try { [EOL]         reader.nextName(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     try { [EOL]         reader.beginArray(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     try { [EOL]         reader.endArray(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     reader.endObject(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL]     reader.close(); [EOL] }
public void testNextFailuresDoNotAdvance() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{\"a\":true}")); [EOL]     reader.beginObject(); [EOL]     try { [EOL]         reader.nextString(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     assertEquals("a", reader.nextName()); [EOL]     try { [EOL]         reader.nextName(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     try { [EOL]         reader.beginArray(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     try { [EOL]         reader.endArray(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     try { [EOL]         reader.beginObject(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     try { [EOL]         reader.endObject(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     try { [EOL]         reader.nextString(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     try { [EOL]         reader.nextName(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     try { [EOL]         reader.beginArray(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     try { [EOL]         reader.endArray(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     reader.endObject(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL]     reader.close(); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testDoubles() throws IOException { [EOL]     String json = "[-0.0," + "1.0," + "1.7976931348623157E308," + "4.9E-324," + "0.0," + "-0.5," + "2.2250738585072014E-308," + "3.141592653589793," + "2.718281828459045]"; [EOL]     JsonReader reader = new JsonReader(new StringReader(json)); [EOL]     reader.beginArray(); [EOL]     assertEquals(-0.0, reader.nextDouble()); [EOL]     assertEquals(1.0, reader.nextDouble()); [EOL]     assertEquals(1.7976931348623157E308, reader.nextDouble()); [EOL]     assertEquals(4.9E-324, reader.nextDouble()); [EOL]     assertEquals(0.0, reader.nextDouble()); [EOL]     assertEquals(-0.5, reader.nextDouble()); [EOL]     assertEquals(2.2250738585072014E-308, reader.nextDouble()); [EOL]     assertEquals(3.141592653589793, reader.nextDouble()); [EOL]     assertEquals(2.718281828459045, reader.nextDouble()); [EOL]     reader.endArray(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testReadEmptyObject() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{}")); [EOL]     reader.beginObject(); [EOL]     assertFalse(reader.hasNext()); [EOL]     reader.endObject(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testNextFailuresDoNotAdvance() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{\"a\":true}")); [EOL]     reader.beginObject(); [EOL]     try { [EOL]         reader.nextString(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     assertEquals("a", reader.nextName()); [EOL]     try { [EOL]         reader.nextName(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     try { [EOL]         reader.beginArray(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     try { [EOL]         reader.endArray(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     try { [EOL]         reader.beginObject(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     try { [EOL]         reader.endObject(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     try { [EOL]         reader.nextString(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     try { [EOL]         reader.nextName(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     try { [EOL]         reader.beginArray(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     try { [EOL]         reader.endArray(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     reader.endObject(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL]     reader.close(); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testStrictSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextBoolean(); [EOL]         reader.nextBoolean(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDateSerializationWithPattern() throws Exception { [EOL]     String pattern = "yyyy-MM-dd"; [EOL]     DateFormat formatter = new SimpleDateFormat(pattern); [EOL]     Gson gson = new GsonBuilder().setDateFormat(DateFormat.FULL).setDateFormat(pattern).create(); [EOL]     Date now = new Date(); [EOL]     String json = gson.toJson(now); [EOL]     assertEquals("\"" + formatter.format(now) + "\"", json); [EOL] }
public void testDateSerializationWithPattern() throws Exception { [EOL]     String pattern = "yyyy-MM-dd"; [EOL]     DateFormat formatter = new SimpleDateFormat(pattern); [EOL]     Gson gson = new GsonBuilder().setDateFormat(DateFormat.FULL).setDateFormat(pattern).create(); [EOL]     Date now = new Date(); [EOL]     String json = gson.toJson(now); [EOL]     assertEquals("\"" + formatter.format(now) + "\"", json); [EOL] }
public void testDateSerializationWithPattern() throws Exception { [EOL]     String pattern = "yyyy-MM-dd"; [EOL]     DateFormat formatter = new SimpleDateFormat(pattern); [EOL]     Gson gson = new GsonBuilder().setDateFormat(DateFormat.FULL).setDateFormat(pattern).create(); [EOL]     Date now = new Date(); [EOL]     String json = gson.toJson(now); [EOL]     assertEquals("\"" + formatter.format(now) + "\"", json); [EOL] }
public void testDefaultJavaSqlDateDeserialization() { [EOL]     String json = "'Dec 3, 2009'"; [EOL]     java.sql.Date extracted = gson.fromJson(json, java.sql.Date.class); [EOL]     assertEqualsDate(extracted, 2009, 11, 3); [EOL] }
public void testDefaultJavaSqlDateDeserialization() { [EOL]     String json = "'Dec 3, 2009'"; [EOL]     java.sql.Date extracted = gson.fromJson(json, java.sql.Date.class); [EOL]     assertEqualsDate(extracted, 2009, 11, 3); [EOL] }
public void testDefaultJavaSqlDateDeserialization() { [EOL]     String json = "'Dec 3, 2009'"; [EOL]     java.sql.Date extracted = gson.fromJson(json, java.sql.Date.class); [EOL]     assertEqualsDate(extracted, 2009, 11, 3); [EOL] }
public void testDefaultJavaSqlTimeSerialization() { [EOL]     Time now = new Time(1259875082000L); [EOL]     String json = gson.toJson(now); [EOL]     assertEquals("\"01:18:02 PM\"", json); [EOL] }
public void testNullsInListDeserialization() { [EOL]     List<String> expected = new ArrayList<String>(); [EOL]     expected.add("foo"); [EOL]     expected.add(null); [EOL]     expected.add("bar"); [EOL]     String json = "[\"foo\",null,\"bar\"]"; [EOL]     Type expectedType = new TypeToken<List<String>>() { [EOL]     }.getType(); [EOL]     List<String> target = gson.fromJson(json, expectedType); [EOL]     for (int i = 0; i < expected.size(); ++i) { [EOL]         assertEquals(expected.get(i), target.get(i)); [EOL]     } [EOL] }
public void testNullsInListDeserialization() { [EOL]     List<String> expected = new ArrayList<String>(); [EOL]     expected.add("foo"); [EOL]     expected.add(null); [EOL]     expected.add("bar"); [EOL]     String json = "[\"foo\",null,\"bar\"]"; [EOL]     Type expectedType = new TypeToken<List<String>>() { [EOL]     }.getType(); [EOL]     List<String> target = gson.fromJson(json, expectedType); [EOL]     for (int i = 0; i < expected.size(); ++i) { [EOL]         assertEquals(expected.get(i), target.get(i)); [EOL]     } [EOL] }
public void testNullsInListDeserialization() { [EOL]     List<String> expected = new ArrayList<String>(); [EOL]     expected.add("foo"); [EOL]     expected.add(null); [EOL]     expected.add("bar"); [EOL]     String json = "[\"foo\",null,\"bar\"]"; [EOL]     Type expectedType = new TypeToken<List<String>>() { [EOL]     }.getType(); [EOL]     List<String> target = gson.fromJson(json, expectedType); [EOL]     for (int i = 0; i < expected.size(); ++i) { [EOL]         assertEquals(expected.get(i), target.get(i)); [EOL]     } [EOL] }
public void testBigDecimalFieldDeserialization() { [EOL]     ClassWithBigDecimal expected = new ClassWithBigDecimal("-122.01e-21"); [EOL]     String json = expected.getExpectedJson(); [EOL]     ClassWithBigDecimal actual = gson.fromJson(json, ClassWithBigDecimal.class); [EOL]     assertEquals(expected.value, actual.value); [EOL] }
public void testBigDecimalFieldDeserialization() { [EOL]     ClassWithBigDecimal expected = new ClassWithBigDecimal("-122.01e-21"); [EOL]     String json = expected.getExpectedJson(); [EOL]     ClassWithBigDecimal actual = gson.fromJson(json, ClassWithBigDecimal.class); [EOL]     assertEquals(expected.value, actual.value); [EOL] }
public void testBadValueForBigDecimalDeserialization() { [EOL]     try { [EOL]         gson.fromJson("{\"value\"=1.5e-1.0031}", ClassWithBigDecimal.class); [EOL]         fail("Exponent of a BigDecimal must be an integer value."); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testBigIntegerFieldSerialization() { [EOL]     ClassWithBigInteger target = new ClassWithBigInteger("23232323215323234234324324324324324324"); [EOL]     String json = gson.toJson(target); [EOL]     assertEquals(target.getExpectedJson(), json); [EOL] }
public void testBigIntegerFieldSerialization() { [EOL]     ClassWithBigInteger target = new ClassWithBigInteger("23232323215323234234324324324324324324"); [EOL]     String json = gson.toJson(target); [EOL]     assertEquals(target.getExpectedJson(), json); [EOL] }
public void testNumberSerialization() { [EOL]     Number expected = 1L; [EOL]     String json = gson.toJson(expected); [EOL]     assertEquals(expected.toString(), json); [EOL]     json = gson.toJson(expected, Number.class); [EOL]     assertEquals(expected.toString(), json); [EOL] }
public void testNumberSerialization() { [EOL]     Number expected = 1L; [EOL]     String json = gson.toJson(expected); [EOL]     assertEquals(expected.toString(), json); [EOL]     json = gson.toJson(expected, Number.class); [EOL]     assertEquals(expected.toString(), json); [EOL] }
public void testNumberSerialization() { [EOL]     Number expected = 1L; [EOL]     String json = gson.toJson(expected); [EOL]     assertEquals(expected.toString(), json); [EOL]     json = gson.toJson(expected, Number.class); [EOL]     assertEquals(expected.toString(), json); [EOL] }
public void testNumberSerialization() { [EOL]     Number expected = 1L; [EOL]     String json = gson.toJson(expected); [EOL]     assertEquals(expected.toString(), json); [EOL]     json = gson.toJson(expected, Number.class); [EOL]     assertEquals(expected.toString(), json); [EOL] }
public void testSelfReferenceSerialization() throws Exception { [EOL]     ClassOverridingEquals objA = new ClassOverridingEquals(); [EOL]     objA.ref = objA; [EOL]     try { [EOL]         gson.toJson(objA); [EOL]         fail("Circular reference to self can not be serialized!"); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL] }
public void testSelfReferenceSerialization() throws Exception { [EOL]     ClassOverridingEquals objA = new ClassOverridingEquals(); [EOL]     objA.ref = objA; [EOL]     try { [EOL]         gson.toJson(objA); [EOL]         fail("Circular reference to self can not be serialized!"); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL] }
public void testSelfReferenceSerialization() throws Exception { [EOL]     ClassOverridingEquals objA = new ClassOverridingEquals(); [EOL]     objA.ref = objA; [EOL]     try { [EOL]         gson.toJson(objA); [EOL]         fail("Circular reference to self can not be serialized!"); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL] }
public void testSelfReferenceSerialization() throws Exception { [EOL]     ClassOverridingEquals objA = new ClassOverridingEquals(); [EOL]     objA.ref = objA; [EOL]     try { [EOL]         gson.toJson(objA); [EOL]         fail("Circular reference to self can not be serialized!"); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL] }
public void testSelfReferenceSerialization() throws Exception { [EOL]     ClassOverridingEquals objA = new ClassOverridingEquals(); [EOL]     objA.ref = objA; [EOL]     try { [EOL]         gson.toJson(objA); [EOL]         fail("Circular reference to self can not be serialized!"); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL] }
public void testQueueSerialization() { [EOL]     Queue<String> queue = new LinkedList<String>(); [EOL]     queue.add("a1"); [EOL]     queue.add("a2"); [EOL]     Type queueType = new TypeToken<Queue<String>>() { [EOL]     }.getType(); [EOL]     String json = gson.toJson(queue, queueType); [EOL]     assertTrue(json.contains("a1")); [EOL]     assertTrue(json.contains("a2")); [EOL] }
public void testQueueSerialization() { [EOL]     Queue<String> queue = new LinkedList<String>(); [EOL]     queue.add("a1"); [EOL]     queue.add("a2"); [EOL]     Type queueType = new TypeToken<Queue<String>>() { [EOL]     }.getType(); [EOL]     String json = gson.toJson(queue, queueType); [EOL]     assertTrue(json.contains("a1")); [EOL]     assertTrue(json.contains("a2")); [EOL] }
public void testQueueSerialization() { [EOL]     Queue<String> queue = new LinkedList<String>(); [EOL]     queue.add("a1"); [EOL]     queue.add("a2"); [EOL]     Type queueType = new TypeToken<Queue<String>>() { [EOL]     }.getType(); [EOL]     String json = gson.toJson(queue, queueType); [EOL]     assertTrue(json.contains("a1")); [EOL]     assertTrue(json.contains("a2")); [EOL] }
public void testQueueSerialization() { [EOL]     Queue<String> queue = new LinkedList<String>(); [EOL]     queue.add("a1"); [EOL]     queue.add("a2"); [EOL]     Type queueType = new TypeToken<Queue<String>>() { [EOL]     }.getType(); [EOL]     String json = gson.toJson(queue, queueType); [EOL]     assertTrue(json.contains("a1")); [EOL]     assertTrue(json.contains("a2")); [EOL] }
public void testQueueSerialization() { [EOL]     Queue<String> queue = new LinkedList<String>(); [EOL]     queue.add("a1"); [EOL]     queue.add("a2"); [EOL]     Type queueType = new TypeToken<Queue<String>>() { [EOL]     }.getType(); [EOL]     String json = gson.toJson(queue, queueType); [EOL]     assertTrue(json.contains("a1")); [EOL]     assertTrue(json.contains("a2")); [EOL] }
public void testQueueSerialization() { [EOL]     Queue<String> queue = new LinkedList<String>(); [EOL]     queue.add("a1"); [EOL]     queue.add("a2"); [EOL]     Type queueType = new TypeToken<Queue<String>>() { [EOL]     }.getType(); [EOL]     String json = gson.toJson(queue, queueType); [EOL]     assertTrue(json.contains("a1")); [EOL]     assertTrue(json.contains("a2")); [EOL] }
public void testQueueSerialization() { [EOL]     Queue<String> queue = new LinkedList<String>(); [EOL]     queue.add("a1"); [EOL]     queue.add("a2"); [EOL]     Type queueType = new TypeToken<Queue<String>>() { [EOL]     }.getType(); [EOL]     String json = gson.toJson(queue, queueType); [EOL]     assertTrue(json.contains("a1")); [EOL]     assertTrue(json.contains("a2")); [EOL] }
public void testQueueSerialization() { [EOL]     Queue<String> queue = new LinkedList<String>(); [EOL]     queue.add("a1"); [EOL]     queue.add("a2"); [EOL]     Type queueType = new TypeToken<Queue<String>>() { [EOL]     }.getType(); [EOL]     String json = gson.toJson(queue, queueType); [EOL]     assertTrue(json.contains("a1")); [EOL]     assertTrue(json.contains("a2")); [EOL] }
public void testNonMapConstruction() throws Exception { [EOL]     try { [EOL]         Type parameterizedMapType = new TypeToken<List<String>>() { [EOL]         }.getType(); [EOL]         new TypeInfoMap(parameterizedMapType); [EOL]         fail("The raw type must be a Map"); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL] }
public void testNonMapConstruction() throws Exception { [EOL]     try { [EOL]         Type parameterizedMapType = new TypeToken<List<String>>() { [EOL]         }.getType(); [EOL]         new TypeInfoMap(parameterizedMapType); [EOL]         fail("The raw type must be a Map"); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL] }
public void testNonMapConstruction() throws Exception { [EOL]     try { [EOL]         Type parameterizedMapType = new TypeToken<List<String>>() { [EOL]         }.getType(); [EOL]         new TypeInfoMap(parameterizedMapType); [EOL]         fail("The raw type must be a Map"); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL] }
public void testIgnoreLaterVersionClassSerialization() { [EOL]     Gson gson = builder.setVersion(1.0).create(); [EOL]     assertEquals("", gson.toJson(new Version1_2())); [EOL] }
public void testIgnoreLaterVersionClassSerialization() { [EOL]     Gson gson = builder.setVersion(1.0).create(); [EOL]     assertEquals("", gson.toJson(new Version1_2())); [EOL] }
public void testIgnoreLaterVersionClassSerialization() { [EOL]     Gson gson = builder.setVersion(1.0).create(); [EOL]     assertEquals("", gson.toJson(new Version1_2())); [EOL] }
public void testIgnoreLaterVersionClassSerialization() { [EOL]     Gson gson = builder.setVersion(1.0).create(); [EOL]     assertEquals("", gson.toJson(new Version1_2())); [EOL] }
public void testIgnoreLaterVersionClassSerialization() { [EOL]     Gson gson = builder.setVersion(1.0).create(); [EOL]     assertEquals("", gson.toJson(new Version1_2())); [EOL] }
public void testIgnoreLaterVersionClassSerialization() { [EOL]     Gson gson = builder.setVersion(1.0).create(); [EOL]     assertEquals("", gson.toJson(new Version1_2())); [EOL] }
public void testIgnoreLaterVersionClassSerialization() { [EOL]     Gson gson = builder.setVersion(1.0).create(); [EOL]     assertEquals("", gson.toJson(new Version1_2())); [EOL] }
public void testIgnoreLaterVersionClassSerialization() { [EOL]     Gson gson = builder.setVersion(1.0).create(); [EOL]     assertEquals("", gson.toJson(new Version1_2())); [EOL] }
public void testIgnoreLaterVersionClassSerialization() { [EOL]     Gson gson = builder.setVersion(1.0).create(); [EOL]     assertEquals("", gson.toJson(new Version1_2())); [EOL] }
public void testIgnoreLaterVersionClassSerialization() { [EOL]     Gson gson = builder.setVersion(1.0).create(); [EOL]     assertEquals("", gson.toJson(new Version1_2())); [EOL] }
public void testNonMapConstruction() throws Exception { [EOL]     try { [EOL]         Type parameterizedMapType = new TypeToken<List<String>>() { [EOL]         }.getType(); [EOL]         new TypeInfoMap(parameterizedMapType); [EOL]         fail("The raw type must be a Map"); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL] }
public void testNonMapConstruction() throws Exception { [EOL]     try { [EOL]         Type parameterizedMapType = new TypeToken<List<String>>() { [EOL]         }.getType(); [EOL]         new TypeInfoMap(parameterizedMapType); [EOL]         fail("The raw type must be a Map"); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testBigIntegerInASingleElementArrayDeserialization() { [EOL]     BigInteger expected = new BigInteger("34343434343424242423432323243243242"); [EOL]     BigInteger actual = gson.fromJson("[34343434343424242423432323243243242]", BigInteger.class); [EOL]     assertEquals(expected, actual); [EOL] }
public void testBigIntegerInASingleElementArrayDeserialization() { [EOL]     BigInteger expected = new BigInteger("34343434343424242423432323243243242"); [EOL]     BigInteger actual = gson.fromJson("[34343434343424242423432323243243242]", BigInteger.class); [EOL]     assertEquals(expected, actual); [EOL] }
public void testReadWriteTwoObjects() throws IOException { [EOL]     Gson gson = new Gson(); [EOL]     CharArrayWriter writer = new CharArrayWriter(); [EOL]     BagOfPrimitives expectedOne = new BagOfPrimitives(1, 1, true, "one"); [EOL]     writer.write(gson.toJson(expectedOne).toCharArray()); [EOL]     BagOfPrimitives expectedTwo = new BagOfPrimitives(2, 2, false, "two"); [EOL]     writer.write(gson.toJson(expectedTwo).toCharArray()); [EOL]     CharArrayReader reader = new CharArrayReader(writer.toCharArray()); [EOL]     JsonStreamParser parser = new JsonStreamParser(reader); [EOL]     BagOfPrimitives actualOne = gson.fromJson(parser.next(), BagOfPrimitives.class); [EOL]     assertEquals("one", actualOne.stringValue); [EOL]     BagOfPrimitives actualTwo = gson.fromJson(parser.next(), BagOfPrimitives.class); [EOL]     assertEquals("two", actualTwo.stringValue); [EOL]     assertFalse(parser.hasNext()); [EOL] }
public void testReadWriteTwoObjects() throws IOException { [EOL]     Gson gson = new Gson(); [EOL]     CharArrayWriter writer = new CharArrayWriter(); [EOL]     BagOfPrimitives expectedOne = new BagOfPrimitives(1, 1, true, "one"); [EOL]     writer.write(gson.toJson(expectedOne).toCharArray()); [EOL]     BagOfPrimitives expectedTwo = new BagOfPrimitives(2, 2, false, "two"); [EOL]     writer.write(gson.toJson(expectedTwo).toCharArray()); [EOL]     CharArrayReader reader = new CharArrayReader(writer.toCharArray()); [EOL]     JsonStreamParser parser = new JsonStreamParser(reader); [EOL]     BagOfPrimitives actualOne = gson.fromJson(parser.next(), BagOfPrimitives.class); [EOL]     assertEquals("one", actualOne.stringValue); [EOL]     BagOfPrimitives actualTwo = gson.fromJson(parser.next(), BagOfPrimitives.class); [EOL]     assertEquals("two", actualTwo.stringValue); [EOL]     assertFalse(parser.hasNext()); [EOL] }
public void testMakeUnmodifiable() throws Exception { [EOL]     paramMap.makeUnmodifiable(); [EOL]     try { [EOL]         paramMap.register(String.class, "blah"); [EOL]         fail("Can not register handlers when map is unmodifiable"); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL] }
public void testMakeUnmodifiable() throws Exception { [EOL]     paramMap.makeUnmodifiable(); [EOL]     try { [EOL]         paramMap.register(String.class, "blah"); [EOL]         fail("Can not register handlers when map is unmodifiable"); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL] }
public void testMakeUnmodifiable() throws Exception { [EOL]     paramMap.makeUnmodifiable(); [EOL]     try { [EOL]         paramMap.register(String.class, "blah"); [EOL]         fail("Can not register handlers when map is unmodifiable"); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL] }
public void testMakeUnmodifiable() throws Exception { [EOL]     paramMap.makeUnmodifiable(); [EOL]     try { [EOL]         paramMap.register(String.class, "blah"); [EOL]         fail("Can not register handlers when map is unmodifiable"); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL] }
public void testToRawClassForGenericClasses() { [EOL]     assertEquals(Map.class, TypeUtils.toRawClass(MAP_TYPE)); [EOL] }
public void testToRawClassForGenericClasses() { [EOL]     assertEquals(Map.class, TypeUtils.toRawClass(MAP_TYPE)); [EOL] }
public void testToRawClassForGenericClasses() { [EOL]     assertEquals(Map.class, TypeUtils.toRawClass(MAP_TYPE)); [EOL] }
public void testToRawClassForGenericClasses() { [EOL]     assertEquals(Map.class, TypeUtils.toRawClass(MAP_TYPE)); [EOL] }
public void testToRawClassForGenericClasses() { [EOL]     assertEquals(Map.class, TypeUtils.toRawClass(MAP_TYPE)); [EOL] }
public void testBagOfPrimitiveWrappersDeserialization() throws Exception { [EOL]     BagOfPrimitiveWrappers target = new BagOfPrimitiveWrappers(10L, 20, false); [EOL]     String jsonString = target.getExpectedJson(); [EOL]     target = gson.fromJson(jsonString, BagOfPrimitiveWrappers.class); [EOL]     assertEquals(jsonString, target.getExpectedJson()); [EOL] }
public void testBagOfPrimitiveWrappersDeserialization() throws Exception { [EOL]     BagOfPrimitiveWrappers target = new BagOfPrimitiveWrappers(10L, 20, false); [EOL]     String jsonString = target.getExpectedJson(); [EOL]     target = gson.fromJson(jsonString, BagOfPrimitiveWrappers.class); [EOL]     assertEquals(jsonString, target.getExpectedJson()); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testReadWriteTwoObjects() throws IOException { [EOL]     Gson gson = new Gson(); [EOL]     CharArrayWriter writer = new CharArrayWriter(); [EOL]     BagOfPrimitives expectedOne = new BagOfPrimitives(1, 1, true, "one"); [EOL]     writer.write(gson.toJson(expectedOne).toCharArray()); [EOL]     BagOfPrimitives expectedTwo = new BagOfPrimitives(2, 2, false, "two"); [EOL]     writer.write(gson.toJson(expectedTwo).toCharArray()); [EOL]     CharArrayReader reader = new CharArrayReader(writer.toCharArray()); [EOL]     JsonStreamParser parser = new JsonStreamParser(reader); [EOL]     BagOfPrimitives actualOne = gson.fromJson(parser.next(), BagOfPrimitives.class); [EOL]     assertEquals("one", actualOne.stringValue); [EOL]     BagOfPrimitives actualTwo = gson.fromJson(parser.next(), BagOfPrimitives.class); [EOL]     assertEquals("two", actualTwo.stringValue); [EOL]     assertFalse(parser.hasNext()); [EOL] }
public void testReadWriteTwoObjects() throws IOException { [EOL]     Gson gson = new Gson(); [EOL]     CharArrayWriter writer = new CharArrayWriter(); [EOL]     BagOfPrimitives expectedOne = new BagOfPrimitives(1, 1, true, "one"); [EOL]     writer.write(gson.toJson(expectedOne).toCharArray()); [EOL]     BagOfPrimitives expectedTwo = new BagOfPrimitives(2, 2, false, "two"); [EOL]     writer.write(gson.toJson(expectedTwo).toCharArray()); [EOL]     CharArrayReader reader = new CharArrayReader(writer.toCharArray()); [EOL]     JsonStreamParser parser = new JsonStreamParser(reader); [EOL]     BagOfPrimitives actualOne = gson.fromJson(parser.next(), BagOfPrimitives.class); [EOL]     assertEquals("one", actualOne.stringValue); [EOL]     BagOfPrimitives actualTwo = gson.fromJson(parser.next(), BagOfPrimitives.class); [EOL]     assertEquals("two", actualTwo.stringValue); [EOL]     assertFalse(parser.hasNext()); [EOL] }
public void testReadWriteTwoObjects() throws IOException { [EOL]     Gson gson = new Gson(); [EOL]     CharArrayWriter writer = new CharArrayWriter(); [EOL]     BagOfPrimitives expectedOne = new BagOfPrimitives(1, 1, true, "one"); [EOL]     writer.write(gson.toJson(expectedOne).toCharArray()); [EOL]     BagOfPrimitives expectedTwo = new BagOfPrimitives(2, 2, false, "two"); [EOL]     writer.write(gson.toJson(expectedTwo).toCharArray()); [EOL]     CharArrayReader reader = new CharArrayReader(writer.toCharArray()); [EOL]     JsonStreamParser parser = new JsonStreamParser(reader); [EOL]     BagOfPrimitives actualOne = gson.fromJson(parser.next(), BagOfPrimitives.class); [EOL]     assertEquals("one", actualOne.stringValue); [EOL]     BagOfPrimitives actualTwo = gson.fromJson(parser.next(), BagOfPrimitives.class); [EOL]     assertEquals("two", actualTwo.stringValue); [EOL]     assertFalse(parser.hasNext()); [EOL] }
public void testObject() throws Exception { [EOL]     TypeInfo typeInfo = new TypeInfo(Object.class); [EOL]     assertFalse(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isPrimitive()); [EOL]     assertEquals(Object.class, typeInfo.getRawClass()); [EOL] }
public void testWrappedExceptionPropagation() throws Exception { [EOL]     IllegalArgumentException exceptionToThrow = new IllegalArgumentException(); [EOL]     JsonDeserializerExceptionWrapper<String> wrappedJsonSerializer = new JsonDeserializerExceptionWrapper<String>(new ExceptionJsonDeserializer(exceptionToThrow)); [EOL]     try { [EOL]         wrappedJsonSerializer.deserialize(PRIMITIVE_ELEMENT, String.class, null); [EOL]         fail("JsonParseException should have been thrown"); [EOL]     } catch (JsonParseException expected) { [EOL]         assertEquals(exceptionToThrow, expected.getCause()); [EOL]     } [EOL] }
public void testWrappedExceptionPropagation() throws Exception { [EOL]     IllegalArgumentException exceptionToThrow = new IllegalArgumentException(); [EOL]     JsonDeserializerExceptionWrapper<String> wrappedJsonSerializer = new JsonDeserializerExceptionWrapper<String>(new ExceptionJsonDeserializer(exceptionToThrow)); [EOL]     try { [EOL]         wrappedJsonSerializer.deserialize(PRIMITIVE_ELEMENT, String.class, null); [EOL]         fail("JsonParseException should have been thrown"); [EOL]     } catch (JsonParseException expected) { [EOL]         assertEquals(exceptionToThrow, expected.getCause()); [EOL]     } [EOL] }
public void testWrappedExceptionPropagation() throws Exception { [EOL]     IllegalArgumentException exceptionToThrow = new IllegalArgumentException(); [EOL]     JsonDeserializerExceptionWrapper<String> wrappedJsonSerializer = new JsonDeserializerExceptionWrapper<String>(new ExceptionJsonDeserializer(exceptionToThrow)); [EOL]     try { [EOL]         wrappedJsonSerializer.deserialize(PRIMITIVE_ELEMENT, String.class, null); [EOL]         fail("JsonParseException should have been thrown"); [EOL]     } catch (JsonParseException expected) { [EOL]         assertEquals(exceptionToThrow, expected.getCause()); [EOL]     } [EOL] }
public void testNeverSkipsClass() throws Exception { [EOL]     assertFalse(strategy.shouldSkipClass(String.class)); [EOL] }
public void testUpperCaseFirstLetter() throws Exception { [EOL]     ModifyFirstLetterNamingPolicy policy = new ModifyFirstLetterNamingPolicy(ModifyFirstLetterNamingPolicy.LetterModifier.UPPER); [EOL]     assertEquals("Blah", policy.translateName("blah", String.class, null)); [EOL]     assertEquals("Blah", policy.translateName("Blah", String.class, null)); [EOL] }
public void testUpperCaseFirstLetter() throws Exception { [EOL]     ModifyFirstLetterNamingPolicy policy = new ModifyFirstLetterNamingPolicy(ModifyFirstLetterNamingPolicy.LetterModifier.UPPER); [EOL]     assertEquals("Blah", policy.translateName("blah", String.class, null)); [EOL]     assertEquals("Blah", policy.translateName("Blah", String.class, null)); [EOL] }
public void testUpperCaseFirstLetter() throws Exception { [EOL]     ModifyFirstLetterNamingPolicy policy = new ModifyFirstLetterNamingPolicy(ModifyFirstLetterNamingPolicy.LetterModifier.UPPER); [EOL]     assertEquals("Blah", policy.translateName("blah", String.class, null)); [EOL]     assertEquals("Blah", policy.translateName("Blah", String.class, null)); [EOL] }
public void testUpperCaseFirstLetter() throws Exception { [EOL]     ModifyFirstLetterNamingPolicy policy = new ModifyFirstLetterNamingPolicy(ModifyFirstLetterNamingPolicy.LetterModifier.UPPER); [EOL]     assertEquals("Blah", policy.translateName("blah", String.class, null)); [EOL]     assertEquals("Blah", policy.translateName("Blah", String.class, null)); [EOL] }
public void testUpperCaseFirstLetter() throws Exception { [EOL]     ModifyFirstLetterNamingPolicy policy = new ModifyFirstLetterNamingPolicy(ModifyFirstLetterNamingPolicy.LetterModifier.UPPER); [EOL]     assertEquals("Blah", policy.translateName("blah", String.class, null)); [EOL]     assertEquals("Blah", policy.translateName("Blah", String.class, null)); [EOL] }
public void testUpperCaseFirstLetter() throws Exception { [EOL]     ModifyFirstLetterNamingPolicy policy = new ModifyFirstLetterNamingPolicy(ModifyFirstLetterNamingPolicy.LetterModifier.UPPER); [EOL]     assertEquals("Blah", policy.translateName("blah", String.class, null)); [EOL]     assertEquals("Blah", policy.translateName("Blah", String.class, null)); [EOL] }
public void testUpperCaseFirstLetter() throws Exception { [EOL]     ModifyFirstLetterNamingPolicy policy = new ModifyFirstLetterNamingPolicy(ModifyFirstLetterNamingPolicy.LetterModifier.UPPER); [EOL]     assertEquals("Blah", policy.translateName("blah", String.class, null)); [EOL]     assertEquals("Blah", policy.translateName("Blah", String.class, null)); [EOL] }
public void testUpperCaseFirstLetter() throws Exception { [EOL]     ModifyFirstLetterNamingPolicy policy = new ModifyFirstLetterNamingPolicy(ModifyFirstLetterNamingPolicy.LetterModifier.UPPER); [EOL]     assertEquals("Blah", policy.translateName("blah", String.class, null)); [EOL]     assertEquals("Blah", policy.translateName("Blah", String.class, null)); [EOL] }
public void testUpperCaseFirstLetter() throws Exception { [EOL]     ModifyFirstLetterNamingPolicy policy = new ModifyFirstLetterNamingPolicy(ModifyFirstLetterNamingPolicy.LetterModifier.UPPER); [EOL]     assertEquals("Blah", policy.translateName("blah", String.class, null)); [EOL]     assertEquals("Blah", policy.translateName("Blah", String.class, null)); [EOL] }
public void testUpperCaseFirstLetter() throws Exception { [EOL]     ModifyFirstLetterNamingPolicy policy = new ModifyFirstLetterNamingPolicy(ModifyFirstLetterNamingPolicy.LetterModifier.UPPER); [EOL]     assertEquals("Blah", policy.translateName("blah", String.class, null)); [EOL]     assertEquals("Blah", policy.translateName("Blah", String.class, null)); [EOL] }
public void testUpperCaseFirstLetter() throws Exception { [EOL]     ModifyFirstLetterNamingPolicy policy = new ModifyFirstLetterNamingPolicy(ModifyFirstLetterNamingPolicy.LetterModifier.UPPER); [EOL]     assertEquals("Blah", policy.translateName("blah", String.class, null)); [EOL]     assertEquals("Blah", policy.translateName("Blah", String.class, null)); [EOL] }
public void testJsonObjectSerialization() { [EOL]     Gson gson = new GsonBuilder().serializeNulls().create(); [EOL]     JsonObject obj = new JsonObject(); [EOL]     String json = gson.toJson(obj); [EOL]     assertEquals("{}", json); [EOL] }
public void testJsonObjectSerialization() { [EOL]     Gson gson = new GsonBuilder().serializeNulls().create(); [EOL]     JsonObject obj = new JsonObject(); [EOL]     String json = gson.toJson(obj); [EOL]     assertEquals("{}", json); [EOL] }
public void testIgnoreLaterVersionClassSerialization() { [EOL]     Gson gson = builder.setVersion(1.0).create(); [EOL]     assertEquals("", gson.toJson(new Version1_2())); [EOL] }
public void testIgnoreLaterVersionClassSerialization() { [EOL]     Gson gson = builder.setVersion(1.0).create(); [EOL]     assertEquals("", gson.toJson(new Version1_2())); [EOL] }
public void testIgnoreLaterVersionClassSerialization() { [EOL]     Gson gson = builder.setVersion(1.0).create(); [EOL]     assertEquals("", gson.toJson(new Version1_2())); [EOL] }
public void testIgnoreLaterVersionClassSerialization() { [EOL]     Gson gson = builder.setVersion(1.0).create(); [EOL]     assertEquals("", gson.toJson(new Version1_2())); [EOL] }
public void testIgnoreLaterVersionClassSerialization() { [EOL]     Gson gson = builder.setVersion(1.0).create(); [EOL]     assertEquals("", gson.toJson(new Version1_2())); [EOL] }
public void testIgnoreLaterVersionClassSerialization() { [EOL]     Gson gson = builder.setVersion(1.0).create(); [EOL]     assertEquals("", gson.toJson(new Version1_2())); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testJsonObjectSerialization() { [EOL]     Gson gson = new GsonBuilder().serializeNulls().create(); [EOL]     JsonObject obj = new JsonObject(); [EOL]     String json = gson.toJson(obj); [EOL]     assertEquals("{}", json); [EOL] }
public void testUserDefinedExclusionPolicies() throws Exception { [EOL]     Gson gson = new GsonBuilder().setExclusionStrategies(new UserDefinedExclusionStrategy(String.class)).create(); [EOL]     String json = gson.toJson(new TestTypes.StringWrapper("someValue")); [EOL]     assertEquals("{}", json); [EOL] }
public void testObjectType() throws Exception { [EOL]     TypeInfo typeInfo = new TypeInfo(String.class); [EOL]     assertFalse(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isPrimitive()); [EOL]     assertEquals(String.class, typeInfo.getRawClass()); [EOL] }
public void testObjectType() throws Exception { [EOL]     TypeInfo typeInfo = new TypeInfo(String.class); [EOL]     assertFalse(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isPrimitive()); [EOL]     assertEquals(String.class, typeInfo.getRawClass()); [EOL] }
public void testObjectType() throws Exception { [EOL]     TypeInfo typeInfo = new TypeInfo(String.class); [EOL]     assertFalse(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isPrimitive()); [EOL]     assertEquals(String.class, typeInfo.getRawClass()); [EOL] }
public void testContains() throws Exception { [EOL]     MockObject objA = new MockObject(); [EOL]     MockObject objB = new MockObject(); [EOL]     assertEquals(objA, objB); [EOL]     stack.push(new ObjectTypePair(objA, MockObject.class, true)); [EOL]     assertTrue(stack.contains(new ObjectTypePair(objA, MockObject.class, true))); [EOL]     assertFalse(stack.contains(new ObjectTypePair(objB, MockObject.class, true))); [EOL] }
public void testContains() throws Exception { [EOL]     MockObject objA = new MockObject(); [EOL]     MockObject objB = new MockObject(); [EOL]     assertEquals(objA, objB); [EOL]     stack.push(new ObjectTypePair(objA, MockObject.class, true)); [EOL]     assertTrue(stack.contains(new ObjectTypePair(objA, MockObject.class, true))); [EOL]     assertFalse(stack.contains(new ObjectTypePair(objB, MockObject.class, true))); [EOL] }
public void testContains() throws Exception { [EOL]     MockObject objA = new MockObject(); [EOL]     MockObject objB = new MockObject(); [EOL]     assertEquals(objA, objB); [EOL]     stack.push(new ObjectTypePair(objA, MockObject.class, true)); [EOL]     assertTrue(stack.contains(new ObjectTypePair(objA, MockObject.class, true))); [EOL]     assertFalse(stack.contains(new ObjectTypePair(objB, MockObject.class, true))); [EOL] }
public void testNullField() throws Exception { [EOL]     try { [EOL]         new FieldAttributes(Foo.class, null); [EOL]         fail("Field parameter can not be null"); [EOL]     } catch (NullPointerException expected) { [EOL]     } [EOL] }
public void testNullField() throws Exception { [EOL]     try { [EOL]         new FieldAttributes(Foo.class, null); [EOL]         fail("Field parameter can not be null"); [EOL]     } catch (NullPointerException expected) { [EOL]     } [EOL] }
public void testNullField() throws Exception { [EOL]     try { [EOL]         new FieldAttributes(Foo.class, null); [EOL]         fail("Field parameter can not be null"); [EOL]     } catch (NullPointerException expected) { [EOL]     } [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testStringsAndChar() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("abc"); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('a', json.getAsCharacter()); [EOL]     assertEquals("abc", json.getAsString()); [EOL]     json = new JsonPrimitive('z'); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('z', json.getAsCharacter()); [EOL]     assertEquals("z", json.getAsString()); [EOL] }
public void testStringsAndChar() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("abc"); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('a', json.getAsCharacter()); [EOL]     assertEquals("abc", json.getAsString()); [EOL]     json = new JsonPrimitive('z'); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('z', json.getAsCharacter()); [EOL]     assertEquals("z", json.getAsString()); [EOL] }
public void testStringsAndChar() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("abc"); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('a', json.getAsCharacter()); [EOL]     assertEquals("abc", json.getAsString()); [EOL]     json = new JsonPrimitive('z'); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('z', json.getAsCharacter()); [EOL]     assertEquals("z", json.getAsString()); [EOL] }
public void testStringsAndChar() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("abc"); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('a', json.getAsCharacter()); [EOL]     assertEquals("abc", json.getAsString()); [EOL]     json = new JsonPrimitive('z'); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('z', json.getAsCharacter()); [EOL]     assertEquals("z", json.getAsString()); [EOL] }
public void testStringsAndChar() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("abc"); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('a', json.getAsCharacter()); [EOL]     assertEquals("abc", json.getAsString()); [EOL]     json = new JsonPrimitive('z'); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('z', json.getAsCharacter()); [EOL]     assertEquals("z", json.getAsString()); [EOL] }
public void testStringsAndChar() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("abc"); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('a', json.getAsCharacter()); [EOL]     assertEquals("abc", json.getAsString()); [EOL]     json = new JsonPrimitive('z'); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('z', json.getAsCharacter()); [EOL]     assertEquals("z", json.getAsString()); [EOL] }
public void testStringsAndChar() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("abc"); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('a', json.getAsCharacter()); [EOL]     assertEquals("abc", json.getAsString()); [EOL]     json = new JsonPrimitive('z'); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('z', json.getAsCharacter()); [EOL]     assertEquals("z", json.getAsString()); [EOL] }
public void testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(Base.class, new JsonSerializer<Base>() { [EOL]  [EOL]         public JsonElement serialize(Base src, Type typeOfSrc, JsonSerializationContext context) { [EOL]             JsonObject json = new JsonObject(); [EOL]             json.addProperty("value", src.baseValue); [EOL]             return json; [EOL]         } [EOL]     }).create(); [EOL]     Base b = new Base(); [EOL]     String json = gson.toJson(b); [EOL]     assertTrue(json.contains("value")); [EOL]     b = new Derived(); [EOL]     json = gson.toJson(b, Base.class); [EOL]     assertTrue(json.contains("value")); [EOL]     assertFalse(json.contains("derivedValue")); [EOL] }
public void testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(Base.class, new JsonSerializer<Base>() { [EOL]  [EOL]         public JsonElement serialize(Base src, Type typeOfSrc, JsonSerializationContext context) { [EOL]             JsonObject json = new JsonObject(); [EOL]             json.addProperty("value", src.baseValue); [EOL]             return json; [EOL]         } [EOL]     }).create(); [EOL]     Base b = new Base(); [EOL]     String json = gson.toJson(b); [EOL]     assertTrue(json.contains("value")); [EOL]     b = new Derived(); [EOL]     json = gson.toJson(b, Base.class); [EOL]     assertTrue(json.contains("value")); [EOL]     assertFalse(json.contains("derivedValue")); [EOL] }
public void testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(Base.class, new JsonSerializer<Base>() { [EOL]  [EOL]         public JsonElement serialize(Base src, Type typeOfSrc, JsonSerializationContext context) { [EOL]             JsonObject json = new JsonObject(); [EOL]             json.addProperty("value", src.baseValue); [EOL]             return json; [EOL]         } [EOL]     }).create(); [EOL]     Base b = new Base(); [EOL]     String json = gson.toJson(b); [EOL]     assertTrue(json.contains("value")); [EOL]     b = new Derived(); [EOL]     json = gson.toJson(b, Base.class); [EOL]     assertTrue(json.contains("value")); [EOL]     assertFalse(json.contains("derivedValue")); [EOL] }
public void testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(Base.class, new JsonSerializer<Base>() { [EOL]  [EOL]         public JsonElement serialize(Base src, Type typeOfSrc, JsonSerializationContext context) { [EOL]             JsonObject json = new JsonObject(); [EOL]             json.addProperty("value", src.baseValue); [EOL]             return json; [EOL]         } [EOL]     }).create(); [EOL]     Base b = new Base(); [EOL]     String json = gson.toJson(b); [EOL]     assertTrue(json.contains("value")); [EOL]     b = new Derived(); [EOL]     json = gson.toJson(b, Base.class); [EOL]     assertTrue(json.contains("value")); [EOL]     assertFalse(json.contains("derivedValue")); [EOL] }
public void testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(Base.class, new JsonSerializer<Base>() { [EOL]  [EOL]         public JsonElement serialize(Base src, Type typeOfSrc, JsonSerializationContext context) { [EOL]             JsonObject json = new JsonObject(); [EOL]             json.addProperty("value", src.baseValue); [EOL]             return json; [EOL]         } [EOL]     }).create(); [EOL]     Base b = new Base(); [EOL]     String json = gson.toJson(b); [EOL]     assertTrue(json.contains("value")); [EOL]     b = new Derived(); [EOL]     json = gson.toJson(b, Base.class); [EOL]     assertTrue(json.contains("value")); [EOL]     assertFalse(json.contains("derivedValue")); [EOL] }
public void testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(Base.class, new JsonSerializer<Base>() { [EOL]  [EOL]         public JsonElement serialize(Base src, Type typeOfSrc, JsonSerializationContext context) { [EOL]             JsonObject json = new JsonObject(); [EOL]             json.addProperty("value", src.baseValue); [EOL]             return json; [EOL]         } [EOL]     }).create(); [EOL]     Base b = new Base(); [EOL]     String json = gson.toJson(b); [EOL]     assertTrue(json.contains("value")); [EOL]     b = new Derived(); [EOL]     json = gson.toJson(b, Base.class); [EOL]     assertTrue(json.contains("value")); [EOL]     assertFalse(json.contains("derivedValue")); [EOL] }
public void testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(Base.class, new JsonSerializer<Base>() { [EOL]  [EOL]         public JsonElement serialize(Base src, Type typeOfSrc, JsonSerializationContext context) { [EOL]             JsonObject json = new JsonObject(); [EOL]             json.addProperty("value", src.baseValue); [EOL]             return json; [EOL]         } [EOL]     }).create(); [EOL]     Base b = new Base(); [EOL]     String json = gson.toJson(b); [EOL]     assertTrue(json.contains("value")); [EOL]     b = new Derived(); [EOL]     json = gson.toJson(b, Base.class); [EOL]     assertTrue(json.contains("value")); [EOL]     assertFalse(json.contains("derivedValue")); [EOL] }
public void testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(Base.class, new JsonSerializer<Base>() { [EOL]  [EOL]         public JsonElement serialize(Base src, Type typeOfSrc, JsonSerializationContext context) { [EOL]             JsonObject json = new JsonObject(); [EOL]             json.addProperty("value", src.baseValue); [EOL]             return json; [EOL]         } [EOL]     }).create(); [EOL]     Base b = new Base(); [EOL]     String json = gson.toJson(b); [EOL]     assertTrue(json.contains("value")); [EOL]     b = new Derived(); [EOL]     json = gson.toJson(b, Base.class); [EOL]     assertTrue(json.contains("value")); [EOL]     assertFalse(json.contains("derivedValue")); [EOL] }
public void testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(Base.class, new JsonSerializer<Base>() { [EOL]  [EOL]         public JsonElement serialize(Base src, Type typeOfSrc, JsonSerializationContext context) { [EOL]             JsonObject json = new JsonObject(); [EOL]             json.addProperty("value", src.baseValue); [EOL]             return json; [EOL]         } [EOL]     }).create(); [EOL]     Base b = new Base(); [EOL]     String json = gson.toJson(b); [EOL]     assertTrue(json.contains("value")); [EOL]     b = new Derived(); [EOL]     json = gson.toJson(b, Base.class); [EOL]     assertTrue(json.contains("value")); [EOL]     assertFalse(json.contains("derivedValue")); [EOL] }
public void testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(Base.class, new JsonSerializer<Base>() { [EOL]  [EOL]         public JsonElement serialize(Base src, Type typeOfSrc, JsonSerializationContext context) { [EOL]             JsonObject json = new JsonObject(); [EOL]             json.addProperty("value", src.baseValue); [EOL]             return json; [EOL]         } [EOL]     }).create(); [EOL]     Base b = new Base(); [EOL]     String json = gson.toJson(b); [EOL]     assertTrue(json.contains("value")); [EOL]     b = new Derived(); [EOL]     json = gson.toJson(b, Base.class); [EOL]     assertTrue(json.contains("value")); [EOL]     assertFalse(json.contains("derivedValue")); [EOL] }
public void testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(Base.class, new JsonSerializer<Base>() { [EOL]  [EOL]         public JsonElement serialize(Base src, Type typeOfSrc, JsonSerializationContext context) { [EOL]             JsonObject json = new JsonObject(); [EOL]             json.addProperty("value", src.baseValue); [EOL]             return json; [EOL]         } [EOL]     }).create(); [EOL]     Base b = new Base(); [EOL]     String json = gson.toJson(b); [EOL]     assertTrue(json.contains("value")); [EOL]     b = new Derived(); [EOL]     json = gson.toJson(b, Base.class); [EOL]     assertTrue(json.contains("value")); [EOL]     assertFalse(json.contains("derivedValue")); [EOL] }
public void testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(Base.class, new JsonSerializer<Base>() { [EOL]  [EOL]         public JsonElement serialize(Base src, Type typeOfSrc, JsonSerializationContext context) { [EOL]             JsonObject json = new JsonObject(); [EOL]             json.addProperty("value", src.baseValue); [EOL]             return json; [EOL]         } [EOL]     }).create(); [EOL]     Base b = new Base(); [EOL]     String json = gson.toJson(b); [EOL]     assertTrue(json.contains("value")); [EOL]     b = new Derived(); [EOL]     json = gson.toJson(b, Base.class); [EOL]     assertTrue(json.contains("value")); [EOL]     assertFalse(json.contains("derivedValue")); [EOL] }
public void testStringsAndChar() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("abc"); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('a', json.getAsCharacter()); [EOL]     assertEquals("abc", json.getAsString()); [EOL]     json = new JsonPrimitive('z'); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('z', json.getAsCharacter()); [EOL]     assertEquals("z", json.getAsString()); [EOL] }
public void testStringsAndChar() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("abc"); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('a', json.getAsCharacter()); [EOL]     assertEquals("abc", json.getAsString()); [EOL]     json = new JsonPrimitive('z'); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('z', json.getAsCharacter()); [EOL]     assertEquals("z", json.getAsString()); [EOL] }
public void testStringsAndChar() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("abc"); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('a', json.getAsCharacter()); [EOL]     assertEquals("abc", json.getAsString()); [EOL]     json = new JsonPrimitive('z'); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('z', json.getAsCharacter()); [EOL]     assertEquals("z", json.getAsString()); [EOL] }
public void testStringsAndChar() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("abc"); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('a', json.getAsCharacter()); [EOL]     assertEquals("abc", json.getAsString()); [EOL]     json = new JsonPrimitive('z'); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('z', json.getAsCharacter()); [EOL]     assertEquals("z", json.getAsString()); [EOL] }
public void testStringsAndChar() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("abc"); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('a', json.getAsCharacter()); [EOL]     assertEquals("abc", json.getAsString()); [EOL]     json = new JsonPrimitive('z'); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('z', json.getAsCharacter()); [EOL]     assertEquals("z", json.getAsString()); [EOL] }
public void testStringsAndChar() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("abc"); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('a', json.getAsCharacter()); [EOL]     assertEquals("abc", json.getAsString()); [EOL]     json = new JsonPrimitive('z'); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('z', json.getAsCharacter()); [EOL]     assertEquals("z", json.getAsString()); [EOL] }
public void testStringsAndChar() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("abc"); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('a', json.getAsCharacter()); [EOL]     assertEquals("abc", json.getAsString()); [EOL]     json = new JsonPrimitive('z'); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('z', json.getAsCharacter()); [EOL]     assertEquals("z", json.getAsString()); [EOL] }
public void testStringsAndChar() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("abc"); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('a', json.getAsCharacter()); [EOL]     assertEquals("abc", json.getAsString()); [EOL]     json = new JsonPrimitive('z'); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('z', json.getAsCharacter()); [EOL]     assertEquals("z", json.getAsString()); [EOL] }
public void testStringsAndChar() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("abc"); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('a', json.getAsCharacter()); [EOL]     assertEquals("abc", json.getAsString()); [EOL]     json = new JsonPrimitive('z'); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('z', json.getAsCharacter()); [EOL]     assertEquals("z", json.getAsString()); [EOL] }
public void testStringsAndChar() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("abc"); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('a', json.getAsCharacter()); [EOL]     assertEquals("abc", json.getAsString()); [EOL]     json = new JsonPrimitive('z'); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('z', json.getAsCharacter()); [EOL]     assertEquals("z", json.getAsString()); [EOL] }
public void testStringsAndChar() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("abc"); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('a', json.getAsCharacter()); [EOL]     assertEquals("abc", json.getAsString()); [EOL]     json = new JsonPrimitive('z'); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('z', json.getAsCharacter()); [EOL]     assertEquals("z", json.getAsString()); [EOL] }
public void testStringsAndChar() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("abc"); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('a', json.getAsCharacter()); [EOL]     assertEquals("abc", json.getAsString()); [EOL]     json = new JsonPrimitive('z'); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('z', json.getAsCharacter()); [EOL]     assertEquals("z", json.getAsString()); [EOL] }
public void testStringsAndChar() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("abc"); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('a', json.getAsCharacter()); [EOL]     assertEquals("abc", json.getAsString()); [EOL]     json = new JsonPrimitive('z'); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('z', json.getAsCharacter()); [EOL]     assertEquals("z", json.getAsString()); [EOL] }
public void testStringsAndChar() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("abc"); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('a', json.getAsCharacter()); [EOL]     assertEquals("abc", json.getAsString()); [EOL]     json = new JsonPrimitive('z'); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('z', json.getAsCharacter()); [EOL]     assertEquals("z", json.getAsString()); [EOL] }
public void testStringsAndChar() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("abc"); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('a', json.getAsCharacter()); [EOL]     assertEquals("abc", json.getAsString()); [EOL]     json = new JsonPrimitive('z'); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('z', json.getAsCharacter()); [EOL]     assertEquals("z", json.getAsString()); [EOL] }
public void testStringsAndChar() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("abc"); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('a', json.getAsCharacter()); [EOL]     assertEquals("abc", json.getAsString()); [EOL]     json = new JsonPrimitive('z'); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('z', json.getAsCharacter()); [EOL]     assertEquals("z", json.getAsString()); [EOL] }
public void testValidJsonOnToString() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("Some\nEscaped\nValue"); [EOL]     assertEquals("\"Some\\nEscaped\\nValue\"", json.toString()); [EOL]     json = new JsonPrimitive(new BigDecimal("1.333")); [EOL]     assertEquals("1.333", json.toString()); [EOL] }
public void testValidJsonOnToString() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("Some\nEscaped\nValue"); [EOL]     assertEquals("\"Some\\nEscaped\\nValue\"", json.toString()); [EOL]     json = new JsonPrimitive(new BigDecimal("1.333")); [EOL]     assertEquals("1.333", json.toString()); [EOL] }
public void testValidJsonOnToString() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("Some\nEscaped\nValue"); [EOL]     assertEquals("\"Some\\nEscaped\\nValue\"", json.toString()); [EOL]     json = new JsonPrimitive(new BigDecimal("1.333")); [EOL]     assertEquals("1.333", json.toString()); [EOL] }
public void testValidJsonOnToString() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("Some\nEscaped\nValue"); [EOL]     assertEquals("\"Some\\nEscaped\\nValue\"", json.toString()); [EOL]     json = new JsonPrimitive(new BigDecimal("1.333")); [EOL]     assertEquals("1.333", json.toString()); [EOL] }
public void testFloatEqualsDouble() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Float(10.25F)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Double(10.25D)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testFloatEqualsDouble() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Float(10.25F)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Double(10.25D)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testFloatEqualsDouble() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Float(10.25F)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Double(10.25D)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testFloatEqualsDouble() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Float(10.25F)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Double(10.25D)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testFloatEqualsDouble() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Float(10.25F)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Double(10.25D)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testFloatEqualsDouble() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Float(10.25F)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Double(10.25D)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testFloatEqualsDouble() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Float(10.25F)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Double(10.25D)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testFloatEqualsDouble() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Float(10.25F)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Double(10.25D)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testFloatEqualsDouble() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Float(10.25F)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Double(10.25D)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testFloatEqualsDouble() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Float(10.25F)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Double(10.25D)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testFloatEqualsDouble() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Float(10.25F)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Double(10.25D)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testFloatEqualsDouble() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Float(10.25F)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Double(10.25D)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testFloatEqualsDouble() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Float(10.25F)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Double(10.25D)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testFloatEqualsDouble() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Float(10.25F)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Double(10.25D)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testFloatEqualsDouble() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Float(10.25F)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Double(10.25D)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testFloatEqualsDouble() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Float(10.25F)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Double(10.25D)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testStringLongSerialization() throws Exception { [EOL]     JsonElement element = LongSerializationPolicy.STRING.serialize(1556L); [EOL]     assertTrue(element.isJsonPrimitive()); [EOL]     JsonPrimitive jsonPrimitive = element.getAsJsonPrimitive(); [EOL]     assertFalse(jsonPrimitive.isNumber()); [EOL]     assertTrue(jsonPrimitive.isString()); [EOL]     assertEquals("1556", element.getAsString()); [EOL] }
public void testStringLongSerialization() throws Exception { [EOL]     JsonElement element = LongSerializationPolicy.STRING.serialize(1556L); [EOL]     assertTrue(element.isJsonPrimitive()); [EOL]     JsonPrimitive jsonPrimitive = element.getAsJsonPrimitive(); [EOL]     assertFalse(jsonPrimitive.isNumber()); [EOL]     assertTrue(jsonPrimitive.isString()); [EOL]     assertEquals("1556", element.getAsString()); [EOL] }
public void testStringLongSerialization() throws Exception { [EOL]     JsonElement element = LongSerializationPolicy.STRING.serialize(1556L); [EOL]     assertTrue(element.isJsonPrimitive()); [EOL]     JsonPrimitive jsonPrimitive = element.getAsJsonPrimitive(); [EOL]     assertFalse(jsonPrimitive.isNumber()); [EOL]     assertTrue(jsonPrimitive.isString()); [EOL]     assertEquals("1556", element.getAsString()); [EOL] }
public void testStringLongSerialization() throws Exception { [EOL]     JsonElement element = LongSerializationPolicy.STRING.serialize(1556L); [EOL]     assertTrue(element.isJsonPrimitive()); [EOL]     JsonPrimitive jsonPrimitive = element.getAsJsonPrimitive(); [EOL]     assertFalse(jsonPrimitive.isNumber()); [EOL]     assertTrue(jsonPrimitive.isString()); [EOL]     assertEquals("1556", element.getAsString()); [EOL] }
public void testStringLongSerialization() throws Exception { [EOL]     JsonElement element = LongSerializationPolicy.STRING.serialize(1556L); [EOL]     assertTrue(element.isJsonPrimitive()); [EOL]     JsonPrimitive jsonPrimitive = element.getAsJsonPrimitive(); [EOL]     assertFalse(jsonPrimitive.isNumber()); [EOL]     assertTrue(jsonPrimitive.isString()); [EOL]     assertEquals("1556", element.getAsString()); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testJsonObjectSerialization() { [EOL]     Gson gson = new GsonBuilder().serializeNulls().create(); [EOL]     JsonObject obj = new JsonObject(); [EOL]     String json = gson.toJson(obj); [EOL]     assertEquals("{}", json); [EOL] }
public void testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(Base.class, new JsonSerializer<Base>() { [EOL]  [EOL]         public JsonElement serialize(Base src, Type typeOfSrc, JsonSerializationContext context) { [EOL]             JsonObject json = new JsonObject(); [EOL]             json.addProperty("value", src.baseValue); [EOL]             return json; [EOL]         } [EOL]     }).create(); [EOL]     Base b = new Base(); [EOL]     String json = gson.toJson(b); [EOL]     assertTrue(json.contains("value")); [EOL]     b = new Derived(); [EOL]     json = gson.toJson(b, Base.class); [EOL]     assertTrue(json.contains("value")); [EOL]     assertFalse(json.contains("derivedValue")); [EOL] }
public void testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(Base.class, new JsonSerializer<Base>() { [EOL]  [EOL]         public JsonElement serialize(Base src, Type typeOfSrc, JsonSerializationContext context) { [EOL]             JsonObject json = new JsonObject(); [EOL]             json.addProperty("value", src.baseValue); [EOL]             return json; [EOL]         } [EOL]     }).create(); [EOL]     Base b = new Base(); [EOL]     String json = gson.toJson(b); [EOL]     assertTrue(json.contains("value")); [EOL]     b = new Derived(); [EOL]     json = gson.toJson(b, Base.class); [EOL]     assertTrue(json.contains("value")); [EOL]     assertFalse(json.contains("derivedValue")); [EOL] }
public void testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(Base.class, new JsonSerializer<Base>() { [EOL]  [EOL]         public JsonElement serialize(Base src, Type typeOfSrc, JsonSerializationContext context) { [EOL]             JsonObject json = new JsonObject(); [EOL]             json.addProperty("value", src.baseValue); [EOL]             return json; [EOL]         } [EOL]     }).create(); [EOL]     Base b = new Base(); [EOL]     String json = gson.toJson(b); [EOL]     assertTrue(json.contains("value")); [EOL]     b = new Derived(); [EOL]     json = gson.toJson(b, Base.class); [EOL]     assertTrue(json.contains("value")); [EOL]     assertFalse(json.contains("derivedValue")); [EOL] }
public void testAddingBooleanProperties() throws Exception { [EOL]     String propertyName = "property"; [EOL]     JsonObject jsonObj = new JsonObject(); [EOL]     jsonObj.addProperty(propertyName, true); [EOL]     assertTrue(jsonObj.has(propertyName)); [EOL]     JsonElement jsonElement = jsonObj.get(propertyName); [EOL]     assertNotNull(jsonElement); [EOL]     assertTrue(jsonElement.getAsBoolean()); [EOL] }
public void testAddingBooleanProperties() throws Exception { [EOL]     String propertyName = "property"; [EOL]     JsonObject jsonObj = new JsonObject(); [EOL]     jsonObj.addProperty(propertyName, true); [EOL]     assertTrue(jsonObj.has(propertyName)); [EOL]     JsonElement jsonElement = jsonObj.get(propertyName); [EOL]     assertNotNull(jsonElement); [EOL]     assertTrue(jsonElement.getAsBoolean()); [EOL] }
public void testAddingBooleanProperties() throws Exception { [EOL]     String propertyName = "property"; [EOL]     JsonObject jsonObj = new JsonObject(); [EOL]     jsonObj.addProperty(propertyName, true); [EOL]     assertTrue(jsonObj.has(propertyName)); [EOL]     JsonElement jsonElement = jsonObj.get(propertyName); [EOL]     assertNotNull(jsonElement); [EOL]     assertTrue(jsonElement.getAsBoolean()); [EOL] }
public void testAddingBooleanProperties() throws Exception { [EOL]     String propertyName = "property"; [EOL]     JsonObject jsonObj = new JsonObject(); [EOL]     jsonObj.addProperty(propertyName, true); [EOL]     assertTrue(jsonObj.has(propertyName)); [EOL]     JsonElement jsonElement = jsonObj.get(propertyName); [EOL]     assertNotNull(jsonElement); [EOL]     assertTrue(jsonElement.getAsBoolean()); [EOL] }
public void testAddingBooleanProperties() throws Exception { [EOL]     String propertyName = "property"; [EOL]     JsonObject jsonObj = new JsonObject(); [EOL]     jsonObj.addProperty(propertyName, true); [EOL]     assertTrue(jsonObj.has(propertyName)); [EOL]     JsonElement jsonElement = jsonObj.get(propertyName); [EOL]     assertNotNull(jsonElement); [EOL]     assertTrue(jsonElement.getAsBoolean()); [EOL] }
public void testJsonObjectSerialization() { [EOL]     Gson gson = new GsonBuilder().serializeNulls().create(); [EOL]     JsonObject obj = new JsonObject(); [EOL]     String json = gson.toJson(obj); [EOL]     assertEquals("{}", json); [EOL] }
public void testJsonObjectSerialization() { [EOL]     Gson gson = new GsonBuilder().serializeNulls().create(); [EOL]     JsonObject obj = new JsonObject(); [EOL]     String json = gson.toJson(obj); [EOL]     assertEquals("{}", json); [EOL] }
public void testAllLowerCase() throws Exception { [EOL]     assertEquals(ALL_UPPER, namingPolicy.translateName(ALL_LOWER, String.class, null)); [EOL] }
public void testAllLowerCase() throws Exception { [EOL]     assertEquals(ALL_UPPER, namingPolicy.translateName(ALL_LOWER, String.class, null)); [EOL] }
public void testAllLowerCase() throws Exception { [EOL]     assertEquals(ALL_UPPER, namingPolicy.translateName(ALL_LOWER, String.class, null)); [EOL] }
public void testAllLowerCase() throws Exception { [EOL]     assertEquals(ALL_UPPER, namingPolicy.translateName(ALL_LOWER, String.class, null)); [EOL] }
