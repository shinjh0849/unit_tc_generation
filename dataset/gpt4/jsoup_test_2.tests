@Test [EOL] public void testIsValid() { [EOL]     String ok = "<p>Test <b><a href='http://example.com/'>OK</a></b></p>"; [EOL]     String nok1 = "<p><script></script>Not <b>OK</b></p>"; [EOL]     String nok2 = "<p align=right>Test Not <b>OK</b></p>"; [EOL]     assertTrue(Jsoup.isValid(ok, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok1, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok2, Whitelist.basic())); [EOL] }
@Test [EOL] public void testIsValid() { [EOL]     String ok = "<p>Test <b><a href='http://example.com/'>OK</a></b></p>"; [EOL]     String nok1 = "<p><script></script>Not <b>OK</b></p>"; [EOL]     String nok2 = "<p align=right>Test Not <b>OK</b></p>"; [EOL]     assertTrue(Jsoup.isValid(ok, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok1, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok2, Whitelist.basic())); [EOL] }
@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     Element insert = doc.createElement("em").text("foo"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals("One <em>foo</em> three", p.html()); [EOL] }
@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     Element insert = doc.createElement("em").text("foo"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals("One <em>foo</em> three", p.html()); [EOL] }
@Test [EOL] public void handlesBaseTags() { [EOL]     String h = "<a href=1>#</a><base href='/2/'><a href='3'>#</a><base href='http://bar'><a href=4>#</a>"; [EOL]     Document doc = Jsoup.parse(h, "http://foo/"); [EOL]     assertEquals("http://bar", doc.baseUri()); [EOL]     Elements anchors = doc.getElementsByTag("a"); [EOL]     assertEquals(3, anchors.size()); [EOL]     assertEquals("http://foo/", anchors.get(0).baseUri()); [EOL]     assertEquals("http://foo/2/", anchors.get(1).baseUri()); [EOL]     assertEquals("http://bar", anchors.get(2).baseUri()); [EOL]     assertEquals("http://foo/1", anchors.get(0).absUrl("href")); [EOL]     assertEquals("http://foo/2/3", anchors.get(1).absUrl("href")); [EOL]     assertEquals("http://bar/4", anchors.get(2).absUrl("href")); [EOL] }
@Test [EOL] public void handlesBaseTags() { [EOL]     String h = "<a href=1>#</a><base href='/2/'><a href='3'>#</a><base href='http://bar'><a href=4>#</a>"; [EOL]     Document doc = Jsoup.parse(h, "http://foo/"); [EOL]     assertEquals("http://bar", doc.baseUri()); [EOL]     Elements anchors = doc.getElementsByTag("a"); [EOL]     assertEquals(3, anchors.size()); [EOL]     assertEquals("http://foo/", anchors.get(0).baseUri()); [EOL]     assertEquals("http://foo/2/", anchors.get(1).baseUri()); [EOL]     assertEquals("http://bar", anchors.get(2).baseUri()); [EOL]     assertEquals("http://foo/1", anchors.get(0).absUrl("href")); [EOL]     assertEquals("http://foo/2/3", anchors.get(1).absUrl("href")); [EOL]     assertEquals("http://bar/4", anchors.get(2).absUrl("href")); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     Element insert = doc.createElement("em").text("foo"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals("One <em>foo</em> three", p.html()); [EOL] }
@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     Element insert = doc.createElement("em").text("foo"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals("One <em>foo</em> three", p.html()); [EOL] }
@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     Element insert = doc.createElement("em").text("foo"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals("One <em>foo</em> three", p.html()); [EOL] }
@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     Element insert = doc.createElement("em").text("foo"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals("One <em>foo</em> three", p.html()); [EOL] }
@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     Element insert = doc.createElement("em").text("foo"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals("One <em>foo</em> three", p.html()); [EOL] }
@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     Element insert = doc.createElement("em").text("foo"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals("One <em>foo</em> three", p.html()); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     Element insert = doc.createElement("em").text("foo"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals("One <em>foo</em> three", p.html()); [EOL] }
@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     Element insert = doc.createElement("em").text("foo"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals("One <em>foo</em> three", p.html()); [EOL] }
@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     Element insert = doc.createElement("em").text("foo"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals("One <em>foo</em> three", p.html()); [EOL] }
@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     Element insert = doc.createElement("em").text("foo"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals("One <em>foo</em> three", p.html()); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     Element insert = doc.createElement("em").text("foo"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals("One <em>foo</em> three", p.html()); [EOL] }
@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     Element insert = doc.createElement("em").text("foo"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals("One <em>foo</em> three", p.html()); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void eq() { [EOL]     String h = "<p>Hello<p>there<p>world"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("there", doc.select("p").eq(1).text()); [EOL] }
@Test [EOL] public void eq() { [EOL]     String h = "<p>Hello<p>there<p>world"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("there", doc.select("p").eq(1).text()); [EOL] }
@Test [EOL] public void eq() { [EOL]     String h = "<p>Hello<p>there<p>world"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("there", doc.select("p").eq(1).text()); [EOL] }
@Test [EOL] public void eq() { [EOL]     String h = "<p>Hello<p>there<p>world"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("there", doc.select("p").eq(1).text()); [EOL] }
@Test [EOL] public void html() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div>"); [EOL]     Elements divs = doc.select("div"); [EOL]     assertEquals("<p>Hello</p>\n<p>There</p>", divs.html()); [EOL] }
@Test [EOL] public void html() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div>"); [EOL]     Elements divs = doc.select("div"); [EOL]     assertEquals("<p>Hello</p>\n<p>There</p>", divs.html()); [EOL] }
@Test [EOL] public void html() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div>"); [EOL]     Elements divs = doc.select("div"); [EOL]     assertEquals("<p>Hello</p>\n<p>There</p>", divs.html()); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void eq() { [EOL]     String h = "<p>Hello<p>there<p>world"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("there", doc.select("p").eq(1).text()); [EOL] }
@Test [EOL] public void eq() { [EOL]     String h = "<p>Hello<p>there<p>world"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("there", doc.select("p").eq(1).text()); [EOL] }
@Test [EOL] public void eq() { [EOL]     String h = "<p>Hello<p>there<p>world"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("there", doc.select("p").eq(1).text()); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void parsesUnterminatedAttribute() { [EOL]     String h1 = "<p id=\"foo"; [EOL]     Document doc = Jsoup.parse(h1); [EOL]     Element p = doc.getElementById("foo"); [EOL]     assertNotNull(p); [EOL]     assertEquals("p", p.tagName()); [EOL] }
@Test [EOL] public void parsesUnterminatedAttribute() { [EOL]     String h1 = "<p id=\"foo"; [EOL]     Document doc = Jsoup.parse(h1); [EOL]     Element p = doc.getElementById("foo"); [EOL]     assertNotNull(p); [EOL]     assertEquals("p", p.tagName()); [EOL] }
@Test [EOL] public void parsesUnterminatedAttribute() { [EOL]     String h1 = "<p id=\"foo"; [EOL]     Document doc = Jsoup.parse(h1); [EOL]     Element p = doc.getElementById("foo"); [EOL]     assertNotNull(p); [EOL]     assertEquals("p", p.tagName()); [EOL] }
@Test [EOL] public void testIsValid() { [EOL]     String ok = "<p>Test <b><a href='http://example.com/'>OK</a></b></p>"; [EOL]     String nok1 = "<p><script></script>Not <b>OK</b></p>"; [EOL]     String nok2 = "<p align=right>Test Not <b>OK</b></p>"; [EOL]     assertTrue(Jsoup.isValid(ok, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok1, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok2, Whitelist.basic())); [EOL] }
@Test [EOL] public void testIsValid() { [EOL]     String ok = "<p>Test <b><a href='http://example.com/'>OK</a></b></p>"; [EOL]     String nok1 = "<p><script></script>Not <b>OK</b></p>"; [EOL]     String nok2 = "<p align=right>Test Not <b>OK</b></p>"; [EOL]     assertTrue(Jsoup.isValid(ok, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok1, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok2, Whitelist.basic())); [EOL] }
@Test [EOL] public void testIsValid() { [EOL]     String ok = "<p>Test <b><a href='http://example.com/'>OK</a></b></p>"; [EOL]     String nok1 = "<p><script></script>Not <b>OK</b></p>"; [EOL]     String nok2 = "<p align=right>Test Not <b>OK</b></p>"; [EOL]     assertTrue(Jsoup.isValid(ok, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok1, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok2, Whitelist.basic())); [EOL] }
@Test [EOL] public void parsesSimpleDocument() { [EOL]     String html = "<html><head><title>First!</title></head><body><p>First post! <img src=\"foo.png\" /></p></body></html>"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.body().child(0); [EOL]     assertEquals("p", p.tagName()); [EOL]     Element img = p.child(0); [EOL]     assertEquals("foo.png", img.attr("src")); [EOL]     assertEquals("img", img.tagName()); [EOL] }
@Test [EOL] public void parsesSimpleDocument() { [EOL]     String html = "<html><head><title>First!</title></head><body><p>First post! <img src=\"foo.png\" /></p></body></html>"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.body().child(0); [EOL]     assertEquals("p", p.tagName()); [EOL]     Element img = p.child(0); [EOL]     assertEquals("foo.png", img.attr("src")); [EOL]     assertEquals("img", img.tagName()); [EOL] }
@Test [EOL] public void parsesSimpleDocument() { [EOL]     String html = "<html><head><title>First!</title></head><body><p>First post! <img src=\"foo.png\" /></p></body></html>"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.body().child(0); [EOL]     assertEquals("p", p.tagName()); [EOL]     Element img = p.child(0); [EOL]     assertEquals("foo.png", img.attr("src")); [EOL]     assertEquals("img", img.tagName()); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void parsesSimpleDocument() { [EOL]     String html = "<html><head><title>First!</title></head><body><p>First post! <img src=\"foo.png\" /></p></body></html>"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.body().child(0); [EOL]     assertEquals("p", p.tagName()); [EOL]     Element img = p.child(0); [EOL]     assertEquals("foo.png", img.attr("src")); [EOL]     assertEquals("img", img.tagName()); [EOL] }
@Test [EOL] public void parsesSimpleDocument() { [EOL]     String html = "<html><head><title>First!</title></head><body><p>First post! <img src=\"foo.png\" /></p></body></html>"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.body().child(0); [EOL]     assertEquals("p", p.tagName()); [EOL]     Element img = p.child(0); [EOL]     assertEquals("foo.png", img.attr("src")); [EOL]     assertEquals("img", img.tagName()); [EOL] }
@Test [EOL] public void parsesSimpleDocument() { [EOL]     String html = "<html><head><title>First!</title></head><body><p>First post! <img src=\"foo.png\" /></p></body></html>"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.body().child(0); [EOL]     assertEquals("p", p.tagName()); [EOL]     Element img = p.child(0); [EOL]     assertEquals("foo.png", img.attr("src")); [EOL]     assertEquals("img", img.tagName()); [EOL] }
@Test [EOL] public void parsesSimpleDocument() { [EOL]     String html = "<html><head><title>First!</title></head><body><p>First post! <img src=\"foo.png\" /></p></body></html>"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.body().child(0); [EOL]     assertEquals("p", p.tagName()); [EOL]     Element img = p.child(0); [EOL]     assertEquals("foo.png", img.attr("src")); [EOL]     assertEquals("img", img.tagName()); [EOL] }
@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     Element insert = doc.createElement("em").text("foo"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals("One <em>foo</em> three", p.html()); [EOL] }
@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     Element insert = doc.createElement("em").text("foo"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals("One <em>foo</em> three", p.html()); [EOL] }
@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     Element insert = doc.createElement("em").text("foo"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals("One <em>foo</em> three", p.html()); [EOL] }
@Test [EOL] public void parsesSimpleDocument() { [EOL]     String html = "<html><head><title>First!</title></head><body><p>First post! <img src=\"foo.png\" /></p></body></html>"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.body().child(0); [EOL]     assertEquals("p", p.tagName()); [EOL]     Element img = p.child(0); [EOL]     assertEquals("foo.png", img.attr("src")); [EOL]     assertEquals("img", img.tagName()); [EOL] }
@Test [EOL] public void parsesSimpleDocument() { [EOL]     String html = "<html><head><title>First!</title></head><body><p>First post! <img src=\"foo.png\" /></p></body></html>"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.body().child(0); [EOL]     assertEquals("p", p.tagName()); [EOL]     Element img = p.child(0); [EOL]     assertEquals("foo.png", img.attr("src")); [EOL]     assertEquals("img", img.tagName()); [EOL] }
@Test [EOL] public void parsesSimpleDocument() { [EOL]     String html = "<html><head><title>First!</title></head><body><p>First post! <img src=\"foo.png\" /></p></body></html>"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.body().child(0); [EOL]     assertEquals("p", p.tagName()); [EOL]     Element img = p.child(0); [EOL]     assertEquals("foo.png", img.attr("src")); [EOL]     assertEquals("img", img.tagName()); [EOL] }
@Test [EOL] public void parsesSimpleDocument() { [EOL]     String html = "<html><head><title>First!</title></head><body><p>First post! <img src=\"foo.png\" /></p></body></html>"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.body().child(0); [EOL]     assertEquals("p", p.tagName()); [EOL]     Element img = p.child(0); [EOL]     assertEquals("foo.png", img.attr("src")); [EOL]     assertEquals("img", img.tagName()); [EOL] }
@Test [EOL] public void parsesSimpleDocument() { [EOL]     String html = "<html><head><title>First!</title></head><body><p>First post! <img src=\"foo.png\" /></p></body></html>"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.body().child(0); [EOL]     assertEquals("p", p.tagName()); [EOL]     Element img = p.child(0); [EOL]     assertEquals("foo.png", img.attr("src")); [EOL]     assertEquals("img", img.tagName()); [EOL] }
@Test [EOL] public void parsesSimpleDocument() { [EOL]     String html = "<html><head><title>First!</title></head><body><p>First post! <img src=\"foo.png\" /></p></body></html>"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.body().child(0); [EOL]     assertEquals("p", p.tagName()); [EOL]     Element img = p.child(0); [EOL]     assertEquals("foo.png", img.attr("src")); [EOL]     assertEquals("img", img.tagName()); [EOL] }
@Test [EOL] public void parsesSimpleDocument() { [EOL]     String html = "<html><head><title>First!</title></head><body><p>First post! <img src=\"foo.png\" /></p></body></html>"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.body().child(0); [EOL]     assertEquals("p", p.tagName()); [EOL]     Element img = p.child(0); [EOL]     assertEquals("foo.png", img.attr("src")); [EOL]     assertEquals("img", img.tagName()); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = "<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select("div.foo"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals("div", div.first().tagName()); [EOL]     Elements p = doc.select("div .foo"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals("p", p.first().tagName()); [EOL]     Elements div2 = doc.select("div#1.foo.bar[title=bar][name=qux]"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals("div", div2.first().tagName()); [EOL]     Elements p2 = doc.select("div *.foo"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals("p", p2.first().tagName()); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = "<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select("div.foo"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals("div", div.first().tagName()); [EOL]     Elements p = doc.select("div .foo"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals("p", p.first().tagName()); [EOL]     Elements div2 = doc.select("div#1.foo.bar[title=bar][name=qux]"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals("div", div2.first().tagName()); [EOL]     Elements p2 = doc.select("div *.foo"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals("p", p2.first().tagName()); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = "<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select("div.foo"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals("div", div.first().tagName()); [EOL]     Elements p = doc.select("div .foo"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals("p", p.first().tagName()); [EOL]     Elements div2 = doc.select("div#1.foo.bar[title=bar][name=qux]"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals("div", div2.first().tagName()); [EOL]     Elements p2 = doc.select("div *.foo"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals("p", p2.first().tagName()); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = "<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select("div.foo"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals("div", div.first().tagName()); [EOL]     Elements p = doc.select("div .foo"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals("p", p.first().tagName()); [EOL]     Elements div2 = doc.select("div#1.foo.bar[title=bar][name=qux]"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals("div", div2.first().tagName()); [EOL]     Elements p2 = doc.select("div *.foo"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals("p", p2.first().tagName()); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = "<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select("div.foo"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals("div", div.first().tagName()); [EOL]     Elements p = doc.select("div .foo"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals("p", p.first().tagName()); [EOL]     Elements div2 = doc.select("div#1.foo.bar[title=bar][name=qux]"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals("div", div2.first().tagName()); [EOL]     Elements p2 = doc.select("div *.foo"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals("p", p2.first().tagName()); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = "<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select("div.foo"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals("div", div.first().tagName()); [EOL]     Elements p = doc.select("div .foo"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals("p", p.first().tagName()); [EOL]     Elements div2 = doc.select("div#1.foo.bar[title=bar][name=qux]"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals("div", div2.first().tagName()); [EOL]     Elements p2 = doc.select("div *.foo"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals("p", p2.first().tagName()); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = "<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select("div.foo"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals("div", div.first().tagName()); [EOL]     Elements p = doc.select("div .foo"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals("p", p.first().tagName()); [EOL]     Elements div2 = doc.select("div#1.foo.bar[title=bar][name=qux]"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals("div", div2.first().tagName()); [EOL]     Elements p2 = doc.select("div *.foo"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals("p", p2.first().tagName()); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = "<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select("div.foo"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals("div", div.first().tagName()); [EOL]     Elements p = doc.select("div .foo"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals("p", p.first().tagName()); [EOL]     Elements div2 = doc.select("div#1.foo.bar[title=bar][name=qux]"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals("div", div2.first().tagName()); [EOL]     Elements p2 = doc.select("div *.foo"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals("p", p2.first().tagName()); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = "<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select("div.foo"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals("div", div.first().tagName()); [EOL]     Elements p = doc.select("div .foo"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals("p", p.first().tagName()); [EOL]     Elements div2 = doc.select("div#1.foo.bar[title=bar][name=qux]"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals("div", div2.first().tagName()); [EOL]     Elements p2 = doc.select("div *.foo"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals("p", p2.first().tagName()); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = "<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select("div.foo"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals("div", div.first().tagName()); [EOL]     Elements p = doc.select("div .foo"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals("p", p.first().tagName()); [EOL]     Elements div2 = doc.select("div#1.foo.bar[title=bar][name=qux]"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals("div", div2.first().tagName()); [EOL]     Elements p2 = doc.select("div *.foo"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals("p", p2.first().tagName()); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = "<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select("div.foo"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals("div", div.first().tagName()); [EOL]     Elements p = doc.select("div .foo"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals("p", p.first().tagName()); [EOL]     Elements div2 = doc.select("div#1.foo.bar[title=bar][name=qux]"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals("div", div2.first().tagName()); [EOL]     Elements p2 = doc.select("div *.foo"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals("p", p2.first().tagName()); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = "<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select("div.foo"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals("div", div.first().tagName()); [EOL]     Elements p = doc.select("div .foo"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals("p", p.first().tagName()); [EOL]     Elements div2 = doc.select("div#1.foo.bar[title=bar][name=qux]"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals("div", div2.first().tagName()); [EOL]     Elements p2 = doc.select("div *.foo"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals("p", p2.first().tagName()); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = "<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select("div.foo"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals("div", div.first().tagName()); [EOL]     Elements p = doc.select("div .foo"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals("p", p.first().tagName()); [EOL]     Elements div2 = doc.select("div#1.foo.bar[title=bar][name=qux]"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals("div", div2.first().tagName()); [EOL]     Elements p2 = doc.select("div *.foo"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals("p", p2.first().tagName()); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = "<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select("div.foo"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals("div", div.first().tagName()); [EOL]     Elements p = doc.select("div .foo"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals("p", p.first().tagName()); [EOL]     Elements div2 = doc.select("div#1.foo.bar[title=bar][name=qux]"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals("div", div2.first().tagName()); [EOL]     Elements p2 = doc.select("div *.foo"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals("p", p2.first().tagName()); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = "<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select("div.foo"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals("div", div.first().tagName()); [EOL]     Elements p = doc.select("div .foo"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals("p", p.first().tagName()); [EOL]     Elements div2 = doc.select("div#1.foo.bar[title=bar][name=qux]"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals("div", div2.first().tagName()); [EOL]     Elements p2 = doc.select("div *.foo"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals("p", p2.first().tagName()); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = "<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select("div.foo"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals("div", div.first().tagName()); [EOL]     Elements p = doc.select("div .foo"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals("p", p.first().tagName()); [EOL]     Elements div2 = doc.select("div#1.foo.bar[title=bar][name=qux]"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals("div", div2.first().tagName()); [EOL]     Elements p2 = doc.select("div *.foo"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals("p", p2.first().tagName()); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = "<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select("div.foo"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals("div", div.first().tagName()); [EOL]     Elements p = doc.select("div .foo"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals("p", p.first().tagName()); [EOL]     Elements div2 = doc.select("div#1.foo.bar[title=bar][name=qux]"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals("div", div2.first().tagName()); [EOL]     Elements p2 = doc.select("div *.foo"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals("p", p2.first().tagName()); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = "<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select("div.foo"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals("div", div.first().tagName()); [EOL]     Elements p = doc.select("div .foo"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals("p", p.first().tagName()); [EOL]     Elements div2 = doc.select("div#1.foo.bar[title=bar][name=qux]"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals("div", div2.first().tagName()); [EOL]     Elements p2 = doc.select("div *.foo"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals("p", p2.first().tagName()); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = "<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select("div.foo"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals("div", div.first().tagName()); [EOL]     Elements p = doc.select("div .foo"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals("p", p.first().tagName()); [EOL]     Elements div2 = doc.select("div#1.foo.bar[title=bar][name=qux]"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals("div", div2.first().tagName()); [EOL]     Elements p2 = doc.select("div *.foo"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals("p", p2.first().tagName()); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = "<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select("div.foo"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals("div", div.first().tagName()); [EOL]     Elements p = doc.select("div .foo"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals("p", p.first().tagName()); [EOL]     Elements div2 = doc.select("div#1.foo.bar[title=bar][name=qux]"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals("div", div2.first().tagName()); [EOL]     Elements p2 = doc.select("div *.foo"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals("p", p2.first().tagName()); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = "<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select("div.foo"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals("div", div.first().tagName()); [EOL]     Elements p = doc.select("div .foo"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals("p", p.first().tagName()); [EOL]     Elements div2 = doc.select("div#1.foo.bar[title=bar][name=qux]"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals("div", div2.first().tagName()); [EOL]     Elements p2 = doc.select("div *.foo"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals("p", p2.first().tagName()); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = "<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select("div.foo"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals("div", div.first().tagName()); [EOL]     Elements p = doc.select("div .foo"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals("p", p.first().tagName()); [EOL]     Elements div2 = doc.select("div#1.foo.bar[title=bar][name=qux]"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals("div", div2.first().tagName()); [EOL]     Elements p2 = doc.select("div *.foo"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals("p", p2.first().tagName()); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = "<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select("div.foo"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals("div", div.first().tagName()); [EOL]     Elements p = doc.select("div .foo"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals("p", p.first().tagName()); [EOL]     Elements div2 = doc.select("div#1.foo.bar[title=bar][name=qux]"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals("div", div2.first().tagName()); [EOL]     Elements p2 = doc.select("div *.foo"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals("p", p2.first().tagName()); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = "<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select("div.foo"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals("div", div.first().tagName()); [EOL]     Elements p = doc.select("div .foo"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals("p", p.first().tagName()); [EOL]     Elements div2 = doc.select("div#1.foo.bar[title=bar][name=qux]"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals("div", div2.first().tagName()); [EOL]     Elements p2 = doc.select("div *.foo"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals("p", p2.first().tagName()); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = "<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select("div.foo"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals("div", div.first().tagName()); [EOL]     Elements p = doc.select("div .foo"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals("p", p.first().tagName()); [EOL]     Elements div2 = doc.select("div#1.foo.bar[title=bar][name=qux]"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals("div", div2.first().tagName()); [EOL]     Elements p2 = doc.select("div *.foo"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals("p", p2.first().tagName()); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = "<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select("div.foo"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals("div", div.first().tagName()); [EOL]     Elements p = doc.select("div .foo"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals("p", p.first().tagName()); [EOL]     Elements div2 = doc.select("div#1.foo.bar[title=bar][name=qux]"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals("div", div2.first().tagName()); [EOL]     Elements p2 = doc.select("div *.foo"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals("p", p2.first().tagName()); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void testAddNewText() { [EOL]     Document doc = Jsoup.parse("<div id=1><p>Hello</p></div>"); [EOL]     Element div = doc.getElementById("1"); [EOL]     div.appendText(" there & now >"); [EOL]     assertEquals("<p>Hello</p> there &amp; now &gt;", TextUtil.stripNewlines(div.html())); [EOL] }
@Test [EOL] public void testAddNewText() { [EOL]     Document doc = Jsoup.parse("<div id=1><p>Hello</p></div>"); [EOL]     Element div = doc.getElementById("1"); [EOL]     div.appendText(" there & now >"); [EOL]     assertEquals("<p>Hello</p> there &amp; now &gt;", TextUtil.stripNewlines(div.html())); [EOL] }
@Test [EOL] public void testAddNewText() { [EOL]     Document doc = Jsoup.parse("<div id=1><p>Hello</p></div>"); [EOL]     Element div = doc.getElementById("1"); [EOL]     div.appendText(" there & now >"); [EOL]     assertEquals("<p>Hello</p> there &amp; now &gt;", TextUtil.stripNewlines(div.html())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void testGetSiblings() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello<p id=1>there<p>this<p>is<p>an<p id=last>element</div>"); [EOL]     Element p = doc.getElementById("1"); [EOL]     assertEquals("there", p.text()); [EOL]     assertEquals("Hello", p.previousElementSibling().text()); [EOL]     assertEquals("this", p.nextElementSibling().text()); [EOL]     assertEquals("Hello", p.firstElementSibling().text()); [EOL]     assertEquals("element", p.lastElementSibling().text()); [EOL] }
@Test [EOL] public void testGetSiblings() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello<p id=1>there<p>this<p>is<p>an<p id=last>element</div>"); [EOL]     Element p = doc.getElementById("1"); [EOL]     assertEquals("there", p.text()); [EOL]     assertEquals("Hello", p.previousElementSibling().text()); [EOL]     assertEquals("this", p.nextElementSibling().text()); [EOL]     assertEquals("Hello", p.firstElementSibling().text()); [EOL]     assertEquals("element", p.lastElementSibling().text()); [EOL] }
@Test [EOL] public void testGetSiblings() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello<p id=1>there<p>this<p>is<p>an<p id=last>element</div>"); [EOL]     Element p = doc.getElementById("1"); [EOL]     assertEquals("there", p.text()); [EOL]     assertEquals("Hello", p.previousElementSibling().text()); [EOL]     assertEquals("this", p.nextElementSibling().text()); [EOL]     assertEquals("Hello", p.firstElementSibling().text()); [EOL]     assertEquals("element", p.lastElementSibling().text()); [EOL] }
@Test [EOL] public void testGetSiblings() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello<p id=1>there<p>this<p>is<p>an<p id=last>element</div>"); [EOL]     Element p = doc.getElementById("1"); [EOL]     assertEquals("there", p.text()); [EOL]     assertEquals("Hello", p.previousElementSibling().text()); [EOL]     assertEquals("this", p.nextElementSibling().text()); [EOL]     assertEquals("Hello", p.firstElementSibling().text()); [EOL]     assertEquals("element", p.lastElementSibling().text()); [EOL] }
@Test [EOL] public void testGetSiblings() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello<p id=1>there<p>this<p>is<p>an<p id=last>element</div>"); [EOL]     Element p = doc.getElementById("1"); [EOL]     assertEquals("there", p.text()); [EOL]     assertEquals("Hello", p.previousElementSibling().text()); [EOL]     assertEquals("this", p.nextElementSibling().text()); [EOL]     assertEquals("Hello", p.firstElementSibling().text()); [EOL]     assertEquals("element", p.lastElementSibling().text()); [EOL] }
@Test [EOL] public void testGetSiblings() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello<p id=1>there<p>this<p>is<p>an<p id=last>element</div>"); [EOL]     Element p = doc.getElementById("1"); [EOL]     assertEquals("there", p.text()); [EOL]     assertEquals("Hello", p.previousElementSibling().text()); [EOL]     assertEquals("this", p.nextElementSibling().text()); [EOL]     assertEquals("Hello", p.firstElementSibling().text()); [EOL]     assertEquals("element", p.lastElementSibling().text()); [EOL] }
@Test [EOL] public void testGetSiblings() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello<p id=1>there<p>this<p>is<p>an<p id=last>element</div>"); [EOL]     Element p = doc.getElementById("1"); [EOL]     assertEquals("there", p.text()); [EOL]     assertEquals("Hello", p.previousElementSibling().text()); [EOL]     assertEquals("this", p.nextElementSibling().text()); [EOL]     assertEquals("Hello", p.firstElementSibling().text()); [EOL]     assertEquals("element", p.lastElementSibling().text()); [EOL] }
@Test [EOL] public void testGetSiblings() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello<p id=1>there<p>this<p>is<p>an<p id=last>element</div>"); [EOL]     Element p = doc.getElementById("1"); [EOL]     assertEquals("there", p.text()); [EOL]     assertEquals("Hello", p.previousElementSibling().text()); [EOL]     assertEquals("this", p.nextElementSibling().text()); [EOL]     assertEquals("Hello", p.firstElementSibling().text()); [EOL]     assertEquals("element", p.lastElementSibling().text()); [EOL] }
@Test [EOL] public void testGetSiblings() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello<p id=1>there<p>this<p>is<p>an<p id=last>element</div>"); [EOL]     Element p = doc.getElementById("1"); [EOL]     assertEquals("there", p.text()); [EOL]     assertEquals("Hello", p.previousElementSibling().text()); [EOL]     assertEquals("this", p.nextElementSibling().text()); [EOL]     assertEquals("Hello", p.firstElementSibling().text()); [EOL]     assertEquals("element", p.lastElementSibling().text()); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void filter() { [EOL]     String h = "<p>Excl</p><div class=headline><p>Hello</p><p>There</p></div><div class=headline><h1>Headline</h1></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements els = doc.select(".headline").select("p"); [EOL]     assertEquals(2, els.size()); [EOL]     assertEquals("Hello", els.get(0).text()); [EOL]     assertEquals("There", els.get(1).text()); [EOL] }
@Test [EOL] public void filter() { [EOL]     String h = "<p>Excl</p><div class=headline><p>Hello</p><p>There</p></div><div class=headline><h1>Headline</h1></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements els = doc.select(".headline").select("p"); [EOL]     assertEquals(2, els.size()); [EOL]     assertEquals("Hello", els.get(0).text()); [EOL]     assertEquals("There", els.get(1).text()); [EOL] }
@Test [EOL] public void filter() { [EOL]     String h = "<p>Excl</p><div class=headline><p>Hello</p><p>There</p></div><div class=headline><h1>Headline</h1></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements els = doc.select(".headline").select("p"); [EOL]     assertEquals(2, els.size()); [EOL]     assertEquals("Hello", els.get(0).text()); [EOL]     assertEquals("There", els.get(1).text()); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void handlesEmptyBlocks() { [EOL]     String h = "<div id=1/><div id=2><img /></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Element div1 = doc.getElementById("1"); [EOL]     assertTrue(div1.children().isEmpty()); [EOL] }
@Test [EOL] public void handlesEmptyBlocks() { [EOL]     String h = "<div id=1/><div id=2><img /></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Element div1 = doc.getElementById("1"); [EOL]     assertTrue(div1.children().isEmpty()); [EOL] }
@Test [EOL] public void handlesEmptyBlocks() { [EOL]     String h = "<div id=1/><div id=2><img /></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Element div1 = doc.getElementById("1"); [EOL]     assertTrue(div1.children().isEmpty()); [EOL] }
@Test [EOL] public void handlesEmptyBlocks() { [EOL]     String h = "<div id=1/><div id=2><img /></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Element div1 = doc.getElementById("1"); [EOL]     assertTrue(div1.children().isEmpty()); [EOL] }
@Test [EOL] public void handlesEmptyBlocks() { [EOL]     String h = "<div id=1/><div id=2><img /></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Element div1 = doc.getElementById("1"); [EOL]     assertTrue(div1.children().isEmpty()); [EOL] }
@Test [EOL] public void handlesEmptyBlocks() { [EOL]     String h = "<div id=1/><div id=2><img /></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Element div1 = doc.getElementById("1"); [EOL]     assertTrue(div1.children().isEmpty()); [EOL] }
@Test [EOL] public void handlesEmptyBlocks() { [EOL]     String h = "<div id=1/><div id=2><img /></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Element div1 = doc.getElementById("1"); [EOL]     assertTrue(div1.children().isEmpty()); [EOL] }
@Test [EOL] public void parsesUnterminatedAttribute() { [EOL]     String h1 = "<p id=\"foo"; [EOL]     Document doc = Jsoup.parse(h1); [EOL]     Element p = doc.getElementById("foo"); [EOL]     assertNotNull(p); [EOL]     assertEquals("p", p.tagName()); [EOL] }
@Test [EOL] public void parsesUnterminatedAttribute() { [EOL]     String h1 = "<p id=\"foo"; [EOL]     Document doc = Jsoup.parse(h1); [EOL]     Element p = doc.getElementById("foo"); [EOL]     assertNotNull(p); [EOL]     assertEquals("p", p.tagName()); [EOL] }
@Test [EOL] public void parsesUnterminatedAttribute() { [EOL]     String h1 = "<p id=\"foo"; [EOL]     Document doc = Jsoup.parse(h1); [EOL]     Element p = doc.getElementById("foo"); [EOL]     assertNotNull(p); [EOL]     assertEquals("p", p.tagName()); [EOL] }
@Test [EOL] public void parsesUnterminatedAttribute() { [EOL]     String h1 = "<p id=\"foo"; [EOL]     Document doc = Jsoup.parse(h1); [EOL]     Element p = doc.getElementById("foo"); [EOL]     assertNotNull(p); [EOL]     assertEquals("p", p.tagName()); [EOL] }
@Test [EOL] public void parsesUnterminatedAttribute() { [EOL]     String h1 = "<p id=\"foo"; [EOL]     Document doc = Jsoup.parse(h1); [EOL]     Element p = doc.getElementById("foo"); [EOL]     assertNotNull(p); [EOL]     assertEquals("p", p.tagName()); [EOL] }
@Test [EOL] public void parsesUnterminatedAttribute() { [EOL]     String h1 = "<p id=\"foo"; [EOL]     Document doc = Jsoup.parse(h1); [EOL]     Element p = doc.getElementById("foo"); [EOL]     assertNotNull(p); [EOL]     assertEquals("p", p.tagName()); [EOL] }
@Test [EOL] public void parsesUnterminatedAttribute() { [EOL]     String h1 = "<p id=\"foo"; [EOL]     Document doc = Jsoup.parse(h1); [EOL]     Element p = doc.getElementById("foo"); [EOL]     assertNotNull(p); [EOL]     assertEquals("p", p.tagName()); [EOL] }
@Test [EOL] public void parsesUnterminatedAttribute() { [EOL]     String h1 = "<p id=\"foo"; [EOL]     Document doc = Jsoup.parse(h1); [EOL]     Element p = doc.getElementById("foo"); [EOL]     assertNotNull(p); [EOL]     assertEquals("p", p.tagName()); [EOL] }
@Test [EOL] public void testIsValid() { [EOL]     String ok = "<p>Test <b><a href='http://example.com/'>OK</a></b></p>"; [EOL]     String nok1 = "<p><script></script>Not <b>OK</b></p>"; [EOL]     String nok2 = "<p align=right>Test Not <b>OK</b></p>"; [EOL]     assertTrue(Jsoup.isValid(ok, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok1, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok2, Whitelist.basic())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void testIsValid() { [EOL]     String ok = "<p>Test <b><a href='http://example.com/'>OK</a></b></p>"; [EOL]     String nok1 = "<p><script></script>Not <b>OK</b></p>"; [EOL]     String nok2 = "<p align=right>Test Not <b>OK</b></p>"; [EOL]     assertTrue(Jsoup.isValid(ok, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok1, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok2, Whitelist.basic())); [EOL] }
@Test [EOL] public void testIsValid() { [EOL]     String ok = "<p>Test <b><a href='http://example.com/'>OK</a></b></p>"; [EOL]     String nok1 = "<p><script></script>Not <b>OK</b></p>"; [EOL]     String nok2 = "<p align=right>Test Not <b>OK</b></p>"; [EOL]     assertTrue(Jsoup.isValid(ok, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok1, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok2, Whitelist.basic())); [EOL] }
@Test [EOL] public void testIsValid() { [EOL]     String ok = "<p>Test <b><a href='http://example.com/'>OK</a></b></p>"; [EOL]     String nok1 = "<p><script></script>Not <b>OK</b></p>"; [EOL]     String nok2 = "<p align=right>Test Not <b>OK</b></p>"; [EOL]     assertTrue(Jsoup.isValid(ok, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok1, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok2, Whitelist.basic())); [EOL] }
@Test [EOL] public void testIsValid() { [EOL]     String ok = "<p>Test <b><a href='http://example.com/'>OK</a></b></p>"; [EOL]     String nok1 = "<p><script></script>Not <b>OK</b></p>"; [EOL]     String nok2 = "<p align=right>Test Not <b>OK</b></p>"; [EOL]     assertTrue(Jsoup.isValid(ok, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok1, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok2, Whitelist.basic())); [EOL] }
@Test [EOL] public void testIsValid() { [EOL]     String ok = "<p>Test <b><a href='http://example.com/'>OK</a></b></p>"; [EOL]     String nok1 = "<p><script></script>Not <b>OK</b></p>"; [EOL]     String nok2 = "<p align=right>Test Not <b>OK</b></p>"; [EOL]     assertTrue(Jsoup.isValid(ok, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok1, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok2, Whitelist.basic())); [EOL] }
@Test [EOL] public void spanSemantics() { [EOL]     Tag span = Tag.valueOf("span"); [EOL]     Tag p = Tag.valueOf("p"); [EOL]     Tag div = Tag.valueOf("div"); [EOL]     assertTrue(span.canContain(span)); [EOL]     assertFalse(span.canContain(p)); [EOL]     assertFalse(span.canContain(div)); [EOL] }
@Test [EOL] public void spanSemantics() { [EOL]     Tag span = Tag.valueOf("span"); [EOL]     Tag p = Tag.valueOf("p"); [EOL]     Tag div = Tag.valueOf("div"); [EOL]     assertTrue(span.canContain(span)); [EOL]     assertFalse(span.canContain(p)); [EOL]     assertFalse(span.canContain(div)); [EOL] }
@Test [EOL] public void spanSemantics() { [EOL]     Tag span = Tag.valueOf("span"); [EOL]     Tag p = Tag.valueOf("p"); [EOL]     Tag div = Tag.valueOf("div"); [EOL]     assertTrue(span.canContain(span)); [EOL]     assertFalse(span.canContain(p)); [EOL]     assertFalse(span.canContain(div)); [EOL] }
@Test [EOL] public void spanSemantics() { [EOL]     Tag span = Tag.valueOf("span"); [EOL]     Tag p = Tag.valueOf("p"); [EOL]     Tag div = Tag.valueOf("div"); [EOL]     assertTrue(span.canContain(span)); [EOL]     assertFalse(span.canContain(p)); [EOL]     assertFalse(span.canContain(div)); [EOL] }
@Test [EOL] public void spanSemantics() { [EOL]     Tag span = Tag.valueOf("span"); [EOL]     Tag p = Tag.valueOf("p"); [EOL]     Tag div = Tag.valueOf("div"); [EOL]     assertTrue(span.canContain(span)); [EOL]     assertFalse(span.canContain(p)); [EOL]     assertFalse(span.canContain(div)); [EOL] }
@Test [EOL] public void spanSemantics() { [EOL]     Tag span = Tag.valueOf("span"); [EOL]     Tag p = Tag.valueOf("p"); [EOL]     Tag div = Tag.valueOf("div"); [EOL]     assertTrue(span.canContain(span)); [EOL]     assertFalse(span.canContain(p)); [EOL]     assertFalse(span.canContain(div)); [EOL] }
@Test [EOL] public void spanSemantics() { [EOL]     Tag span = Tag.valueOf("span"); [EOL]     Tag p = Tag.valueOf("p"); [EOL]     Tag div = Tag.valueOf("div"); [EOL]     assertTrue(span.canContain(span)); [EOL]     assertFalse(span.canContain(p)); [EOL]     assertFalse(span.canContain(div)); [EOL] }
@Test [EOL] public void spanSemantics() { [EOL]     Tag span = Tag.valueOf("span"); [EOL]     Tag p = Tag.valueOf("p"); [EOL]     Tag div = Tag.valueOf("div"); [EOL]     assertTrue(span.canContain(span)); [EOL]     assertFalse(span.canContain(p)); [EOL]     assertFalse(span.canContain(div)); [EOL] }
@Test [EOL] public void spanSemantics() { [EOL]     Tag span = Tag.valueOf("span"); [EOL]     Tag p = Tag.valueOf("p"); [EOL]     Tag div = Tag.valueOf("div"); [EOL]     assertTrue(span.canContain(span)); [EOL]     assertFalse(span.canContain(p)); [EOL]     assertFalse(span.canContain(div)); [EOL] }
@Test [EOL] public void spanSemantics() { [EOL]     Tag span = Tag.valueOf("span"); [EOL]     Tag p = Tag.valueOf("p"); [EOL]     Tag div = Tag.valueOf("div"); [EOL]     assertTrue(span.canContain(span)); [EOL]     assertFalse(span.canContain(p)); [EOL]     assertFalse(span.canContain(div)); [EOL] }
