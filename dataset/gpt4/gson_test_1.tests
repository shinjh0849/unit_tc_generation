public void testGenericArrayTypeField() throws Exception { [EOL]     Type listType = new TypeToken<List<String>[]>() { [EOL]     }.getType(); [EOL]     Field f = obj.getClass().getField("simpleGenericArray"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertTrue(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(listType, typeInfo.getActualType()); [EOL]     assertEquals(List[].class, typeInfo.getRawClass()); [EOL] }
public void testGenericArrayTypeField() throws Exception { [EOL]     Type listType = new TypeToken<List<String>[]>() { [EOL]     }.getType(); [EOL]     Field f = obj.getClass().getField("simpleGenericArray"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertTrue(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(listType, typeInfo.getActualType()); [EOL]     assertEquals(List[].class, typeInfo.getRawClass()); [EOL] }
public void testGenericArrayTypeField() throws Exception { [EOL]     Type listType = new TypeToken<List<String>[]>() { [EOL]     }.getType(); [EOL]     Field f = obj.getClass().getField("simpleGenericArray"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertTrue(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(listType, typeInfo.getActualType()); [EOL]     assertEquals(List[].class, typeInfo.getRawClass()); [EOL] }
public void testGenericArrayTypeField() throws Exception { [EOL]     Type listType = new TypeToken<List<String>[]>() { [EOL]     }.getType(); [EOL]     Field f = obj.getClass().getField("simpleGenericArray"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertTrue(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(listType, typeInfo.getActualType()); [EOL]     assertEquals(List[].class, typeInfo.getRawClass()); [EOL] }
public void testGenericArrayTypeField() throws Exception { [EOL]     Type listType = new TypeToken<List<String>[]>() { [EOL]     }.getType(); [EOL]     Field f = obj.getClass().getField("simpleGenericArray"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertTrue(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(listType, typeInfo.getActualType()); [EOL]     assertEquals(List[].class, typeInfo.getRawClass()); [EOL] }
public void testGenericArrayTypeField() throws Exception { [EOL]     Type listType = new TypeToken<List<String>[]>() { [EOL]     }.getType(); [EOL]     Field f = obj.getClass().getField("simpleGenericArray"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertTrue(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(listType, typeInfo.getActualType()); [EOL]     assertEquals(List[].class, typeInfo.getRawClass()); [EOL] }
public void testGenericArrayTypeField() throws Exception { [EOL]     Type listType = new TypeToken<List<String>[]>() { [EOL]     }.getType(); [EOL]     Field f = obj.getClass().getField("simpleGenericArray"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertTrue(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(listType, typeInfo.getActualType()); [EOL]     assertEquals(List[].class, typeInfo.getRawClass()); [EOL] }
public void testGenericArrayTypeField() throws Exception { [EOL]     Type listType = new TypeToken<List<String>[]>() { [EOL]     }.getType(); [EOL]     Field f = obj.getClass().getField("simpleGenericArray"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertTrue(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(listType, typeInfo.getActualType()); [EOL]     assertEquals(List[].class, typeInfo.getRawClass()); [EOL] }
public void testGenericArrayTypeField() throws Exception { [EOL]     Type listType = new TypeToken<List<String>[]>() { [EOL]     }.getType(); [EOL]     Field f = obj.getClass().getField("simpleGenericArray"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertTrue(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(listType, typeInfo.getActualType()); [EOL]     assertEquals(List[].class, typeInfo.getRawClass()); [EOL] }
public void testGenericArrayTypeField() throws Exception { [EOL]     Type listType = new TypeToken<List<String>[]>() { [EOL]     }.getType(); [EOL]     Field f = obj.getClass().getField("simpleGenericArray"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertTrue(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(listType, typeInfo.getActualType()); [EOL]     assertEquals(List[].class, typeInfo.getRawClass()); [EOL] }
public void testPrettyPrintArrayOfObjects() { [EOL]     ArrayOfObjects target = new ArrayOfObjects(); [EOL]     String json = gson.toJson(target); [EOL]     print(json); [EOL] }
public void testPrettyPrintArrayOfObjects() { [EOL]     ArrayOfObjects target = new ArrayOfObjects(); [EOL]     String json = gson.toJson(target); [EOL]     print(json); [EOL] }
public void testPrettyPrintArrayOfObjects() { [EOL]     ArrayOfObjects target = new ArrayOfObjects(); [EOL]     String json = gson.toJson(target); [EOL]     print(json); [EOL] }
public void testPrettyPrintArrayOfObjects() { [EOL]     ArrayOfObjects target = new ArrayOfObjects(); [EOL]     String json = gson.toJson(target); [EOL]     print(json); [EOL] }
public void testBaseSerializedAsSub() { [EOL]     Base base = new Sub(); [EOL]     JsonObject json = gson.toJsonTree(base).getAsJsonObject(); [EOL]     assertEquals(Sub.SUB_NAME, json.get(Sub.SUB_FIELD_KEY).getAsString()); [EOL] }
public void testBaseSerializedAsSub() { [EOL]     Base base = new Sub(); [EOL]     JsonObject json = gson.toJsonTree(base).getAsJsonObject(); [EOL]     assertEquals(Sub.SUB_NAME, json.get(Sub.SUB_FIELD_KEY).getAsString()); [EOL] }
public void testBaseSerializedAsSub() { [EOL]     Base base = new Sub(); [EOL]     JsonObject json = gson.toJsonTree(base).getAsJsonObject(); [EOL]     assertEquals(Sub.SUB_NAME, json.get(Sub.SUB_FIELD_KEY).getAsString()); [EOL] }
public void testBaseSerializedAsSub() { [EOL]     Base base = new Sub(); [EOL]     JsonObject json = gson.toJsonTree(base).getAsJsonObject(); [EOL]     assertEquals(Sub.SUB_NAME, json.get(Sub.SUB_FIELD_KEY).getAsString()); [EOL] }
public void testBaseSerializedAsSub() { [EOL]     Base base = new Sub(); [EOL]     JsonObject json = gson.toJsonTree(base).getAsJsonObject(); [EOL]     assertEquals(Sub.SUB_NAME, json.get(Sub.SUB_FIELD_KEY).getAsString()); [EOL] }
public void testBaseSerializedAsSub() { [EOL]     Base base = new Sub(); [EOL]     JsonObject json = gson.toJsonTree(base).getAsJsonObject(); [EOL]     assertEquals(Sub.SUB_NAME, json.get(Sub.SUB_FIELD_KEY).getAsString()); [EOL] }
public void testBaseSerializedAsSub() { [EOL]     Base base = new Sub(); [EOL]     JsonObject json = gson.toJsonTree(base).getAsJsonObject(); [EOL]     assertEquals(Sub.SUB_NAME, json.get(Sub.SUB_FIELD_KEY).getAsString()); [EOL] }
public void testDeepNestingArrays() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.beginArray(); [EOL]     } [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.endArray(); [EOL]     } [EOL]     assertEquals("[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]", stringWriter.toString()); [EOL] }
public void testDeepNestingArrays() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.beginArray(); [EOL]     } [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.endArray(); [EOL]     } [EOL]     assertEquals("[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]", stringWriter.toString()); [EOL] }
public void testDeepNestingArrays() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.beginArray(); [EOL]     } [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.endArray(); [EOL]     } [EOL]     assertEquals("[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]", stringWriter.toString()); [EOL] }
public void testDeepNestingArrays() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.beginArray(); [EOL]     } [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.endArray(); [EOL]     } [EOL]     assertEquals("[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]", stringWriter.toString()); [EOL] }
public void testDeepNestingArrays() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.beginArray(); [EOL]     } [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.endArray(); [EOL]     } [EOL]     assertEquals("[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]", stringWriter.toString()); [EOL] }
public void testDeepNestingArrays() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.beginArray(); [EOL]     } [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.endArray(); [EOL]     } [EOL]     assertEquals("[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]", stringWriter.toString()); [EOL] }
public void testDeepNestingArrays() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.beginArray(); [EOL]     } [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.endArray(); [EOL]     } [EOL]     assertEquals("[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]", stringWriter.toString()); [EOL] }
public void testDeepNestingArrays() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.beginArray(); [EOL]     } [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.endArray(); [EOL]     } [EOL]     assertEquals("[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]", stringWriter.toString()); [EOL] }
public void testDeepNestingArrays() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.beginArray(); [EOL]     } [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.endArray(); [EOL]     } [EOL]     assertEquals("[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]", stringWriter.toString()); [EOL] }
public void testDeepNestingArrays() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.beginArray(); [EOL]     } [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.endArray(); [EOL]     } [EOL]     assertEquals("[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]", stringWriter.toString()); [EOL] }
public void testDeepNestingArrays() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.beginArray(); [EOL]     } [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.endArray(); [EOL]     } [EOL]     assertEquals("[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]", stringWriter.toString()); [EOL] }
public void testDeepNestingArrays() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.beginArray(); [EOL]     } [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.endArray(); [EOL]     } [EOL]     assertEquals("[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]", stringWriter.toString()); [EOL] }
public void testDeepNestingArrays() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.beginArray(); [EOL]     } [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.endArray(); [EOL]     } [EOL]     assertEquals("[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]", stringWriter.toString()); [EOL] }
public void testDeepNestingArrays() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.beginArray(); [EOL]     } [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.endArray(); [EOL]     } [EOL]     assertEquals("[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]", stringWriter.toString()); [EOL] }
public void testNumbers() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.value(new BigInteger("0")); [EOL]     jsonWriter.value(new BigInteger("9223372036854775808")); [EOL]     jsonWriter.value(new BigInteger("-9223372036854775809")); [EOL]     jsonWriter.value(new BigDecimal("3.141592653589793238462643383")); [EOL]     jsonWriter.endArray(); [EOL]     jsonWriter.close(); [EOL]     assertEquals("[0," + "9223372036854775808," + "-9223372036854775809," + "3.141592653589793238462643383]", stringWriter.toString()); [EOL] }
public void testNumbers() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.value(new BigInteger("0")); [EOL]     jsonWriter.value(new BigInteger("9223372036854775808")); [EOL]     jsonWriter.value(new BigInteger("-9223372036854775809")); [EOL]     jsonWriter.value(new BigDecimal("3.141592653589793238462643383")); [EOL]     jsonWriter.endArray(); [EOL]     jsonWriter.close(); [EOL]     assertEquals("[0," + "9223372036854775808," + "-9223372036854775809," + "3.141592653589793238462643383]", stringWriter.toString()); [EOL] }
public void testNumbers() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.value(new BigInteger("0")); [EOL]     jsonWriter.value(new BigInteger("9223372036854775808")); [EOL]     jsonWriter.value(new BigInteger("-9223372036854775809")); [EOL]     jsonWriter.value(new BigDecimal("3.141592653589793238462643383")); [EOL]     jsonWriter.endArray(); [EOL]     jsonWriter.close(); [EOL]     assertEquals("[0," + "9223372036854775808," + "-9223372036854775809," + "3.141592653589793238462643383]", stringWriter.toString()); [EOL] }
public void testNumbers() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.value(new BigInteger("0")); [EOL]     jsonWriter.value(new BigInteger("9223372036854775808")); [EOL]     jsonWriter.value(new BigInteger("-9223372036854775809")); [EOL]     jsonWriter.value(new BigDecimal("3.141592653589793238462643383")); [EOL]     jsonWriter.endArray(); [EOL]     jsonWriter.close(); [EOL]     assertEquals("[0," + "9223372036854775808," + "-9223372036854775809," + "3.141592653589793238462643383]", stringWriter.toString()); [EOL] }
public void testNumbers() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.value(new BigInteger("0")); [EOL]     jsonWriter.value(new BigInteger("9223372036854775808")); [EOL]     jsonWriter.value(new BigInteger("-9223372036854775809")); [EOL]     jsonWriter.value(new BigDecimal("3.141592653589793238462643383")); [EOL]     jsonWriter.endArray(); [EOL]     jsonWriter.close(); [EOL]     assertEquals("[0," + "9223372036854775808," + "-9223372036854775809," + "3.141592653589793238462643383]", stringWriter.toString()); [EOL] }
public void testSingleQuoteInStringSerialization() throws Exception { [EOL]     String valueWithQuotes = "beforeQuote'afterQuote"; [EOL]     String jsonRepresentation = gson.toJson(valueWithQuotes); [EOL]     assertEquals(valueWithQuotes, gson.fromJson(jsonRepresentation, String.class)); [EOL] }
public void testSingleQuoteInStringSerialization() throws Exception { [EOL]     String valueWithQuotes = "beforeQuote'afterQuote"; [EOL]     String jsonRepresentation = gson.toJson(valueWithQuotes); [EOL]     assertEquals(valueWithQuotes, gson.fromJson(jsonRepresentation, String.class)); [EOL] }
public void testSingleQuoteInStringSerialization() throws Exception { [EOL]     String valueWithQuotes = "beforeQuote'afterQuote"; [EOL]     String jsonRepresentation = gson.toJson(valueWithQuotes); [EOL]     assertEquals(valueWithQuotes, gson.fromJson(jsonRepresentation, String.class)); [EOL] }
public void testSingleQuoteInStringSerialization() throws Exception { [EOL]     String valueWithQuotes = "beforeQuote'afterQuote"; [EOL]     String jsonRepresentation = gson.toJson(valueWithQuotes); [EOL]     assertEquals(valueWithQuotes, gson.fromJson(jsonRepresentation, String.class)); [EOL] }
public void testSingleQuoteInStringSerialization() throws Exception { [EOL]     String valueWithQuotes = "beforeQuote'afterQuote"; [EOL]     String jsonRepresentation = gson.toJson(valueWithQuotes); [EOL]     assertEquals(valueWithQuotes, gson.fromJson(jsonRepresentation, String.class)); [EOL] }
public void testDeepNestingArrays() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.beginArray(); [EOL]     } [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.endArray(); [EOL]     } [EOL]     assertEquals("[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]", stringWriter.toString()); [EOL] }
public void testDeepNestingArrays() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.beginArray(); [EOL]     } [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.endArray(); [EOL]     } [EOL]     assertEquals("[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]", stringWriter.toString()); [EOL] }
public void testDeepNestingArrays() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.beginArray(); [EOL]     } [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.endArray(); [EOL]     } [EOL]     assertEquals("[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]", stringWriter.toString()); [EOL] }
public void testDeepNestingArrays() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.beginArray(); [EOL]     } [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.endArray(); [EOL]     } [EOL]     assertEquals("[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]", stringWriter.toString()); [EOL] }
public void testBaseSerializedAsSub() { [EOL]     Base base = new Sub(); [EOL]     JsonObject json = gson.toJsonTree(base).getAsJsonObject(); [EOL]     assertEquals(Sub.SUB_NAME, json.get(Sub.SUB_FIELD_KEY).getAsString()); [EOL] }
public void testBaseSerializedAsSub() { [EOL]     Base base = new Sub(); [EOL]     JsonObject json = gson.toJsonTree(base).getAsJsonObject(); [EOL]     assertEquals(Sub.SUB_NAME, json.get(Sub.SUB_FIELD_KEY).getAsString()); [EOL] }
public void testNulls() { [EOL]     try { [EOL]         new JsonReader(null); [EOL]         fail(); [EOL]     } catch (NullPointerException expected) { [EOL]     } [EOL] }
public void testNulls() { [EOL]     try { [EOL]         new JsonReader(null); [EOL]         fail(); [EOL]     } catch (NullPointerException expected) { [EOL]     } [EOL] }
public void testLenientUnnecessaryArraySeparators() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true,,true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader.nextNull(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader.endArray(); [EOL]     reader = new JsonReader(new StringReader("[,true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     reader.nextNull(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader.endArray(); [EOL]     reader = new JsonReader(new StringReader("[true,]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader.nextNull(); [EOL]     reader.endArray(); [EOL]     reader = new JsonReader(new StringReader("[,]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     reader.nextNull(); [EOL]     reader.nextNull(); [EOL]     reader.endArray(); [EOL] }
public void testLenientUnquotedNames() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{a:true}")); [EOL]     reader.setLenient(true); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL] }
public void testLenientUnquotedNames() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{a:true}")); [EOL]     reader.setLenient(true); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL] }
public void testLenientUnquotedNames() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{a:true}")); [EOL]     reader.setLenient(true); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL] }
public void testLenientUnnecessaryArraySeparators() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true,,true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader.nextNull(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader.endArray(); [EOL]     reader = new JsonReader(new StringReader("[,true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     reader.nextNull(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader.endArray(); [EOL]     reader = new JsonReader(new StringReader("[true,]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader.nextNull(); [EOL]     reader.endArray(); [EOL]     reader = new JsonReader(new StringReader("[,]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     reader.nextNull(); [EOL]     reader.nextNull(); [EOL]     reader.endArray(); [EOL] }
public void testLenientUnnecessaryArraySeparators() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true,,true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader.nextNull(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader.endArray(); [EOL]     reader = new JsonReader(new StringReader("[,true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     reader.nextNull(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader.endArray(); [EOL]     reader = new JsonReader(new StringReader("[true,]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader.nextNull(); [EOL]     reader.endArray(); [EOL]     reader = new JsonReader(new StringReader("[,]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     reader.nextNull(); [EOL]     reader.nextNull(); [EOL]     reader.endArray(); [EOL] }
public void testLenientUnnecessaryArraySeparators() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true,,true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader.nextNull(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader.endArray(); [EOL]     reader = new JsonReader(new StringReader("[,true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     reader.nextNull(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader.endArray(); [EOL]     reader = new JsonReader(new StringReader("[true,]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader.nextNull(); [EOL]     reader.endArray(); [EOL]     reader = new JsonReader(new StringReader("[,]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     reader.nextNull(); [EOL]     reader.nextNull(); [EOL]     reader.endArray(); [EOL] }
public void testLenientUnnecessaryArraySeparators() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true,,true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader.nextNull(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader.endArray(); [EOL]     reader = new JsonReader(new StringReader("[,true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     reader.nextNull(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader.endArray(); [EOL]     reader = new JsonReader(new StringReader("[true,]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader.nextNull(); [EOL]     reader.endArray(); [EOL]     reader = new JsonReader(new StringReader("[,]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     reader.nextNull(); [EOL]     reader.nextNull(); [EOL]     reader.endArray(); [EOL] }
public void testNumberWithOctalPrefix() throws IOException { [EOL]     String json = "[01]"; [EOL]     JsonReader reader = new JsonReader(new StringReader(json)); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextInt(); [EOL]         fail(); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL]     try { [EOL]         reader.nextLong(); [EOL]         fail(); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL]     try { [EOL]         reader.nextDouble(); [EOL]         fail(); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL]     assertEquals("01", reader.nextString()); [EOL]     reader.endArray(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testNumberWithOctalPrefix() throws IOException { [EOL]     String json = "[01]"; [EOL]     JsonReader reader = new JsonReader(new StringReader(json)); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextInt(); [EOL]         fail(); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL]     try { [EOL]         reader.nextLong(); [EOL]         fail(); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL]     try { [EOL]         reader.nextDouble(); [EOL]         fail(); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL]     assertEquals("01", reader.nextString()); [EOL]     reader.endArray(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testNumberWithOctalPrefix() throws IOException { [EOL]     String json = "[01]"; [EOL]     JsonReader reader = new JsonReader(new StringReader(json)); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextInt(); [EOL]         fail(); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL]     try { [EOL]         reader.nextLong(); [EOL]         fail(); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL]     try { [EOL]         reader.nextDouble(); [EOL]         fail(); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL]     assertEquals("01", reader.nextString()); [EOL]     reader.endArray(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testNumberWithOctalPrefix() throws IOException { [EOL]     String json = "[01]"; [EOL]     JsonReader reader = new JsonReader(new StringReader(json)); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextInt(); [EOL]         fail(); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL]     try { [EOL]         reader.nextLong(); [EOL]         fail(); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL]     try { [EOL]         reader.nextDouble(); [EOL]         fail(); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL]     assertEquals("01", reader.nextString()); [EOL]     reader.endArray(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testNumberWithOctalPrefix() throws IOException { [EOL]     String json = "[01]"; [EOL]     JsonReader reader = new JsonReader(new StringReader(json)); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextInt(); [EOL]         fail(); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL]     try { [EOL]         reader.nextLong(); [EOL]         fail(); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL]     try { [EOL]         reader.nextDouble(); [EOL]         fail(); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL]     assertEquals("01", reader.nextString()); [EOL]     reader.endArray(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testNumberWithOctalPrefix() throws IOException { [EOL]     String json = "[01]"; [EOL]     JsonReader reader = new JsonReader(new StringReader(json)); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextInt(); [EOL]         fail(); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL]     try { [EOL]         reader.nextLong(); [EOL]         fail(); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL]     try { [EOL]         reader.nextDouble(); [EOL]         fail(); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL]     assertEquals("01", reader.nextString()); [EOL]     reader.endArray(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testNumberWithOctalPrefix() throws IOException { [EOL]     String json = "[01]"; [EOL]     JsonReader reader = new JsonReader(new StringReader(json)); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextInt(); [EOL]         fail(); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL]     try { [EOL]         reader.nextLong(); [EOL]         fail(); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL]     try { [EOL]         reader.nextDouble(); [EOL]         fail(); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL]     assertEquals("01", reader.nextString()); [EOL]     reader.endArray(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testNumberWithOctalPrefix() throws IOException { [EOL]     String json = "[01]"; [EOL]     JsonReader reader = new JsonReader(new StringReader(json)); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextInt(); [EOL]         fail(); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL]     try { [EOL]         reader.nextLong(); [EOL]         fail(); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL]     try { [EOL]         reader.nextDouble(); [EOL]         fail(); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL]     assertEquals("01", reader.nextString()); [EOL]     reader.endArray(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testNumberWithOctalPrefix() throws IOException { [EOL]     String json = "[01]"; [EOL]     JsonReader reader = new JsonReader(new StringReader(json)); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextInt(); [EOL]         fail(); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL]     try { [EOL]         reader.nextLong(); [EOL]         fail(); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL]     try { [EOL]         reader.nextDouble(); [EOL]         fail(); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL]     assertEquals("01", reader.nextString()); [EOL]     reader.endArray(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testNumberWithOctalPrefix() throws IOException { [EOL]     String json = "[01]"; [EOL]     JsonReader reader = new JsonReader(new StringReader(json)); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextInt(); [EOL]         fail(); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL]     try { [EOL]         reader.nextLong(); [EOL]         fail(); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL]     try { [EOL]         reader.nextDouble(); [EOL]         fail(); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL]     assertEquals("01", reader.nextString()); [EOL]     reader.endArray(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testNumberWithOctalPrefix() throws IOException { [EOL]     String json = "[01]"; [EOL]     JsonReader reader = new JsonReader(new StringReader(json)); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextInt(); [EOL]         fail(); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL]     try { [EOL]         reader.nextLong(); [EOL]         fail(); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL]     try { [EOL]         reader.nextDouble(); [EOL]         fail(); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL]     assertEquals("01", reader.nextString()); [EOL]     reader.endArray(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testNumberWithOctalPrefix() throws IOException { [EOL]     String json = "[01]"; [EOL]     JsonReader reader = new JsonReader(new StringReader(json)); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextInt(); [EOL]         fail(); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL]     try { [EOL]         reader.nextLong(); [EOL]         fail(); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL]     try { [EOL]         reader.nextDouble(); [EOL]         fail(); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL]     assertEquals("01", reader.nextString()); [EOL]     reader.endArray(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testNumberWithOctalPrefix() throws IOException { [EOL]     String json = "[01]"; [EOL]     JsonReader reader = new JsonReader(new StringReader(json)); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextInt(); [EOL]         fail(); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL]     try { [EOL]         reader.nextLong(); [EOL]         fail(); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL]     try { [EOL]         reader.nextDouble(); [EOL]         fail(); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL]     assertEquals("01", reader.nextString()); [EOL]     reader.endArray(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testNumberWithOctalPrefix() throws IOException { [EOL]     String json = "[01]"; [EOL]     JsonReader reader = new JsonReader(new StringReader(json)); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextInt(); [EOL]         fail(); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL]     try { [EOL]         reader.nextLong(); [EOL]         fail(); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL]     try { [EOL]         reader.nextDouble(); [EOL]         fail(); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL]     assertEquals("01", reader.nextString()); [EOL]     reader.endArray(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testNumberWithOctalPrefix() throws IOException { [EOL]     String json = "[01]"; [EOL]     JsonReader reader = new JsonReader(new StringReader(json)); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextInt(); [EOL]         fail(); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL]     try { [EOL]         reader.nextLong(); [EOL]         fail(); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL]     try { [EOL]         reader.nextDouble(); [EOL]         fail(); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL]     assertEquals("01", reader.nextString()); [EOL]     reader.endArray(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testInvalidArrayDeserialization() { [EOL]     String json = "[1, 2 3, 4, 5]"; [EOL]     try { [EOL]         gson.fromJson(json, int[].class); [EOL]         fail("Gson should not deserialize array elements with missing ,"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testInvalidArrayDeserialization() { [EOL]     String json = "[1, 2 3, 4, 5]"; [EOL]     try { [EOL]         gson.fromJson(json, int[].class); [EOL]         fail("Gson should not deserialize array elements with missing ,"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testInvalidArrayDeserialization() { [EOL]     String json = "[1, 2 3, 4, 5]"; [EOL]     try { [EOL]         gson.fromJson(json, int[].class); [EOL]         fail("Gson should not deserialize array elements with missing ,"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testInvalidArrayDeserialization() { [EOL]     String json = "[1, 2 3, 4, 5]"; [EOL]     try { [EOL]         gson.fromJson(json, int[].class); [EOL]         fail("Gson should not deserialize array elements with missing ,"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testInvalidArrayDeserialization() { [EOL]     String json = "[1, 2 3, 4, 5]"; [EOL]     try { [EOL]         gson.fromJson(json, int[].class); [EOL]         fail("Gson should not deserialize array elements with missing ,"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testInvalidArrayDeserialization() { [EOL]     String json = "[1, 2 3, 4, 5]"; [EOL]     try { [EOL]         gson.fromJson(json, int[].class); [EOL]         fail("Gson should not deserialize array elements with missing ,"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testLenientUnquotedNames() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{a:true}")); [EOL]     reader.setLenient(true); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL] }
public void testLenientUnnecessaryArraySeparators() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true,,true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader.nextNull(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader.endArray(); [EOL]     reader = new JsonReader(new StringReader("[,true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     reader.nextNull(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader.endArray(); [EOL]     reader = new JsonReader(new StringReader("[true,]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader.nextNull(); [EOL]     reader.endArray(); [EOL]     reader = new JsonReader(new StringReader("[,]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     reader.nextNull(); [EOL]     reader.nextNull(); [EOL]     reader.endArray(); [EOL] }
public void testLenientUnnecessaryArraySeparators() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true,,true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader.nextNull(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader.endArray(); [EOL]     reader = new JsonReader(new StringReader("[,true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     reader.nextNull(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader.endArray(); [EOL]     reader = new JsonReader(new StringReader("[true,]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader.nextNull(); [EOL]     reader.endArray(); [EOL]     reader = new JsonReader(new StringReader("[,]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     reader.nextNull(); [EOL]     reader.nextNull(); [EOL]     reader.endArray(); [EOL] }
public void testLenientUnnecessaryArraySeparators() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true,,true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader.nextNull(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader.endArray(); [EOL]     reader = new JsonReader(new StringReader("[,true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     reader.nextNull(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader.endArray(); [EOL]     reader = new JsonReader(new StringReader("[true,]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader.nextNull(); [EOL]     reader.endArray(); [EOL]     reader = new JsonReader(new StringReader("[,]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     reader.nextNull(); [EOL]     reader.nextNull(); [EOL]     reader.endArray(); [EOL] }
public void testLenientUnnecessaryArraySeparators() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true,,true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader.nextNull(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader.endArray(); [EOL]     reader = new JsonReader(new StringReader("[,true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     reader.nextNull(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader.endArray(); [EOL]     reader = new JsonReader(new StringReader("[true,]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader.nextNull(); [EOL]     reader.endArray(); [EOL]     reader = new JsonReader(new StringReader("[,]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     reader.nextNull(); [EOL]     reader.nextNull(); [EOL]     reader.endArray(); [EOL] }
public void testLenientUnnecessaryArraySeparators() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true,,true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader.nextNull(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader.endArray(); [EOL]     reader = new JsonReader(new StringReader("[,true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     reader.nextNull(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader.endArray(); [EOL]     reader = new JsonReader(new StringReader("[true,]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader.nextNull(); [EOL]     reader.endArray(); [EOL]     reader = new JsonReader(new StringReader("[,]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     reader.nextNull(); [EOL]     reader.nextNull(); [EOL]     reader.endArray(); [EOL] }
public void testStrictComments() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[// comment \n true]")); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextBoolean(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL]     reader = new JsonReader(new StringReader("[# comment \n true]")); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextBoolean(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL]     reader = new JsonReader(new StringReader("[/* comment */ true]")); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextBoolean(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] }
public void testStrictComments() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[// comment \n true]")); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextBoolean(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL]     reader = new JsonReader(new StringReader("[# comment \n true]")); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextBoolean(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL]     reader = new JsonReader(new StringReader("[/* comment */ true]")); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextBoolean(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] }
public void testStrictComments() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[// comment \n true]")); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextBoolean(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL]     reader = new JsonReader(new StringReader("[# comment \n true]")); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextBoolean(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL]     reader = new JsonReader(new StringReader("[/* comment */ true]")); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextBoolean(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] }
public void testStrictComments() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[// comment \n true]")); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextBoolean(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL]     reader = new JsonReader(new StringReader("[# comment \n true]")); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextBoolean(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL]     reader = new JsonReader(new StringReader("[/* comment */ true]")); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextBoolean(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] }
public void testStrictComments() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[// comment \n true]")); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextBoolean(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL]     reader = new JsonReader(new StringReader("[# comment \n true]")); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextBoolean(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL]     reader = new JsonReader(new StringReader("[/* comment */ true]")); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextBoolean(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] }
public void testStrictComments() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[// comment \n true]")); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextBoolean(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL]     reader = new JsonReader(new StringReader("[# comment \n true]")); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextBoolean(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL]     reader = new JsonReader(new StringReader("[/* comment */ true]")); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextBoolean(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] }
public void testCharacterUnescaping() throws IOException { [EOL]     String json = "[\"a\"," + "\"a\\\"\"," + "\"\\\"\"," + "\":\"," + "\",\"," + "\"\\b\"," + "\"\\f\"," + "\"\\n\"," + "\"\\r\"," + "\"\\t\"," + "\" \"," + "\"\\\\\"," + "\"{\"," + "\"}\"," + "\"[\"," + "\"]\"," + "\"\\u0000\"," + "\"\\u0019\"," + "\"\\u20AC\"" + "]"; [EOL]     JsonReader reader = new JsonReader(new StringReader(json)); [EOL]     reader.beginArray(); [EOL]     assertEquals("a", reader.nextString()); [EOL]     assertEquals("a\"", reader.nextString()); [EOL]     assertEquals("\"", reader.nextString()); [EOL]     assertEquals(":", reader.nextString()); [EOL]     assertEquals(",", reader.nextString()); [EOL]     assertEquals("\b", reader.nextString()); [EOL]     assertEquals("\f", reader.nextString()); [EOL]     assertEquals("\n", reader.nextString()); [EOL]     assertEquals("\r", reader.nextString()); [EOL]     assertEquals("\t", reader.nextString()); [EOL]     assertEquals(" ", reader.nextString()); [EOL]     assertEquals("\\", reader.nextString()); [EOL]     assertEquals("{", reader.nextString()); [EOL]     assertEquals("}", reader.nextString()); [EOL]     assertEquals("[", reader.nextString()); [EOL]     assertEquals("]", reader.nextString()); [EOL]     assertEquals("\0", reader.nextString()); [EOL]     assertEquals("\u0019", reader.nextString()); [EOL]     assertEquals("\u20AC", reader.nextString()); [EOL]     reader.endArray(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testLenientUnquotedNames() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{a:true}")); [EOL]     reader.setLenient(true); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL] }
public void testCharacterUnescaping() throws IOException { [EOL]     String json = "[\"a\"," + "\"a\\\"\"," + "\"\\\"\"," + "\":\"," + "\",\"," + "\"\\b\"," + "\"\\f\"," + "\"\\n\"," + "\"\\r\"," + "\"\\t\"," + "\" \"," + "\"\\\\\"," + "\"{\"," + "\"}\"," + "\"[\"," + "\"]\"," + "\"\\u0000\"," + "\"\\u0019\"," + "\"\\u20AC\"" + "]"; [EOL]     JsonReader reader = new JsonReader(new StringReader(json)); [EOL]     reader.beginArray(); [EOL]     assertEquals("a", reader.nextString()); [EOL]     assertEquals("a\"", reader.nextString()); [EOL]     assertEquals("\"", reader.nextString()); [EOL]     assertEquals(":", reader.nextString()); [EOL]     assertEquals(",", reader.nextString()); [EOL]     assertEquals("\b", reader.nextString()); [EOL]     assertEquals("\f", reader.nextString()); [EOL]     assertEquals("\n", reader.nextString()); [EOL]     assertEquals("\r", reader.nextString()); [EOL]     assertEquals("\t", reader.nextString()); [EOL]     assertEquals(" ", reader.nextString()); [EOL]     assertEquals("\\", reader.nextString()); [EOL]     assertEquals("{", reader.nextString()); [EOL]     assertEquals("}", reader.nextString()); [EOL]     assertEquals("[", reader.nextString()); [EOL]     assertEquals("]", reader.nextString()); [EOL]     assertEquals("\0", reader.nextString()); [EOL]     assertEquals("\u0019", reader.nextString()); [EOL]     assertEquals("\u20AC", reader.nextString()); [EOL]     reader.endArray(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testCharacterUnescaping() throws IOException { [EOL]     String json = "[\"a\"," + "\"a\\\"\"," + "\"\\\"\"," + "\":\"," + "\",\"," + "\"\\b\"," + "\"\\f\"," + "\"\\n\"," + "\"\\r\"," + "\"\\t\"," + "\" \"," + "\"\\\\\"," + "\"{\"," + "\"}\"," + "\"[\"," + "\"]\"," + "\"\\u0000\"," + "\"\\u0019\"," + "\"\\u20AC\"" + "]"; [EOL]     JsonReader reader = new JsonReader(new StringReader(json)); [EOL]     reader.beginArray(); [EOL]     assertEquals("a", reader.nextString()); [EOL]     assertEquals("a\"", reader.nextString()); [EOL]     assertEquals("\"", reader.nextString()); [EOL]     assertEquals(":", reader.nextString()); [EOL]     assertEquals(",", reader.nextString()); [EOL]     assertEquals("\b", reader.nextString()); [EOL]     assertEquals("\f", reader.nextString()); [EOL]     assertEquals("\n", reader.nextString()); [EOL]     assertEquals("\r", reader.nextString()); [EOL]     assertEquals("\t", reader.nextString()); [EOL]     assertEquals(" ", reader.nextString()); [EOL]     assertEquals("\\", reader.nextString()); [EOL]     assertEquals("{", reader.nextString()); [EOL]     assertEquals("}", reader.nextString()); [EOL]     assertEquals("[", reader.nextString()); [EOL]     assertEquals("]", reader.nextString()); [EOL]     assertEquals("\0", reader.nextString()); [EOL]     assertEquals("\u0019", reader.nextString()); [EOL]     assertEquals("\u20AC", reader.nextString()); [EOL]     reader.endArray(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testCharacterUnescaping() throws IOException { [EOL]     String json = "[\"a\"," + "\"a\\\"\"," + "\"\\\"\"," + "\":\"," + "\",\"," + "\"\\b\"," + "\"\\f\"," + "\"\\n\"," + "\"\\r\"," + "\"\\t\"," + "\" \"," + "\"\\\\\"," + "\"{\"," + "\"}\"," + "\"[\"," + "\"]\"," + "\"\\u0000\"," + "\"\\u0019\"," + "\"\\u20AC\"" + "]"; [EOL]     JsonReader reader = new JsonReader(new StringReader(json)); [EOL]     reader.beginArray(); [EOL]     assertEquals("a", reader.nextString()); [EOL]     assertEquals("a\"", reader.nextString()); [EOL]     assertEquals("\"", reader.nextString()); [EOL]     assertEquals(":", reader.nextString()); [EOL]     assertEquals(",", reader.nextString()); [EOL]     assertEquals("\b", reader.nextString()); [EOL]     assertEquals("\f", reader.nextString()); [EOL]     assertEquals("\n", reader.nextString()); [EOL]     assertEquals("\r", reader.nextString()); [EOL]     assertEquals("\t", reader.nextString()); [EOL]     assertEquals(" ", reader.nextString()); [EOL]     assertEquals("\\", reader.nextString()); [EOL]     assertEquals("{", reader.nextString()); [EOL]     assertEquals("}", reader.nextString()); [EOL]     assertEquals("[", reader.nextString()); [EOL]     assertEquals("]", reader.nextString()); [EOL]     assertEquals("\0", reader.nextString()); [EOL]     assertEquals("\u0019", reader.nextString()); [EOL]     assertEquals("\u20AC", reader.nextString()); [EOL]     reader.endArray(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testCharacterUnescaping() throws IOException { [EOL]     String json = "[\"a\"," + "\"a\\\"\"," + "\"\\\"\"," + "\":\"," + "\",\"," + "\"\\b\"," + "\"\\f\"," + "\"\\n\"," + "\"\\r\"," + "\"\\t\"," + "\" \"," + "\"\\\\\"," + "\"{\"," + "\"}\"," + "\"[\"," + "\"]\"," + "\"\\u0000\"," + "\"\\u0019\"," + "\"\\u20AC\"" + "]"; [EOL]     JsonReader reader = new JsonReader(new StringReader(json)); [EOL]     reader.beginArray(); [EOL]     assertEquals("a", reader.nextString()); [EOL]     assertEquals("a\"", reader.nextString()); [EOL]     assertEquals("\"", reader.nextString()); [EOL]     assertEquals(":", reader.nextString()); [EOL]     assertEquals(",", reader.nextString()); [EOL]     assertEquals("\b", reader.nextString()); [EOL]     assertEquals("\f", reader.nextString()); [EOL]     assertEquals("\n", reader.nextString()); [EOL]     assertEquals("\r", reader.nextString()); [EOL]     assertEquals("\t", reader.nextString()); [EOL]     assertEquals(" ", reader.nextString()); [EOL]     assertEquals("\\", reader.nextString()); [EOL]     assertEquals("{", reader.nextString()); [EOL]     assertEquals("}", reader.nextString()); [EOL]     assertEquals("[", reader.nextString()); [EOL]     assertEquals("]", reader.nextString()); [EOL]     assertEquals("\0", reader.nextString()); [EOL]     assertEquals("\u0019", reader.nextString()); [EOL]     assertEquals("\u20AC", reader.nextString()); [EOL]     reader.endArray(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testCharacterUnescaping() throws IOException { [EOL]     String json = "[\"a\"," + "\"a\\\"\"," + "\"\\\"\"," + "\":\"," + "\",\"," + "\"\\b\"," + "\"\\f\"," + "\"\\n\"," + "\"\\r\"," + "\"\\t\"," + "\" \"," + "\"\\\\\"," + "\"{\"," + "\"}\"," + "\"[\"," + "\"]\"," + "\"\\u0000\"," + "\"\\u0019\"," + "\"\\u20AC\"" + "]"; [EOL]     JsonReader reader = new JsonReader(new StringReader(json)); [EOL]     reader.beginArray(); [EOL]     assertEquals("a", reader.nextString()); [EOL]     assertEquals("a\"", reader.nextString()); [EOL]     assertEquals("\"", reader.nextString()); [EOL]     assertEquals(":", reader.nextString()); [EOL]     assertEquals(",", reader.nextString()); [EOL]     assertEquals("\b", reader.nextString()); [EOL]     assertEquals("\f", reader.nextString()); [EOL]     assertEquals("\n", reader.nextString()); [EOL]     assertEquals("\r", reader.nextString()); [EOL]     assertEquals("\t", reader.nextString()); [EOL]     assertEquals(" ", reader.nextString()); [EOL]     assertEquals("\\", reader.nextString()); [EOL]     assertEquals("{", reader.nextString()); [EOL]     assertEquals("}", reader.nextString()); [EOL]     assertEquals("[", reader.nextString()); [EOL]     assertEquals("]", reader.nextString()); [EOL]     assertEquals("\0", reader.nextString()); [EOL]     assertEquals("\u0019", reader.nextString()); [EOL]     assertEquals("\u20AC", reader.nextString()); [EOL]     reader.endArray(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testNumberWithOctalPrefix() throws IOException { [EOL]     String json = "[01]"; [EOL]     JsonReader reader = new JsonReader(new StringReader(json)); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextInt(); [EOL]         fail(); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL]     try { [EOL]         reader.nextLong(); [EOL]         fail(); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL]     try { [EOL]         reader.nextDouble(); [EOL]         fail(); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL]     assertEquals("01", reader.nextString()); [EOL]     reader.endArray(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testBadFieldTypeForDeserializingCustomTree() { [EOL]     JsonArray array = new JsonArray(); [EOL]     array.add(new JsonPrimitive("blah")); [EOL]     JsonObject primitive1 = new JsonObject(); [EOL]     primitive1.addProperty("string", "foo"); [EOL]     primitive1.addProperty("intValue", 11); [EOL]     JsonObject obj = new JsonObject(); [EOL]     obj.add("primitive1", primitive1); [EOL]     obj.add("primitive2", array); [EOL]     try { [EOL]         gson.fromJson(obj, Nested.class); [EOL]         fail("Nested has field BagOfPrimitives which is not an array"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testBadFieldTypeForDeserializingCustomTree() { [EOL]     JsonArray array = new JsonArray(); [EOL]     array.add(new JsonPrimitive("blah")); [EOL]     JsonObject primitive1 = new JsonObject(); [EOL]     primitive1.addProperty("string", "foo"); [EOL]     primitive1.addProperty("intValue", 11); [EOL]     JsonObject obj = new JsonObject(); [EOL]     obj.add("primitive1", primitive1); [EOL]     obj.add("primitive2", array); [EOL]     try { [EOL]         gson.fromJson(obj, Nested.class); [EOL]         fail("Nested has field BagOfPrimitives which is not an array"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testBadFieldTypeForDeserializingCustomTree() { [EOL]     JsonArray array = new JsonArray(); [EOL]     array.add(new JsonPrimitive("blah")); [EOL]     JsonObject primitive1 = new JsonObject(); [EOL]     primitive1.addProperty("string", "foo"); [EOL]     primitive1.addProperty("intValue", 11); [EOL]     JsonObject obj = new JsonObject(); [EOL]     obj.add("primitive1", primitive1); [EOL]     obj.add("primitive2", array); [EOL]     try { [EOL]         gson.fromJson(obj, Nested.class); [EOL]         fail("Nested has field BagOfPrimitives which is not an array"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testBadFieldTypeForDeserializingCustomTree() { [EOL]     JsonArray array = new JsonArray(); [EOL]     array.add(new JsonPrimitive("blah")); [EOL]     JsonObject primitive1 = new JsonObject(); [EOL]     primitive1.addProperty("string", "foo"); [EOL]     primitive1.addProperty("intValue", 11); [EOL]     JsonObject obj = new JsonObject(); [EOL]     obj.add("primitive1", primitive1); [EOL]     obj.add("primitive2", array); [EOL]     try { [EOL]         gson.fromJson(obj, Nested.class); [EOL]         fail("Nested has field BagOfPrimitives which is not an array"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testBadFieldTypeForDeserializingCustomTree() { [EOL]     JsonArray array = new JsonArray(); [EOL]     array.add(new JsonPrimitive("blah")); [EOL]     JsonObject primitive1 = new JsonObject(); [EOL]     primitive1.addProperty("string", "foo"); [EOL]     primitive1.addProperty("intValue", 11); [EOL]     JsonObject obj = new JsonObject(); [EOL]     obj.add("primitive1", primitive1); [EOL]     obj.add("primitive2", array); [EOL]     try { [EOL]         gson.fromJson(obj, Nested.class); [EOL]         fail("Nested has field BagOfPrimitives which is not an array"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testBadFieldTypeForDeserializingCustomTree() { [EOL]     JsonArray array = new JsonArray(); [EOL]     array.add(new JsonPrimitive("blah")); [EOL]     JsonObject primitive1 = new JsonObject(); [EOL]     primitive1.addProperty("string", "foo"); [EOL]     primitive1.addProperty("intValue", 11); [EOL]     JsonObject obj = new JsonObject(); [EOL]     obj.add("primitive1", primitive1); [EOL]     obj.add("primitive2", array); [EOL]     try { [EOL]         gson.fromJson(obj, Nested.class); [EOL]         fail("Nested has field BagOfPrimitives which is not an array"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testBadFieldTypeForDeserializingCustomTree() { [EOL]     JsonArray array = new JsonArray(); [EOL]     array.add(new JsonPrimitive("blah")); [EOL]     JsonObject primitive1 = new JsonObject(); [EOL]     primitive1.addProperty("string", "foo"); [EOL]     primitive1.addProperty("intValue", 11); [EOL]     JsonObject obj = new JsonObject(); [EOL]     obj.add("primitive1", primitive1); [EOL]     obj.add("primitive2", array); [EOL]     try { [EOL]         gson.fromJson(obj, Nested.class); [EOL]         fail("Nested has field BagOfPrimitives which is not an array"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testBadFieldTypeForDeserializingCustomTree() { [EOL]     JsonArray array = new JsonArray(); [EOL]     array.add(new JsonPrimitive("blah")); [EOL]     JsonObject primitive1 = new JsonObject(); [EOL]     primitive1.addProperty("string", "foo"); [EOL]     primitive1.addProperty("intValue", 11); [EOL]     JsonObject obj = new JsonObject(); [EOL]     obj.add("primitive1", primitive1); [EOL]     obj.add("primitive2", array); [EOL]     try { [EOL]         gson.fromJson(obj, Nested.class); [EOL]         fail("Nested has field BagOfPrimitives which is not an array"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testBadFieldTypeForDeserializingCustomTree() { [EOL]     JsonArray array = new JsonArray(); [EOL]     array.add(new JsonPrimitive("blah")); [EOL]     JsonObject primitive1 = new JsonObject(); [EOL]     primitive1.addProperty("string", "foo"); [EOL]     primitive1.addProperty("intValue", 11); [EOL]     JsonObject obj = new JsonObject(); [EOL]     obj.add("primitive1", primitive1); [EOL]     obj.add("primitive2", array); [EOL]     try { [EOL]         gson.fromJson(obj, Nested.class); [EOL]         fail("Nested has field BagOfPrimitives which is not an array"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testArrayWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testDefaultCalendarDeserialization() throws Exception { [EOL]     Gson gson = new GsonBuilder().create(); [EOL]     String json = "{year:2009,month:2,dayOfMonth:11,hourOfDay:14,minute:29,second:23}"; [EOL]     Calendar cal = gson.fromJson(json, Calendar.class); [EOL]     assertEquals(2009, cal.get(Calendar.YEAR)); [EOL]     assertEquals(2, cal.get(Calendar.MONTH)); [EOL]     assertEquals(11, cal.get(Calendar.DAY_OF_MONTH)); [EOL]     assertEquals(14, cal.get(Calendar.HOUR_OF_DAY)); [EOL]     assertEquals(29, cal.get(Calendar.MINUTE)); [EOL]     assertEquals(23, cal.get(Calendar.SECOND)); [EOL] }
public void testDefaultCalendarDeserialization() throws Exception { [EOL]     Gson gson = new GsonBuilder().create(); [EOL]     String json = "{year:2009,month:2,dayOfMonth:11,hourOfDay:14,minute:29,second:23}"; [EOL]     Calendar cal = gson.fromJson(json, Calendar.class); [EOL]     assertEquals(2009, cal.get(Calendar.YEAR)); [EOL]     assertEquals(2, cal.get(Calendar.MONTH)); [EOL]     assertEquals(11, cal.get(Calendar.DAY_OF_MONTH)); [EOL]     assertEquals(14, cal.get(Calendar.HOUR_OF_DAY)); [EOL]     assertEquals(29, cal.get(Calendar.MINUTE)); [EOL]     assertEquals(23, cal.get(Calendar.SECOND)); [EOL] }
public void testDefaultCalendarDeserialization() throws Exception { [EOL]     Gson gson = new GsonBuilder().create(); [EOL]     String json = "{year:2009,month:2,dayOfMonth:11,hourOfDay:14,minute:29,second:23}"; [EOL]     Calendar cal = gson.fromJson(json, Calendar.class); [EOL]     assertEquals(2009, cal.get(Calendar.YEAR)); [EOL]     assertEquals(2, cal.get(Calendar.MONTH)); [EOL]     assertEquals(11, cal.get(Calendar.DAY_OF_MONTH)); [EOL]     assertEquals(14, cal.get(Calendar.HOUR_OF_DAY)); [EOL]     assertEquals(29, cal.get(Calendar.MINUTE)); [EOL]     assertEquals(23, cal.get(Calendar.SECOND)); [EOL] }
public void testDefaultCalendarDeserialization() throws Exception { [EOL]     Gson gson = new GsonBuilder().create(); [EOL]     String json = "{year:2009,month:2,dayOfMonth:11,hourOfDay:14,minute:29,second:23}"; [EOL]     Calendar cal = gson.fromJson(json, Calendar.class); [EOL]     assertEquals(2009, cal.get(Calendar.YEAR)); [EOL]     assertEquals(2, cal.get(Calendar.MONTH)); [EOL]     assertEquals(11, cal.get(Calendar.DAY_OF_MONTH)); [EOL]     assertEquals(14, cal.get(Calendar.HOUR_OF_DAY)); [EOL]     assertEquals(29, cal.get(Calendar.MINUTE)); [EOL]     assertEquals(23, cal.get(Calendar.SECOND)); [EOL] }
public void testDefaultCalendarDeserialization() throws Exception { [EOL]     Gson gson = new GsonBuilder().create(); [EOL]     String json = "{year:2009,month:2,dayOfMonth:11,hourOfDay:14,minute:29,second:23}"; [EOL]     Calendar cal = gson.fromJson(json, Calendar.class); [EOL]     assertEquals(2009, cal.get(Calendar.YEAR)); [EOL]     assertEquals(2, cal.get(Calendar.MONTH)); [EOL]     assertEquals(11, cal.get(Calendar.DAY_OF_MONTH)); [EOL]     assertEquals(14, cal.get(Calendar.HOUR_OF_DAY)); [EOL]     assertEquals(29, cal.get(Calendar.MINUTE)); [EOL]     assertEquals(23, cal.get(Calendar.SECOND)); [EOL] }
public void testDefaultJavaSqlTimeDeserialization() { [EOL]     String json = "'1:18:02 PM'"; [EOL]     Time extracted = gson.fromJson(json, Time.class); [EOL]     assertEqualsTime(extracted, 13, 18, 02); [EOL] }
public void testDefaultJavaSqlTimeDeserialization() { [EOL]     String json = "'1:18:02 PM'"; [EOL]     Time extracted = gson.fromJson(json, Time.class); [EOL]     assertEqualsTime(extracted, 13, 18, 02); [EOL] }
public void testDefaultJavaSqlTimeDeserialization() { [EOL]     String json = "'1:18:02 PM'"; [EOL]     Time extracted = gson.fromJson(json, Time.class); [EOL]     assertEqualsTime(extracted, 13, 18, 02); [EOL] }
public void testDefaultCalendarDeserialization() throws Exception { [EOL]     Gson gson = new GsonBuilder().create(); [EOL]     String json = "{year:2009,month:2,dayOfMonth:11,hourOfDay:14,minute:29,second:23}"; [EOL]     Calendar cal = gson.fromJson(json, Calendar.class); [EOL]     assertEquals(2009, cal.get(Calendar.YEAR)); [EOL]     assertEquals(2, cal.get(Calendar.MONTH)); [EOL]     assertEquals(11, cal.get(Calendar.DAY_OF_MONTH)); [EOL]     assertEquals(14, cal.get(Calendar.HOUR_OF_DAY)); [EOL]     assertEquals(29, cal.get(Calendar.MINUTE)); [EOL]     assertEquals(23, cal.get(Calendar.SECOND)); [EOL] }
public void testUriSerialization() throws Exception { [EOL]     String uriValue = "http://google.com/"; [EOL]     URI uri = new URI(uriValue); [EOL]     assertEquals("\"http://google.com/\"", gson.toJson(uri)); [EOL] }
public void testUriSerialization() throws Exception { [EOL]     String uriValue = "http://google.com/"; [EOL]     URI uri = new URI(uriValue); [EOL]     assertEquals("\"http://google.com/\"", gson.toJson(uri)); [EOL] }
public void testUriDeserialization() { [EOL]     String uriValue = "http://google.com/"; [EOL]     String json = '"' + uriValue + '"'; [EOL]     URI target = gson.fromJson(json, URI.class); [EOL]     assertEquals(uriValue, target.toASCIIString()); [EOL] }
public void testUriDeserialization() { [EOL]     String uriValue = "http://google.com/"; [EOL]     String json = '"' + uriValue + '"'; [EOL]     URI target = gson.fromJson(json, URI.class); [EOL]     assertEquals(uriValue, target.toASCIIString()); [EOL] }
public void testLocaleSerializationWithLanguageCountry() { [EOL]     Locale target = Locale.CANADA_FRENCH; [EOL]     assertEquals("\"fr_CA\"", gson.toJson(target)); [EOL] }
public void testLocaleSerializationWithLanguageCountry() { [EOL]     Locale target = Locale.CANADA_FRENCH; [EOL]     assertEquals("\"fr_CA\"", gson.toJson(target)); [EOL] }
public void testPropertiesSerialization() { [EOL]     Properties props = new Properties(); [EOL]     props.setProperty("foo", "bar"); [EOL]     String json = gson.toJson(props); [EOL]     String expected = "{\"foo\":\"bar\"}"; [EOL]     assertEquals(expected, json); [EOL] }
public void testPropertiesSerialization() { [EOL]     Properties props = new Properties(); [EOL]     props.setProperty("foo", "bar"); [EOL]     String json = gson.toJson(props); [EOL]     String expected = "{\"foo\":\"bar\"}"; [EOL]     assertEquals(expected, json); [EOL] }
public void testPropertiesSerialization() { [EOL]     Properties props = new Properties(); [EOL]     props.setProperty("foo", "bar"); [EOL]     String json = gson.toJson(props); [EOL]     String expected = "{\"foo\":\"bar\"}"; [EOL]     assertEquals(expected, json); [EOL] }
public void testDefaultCalendarDeserialization() throws Exception { [EOL]     Gson gson = new GsonBuilder().create(); [EOL]     String json = "{year:2009,month:2,dayOfMonth:11,hourOfDay:14,minute:29,second:23}"; [EOL]     Calendar cal = gson.fromJson(json, Calendar.class); [EOL]     assertEquals(2009, cal.get(Calendar.YEAR)); [EOL]     assertEquals(2, cal.get(Calendar.MONTH)); [EOL]     assertEquals(11, cal.get(Calendar.DAY_OF_MONTH)); [EOL]     assertEquals(14, cal.get(Calendar.HOUR_OF_DAY)); [EOL]     assertEquals(29, cal.get(Calendar.MINUTE)); [EOL]     assertEquals(23, cal.get(Calendar.SECOND)); [EOL] }
public void testDefaultCalendarDeserialization() throws Exception { [EOL]     Gson gson = new GsonBuilder().create(); [EOL]     String json = "{year:2009,month:2,dayOfMonth:11,hourOfDay:14,minute:29,second:23}"; [EOL]     Calendar cal = gson.fromJson(json, Calendar.class); [EOL]     assertEquals(2009, cal.get(Calendar.YEAR)); [EOL]     assertEquals(2, cal.get(Calendar.MONTH)); [EOL]     assertEquals(11, cal.get(Calendar.DAY_OF_MONTH)); [EOL]     assertEquals(14, cal.get(Calendar.HOUR_OF_DAY)); [EOL]     assertEquals(29, cal.get(Calendar.MINUTE)); [EOL]     assertEquals(23, cal.get(Calendar.SECOND)); [EOL] }
public void testDefaultCalendarDeserialization() throws Exception { [EOL]     Gson gson = new GsonBuilder().create(); [EOL]     String json = "{year:2009,month:2,dayOfMonth:11,hourOfDay:14,minute:29,second:23}"; [EOL]     Calendar cal = gson.fromJson(json, Calendar.class); [EOL]     assertEquals(2009, cal.get(Calendar.YEAR)); [EOL]     assertEquals(2, cal.get(Calendar.MONTH)); [EOL]     assertEquals(11, cal.get(Calendar.DAY_OF_MONTH)); [EOL]     assertEquals(14, cal.get(Calendar.HOUR_OF_DAY)); [EOL]     assertEquals(29, cal.get(Calendar.MINUTE)); [EOL]     assertEquals(23, cal.get(Calendar.SECOND)); [EOL] }
public void testFloatNaNSerializationNotSupportedByDefault() { [EOL]     try { [EOL]         float nan = Float.NaN; [EOL]         gson.toJson(nan); [EOL]         fail("Gson should not accept NaN for serialization"); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL]     try { [EOL]         gson.toJson(Float.NaN); [EOL]         fail("Gson should not accept NaN for serialization"); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL] }
public void testFloatNaNSerializationNotSupportedByDefault() { [EOL]     try { [EOL]         float nan = Float.NaN; [EOL]         gson.toJson(nan); [EOL]         fail("Gson should not accept NaN for serialization"); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL]     try { [EOL]         gson.toJson(Float.NaN); [EOL]         fail("Gson should not accept NaN for serialization"); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL] }
public void testFloatNaNSerializationNotSupportedByDefault() { [EOL]     try { [EOL]         float nan = Float.NaN; [EOL]         gson.toJson(nan); [EOL]         fail("Gson should not accept NaN for serialization"); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL]     try { [EOL]         gson.toJson(Float.NaN); [EOL]         fail("Gson should not accept NaN for serialization"); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL] }
public void testFloatNaNSerializationNotSupportedByDefault() { [EOL]     try { [EOL]         float nan = Float.NaN; [EOL]         gson.toJson(nan); [EOL]         fail("Gson should not accept NaN for serialization"); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL]     try { [EOL]         gson.toJson(Float.NaN); [EOL]         fail("Gson should not accept NaN for serialization"); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL] }
public void testFloatNaNSerializationNotSupportedByDefault() { [EOL]     try { [EOL]         float nan = Float.NaN; [EOL]         gson.toJson(nan); [EOL]         fail("Gson should not accept NaN for serialization"); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL]     try { [EOL]         gson.toJson(Float.NaN); [EOL]         fail("Gson should not accept NaN for serialization"); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL] }
public void testTypesWithMultipleParametersDeserialization() throws Exception { [EOL]     Type typeOfTarget = new TypeToken<MultiParameters<Integer, Float, Double, String, BagOfPrimitives>>() { [EOL]     }.getType(); [EOL]     String json = "{\"a\":10,\"b\":1.0,\"c\":2.1,\"d\":\"abc\"," + "\"e\":{\"longValue\":0,\"intValue\":0,\"booleanValue\":false,\"stringValue\":\"\"}}"; [EOL]     MultiParameters<Integer, Float, Double, String, BagOfPrimitives> target = gson.fromJson(json, typeOfTarget); [EOL]     MultiParameters<Integer, Float, Double, String, BagOfPrimitives> expected = new MultiParameters<Integer, Float, Double, String, BagOfPrimitives>(10, 1.0F, 2.1D, "abc", new BagOfPrimitives()); [EOL]     assertEquals(expected, target); [EOL] }
public void testTypesWithMultipleParametersDeserialization() throws Exception { [EOL]     Type typeOfTarget = new TypeToken<MultiParameters<Integer, Float, Double, String, BagOfPrimitives>>() { [EOL]     }.getType(); [EOL]     String json = "{\"a\":10,\"b\":1.0,\"c\":2.1,\"d\":\"abc\"," + "\"e\":{\"longValue\":0,\"intValue\":0,\"booleanValue\":false,\"stringValue\":\"\"}}"; [EOL]     MultiParameters<Integer, Float, Double, String, BagOfPrimitives> target = gson.fromJson(json, typeOfTarget); [EOL]     MultiParameters<Integer, Float, Double, String, BagOfPrimitives> expected = new MultiParameters<Integer, Float, Double, String, BagOfPrimitives>(10, 1.0F, 2.1D, "abc", new BagOfPrimitives()); [EOL]     assertEquals(expected, target); [EOL] }
public void testTypesWithMultipleParametersDeserialization() throws Exception { [EOL]     Type typeOfTarget = new TypeToken<MultiParameters<Integer, Float, Double, String, BagOfPrimitives>>() { [EOL]     }.getType(); [EOL]     String json = "{\"a\":10,\"b\":1.0,\"c\":2.1,\"d\":\"abc\"," + "\"e\":{\"longValue\":0,\"intValue\":0,\"booleanValue\":false,\"stringValue\":\"\"}}"; [EOL]     MultiParameters<Integer, Float, Double, String, BagOfPrimitives> target = gson.fromJson(json, typeOfTarget); [EOL]     MultiParameters<Integer, Float, Double, String, BagOfPrimitives> expected = new MultiParameters<Integer, Float, Double, String, BagOfPrimitives>(10, 1.0F, 2.1D, "abc", new BagOfPrimitives()); [EOL]     assertEquals(expected, target); [EOL] }
public void testDefaultCalendarDeserialization() throws Exception { [EOL]     Gson gson = new GsonBuilder().create(); [EOL]     String json = "{year:2009,month:2,dayOfMonth:11,hourOfDay:14,minute:29,second:23}"; [EOL]     Calendar cal = gson.fromJson(json, Calendar.class); [EOL]     assertEquals(2009, cal.get(Calendar.YEAR)); [EOL]     assertEquals(2, cal.get(Calendar.MONTH)); [EOL]     assertEquals(11, cal.get(Calendar.DAY_OF_MONTH)); [EOL]     assertEquals(14, cal.get(Calendar.HOUR_OF_DAY)); [EOL]     assertEquals(29, cal.get(Calendar.MINUTE)); [EOL]     assertEquals(23, cal.get(Calendar.SECOND)); [EOL] }
public void testDefaultCalendarDeserialization() throws Exception { [EOL]     Gson gson = new GsonBuilder().create(); [EOL]     String json = "{year:2009,month:2,dayOfMonth:11,hourOfDay:14,minute:29,second:23}"; [EOL]     Calendar cal = gson.fromJson(json, Calendar.class); [EOL]     assertEquals(2009, cal.get(Calendar.YEAR)); [EOL]     assertEquals(2, cal.get(Calendar.MONTH)); [EOL]     assertEquals(11, cal.get(Calendar.DAY_OF_MONTH)); [EOL]     assertEquals(14, cal.get(Calendar.HOUR_OF_DAY)); [EOL]     assertEquals(29, cal.get(Calendar.MINUTE)); [EOL]     assertEquals(23, cal.get(Calendar.SECOND)); [EOL] }
public void testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization() { [EOL]     Gson gson = builder.create(); [EOL]     ClassWithDuplicateFields target = new ClassWithDuplicateFields(10); [EOL]     String actual = gson.toJson(target); [EOL]     assertEquals("{\"a\":10}", actual); [EOL]     target = new ClassWithDuplicateFields(3.0D); [EOL]     actual = gson.toJson(target); [EOL]     assertEquals("{\"a\":3.0}", actual); [EOL] }
public void testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization() { [EOL]     Gson gson = builder.create(); [EOL]     ClassWithDuplicateFields target = new ClassWithDuplicateFields(10); [EOL]     String actual = gson.toJson(target); [EOL]     assertEquals("{\"a\":10}", actual); [EOL]     target = new ClassWithDuplicateFields(3.0D); [EOL]     actual = gson.toJson(target); [EOL]     assertEquals("{\"a\":3.0}", actual); [EOL] }
public void testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization() { [EOL]     Gson gson = builder.create(); [EOL]     ClassWithDuplicateFields target = new ClassWithDuplicateFields(10); [EOL]     String actual = gson.toJson(target); [EOL]     assertEquals("{\"a\":10}", actual); [EOL]     target = new ClassWithDuplicateFields(3.0D); [EOL]     actual = gson.toJson(target); [EOL]     assertEquals("{\"a\":3.0}", actual); [EOL] }
public void testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization() { [EOL]     Gson gson = builder.create(); [EOL]     ClassWithDuplicateFields target = new ClassWithDuplicateFields(10); [EOL]     String actual = gson.toJson(target); [EOL]     assertEquals("{\"a\":10}", actual); [EOL]     target = new ClassWithDuplicateFields(3.0D); [EOL]     actual = gson.toJson(target); [EOL]     assertEquals("{\"a\":3.0}", actual); [EOL] }
public void testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization() { [EOL]     Gson gson = builder.create(); [EOL]     ClassWithDuplicateFields target = new ClassWithDuplicateFields(10); [EOL]     String actual = gson.toJson(target); [EOL]     assertEquals("{\"a\":10}", actual); [EOL]     target = new ClassWithDuplicateFields(3.0D); [EOL]     actual = gson.toJson(target); [EOL]     assertEquals("{\"a\":3.0}", actual); [EOL] }
public void testSkipExplicitlySkippedFields() throws Exception { [EOL]     Field f = MockObject.class.getField("explicitlyHiddenField"); [EOL]     assertTrue(strategy.shouldSkipField(new FieldAttributes(MockObject.class, f))); [EOL] }
public void testSkipExplicitlySkippedFields() throws Exception { [EOL]     Field f = MockObject.class.getField("explicitlyHiddenField"); [EOL]     assertTrue(strategy.shouldSkipField(new FieldAttributes(MockObject.class, f))); [EOL] }
public void testSkipExplicitlySkippedFields() throws Exception { [EOL]     Field f = MockObject.class.getField("explicitlyHiddenField"); [EOL]     assertTrue(strategy.shouldSkipField(new FieldAttributes(MockObject.class, f))); [EOL] }
public void testGenericArrayTypeField() throws Exception { [EOL]     Type listType = new TypeToken<List<String>[]>() { [EOL]     }.getType(); [EOL]     Field f = obj.getClass().getField("simpleGenericArray"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertTrue(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(listType, typeInfo.getActualType()); [EOL]     assertEquals(List[].class, typeInfo.getRawClass()); [EOL] }
public void testGenericArrayTypeField() throws Exception { [EOL]     Type listType = new TypeToken<List<String>[]>() { [EOL]     }.getType(); [EOL]     Field f = obj.getClass().getField("simpleGenericArray"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertTrue(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(listType, typeInfo.getActualType()); [EOL]     assertEquals(List[].class, typeInfo.getRawClass()); [EOL] }
public void testGenericArrayTypeField() throws Exception { [EOL]     Type listType = new TypeToken<List<String>[]>() { [EOL]     }.getType(); [EOL]     Field f = obj.getClass().getField("simpleGenericArray"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertTrue(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(listType, typeInfo.getActualType()); [EOL]     assertEquals(List[].class, typeInfo.getRawClass()); [EOL] }
public void testGenericArrayTypeField() throws Exception { [EOL]     Type listType = new TypeToken<List<String>[]>() { [EOL]     }.getType(); [EOL]     Field f = obj.getClass().getField("simpleGenericArray"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertTrue(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(listType, typeInfo.getActualType()); [EOL]     assertEquals(List[].class, typeInfo.getRawClass()); [EOL] }
public void testArrayOfStringsDeserialization() { [EOL]     String json = "[\"Hello\",\"World\"]"; [EOL]     String[] target = gson.fromJson(json, String[].class); [EOL]     assertEquals("Hello", target[0]); [EOL]     assertEquals("World", target[1]); [EOL] }
public void testArrayOfStringsDeserialization() { [EOL]     String json = "[\"Hello\",\"World\"]"; [EOL]     String[] target = gson.fromJson(json, String[].class); [EOL]     assertEquals("Hello", target[0]); [EOL]     assertEquals("World", target[1]); [EOL] }
public void testArrayOfStringsDeserialization() { [EOL]     String json = "[\"Hello\",\"World\"]"; [EOL]     String[] target = gson.fromJson(json, String[].class); [EOL]     assertEquals("Hello", target[0]); [EOL]     assertEquals("World", target[1]); [EOL] }
public void testArrayOfStringsDeserialization() { [EOL]     String json = "[\"Hello\",\"World\"]"; [EOL]     String[] target = gson.fromJson(json, String[].class); [EOL]     assertEquals("Hello", target[0]); [EOL]     assertEquals("World", target[1]); [EOL] }
public void testArrayWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testArrayWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testArrayWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testArrayWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testArrayWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testArrayWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testArrayWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testArrayWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testArrayWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testArrayWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testArrayWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testArrayWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testSerializeMaps() { [EOL]     Map<String, Object> map = new LinkedHashMap<String, Object>(); [EOL]     map.put("a", 12); [EOL]     map.put("b", null); [EOL]     map.put("c", new HashMap<String, Object>()); [EOL]     assertEquals("{\"a\":12,\"b\":null,\"c\":{}}", new GsonBuilder().serializeNulls().create().toJson(map)); [EOL]     assertEquals("{\"a\":12,\"b\":null,\"c\":{}}", new GsonBuilder().serializeNulls().create().toJson(map)); [EOL]     assertEquals("{\"a\":12,\"c\":{}}", new GsonBuilder().create().toJson(map)); [EOL]     assertEquals("{\"a\":12,\"c\":{}}", new GsonBuilder().create().toJson(map)); [EOL] }
public void testSerializeMaps() { [EOL]     Map<String, Object> map = new LinkedHashMap<String, Object>(); [EOL]     map.put("a", 12); [EOL]     map.put("b", null); [EOL]     map.put("c", new HashMap<String, Object>()); [EOL]     assertEquals("{\"a\":12,\"b\":null,\"c\":{}}", new GsonBuilder().serializeNulls().create().toJson(map)); [EOL]     assertEquals("{\"a\":12,\"b\":null,\"c\":{}}", new GsonBuilder().serializeNulls().create().toJson(map)); [EOL]     assertEquals("{\"a\":12,\"c\":{}}", new GsonBuilder().create().toJson(map)); [EOL]     assertEquals("{\"a\":12,\"c\":{}}", new GsonBuilder().create().toJson(map)); [EOL] }
public void testSerializeMaps() { [EOL]     Map<String, Object> map = new LinkedHashMap<String, Object>(); [EOL]     map.put("a", 12); [EOL]     map.put("b", null); [EOL]     map.put("c", new HashMap<String, Object>()); [EOL]     assertEquals("{\"a\":12,\"b\":null,\"c\":{}}", new GsonBuilder().serializeNulls().create().toJson(map)); [EOL]     assertEquals("{\"a\":12,\"b\":null,\"c\":{}}", new GsonBuilder().serializeNulls().create().toJson(map)); [EOL]     assertEquals("{\"a\":12,\"c\":{}}", new GsonBuilder().create().toJson(map)); [EOL]     assertEquals("{\"a\":12,\"c\":{}}", new GsonBuilder().create().toJson(map)); [EOL] }
public void testSerializeMaps() { [EOL]     Map<String, Object> map = new LinkedHashMap<String, Object>(); [EOL]     map.put("a", 12); [EOL]     map.put("b", null); [EOL]     map.put("c", new HashMap<String, Object>()); [EOL]     assertEquals("{\"a\":12,\"b\":null,\"c\":{}}", new GsonBuilder().serializeNulls().create().toJson(map)); [EOL]     assertEquals("{\"a\":12,\"b\":null,\"c\":{}}", new GsonBuilder().serializeNulls().create().toJson(map)); [EOL]     assertEquals("{\"a\":12,\"c\":{}}", new GsonBuilder().create().toJson(map)); [EOL]     assertEquals("{\"a\":12,\"c\":{}}", new GsonBuilder().create().toJson(map)); [EOL] }
public void testSerializeMaps() { [EOL]     Map<String, Object> map = new LinkedHashMap<String, Object>(); [EOL]     map.put("a", 12); [EOL]     map.put("b", null); [EOL]     map.put("c", new HashMap<String, Object>()); [EOL]     assertEquals("{\"a\":12,\"b\":null,\"c\":{}}", new GsonBuilder().serializeNulls().create().toJson(map)); [EOL]     assertEquals("{\"a\":12,\"b\":null,\"c\":{}}", new GsonBuilder().serializeNulls().create().toJson(map)); [EOL]     assertEquals("{\"a\":12,\"c\":{}}", new GsonBuilder().create().toJson(map)); [EOL]     assertEquals("{\"a\":12,\"c\":{}}", new GsonBuilder().create().toJson(map)); [EOL] }
public void testSerializeMaps() { [EOL]     Map<String, Object> map = new LinkedHashMap<String, Object>(); [EOL]     map.put("a", 12); [EOL]     map.put("b", null); [EOL]     map.put("c", new HashMap<String, Object>()); [EOL]     assertEquals("{\"a\":12,\"b\":null,\"c\":{}}", new GsonBuilder().serializeNulls().create().toJson(map)); [EOL]     assertEquals("{\"a\":12,\"b\":null,\"c\":{}}", new GsonBuilder().serializeNulls().create().toJson(map)); [EOL]     assertEquals("{\"a\":12,\"c\":{}}", new GsonBuilder().create().toJson(map)); [EOL]     assertEquals("{\"a\":12,\"c\":{}}", new GsonBuilder().create().toJson(map)); [EOL] }
public void testSerializeMaps() { [EOL]     Map<String, Object> map = new LinkedHashMap<String, Object>(); [EOL]     map.put("a", 12); [EOL]     map.put("b", null); [EOL]     map.put("c", new HashMap<String, Object>()); [EOL]     assertEquals("{\"a\":12,\"b\":null,\"c\":{}}", new GsonBuilder().serializeNulls().create().toJson(map)); [EOL]     assertEquals("{\"a\":12,\"b\":null,\"c\":{}}", new GsonBuilder().serializeNulls().create().toJson(map)); [EOL]     assertEquals("{\"a\":12,\"c\":{}}", new GsonBuilder().create().toJson(map)); [EOL]     assertEquals("{\"a\":12,\"c\":{}}", new GsonBuilder().create().toJson(map)); [EOL] }
public void testSerializeMaps() { [EOL]     Map<String, Object> map = new LinkedHashMap<String, Object>(); [EOL]     map.put("a", 12); [EOL]     map.put("b", null); [EOL]     map.put("c", new HashMap<String, Object>()); [EOL]     assertEquals("{\"a\":12,\"b\":null,\"c\":{}}", new GsonBuilder().serializeNulls().create().toJson(map)); [EOL]     assertEquals("{\"a\":12,\"b\":null,\"c\":{}}", new GsonBuilder().serializeNulls().create().toJson(map)); [EOL]     assertEquals("{\"a\":12,\"c\":{}}", new GsonBuilder().create().toJson(map)); [EOL]     assertEquals("{\"a\":12,\"c\":{}}", new GsonBuilder().create().toJson(map)); [EOL] }
public void testSerializeMaps() { [EOL]     Map<String, Object> map = new LinkedHashMap<String, Object>(); [EOL]     map.put("a", 12); [EOL]     map.put("b", null); [EOL]     map.put("c", new HashMap<String, Object>()); [EOL]     assertEquals("{\"a\":12,\"b\":null,\"c\":{}}", new GsonBuilder().serializeNulls().create().toJson(map)); [EOL]     assertEquals("{\"a\":12,\"b\":null,\"c\":{}}", new GsonBuilder().serializeNulls().create().toJson(map)); [EOL]     assertEquals("{\"a\":12,\"c\":{}}", new GsonBuilder().create().toJson(map)); [EOL]     assertEquals("{\"a\":12,\"c\":{}}", new GsonBuilder().create().toJson(map)); [EOL] }
public void testArrayWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testArrayWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testArrayWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testIterator() { [EOL]     assertTrue(parser.hasNext()); [EOL]     assertEquals("one", parser.next().getAsString()); [EOL]     assertTrue(parser.hasNext()); [EOL]     assertEquals("two", parser.next().getAsString()); [EOL]     assertFalse(parser.hasNext()); [EOL] }
public void testIterator() { [EOL]     assertTrue(parser.hasNext()); [EOL]     assertEquals("one", parser.next().getAsString()); [EOL]     assertTrue(parser.hasNext()); [EOL]     assertEquals("two", parser.next().getAsString()); [EOL]     assertFalse(parser.hasNext()); [EOL] }
public void testIterator() { [EOL]     assertTrue(parser.hasNext()); [EOL]     assertEquals("one", parser.next().getAsString()); [EOL]     assertTrue(parser.hasNext()); [EOL]     assertEquals("two", parser.next().getAsString()); [EOL]     assertFalse(parser.hasNext()); [EOL] }
public void testIterator() { [EOL]     assertTrue(parser.hasNext()); [EOL]     assertEquals("one", parser.next().getAsString()); [EOL]     assertTrue(parser.hasNext()); [EOL]     assertEquals("two", parser.next().getAsString()); [EOL]     assertFalse(parser.hasNext()); [EOL] }
public void testIterator() { [EOL]     assertTrue(parser.hasNext()); [EOL]     assertEquals("one", parser.next().getAsString()); [EOL]     assertTrue(parser.hasNext()); [EOL]     assertEquals("two", parser.next().getAsString()); [EOL]     assertFalse(parser.hasNext()); [EOL] }
public void testIterator() { [EOL]     assertTrue(parser.hasNext()); [EOL]     assertEquals("one", parser.next().getAsString()); [EOL]     assertTrue(parser.hasNext()); [EOL]     assertEquals("two", parser.next().getAsString()); [EOL]     assertFalse(parser.hasNext()); [EOL] }
public void testIterator() { [EOL]     assertTrue(parser.hasNext()); [EOL]     assertEquals("one", parser.next().getAsString()); [EOL]     assertTrue(parser.hasNext()); [EOL]     assertEquals("two", parser.next().getAsString()); [EOL]     assertFalse(parser.hasNext()); [EOL] }
public void testIterator() { [EOL]     assertTrue(parser.hasNext()); [EOL]     assertEquals("one", parser.next().getAsString()); [EOL]     assertTrue(parser.hasNext()); [EOL]     assertEquals("two", parser.next().getAsString()); [EOL]     assertFalse(parser.hasNext()); [EOL] }
public void testIterator() { [EOL]     assertTrue(parser.hasNext()); [EOL]     assertEquals("one", parser.next().getAsString()); [EOL]     assertTrue(parser.hasNext()); [EOL]     assertEquals("two", parser.next().getAsString()); [EOL]     assertFalse(parser.hasNext()); [EOL] }
public void testIterator() { [EOL]     assertTrue(parser.hasNext()); [EOL]     assertEquals("one", parser.next().getAsString()); [EOL]     assertTrue(parser.hasNext()); [EOL]     assertEquals("two", parser.next().getAsString()); [EOL]     assertFalse(parser.hasNext()); [EOL] }
public void testHidingExistingTypeHierarchyHandlerIsDisallowed() { [EOL]     paramMap.registerForTypeHierarchy(Sub.class, "subHandler"); [EOL]     try { [EOL]         paramMap.registerForTypeHierarchy(Base.class, "baseHandler"); [EOL]         fail("A handler that hides an existing type hierarchy handler is not allowed"); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL] }
public void testHidingExistingTypeHierarchyHandlerIsDisallowed() { [EOL]     paramMap.registerForTypeHierarchy(Sub.class, "subHandler"); [EOL]     try { [EOL]         paramMap.registerForTypeHierarchy(Base.class, "baseHandler"); [EOL]         fail("A handler that hides an existing type hierarchy handler is not allowed"); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL] }
public void testHidingExistingTypeHierarchyHandlerIsDisallowed() { [EOL]     paramMap.registerForTypeHierarchy(Sub.class, "subHandler"); [EOL]     try { [EOL]         paramMap.registerForTypeHierarchy(Base.class, "baseHandler"); [EOL]         fail("A handler that hides an existing type hierarchy handler is not allowed"); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL] }
public void testHidingExistingTypeHierarchyHandlerIsDisallowed() { [EOL]     paramMap.registerForTypeHierarchy(Sub.class, "subHandler"); [EOL]     try { [EOL]         paramMap.registerForTypeHierarchy(Base.class, "baseHandler"); [EOL]         fail("A handler that hides an existing type hierarchy handler is not allowed"); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL] }
public void testHidingExistingTypeHierarchyHandlerIsDisallowed() { [EOL]     paramMap.registerForTypeHierarchy(Sub.class, "subHandler"); [EOL]     try { [EOL]         paramMap.registerForTypeHierarchy(Base.class, "baseHandler"); [EOL]         fail("A handler that hides an existing type hierarchy handler is not allowed"); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL] }
public void testInvalidArrayDeserialization() { [EOL]     String json = "[1, 2 3, 4, 5]"; [EOL]     try { [EOL]         gson.fromJson(json, int[].class); [EOL]         fail("Gson should not deserialize array elements with missing ,"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testNotEquals() throws Exception { [EOL]     Type differentParameterizedType = new TypeToken<List<Integer>>() { [EOL]     }.getType(); [EOL]     assertFalse(differentParameterizedType.equals(ourType)); [EOL]     assertFalse(ourType.equals(differentParameterizedType)); [EOL] }
public void testNotEquals() throws Exception { [EOL]     Type differentParameterizedType = new TypeToken<List<Integer>>() { [EOL]     }.getType(); [EOL]     assertFalse(differentParameterizedType.equals(ourType)); [EOL]     assertFalse(ourType.equals(differentParameterizedType)); [EOL] }
public void testGetActualTypeForFirstTypeVariable() { [EOL]     assertEquals(String.class, TypeUtils.getActualTypeForFirstTypeVariable(MAP_TYPE)); [EOL] }
public void testGetActualTypeForFirstTypeVariable() { [EOL]     assertEquals(String.class, TypeUtils.getActualTypeForFirstTypeVariable(MAP_TYPE)); [EOL] }
public void testGetActualTypeForFirstTypeVariable() { [EOL]     assertEquals(String.class, TypeUtils.getActualTypeForFirstTypeVariable(MAP_TYPE)); [EOL] }
public void testGetActualTypeForFirstTypeVariable() { [EOL]     assertEquals(String.class, TypeUtils.getActualTypeForFirstTypeVariable(MAP_TYPE)); [EOL] }
public void testIsArrayForArrayClasses() { [EOL]     assertTrue(TypeUtils.isArray(String[].class)); [EOL]     assertTrue(TypeUtils.isArray(Integer[][].class)); [EOL]     assertTrue(TypeUtils.isArray(Collection[].class)); [EOL] }
public void testIsArrayForArrayClasses() { [EOL]     assertTrue(TypeUtils.isArray(String[].class)); [EOL]     assertTrue(TypeUtils.isArray(Integer[][].class)); [EOL]     assertTrue(TypeUtils.isArray(Collection[].class)); [EOL] }
public void testIsArrayForArrayClasses() { [EOL]     assertTrue(TypeUtils.isArray(String[].class)); [EOL]     assertTrue(TypeUtils.isArray(Integer[][].class)); [EOL]     assertTrue(TypeUtils.isArray(Collection[].class)); [EOL] }
public void testGenericArrayTypeField() throws Exception { [EOL]     Type listType = new TypeToken<List<String>[]>() { [EOL]     }.getType(); [EOL]     Field f = obj.getClass().getField("simpleGenericArray"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertTrue(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(listType, typeInfo.getActualType()); [EOL]     assertEquals(List[].class, typeInfo.getRawClass()); [EOL] }
public void testGenericArrayTypeField() throws Exception { [EOL]     Type listType = new TypeToken<List<String>[]>() { [EOL]     }.getType(); [EOL]     Field f = obj.getClass().getField("simpleGenericArray"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertTrue(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(listType, typeInfo.getActualType()); [EOL]     assertEquals(List[].class, typeInfo.getRawClass()); [EOL] }
public void testGenericArrayTypeField() throws Exception { [EOL]     Type listType = new TypeToken<List<String>[]>() { [EOL]     }.getType(); [EOL]     Field f = obj.getClass().getField("simpleGenericArray"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertTrue(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(listType, typeInfo.getActualType()); [EOL]     assertEquals(List[].class, typeInfo.getRawClass()); [EOL] }
public void testGenericArrayTypeField() throws Exception { [EOL]     Type listType = new TypeToken<List<String>[]>() { [EOL]     }.getType(); [EOL]     Field f = obj.getClass().getField("simpleGenericArray"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertTrue(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(listType, typeInfo.getActualType()); [EOL]     assertEquals(List[].class, typeInfo.getRawClass()); [EOL] }
public void testGenericArrayTypeField() throws Exception { [EOL]     Type listType = new TypeToken<List<String>[]>() { [EOL]     }.getType(); [EOL]     Field f = obj.getClass().getField("simpleGenericArray"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertTrue(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(listType, typeInfo.getActualType()); [EOL]     assertEquals(List[].class, typeInfo.getRawClass()); [EOL] }
public void testGenericArrayTypeField() throws Exception { [EOL]     Type listType = new TypeToken<List<String>[]>() { [EOL]     }.getType(); [EOL]     Field f = obj.getClass().getField("simpleGenericArray"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertTrue(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(listType, typeInfo.getActualType()); [EOL]     assertEquals(List[].class, typeInfo.getRawClass()); [EOL] }
public void testGenericArrayTypeField() throws Exception { [EOL]     Type listType = new TypeToken<List<String>[]>() { [EOL]     }.getType(); [EOL]     Field f = obj.getClass().getField("simpleGenericArray"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertTrue(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(listType, typeInfo.getActualType()); [EOL]     assertEquals(List[].class, typeInfo.getRawClass()); [EOL] }
public void testBaseSerializedAsSub() { [EOL]     Base base = new Sub(); [EOL]     JsonObject json = gson.toJsonTree(base).getAsJsonObject(); [EOL]     assertEquals(Sub.SUB_NAME, json.get(Sub.SUB_FIELD_KEY).getAsString()); [EOL] }
public void testBaseSerializedAsSub() { [EOL]     Base base = new Sub(); [EOL]     JsonObject json = gson.toJsonTree(base).getAsJsonObject(); [EOL]     assertEquals(Sub.SUB_NAME, json.get(Sub.SUB_FIELD_KEY).getAsString()); [EOL] }
public void testGsonAcceptsEscapedAndNonEscapedJsonDeserialization() throws Exception { [EOL]     Gson escapeHtmlGson = new GsonBuilder().create(); [EOL]     Gson noEscapeHtmlGson = new GsonBuilder().disableHtmlEscaping().create(); [EOL]     BagOfPrimitives target = new BagOfPrimitives(1L, 1, true, "test' / w'ith\" / \\ <script>"); [EOL]     String escapedJsonForm = escapeHtmlGson.toJson(target); [EOL]     String nonEscapedJsonForm = noEscapeHtmlGson.toJson(target); [EOL]     assertFalse(escapedJsonForm.equals(nonEscapedJsonForm)); [EOL]     assertEquals(target, noEscapeHtmlGson.fromJson(escapedJsonForm, BagOfPrimitives.class)); [EOL]     assertEquals(target, escapeHtmlGson.fromJson(nonEscapedJsonForm, BagOfPrimitives.class)); [EOL] }
public void testGsonAcceptsEscapedAndNonEscapedJsonDeserialization() throws Exception { [EOL]     Gson escapeHtmlGson = new GsonBuilder().create(); [EOL]     Gson noEscapeHtmlGson = new GsonBuilder().disableHtmlEscaping().create(); [EOL]     BagOfPrimitives target = new BagOfPrimitives(1L, 1, true, "test' / w'ith\" / \\ <script>"); [EOL]     String escapedJsonForm = escapeHtmlGson.toJson(target); [EOL]     String nonEscapedJsonForm = noEscapeHtmlGson.toJson(target); [EOL]     assertFalse(escapedJsonForm.equals(nonEscapedJsonForm)); [EOL]     assertEquals(target, noEscapeHtmlGson.fromJson(escapedJsonForm, BagOfPrimitives.class)); [EOL]     assertEquals(target, escapeHtmlGson.fromJson(nonEscapedJsonForm, BagOfPrimitives.class)); [EOL] }
public void testGsonAcceptsEscapedAndNonEscapedJsonDeserialization() throws Exception { [EOL]     Gson escapeHtmlGson = new GsonBuilder().create(); [EOL]     Gson noEscapeHtmlGson = new GsonBuilder().disableHtmlEscaping().create(); [EOL]     BagOfPrimitives target = new BagOfPrimitives(1L, 1, true, "test' / w'ith\" / \\ <script>"); [EOL]     String escapedJsonForm = escapeHtmlGson.toJson(target); [EOL]     String nonEscapedJsonForm = noEscapeHtmlGson.toJson(target); [EOL]     assertFalse(escapedJsonForm.equals(nonEscapedJsonForm)); [EOL]     assertEquals(target, noEscapeHtmlGson.fromJson(escapedJsonForm, BagOfPrimitives.class)); [EOL]     assertEquals(target, escapeHtmlGson.fromJson(nonEscapedJsonForm, BagOfPrimitives.class)); [EOL] }
public void testGsonAcceptsEscapedAndNonEscapedJsonDeserialization() throws Exception { [EOL]     Gson escapeHtmlGson = new GsonBuilder().create(); [EOL]     Gson noEscapeHtmlGson = new GsonBuilder().disableHtmlEscaping().create(); [EOL]     BagOfPrimitives target = new BagOfPrimitives(1L, 1, true, "test' / w'ith\" / \\ <script>"); [EOL]     String escapedJsonForm = escapeHtmlGson.toJson(target); [EOL]     String nonEscapedJsonForm = noEscapeHtmlGson.toJson(target); [EOL]     assertFalse(escapedJsonForm.equals(nonEscapedJsonForm)); [EOL]     assertEquals(target, noEscapeHtmlGson.fromJson(escapedJsonForm, BagOfPrimitives.class)); [EOL]     assertEquals(target, escapeHtmlGson.fromJson(nonEscapedJsonForm, BagOfPrimitives.class)); [EOL] }
public void testGsonAcceptsEscapedAndNonEscapedJsonDeserialization() throws Exception { [EOL]     Gson escapeHtmlGson = new GsonBuilder().create(); [EOL]     Gson noEscapeHtmlGson = new GsonBuilder().disableHtmlEscaping().create(); [EOL]     BagOfPrimitives target = new BagOfPrimitives(1L, 1, true, "test' / w'ith\" / \\ <script>"); [EOL]     String escapedJsonForm = escapeHtmlGson.toJson(target); [EOL]     String nonEscapedJsonForm = noEscapeHtmlGson.toJson(target); [EOL]     assertFalse(escapedJsonForm.equals(nonEscapedJsonForm)); [EOL]     assertEquals(target, noEscapeHtmlGson.fromJson(escapedJsonForm, BagOfPrimitives.class)); [EOL]     assertEquals(target, escapeHtmlGson.fromJson(nonEscapedJsonForm, BagOfPrimitives.class)); [EOL] }
public void testGsonAcceptsEscapedAndNonEscapedJsonDeserialization() throws Exception { [EOL]     Gson escapeHtmlGson = new GsonBuilder().create(); [EOL]     Gson noEscapeHtmlGson = new GsonBuilder().disableHtmlEscaping().create(); [EOL]     BagOfPrimitives target = new BagOfPrimitives(1L, 1, true, "test' / w'ith\" / \\ <script>"); [EOL]     String escapedJsonForm = escapeHtmlGson.toJson(target); [EOL]     String nonEscapedJsonForm = noEscapeHtmlGson.toJson(target); [EOL]     assertFalse(escapedJsonForm.equals(nonEscapedJsonForm)); [EOL]     assertEquals(target, noEscapeHtmlGson.fromJson(escapedJsonForm, BagOfPrimitives.class)); [EOL]     assertEquals(target, escapeHtmlGson.fromJson(nonEscapedJsonForm, BagOfPrimitives.class)); [EOL] }
public void testGsonAcceptsEscapedAndNonEscapedJsonDeserialization() throws Exception { [EOL]     Gson escapeHtmlGson = new GsonBuilder().create(); [EOL]     Gson noEscapeHtmlGson = new GsonBuilder().disableHtmlEscaping().create(); [EOL]     BagOfPrimitives target = new BagOfPrimitives(1L, 1, true, "test' / w'ith\" / \\ <script>"); [EOL]     String escapedJsonForm = escapeHtmlGson.toJson(target); [EOL]     String nonEscapedJsonForm = noEscapeHtmlGson.toJson(target); [EOL]     assertFalse(escapedJsonForm.equals(nonEscapedJsonForm)); [EOL]     assertEquals(target, noEscapeHtmlGson.fromJson(escapedJsonForm, BagOfPrimitives.class)); [EOL]     assertEquals(target, escapeHtmlGson.fromJson(nonEscapedJsonForm, BagOfPrimitives.class)); [EOL] }
public void testGsonAcceptsEscapedAndNonEscapedJsonDeserialization() throws Exception { [EOL]     Gson escapeHtmlGson = new GsonBuilder().create(); [EOL]     Gson noEscapeHtmlGson = new GsonBuilder().disableHtmlEscaping().create(); [EOL]     BagOfPrimitives target = new BagOfPrimitives(1L, 1, true, "test' / w'ith\" / \\ <script>"); [EOL]     String escapedJsonForm = escapeHtmlGson.toJson(target); [EOL]     String nonEscapedJsonForm = noEscapeHtmlGson.toJson(target); [EOL]     assertFalse(escapedJsonForm.equals(nonEscapedJsonForm)); [EOL]     assertEquals(target, noEscapeHtmlGson.fromJson(escapedJsonForm, BagOfPrimitives.class)); [EOL]     assertEquals(target, escapeHtmlGson.fromJson(nonEscapedJsonForm, BagOfPrimitives.class)); [EOL] }
public void testWriteDoesNotMutateState() throws IOException { [EOL]     Gson gson = new Gson(); [EOL]     JsonWriter jsonWriter = new JsonWriter(new StringWriter()); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.setHtmlSafe(true); [EOL]     jsonWriter.setLenient(true); [EOL]     gson.toJson(BLUE_MUSTANG, Car.class, jsonWriter); [EOL]     assertTrue(jsonWriter.isHtmlSafe()); [EOL]     assertTrue(jsonWriter.isLenient()); [EOL]     jsonWriter.setHtmlSafe(false); [EOL]     jsonWriter.setLenient(false); [EOL]     gson.toJson(BLUE_MUSTANG, Car.class, jsonWriter); [EOL]     assertFalse(jsonWriter.isHtmlSafe()); [EOL]     assertFalse(jsonWriter.isLenient()); [EOL] }
public void testWriteDoesNotMutateState() throws IOException { [EOL]     Gson gson = new Gson(); [EOL]     JsonWriter jsonWriter = new JsonWriter(new StringWriter()); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.setHtmlSafe(true); [EOL]     jsonWriter.setLenient(true); [EOL]     gson.toJson(BLUE_MUSTANG, Car.class, jsonWriter); [EOL]     assertTrue(jsonWriter.isHtmlSafe()); [EOL]     assertTrue(jsonWriter.isLenient()); [EOL]     jsonWriter.setHtmlSafe(false); [EOL]     jsonWriter.setLenient(false); [EOL]     gson.toJson(BLUE_MUSTANG, Car.class, jsonWriter); [EOL]     assertFalse(jsonWriter.isHtmlSafe()); [EOL]     assertFalse(jsonWriter.isLenient()); [EOL] }
public void testGsonAcceptsEscapedAndNonEscapedJsonDeserialization() throws Exception { [EOL]     Gson escapeHtmlGson = new GsonBuilder().create(); [EOL]     Gson noEscapeHtmlGson = new GsonBuilder().disableHtmlEscaping().create(); [EOL]     BagOfPrimitives target = new BagOfPrimitives(1L, 1, true, "test' / w'ith\" / \\ <script>"); [EOL]     String escapedJsonForm = escapeHtmlGson.toJson(target); [EOL]     String nonEscapedJsonForm = noEscapeHtmlGson.toJson(target); [EOL]     assertFalse(escapedJsonForm.equals(nonEscapedJsonForm)); [EOL]     assertEquals(target, noEscapeHtmlGson.fromJson(escapedJsonForm, BagOfPrimitives.class)); [EOL]     assertEquals(target, escapeHtmlGson.fromJson(nonEscapedJsonForm, BagOfPrimitives.class)); [EOL] }
public void testGsonAcceptsEscapedAndNonEscapedJsonDeserialization() throws Exception { [EOL]     Gson escapeHtmlGson = new GsonBuilder().create(); [EOL]     Gson noEscapeHtmlGson = new GsonBuilder().disableHtmlEscaping().create(); [EOL]     BagOfPrimitives target = new BagOfPrimitives(1L, 1, true, "test' / w'ith\" / \\ <script>"); [EOL]     String escapedJsonForm = escapeHtmlGson.toJson(target); [EOL]     String nonEscapedJsonForm = noEscapeHtmlGson.toJson(target); [EOL]     assertFalse(escapedJsonForm.equals(nonEscapedJsonForm)); [EOL]     assertEquals(target, noEscapeHtmlGson.fromJson(escapedJsonForm, BagOfPrimitives.class)); [EOL]     assertEquals(target, escapeHtmlGson.fromJson(nonEscapedJsonForm, BagOfPrimitives.class)); [EOL] }
public void testGsonAcceptsEscapedAndNonEscapedJsonDeserialization() throws Exception { [EOL]     Gson escapeHtmlGson = new GsonBuilder().create(); [EOL]     Gson noEscapeHtmlGson = new GsonBuilder().disableHtmlEscaping().create(); [EOL]     BagOfPrimitives target = new BagOfPrimitives(1L, 1, true, "test' / w'ith\" / \\ <script>"); [EOL]     String escapedJsonForm = escapeHtmlGson.toJson(target); [EOL]     String nonEscapedJsonForm = noEscapeHtmlGson.toJson(target); [EOL]     assertFalse(escapedJsonForm.equals(nonEscapedJsonForm)); [EOL]     assertEquals(target, noEscapeHtmlGson.fromJson(escapedJsonForm, BagOfPrimitives.class)); [EOL]     assertEquals(target, escapeHtmlGson.fromJson(nonEscapedJsonForm, BagOfPrimitives.class)); [EOL] }
public void testGsonAcceptsEscapedAndNonEscapedJsonDeserialization() throws Exception { [EOL]     Gson escapeHtmlGson = new GsonBuilder().create(); [EOL]     Gson noEscapeHtmlGson = new GsonBuilder().disableHtmlEscaping().create(); [EOL]     BagOfPrimitives target = new BagOfPrimitives(1L, 1, true, "test' / w'ith\" / \\ <script>"); [EOL]     String escapedJsonForm = escapeHtmlGson.toJson(target); [EOL]     String nonEscapedJsonForm = noEscapeHtmlGson.toJson(target); [EOL]     assertFalse(escapedJsonForm.equals(nonEscapedJsonForm)); [EOL]     assertEquals(target, noEscapeHtmlGson.fromJson(escapedJsonForm, BagOfPrimitives.class)); [EOL]     assertEquals(target, escapeHtmlGson.fromJson(nonEscapedJsonForm, BagOfPrimitives.class)); [EOL] }
public void testGsonAcceptsEscapedAndNonEscapedJsonDeserialization() throws Exception { [EOL]     Gson escapeHtmlGson = new GsonBuilder().create(); [EOL]     Gson noEscapeHtmlGson = new GsonBuilder().disableHtmlEscaping().create(); [EOL]     BagOfPrimitives target = new BagOfPrimitives(1L, 1, true, "test' / w'ith\" / \\ <script>"); [EOL]     String escapedJsonForm = escapeHtmlGson.toJson(target); [EOL]     String nonEscapedJsonForm = noEscapeHtmlGson.toJson(target); [EOL]     assertFalse(escapedJsonForm.equals(nonEscapedJsonForm)); [EOL]     assertEquals(target, noEscapeHtmlGson.fromJson(escapedJsonForm, BagOfPrimitives.class)); [EOL]     assertEquals(target, escapeHtmlGson.fromJson(nonEscapedJsonForm, BagOfPrimitives.class)); [EOL] }
public void testSkipFieldsWithFalseOnly() throws Exception { [EOL]     List<ExclusionStrategy> strategies = new LinkedList<ExclusionStrategy>(); [EOL]     strategies.add(FALSE_STRATEGY); [EOL]     DisjunctionExclusionStrategy strategy = new DisjunctionExclusionStrategy(strategies); [EOL]     assertFalse(strategy.shouldSkipClass(CLAZZ)); [EOL]     assertFalse(strategy.shouldSkipField(FIELD)); [EOL] }
public void testSkipFieldsWithFalseOnly() throws Exception { [EOL]     List<ExclusionStrategy> strategies = new LinkedList<ExclusionStrategy>(); [EOL]     strategies.add(FALSE_STRATEGY); [EOL]     DisjunctionExclusionStrategy strategy = new DisjunctionExclusionStrategy(strategies); [EOL]     assertFalse(strategy.shouldSkipClass(CLAZZ)); [EOL]     assertFalse(strategy.shouldSkipField(FIELD)); [EOL] }
public void testSkipFieldsWithFalseOnly() throws Exception { [EOL]     List<ExclusionStrategy> strategies = new LinkedList<ExclusionStrategy>(); [EOL]     strategies.add(FALSE_STRATEGY); [EOL]     DisjunctionExclusionStrategy strategy = new DisjunctionExclusionStrategy(strategies); [EOL]     assertFalse(strategy.shouldSkipClass(CLAZZ)); [EOL]     assertFalse(strategy.shouldSkipField(FIELD)); [EOL] }
public void testSkipFieldsWithFalseOnly() throws Exception { [EOL]     List<ExclusionStrategy> strategies = new LinkedList<ExclusionStrategy>(); [EOL]     strategies.add(FALSE_STRATEGY); [EOL]     DisjunctionExclusionStrategy strategy = new DisjunctionExclusionStrategy(strategies); [EOL]     assertFalse(strategy.shouldSkipClass(CLAZZ)); [EOL]     assertFalse(strategy.shouldSkipField(FIELD)); [EOL] }
public void testSkipFieldsWithFalseOnly() throws Exception { [EOL]     List<ExclusionStrategy> strategies = new LinkedList<ExclusionStrategy>(); [EOL]     strategies.add(FALSE_STRATEGY); [EOL]     DisjunctionExclusionStrategy strategy = new DisjunctionExclusionStrategy(strategies); [EOL]     assertFalse(strategy.shouldSkipClass(CLAZZ)); [EOL]     assertFalse(strategy.shouldSkipField(FIELD)); [EOL] }
public void testSkipFieldsWithFalseOnly() throws Exception { [EOL]     List<ExclusionStrategy> strategies = new LinkedList<ExclusionStrategy>(); [EOL]     strategies.add(FALSE_STRATEGY); [EOL]     DisjunctionExclusionStrategy strategy = new DisjunctionExclusionStrategy(strategies); [EOL]     assertFalse(strategy.shouldSkipClass(CLAZZ)); [EOL]     assertFalse(strategy.shouldSkipField(FIELD)); [EOL] }
public void testSkipFieldsWithFalseOnly() throws Exception { [EOL]     List<ExclusionStrategy> strategies = new LinkedList<ExclusionStrategy>(); [EOL]     strategies.add(FALSE_STRATEGY); [EOL]     DisjunctionExclusionStrategy strategy = new DisjunctionExclusionStrategy(strategies); [EOL]     assertFalse(strategy.shouldSkipClass(CLAZZ)); [EOL]     assertFalse(strategy.shouldSkipField(FIELD)); [EOL] }
public void testSkipFieldsWithFalseOnly() throws Exception { [EOL]     List<ExclusionStrategy> strategies = new LinkedList<ExclusionStrategy>(); [EOL]     strategies.add(FALSE_STRATEGY); [EOL]     DisjunctionExclusionStrategy strategy = new DisjunctionExclusionStrategy(strategies); [EOL]     assertFalse(strategy.shouldSkipClass(CLAZZ)); [EOL]     assertFalse(strategy.shouldSkipField(FIELD)); [EOL] }
public void testExplicitSerializationOfNulls() { [EOL]     Gson gson = gsonBuilder.create(); [EOL]     ClassWithObjects target = new ClassWithObjects(null); [EOL]     String actual = gson.toJson(target); [EOL]     String expected = "{\"bag\":null}"; [EOL]     assertEquals(expected, actual); [EOL] }
public void testInvalidArrayDeserialization() { [EOL]     String json = "[1, 2 3, 4, 5]"; [EOL]     try { [EOL]         gson.fromJson(json, int[].class); [EOL]         fail("Gson should not deserialize array elements with missing ,"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testArrayWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testArrayWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testArrayWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testArrayWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testArrayWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testArrayWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testArrayWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testArrayWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testArrayWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testArrayWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testArrayWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testArrayWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testArrayWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testArrayWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testPrettyPrintArrayOfObjects() { [EOL]     ArrayOfObjects target = new ArrayOfObjects(); [EOL]     String json = gson.toJson(target); [EOL]     print(json); [EOL] }
public void testPrettyPrintArrayOfObjects() { [EOL]     ArrayOfObjects target = new ArrayOfObjects(); [EOL]     String json = gson.toJson(target); [EOL]     print(json); [EOL] }
public void testPrettyPrintArrayOfObjects() { [EOL]     ArrayOfObjects target = new ArrayOfObjects(); [EOL]     String json = gson.toJson(target); [EOL]     print(json); [EOL] }
public void testPrettyPrintArrayOfObjects() { [EOL]     ArrayOfObjects target = new ArrayOfObjects(); [EOL]     String json = gson.toJson(target); [EOL]     print(json); [EOL] }
public void testInnerClassExclusion() throws Exception { [EOL]     Gson gson = new GsonBuilder().disableInnerClassSerialization().create(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals("", result); [EOL] }
public void testGsonAcceptsEscapedAndNonEscapedJsonDeserialization() throws Exception { [EOL]     Gson escapeHtmlGson = new GsonBuilder().create(); [EOL]     Gson noEscapeHtmlGson = new GsonBuilder().disableHtmlEscaping().create(); [EOL]     BagOfPrimitives target = new BagOfPrimitives(1L, 1, true, "test' / w'ith\" / \\ <script>"); [EOL]     String escapedJsonForm = escapeHtmlGson.toJson(target); [EOL]     String nonEscapedJsonForm = noEscapeHtmlGson.toJson(target); [EOL]     assertFalse(escapedJsonForm.equals(nonEscapedJsonForm)); [EOL]     assertEquals(target, noEscapeHtmlGson.fromJson(escapedJsonForm, BagOfPrimitives.class)); [EOL]     assertEquals(target, escapeHtmlGson.fromJson(nonEscapedJsonForm, BagOfPrimitives.class)); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testDateDeserializationWithPattern() throws Exception { [EOL]     String pattern = "yyyy-MM-dd"; [EOL]     Gson gson = new GsonBuilder().setDateFormat(DateFormat.FULL).setDateFormat(pattern).create(); [EOL]     Date now = new Date(); [EOL]     String json = gson.toJson(now); [EOL]     Date extracted = gson.fromJson(json, Date.class); [EOL]     assertEquals(now.getYear(), extracted.getYear()); [EOL]     assertEquals(now.getMonth(), extracted.getMonth()); [EOL]     assertEquals(now.getDay(), extracted.getDay()); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testDateDeserializationWithPattern() throws Exception { [EOL]     String pattern = "yyyy-MM-dd"; [EOL]     Gson gson = new GsonBuilder().setDateFormat(DateFormat.FULL).setDateFormat(pattern).create(); [EOL]     Date now = new Date(); [EOL]     String json = gson.toJson(now); [EOL]     Date extracted = gson.fromJson(json, Date.class); [EOL]     assertEquals(now.getYear(), extracted.getYear()); [EOL]     assertEquals(now.getMonth(), extracted.getMonth()); [EOL]     assertEquals(now.getDay(), extracted.getDay()); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testDateDeserializationWithPattern() throws Exception { [EOL]     String pattern = "yyyy-MM-dd"; [EOL]     Gson gson = new GsonBuilder().setDateFormat(DateFormat.FULL).setDateFormat(pattern).create(); [EOL]     Date now = new Date(); [EOL]     String json = gson.toJson(now); [EOL]     Date extracted = gson.fromJson(json, Date.class); [EOL]     assertEquals(now.getYear(), extracted.getYear()); [EOL]     assertEquals(now.getMonth(), extracted.getMonth()); [EOL]     assertEquals(now.getDay(), extracted.getDay()); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testDateDeserializationWithPattern() throws Exception { [EOL]     String pattern = "yyyy-MM-dd"; [EOL]     Gson gson = new GsonBuilder().setDateFormat(DateFormat.FULL).setDateFormat(pattern).create(); [EOL]     Date now = new Date(); [EOL]     String json = gson.toJson(now); [EOL]     Date extracted = gson.fromJson(json, Date.class); [EOL]     assertEquals(now.getYear(), extracted.getYear()); [EOL]     assertEquals(now.getMonth(), extracted.getMonth()); [EOL]     assertEquals(now.getDay(), extracted.getDay()); [EOL] }
public void testInnerClassExclusion() throws Exception { [EOL]     Gson gson = new GsonBuilder().disableInnerClassSerialization().create(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals("", result); [EOL] }
public void testInnerClassExclusion() throws Exception { [EOL]     Gson gson = new GsonBuilder().disableInnerClassSerialization().create(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals("", result); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testDateDeserializationWithPattern() throws Exception { [EOL]     String pattern = "yyyy-MM-dd"; [EOL]     Gson gson = new GsonBuilder().setDateFormat(DateFormat.FULL).setDateFormat(pattern).create(); [EOL]     Date now = new Date(); [EOL]     String json = gson.toJson(now); [EOL]     Date extracted = gson.fromJson(json, Date.class); [EOL]     assertEquals(now.getYear(), extracted.getYear()); [EOL]     assertEquals(now.getMonth(), extracted.getMonth()); [EOL]     assertEquals(now.getDay(), extracted.getDay()); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testDateDeserializationWithPattern() throws Exception { [EOL]     String pattern = "yyyy-MM-dd"; [EOL]     Gson gson = new GsonBuilder().setDateFormat(DateFormat.FULL).setDateFormat(pattern).create(); [EOL]     Date now = new Date(); [EOL]     String json = gson.toJson(now); [EOL]     Date extracted = gson.fromJson(json, Date.class); [EOL]     assertEquals(now.getYear(), extracted.getYear()); [EOL]     assertEquals(now.getMonth(), extracted.getMonth()); [EOL]     assertEquals(now.getDay(), extracted.getDay()); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testDateDeserializationWithPattern() throws Exception { [EOL]     String pattern = "yyyy-MM-dd"; [EOL]     Gson gson = new GsonBuilder().setDateFormat(DateFormat.FULL).setDateFormat(pattern).create(); [EOL]     Date now = new Date(); [EOL]     String json = gson.toJson(now); [EOL]     Date extracted = gson.fromJson(json, Date.class); [EOL]     assertEquals(now.getYear(), extracted.getYear()); [EOL]     assertEquals(now.getMonth(), extracted.getMonth()); [EOL]     assertEquals(now.getDay(), extracted.getDay()); [EOL] }
public void testVersionedUntilSerialization() { [EOL]     Version1 target = new Version1(); [EOL]     Gson gson = builder.setVersion(1.29).create(); [EOL]     String json = gson.toJson(target); [EOL]     assertTrue(json.contains("\"a\":" + A)); [EOL]     gson = builder.setVersion(1.3).create(); [EOL]     json = gson.toJson(target); [EOL]     assertFalse(json.contains("\"a\":" + A)); [EOL] }
public void testVersionedUntilSerialization() { [EOL]     Version1 target = new Version1(); [EOL]     Gson gson = builder.setVersion(1.29).create(); [EOL]     String json = gson.toJson(target); [EOL]     assertTrue(json.contains("\"a\":" + A)); [EOL]     gson = builder.setVersion(1.3).create(); [EOL]     json = gson.toJson(target); [EOL]     assertFalse(json.contains("\"a\":" + A)); [EOL] }
public void testVersionedUntilSerialization() { [EOL]     Version1 target = new Version1(); [EOL]     Gson gson = builder.setVersion(1.29).create(); [EOL]     String json = gson.toJson(target); [EOL]     assertTrue(json.contains("\"a\":" + A)); [EOL]     gson = builder.setVersion(1.3).create(); [EOL]     json = gson.toJson(target); [EOL]     assertFalse(json.contains("\"a\":" + A)); [EOL] }
public void testGenericArrayTypeField() throws Exception { [EOL]     Type listType = new TypeToken<List<String>[]>() { [EOL]     }.getType(); [EOL]     Field f = obj.getClass().getField("simpleGenericArray"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertTrue(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(listType, typeInfo.getActualType()); [EOL]     assertEquals(List[].class, typeInfo.getRawClass()); [EOL] }
public void testGenericArrayTypeField() throws Exception { [EOL]     Type listType = new TypeToken<List<String>[]>() { [EOL]     }.getType(); [EOL]     Field f = obj.getClass().getField("simpleGenericArray"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertTrue(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(listType, typeInfo.getActualType()); [EOL]     assertEquals(List[].class, typeInfo.getRawClass()); [EOL] }
public void testGenericArrayTypeField() throws Exception { [EOL]     Type listType = new TypeToken<List<String>[]>() { [EOL]     }.getType(); [EOL]     Field f = obj.getClass().getField("simpleGenericArray"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertTrue(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(listType, typeInfo.getActualType()); [EOL]     assertEquals(List[].class, typeInfo.getRawClass()); [EOL] }
public void testGenericArrayTypeField() throws Exception { [EOL]     Type listType = new TypeToken<List<String>[]>() { [EOL]     }.getType(); [EOL]     Field f = obj.getClass().getField("simpleGenericArray"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertTrue(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(listType, typeInfo.getActualType()); [EOL]     assertEquals(List[].class, typeInfo.getRawClass()); [EOL] }
public void testGenericArrayTypeField() throws Exception { [EOL]     Type listType = new TypeToken<List<String>[]>() { [EOL]     }.getType(); [EOL]     Field f = obj.getClass().getField("simpleGenericArray"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertTrue(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(listType, typeInfo.getActualType()); [EOL]     assertEquals(List[].class, typeInfo.getRawClass()); [EOL] }
public void testGenericArrayTypeField() throws Exception { [EOL]     Type listType = new TypeToken<List<String>[]>() { [EOL]     }.getType(); [EOL]     Field f = obj.getClass().getField("simpleGenericArray"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertTrue(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(listType, typeInfo.getActualType()); [EOL]     assertEquals(List[].class, typeInfo.getRawClass()); [EOL] }
public void testGenericArrayTypeField() throws Exception { [EOL]     Type listType = new TypeToken<List<String>[]>() { [EOL]     }.getType(); [EOL]     Field f = obj.getClass().getField("simpleGenericArray"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertTrue(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(listType, typeInfo.getActualType()); [EOL]     assertEquals(List[].class, typeInfo.getRawClass()); [EOL] }
public void testGenericArrayTypeField() throws Exception { [EOL]     Type listType = new TypeToken<List<String>[]>() { [EOL]     }.getType(); [EOL]     Field f = obj.getClass().getField("simpleGenericArray"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertTrue(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(listType, typeInfo.getActualType()); [EOL]     assertEquals(List[].class, typeInfo.getRawClass()); [EOL] }
public void testGenericArrayTypeField() throws Exception { [EOL]     Type listType = new TypeToken<List<String>[]>() { [EOL]     }.getType(); [EOL]     Field f = obj.getClass().getField("simpleGenericArray"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertTrue(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(listType, typeInfo.getActualType()); [EOL]     assertEquals(List[].class, typeInfo.getRawClass()); [EOL] }
public void testGenericArrayTypeField() throws Exception { [EOL]     Type listType = new TypeToken<List<String>[]>() { [EOL]     }.getType(); [EOL]     Field f = obj.getClass().getField("simpleGenericArray"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertTrue(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(listType, typeInfo.getActualType()); [EOL]     assertEquals(List[].class, typeInfo.getRawClass()); [EOL] }
public void testArrayWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testArrayWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testArrayWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testArrayWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testParsingStringAsNumber() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1"); [EOL]     assertFalse(json.isNumber()); [EOL]     assertEquals(1D, json.getAsDouble(), 0.00001); [EOL]     assertEquals(1F, json.getAsFloat(), 0.00001); [EOL]     assertEquals(1, json.getAsInt()); [EOL]     assertEquals(1L, json.getAsLong()); [EOL]     assertEquals((short) 1, json.getAsShort()); [EOL]     assertEquals((byte) 1, json.getAsByte()); [EOL]     assertEquals(new BigInteger("1"), json.getAsBigInteger()); [EOL]     assertEquals(new BigDecimal("1"), json.getAsBigDecimal()); [EOL] }
public void testParsingStringAsNumber() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1"); [EOL]     assertFalse(json.isNumber()); [EOL]     assertEquals(1D, json.getAsDouble(), 0.00001); [EOL]     assertEquals(1F, json.getAsFloat(), 0.00001); [EOL]     assertEquals(1, json.getAsInt()); [EOL]     assertEquals(1L, json.getAsLong()); [EOL]     assertEquals((short) 1, json.getAsShort()); [EOL]     assertEquals((byte) 1, json.getAsByte()); [EOL]     assertEquals(new BigInteger("1"), json.getAsBigInteger()); [EOL]     assertEquals(new BigDecimal("1"), json.getAsBigDecimal()); [EOL] }
public void testParsingStringAsNumber() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1"); [EOL]     assertFalse(json.isNumber()); [EOL]     assertEquals(1D, json.getAsDouble(), 0.00001); [EOL]     assertEquals(1F, json.getAsFloat(), 0.00001); [EOL]     assertEquals(1, json.getAsInt()); [EOL]     assertEquals(1L, json.getAsLong()); [EOL]     assertEquals((short) 1, json.getAsShort()); [EOL]     assertEquals((byte) 1, json.getAsByte()); [EOL]     assertEquals(new BigInteger("1"), json.getAsBigInteger()); [EOL]     assertEquals(new BigDecimal("1"), json.getAsBigDecimal()); [EOL] }
public void testParsingStringAsNumber() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1"); [EOL]     assertFalse(json.isNumber()); [EOL]     assertEquals(1D, json.getAsDouble(), 0.00001); [EOL]     assertEquals(1F, json.getAsFloat(), 0.00001); [EOL]     assertEquals(1, json.getAsInt()); [EOL]     assertEquals(1L, json.getAsLong()); [EOL]     assertEquals((short) 1, json.getAsShort()); [EOL]     assertEquals((byte) 1, json.getAsByte()); [EOL]     assertEquals(new BigInteger("1"), json.getAsBigInteger()); [EOL]     assertEquals(new BigDecimal("1"), json.getAsBigDecimal()); [EOL] }
public void testParsingStringAsNumber() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1"); [EOL]     assertFalse(json.isNumber()); [EOL]     assertEquals(1D, json.getAsDouble(), 0.00001); [EOL]     assertEquals(1F, json.getAsFloat(), 0.00001); [EOL]     assertEquals(1, json.getAsInt()); [EOL]     assertEquals(1L, json.getAsLong()); [EOL]     assertEquals((short) 1, json.getAsShort()); [EOL]     assertEquals((byte) 1, json.getAsByte()); [EOL]     assertEquals(new BigInteger("1"), json.getAsBigInteger()); [EOL]     assertEquals(new BigDecimal("1"), json.getAsBigDecimal()); [EOL] }
public void testParsingStringAsNumber() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1"); [EOL]     assertFalse(json.isNumber()); [EOL]     assertEquals(1D, json.getAsDouble(), 0.00001); [EOL]     assertEquals(1F, json.getAsFloat(), 0.00001); [EOL]     assertEquals(1, json.getAsInt()); [EOL]     assertEquals(1L, json.getAsLong()); [EOL]     assertEquals((short) 1, json.getAsShort()); [EOL]     assertEquals((byte) 1, json.getAsByte()); [EOL]     assertEquals(new BigInteger("1"), json.getAsBigInteger()); [EOL]     assertEquals(new BigDecimal("1"), json.getAsBigDecimal()); [EOL] }
public void testParsingStringAsNumber() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1"); [EOL]     assertFalse(json.isNumber()); [EOL]     assertEquals(1D, json.getAsDouble(), 0.00001); [EOL]     assertEquals(1F, json.getAsFloat(), 0.00001); [EOL]     assertEquals(1, json.getAsInt()); [EOL]     assertEquals(1L, json.getAsLong()); [EOL]     assertEquals((short) 1, json.getAsShort()); [EOL]     assertEquals((byte) 1, json.getAsByte()); [EOL]     assertEquals(new BigInteger("1"), json.getAsBigInteger()); [EOL]     assertEquals(new BigDecimal("1"), json.getAsBigDecimal()); [EOL] }
public void testParsingStringAsNumber() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1"); [EOL]     assertFalse(json.isNumber()); [EOL]     assertEquals(1D, json.getAsDouble(), 0.00001); [EOL]     assertEquals(1F, json.getAsFloat(), 0.00001); [EOL]     assertEquals(1, json.getAsInt()); [EOL]     assertEquals(1L, json.getAsLong()); [EOL]     assertEquals((short) 1, json.getAsShort()); [EOL]     assertEquals((byte) 1, json.getAsByte()); [EOL]     assertEquals(new BigInteger("1"), json.getAsBigInteger()); [EOL]     assertEquals(new BigDecimal("1"), json.getAsBigDecimal()); [EOL] }
public void testParsingStringAsNumber() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1"); [EOL]     assertFalse(json.isNumber()); [EOL]     assertEquals(1D, json.getAsDouble(), 0.00001); [EOL]     assertEquals(1F, json.getAsFloat(), 0.00001); [EOL]     assertEquals(1, json.getAsInt()); [EOL]     assertEquals(1L, json.getAsLong()); [EOL]     assertEquals((short) 1, json.getAsShort()); [EOL]     assertEquals((byte) 1, json.getAsByte()); [EOL]     assertEquals(new BigInteger("1"), json.getAsBigInteger()); [EOL]     assertEquals(new BigDecimal("1"), json.getAsBigDecimal()); [EOL] }
public void testParsingStringAsNumber() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1"); [EOL]     assertFalse(json.isNumber()); [EOL]     assertEquals(1D, json.getAsDouble(), 0.00001); [EOL]     assertEquals(1F, json.getAsFloat(), 0.00001); [EOL]     assertEquals(1, json.getAsInt()); [EOL]     assertEquals(1L, json.getAsLong()); [EOL]     assertEquals((short) 1, json.getAsShort()); [EOL]     assertEquals((byte) 1, json.getAsByte()); [EOL]     assertEquals(new BigInteger("1"), json.getAsBigInteger()); [EOL]     assertEquals(new BigDecimal("1"), json.getAsBigDecimal()); [EOL] }
public void testParsingStringAsNumber() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1"); [EOL]     assertFalse(json.isNumber()); [EOL]     assertEquals(1D, json.getAsDouble(), 0.00001); [EOL]     assertEquals(1F, json.getAsFloat(), 0.00001); [EOL]     assertEquals(1, json.getAsInt()); [EOL]     assertEquals(1L, json.getAsLong()); [EOL]     assertEquals((short) 1, json.getAsShort()); [EOL]     assertEquals((byte) 1, json.getAsByte()); [EOL]     assertEquals(new BigInteger("1"), json.getAsBigInteger()); [EOL]     assertEquals(new BigDecimal("1"), json.getAsBigDecimal()); [EOL] }
public void testParsingStringAsNumber() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1"); [EOL]     assertFalse(json.isNumber()); [EOL]     assertEquals(1D, json.getAsDouble(), 0.00001); [EOL]     assertEquals(1F, json.getAsFloat(), 0.00001); [EOL]     assertEquals(1, json.getAsInt()); [EOL]     assertEquals(1L, json.getAsLong()); [EOL]     assertEquals((short) 1, json.getAsShort()); [EOL]     assertEquals((byte) 1, json.getAsByte()); [EOL]     assertEquals(new BigInteger("1"), json.getAsBigInteger()); [EOL]     assertEquals(new BigDecimal("1"), json.getAsBigDecimal()); [EOL] }
public void testParsingStringAsNumber() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1"); [EOL]     assertFalse(json.isNumber()); [EOL]     assertEquals(1D, json.getAsDouble(), 0.00001); [EOL]     assertEquals(1F, json.getAsFloat(), 0.00001); [EOL]     assertEquals(1, json.getAsInt()); [EOL]     assertEquals(1L, json.getAsLong()); [EOL]     assertEquals((short) 1, json.getAsShort()); [EOL]     assertEquals((byte) 1, json.getAsByte()); [EOL]     assertEquals(new BigInteger("1"), json.getAsBigInteger()); [EOL]     assertEquals(new BigDecimal("1"), json.getAsBigDecimal()); [EOL] }
public void testParsingStringAsNumber() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1"); [EOL]     assertFalse(json.isNumber()); [EOL]     assertEquals(1D, json.getAsDouble(), 0.00001); [EOL]     assertEquals(1F, json.getAsFloat(), 0.00001); [EOL]     assertEquals(1, json.getAsInt()); [EOL]     assertEquals(1L, json.getAsLong()); [EOL]     assertEquals((short) 1, json.getAsShort()); [EOL]     assertEquals((byte) 1, json.getAsByte()); [EOL]     assertEquals(new BigInteger("1"), json.getAsBigInteger()); [EOL]     assertEquals(new BigDecimal("1"), json.getAsBigDecimal()); [EOL] }
public void testParsingStringAsNumber() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1"); [EOL]     assertFalse(json.isNumber()); [EOL]     assertEquals(1D, json.getAsDouble(), 0.00001); [EOL]     assertEquals(1F, json.getAsFloat(), 0.00001); [EOL]     assertEquals(1, json.getAsInt()); [EOL]     assertEquals(1L, json.getAsLong()); [EOL]     assertEquals((short) 1, json.getAsShort()); [EOL]     assertEquals((byte) 1, json.getAsByte()); [EOL]     assertEquals(new BigInteger("1"), json.getAsBigInteger()); [EOL]     assertEquals(new BigDecimal("1"), json.getAsBigDecimal()); [EOL] }
public void testParsingStringAsNumber() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1"); [EOL]     assertFalse(json.isNumber()); [EOL]     assertEquals(1D, json.getAsDouble(), 0.00001); [EOL]     assertEquals(1F, json.getAsFloat(), 0.00001); [EOL]     assertEquals(1, json.getAsInt()); [EOL]     assertEquals(1L, json.getAsLong()); [EOL]     assertEquals((short) 1, json.getAsShort()); [EOL]     assertEquals((byte) 1, json.getAsByte()); [EOL]     assertEquals(new BigInteger("1"), json.getAsBigInteger()); [EOL]     assertEquals(new BigDecimal("1"), json.getAsBigDecimal()); [EOL] }
public void testParsingStringAsNumber() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1"); [EOL]     assertFalse(json.isNumber()); [EOL]     assertEquals(1D, json.getAsDouble(), 0.00001); [EOL]     assertEquals(1F, json.getAsFloat(), 0.00001); [EOL]     assertEquals(1, json.getAsInt()); [EOL]     assertEquals(1L, json.getAsLong()); [EOL]     assertEquals((short) 1, json.getAsShort()); [EOL]     assertEquals((byte) 1, json.getAsByte()); [EOL]     assertEquals(new BigInteger("1"), json.getAsBigInteger()); [EOL]     assertEquals(new BigDecimal("1"), json.getAsBigDecimal()); [EOL] }
public void testParsingStringAsNumber() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1"); [EOL]     assertFalse(json.isNumber()); [EOL]     assertEquals(1D, json.getAsDouble(), 0.00001); [EOL]     assertEquals(1F, json.getAsFloat(), 0.00001); [EOL]     assertEquals(1, json.getAsInt()); [EOL]     assertEquals(1L, json.getAsLong()); [EOL]     assertEquals((short) 1, json.getAsShort()); [EOL]     assertEquals((byte) 1, json.getAsByte()); [EOL]     assertEquals(new BigInteger("1"), json.getAsBigInteger()); [EOL]     assertEquals(new BigDecimal("1"), json.getAsBigDecimal()); [EOL] }
public void testParsingStringAsNumber() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1"); [EOL]     assertFalse(json.isNumber()); [EOL]     assertEquals(1D, json.getAsDouble(), 0.00001); [EOL]     assertEquals(1F, json.getAsFloat(), 0.00001); [EOL]     assertEquals(1, json.getAsInt()); [EOL]     assertEquals(1L, json.getAsLong()); [EOL]     assertEquals((short) 1, json.getAsShort()); [EOL]     assertEquals((byte) 1, json.getAsByte()); [EOL]     assertEquals(new BigInteger("1"), json.getAsBigInteger()); [EOL]     assertEquals(new BigDecimal("1"), json.getAsBigDecimal()); [EOL] }
public void testParsingStringAsNumber() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1"); [EOL]     assertFalse(json.isNumber()); [EOL]     assertEquals(1D, json.getAsDouble(), 0.00001); [EOL]     assertEquals(1F, json.getAsFloat(), 0.00001); [EOL]     assertEquals(1, json.getAsInt()); [EOL]     assertEquals(1L, json.getAsLong()); [EOL]     assertEquals((short) 1, json.getAsShort()); [EOL]     assertEquals((byte) 1, json.getAsByte()); [EOL]     assertEquals(new BigInteger("1"), json.getAsBigInteger()); [EOL]     assertEquals(new BigDecimal("1"), json.getAsBigDecimal()); [EOL] }
public void testParsingStringAsNumber() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1"); [EOL]     assertFalse(json.isNumber()); [EOL]     assertEquals(1D, json.getAsDouble(), 0.00001); [EOL]     assertEquals(1F, json.getAsFloat(), 0.00001); [EOL]     assertEquals(1, json.getAsInt()); [EOL]     assertEquals(1L, json.getAsLong()); [EOL]     assertEquals((short) 1, json.getAsShort()); [EOL]     assertEquals((byte) 1, json.getAsByte()); [EOL]     assertEquals(new BigInteger("1"), json.getAsBigInteger()); [EOL]     assertEquals(new BigDecimal("1"), json.getAsBigDecimal()); [EOL] }
public void testParsingStringAsNumber() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1"); [EOL]     assertFalse(json.isNumber()); [EOL]     assertEquals(1D, json.getAsDouble(), 0.00001); [EOL]     assertEquals(1F, json.getAsFloat(), 0.00001); [EOL]     assertEquals(1, json.getAsInt()); [EOL]     assertEquals(1L, json.getAsLong()); [EOL]     assertEquals((short) 1, json.getAsShort()); [EOL]     assertEquals((byte) 1, json.getAsByte()); [EOL]     assertEquals(new BigInteger("1"), json.getAsBigInteger()); [EOL]     assertEquals(new BigDecimal("1"), json.getAsBigDecimal()); [EOL] }
public void testToJsonTreeObjectType() { [EOL]     SubTypeOfBagOfPrimitives bag = new SubTypeOfBagOfPrimitives(10L, 5, false, "foo", 1.4F); [EOL]     JsonElement json = gson.toJsonTree(bag, BagOfPrimitives.class); [EOL]     assertTrue(json.isJsonObject()); [EOL]     JsonObject obj = json.getAsJsonObject(); [EOL]     Set<Entry<String, JsonElement>> children = obj.entrySet(); [EOL]     assertEquals(4, children.size()); [EOL]     assertContains(obj, new JsonPrimitive(10L)); [EOL]     assertContains(obj, new JsonPrimitive(5)); [EOL]     assertContains(obj, new JsonPrimitive(false)); [EOL]     assertContains(obj, new JsonPrimitive("foo")); [EOL] }
public void testToJsonTreeObjectType() { [EOL]     SubTypeOfBagOfPrimitives bag = new SubTypeOfBagOfPrimitives(10L, 5, false, "foo", 1.4F); [EOL]     JsonElement json = gson.toJsonTree(bag, BagOfPrimitives.class); [EOL]     assertTrue(json.isJsonObject()); [EOL]     JsonObject obj = json.getAsJsonObject(); [EOL]     Set<Entry<String, JsonElement>> children = obj.entrySet(); [EOL]     assertEquals(4, children.size()); [EOL]     assertContains(obj, new JsonPrimitive(10L)); [EOL]     assertContains(obj, new JsonPrimitive(5)); [EOL]     assertContains(obj, new JsonPrimitive(false)); [EOL]     assertContains(obj, new JsonPrimitive("foo")); [EOL] }
public void testToJsonTreeObjectType() { [EOL]     SubTypeOfBagOfPrimitives bag = new SubTypeOfBagOfPrimitives(10L, 5, false, "foo", 1.4F); [EOL]     JsonElement json = gson.toJsonTree(bag, BagOfPrimitives.class); [EOL]     assertTrue(json.isJsonObject()); [EOL]     JsonObject obj = json.getAsJsonObject(); [EOL]     Set<Entry<String, JsonElement>> children = obj.entrySet(); [EOL]     assertEquals(4, children.size()); [EOL]     assertContains(obj, new JsonPrimitive(10L)); [EOL]     assertContains(obj, new JsonPrimitive(5)); [EOL]     assertContains(obj, new JsonPrimitive(false)); [EOL]     assertContains(obj, new JsonPrimitive("foo")); [EOL] }
public void testToJsonTreeObjectType() { [EOL]     SubTypeOfBagOfPrimitives bag = new SubTypeOfBagOfPrimitives(10L, 5, false, "foo", 1.4F); [EOL]     JsonElement json = gson.toJsonTree(bag, BagOfPrimitives.class); [EOL]     assertTrue(json.isJsonObject()); [EOL]     JsonObject obj = json.getAsJsonObject(); [EOL]     Set<Entry<String, JsonElement>> children = obj.entrySet(); [EOL]     assertEquals(4, children.size()); [EOL]     assertContains(obj, new JsonPrimitive(10L)); [EOL]     assertContains(obj, new JsonPrimitive(5)); [EOL]     assertContains(obj, new JsonPrimitive(false)); [EOL]     assertContains(obj, new JsonPrimitive("foo")); [EOL] }
public void testToJsonTreeObjectType() { [EOL]     SubTypeOfBagOfPrimitives bag = new SubTypeOfBagOfPrimitives(10L, 5, false, "foo", 1.4F); [EOL]     JsonElement json = gson.toJsonTree(bag, BagOfPrimitives.class); [EOL]     assertTrue(json.isJsonObject()); [EOL]     JsonObject obj = json.getAsJsonObject(); [EOL]     Set<Entry<String, JsonElement>> children = obj.entrySet(); [EOL]     assertEquals(4, children.size()); [EOL]     assertContains(obj, new JsonPrimitive(10L)); [EOL]     assertContains(obj, new JsonPrimitive(5)); [EOL]     assertContains(obj, new JsonPrimitive(false)); [EOL]     assertContains(obj, new JsonPrimitive("foo")); [EOL] }
public void testToJsonTreeObjectType() { [EOL]     SubTypeOfBagOfPrimitives bag = new SubTypeOfBagOfPrimitives(10L, 5, false, "foo", 1.4F); [EOL]     JsonElement json = gson.toJsonTree(bag, BagOfPrimitives.class); [EOL]     assertTrue(json.isJsonObject()); [EOL]     JsonObject obj = json.getAsJsonObject(); [EOL]     Set<Entry<String, JsonElement>> children = obj.entrySet(); [EOL]     assertEquals(4, children.size()); [EOL]     assertContains(obj, new JsonPrimitive(10L)); [EOL]     assertContains(obj, new JsonPrimitive(5)); [EOL]     assertContains(obj, new JsonPrimitive(false)); [EOL]     assertContains(obj, new JsonPrimitive("foo")); [EOL] }
public void testToJsonTreeObjectType() { [EOL]     SubTypeOfBagOfPrimitives bag = new SubTypeOfBagOfPrimitives(10L, 5, false, "foo", 1.4F); [EOL]     JsonElement json = gson.toJsonTree(bag, BagOfPrimitives.class); [EOL]     assertTrue(json.isJsonObject()); [EOL]     JsonObject obj = json.getAsJsonObject(); [EOL]     Set<Entry<String, JsonElement>> children = obj.entrySet(); [EOL]     assertEquals(4, children.size()); [EOL]     assertContains(obj, new JsonPrimitive(10L)); [EOL]     assertContains(obj, new JsonPrimitive(5)); [EOL]     assertContains(obj, new JsonPrimitive(false)); [EOL]     assertContains(obj, new JsonPrimitive("foo")); [EOL] }
public void testToJsonTreeObjectType() { [EOL]     SubTypeOfBagOfPrimitives bag = new SubTypeOfBagOfPrimitives(10L, 5, false, "foo", 1.4F); [EOL]     JsonElement json = gson.toJsonTree(bag, BagOfPrimitives.class); [EOL]     assertTrue(json.isJsonObject()); [EOL]     JsonObject obj = json.getAsJsonObject(); [EOL]     Set<Entry<String, JsonElement>> children = obj.entrySet(); [EOL]     assertEquals(4, children.size()); [EOL]     assertContains(obj, new JsonPrimitive(10L)); [EOL]     assertContains(obj, new JsonPrimitive(5)); [EOL]     assertContains(obj, new JsonPrimitive(false)); [EOL]     assertContains(obj, new JsonPrimitive("foo")); [EOL] }
public void testToJsonTreeObjectType() { [EOL]     SubTypeOfBagOfPrimitives bag = new SubTypeOfBagOfPrimitives(10L, 5, false, "foo", 1.4F); [EOL]     JsonElement json = gson.toJsonTree(bag, BagOfPrimitives.class); [EOL]     assertTrue(json.isJsonObject()); [EOL]     JsonObject obj = json.getAsJsonObject(); [EOL]     Set<Entry<String, JsonElement>> children = obj.entrySet(); [EOL]     assertEquals(4, children.size()); [EOL]     assertContains(obj, new JsonPrimitive(10L)); [EOL]     assertContains(obj, new JsonPrimitive(5)); [EOL]     assertContains(obj, new JsonPrimitive(false)); [EOL]     assertContains(obj, new JsonPrimitive("foo")); [EOL] }
public void testToJsonTreeObjectType() { [EOL]     SubTypeOfBagOfPrimitives bag = new SubTypeOfBagOfPrimitives(10L, 5, false, "foo", 1.4F); [EOL]     JsonElement json = gson.toJsonTree(bag, BagOfPrimitives.class); [EOL]     assertTrue(json.isJsonObject()); [EOL]     JsonObject obj = json.getAsJsonObject(); [EOL]     Set<Entry<String, JsonElement>> children = obj.entrySet(); [EOL]     assertEquals(4, children.size()); [EOL]     assertContains(obj, new JsonPrimitive(10L)); [EOL]     assertContains(obj, new JsonPrimitive(5)); [EOL]     assertContains(obj, new JsonPrimitive(false)); [EOL]     assertContains(obj, new JsonPrimitive("foo")); [EOL] }
public void testToJsonTreeObjectType() { [EOL]     SubTypeOfBagOfPrimitives bag = new SubTypeOfBagOfPrimitives(10L, 5, false, "foo", 1.4F); [EOL]     JsonElement json = gson.toJsonTree(bag, BagOfPrimitives.class); [EOL]     assertTrue(json.isJsonObject()); [EOL]     JsonObject obj = json.getAsJsonObject(); [EOL]     Set<Entry<String, JsonElement>> children = obj.entrySet(); [EOL]     assertEquals(4, children.size()); [EOL]     assertContains(obj, new JsonPrimitive(10L)); [EOL]     assertContains(obj, new JsonPrimitive(5)); [EOL]     assertContains(obj, new JsonPrimitive(false)); [EOL]     assertContains(obj, new JsonPrimitive("foo")); [EOL] }
public void testToJsonTreeObjectType() { [EOL]     SubTypeOfBagOfPrimitives bag = new SubTypeOfBagOfPrimitives(10L, 5, false, "foo", 1.4F); [EOL]     JsonElement json = gson.toJsonTree(bag, BagOfPrimitives.class); [EOL]     assertTrue(json.isJsonObject()); [EOL]     JsonObject obj = json.getAsJsonObject(); [EOL]     Set<Entry<String, JsonElement>> children = obj.entrySet(); [EOL]     assertEquals(4, children.size()); [EOL]     assertContains(obj, new JsonPrimitive(10L)); [EOL]     assertContains(obj, new JsonPrimitive(5)); [EOL]     assertContains(obj, new JsonPrimitive(false)); [EOL]     assertContains(obj, new JsonPrimitive("foo")); [EOL] }
public void testToJsonTreeObjectType() { [EOL]     SubTypeOfBagOfPrimitives bag = new SubTypeOfBagOfPrimitives(10L, 5, false, "foo", 1.4F); [EOL]     JsonElement json = gson.toJsonTree(bag, BagOfPrimitives.class); [EOL]     assertTrue(json.isJsonObject()); [EOL]     JsonObject obj = json.getAsJsonObject(); [EOL]     Set<Entry<String, JsonElement>> children = obj.entrySet(); [EOL]     assertEquals(4, children.size()); [EOL]     assertContains(obj, new JsonPrimitive(10L)); [EOL]     assertContains(obj, new JsonPrimitive(5)); [EOL]     assertContains(obj, new JsonPrimitive(false)); [EOL]     assertContains(obj, new JsonPrimitive("foo")); [EOL] }
public void testToJsonTreeObjectType() { [EOL]     SubTypeOfBagOfPrimitives bag = new SubTypeOfBagOfPrimitives(10L, 5, false, "foo", 1.4F); [EOL]     JsonElement json = gson.toJsonTree(bag, BagOfPrimitives.class); [EOL]     assertTrue(json.isJsonObject()); [EOL]     JsonObject obj = json.getAsJsonObject(); [EOL]     Set<Entry<String, JsonElement>> children = obj.entrySet(); [EOL]     assertEquals(4, children.size()); [EOL]     assertContains(obj, new JsonPrimitive(10L)); [EOL]     assertContains(obj, new JsonPrimitive(5)); [EOL]     assertContains(obj, new JsonPrimitive(false)); [EOL]     assertContains(obj, new JsonPrimitive("foo")); [EOL] }
public void testToJsonTreeObjectType() { [EOL]     SubTypeOfBagOfPrimitives bag = new SubTypeOfBagOfPrimitives(10L, 5, false, "foo", 1.4F); [EOL]     JsonElement json = gson.toJsonTree(bag, BagOfPrimitives.class); [EOL]     assertTrue(json.isJsonObject()); [EOL]     JsonObject obj = json.getAsJsonObject(); [EOL]     Set<Entry<String, JsonElement>> children = obj.entrySet(); [EOL]     assertEquals(4, children.size()); [EOL]     assertContains(obj, new JsonPrimitive(10L)); [EOL]     assertContains(obj, new JsonPrimitive(5)); [EOL]     assertContains(obj, new JsonPrimitive(false)); [EOL]     assertContains(obj, new JsonPrimitive("foo")); [EOL] }
public void testToJsonTreeObjectType() { [EOL]     SubTypeOfBagOfPrimitives bag = new SubTypeOfBagOfPrimitives(10L, 5, false, "foo", 1.4F); [EOL]     JsonElement json = gson.toJsonTree(bag, BagOfPrimitives.class); [EOL]     assertTrue(json.isJsonObject()); [EOL]     JsonObject obj = json.getAsJsonObject(); [EOL]     Set<Entry<String, JsonElement>> children = obj.entrySet(); [EOL]     assertEquals(4, children.size()); [EOL]     assertContains(obj, new JsonPrimitive(10L)); [EOL]     assertContains(obj, new JsonPrimitive(5)); [EOL]     assertContains(obj, new JsonPrimitive(false)); [EOL]     assertContains(obj, new JsonPrimitive("foo")); [EOL] }
public void testToJsonTreeObjectType() { [EOL]     SubTypeOfBagOfPrimitives bag = new SubTypeOfBagOfPrimitives(10L, 5, false, "foo", 1.4F); [EOL]     JsonElement json = gson.toJsonTree(bag, BagOfPrimitives.class); [EOL]     assertTrue(json.isJsonObject()); [EOL]     JsonObject obj = json.getAsJsonObject(); [EOL]     Set<Entry<String, JsonElement>> children = obj.entrySet(); [EOL]     assertEquals(4, children.size()); [EOL]     assertContains(obj, new JsonPrimitive(10L)); [EOL]     assertContains(obj, new JsonPrimitive(5)); [EOL]     assertContains(obj, new JsonPrimitive(false)); [EOL]     assertContains(obj, new JsonPrimitive("foo")); [EOL] }
public void testToJsonTreeObjectType() { [EOL]     SubTypeOfBagOfPrimitives bag = new SubTypeOfBagOfPrimitives(10L, 5, false, "foo", 1.4F); [EOL]     JsonElement json = gson.toJsonTree(bag, BagOfPrimitives.class); [EOL]     assertTrue(json.isJsonObject()); [EOL]     JsonObject obj = json.getAsJsonObject(); [EOL]     Set<Entry<String, JsonElement>> children = obj.entrySet(); [EOL]     assertEquals(4, children.size()); [EOL]     assertContains(obj, new JsonPrimitive(10L)); [EOL]     assertContains(obj, new JsonPrimitive(5)); [EOL]     assertContains(obj, new JsonPrimitive(false)); [EOL]     assertContains(obj, new JsonPrimitive("foo")); [EOL] }
public void testToJsonTreeObjectType() { [EOL]     SubTypeOfBagOfPrimitives bag = new SubTypeOfBagOfPrimitives(10L, 5, false, "foo", 1.4F); [EOL]     JsonElement json = gson.toJsonTree(bag, BagOfPrimitives.class); [EOL]     assertTrue(json.isJsonObject()); [EOL]     JsonObject obj = json.getAsJsonObject(); [EOL]     Set<Entry<String, JsonElement>> children = obj.entrySet(); [EOL]     assertEquals(4, children.size()); [EOL]     assertContains(obj, new JsonPrimitive(10L)); [EOL]     assertContains(obj, new JsonPrimitive(5)); [EOL]     assertContains(obj, new JsonPrimitive(false)); [EOL]     assertContains(obj, new JsonPrimitive("foo")); [EOL] }
public void testToJsonTreeObjectType() { [EOL]     SubTypeOfBagOfPrimitives bag = new SubTypeOfBagOfPrimitives(10L, 5, false, "foo", 1.4F); [EOL]     JsonElement json = gson.toJsonTree(bag, BagOfPrimitives.class); [EOL]     assertTrue(json.isJsonObject()); [EOL]     JsonObject obj = json.getAsJsonObject(); [EOL]     Set<Entry<String, JsonElement>> children = obj.entrySet(); [EOL]     assertEquals(4, children.size()); [EOL]     assertContains(obj, new JsonPrimitive(10L)); [EOL]     assertContains(obj, new JsonPrimitive(5)); [EOL]     assertContains(obj, new JsonPrimitive(false)); [EOL]     assertContains(obj, new JsonPrimitive("foo")); [EOL] }
public void testToJsonTreeObjectType() { [EOL]     SubTypeOfBagOfPrimitives bag = new SubTypeOfBagOfPrimitives(10L, 5, false, "foo", 1.4F); [EOL]     JsonElement json = gson.toJsonTree(bag, BagOfPrimitives.class); [EOL]     assertTrue(json.isJsonObject()); [EOL]     JsonObject obj = json.getAsJsonObject(); [EOL]     Set<Entry<String, JsonElement>> children = obj.entrySet(); [EOL]     assertEquals(4, children.size()); [EOL]     assertContains(obj, new JsonPrimitive(10L)); [EOL]     assertContains(obj, new JsonPrimitive(5)); [EOL]     assertContains(obj, new JsonPrimitive(false)); [EOL]     assertContains(obj, new JsonPrimitive("foo")); [EOL] }
public void testToJsonTreeObjectType() { [EOL]     SubTypeOfBagOfPrimitives bag = new SubTypeOfBagOfPrimitives(10L, 5, false, "foo", 1.4F); [EOL]     JsonElement json = gson.toJsonTree(bag, BagOfPrimitives.class); [EOL]     assertTrue(json.isJsonObject()); [EOL]     JsonObject obj = json.getAsJsonObject(); [EOL]     Set<Entry<String, JsonElement>> children = obj.entrySet(); [EOL]     assertEquals(4, children.size()); [EOL]     assertContains(obj, new JsonPrimitive(10L)); [EOL]     assertContains(obj, new JsonPrimitive(5)); [EOL]     assertContains(obj, new JsonPrimitive(false)); [EOL]     assertContains(obj, new JsonPrimitive("foo")); [EOL] }
public void testSkipNonAnnotatedFields() throws Exception { [EOL]     Field f = MockObject.class.getField("hiddenField"); [EOL]     assertTrue(strategy.shouldSkipField(new FieldAttributes(MockObject.class, f))); [EOL] }
public void testSkipNonAnnotatedFields() throws Exception { [EOL]     Field f = MockObject.class.getField("hiddenField"); [EOL]     assertTrue(strategy.shouldSkipField(new FieldAttributes(MockObject.class, f))); [EOL] }
public void testSkipNonAnnotatedFields() throws Exception { [EOL]     Field f = MockObject.class.getField("hiddenField"); [EOL]     assertTrue(strategy.shouldSkipField(new FieldAttributes(MockObject.class, f))); [EOL] }
public void testArrayWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testArrayWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testIncludeStaticNestedClassField() throws Exception { [EOL]     Field f = getClass().getField("staticNestedClass"); [EOL]     assertFalse(strategy.shouldSkipField(new FieldAttributes(getClass(), f))); [EOL] }
public void testIncludeStaticNestedClassField() throws Exception { [EOL]     Field f = getClass().getField("staticNestedClass"); [EOL]     assertFalse(strategy.shouldSkipField(new FieldAttributes(getClass(), f))); [EOL] }
public void testIncludeStaticNestedClassField() throws Exception { [EOL]     Field f = getClass().getField("staticNestedClass"); [EOL]     assertFalse(strategy.shouldSkipField(new FieldAttributes(getClass(), f))); [EOL] }
public void testIncludeStaticNestedClassField() throws Exception { [EOL]     Field f = getClass().getField("staticNestedClass"); [EOL]     assertFalse(strategy.shouldSkipField(new FieldAttributes(getClass(), f))); [EOL] }
public void testInvalidFieldStartingDollarUnderscore() throws Exception { [EOL]     try { [EOL]         validator.validate("$_abc"); [EOL]         fail("Json field name can not start with two non-alphabet characters"); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL] }
public void testInvalidFieldStartingDollarUnderscore() throws Exception { [EOL]     try { [EOL]         validator.validate("$_abc"); [EOL]         fail("Json field name can not start with two non-alphabet characters"); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL] }
public void testArrayOfObjectsWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',{a:1},5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testArrayOfObjectsWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',{a:1},5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testArrayOfObjectsWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',{a:1},5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
