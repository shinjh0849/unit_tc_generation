public void testGetValues() throws Throwable { [EOL]     MockPartial mock = new MockPartial(); [EOL]     int[] vals = mock.getValues(); [EOL]     assertEquals(2, vals.length); [EOL]     assertEquals(1970, vals[0]); [EOL]     assertEquals(1, vals[1]); [EOL] }
public void testGetValues() throws Throwable { [EOL]     MockPartial mock = new MockPartial(); [EOL]     int[] vals = mock.getValues(); [EOL]     assertEquals(2, vals.length); [EOL]     assertEquals(1970, vals[0]); [EOL]     assertEquals(1, vals[1]); [EOL] }
public void testPlusDays_int() { [EOL]     MonthDay test = new MonthDay(5, 10, BuddhistChronology.getInstance()); [EOL]     MonthDay result = test.plusDays(1); [EOL]     MonthDay expected = new MonthDay(5, 11, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL] }
public void testPlusDays_int() { [EOL]     MonthDay test = new MonthDay(5, 10, BuddhistChronology.getInstance()); [EOL]     MonthDay result = test.plusDays(1); [EOL]     MonthDay expected = new MonthDay(5, 11, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL] }
public void testPlusDays_int() { [EOL]     MonthDay test = new MonthDay(5, 10, BuddhistChronology.getInstance()); [EOL]     MonthDay result = test.plusDays(1); [EOL]     MonthDay expected = new MonthDay(5, 11, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL] }
public void testPlusDays_int() { [EOL]     MonthDay test = new MonthDay(5, 10, BuddhistChronology.getInstance()); [EOL]     MonthDay result = test.plusDays(1); [EOL]     MonthDay expected = new MonthDay(5, 11, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL] }
public void testCompareTo() { [EOL]     YearMonth test1 = new YearMonth(2005, 6); [EOL]     YearMonth test1a = new YearMonth(2005, 6); [EOL]     assertEquals(0, test1.compareTo(test1a)); [EOL]     assertEquals(0, test1a.compareTo(test1)); [EOL]     assertEquals(0, test1.compareTo(test1)); [EOL]     assertEquals(0, test1a.compareTo(test1a)); [EOL]     YearMonth test2 = new YearMonth(2005, 7); [EOL]     assertEquals(-1, test1.compareTo(test2)); [EOL]     assertEquals(+1, test2.compareTo(test1)); [EOL]     YearMonth test3 = new YearMonth(2005, 7, GregorianChronology.getInstanceUTC()); [EOL]     assertEquals(-1, test1.compareTo(test3)); [EOL]     assertEquals(+1, test3.compareTo(test1)); [EOL]     assertEquals(0, test3.compareTo(test2)); [EOL]     DateTimeFieldType[] types = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear() }; [EOL]     int[] values = new int[] { 2005, 6 }; [EOL]     Partial p = new Partial(types, values); [EOL]     assertEquals(0, test1.compareTo(p)); [EOL]     try { [EOL]         test1.compareTo(null); [EOL]         fail(); [EOL]     } catch (NullPointerException ex) { [EOL]     } [EOL]     try { [EOL]         test1.compareTo(new LocalTime()); [EOL]         fail(); [EOL]     } catch (ClassCastException ex) { [EOL]     } [EOL]     Partial partial = new Partial().with(DateTimeFieldType.centuryOfEra(), 1).with(DateTimeFieldType.halfdayOfDay(), 0).with(DateTimeFieldType.dayOfMonth(), 9); [EOL]     try { [EOL]         new YearMonth(1970, 6).compareTo(partial); [EOL]         fail(); [EOL]     } catch (ClassCastException ex) { [EOL]     } [EOL] }
public void testCompareTo() { [EOL]     YearMonth test1 = new YearMonth(2005, 6); [EOL]     YearMonth test1a = new YearMonth(2005, 6); [EOL]     assertEquals(0, test1.compareTo(test1a)); [EOL]     assertEquals(0, test1a.compareTo(test1)); [EOL]     assertEquals(0, test1.compareTo(test1)); [EOL]     assertEquals(0, test1a.compareTo(test1a)); [EOL]     YearMonth test2 = new YearMonth(2005, 7); [EOL]     assertEquals(-1, test1.compareTo(test2)); [EOL]     assertEquals(+1, test2.compareTo(test1)); [EOL]     YearMonth test3 = new YearMonth(2005, 7, GregorianChronology.getInstanceUTC()); [EOL]     assertEquals(-1, test1.compareTo(test3)); [EOL]     assertEquals(+1, test3.compareTo(test1)); [EOL]     assertEquals(0, test3.compareTo(test2)); [EOL]     DateTimeFieldType[] types = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear() }; [EOL]     int[] values = new int[] { 2005, 6 }; [EOL]     Partial p = new Partial(types, values); [EOL]     assertEquals(0, test1.compareTo(p)); [EOL]     try { [EOL]         test1.compareTo(null); [EOL]         fail(); [EOL]     } catch (NullPointerException ex) { [EOL]     } [EOL]     try { [EOL]         test1.compareTo(new LocalTime()); [EOL]         fail(); [EOL]     } catch (ClassCastException ex) { [EOL]     } [EOL]     Partial partial = new Partial().with(DateTimeFieldType.centuryOfEra(), 1).with(DateTimeFieldType.halfdayOfDay(), 0).with(DateTimeFieldType.dayOfMonth(), 9); [EOL]     try { [EOL]         new YearMonth(1970, 6).compareTo(partial); [EOL]         fail(); [EOL]     } catch (ClassCastException ex) { [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testFactory_FromCalendarFields() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6); [EOL]     cal.set(Calendar.MILLISECOND, 7); [EOL]     YearMonthDay expected = new YearMonthDay(1970, 2, 3); [EOL]     assertEquals(expected, YearMonthDay.fromCalendarFields(cal)); [EOL]     try { [EOL]         YearMonthDay.fromCalendarFields(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_FromCalendarFields() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6); [EOL]     cal.set(Calendar.MILLISECOND, 7); [EOL]     YearMonthDay expected = new YearMonthDay(1970, 2, 3); [EOL]     assertEquals(expected, YearMonthDay.fromCalendarFields(cal)); [EOL]     try { [EOL]         YearMonthDay.fromCalendarFields(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testToYearMonthDay() { [EOL]     DateMidnight base = new DateMidnight(TEST_TIME1_UTC, COPTIC_DEFAULT); [EOL]     YearMonthDay test = base.toYearMonthDay(); [EOL]     assertEquals(new YearMonthDay(TEST_TIME1_UTC, COPTIC_DEFAULT), test); [EOL] }
public void testToYearMonthDay() { [EOL]     DateMidnight base = new DateMidnight(TEST_TIME1_UTC, COPTIC_DEFAULT); [EOL]     YearMonthDay test = base.toYearMonthDay(); [EOL]     assertEquals(new YearMonthDay(TEST_TIME1_UTC, COPTIC_DEFAULT), test); [EOL] }
public void testToYearMonthDay() { [EOL]     DateMidnight base = new DateMidnight(TEST_TIME1_UTC, COPTIC_DEFAULT); [EOL]     YearMonthDay test = base.toYearMonthDay(); [EOL]     assertEquals(new YearMonthDay(TEST_TIME1_UTC, COPTIC_DEFAULT), test); [EOL] }
public void testToYearMonthDay() { [EOL]     DateMidnight base = new DateMidnight(TEST_TIME1_UTC, COPTIC_DEFAULT); [EOL]     YearMonthDay test = base.toYearMonthDay(); [EOL]     assertEquals(new YearMonthDay(TEST_TIME1_UTC, COPTIC_DEFAULT), test); [EOL] }
public void testToYearMonthDay() { [EOL]     DateMidnight base = new DateMidnight(TEST_TIME1_UTC, COPTIC_DEFAULT); [EOL]     YearMonthDay test = base.toYearMonthDay(); [EOL]     assertEquals(new YearMonthDay(TEST_TIME1_UTC, COPTIC_DEFAULT), test); [EOL] }
public void testToYearMonthDay() { [EOL]     DateMidnight base = new DateMidnight(TEST_TIME1_UTC, COPTIC_DEFAULT); [EOL]     YearMonthDay test = base.toYearMonthDay(); [EOL]     assertEquals(new YearMonthDay(TEST_TIME1_UTC, COPTIC_DEFAULT), test); [EOL] }
public void testToYearMonthDay() { [EOL]     DateMidnight base = new DateMidnight(TEST_TIME1_UTC, COPTIC_DEFAULT); [EOL]     YearMonthDay test = base.toYearMonthDay(); [EOL]     assertEquals(new YearMonthDay(TEST_TIME1_UTC, COPTIC_DEFAULT), test); [EOL] }
public void testToYearMonthDay() { [EOL]     DateMidnight base = new DateMidnight(TEST_TIME1_UTC, COPTIC_DEFAULT); [EOL]     YearMonthDay test = base.toYearMonthDay(); [EOL]     assertEquals(new YearMonthDay(TEST_TIME1_UTC, COPTIC_DEFAULT), test); [EOL] }
public void testToYearMonthDay() { [EOL]     DateMidnight base = new DateMidnight(TEST_TIME1_UTC, COPTIC_DEFAULT); [EOL]     YearMonthDay test = base.toYearMonthDay(); [EOL]     assertEquals(new YearMonthDay(TEST_TIME1_UTC, COPTIC_DEFAULT), test); [EOL] }
public void testWithChronologyRetainFields_sameChrono() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     YearMonthDay test = base.withChronologyRetainFields(COPTIC_TOKYO); [EOL]     assertSame(base, test); [EOL] }
public void testWithChronologyRetainFields_sameChrono() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     YearMonthDay test = base.withChronologyRetainFields(COPTIC_TOKYO); [EOL]     assertSame(base, test); [EOL] }
public void testWithField4() { [EOL]     YearMonthDay test = new YearMonthDay(2004, 6, 9); [EOL]     YearMonthDay result = test.withField(DateTimeFieldType.year(), 2004); [EOL]     assertEquals(new YearMonthDay(2004, 6, 9), test); [EOL]     assertSame(test, result); [EOL] }
public void testMinusMonths_int() { [EOL]     YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance()); [EOL]     YearMonthDay result = test.minusMonths(1); [EOL]     YearMonthDay expected = new YearMonthDay(2002, 4, 3, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusMonths(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusMonths_int() { [EOL]     YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance()); [EOL]     YearMonthDay result = test.minusMonths(1); [EOL]     YearMonthDay expected = new YearMonthDay(2002, 4, 3, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusMonths(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusMonths_int() { [EOL]     YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance()); [EOL]     YearMonthDay result = test.minusMonths(1); [EOL]     YearMonthDay expected = new YearMonthDay(2002, 4, 3, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusMonths(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusMonths_int() { [EOL]     YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance()); [EOL]     YearMonthDay result = test.minusMonths(1); [EOL]     YearMonthDay expected = new YearMonthDay(2002, 4, 3, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusMonths(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusMonths_int() { [EOL]     YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance()); [EOL]     YearMonthDay result = test.minusMonths(1); [EOL]     YearMonthDay expected = new YearMonthDay(2002, 4, 3, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusMonths(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusMonths_int() { [EOL]     YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance()); [EOL]     YearMonthDay result = test.minusMonths(1); [EOL]     YearMonthDay expected = new YearMonthDay(2002, 4, 3, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusMonths(0); [EOL]     assertSame(test, result); [EOL] }
public void testProperty() { [EOL]     YearMonthDay test = new YearMonthDay(2005, 6, 9); [EOL]     assertEquals(test.year(), test.property(DateTimeFieldType.year())); [EOL]     assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(test.dayOfMonth(), test.property(DateTimeFieldType.dayOfMonth())); [EOL]     try { [EOL]         test.property(DateTimeFieldType.millisOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testToDateTimeAtCurrentTime() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     DateTime test = base.toDateTimeAtCurrentTime(); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime expected = new DateTime(dt.getMillis(), COPTIC_LONDON); [EOL]     expected = expected.year().setCopy(2005); [EOL]     expected = expected.monthOfYear().setCopy(6); [EOL]     expected = expected.dayOfMonth().setCopy(9); [EOL]     assertEquals(expected, test); [EOL] }
public void testToDateTimeAtCurrentTime() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     DateTime test = base.toDateTimeAtCurrentTime(); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime expected = new DateTime(dt.getMillis(), COPTIC_LONDON); [EOL]     expected = expected.year().setCopy(2005); [EOL]     expected = expected.monthOfYear().setCopy(6); [EOL]     expected = expected.dayOfMonth().setCopy(9); [EOL]     assertEquals(expected, test); [EOL] }
public void testToDateTimeAtCurrentTime() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     DateTime test = base.toDateTimeAtCurrentTime(); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime expected = new DateTime(dt.getMillis(), COPTIC_LONDON); [EOL]     expected = expected.year().setCopy(2005); [EOL]     expected = expected.monthOfYear().setCopy(6); [EOL]     expected = expected.dayOfMonth().setCopy(9); [EOL]     assertEquals(expected, test); [EOL] }
public void testToDateTimeAtCurrentTime() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     DateTime test = base.toDateTimeAtCurrentTime(); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime expected = new DateTime(dt.getMillis(), COPTIC_LONDON); [EOL]     expected = expected.year().setCopy(2005); [EOL]     expected = expected.monthOfYear().setCopy(6); [EOL]     expected = expected.dayOfMonth().setCopy(9); [EOL]     assertEquals(expected, test); [EOL] }
public void testToDateTimeAtCurrentTime() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     DateTime test = base.toDateTimeAtCurrentTime(); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime expected = new DateTime(dt.getMillis(), COPTIC_LONDON); [EOL]     expected = expected.year().setCopy(2005); [EOL]     expected = expected.monthOfYear().setCopy(6); [EOL]     expected = expected.dayOfMonth().setCopy(9); [EOL]     assertEquals(expected, test); [EOL] }
public void testToDateTimeAtCurrentTime() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     DateTime test = base.toDateTimeAtCurrentTime(); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime expected = new DateTime(dt.getMillis(), COPTIC_LONDON); [EOL]     expected = expected.year().setCopy(2005); [EOL]     expected = expected.monthOfYear().setCopy(6); [EOL]     expected = expected.dayOfMonth().setCopy(9); [EOL]     assertEquals(expected, test); [EOL] }
public void testToDateTimeAtCurrentTime() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     DateTime test = base.toDateTimeAtCurrentTime(); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime expected = new DateTime(dt.getMillis(), COPTIC_LONDON); [EOL]     expected = expected.year().setCopy(2005); [EOL]     expected = expected.monthOfYear().setCopy(6); [EOL]     expected = expected.dayOfMonth().setCopy(9); [EOL]     assertEquals(expected, test); [EOL] }
public void testToDateTimeAtCurrentTime() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     DateTime test = base.toDateTimeAtCurrentTime(); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime expected = new DateTime(dt.getMillis(), COPTIC_LONDON); [EOL]     expected = expected.year().setCopy(2005); [EOL]     expected = expected.monthOfYear().setCopy(6); [EOL]     expected = expected.dayOfMonth().setCopy(9); [EOL]     assertEquals(expected, test); [EOL] }
public void testToDateTimeAtCurrentTime() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     DateTime test = base.toDateTimeAtCurrentTime(); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime expected = new DateTime(dt.getMillis(), COPTIC_LONDON); [EOL]     expected = expected.year().setCopy(2005); [EOL]     expected = expected.monthOfYear().setCopy(6); [EOL]     expected = expected.dayOfMonth().setCopy(9); [EOL]     assertEquals(expected, test); [EOL] }
public void testToDateTimeAtCurrentTime() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     DateTime test = base.toDateTimeAtCurrentTime(); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime expected = new DateTime(dt.getMillis(), COPTIC_LONDON); [EOL]     expected = expected.year().setCopy(2005); [EOL]     expected = expected.monthOfYear().setCopy(6); [EOL]     expected = expected.dayOfMonth().setCopy(9); [EOL]     assertEquals(expected, test); [EOL] }
public void testToDateTimeAtCurrentTime() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     DateTime test = base.toDateTimeAtCurrentTime(); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime expected = new DateTime(dt.getMillis(), COPTIC_LONDON); [EOL]     expected = expected.year().setCopy(2005); [EOL]     expected = expected.monthOfYear().setCopy(6); [EOL]     expected = expected.dayOfMonth().setCopy(9); [EOL]     assertEquals(expected, test); [EOL] }
public void testPropertyAddYear() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.year().addToCopy(9); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1981, 6, 9); [EOL]     copy = test.year().addToCopy(0); [EOL]     check(copy, 1972, 6, 9); [EOL]     copy = test.year().addToCopy(292277023 - 1972); [EOL]     check(copy, 292277023, 6, 9); [EOL]     try { [EOL]         test.year().addToCopy(292278993 - 1972 + 1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 1972, 6, 9); [EOL]     copy = test.year().addToCopy(-1972); [EOL]     check(copy, 0, 6, 9); [EOL]     copy = test.year().addToCopy(-1973); [EOL]     check(copy, -1, 6, 9); [EOL]     try { [EOL]         test.year().addToCopy(-292275054 - 1972 - 1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 1972, 6, 9); [EOL] }
public void testPropertyAddYear() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.year().addToCopy(9); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1981, 6, 9); [EOL]     copy = test.year().addToCopy(0); [EOL]     check(copy, 1972, 6, 9); [EOL]     copy = test.year().addToCopy(292277023 - 1972); [EOL]     check(copy, 292277023, 6, 9); [EOL]     try { [EOL]         test.year().addToCopy(292278993 - 1972 + 1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 1972, 6, 9); [EOL]     copy = test.year().addToCopy(-1972); [EOL]     check(copy, 0, 6, 9); [EOL]     copy = test.year().addToCopy(-1973); [EOL]     check(copy, -1, 6, 9); [EOL]     try { [EOL]         test.year().addToCopy(-292275054 - 1972 - 1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 1972, 6, 9); [EOL] }
public void testPropertyWithMinimumValueDayOfMonth() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.dayOfMonth().withMinimumValue(); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 6, 1); [EOL] }
public void testPropertyWithMinimumValueDayOfMonth() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.dayOfMonth().withMinimumValue(); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 6, 1); [EOL] }
public void testConstructor_badconverterObject() throws Throwable { [EOL]     try { [EOL]         ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE); [EOL]         Instant test = new Instant(new Integer(0)); [EOL]         assertEquals(ISOChronology.getInstanceUTC(), test.getChronology()); [EOL]         assertEquals(0L, test.getMillis()); [EOL]     } finally { [EOL]         ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE); [EOL]     } [EOL] }
public void testConstructor_badconverterObject() throws Throwable { [EOL]     try { [EOL]         ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE); [EOL]         Instant test = new Instant(new Integer(0)); [EOL]         assertEquals(ISOChronology.getInstanceUTC(), test.getChronology()); [EOL]         assertEquals(0L, test.getMillis()); [EOL]     } finally { [EOL]         ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE); [EOL]     } [EOL] }
public void testFactoryFieldDifference5() throws Throwable { [EOL]     DateTimeFieldType[] types = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfWeek() }; [EOL]     Partial start = new Partial(types, new int[] { 1, 2, 3 }); [EOL]     Partial end = new Partial(types, new int[] { 1, 2, 3 }); [EOL]     try { [EOL]         Period.fieldDifference(start, end); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFormatSuffixPlural2() { [EOL]     PeriodFormatter f = builder.appendHours().appendSuffix(" hour", " hours").toFormatter(); [EOL]     assertEquals("5 hours", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 hours", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testConstructor_RP_RP2() throws Throwable { [EOL]     YearMonthDay dt1 = new YearMonthDay(2004, 6, 9); [EOL]     YearMonthDay dt2 = new YearMonthDay(2005, 5, 17); [EOL]     Period test = new Period(dt1, dt2); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(11, test.getMonths()); [EOL]     assertEquals(1, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testConstructor_RP_RP2() throws Throwable { [EOL]     YearMonthDay dt1 = new YearMonthDay(2004, 6, 9); [EOL]     YearMonthDay dt2 = new YearMonthDay(2005, 5, 17); [EOL]     Period test = new Period(dt1, dt2); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(11, test.getMonths()); [EOL]     assertEquals(1, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testConstructor_RP_RP2() throws Throwable { [EOL]     YearMonthDay dt1 = new YearMonthDay(2004, 6, 9); [EOL]     YearMonthDay dt2 = new YearMonthDay(2005, 5, 17); [EOL]     Period test = new Period(dt1, dt2); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(11, test.getMonths()); [EOL]     assertEquals(1, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testConstructor_RP_RP2() throws Throwable { [EOL]     YearMonthDay dt1 = new YearMonthDay(2004, 6, 9); [EOL]     YearMonthDay dt2 = new YearMonthDay(2005, 5, 17); [EOL]     Period test = new Period(dt1, dt2); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(11, test.getMonths()); [EOL]     assertEquals(1, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testConstructor_RP_RP_PeriodType2() throws Throwable { [EOL]     YearMonthDay dt1 = new YearMonthDay(2004, 6, 9); [EOL]     YearMonthDay dt2 = new YearMonthDay(2005, 5, 17); [EOL]     Period test = new Period(dt1, dt2, PeriodType.yearMonthDay()); [EOL]     assertEquals(PeriodType.yearMonthDay(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(11, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(8, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testConstructor_RP_RP_PeriodType2() throws Throwable { [EOL]     YearMonthDay dt1 = new YearMonthDay(2004, 6, 9); [EOL]     YearMonthDay dt2 = new YearMonthDay(2005, 5, 17); [EOL]     Period test = new Period(dt1, dt2, PeriodType.yearMonthDay()); [EOL]     assertEquals(PeriodType.yearMonthDay(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(11, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(8, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testConstructor_RP_RP_PeriodType2() throws Throwable { [EOL]     YearMonthDay dt1 = new YearMonthDay(2004, 6, 9); [EOL]     YearMonthDay dt2 = new YearMonthDay(2005, 5, 17); [EOL]     Period test = new Period(dt1, dt2, PeriodType.yearMonthDay()); [EOL]     assertEquals(PeriodType.yearMonthDay(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(11, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(8, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testConstructor_RP_RP_PeriodType2() throws Throwable { [EOL]     YearMonthDay dt1 = new YearMonthDay(2004, 6, 9); [EOL]     YearMonthDay dt2 = new YearMonthDay(2005, 5, 17); [EOL]     Period test = new Period(dt1, dt2, PeriodType.yearMonthDay()); [EOL]     assertEquals(PeriodType.yearMonthDay(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(11, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(8, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] }
public void testConstructor_RD_RI2() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     Duration dur = null; [EOL]     Period test = new Period(dur, dt1); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] }
public void testWithField2() { [EOL]     Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     try { [EOL]         test.withField(null, 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithField2() { [EOL]     Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     try { [EOL]         test.withField(null, 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithFieldAdded1() { [EOL]     Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     Period result = test.withFieldAdded(DurationFieldType.years(), 6); [EOL]     assertEquals(new Period(1, 2, 3, 4, 5, 6, 7, 8), test); [EOL]     assertEquals(new Period(7, 2, 3, 4, 5, 6, 7, 8), result); [EOL] }
public void testWithFieldAdded1() { [EOL]     Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     Period result = test.withFieldAdded(DurationFieldType.years(), 6); [EOL]     assertEquals(new Period(1, 2, 3, 4, 5, 6, 7, 8), test); [EOL]     assertEquals(new Period(7, 2, 3, 4, 5, 6, 7, 8), result); [EOL] }
public void testWithFieldAdded1() { [EOL]     Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     Period result = test.withFieldAdded(DurationFieldType.years(), 6); [EOL]     assertEquals(new Period(1, 2, 3, 4, 5, 6, 7, 8), test); [EOL]     assertEquals(new Period(7, 2, 3, 4, 5, 6, 7, 8), result); [EOL] }
public void testMinus() { [EOL]     Period base = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     Period baseDaysOnly = new Period(0, 0, 0, 10, 0, 0, 0, 0, PeriodType.days()); [EOL]     Period test = base.minus((ReadablePeriod) null); [EOL]     assertSame(base, test); [EOL]     test = base.minus(Period.years(10)); [EOL]     assertEquals(-9, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(3, test.getWeeks()); [EOL]     assertEquals(4, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL]     test = base.minus(Years.years(10)); [EOL]     assertEquals(-9, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(3, test.getWeeks()); [EOL]     assertEquals(4, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL]     test = base.minus(Period.days(10)); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(3, test.getWeeks()); [EOL]     assertEquals(-6, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL]     test = baseDaysOnly.minus(Period.years(0)); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(10, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL]     test = baseDaysOnly.minus(baseDaysOnly); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL]     try { [EOL]         baseDaysOnly.minus(Period.years(1)); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     try { [EOL]         Period.days(Integer.MAX_VALUE).minus(Period.days(-1)); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         Period.days(Integer.MIN_VALUE).minus(Period.days(1)); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMinus() { [EOL]     Period base = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     Period baseDaysOnly = new Period(0, 0, 0, 10, 0, 0, 0, 0, PeriodType.days()); [EOL]     Period test = base.minus((ReadablePeriod) null); [EOL]     assertSame(base, test); [EOL]     test = base.minus(Period.years(10)); [EOL]     assertEquals(-9, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(3, test.getWeeks()); [EOL]     assertEquals(4, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL]     test = base.minus(Years.years(10)); [EOL]     assertEquals(-9, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(3, test.getWeeks()); [EOL]     assertEquals(4, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL]     test = base.minus(Period.days(10)); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(3, test.getWeeks()); [EOL]     assertEquals(-6, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL]     test = baseDaysOnly.minus(Period.years(0)); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(10, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL]     test = baseDaysOnly.minus(baseDaysOnly); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL]     try { [EOL]         baseDaysOnly.minus(Period.years(1)); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     try { [EOL]         Period.days(Integer.MAX_VALUE).minus(Period.days(-1)); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         Period.days(Integer.MIN_VALUE).minus(Period.days(1)); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testNegated() { [EOL]     Period base = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     Period test = Period.ZERO.negated(); [EOL]     assertEquals(Period.ZERO, test); [EOL]     test = base.negated(); [EOL]     assertEquals(-1, test.getYears()); [EOL]     assertEquals(-2, test.getMonths()); [EOL]     assertEquals(-3, test.getWeeks()); [EOL]     assertEquals(-4, test.getDays()); [EOL]     assertEquals(-5, test.getHours()); [EOL]     assertEquals(-6, test.getMinutes()); [EOL]     assertEquals(-7, test.getSeconds()); [EOL]     assertEquals(-8, test.getMillis()); [EOL]     test = Period.days(Integer.MAX_VALUE).negated(); [EOL]     assertEquals(-Integer.MAX_VALUE, test.getDays()); [EOL]     try { [EOL]         Period.days(Integer.MIN_VALUE).negated(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testNegated() { [EOL]     Period base = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     Period test = Period.ZERO.negated(); [EOL]     assertEquals(Period.ZERO, test); [EOL]     test = base.negated(); [EOL]     assertEquals(-1, test.getYears()); [EOL]     assertEquals(-2, test.getMonths()); [EOL]     assertEquals(-3, test.getWeeks()); [EOL]     assertEquals(-4, test.getDays()); [EOL]     assertEquals(-5, test.getHours()); [EOL]     assertEquals(-6, test.getMinutes()); [EOL]     assertEquals(-7, test.getSeconds()); [EOL]     assertEquals(-8, test.getMillis()); [EOL]     test = Period.days(Integer.MAX_VALUE).negated(); [EOL]     assertEquals(-Integer.MAX_VALUE, test.getDays()); [EOL]     try { [EOL]         Period.days(Integer.MIN_VALUE).negated(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testNegated() { [EOL]     Period base = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     Period test = Period.ZERO.negated(); [EOL]     assertEquals(Period.ZERO, test); [EOL]     test = base.negated(); [EOL]     assertEquals(-1, test.getYears()); [EOL]     assertEquals(-2, test.getMonths()); [EOL]     assertEquals(-3, test.getWeeks()); [EOL]     assertEquals(-4, test.getDays()); [EOL]     assertEquals(-5, test.getHours()); [EOL]     assertEquals(-6, test.getMinutes()); [EOL]     assertEquals(-7, test.getSeconds()); [EOL]     assertEquals(-8, test.getMillis()); [EOL]     test = Period.days(Integer.MAX_VALUE).negated(); [EOL]     assertEquals(-Integer.MAX_VALUE, test.getDays()); [EOL]     try { [EOL]         Period.days(Integer.MIN_VALUE).negated(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testToStandardHours_years() { [EOL]     Period test = Period.years(1); [EOL]     try { [EOL]         test.toStandardHours(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.years(-1); [EOL]     try { [EOL]         test.toStandardHours(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.years(0); [EOL]     assertEquals(0, test.toStandardHours().getHours()); [EOL] }
public void testToStandardHours_years() { [EOL]     Period test = Period.years(1); [EOL]     try { [EOL]         test.toStandardHours(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.years(-1); [EOL]     try { [EOL]         test.toStandardHours(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.years(0); [EOL]     assertEquals(0, test.toStandardHours().getHours()); [EOL] }
public void testToStandardHours_years() { [EOL]     Period test = Period.years(1); [EOL]     try { [EOL]         test.toStandardHours(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.years(-1); [EOL]     try { [EOL]         test.toStandardHours(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.years(0); [EOL]     assertEquals(0, test.toStandardHours().getHours()); [EOL] }
public void testToStandardHours_years() { [EOL]     Period test = Period.years(1); [EOL]     try { [EOL]         test.toStandardHours(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.years(-1); [EOL]     try { [EOL]         test.toStandardHours(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.years(0); [EOL]     assertEquals(0, test.toStandardHours().getHours()); [EOL] }
public void testToStandardHours_years() { [EOL]     Period test = Period.years(1); [EOL]     try { [EOL]         test.toStandardHours(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.years(-1); [EOL]     try { [EOL]         test.toStandardHours(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.years(0); [EOL]     assertEquals(0, test.toStandardHours().getHours()); [EOL] }
public void testToStandardHours_years() { [EOL]     Period test = Period.years(1); [EOL]     try { [EOL]         test.toStandardHours(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.years(-1); [EOL]     try { [EOL]         test.toStandardHours(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.years(0); [EOL]     assertEquals(0, test.toStandardHours().getHours()); [EOL] }
public void testToStandardHours_years() { [EOL]     Period test = Period.years(1); [EOL]     try { [EOL]         test.toStandardHours(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.years(-1); [EOL]     try { [EOL]         test.toStandardHours(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.years(0); [EOL]     assertEquals(0, test.toStandardHours().getHours()); [EOL] }
public void testFactory_Zone() { [EOL]     assertEquals(TOKYO, IslamicChronology.getInstance(TOKYO).getZone()); [EOL]     assertEquals(PARIS, IslamicChronology.getInstance(PARIS).getZone()); [EOL]     assertEquals(LONDON, IslamicChronology.getInstance(null).getZone()); [EOL]     assertSame(IslamicChronology.class, IslamicChronology.getInstance(TOKYO).getClass()); [EOL] }
public void testFactory_Zone() { [EOL]     assertEquals(TOKYO, IslamicChronology.getInstance(TOKYO).getZone()); [EOL]     assertEquals(PARIS, IslamicChronology.getInstance(PARIS).getZone()); [EOL]     assertEquals(LONDON, IslamicChronology.getInstance(null).getZone()); [EOL]     assertSame(IslamicChronology.class, IslamicChronology.getInstance(TOKYO).getClass()); [EOL] }
public void testFactory_Zone() { [EOL]     assertEquals(TOKYO, IslamicChronology.getInstance(TOKYO).getZone()); [EOL]     assertEquals(PARIS, IslamicChronology.getInstance(PARIS).getZone()); [EOL]     assertEquals(LONDON, IslamicChronology.getInstance(null).getZone()); [EOL]     assertSame(IslamicChronology.class, IslamicChronology.getInstance(TOKYO).getClass()); [EOL] }
public void testEpoch() { [EOL]     DateTime epoch = new DateTime(1, 1, 1, 0, 0, 0, 0, ISLAMIC_UTC); [EOL]     DateTime expectedEpoch = new DateTime(622, 7, 16, 0, 0, 0, 0, JULIAN_UTC); [EOL]     assertEquals(expectedEpoch.getMillis(), epoch.getMillis()); [EOL] }
public void testEpoch() { [EOL]     DateTime epoch = new DateTime(1, 1, 1, 0, 0, 0, 0, ISLAMIC_UTC); [EOL]     DateTime expectedEpoch = new DateTime(622, 7, 16, 0, 0, 0, 0, JULIAN_UTC); [EOL]     assertEquals(expectedEpoch.getMillis(), epoch.getMillis()); [EOL] }
public void testEpoch() { [EOL]     DateTime epoch = new DateTime(1, 1, 1, 0, 0, 0, 0, ISLAMIC_UTC); [EOL]     DateTime expectedEpoch = new DateTime(622, 7, 16, 0, 0, 0, 0, JULIAN_UTC); [EOL]     assertEquals(expectedEpoch.getMillis(), epoch.getMillis()); [EOL] }
public void testEpoch() { [EOL]     DateTime epoch = new DateTime(1, 1, 1, 0, 0, 0, 0, ISLAMIC_UTC); [EOL]     DateTime expectedEpoch = new DateTime(622, 7, 16, 0, 0, 0, 0, JULIAN_UTC); [EOL]     assertEquals(expectedEpoch.getMillis(), epoch.getMillis()); [EOL] }
public void testEpoch() { [EOL]     DateTime epoch = new DateTime(1, 1, 1, 0, 0, 0, 0, ISLAMIC_UTC); [EOL]     DateTime expectedEpoch = new DateTime(622, 7, 16, 0, 0, 0, 0, JULIAN_UTC); [EOL]     assertEquals(expectedEpoch.getMillis(), epoch.getMillis()); [EOL] }
public void testEpoch() { [EOL]     DateTime epoch = new DateTime(1, 1, 1, 0, 0, 0, 0, ISLAMIC_UTC); [EOL]     DateTime expectedEpoch = new DateTime(622, 7, 16, 0, 0, 0, 0, JULIAN_UTC); [EOL]     assertEquals(expectedEpoch.getMillis(), epoch.getMillis()); [EOL] }
public void testEpoch() { [EOL]     DateTime epoch = new DateTime(1, 1, 1, 0, 0, 0, 0, ISLAMIC_UTC); [EOL]     DateTime expectedEpoch = new DateTime(622, 7, 16, 0, 0, 0, 0, JULIAN_UTC); [EOL]     assertEquals(expectedEpoch.getMillis(), epoch.getMillis()); [EOL] }
public void testEpoch() { [EOL]     DateTime epoch = new DateTime(1, 1, 1, 0, 0, 0, 0, ISLAMIC_UTC); [EOL]     DateTime expectedEpoch = new DateTime(622, 7, 16, 0, 0, 0, 0, JULIAN_UTC); [EOL]     assertEquals(expectedEpoch.getMillis(), epoch.getMillis()); [EOL] }
public void testLeapYearRulesConstructionInvalid() { [EOL]     try { [EOL]         new DateMidnight(1500, 2, 30, GJChronology.getInstanceUTC()); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException ex) { [EOL]     } [EOL] }
public void testLeapYearRulesConstructionInvalid() { [EOL]     try { [EOL]         new DateMidnight(1500, 2, 30, GJChronology.getInstanceUTC()); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException ex) { [EOL]     } [EOL] }
public void testLeapYearRulesConstructionInvalid() { [EOL]     try { [EOL]         new DateMidnight(1500, 2, 30, GJChronology.getInstanceUTC()); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException ex) { [EOL]     } [EOL] }
public void testLeapYearRulesConstructionInvalid() { [EOL]     try { [EOL]         new DateMidnight(1500, 2, 30, GJChronology.getInstanceUTC()); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException ex) { [EOL]     } [EOL] }
public void testLeapYearRulesConstructionInvalid() { [EOL]     try { [EOL]         new DateMidnight(1500, 2, 30, GJChronology.getInstanceUTC()); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException ex) { [EOL]     } [EOL] }
public void testLeapYearRulesConstructionInvalid() { [EOL]     try { [EOL]         new DateMidnight(1500, 2, 30, GJChronology.getInstanceUTC()); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException ex) { [EOL]     } [EOL] }
public void testLeapYearRulesConstructionInvalid() { [EOL]     try { [EOL]         new DateMidnight(1500, 2, 30, GJChronology.getInstanceUTC()); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException ex) { [EOL]     } [EOL] }
public void testToString() { [EOL]     assertEquals("GJChronology[Europe/London]", GJChronology.getInstance(LONDON).toString()); [EOL]     assertEquals("GJChronology[Asia/Tokyo]", GJChronology.getInstance(TOKYO).toString()); [EOL]     assertEquals("GJChronology[Europe/London]", GJChronology.getInstance().toString()); [EOL]     assertEquals("GJChronology[UTC]", GJChronology.getInstanceUTC().toString()); [EOL]     assertEquals("GJChronology[UTC,cutover=1970-01-01]", GJChronology.getInstance(DateTimeZone.UTC, 0L, 4).toString()); [EOL]     assertEquals("GJChronology[UTC,cutover=1970-01-01T00:00:00.001Z,mdfw=2]", GJChronology.getInstance(DateTimeZone.UTC, 1L, 2).toString()); [EOL] }
public void testToString() { [EOL]     assertEquals("GJChronology[Europe/London]", GJChronology.getInstance(LONDON).toString()); [EOL]     assertEquals("GJChronology[Asia/Tokyo]", GJChronology.getInstance(TOKYO).toString()); [EOL]     assertEquals("GJChronology[Europe/London]", GJChronology.getInstance().toString()); [EOL]     assertEquals("GJChronology[UTC]", GJChronology.getInstanceUTC().toString()); [EOL]     assertEquals("GJChronology[UTC,cutover=1970-01-01]", GJChronology.getInstance(DateTimeZone.UTC, 0L, 4).toString()); [EOL]     assertEquals("GJChronology[UTC,cutover=1970-01-01T00:00:00.001Z,mdfw=2]", GJChronology.getInstance(DateTimeZone.UTC, 1L, 2).toString()); [EOL] }
public void testGJCutover() { [EOL]     DateTime dt = new DateTime("1582-10-04", GJChronology.getInstanceUTC()); [EOL]     try { [EOL]         dt.dayOfMonth().setCopy(5); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.dayOfMonth(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("dayOfMonth", e.getFieldName()); [EOL]         assertEquals(new Integer(5), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("5", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     dt = new DateTime("1582-10-15", GJChronology.getInstanceUTC()); [EOL]     try { [EOL]         dt.dayOfMonth().setCopy(14); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.dayOfMonth(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("dayOfMonth", e.getFieldName()); [EOL]         assertEquals(new Integer(14), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("14", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL] }
public void testGJCutover() { [EOL]     DateTime dt = new DateTime("1582-10-04", GJChronology.getInstanceUTC()); [EOL]     try { [EOL]         dt.dayOfMonth().setCopy(5); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.dayOfMonth(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("dayOfMonth", e.getFieldName()); [EOL]         assertEquals(new Integer(5), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("5", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     dt = new DateTime("1582-10-15", GJChronology.getInstanceUTC()); [EOL]     try { [EOL]         dt.dayOfMonth().setCopy(14); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.dayOfMonth(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("dayOfMonth", e.getFieldName()); [EOL]         assertEquals(new Integer(14), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("14", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL] }
public void testGJCutover() { [EOL]     DateTime dt = new DateTime("1582-10-04", GJChronology.getInstanceUTC()); [EOL]     try { [EOL]         dt.dayOfMonth().setCopy(5); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.dayOfMonth(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("dayOfMonth", e.getFieldName()); [EOL]         assertEquals(new Integer(5), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("5", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     dt = new DateTime("1582-10-15", GJChronology.getInstanceUTC()); [EOL]     try { [EOL]         dt.dayOfMonth().setCopy(14); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.dayOfMonth(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("dayOfMonth", e.getFieldName()); [EOL]         assertEquals(new Integer(14), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("14", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL] }
public void testGJCutover() { [EOL]     DateTime dt = new DateTime("1582-10-04", GJChronology.getInstanceUTC()); [EOL]     try { [EOL]         dt.dayOfMonth().setCopy(5); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.dayOfMonth(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("dayOfMonth", e.getFieldName()); [EOL]         assertEquals(new Integer(5), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("5", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     dt = new DateTime("1582-10-15", GJChronology.getInstanceUTC()); [EOL]     try { [EOL]         dt.dayOfMonth().setCopy(14); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.dayOfMonth(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("dayOfMonth", e.getFieldName()); [EOL]         assertEquals(new Integer(14), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("14", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL] }
public void testGJCutover() { [EOL]     DateTime dt = new DateTime("1582-10-04", GJChronology.getInstanceUTC()); [EOL]     try { [EOL]         dt.dayOfMonth().setCopy(5); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.dayOfMonth(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("dayOfMonth", e.getFieldName()); [EOL]         assertEquals(new Integer(5), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("5", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     dt = new DateTime("1582-10-15", GJChronology.getInstanceUTC()); [EOL]     try { [EOL]         dt.dayOfMonth().setCopy(14); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.dayOfMonth(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("dayOfMonth", e.getFieldName()); [EOL]         assertEquals(new Integer(14), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("14", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL] }
public void testGJCutover() { [EOL]     DateTime dt = new DateTime("1582-10-04", GJChronology.getInstanceUTC()); [EOL]     try { [EOL]         dt.dayOfMonth().setCopy(5); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.dayOfMonth(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("dayOfMonth", e.getFieldName()); [EOL]         assertEquals(new Integer(5), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("5", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     dt = new DateTime("1582-10-15", GJChronology.getInstanceUTC()); [EOL]     try { [EOL]         dt.dayOfMonth().setCopy(14); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.dayOfMonth(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("dayOfMonth", e.getFieldName()); [EOL]         assertEquals(new Integer(14), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("14", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL] }
public void testParseLocalDate_yearOfEra() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YYYY-MM GG").withChronology(chrono).withLocale(Locale.UK); [EOL]     LocalDate date = new LocalDate(2005, 10, 1, chrono); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 AD")); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 CE")); [EOL]     date = new LocalDate(-2005, 10, 1, chrono); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 BC")); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 BCE")); [EOL] }
public void testParseLocalDate_yearOfEra() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YYYY-MM GG").withChronology(chrono).withLocale(Locale.UK); [EOL]     LocalDate date = new LocalDate(2005, 10, 1, chrono); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 AD")); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 CE")); [EOL]     date = new LocalDate(-2005, 10, 1, chrono); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 BC")); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 BCE")); [EOL] }
public void testParseLocalDate_yearOfEra() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YYYY-MM GG").withChronology(chrono).withLocale(Locale.UK); [EOL]     LocalDate date = new LocalDate(2005, 10, 1, chrono); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 AD")); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 CE")); [EOL]     date = new LocalDate(-2005, 10, 1, chrono); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 BC")); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 BCE")); [EOL] }
public void testParseLocalDate_yearOfEra() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YYYY-MM GG").withChronology(chrono).withLocale(Locale.UK); [EOL]     LocalDate date = new LocalDate(2005, 10, 1, chrono); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 AD")); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 CE")); [EOL]     date = new LocalDate(-2005, 10, 1, chrono); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 BC")); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 BCE")); [EOL] }
public void testParseLocalDate_yearOfEra() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YYYY-MM GG").withChronology(chrono).withLocale(Locale.UK); [EOL]     LocalDate date = new LocalDate(2005, 10, 1, chrono); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 AD")); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 CE")); [EOL]     date = new LocalDate(-2005, 10, 1, chrono); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 BC")); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 BCE")); [EOL] }
public void testParseLocalDate_yearOfEra() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YYYY-MM GG").withChronology(chrono).withLocale(Locale.UK); [EOL]     LocalDate date = new LocalDate(2005, 10, 1, chrono); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 AD")); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 CE")); [EOL]     date = new LocalDate(-2005, 10, 1, chrono); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 BC")); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 BCE")); [EOL] }
public void testParseLocalDate_yearOfEra() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YYYY-MM GG").withChronology(chrono).withLocale(Locale.UK); [EOL]     LocalDate date = new LocalDate(2005, 10, 1, chrono); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 AD")); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 CE")); [EOL]     date = new LocalDate(-2005, 10, 1, chrono); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 BC")); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 BCE")); [EOL] }
public void testParseLocalDate_yearOfEra() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YYYY-MM GG").withChronology(chrono).withLocale(Locale.UK); [EOL]     LocalDate date = new LocalDate(2005, 10, 1, chrono); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 AD")); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 CE")); [EOL]     date = new LocalDate(-2005, 10, 1, chrono); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 BC")); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 BCE")); [EOL] }
public void testCutoverAddYears() { [EOL]     testAdd("1582-01-01", DurationFieldType.years(), 1, "1583-01-01"); [EOL]     testAdd("1582-02-15", DurationFieldType.years(), 1, "1583-02-15"); [EOL]     testAdd("1582-02-28", DurationFieldType.years(), 1, "1583-02-28"); [EOL]     testAdd("1582-03-01", DurationFieldType.years(), 1, "1583-03-01"); [EOL]     testAdd("1582-09-30", DurationFieldType.years(), 1, "1583-09-30"); [EOL]     testAdd("1582-10-01", DurationFieldType.years(), 1, "1583-10-01"); [EOL]     testAdd("1582-10-04", DurationFieldType.years(), 1, "1583-10-04"); [EOL]     testAdd("1582-10-15", DurationFieldType.years(), 1, "1583-10-15"); [EOL]     testAdd("1582-10-16", DurationFieldType.years(), 1, "1583-10-16"); [EOL]     testAdd("1580-01-01", DurationFieldType.years(), 4, "1584-01-01"); [EOL]     testAdd("1580-02-29", DurationFieldType.years(), 4, "1584-02-29"); [EOL]     testAdd("1580-10-01", DurationFieldType.years(), 4, "1584-10-01"); [EOL]     testAdd("1580-10-10", DurationFieldType.years(), 4, "1584-10-10"); [EOL]     testAdd("1580-10-15", DurationFieldType.years(), 4, "1584-10-15"); [EOL]     testAdd("1580-12-31", DurationFieldType.years(), 4, "1584-12-31"); [EOL] }
public void testCutoverAddYears() { [EOL]     testAdd("1582-01-01", DurationFieldType.years(), 1, "1583-01-01"); [EOL]     testAdd("1582-02-15", DurationFieldType.years(), 1, "1583-02-15"); [EOL]     testAdd("1582-02-28", DurationFieldType.years(), 1, "1583-02-28"); [EOL]     testAdd("1582-03-01", DurationFieldType.years(), 1, "1583-03-01"); [EOL]     testAdd("1582-09-30", DurationFieldType.years(), 1, "1583-09-30"); [EOL]     testAdd("1582-10-01", DurationFieldType.years(), 1, "1583-10-01"); [EOL]     testAdd("1582-10-04", DurationFieldType.years(), 1, "1583-10-04"); [EOL]     testAdd("1582-10-15", DurationFieldType.years(), 1, "1583-10-15"); [EOL]     testAdd("1582-10-16", DurationFieldType.years(), 1, "1583-10-16"); [EOL]     testAdd("1580-01-01", DurationFieldType.years(), 4, "1584-01-01"); [EOL]     testAdd("1580-02-29", DurationFieldType.years(), 4, "1584-02-29"); [EOL]     testAdd("1580-10-01", DurationFieldType.years(), 4, "1584-10-01"); [EOL]     testAdd("1580-10-10", DurationFieldType.years(), 4, "1584-10-10"); [EOL]     testAdd("1580-10-15", DurationFieldType.years(), 4, "1584-10-15"); [EOL]     testAdd("1580-12-31", DurationFieldType.years(), 4, "1584-12-31"); [EOL] }
public void testCutoverAddYears() { [EOL]     testAdd("1582-01-01", DurationFieldType.years(), 1, "1583-01-01"); [EOL]     testAdd("1582-02-15", DurationFieldType.years(), 1, "1583-02-15"); [EOL]     testAdd("1582-02-28", DurationFieldType.years(), 1, "1583-02-28"); [EOL]     testAdd("1582-03-01", DurationFieldType.years(), 1, "1583-03-01"); [EOL]     testAdd("1582-09-30", DurationFieldType.years(), 1, "1583-09-30"); [EOL]     testAdd("1582-10-01", DurationFieldType.years(), 1, "1583-10-01"); [EOL]     testAdd("1582-10-04", DurationFieldType.years(), 1, "1583-10-04"); [EOL]     testAdd("1582-10-15", DurationFieldType.years(), 1, "1583-10-15"); [EOL]     testAdd("1582-10-16", DurationFieldType.years(), 1, "1583-10-16"); [EOL]     testAdd("1580-01-01", DurationFieldType.years(), 4, "1584-01-01"); [EOL]     testAdd("1580-02-29", DurationFieldType.years(), 4, "1584-02-29"); [EOL]     testAdd("1580-10-01", DurationFieldType.years(), 4, "1584-10-01"); [EOL]     testAdd("1580-10-10", DurationFieldType.years(), 4, "1584-10-10"); [EOL]     testAdd("1580-10-15", DurationFieldType.years(), 4, "1584-10-15"); [EOL]     testAdd("1580-12-31", DurationFieldType.years(), 4, "1584-12-31"); [EOL] }
public void testCutoverAddYears() { [EOL]     testAdd("1582-01-01", DurationFieldType.years(), 1, "1583-01-01"); [EOL]     testAdd("1582-02-15", DurationFieldType.years(), 1, "1583-02-15"); [EOL]     testAdd("1582-02-28", DurationFieldType.years(), 1, "1583-02-28"); [EOL]     testAdd("1582-03-01", DurationFieldType.years(), 1, "1583-03-01"); [EOL]     testAdd("1582-09-30", DurationFieldType.years(), 1, "1583-09-30"); [EOL]     testAdd("1582-10-01", DurationFieldType.years(), 1, "1583-10-01"); [EOL]     testAdd("1582-10-04", DurationFieldType.years(), 1, "1583-10-04"); [EOL]     testAdd("1582-10-15", DurationFieldType.years(), 1, "1583-10-15"); [EOL]     testAdd("1582-10-16", DurationFieldType.years(), 1, "1583-10-16"); [EOL]     testAdd("1580-01-01", DurationFieldType.years(), 4, "1584-01-01"); [EOL]     testAdd("1580-02-29", DurationFieldType.years(), 4, "1584-02-29"); [EOL]     testAdd("1580-10-01", DurationFieldType.years(), 4, "1584-10-01"); [EOL]     testAdd("1580-10-10", DurationFieldType.years(), 4, "1584-10-10"); [EOL]     testAdd("1580-10-15", DurationFieldType.years(), 4, "1584-10-15"); [EOL]     testAdd("1580-12-31", DurationFieldType.years(), 4, "1584-12-31"); [EOL] }
public void testConstructor_badconverterObject() throws Throwable { [EOL]     try { [EOL]         ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE); [EOL]         Instant test = new Instant(new Integer(0)); [EOL]         assertEquals(ISOChronology.getInstanceUTC(), test.getChronology()); [EOL]         assertEquals(0L, test.getMillis()); [EOL]     } finally { [EOL]         ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE); [EOL]     } [EOL] }
public void testToString() { [EOL]     assertEquals("Converter[java.lang.String]", StringConverter.INSTANCE.toString()); [EOL] }
public void testToString() { [EOL]     assertEquals("Converter[java.lang.String]", StringConverter.INSTANCE.toString()); [EOL] }
public void testConstructor_badconverterObject() throws Throwable { [EOL]     try { [EOL]         ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE); [EOL]         Instant test = new Instant(new Integer(0)); [EOL]         assertEquals(ISOChronology.getInstanceUTC(), test.getChronology()); [EOL]         assertEquals(0L, test.getMillis()); [EOL]     } finally { [EOL]         ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE); [EOL]     } [EOL] }
public void testConstructor_ObjectString2() throws Throwable { [EOL]     LocalDate test = new LocalDate("1972-037"); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1972, test.getYear()); [EOL]     assertEquals(2, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testConstructor_ObjectString2() throws Throwable { [EOL]     LocalDate test = new LocalDate("1972-037"); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1972, test.getYear()); [EOL]     assertEquals(2, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testSetIntoPeriod_Object8() throws Exception { [EOL]     MutablePeriod m = new MutablePeriod(); [EOL]     try { [EOL]         StringConverter.INSTANCE.setInto(m, "", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.setInto(m, "PXY", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.setInto(m, "PT0SXY", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.setInto(m, "P2Y4W3DT12H24M48SX", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testSetIntoPeriod_Object8() throws Exception { [EOL]     MutablePeriod m = new MutablePeriod(); [EOL]     try { [EOL]         StringConverter.INSTANCE.setInto(m, "", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.setInto(m, "PXY", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.setInto(m, "PT0SXY", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.setInto(m, "P2Y4W3DT12H24M48SX", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testSetIntoPeriod_Object8() throws Exception { [EOL]     MutablePeriod m = new MutablePeriod(); [EOL]     try { [EOL]         StringConverter.INSTANCE.setInto(m, "", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.setInto(m, "PXY", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.setInto(m, "PT0SXY", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.setInto(m, "P2Y4W3DT12H24M48SX", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testSetIntoIntervalEx_Object_Chronology3() throws Exception { [EOL]     MutableInterval m = new MutableInterval(-1000L, 1000L); [EOL]     try { [EOL]         StringConverter.INSTANCE.setInto(m, "P1Y/", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testSetIntoIntervalEx_Object_Chronology3() throws Exception { [EOL]     MutableInterval m = new MutableInterval(-1000L, 1000L); [EOL]     try { [EOL]         StringConverter.INSTANCE.setInto(m, "P1Y/", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testSetIntoIntervalEx_Object_Chronology3() throws Exception { [EOL]     MutableInterval m = new MutableInterval(-1000L, 1000L); [EOL]     try { [EOL]         StringConverter.INSTANCE.setInto(m, "P1Y/", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testSetIntoIntervalEx_Object_Chronology3() throws Exception { [EOL]     MutableInterval m = new MutableInterval(-1000L, 1000L); [EOL]     try { [EOL]         StringConverter.INSTANCE.setInto(m, "P1Y/", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testSetIntoIntervalEx_Object_Chronology3() throws Exception { [EOL]     MutableInterval m = new MutableInterval(-1000L, 1000L); [EOL]     try { [EOL]         StringConverter.INSTANCE.setInto(m, "P1Y/", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testSetIntoIntervalEx_Object_Chronology3() throws Exception { [EOL]     MutableInterval m = new MutableInterval(-1000L, 1000L); [EOL]     try { [EOL]         StringConverter.INSTANCE.setInto(m, "P1Y/", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testToString() { [EOL]     assertEquals("Converter[java.lang.String]", StringConverter.INSTANCE.toString()); [EOL] }
public void testConstructor_badconverterObject() throws Throwable { [EOL]     try { [EOL]         ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE); [EOL]         Instant test = new Instant(new Integer(0)); [EOL]         assertEquals(ISOChronology.getInstanceUTC(), test.getChronology()); [EOL]         assertEquals(0L, test.getMillis()); [EOL]     } finally { [EOL]         ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE); [EOL]     } [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatAppend_PrinterParserThenClear() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, null).append(null, parser); [EOL]     assertNull(bld.toPrinter()); [EOL]     assertNull(bld.toParser()); [EOL]     bld.clear(); [EOL]     bld.appendMonths(); [EOL]     assertNotNull(bld.toPrinter()); [EOL]     assertNotNull(bld.toParser()); [EOL] }
public void testFormatAppend_PrinterParserThenClear() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, null).append(null, parser); [EOL]     assertNull(bld.toPrinter()); [EOL]     assertNull(bld.toParser()); [EOL]     bld.clear(); [EOL]     bld.appendMonths(); [EOL]     assertNotNull(bld.toPrinter()); [EOL]     assertNotNull(bld.toParser()); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixPlural2() { [EOL]     PeriodFormatter f = builder.appendHours().appendSuffix(" hour", " hours").toFormatter(); [EOL]     assertEquals("5 hours", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 hours", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixPlural2() { [EOL]     PeriodFormatter f = builder.appendHours().appendSuffix(" hour", " hours").toFormatter(); [EOL]     assertEquals("5 hours", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 hours", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixPlural2() { [EOL]     PeriodFormatter f = builder.appendHours().appendSuffix(" hour", " hours").toFormatter(); [EOL]     assertEquals("5 hours", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 hours", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixPlural2() { [EOL]     PeriodFormatter f = builder.appendHours().appendSuffix(" hour", " hours").toFormatter(); [EOL]     assertEquals("5 hours", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 hours", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixPlural2() { [EOL]     PeriodFormatter f = builder.appendHours().appendSuffix(" hour", " hours").toFormatter(); [EOL]     assertEquals("5 hours", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 hours", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixPlural2() { [EOL]     PeriodFormatter f = builder.appendHours().appendSuffix(" hour", " hours").toFormatter(); [EOL]     assertEquals("5 hours", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 hours", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixPlural2() { [EOL]     PeriodFormatter f = builder.appendHours().appendSuffix(" hour", " hours").toFormatter(); [EOL]     assertEquals("5 hours", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 hours", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixPlural2() { [EOL]     PeriodFormatter f = builder.appendHours().appendSuffix(" hour", " hours").toFormatter(); [EOL]     assertEquals("5 hours", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 hours", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testPropertyEqualsHashCodeLenient() { [EOL]     DateTime test1 = new DateTime(1970, 6, 9, 0, 0, 0, 0, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     DateTime test2 = new DateTime(1970, 6, 9, 0, 0, 0, 0, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL] }
public void testForStyle_mediumTime() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.mediumTime(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("-M"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getTimeInstance(DateFormat.MEDIUM, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getTimeInstance(DateFormat.MEDIUM, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getTimeInstance(DateFormat.MEDIUM, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL] }
public void testFormat_shortBasicParse() { [EOL]     DateTime dt = new DateTime(2004, 3, 9, 0, 0, 0, 0); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyMMdd"); [EOL]     assertEquals(dt, f.parseDateTime("040309")); [EOL]     try { [EOL]         assertEquals(dt, f.parseDateTime("20040309")); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = DateTimeFormat.forPattern("yy/MM/dd"); [EOL]     assertEquals(dt, f.parseDateTime("04/03/09")); [EOL]     assertEquals(dt, f.parseDateTime("2004/03/09")); [EOL] }
public void testFormat_year_long() { [EOL]     DateTime dt = new DateTime(278004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyyy"); [EOL]     assertEquals(dt.toString(), "278004", f.print(dt)); [EOL]     f = DateTimeFormat.forPattern("yyyyMMdd"); [EOL]     assertEquals(dt.toString(), "2780040609", f.print(dt)); [EOL]     f = DateTimeFormat.forPattern("yyyyddMM"); [EOL]     assertEquals(dt.toString(), "2780040906", f.print(dt)); [EOL] }
public void testFormat_year_long() { [EOL]     DateTime dt = new DateTime(278004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyyy"); [EOL]     assertEquals(dt.toString(), "278004", f.print(dt)); [EOL]     f = DateTimeFormat.forPattern("yyyyMMdd"); [EOL]     assertEquals(dt.toString(), "2780040609", f.print(dt)); [EOL]     f = DateTimeFormat.forPattern("yyyyddMM"); [EOL]     assertEquals(dt.toString(), "2780040906", f.print(dt)); [EOL] }
public void testFormat_year_long() { [EOL]     DateTime dt = new DateTime(278004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyyy"); [EOL]     assertEquals(dt.toString(), "278004", f.print(dt)); [EOL]     f = DateTimeFormat.forPattern("yyyyMMdd"); [EOL]     assertEquals(dt.toString(), "2780040609", f.print(dt)); [EOL]     f = DateTimeFormat.forPattern("yyyyddMM"); [EOL]     assertEquals(dt.toString(), "2780040906", f.print(dt)); [EOL] }
public void testFormat_year_long() { [EOL]     DateTime dt = new DateTime(278004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyyy"); [EOL]     assertEquals(dt.toString(), "278004", f.print(dt)); [EOL]     f = DateTimeFormat.forPattern("yyyyMMdd"); [EOL]     assertEquals(dt.toString(), "2780040609", f.print(dt)); [EOL]     f = DateTimeFormat.forPattern("yyyyddMM"); [EOL]     assertEquals(dt.toString(), "2780040906", f.print(dt)); [EOL] }
public void testForStyle_mediumTime() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.mediumTime(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("-M"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getTimeInstance(DateFormat.MEDIUM, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getTimeInstance(DateFormat.MEDIUM, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getTimeInstance(DateFormat.MEDIUM, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL] }
public void testForStyle_mediumTime() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.mediumTime(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("-M"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getTimeInstance(DateFormat.MEDIUM, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getTimeInstance(DateFormat.MEDIUM, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getTimeInstance(DateFormat.MEDIUM, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL] }
public void testForStyle_mediumTime() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.mediumTime(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("-M"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getTimeInstance(DateFormat.MEDIUM, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getTimeInstance(DateFormat.MEDIUM, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getTimeInstance(DateFormat.MEDIUM, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL] }
public void testFactory_standardHours_long() throws Throwable { [EOL]     Duration test = Duration.standardHours(1); [EOL]     assertEquals(60L * 60L * 1000L, test.getMillis()); [EOL]     test = Duration.standardHours(2); [EOL]     assertEquals(2L * 60L * 60L * 1000L, test.getMillis()); [EOL]     test = Duration.standardHours(0); [EOL]     assertSame(Duration.ZERO, test); [EOL] }
public void testFactory_standardHours_long() throws Throwable { [EOL]     Duration test = Duration.standardHours(1); [EOL]     assertEquals(60L * 60L * 1000L, test.getMillis()); [EOL]     test = Duration.standardHours(2); [EOL]     assertEquals(2L * 60L * 60L * 1000L, test.getMillis()); [EOL]     test = Duration.standardHours(0); [EOL]     assertSame(Duration.ZERO, test); [EOL] }
public void testFactory_standardHours_long() throws Throwable { [EOL]     Duration test = Duration.standardHours(1); [EOL]     assertEquals(60L * 60L * 1000L, test.getMillis()); [EOL]     test = Duration.standardHours(2); [EOL]     assertEquals(2L * 60L * 60L * 1000L, test.getMillis()); [EOL]     test = Duration.standardHours(0); [EOL]     assertSame(Duration.ZERO, test); [EOL] }
public void testToDurationTo() { [EOL]     Period test = new Period(123L); [EOL]     assertEquals(new Duration(123L), test.toDurationTo(new Instant(123L))); [EOL] }
public void testMinus_RD1() { [EOL]     Duration test = new Duration(123L); [EOL]     Duration result = test.minus(new Duration(8000L)); [EOL]     assertEquals(123L - 8000L, result.getMillis()); [EOL] }
public void testMinus_RD1() { [EOL]     Duration test = new Duration(123L); [EOL]     Duration result = test.minus(new Duration(8000L)); [EOL]     assertEquals(123L - 8000L, result.getMillis()); [EOL] }
public void testDividedBy_long2() { [EOL]     Duration test = new Duration(123L); [EOL]     Duration result = test.dividedBy(1L); [EOL]     assertSame(test, result); [EOL] }
public void testDividedBy_long2() { [EOL]     Duration test = new Duration(123L); [EOL]     Duration result = test.dividedBy(1L); [EOL]     assertSame(test, result); [EOL] }
public void testFormatAlternateExtendedWithWeeks() { [EOL]     Period p = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     assertEquals("P0001-W03-04T05:06:07.008", ISOPeriodFormat.alternateExtendedWithWeeks().print(p)); [EOL]     p = new Period(1, 2, 3, 4, 5, 6, 7, 0); [EOL]     assertEquals("P0001-W03-04T05:06:07", ISOPeriodFormat.alternateExtendedWithWeeks().print(p)); [EOL]     p = new Period(0); [EOL]     assertEquals("P0000-W00-00T00:00:00", ISOPeriodFormat.alternateExtendedWithWeeks().print(p)); [EOL]     p = new Period(0, PeriodType.standard().withMillisRemoved().withSecondsRemoved()); [EOL]     assertEquals("P0000-W00-00T00:00:00", ISOPeriodFormat.alternateExtendedWithWeeks().print(p)); [EOL]     assertEquals("P0001-W00-04T05:06:07.008", ISOPeriodFormat.alternateExtendedWithWeeks().print(YEAR_DAY_PERIOD)); [EOL]     assertEquals("P0000-W00-00T00:00:00", ISOPeriodFormat.alternateExtendedWithWeeks().print(EMPTY_YEAR_DAY_PERIOD)); [EOL]     assertEquals("P0001-W03-04T00:00:00", ISOPeriodFormat.alternateExtendedWithWeeks().print(DATE_PERIOD)); [EOL]     assertEquals("P0000-W00-00T05:06:07.008", ISOPeriodFormat.alternateExtendedWithWeeks().print(TIME_PERIOD)); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testWithZoneRetainFields_DateTimeZone() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateMidnight result = test.withZoneRetainFields(PARIS); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_PARIS, result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertEquals(TEST_TIME1_PARIS, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_LONDON, result.getMillis()); [EOL]     assertEquals(GREGORIAN_DEFAULT, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, new MockNullZoneChronology()); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testWithZoneRetainFields_DateTimeZone() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateMidnight result = test.withZoneRetainFields(PARIS); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_PARIS, result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertEquals(TEST_TIME1_PARIS, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_LONDON, result.getMillis()); [EOL]     assertEquals(GREGORIAN_DEFAULT, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, new MockNullZoneChronology()); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL] }
public void testWithZoneRetainFields_DateTimeZone() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateMidnight result = test.withZoneRetainFields(PARIS); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_PARIS, result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertEquals(TEST_TIME1_PARIS, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_LONDON, result.getMillis()); [EOL]     assertEquals(GREGORIAN_DEFAULT, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, new MockNullZoneChronology()); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL] }
public void testWithZoneRetainFields_DateTimeZone() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateMidnight result = test.withZoneRetainFields(PARIS); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_PARIS, result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertEquals(TEST_TIME1_PARIS, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_LONDON, result.getMillis()); [EOL]     assertEquals(GREGORIAN_DEFAULT, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, new MockNullZoneChronology()); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL] }
public void testWithZoneRetainFields_DateTimeZone() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateMidnight result = test.withZoneRetainFields(PARIS); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_PARIS, result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertEquals(TEST_TIME1_PARIS, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_LONDON, result.getMillis()); [EOL]     assertEquals(GREGORIAN_DEFAULT, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, new MockNullZoneChronology()); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testWithZoneRetainFields_DateTimeZone() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateMidnight result = test.withZoneRetainFields(PARIS); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_PARIS, result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertEquals(TEST_TIME1_PARIS, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_LONDON, result.getMillis()); [EOL]     assertEquals(GREGORIAN_DEFAULT, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, new MockNullZoneChronology()); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void test_constructor() { [EOL]     try { [EOL]         new ScaledDurationField(null, DurationFieldType.minutes(), 10); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new ScaledDurationField(MillisDurationField.INSTANCE, null, 10); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.minutes(), 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.minutes(), 1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void test_getValueAsLong_long() { [EOL]     assertEquals(0L, iField.getValueAsLong(0L)); [EOL]     assertEquals(12345678L / 90, iField.getValueAsLong(12345678L)); [EOL]     assertEquals(-1234 / 90L, iField.getValueAsLong(-1234L)); [EOL]     assertEquals(LONG_INTEGER_MAX + 1L, iField.getValueAsLong(LONG_INTEGER_MAX * 90L + 90L)); [EOL] }
public void test_add_long_int() { [EOL]     assertEquals(567L, iField.add(567L, 0)); [EOL]     assertEquals(567L + 1234L * 90L, iField.add(567L, 1234)); [EOL]     assertEquals(567L - 1234L * 90L, iField.add(567L, -1234)); [EOL]     try { [EOL]         iField.add(LONG_MAX, 1); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testCutoverAddYears() { [EOL]     testAdd("1582-01-01", DurationFieldType.years(), 1, "1583-01-01"); [EOL]     testAdd("1582-02-15", DurationFieldType.years(), 1, "1583-02-15"); [EOL]     testAdd("1582-02-28", DurationFieldType.years(), 1, "1583-02-28"); [EOL]     testAdd("1582-03-01", DurationFieldType.years(), 1, "1583-03-01"); [EOL]     testAdd("1582-09-30", DurationFieldType.years(), 1, "1583-09-30"); [EOL]     testAdd("1582-10-01", DurationFieldType.years(), 1, "1583-10-01"); [EOL]     testAdd("1582-10-04", DurationFieldType.years(), 1, "1583-10-04"); [EOL]     testAdd("1582-10-15", DurationFieldType.years(), 1, "1583-10-15"); [EOL]     testAdd("1582-10-16", DurationFieldType.years(), 1, "1583-10-16"); [EOL]     testAdd("1580-01-01", DurationFieldType.years(), 4, "1584-01-01"); [EOL]     testAdd("1580-02-29", DurationFieldType.years(), 4, "1584-02-29"); [EOL]     testAdd("1580-10-01", DurationFieldType.years(), 4, "1584-10-01"); [EOL]     testAdd("1580-10-10", DurationFieldType.years(), 4, "1584-10-10"); [EOL]     testAdd("1580-10-15", DurationFieldType.years(), 4, "1584-10-15"); [EOL]     testAdd("1580-12-31", DurationFieldType.years(), 4, "1584-12-31"); [EOL] }
public void testFactory_Zone() { [EOL]     assertEquals(TOKYO, ISOChronology.getInstance(TOKYO).getZone()); [EOL]     assertEquals(PARIS, ISOChronology.getInstance(PARIS).getZone()); [EOL]     assertEquals(LONDON, ISOChronology.getInstance(null).getZone()); [EOL]     assertSame(ISOChronology.class, ISOChronology.getInstance(TOKYO).getClass()); [EOL] }
public void testFactory_Zone() { [EOL]     assertEquals(TOKYO, ISOChronology.getInstance(TOKYO).getZone()); [EOL]     assertEquals(PARIS, ISOChronology.getInstance(PARIS).getZone()); [EOL]     assertEquals(LONDON, ISOChronology.getInstance(null).getZone()); [EOL]     assertSame(ISOChronology.class, ISOChronology.getInstance(TOKYO).getClass()); [EOL] }
public void testFactory_Zone() { [EOL]     assertEquals(TOKYO, ISOChronology.getInstance(TOKYO).getZone()); [EOL]     assertEquals(PARIS, ISOChronology.getInstance(PARIS).getZone()); [EOL]     assertEquals(LONDON, ISOChronology.getInstance(null).getZone()); [EOL]     assertSame(ISOChronology.class, ISOChronology.getInstance(TOKYO).getClass()); [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testSerializedISOChronology() throws Exception { [EOL]     ISOChronology test = ISOChronology.getInstance(PARIS); [EOL]     loadAndCompare(test, "ISOChronology", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedISOChronology() throws Exception { [EOL]     ISOChronology test = ISOChronology.getInstance(PARIS); [EOL]     loadAndCompare(test, "ISOChronology", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedISOChronology() throws Exception { [EOL]     ISOChronology test = ISOChronology.getInstance(PARIS); [EOL]     loadAndCompare(test, "ISOChronology", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedISOChronology() throws Exception { [EOL]     ISOChronology test = ISOChronology.getInstance(PARIS); [EOL]     loadAndCompare(test, "ISOChronology", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedISOChronology() throws Exception { [EOL]     ISOChronology test = ISOChronology.getInstance(PARIS); [EOL]     loadAndCompare(test, "ISOChronology", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedISOChronology() throws Exception { [EOL]     ISOChronology test = ISOChronology.getInstance(PARIS); [EOL]     loadAndCompare(test, "ISOChronology", true); [EOL]     inlineCompare(test, true); [EOL] }
public void test_constructor() { [EOL]     try { [EOL]         new ScaledDurationField(null, DurationFieldType.minutes(), 10); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new ScaledDurationField(MillisDurationField.INSTANCE, null, 10); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.minutes(), 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.minutes(), 1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void test_constructor() { [EOL]     try { [EOL]         new ScaledDurationField(null, DurationFieldType.minutes(), 10); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new ScaledDurationField(MillisDurationField.INSTANCE, null, 10); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.minutes(), 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.minutes(), 1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void test_toString() { [EOL]     assertEquals("DurationField[minutes]", iField.toString()); [EOL] }
public void testFactory_Zone() { [EOL]     assertEquals(TOKYO, CopticChronology.getInstance(TOKYO).getZone()); [EOL]     assertEquals(PARIS, CopticChronology.getInstance(PARIS).getZone()); [EOL]     assertEquals(LONDON, CopticChronology.getInstance(null).getZone()); [EOL]     assertSame(CopticChronology.class, CopticChronology.getInstance(TOKYO).getClass()); [EOL] }
public void testFactory_Zone() { [EOL]     assertEquals(TOKYO, CopticChronology.getInstance(TOKYO).getZone()); [EOL]     assertEquals(PARIS, CopticChronology.getInstance(PARIS).getZone()); [EOL]     assertEquals(LONDON, CopticChronology.getInstance(null).getZone()); [EOL]     assertSame(CopticChronology.class, CopticChronology.getInstance(TOKYO).getClass()); [EOL] }
public void testFactory_Zone() { [EOL]     assertEquals(TOKYO, CopticChronology.getInstance(TOKYO).getZone()); [EOL]     assertEquals(PARIS, CopticChronology.getInstance(PARIS).getZone()); [EOL]     assertEquals(LONDON, CopticChronology.getInstance(null).getZone()); [EOL]     assertSame(CopticChronology.class, CopticChronology.getInstance(TOKYO).getClass()); [EOL] }
public void testFactory_Zone() { [EOL]     assertEquals(TOKYO, CopticChronology.getInstance(TOKYO).getZone()); [EOL]     assertEquals(PARIS, CopticChronology.getInstance(PARIS).getZone()); [EOL]     assertEquals(LONDON, CopticChronology.getInstance(null).getZone()); [EOL]     assertSame(CopticChronology.class, CopticChronology.getInstance(TOKYO).getClass()); [EOL] }
public void testDurationFields() { [EOL]     final CopticChronology coptic = CopticChronology.getInstance(); [EOL]     assertEquals("eras", coptic.eras().getName()); [EOL]     assertEquals("centuries", coptic.centuries().getName()); [EOL]     assertEquals("years", coptic.years().getName()); [EOL]     assertEquals("weekyears", coptic.weekyears().getName()); [EOL]     assertEquals("months", coptic.months().getName()); [EOL]     assertEquals("weeks", coptic.weeks().getName()); [EOL]     assertEquals("days", coptic.days().getName()); [EOL]     assertEquals("halfdays", coptic.halfdays().getName()); [EOL]     assertEquals("hours", coptic.hours().getName()); [EOL]     assertEquals("minutes", coptic.minutes().getName()); [EOL]     assertEquals("seconds", coptic.seconds().getName()); [EOL]     assertEquals("millis", coptic.millis().getName()); [EOL]     assertEquals(false, coptic.eras().isSupported()); [EOL]     assertEquals(true, coptic.centuries().isSupported()); [EOL]     assertEquals(true, coptic.years().isSupported()); [EOL]     assertEquals(true, coptic.weekyears().isSupported()); [EOL]     assertEquals(true, coptic.months().isSupported()); [EOL]     assertEquals(true, coptic.weeks().isSupported()); [EOL]     assertEquals(true, coptic.days().isSupported()); [EOL]     assertEquals(true, coptic.halfdays().isSupported()); [EOL]     assertEquals(true, coptic.hours().isSupported()); [EOL]     assertEquals(true, coptic.minutes().isSupported()); [EOL]     assertEquals(true, coptic.seconds().isSupported()); [EOL]     assertEquals(true, coptic.millis().isSupported()); [EOL]     assertEquals(false, coptic.centuries().isPrecise()); [EOL]     assertEquals(false, coptic.years().isPrecise()); [EOL]     assertEquals(false, coptic.weekyears().isPrecise()); [EOL]     assertEquals(false, coptic.months().isPrecise()); [EOL]     assertEquals(false, coptic.weeks().isPrecise()); [EOL]     assertEquals(false, coptic.days().isPrecise()); [EOL]     assertEquals(false, coptic.halfdays().isPrecise()); [EOL]     assertEquals(true, coptic.hours().isPrecise()); [EOL]     assertEquals(true, coptic.minutes().isPrecise()); [EOL]     assertEquals(true, coptic.seconds().isPrecise()); [EOL]     assertEquals(true, coptic.millis().isPrecise()); [EOL]     final CopticChronology copticUTC = CopticChronology.getInstanceUTC(); [EOL]     assertEquals(false, copticUTC.centuries().isPrecise()); [EOL]     assertEquals(false, copticUTC.years().isPrecise()); [EOL]     assertEquals(false, copticUTC.weekyears().isPrecise()); [EOL]     assertEquals(false, copticUTC.months().isPrecise()); [EOL]     assertEquals(true, copticUTC.weeks().isPrecise()); [EOL]     assertEquals(true, copticUTC.days().isPrecise()); [EOL]     assertEquals(true, copticUTC.halfdays().isPrecise()); [EOL]     assertEquals(true, copticUTC.hours().isPrecise()); [EOL]     assertEquals(true, copticUTC.minutes().isPrecise()); [EOL]     assertEquals(true, copticUTC.seconds().isPrecise()); [EOL]     assertEquals(true, copticUTC.millis().isPrecise()); [EOL]     final DateTimeZone gmt = DateTimeZone.forID("Etc/GMT"); [EOL]     final CopticChronology copticGMT = CopticChronology.getInstance(gmt); [EOL]     assertEquals(false, copticGMT.centuries().isPrecise()); [EOL]     assertEquals(false, copticGMT.years().isPrecise()); [EOL]     assertEquals(false, copticGMT.weekyears().isPrecise()); [EOL]     assertEquals(false, copticGMT.months().isPrecise()); [EOL]     assertEquals(true, copticGMT.weeks().isPrecise()); [EOL]     assertEquals(true, copticGMT.days().isPrecise()); [EOL]     assertEquals(true, copticGMT.halfdays().isPrecise()); [EOL]     assertEquals(true, copticGMT.hours().isPrecise()); [EOL]     assertEquals(true, copticGMT.minutes().isPrecise()); [EOL]     assertEquals(true, copticGMT.seconds().isPrecise()); [EOL]     assertEquals(true, copticGMT.millis().isPrecise()); [EOL] }
public void testDurationFields() { [EOL]     final CopticChronology coptic = CopticChronology.getInstance(); [EOL]     assertEquals("eras", coptic.eras().getName()); [EOL]     assertEquals("centuries", coptic.centuries().getName()); [EOL]     assertEquals("years", coptic.years().getName()); [EOL]     assertEquals("weekyears", coptic.weekyears().getName()); [EOL]     assertEquals("months", coptic.months().getName()); [EOL]     assertEquals("weeks", coptic.weeks().getName()); [EOL]     assertEquals("days", coptic.days().getName()); [EOL]     assertEquals("halfdays", coptic.halfdays().getName()); [EOL]     assertEquals("hours", coptic.hours().getName()); [EOL]     assertEquals("minutes", coptic.minutes().getName()); [EOL]     assertEquals("seconds", coptic.seconds().getName()); [EOL]     assertEquals("millis", coptic.millis().getName()); [EOL]     assertEquals(false, coptic.eras().isSupported()); [EOL]     assertEquals(true, coptic.centuries().isSupported()); [EOL]     assertEquals(true, coptic.years().isSupported()); [EOL]     assertEquals(true, coptic.weekyears().isSupported()); [EOL]     assertEquals(true, coptic.months().isSupported()); [EOL]     assertEquals(true, coptic.weeks().isSupported()); [EOL]     assertEquals(true, coptic.days().isSupported()); [EOL]     assertEquals(true, coptic.halfdays().isSupported()); [EOL]     assertEquals(true, coptic.hours().isSupported()); [EOL]     assertEquals(true, coptic.minutes().isSupported()); [EOL]     assertEquals(true, coptic.seconds().isSupported()); [EOL]     assertEquals(true, coptic.millis().isSupported()); [EOL]     assertEquals(false, coptic.centuries().isPrecise()); [EOL]     assertEquals(false, coptic.years().isPrecise()); [EOL]     assertEquals(false, coptic.weekyears().isPrecise()); [EOL]     assertEquals(false, coptic.months().isPrecise()); [EOL]     assertEquals(false, coptic.weeks().isPrecise()); [EOL]     assertEquals(false, coptic.days().isPrecise()); [EOL]     assertEquals(false, coptic.halfdays().isPrecise()); [EOL]     assertEquals(true, coptic.hours().isPrecise()); [EOL]     assertEquals(true, coptic.minutes().isPrecise()); [EOL]     assertEquals(true, coptic.seconds().isPrecise()); [EOL]     assertEquals(true, coptic.millis().isPrecise()); [EOL]     final CopticChronology copticUTC = CopticChronology.getInstanceUTC(); [EOL]     assertEquals(false, copticUTC.centuries().isPrecise()); [EOL]     assertEquals(false, copticUTC.years().isPrecise()); [EOL]     assertEquals(false, copticUTC.weekyears().isPrecise()); [EOL]     assertEquals(false, copticUTC.months().isPrecise()); [EOL]     assertEquals(true, copticUTC.weeks().isPrecise()); [EOL]     assertEquals(true, copticUTC.days().isPrecise()); [EOL]     assertEquals(true, copticUTC.halfdays().isPrecise()); [EOL]     assertEquals(true, copticUTC.hours().isPrecise()); [EOL]     assertEquals(true, copticUTC.minutes().isPrecise()); [EOL]     assertEquals(true, copticUTC.seconds().isPrecise()); [EOL]     assertEquals(true, copticUTC.millis().isPrecise()); [EOL]     final DateTimeZone gmt = DateTimeZone.forID("Etc/GMT"); [EOL]     final CopticChronology copticGMT = CopticChronology.getInstance(gmt); [EOL]     assertEquals(false, copticGMT.centuries().isPrecise()); [EOL]     assertEquals(false, copticGMT.years().isPrecise()); [EOL]     assertEquals(false, copticGMT.weekyears().isPrecise()); [EOL]     assertEquals(false, copticGMT.months().isPrecise()); [EOL]     assertEquals(true, copticGMT.weeks().isPrecise()); [EOL]     assertEquals(true, copticGMT.days().isPrecise()); [EOL]     assertEquals(true, copticGMT.halfdays().isPrecise()); [EOL]     assertEquals(true, copticGMT.hours().isPrecise()); [EOL]     assertEquals(true, copticGMT.minutes().isPrecise()); [EOL]     assertEquals(true, copticGMT.seconds().isPrecise()); [EOL]     assertEquals(true, copticGMT.millis().isPrecise()); [EOL] }
public void testDurationFields() { [EOL]     final CopticChronology coptic = CopticChronology.getInstance(); [EOL]     assertEquals("eras", coptic.eras().getName()); [EOL]     assertEquals("centuries", coptic.centuries().getName()); [EOL]     assertEquals("years", coptic.years().getName()); [EOL]     assertEquals("weekyears", coptic.weekyears().getName()); [EOL]     assertEquals("months", coptic.months().getName()); [EOL]     assertEquals("weeks", coptic.weeks().getName()); [EOL]     assertEquals("days", coptic.days().getName()); [EOL]     assertEquals("halfdays", coptic.halfdays().getName()); [EOL]     assertEquals("hours", coptic.hours().getName()); [EOL]     assertEquals("minutes", coptic.minutes().getName()); [EOL]     assertEquals("seconds", coptic.seconds().getName()); [EOL]     assertEquals("millis", coptic.millis().getName()); [EOL]     assertEquals(false, coptic.eras().isSupported()); [EOL]     assertEquals(true, coptic.centuries().isSupported()); [EOL]     assertEquals(true, coptic.years().isSupported()); [EOL]     assertEquals(true, coptic.weekyears().isSupported()); [EOL]     assertEquals(true, coptic.months().isSupported()); [EOL]     assertEquals(true, coptic.weeks().isSupported()); [EOL]     assertEquals(true, coptic.days().isSupported()); [EOL]     assertEquals(true, coptic.halfdays().isSupported()); [EOL]     assertEquals(true, coptic.hours().isSupported()); [EOL]     assertEquals(true, coptic.minutes().isSupported()); [EOL]     assertEquals(true, coptic.seconds().isSupported()); [EOL]     assertEquals(true, coptic.millis().isSupported()); [EOL]     assertEquals(false, coptic.centuries().isPrecise()); [EOL]     assertEquals(false, coptic.years().isPrecise()); [EOL]     assertEquals(false, coptic.weekyears().isPrecise()); [EOL]     assertEquals(false, coptic.months().isPrecise()); [EOL]     assertEquals(false, coptic.weeks().isPrecise()); [EOL]     assertEquals(false, coptic.days().isPrecise()); [EOL]     assertEquals(false, coptic.halfdays().isPrecise()); [EOL]     assertEquals(true, coptic.hours().isPrecise()); [EOL]     assertEquals(true, coptic.minutes().isPrecise()); [EOL]     assertEquals(true, coptic.seconds().isPrecise()); [EOL]     assertEquals(true, coptic.millis().isPrecise()); [EOL]     final CopticChronology copticUTC = CopticChronology.getInstanceUTC(); [EOL]     assertEquals(false, copticUTC.centuries().isPrecise()); [EOL]     assertEquals(false, copticUTC.years().isPrecise()); [EOL]     assertEquals(false, copticUTC.weekyears().isPrecise()); [EOL]     assertEquals(false, copticUTC.months().isPrecise()); [EOL]     assertEquals(true, copticUTC.weeks().isPrecise()); [EOL]     assertEquals(true, copticUTC.days().isPrecise()); [EOL]     assertEquals(true, copticUTC.halfdays().isPrecise()); [EOL]     assertEquals(true, copticUTC.hours().isPrecise()); [EOL]     assertEquals(true, copticUTC.minutes().isPrecise()); [EOL]     assertEquals(true, copticUTC.seconds().isPrecise()); [EOL]     assertEquals(true, copticUTC.millis().isPrecise()); [EOL]     final DateTimeZone gmt = DateTimeZone.forID("Etc/GMT"); [EOL]     final CopticChronology copticGMT = CopticChronology.getInstance(gmt); [EOL]     assertEquals(false, copticGMT.centuries().isPrecise()); [EOL]     assertEquals(false, copticGMT.years().isPrecise()); [EOL]     assertEquals(false, copticGMT.weekyears().isPrecise()); [EOL]     assertEquals(false, copticGMT.months().isPrecise()); [EOL]     assertEquals(true, copticGMT.weeks().isPrecise()); [EOL]     assertEquals(true, copticGMT.days().isPrecise()); [EOL]     assertEquals(true, copticGMT.halfdays().isPrecise()); [EOL]     assertEquals(true, copticGMT.hours().isPrecise()); [EOL]     assertEquals(true, copticGMT.minutes().isPrecise()); [EOL]     assertEquals(true, copticGMT.seconds().isPrecise()); [EOL]     assertEquals(true, copticGMT.millis().isPrecise()); [EOL] }
public void testConstructor_badconverterObject() throws Throwable { [EOL]     try { [EOL]         ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE); [EOL]         Instant test = new Instant(new Integer(0)); [EOL]         assertEquals(ISOChronology.getInstanceUTC(), test.getChronology()); [EOL]         assertEquals(0L, test.getMillis()); [EOL]     } finally { [EOL]         ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE); [EOL]     } [EOL] }
public void testFactory_monthsBetween_RPartial_YearMonth() { [EOL]     YearMonth start1 = new YearMonth(2011, 1); [EOL]     for (int i = 0; i < 6; i++) { [EOL]         YearMonth start2 = new YearMonth(2011 + i, 1); [EOL]         YearMonth end = new YearMonth(2011 + i, 3); [EOL]         assertEquals(i * 12 + 2, Months.monthsBetween(start1, end).getMonths()); [EOL]         assertEquals(2, Months.monthsBetween(start2, end).getMonths()); [EOL]     } [EOL] }
public void testFactory_monthsBetween_RPartial_YearMonth() { [EOL]     YearMonth start1 = new YearMonth(2011, 1); [EOL]     for (int i = 0; i < 6; i++) { [EOL]         YearMonth start2 = new YearMonth(2011 + i, 1); [EOL]         YearMonth end = new YearMonth(2011 + i, 3); [EOL]         assertEquals(i * 12 + 2, Months.monthsBetween(start1, end).getMonths()); [EOL]         assertEquals(2, Months.monthsBetween(start2, end).getMonths()); [EOL]     } [EOL] }
public void testMultipliedBy_int() { [EOL]     Months test = Months.months(2); [EOL]     assertEquals(6, test.multipliedBy(3).getMonths()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(-6, test.multipliedBy(-3).getMonths()); [EOL]     assertSame(test, test.multipliedBy(1)); [EOL]     Months halfMax = Months.months(Integer.MAX_VALUE / 2 + 1); [EOL]     try { [EOL]         halfMax.multipliedBy(2); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMultipliedBy_int() { [EOL]     Months test = Months.months(2); [EOL]     assertEquals(6, test.multipliedBy(3).getMonths()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(-6, test.multipliedBy(-3).getMonths()); [EOL]     assertSame(test, test.multipliedBy(1)); [EOL]     Months halfMax = Months.months(Integer.MAX_VALUE / 2 + 1); [EOL]     try { [EOL]         halfMax.multipliedBy(2); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMultipliedBy_int() { [EOL]     Months test = Months.months(2); [EOL]     assertEquals(6, test.multipliedBy(3).getMonths()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(-6, test.multipliedBy(-3).getMonths()); [EOL]     assertSame(test, test.multipliedBy(1)); [EOL]     Months halfMax = Months.months(Integer.MAX_VALUE / 2 + 1); [EOL]     try { [EOL]         halfMax.multipliedBy(2); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMultipliedBy_int() { [EOL]     Months test = Months.months(2); [EOL]     assertEquals(6, test.multipliedBy(3).getMonths()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(-6, test.multipliedBy(-3).getMonths()); [EOL]     assertSame(test, test.multipliedBy(1)); [EOL]     Months halfMax = Months.months(Integer.MAX_VALUE / 2 + 1); [EOL]     try { [EOL]         halfMax.multipliedBy(2); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void test_setHourOfDay() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withHourOfDay(24); [EOL]     assertEquals("2007-01-02T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withHourOfDay(-1); [EOL]     assertEquals("2007-01-01T23:00:00.000Z", dt.toString()); [EOL] }
public void test_setHourOfDay() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withHourOfDay(24); [EOL]     assertEquals("2007-01-02T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withHourOfDay(-1); [EOL]     assertEquals("2007-01-01T23:00:00.000Z", dt.toString()); [EOL] }
public void test_setHourOfDay() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withHourOfDay(24); [EOL]     assertEquals("2007-01-02T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withHourOfDay(-1); [EOL]     assertEquals("2007-01-01T23:00:00.000Z", dt.toString()); [EOL] }
public void test_setHourOfDay() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withHourOfDay(24); [EOL]     assertEquals("2007-01-02T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withHourOfDay(-1); [EOL]     assertEquals("2007-01-01T23:00:00.000Z", dt.toString()); [EOL] }
public void test_setHourOfDay() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withHourOfDay(24); [EOL]     assertEquals("2007-01-02T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withHourOfDay(-1); [EOL]     assertEquals("2007-01-01T23:00:00.000Z", dt.toString()); [EOL] }
public void test_setHourOfDay() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withHourOfDay(24); [EOL]     assertEquals("2007-01-02T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withHourOfDay(-1); [EOL]     assertEquals("2007-01-01T23:00:00.000Z", dt.toString()); [EOL] }
public void test_setHourOfDay() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withHourOfDay(24); [EOL]     assertEquals("2007-01-02T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withHourOfDay(-1); [EOL]     assertEquals("2007-01-01T23:00:00.000Z", dt.toString()); [EOL] }
public void test_setHourOfDay() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withHourOfDay(24); [EOL]     assertEquals("2007-01-02T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withHourOfDay(-1); [EOL]     assertEquals("2007-01-01T23:00:00.000Z", dt.toString()); [EOL] }
public void test_setHourOfDay() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withHourOfDay(24); [EOL]     assertEquals("2007-01-02T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withHourOfDay(-1); [EOL]     assertEquals("2007-01-01T23:00:00.000Z", dt.toString()); [EOL] }
public void test_setHourOfDay() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withHourOfDay(24); [EOL]     assertEquals("2007-01-02T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withHourOfDay(-1); [EOL]     assertEquals("2007-01-01T23:00:00.000Z", dt.toString()); [EOL] }
public void testParse_noFormatter() throws Throwable { [EOL]     DateTime start = new DateTime(2010, 6, 30, 12, 30, ISOChronology.getInstance(PARIS)); [EOL]     DateTime end = new DateTime(2010, 7, 1, 14, 30, ISOChronology.getInstance(PARIS)); [EOL]     assertEquals(new Interval(start, end), Interval.parse("2010-06-30T12:30/2010-07-01T14:30")); [EOL]     assertEquals(new Interval(start, end), Interval.parse("2010-06-30T12:30/P1DT2H")); [EOL]     assertEquals(new Interval(start, end), Interval.parse("P1DT2H/2010-07-01T14:30")); [EOL] }
public void testParse_noFormatter() throws Throwable { [EOL]     DateTime start = new DateTime(2010, 6, 30, 12, 30, ISOChronology.getInstance(PARIS)); [EOL]     DateTime end = new DateTime(2010, 7, 1, 14, 30, ISOChronology.getInstance(PARIS)); [EOL]     assertEquals(new Interval(start, end), Interval.parse("2010-06-30T12:30/2010-07-01T14:30")); [EOL]     assertEquals(new Interval(start, end), Interval.parse("2010-06-30T12:30/P1DT2H")); [EOL]     assertEquals(new Interval(start, end), Interval.parse("P1DT2H/2010-07-01T14:30")); [EOL] }
public void testParse_noFormatter() throws Throwable { [EOL]     DateTime start = new DateTime(2010, 6, 30, 12, 30, ISOChronology.getInstance(PARIS)); [EOL]     DateTime end = new DateTime(2010, 7, 1, 14, 30, ISOChronology.getInstance(PARIS)); [EOL]     assertEquals(new Interval(start, end), Interval.parse("2010-06-30T12:30/2010-07-01T14:30")); [EOL]     assertEquals(new Interval(start, end), Interval.parse("2010-06-30T12:30/P1DT2H")); [EOL]     assertEquals(new Interval(start, end), Interval.parse("P1DT2H/2010-07-01T14:30")); [EOL] }
public void testSetIntoInterval_Object1() throws Exception { [EOL]     Interval i = new Interval(0L, 123L, CopticChronology.getInstance()); [EOL]     MutableInterval m = new MutableInterval(-1000L, 1000L, BuddhistChronology.getInstance()); [EOL]     ReadableIntervalConverter.INSTANCE.setInto(m, i, null); [EOL]     assertEquals(0L, m.getStartMillis()); [EOL]     assertEquals(123L, m.getEndMillis()); [EOL]     assertEquals(CopticChronology.getInstance(), m.getChronology()); [EOL] }
public void testSetIntoInterval_Object1() throws Exception { [EOL]     Interval i = new Interval(0L, 123L, CopticChronology.getInstance()); [EOL]     MutableInterval m = new MutableInterval(-1000L, 1000L, BuddhistChronology.getInstance()); [EOL]     ReadableIntervalConverter.INSTANCE.setInto(m, i, null); [EOL]     assertEquals(0L, m.getStartMillis()); [EOL]     assertEquals(123L, m.getEndMillis()); [EOL]     assertEquals(CopticChronology.getInstance(), m.getChronology()); [EOL] }
public void testOverlap_RInterval_null() { [EOL]     DateTimeUtils.setCurrentMillisFixed(2); [EOL]     assertEquals(null, interval37.overlap((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(null, interval37.overlap((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(4); [EOL]     assertEquals(new Interval(4, 4), interval37.overlap((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(6); [EOL]     assertEquals(new Interval(6, 6), interval37.overlap((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(7); [EOL]     assertEquals(null, interval37.overlap((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(8); [EOL]     assertEquals(null, interval37.overlap((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(null, interval33.overlap((ReadableInterval) null)); [EOL] }
public void testOverlap_RInterval_null() { [EOL]     DateTimeUtils.setCurrentMillisFixed(2); [EOL]     assertEquals(null, interval37.overlap((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(null, interval37.overlap((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(4); [EOL]     assertEquals(new Interval(4, 4), interval37.overlap((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(6); [EOL]     assertEquals(new Interval(6, 6), interval37.overlap((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(7); [EOL]     assertEquals(null, interval37.overlap((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(8); [EOL]     assertEquals(null, interval37.overlap((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(null, interval33.overlap((ReadableInterval) null)); [EOL] }
public void testOverlap_RInterval_null() { [EOL]     DateTimeUtils.setCurrentMillisFixed(2); [EOL]     assertEquals(null, interval37.overlap((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(null, interval37.overlap((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(4); [EOL]     assertEquals(new Interval(4, 4), interval37.overlap((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(6); [EOL]     assertEquals(new Interval(6, 6), interval37.overlap((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(7); [EOL]     assertEquals(null, interval37.overlap((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(8); [EOL]     assertEquals(null, interval37.overlap((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(null, interval33.overlap((ReadableInterval) null)); [EOL] }
public void testWithChronology3() { [EOL]     Interval base = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS); [EOL]     Interval test = base.withChronology(COPTIC_PARIS); [EOL]     assertSame(base, test); [EOL] }
public void testWithChronology3() { [EOL]     Interval base = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS); [EOL]     Interval test = base.withChronology(COPTIC_PARIS); [EOL]     assertSame(base, test); [EOL] }
public void testWithEndInstant_RI3() { [EOL]     Interval base = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS); [EOL]     Interval test = base.withEnd(null); [EOL]     assertEquals(new Interval(TEST_TIME1, TEST_TIME_NOW, COPTIC_PARIS), test); [EOL] }
public void testWithEndInstant_RI3() { [EOL]     Interval base = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS); [EOL]     Interval test = base.withEnd(null); [EOL]     assertEquals(new Interval(TEST_TIME1, TEST_TIME_NOW, COPTIC_PARIS), test); [EOL] }
public void testWithEndInstant_RI3() { [EOL]     Interval base = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS); [EOL]     Interval test = base.withEnd(null); [EOL]     assertEquals(new Interval(TEST_TIME1, TEST_TIME_NOW, COPTIC_PARIS), test); [EOL] }
public void testFactory_FromDateFields() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6); [EOL]     cal.set(Calendar.MILLISECOND, 7); [EOL]     YearMonth expected = new YearMonth(1970, 2); [EOL]     assertEquals(expected, YearMonth.fromDateFields(cal.getTime())); [EOL]     try { [EOL]         YearMonth.fromDateFields(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_FromDateFields() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6); [EOL]     cal.set(Calendar.MILLISECOND, 7); [EOL]     YearMonth expected = new YearMonth(1970, 2); [EOL]     assertEquals(expected, YearMonth.fromDateFields(cal.getTime())); [EOL]     try { [EOL]         YearMonth.fromDateFields(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithField_same() { [EOL]     YearMonth test = new YearMonth(2004, 6); [EOL]     YearMonth result = test.withField(DateTimeFieldType.year(), 2004); [EOL]     assertEquals(new YearMonth(2004, 6), test); [EOL]     assertSame(test, result); [EOL] }
public void testWithField_same() { [EOL]     YearMonth test = new YearMonth(2004, 6); [EOL]     YearMonth result = test.withField(DateTimeFieldType.year(), 2004); [EOL]     assertEquals(new YearMonth(2004, 6), test); [EOL]     assertSame(test, result); [EOL] }
public void testWithField_same() { [EOL]     YearMonth test = new YearMonth(2004, 6); [EOL]     YearMonth result = test.withField(DateTimeFieldType.year(), 2004); [EOL]     assertEquals(new YearMonth(2004, 6), test); [EOL]     assertSame(test, result); [EOL] }
public void testMinusYears_int() { [EOL]     YearMonth test = new YearMonth(2002, 5, BuddhistChronology.getInstance()); [EOL]     YearMonth result = test.minusYears(1); [EOL]     YearMonth expected = new YearMonth(2001, 5, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusYears(0); [EOL]     assertSame(test, result); [EOL] }
public void testToString() { [EOL]     YearMonth test = new YearMonth(2002, 6); [EOL]     assertEquals("2002-06", test.toString()); [EOL] }
public void testToString_String_Locale() { [EOL]     YearMonth test = new YearMonth(2002, 6); [EOL]     assertEquals("\ufffd \ufffd/6", test.toString("EEE d/M", Locale.ENGLISH)); [EOL]     assertEquals("\ufffd \ufffd/6", test.toString("EEE d/M", Locale.FRENCH)); [EOL]     assertEquals("2002-06", test.toString(null, Locale.ENGLISH)); [EOL]     assertEquals("\ufffd \ufffd/6", test.toString("EEE d/M", null)); [EOL]     assertEquals("2002-06", test.toString(null, null)); [EOL] }
public void testToString_String_Locale() { [EOL]     YearMonth test = new YearMonth(2002, 6); [EOL]     assertEquals("\ufffd \ufffd/6", test.toString("EEE d/M", Locale.ENGLISH)); [EOL]     assertEquals("\ufffd \ufffd/6", test.toString("EEE d/M", Locale.FRENCH)); [EOL]     assertEquals("2002-06", test.toString(null, Locale.ENGLISH)); [EOL]     assertEquals("\ufffd \ufffd/6", test.toString("EEE d/M", null)); [EOL]     assertEquals("2002-06", test.toString(null, null)); [EOL] }
public void testPropertyAddWrapFieldMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().addWrapFieldToCopy(4); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 10); [EOL]     copy = test.monthOfYear().addWrapFieldToCopy(8); [EOL]     check(copy, 1972, 2); [EOL]     copy = test.monthOfYear().addWrapFieldToCopy(-8); [EOL]     check(copy, 1972, 10); [EOL] }
public void testPropertyAddWrapFieldMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().addWrapFieldToCopy(4); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 10); [EOL]     copy = test.monthOfYear().addWrapFieldToCopy(8); [EOL]     check(copy, 1972, 2); [EOL]     copy = test.monthOfYear().addWrapFieldToCopy(-8); [EOL]     check(copy, 1972, 10); [EOL] }
public void testPropertyAddWrapFieldMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().addWrapFieldToCopy(4); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 10); [EOL]     copy = test.monthOfYear().addWrapFieldToCopy(8); [EOL]     check(copy, 1972, 2); [EOL]     copy = test.monthOfYear().addWrapFieldToCopy(-8); [EOL]     check(copy, 1972, 10); [EOL] }
public void testPropertyAddWrapFieldMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().addWrapFieldToCopy(4); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 10); [EOL]     copy = test.monthOfYear().addWrapFieldToCopy(8); [EOL]     check(copy, 1972, 2); [EOL]     copy = test.monthOfYear().addWrapFieldToCopy(-8); [EOL]     check(copy, 1972, 10); [EOL] }
public void testPropertyAddWrapFieldMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().addWrapFieldToCopy(4); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 10); [EOL]     copy = test.monthOfYear().addWrapFieldToCopy(8); [EOL]     check(copy, 1972, 2); [EOL]     copy = test.monthOfYear().addWrapFieldToCopy(-8); [EOL]     check(copy, 1972, 10); [EOL] }
public void test_getAsShortText_long_Locale() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     assertEquals("29", field.getAsShortText(60L * 29, Locale.ENGLISH)); [EOL]     assertEquals("29", field.getAsShortText(60L * 29, null)); [EOL] }
public void test_roundCeiling_long() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     assertEquals(0L, field.roundCeiling(0L)); [EOL]     assertEquals(60L, field.roundCeiling(29L)); [EOL]     assertEquals(60L, field.roundCeiling(30L)); [EOL]     assertEquals(60L, field.roundCeiling(31L)); [EOL]     assertEquals(60L, field.roundCeiling(60L)); [EOL] }
public void test_add_RP_int_intarray_int() { [EOL]     int[] values = new int[] { 10, 20, 30, 40 }; [EOL]     int[] expected = new int[] { 10, 20, 30, 40 }; [EOL]     BaseDateTimeField field = new MockStandardBaseDateTimeField(); [EOL]     int[] result = field.add(new TimeOfDay(), 2, values, 0); [EOL]     assertEquals(true, Arrays.equals(expected, result)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 31, 40 }; [EOL]     result = field.add(new TimeOfDay(), 2, values, 1); [EOL]     assertEquals(true, Arrays.equals(expected, result)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 21, 0, 40 }; [EOL]     result = field.add(new TimeOfDay(), 2, values, 30); [EOL]     assertEquals(true, Arrays.equals(expected, result)); [EOL]     values = new int[] { 23, 59, 30, 40 }; [EOL]     try { [EOL]         field.add(new TimeOfDay(), 2, values, 30); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 29, 40 }; [EOL]     result = field.add(new TimeOfDay(), 2, values, -1); [EOL]     assertEquals(true, Arrays.equals(expected, result)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 19, 59, 40 }; [EOL]     result = field.add(new TimeOfDay(), 2, values, -31); [EOL]     assertEquals(true, Arrays.equals(expected, result)); [EOL]     values = new int[] { 0, 0, 30, 40 }; [EOL]     try { [EOL]         field.add(new TimeOfDay(), 2, values, -31); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     values = new int[] { 0, 0 }; [EOL]     try { [EOL]         field.add(new MockPartial(), 0, values, 1000); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     values = new int[] { 1, 0 }; [EOL]     try { [EOL]         field.add(new MockPartial(), 0, values, -1000); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void test_add_RP_int_intarray_int() { [EOL]     int[] values = new int[] { 10, 20, 30, 40 }; [EOL]     int[] expected = new int[] { 10, 20, 30, 40 }; [EOL]     BaseDateTimeField field = new MockStandardBaseDateTimeField(); [EOL]     int[] result = field.add(new TimeOfDay(), 2, values, 0); [EOL]     assertEquals(true, Arrays.equals(expected, result)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 31, 40 }; [EOL]     result = field.add(new TimeOfDay(), 2, values, 1); [EOL]     assertEquals(true, Arrays.equals(expected, result)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 21, 0, 40 }; [EOL]     result = field.add(new TimeOfDay(), 2, values, 30); [EOL]     assertEquals(true, Arrays.equals(expected, result)); [EOL]     values = new int[] { 23, 59, 30, 40 }; [EOL]     try { [EOL]         field.add(new TimeOfDay(), 2, values, 30); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 29, 40 }; [EOL]     result = field.add(new TimeOfDay(), 2, values, -1); [EOL]     assertEquals(true, Arrays.equals(expected, result)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 19, 59, 40 }; [EOL]     result = field.add(new TimeOfDay(), 2, values, -31); [EOL]     assertEquals(true, Arrays.equals(expected, result)); [EOL]     values = new int[] { 0, 0, 30, 40 }; [EOL]     try { [EOL]         field.add(new TimeOfDay(), 2, values, -31); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     values = new int[] { 0, 0 }; [EOL]     try { [EOL]         field.add(new MockPartial(), 0, values, 1000); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     values = new int[] { 1, 0 }; [EOL]     try { [EOL]         field.add(new MockPartial(), 0, values, -1000); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void test_add_RP_int_intarray_int() { [EOL]     int[] values = new int[] { 10, 20, 30, 40 }; [EOL]     int[] expected = new int[] { 10, 20, 30, 40 }; [EOL]     BaseDateTimeField field = new MockStandardBaseDateTimeField(); [EOL]     int[] result = field.add(new TimeOfDay(), 2, values, 0); [EOL]     assertEquals(true, Arrays.equals(expected, result)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 31, 40 }; [EOL]     result = field.add(new TimeOfDay(), 2, values, 1); [EOL]     assertEquals(true, Arrays.equals(expected, result)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 21, 0, 40 }; [EOL]     result = field.add(new TimeOfDay(), 2, values, 30); [EOL]     assertEquals(true, Arrays.equals(expected, result)); [EOL]     values = new int[] { 23, 59, 30, 40 }; [EOL]     try { [EOL]         field.add(new TimeOfDay(), 2, values, 30); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 29, 40 }; [EOL]     result = field.add(new TimeOfDay(), 2, values, -1); [EOL]     assertEquals(true, Arrays.equals(expected, result)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 19, 59, 40 }; [EOL]     result = field.add(new TimeOfDay(), 2, values, -31); [EOL]     assertEquals(true, Arrays.equals(expected, result)); [EOL]     values = new int[] { 0, 0, 30, 40 }; [EOL]     try { [EOL]         field.add(new TimeOfDay(), 2, values, -31); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     values = new int[] { 0, 0 }; [EOL]     try { [EOL]         field.add(new MockPartial(), 0, values, 1000); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     values = new int[] { 1, 0 }; [EOL]     try { [EOL]         field.add(new MockPartial(), 0, values, -1000); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void test_add_RP_int_intarray_int() { [EOL]     int[] values = new int[] { 10, 20, 30, 40 }; [EOL]     int[] expected = new int[] { 10, 20, 30, 40 }; [EOL]     BaseDateTimeField field = new MockStandardBaseDateTimeField(); [EOL]     int[] result = field.add(new TimeOfDay(), 2, values, 0); [EOL]     assertEquals(true, Arrays.equals(expected, result)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 31, 40 }; [EOL]     result = field.add(new TimeOfDay(), 2, values, 1); [EOL]     assertEquals(true, Arrays.equals(expected, result)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 21, 0, 40 }; [EOL]     result = field.add(new TimeOfDay(), 2, values, 30); [EOL]     assertEquals(true, Arrays.equals(expected, result)); [EOL]     values = new int[] { 23, 59, 30, 40 }; [EOL]     try { [EOL]         field.add(new TimeOfDay(), 2, values, 30); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 29, 40 }; [EOL]     result = field.add(new TimeOfDay(), 2, values, -1); [EOL]     assertEquals(true, Arrays.equals(expected, result)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 19, 59, 40 }; [EOL]     result = field.add(new TimeOfDay(), 2, values, -31); [EOL]     assertEquals(true, Arrays.equals(expected, result)); [EOL]     values = new int[] { 0, 0, 30, 40 }; [EOL]     try { [EOL]         field.add(new TimeOfDay(), 2, values, -31); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     values = new int[] { 0, 0 }; [EOL]     try { [EOL]         field.add(new MockPartial(), 0, values, 1000); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     values = new int[] { 1, 0 }; [EOL]     try { [EOL]         field.add(new MockPartial(), 0, values, -1000); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void test_add_RP_int_intarray_int() { [EOL]     int[] values = new int[] { 10, 20, 30, 40 }; [EOL]     int[] expected = new int[] { 10, 20, 30, 40 }; [EOL]     BaseDateTimeField field = new MockStandardBaseDateTimeField(); [EOL]     int[] result = field.add(new TimeOfDay(), 2, values, 0); [EOL]     assertEquals(true, Arrays.equals(expected, result)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 31, 40 }; [EOL]     result = field.add(new TimeOfDay(), 2, values, 1); [EOL]     assertEquals(true, Arrays.equals(expected, result)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 21, 0, 40 }; [EOL]     result = field.add(new TimeOfDay(), 2, values, 30); [EOL]     assertEquals(true, Arrays.equals(expected, result)); [EOL]     values = new int[] { 23, 59, 30, 40 }; [EOL]     try { [EOL]         field.add(new TimeOfDay(), 2, values, 30); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 29, 40 }; [EOL]     result = field.add(new TimeOfDay(), 2, values, -1); [EOL]     assertEquals(true, Arrays.equals(expected, result)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 19, 59, 40 }; [EOL]     result = field.add(new TimeOfDay(), 2, values, -31); [EOL]     assertEquals(true, Arrays.equals(expected, result)); [EOL]     values = new int[] { 0, 0, 30, 40 }; [EOL]     try { [EOL]         field.add(new TimeOfDay(), 2, values, -31); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     values = new int[] { 0, 0 }; [EOL]     try { [EOL]         field.add(new MockPartial(), 0, values, 1000); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     values = new int[] { 1, 0 }; [EOL]     try { [EOL]         field.add(new MockPartial(), 0, values, -1000); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void test_add_RP_int_intarray_int() { [EOL]     int[] values = new int[] { 10, 20, 30, 40 }; [EOL]     int[] expected = new int[] { 10, 20, 30, 40 }; [EOL]     BaseDateTimeField field = new MockStandardBaseDateTimeField(); [EOL]     int[] result = field.add(new TimeOfDay(), 2, values, 0); [EOL]     assertEquals(true, Arrays.equals(expected, result)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 31, 40 }; [EOL]     result = field.add(new TimeOfDay(), 2, values, 1); [EOL]     assertEquals(true, Arrays.equals(expected, result)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 21, 0, 40 }; [EOL]     result = field.add(new TimeOfDay(), 2, values, 30); [EOL]     assertEquals(true, Arrays.equals(expected, result)); [EOL]     values = new int[] { 23, 59, 30, 40 }; [EOL]     try { [EOL]         field.add(new TimeOfDay(), 2, values, 30); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 29, 40 }; [EOL]     result = field.add(new TimeOfDay(), 2, values, -1); [EOL]     assertEquals(true, Arrays.equals(expected, result)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 19, 59, 40 }; [EOL]     result = field.add(new TimeOfDay(), 2, values, -31); [EOL]     assertEquals(true, Arrays.equals(expected, result)); [EOL]     values = new int[] { 0, 0, 30, 40 }; [EOL]     try { [EOL]         field.add(new TimeOfDay(), 2, values, -31); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     values = new int[] { 0, 0 }; [EOL]     try { [EOL]         field.add(new MockPartial(), 0, values, 1000); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     values = new int[] { 1, 0 }; [EOL]     try { [EOL]         field.add(new MockPartial(), 0, values, -1000); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void test_add_RP_int_intarray_int() { [EOL]     int[] values = new int[] { 10, 20, 30, 40 }; [EOL]     int[] expected = new int[] { 10, 20, 30, 40 }; [EOL]     BaseDateTimeField field = new MockStandardBaseDateTimeField(); [EOL]     int[] result = field.add(new TimeOfDay(), 2, values, 0); [EOL]     assertEquals(true, Arrays.equals(expected, result)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 31, 40 }; [EOL]     result = field.add(new TimeOfDay(), 2, values, 1); [EOL]     assertEquals(true, Arrays.equals(expected, result)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 21, 0, 40 }; [EOL]     result = field.add(new TimeOfDay(), 2, values, 30); [EOL]     assertEquals(true, Arrays.equals(expected, result)); [EOL]     values = new int[] { 23, 59, 30, 40 }; [EOL]     try { [EOL]         field.add(new TimeOfDay(), 2, values, 30); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 29, 40 }; [EOL]     result = field.add(new TimeOfDay(), 2, values, -1); [EOL]     assertEquals(true, Arrays.equals(expected, result)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 19, 59, 40 }; [EOL]     result = field.add(new TimeOfDay(), 2, values, -31); [EOL]     assertEquals(true, Arrays.equals(expected, result)); [EOL]     values = new int[] { 0, 0, 30, 40 }; [EOL]     try { [EOL]         field.add(new TimeOfDay(), 2, values, -31); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     values = new int[] { 0, 0 }; [EOL]     try { [EOL]         field.add(new MockPartial(), 0, values, 1000); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     values = new int[] { 1, 0 }; [EOL]     try { [EOL]         field.add(new MockPartial(), 0, values, -1000); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void test_add_RP_int_intarray_int() { [EOL]     int[] values = new int[] { 10, 20, 30, 40 }; [EOL]     int[] expected = new int[] { 10, 20, 30, 40 }; [EOL]     BaseDateTimeField field = new MockStandardBaseDateTimeField(); [EOL]     int[] result = field.add(new TimeOfDay(), 2, values, 0); [EOL]     assertEquals(true, Arrays.equals(expected, result)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 31, 40 }; [EOL]     result = field.add(new TimeOfDay(), 2, values, 1); [EOL]     assertEquals(true, Arrays.equals(expected, result)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 21, 0, 40 }; [EOL]     result = field.add(new TimeOfDay(), 2, values, 30); [EOL]     assertEquals(true, Arrays.equals(expected, result)); [EOL]     values = new int[] { 23, 59, 30, 40 }; [EOL]     try { [EOL]         field.add(new TimeOfDay(), 2, values, 30); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 29, 40 }; [EOL]     result = field.add(new TimeOfDay(), 2, values, -1); [EOL]     assertEquals(true, Arrays.equals(expected, result)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 19, 59, 40 }; [EOL]     result = field.add(new TimeOfDay(), 2, values, -31); [EOL]     assertEquals(true, Arrays.equals(expected, result)); [EOL]     values = new int[] { 0, 0, 30, 40 }; [EOL]     try { [EOL]         field.add(new TimeOfDay(), 2, values, -31); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     values = new int[] { 0, 0 }; [EOL]     try { [EOL]         field.add(new MockPartial(), 0, values, 1000); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     values = new int[] { 1, 0 }; [EOL]     try { [EOL]         field.add(new MockPartial(), 0, values, -1000); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testMinusMillis_int() { [EOL]     TimeOfDay test = new TimeOfDay(1, 2, 3, 4, BuddhistChronology.getInstance()); [EOL]     TimeOfDay result = test.minusMillis(1); [EOL]     TimeOfDay expected = new TimeOfDay(1, 2, 3, 3, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusMillis(0); [EOL]     assertSame(test, result); [EOL] }
public void test_getLeapDurationField() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     assertEquals(null, field.getLeapDurationField()); [EOL] }
public void test_getMaximumTextLength_Locale() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     assertEquals(2, field.getMaximumTextLength(Locale.ENGLISH)); [EOL]     field = new MockBaseDateTimeField() { [EOL]  [EOL]         public int getMaximumValue() { [EOL]             return 5; [EOL]         } [EOL]     }; [EOL]     assertEquals(1, field.getMaximumTextLength(Locale.ENGLISH)); [EOL]     field = new MockBaseDateTimeField() { [EOL]  [EOL]         public int getMaximumValue() { [EOL]             return 555; [EOL]         } [EOL]     }; [EOL]     assertEquals(3, field.getMaximumTextLength(Locale.ENGLISH)); [EOL]     field = new MockBaseDateTimeField() { [EOL]  [EOL]         public int getMaximumValue() { [EOL]             return 5555; [EOL]         } [EOL]     }; [EOL]     assertEquals(4, field.getMaximumTextLength(Locale.ENGLISH)); [EOL]     field = new MockBaseDateTimeField() { [EOL]  [EOL]         public int getMaximumValue() { [EOL]             return -1; [EOL]         } [EOL]     }; [EOL]     assertEquals(2, field.getMaximumTextLength(Locale.ENGLISH)); [EOL] }
public void test_getMaximumTextLength_Locale() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     assertEquals(2, field.getMaximumTextLength(Locale.ENGLISH)); [EOL]     field = new MockBaseDateTimeField() { [EOL]  [EOL]         public int getMaximumValue() { [EOL]             return 5; [EOL]         } [EOL]     }; [EOL]     assertEquals(1, field.getMaximumTextLength(Locale.ENGLISH)); [EOL]     field = new MockBaseDateTimeField() { [EOL]  [EOL]         public int getMaximumValue() { [EOL]             return 555; [EOL]         } [EOL]     }; [EOL]     assertEquals(3, field.getMaximumTextLength(Locale.ENGLISH)); [EOL]     field = new MockBaseDateTimeField() { [EOL]  [EOL]         public int getMaximumValue() { [EOL]             return 5555; [EOL]         } [EOL]     }; [EOL]     assertEquals(4, field.getMaximumTextLength(Locale.ENGLISH)); [EOL]     field = new MockBaseDateTimeField() { [EOL]  [EOL]         public int getMaximumValue() { [EOL]             return -1; [EOL]         } [EOL]     }; [EOL]     assertEquals(2, field.getMaximumTextLength(Locale.ENGLISH)); [EOL] }
public void test_getMaximumTextLength_Locale() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     assertEquals(2, field.getMaximumTextLength(Locale.ENGLISH)); [EOL]     field = new MockBaseDateTimeField() { [EOL]  [EOL]         public int getMaximumValue() { [EOL]             return 5; [EOL]         } [EOL]     }; [EOL]     assertEquals(1, field.getMaximumTextLength(Locale.ENGLISH)); [EOL]     field = new MockBaseDateTimeField() { [EOL]  [EOL]         public int getMaximumValue() { [EOL]             return 555; [EOL]         } [EOL]     }; [EOL]     assertEquals(3, field.getMaximumTextLength(Locale.ENGLISH)); [EOL]     field = new MockBaseDateTimeField() { [EOL]  [EOL]         public int getMaximumValue() { [EOL]             return 5555; [EOL]         } [EOL]     }; [EOL]     assertEquals(4, field.getMaximumTextLength(Locale.ENGLISH)); [EOL]     field = new MockBaseDateTimeField() { [EOL]  [EOL]         public int getMaximumValue() { [EOL]             return -1; [EOL]         } [EOL]     }; [EOL]     assertEquals(2, field.getMaximumTextLength(Locale.ENGLISH)); [EOL] }
public void test_getMaximumTextLength_Locale() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     assertEquals(2, field.getMaximumTextLength(Locale.ENGLISH)); [EOL]     field = new MockBaseDateTimeField() { [EOL]  [EOL]         public int getMaximumValue() { [EOL]             return 5; [EOL]         } [EOL]     }; [EOL]     assertEquals(1, field.getMaximumTextLength(Locale.ENGLISH)); [EOL]     field = new MockBaseDateTimeField() { [EOL]  [EOL]         public int getMaximumValue() { [EOL]             return 555; [EOL]         } [EOL]     }; [EOL]     assertEquals(3, field.getMaximumTextLength(Locale.ENGLISH)); [EOL]     field = new MockBaseDateTimeField() { [EOL]  [EOL]         public int getMaximumValue() { [EOL]             return 5555; [EOL]         } [EOL]     }; [EOL]     assertEquals(4, field.getMaximumTextLength(Locale.ENGLISH)); [EOL]     field = new MockBaseDateTimeField() { [EOL]  [EOL]         public int getMaximumValue() { [EOL]             return -1; [EOL]         } [EOL]     }; [EOL]     assertEquals(2, field.getMaximumTextLength(Locale.ENGLISH)); [EOL] }
public void test_getMaximumTextLength_Locale() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     assertEquals(2, field.getMaximumTextLength(Locale.ENGLISH)); [EOL]     field = new MockBaseDateTimeField() { [EOL]  [EOL]         public int getMaximumValue() { [EOL]             return 5; [EOL]         } [EOL]     }; [EOL]     assertEquals(1, field.getMaximumTextLength(Locale.ENGLISH)); [EOL]     field = new MockBaseDateTimeField() { [EOL]  [EOL]         public int getMaximumValue() { [EOL]             return 555; [EOL]         } [EOL]     }; [EOL]     assertEquals(3, field.getMaximumTextLength(Locale.ENGLISH)); [EOL]     field = new MockBaseDateTimeField() { [EOL]  [EOL]         public int getMaximumValue() { [EOL]             return 5555; [EOL]         } [EOL]     }; [EOL]     assertEquals(4, field.getMaximumTextLength(Locale.ENGLISH)); [EOL]     field = new MockBaseDateTimeField() { [EOL]  [EOL]         public int getMaximumValue() { [EOL]             return -1; [EOL]         } [EOL]     }; [EOL]     assertEquals(2, field.getMaximumTextLength(Locale.ENGLISH)); [EOL] }
public void test_roundCeiling_long() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     assertEquals(0L, field.roundCeiling(0L)); [EOL]     assertEquals(60L, field.roundCeiling(29L)); [EOL]     assertEquals(60L, field.roundCeiling(30L)); [EOL]     assertEquals(60L, field.roundCeiling(31L)); [EOL]     assertEquals(60L, field.roundCeiling(60L)); [EOL] }
public void test_roundCeiling_long() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     assertEquals(0L, field.roundCeiling(0L)); [EOL]     assertEquals(60L, field.roundCeiling(29L)); [EOL]     assertEquals(60L, field.roundCeiling(30L)); [EOL]     assertEquals(60L, field.roundCeiling(31L)); [EOL]     assertEquals(60L, field.roundCeiling(60L)); [EOL] }
public void test_roundHalfFloor_long() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     assertEquals(0L, field.roundHalfFloor(0L)); [EOL]     assertEquals(0L, field.roundHalfFloor(29L)); [EOL]     assertEquals(0L, field.roundHalfFloor(30L)); [EOL]     assertEquals(60L, field.roundHalfFloor(31L)); [EOL]     assertEquals(60L, field.roundHalfFloor(60L)); [EOL] }
public void test_roundHalfFloor_long() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     assertEquals(0L, field.roundHalfFloor(0L)); [EOL]     assertEquals(0L, field.roundHalfFloor(29L)); [EOL]     assertEquals(0L, field.roundHalfFloor(30L)); [EOL]     assertEquals(60L, field.roundHalfFloor(31L)); [EOL]     assertEquals(60L, field.roundHalfFloor(60L)); [EOL] }
public void testPropertyToIntervalYearOfCentury() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     Interval testInterval = test.yearOfCentury().toInterval(); [EOL]     assertEquals(new DateTime(2004, 1, 1, 0, 0, 0, 0), testInterval.getStart()); [EOL]     assertEquals(new DateTime(2005, 1, 1, 0, 0, 0, 0), testInterval.getEnd()); [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testPropertyAddWrapFieldDayOfMonth() { [EOL]     MonthDay test = new MonthDay(4, 6); [EOL]     MonthDay copy = test.dayOfMonth().addWrapFieldToCopy(4); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 10); [EOL]     copy = test.dayOfMonth().addWrapFieldToCopy(8); [EOL]     check(copy, 4, 14); [EOL]     copy = test.dayOfMonth().addWrapFieldToCopy(-8); [EOL]     check(copy, 4, 28); [EOL] }
public void testPropertyAddWrapFieldDayOfMonth() { [EOL]     MonthDay test = new MonthDay(4, 6); [EOL]     MonthDay copy = test.dayOfMonth().addWrapFieldToCopy(4); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 10); [EOL]     copy = test.dayOfMonth().addWrapFieldToCopy(8); [EOL]     check(copy, 4, 14); [EOL]     copy = test.dayOfMonth().addWrapFieldToCopy(-8); [EOL]     check(copy, 4, 28); [EOL] }
public void testPropertyAddWrapFieldDayOfMonth() { [EOL]     MonthDay test = new MonthDay(4, 6); [EOL]     MonthDay copy = test.dayOfMonth().addWrapFieldToCopy(4); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 10); [EOL]     copy = test.dayOfMonth().addWrapFieldToCopy(8); [EOL]     check(copy, 4, 14); [EOL]     copy = test.dayOfMonth().addWrapFieldToCopy(-8); [EOL]     check(copy, 4, 28); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void testFormatSuffixPlural2() { [EOL]     PeriodFormatter f = builder.appendHours().appendSuffix(" hour", " hours").toFormatter(); [EOL]     assertEquals("5 hours", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 hours", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixPlural2() { [EOL]     PeriodFormatter f = builder.appendHours().appendSuffix(" hour", " hours").toFormatter(); [EOL]     assertEquals("5 hours", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 hours", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixPlural2() { [EOL]     PeriodFormatter f = builder.appendHours().appendSuffix(" hour", " hours").toFormatter(); [EOL]     assertEquals("5 hours", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 hours", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixPlural2() { [EOL]     PeriodFormatter f = builder.appendHours().appendSuffix(" hour", " hours").toFormatter(); [EOL]     assertEquals("5 hours", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 hours", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixPlural2() { [EOL]     PeriodFormatter f = builder.appendHours().appendSuffix(" hour", " hours").toFormatter(); [EOL]     assertEquals("5 hours", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 hours", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixPlural2() { [EOL]     PeriodFormatter f = builder.appendHours().appendSuffix(" hour", " hours").toFormatter(); [EOL]     assertEquals("5 hours", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 hours", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixPlural2() { [EOL]     PeriodFormatter f = builder.appendHours().appendSuffix(" hour", " hours").toFormatter(); [EOL]     assertEquals("5 hours", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 hours", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixPlural2() { [EOL]     PeriodFormatter f = builder.appendHours().appendSuffix(" hour", " hours").toFormatter(); [EOL]     assertEquals("5 hours", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 hours", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixPlural2() { [EOL]     PeriodFormatter f = builder.appendHours().appendSuffix(" hour", " hours").toFormatter(); [EOL]     assertEquals("5 hours", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 hours", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixPlural2() { [EOL]     PeriodFormatter f = builder.appendHours().appendSuffix(" hour", " hours").toFormatter(); [EOL]     assertEquals("5 hours", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 hours", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixPlural2() { [EOL]     PeriodFormatter f = builder.appendHours().appendSuffix(" hour", " hours").toFormatter(); [EOL]     assertEquals("5 hours", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 hours", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixPlural2() { [EOL]     PeriodFormatter f = builder.appendHours().appendSuffix(" hour", " hours").toFormatter(); [EOL]     assertEquals("5 hours", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 hours", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixPlural2() { [EOL]     PeriodFormatter f = builder.appendHours().appendSuffix(" hour", " hours").toFormatter(); [EOL]     assertEquals("5 hours", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 hours", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testParseMutableDateTime_offsetParsed() { [EOL]     MutableDateTime expect = null; [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     assertEquals(expect, g.withOffsetParsed().parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 6, 20, 30, 0, DateTimeZone.forOffsetHours(-4)); [EOL]     assertEquals(expect, g.withOffsetParsed().parseMutableDateTime("2004-06-09T06:20:30-04:00")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     assertEquals(expect, g.withZone(PARIS).withOffsetParsed().parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS); [EOL]     assertEquals(expect, g.withOffsetParsed().withZone(PARIS).parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL] }
public void testWithZone() { [EOL]     assertSame(JulianChronology.getInstance(TOKYO), JulianChronology.getInstance(TOKYO).withZone(TOKYO)); [EOL]     assertSame(JulianChronology.getInstance(LONDON), JulianChronology.getInstance(TOKYO).withZone(LONDON)); [EOL]     assertSame(JulianChronology.getInstance(PARIS), JulianChronology.getInstance(TOKYO).withZone(PARIS)); [EOL]     assertSame(JulianChronology.getInstance(LONDON), JulianChronology.getInstance(TOKYO).withZone(null)); [EOL]     assertSame(JulianChronology.getInstance(PARIS), JulianChronology.getInstance().withZone(PARIS)); [EOL]     assertSame(JulianChronology.getInstance(PARIS), JulianChronology.getInstanceUTC().withZone(PARIS)); [EOL] }
public void testWithZone() { [EOL]     assertSame(JulianChronology.getInstance(TOKYO), JulianChronology.getInstance(TOKYO).withZone(TOKYO)); [EOL]     assertSame(JulianChronology.getInstance(LONDON), JulianChronology.getInstance(TOKYO).withZone(LONDON)); [EOL]     assertSame(JulianChronology.getInstance(PARIS), JulianChronology.getInstance(TOKYO).withZone(PARIS)); [EOL]     assertSame(JulianChronology.getInstance(LONDON), JulianChronology.getInstance(TOKYO).withZone(null)); [EOL]     assertSame(JulianChronology.getInstance(PARIS), JulianChronology.getInstance().withZone(PARIS)); [EOL]     assertSame(JulianChronology.getInstance(PARIS), JulianChronology.getInstanceUTC().withZone(PARIS)); [EOL] }
public void testWithZone() { [EOL]     assertSame(JulianChronology.getInstance(TOKYO), JulianChronology.getInstance(TOKYO).withZone(TOKYO)); [EOL]     assertSame(JulianChronology.getInstance(LONDON), JulianChronology.getInstance(TOKYO).withZone(LONDON)); [EOL]     assertSame(JulianChronology.getInstance(PARIS), JulianChronology.getInstance(TOKYO).withZone(PARIS)); [EOL]     assertSame(JulianChronology.getInstance(LONDON), JulianChronology.getInstance(TOKYO).withZone(null)); [EOL]     assertSame(JulianChronology.getInstance(PARIS), JulianChronology.getInstance().withZone(PARIS)); [EOL]     assertSame(JulianChronology.getInstance(PARIS), JulianChronology.getInstanceUTC().withZone(PARIS)); [EOL] }
public void testConstructor_badconverterObject() throws Throwable { [EOL]     try { [EOL]         ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE); [EOL]         Instant test = new Instant(new Integer(0)); [EOL]         assertEquals(ISOChronology.getInstanceUTC(), test.getChronology()); [EOL]         assertEquals(0L, test.getMillis()); [EOL]     } finally { [EOL]         ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE); [EOL]     } [EOL] }
public void testGetChronology_Object_Zone() throws Exception { [EOL]     assertEquals(ISO_PARIS, ReadableInstantConverter.INSTANCE.getChronology(new Instant(123L), PARIS)); [EOL]     assertEquals(ISO_PARIS, ReadableInstantConverter.INSTANCE.getChronology(new DateTime(123L), PARIS)); [EOL]     assertEquals(ISO, ReadableInstantConverter.INSTANCE.getChronology(new Instant(123L), DateTimeZone.getDefault())); [EOL]     assertEquals(ISO, ReadableInstantConverter.INSTANCE.getChronology(new DateTime(123L), DateTimeZone.getDefault())); [EOL]     assertEquals(ISO, ReadableInstantConverter.INSTANCE.getChronology(new Instant(123L), (DateTimeZone) null)); [EOL]     assertEquals(ISO, ReadableInstantConverter.INSTANCE.getChronology(new DateTime(123L), (DateTimeZone) null)); [EOL]     assertEquals(ISO_PARIS, ReadableInstantConverter.INSTANCE.getChronology(new DateTime(123L, new MockBadChronology()), PARIS)); [EOL]     MutableDateTime mdt = new MutableDateTime() { [EOL]  [EOL]         public Chronology getChronology() { [EOL]             return null; [EOL]         } [EOL]     }; [EOL]     assertEquals(ISO_PARIS, ReadableInstantConverter.INSTANCE.getChronology(mdt, PARIS)); [EOL] }
public void testGetChronology_Object_Zone() throws Exception { [EOL]     assertEquals(ISO_PARIS, ReadableInstantConverter.INSTANCE.getChronology(new Instant(123L), PARIS)); [EOL]     assertEquals(ISO_PARIS, ReadableInstantConverter.INSTANCE.getChronology(new DateTime(123L), PARIS)); [EOL]     assertEquals(ISO, ReadableInstantConverter.INSTANCE.getChronology(new Instant(123L), DateTimeZone.getDefault())); [EOL]     assertEquals(ISO, ReadableInstantConverter.INSTANCE.getChronology(new DateTime(123L), DateTimeZone.getDefault())); [EOL]     assertEquals(ISO, ReadableInstantConverter.INSTANCE.getChronology(new Instant(123L), (DateTimeZone) null)); [EOL]     assertEquals(ISO, ReadableInstantConverter.INSTANCE.getChronology(new DateTime(123L), (DateTimeZone) null)); [EOL]     assertEquals(ISO_PARIS, ReadableInstantConverter.INSTANCE.getChronology(new DateTime(123L, new MockBadChronology()), PARIS)); [EOL]     MutableDateTime mdt = new MutableDateTime() { [EOL]  [EOL]         public Chronology getChronology() { [EOL]             return null; [EOL]         } [EOL]     }; [EOL]     assertEquals(ISO_PARIS, ReadableInstantConverter.INSTANCE.getChronology(mdt, PARIS)); [EOL] }
public void testGetChronology_Object_Zone() throws Exception { [EOL]     assertEquals(ISO_PARIS, ReadableInstantConverter.INSTANCE.getChronology(new Instant(123L), PARIS)); [EOL]     assertEquals(ISO_PARIS, ReadableInstantConverter.INSTANCE.getChronology(new DateTime(123L), PARIS)); [EOL]     assertEquals(ISO, ReadableInstantConverter.INSTANCE.getChronology(new Instant(123L), DateTimeZone.getDefault())); [EOL]     assertEquals(ISO, ReadableInstantConverter.INSTANCE.getChronology(new DateTime(123L), DateTimeZone.getDefault())); [EOL]     assertEquals(ISO, ReadableInstantConverter.INSTANCE.getChronology(new Instant(123L), (DateTimeZone) null)); [EOL]     assertEquals(ISO, ReadableInstantConverter.INSTANCE.getChronology(new DateTime(123L), (DateTimeZone) null)); [EOL]     assertEquals(ISO_PARIS, ReadableInstantConverter.INSTANCE.getChronology(new DateTime(123L, new MockBadChronology()), PARIS)); [EOL]     MutableDateTime mdt = new MutableDateTime() { [EOL]  [EOL]         public Chronology getChronology() { [EOL]             return null; [EOL]         } [EOL]     }; [EOL]     assertEquals(ISO_PARIS, ReadableInstantConverter.INSTANCE.getChronology(mdt, PARIS)); [EOL] }
public void testGetInstantMillis_Object_Chronology() throws Exception { [EOL]     assertEquals(123L, ReadableInstantConverter.INSTANCE.getInstantMillis(new Instant(123L), JULIAN)); [EOL]     assertEquals(123L, ReadableInstantConverter.INSTANCE.getInstantMillis(new DateTime(123L), JULIAN)); [EOL]     assertEquals(123L, ReadableInstantConverter.INSTANCE.getInstantMillis(new Instant(123L), (Chronology) null)); [EOL]     assertEquals(123L, ReadableInstantConverter.INSTANCE.getInstantMillis(new DateTime(123L), (Chronology) null)); [EOL] }
public void testGetInstantMillis_Object_Chronology() throws Exception { [EOL]     assertEquals(123L, ReadableInstantConverter.INSTANCE.getInstantMillis(new Instant(123L), JULIAN)); [EOL]     assertEquals(123L, ReadableInstantConverter.INSTANCE.getInstantMillis(new DateTime(123L), JULIAN)); [EOL]     assertEquals(123L, ReadableInstantConverter.INSTANCE.getInstantMillis(new Instant(123L), (Chronology) null)); [EOL]     assertEquals(123L, ReadableInstantConverter.INSTANCE.getInstantMillis(new DateTime(123L), (Chronology) null)); [EOL] }
public void testWithUTC() { [EOL]     assertSame(BuddhistChronology.getInstanceUTC(), BuddhistChronology.getInstance(LONDON).withUTC()); [EOL]     assertSame(BuddhistChronology.getInstanceUTC(), BuddhistChronology.getInstance(TOKYO).withUTC()); [EOL]     assertSame(BuddhistChronology.getInstanceUTC(), BuddhistChronology.getInstanceUTC().withUTC()); [EOL]     assertSame(BuddhistChronology.getInstanceUTC(), BuddhistChronology.getInstance().withUTC()); [EOL] }
public void testSerializedBuddhistChronology() throws Exception { [EOL]     BuddhistChronology test = BuddhistChronology.getInstance(PARIS); [EOL]     loadAndCompare(test, "BuddhistChronology", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedBuddhistChronology() throws Exception { [EOL]     BuddhistChronology test = BuddhistChronology.getInstance(PARIS); [EOL]     loadAndCompare(test, "BuddhistChronology", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedBuddhistChronology() throws Exception { [EOL]     BuddhistChronology test = BuddhistChronology.getInstance(PARIS); [EOL]     loadAndCompare(test, "BuddhistChronology", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedBuddhistChronology() throws Exception { [EOL]     BuddhistChronology test = BuddhistChronology.getInstance(PARIS); [EOL]     loadAndCompare(test, "BuddhistChronology", true); [EOL]     inlineCompare(test, true); [EOL] }
public void test_hashCode() { [EOL]     assertEquals(true, iField.hashCode() == iField.hashCode()); [EOL]     assertEquals(false, iField.hashCode() == ISOChronology.getInstance().minutes().hashCode()); [EOL]     DurationField dummy = new PreciseDurationField(DurationFieldType.seconds(), 0); [EOL]     assertEquals(false, iField.hashCode() == dummy.hashCode()); [EOL]     dummy = new PreciseDurationField(DurationFieldType.seconds(), 1000); [EOL]     assertEquals(true, iField.hashCode() == dummy.hashCode()); [EOL]     dummy = new PreciseDurationField(DurationFieldType.millis(), 1000); [EOL]     assertEquals(false, iField.hashCode() == dummy.hashCode()); [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void testConstructor_RI_RP3() throws Throwable { [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW, ISOChronology.getInstanceUTC()); [EOL]     Period dur = new Period(0, 6, 0, 3, 1, 0, 0, 0, PeriodType.standard()); [EOL]     long result = TEST_TIME_NOW; [EOL]     result = ISOChronology.getInstanceUTC().months().add(result, 6); [EOL]     result = ISOChronology.getInstanceUTC().days().add(result, 3); [EOL]     result = ISOChronology.getInstanceUTC().hours().add(result, 1); [EOL]     MutableInterval test = new MutableInterval(dt, dur); [EOL]     assertEquals(dt.getMillis(), test.getStartMillis()); [EOL]     assertEquals(result, test.getEndMillis()); [EOL] }
public void testPropertyToIntervalMonthOfYear() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     Interval testInterval = test.monthOfYear().toInterval(); [EOL]     assertEquals(new MutableDateTime(2004, 6, 1, 0, 0, 0, 0), testInterval.getStart()); [EOL]     assertEquals(new MutableDateTime(2004, 7, 1, 0, 0, 0, 0), testInterval.getEnd()); [EOL]     assertEquals(new MutableDateTime(2004, 6, 9, 13, 23, 43, 53), test); [EOL] }
public void testParseMutableDateTime_offsetParsed() { [EOL]     MutableDateTime expect = null; [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     assertEquals(expect, g.withOffsetParsed().parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 6, 20, 30, 0, DateTimeZone.forOffsetHours(-4)); [EOL]     assertEquals(expect, g.withOffsetParsed().parseMutableDateTime("2004-06-09T06:20:30-04:00")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     assertEquals(expect, g.withZone(PARIS).withOffsetParsed().parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS); [EOL]     assertEquals(expect, g.withOffsetParsed().withZone(PARIS).parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL] }
public void testParseMutableDateTime_offsetParsed() { [EOL]     MutableDateTime expect = null; [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     assertEquals(expect, g.withOffsetParsed().parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 6, 20, 30, 0, DateTimeZone.forOffsetHours(-4)); [EOL]     assertEquals(expect, g.withOffsetParsed().parseMutableDateTime("2004-06-09T06:20:30-04:00")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     assertEquals(expect, g.withZone(PARIS).withOffsetParsed().parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS); [EOL]     assertEquals(expect, g.withOffsetParsed().withZone(PARIS).parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL] }
public void testParseMutableDateTime_offsetParsed() { [EOL]     MutableDateTime expect = null; [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     assertEquals(expect, g.withOffsetParsed().parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 6, 20, 30, 0, DateTimeZone.forOffsetHours(-4)); [EOL]     assertEquals(expect, g.withOffsetParsed().parseMutableDateTime("2004-06-09T06:20:30-04:00")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     assertEquals(expect, g.withZone(PARIS).withOffsetParsed().parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS); [EOL]     assertEquals(expect, g.withOffsetParsed().withZone(PARIS).parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL] }
public void testParseMutableDateTime_offsetParsed() { [EOL]     MutableDateTime expect = null; [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     assertEquals(expect, g.withOffsetParsed().parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 6, 20, 30, 0, DateTimeZone.forOffsetHours(-4)); [EOL]     assertEquals(expect, g.withOffsetParsed().parseMutableDateTime("2004-06-09T06:20:30-04:00")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     assertEquals(expect, g.withZone(PARIS).withOffsetParsed().parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS); [EOL]     assertEquals(expect, g.withOffsetParsed().withZone(PARIS).parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL] }
public void testParseMutableDateTime_offsetParsed() { [EOL]     MutableDateTime expect = null; [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     assertEquals(expect, g.withOffsetParsed().parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 6, 20, 30, 0, DateTimeZone.forOffsetHours(-4)); [EOL]     assertEquals(expect, g.withOffsetParsed().parseMutableDateTime("2004-06-09T06:20:30-04:00")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     assertEquals(expect, g.withZone(PARIS).withOffsetParsed().parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS); [EOL]     assertEquals(expect, g.withOffsetParsed().withZone(PARIS).parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL] }
public void testParseMutableDateTime_offsetParsed() { [EOL]     MutableDateTime expect = null; [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     assertEquals(expect, g.withOffsetParsed().parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 6, 20, 30, 0, DateTimeZone.forOffsetHours(-4)); [EOL]     assertEquals(expect, g.withOffsetParsed().parseMutableDateTime("2004-06-09T06:20:30-04:00")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     assertEquals(expect, g.withZone(PARIS).withOffsetParsed().parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS); [EOL]     assertEquals(expect, g.withOffsetParsed().withZone(PARIS).parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void testMinusWeeks_int() { [EOL]     DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.minusWeeks(1); [EOL]     DateMidnight expected = new DateMidnight(2002, 4, 26, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusWeeks(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusWeeks_int() { [EOL]     DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.minusWeeks(1); [EOL]     DateMidnight expected = new DateMidnight(2002, 4, 26, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusWeeks(0); [EOL]     assertSame(test, result); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testConstructor_badconverterObject() throws Throwable { [EOL]     try { [EOL]         ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE); [EOL]         Instant test = new Instant(new Integer(0)); [EOL]         assertEquals(ISOChronology.getInstanceUTC(), test.getChronology()); [EOL]         assertEquals(0L, test.getMillis()); [EOL]     } finally { [EOL]         ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE); [EOL]     } [EOL] }
public void testConstructor_badconverterObject() throws Throwable { [EOL]     try { [EOL]         ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE); [EOL]         Instant test = new Instant(new Integer(0)); [EOL]         assertEquals(ISOChronology.getInstanceUTC(), test.getChronology()); [EOL]         assertEquals(0L, test.getMillis()); [EOL]     } finally { [EOL]         ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE); [EOL]     } [EOL] }
public void testConstructor_badconverterObject() throws Throwable { [EOL]     try { [EOL]         ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE); [EOL]         Instant test = new Instant(new Integer(0)); [EOL]         assertEquals(ISOChronology.getInstanceUTC(), test.getChronology()); [EOL]         assertEquals(0L, test.getMillis()); [EOL]     } finally { [EOL]         ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE); [EOL]     } [EOL] }
public void testAddInstantConverter4() { [EOL]     InstantConverter removed = ConverterManager.getInstance().addInstantConverter(null); [EOL]     assertEquals(null, removed); [EOL]     assertEquals(6, ConverterManager.getInstance().getInstantConverters().length); [EOL] }
public void testAddInstantConverter4() { [EOL]     InstantConverter removed = ConverterManager.getInstance().addInstantConverter(null); [EOL]     assertEquals(null, removed); [EOL]     assertEquals(6, ConverterManager.getInstance().getInstantConverters().length); [EOL] }
public void testAddInstantConverter4() { [EOL]     InstantConverter removed = ConverterManager.getInstance().addInstantConverter(null); [EOL]     assertEquals(null, removed); [EOL]     assertEquals(6, ConverterManager.getInstance().getInstantConverters().length); [EOL] }
public void testAddPartialConverter4() { [EOL]     PartialConverter removed = ConverterManager.getInstance().addPartialConverter(null); [EOL]     assertEquals(null, removed); [EOL]     assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length); [EOL] }
public void testGetPeriodConverterRemovedNull() { [EOL]     try { [EOL]         ConverterManager.getInstance().removePeriodConverter(NullConverter.INSTANCE); [EOL]         try { [EOL]             ConverterManager.getInstance().getPeriodConverter(null); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]     } finally { [EOL]         ConverterManager.getInstance().addPeriodConverter(NullConverter.INSTANCE); [EOL]     } [EOL]     assertEquals(PERIOD_SIZE, ConverterManager.getInstance().getPeriodConverters().length); [EOL] }
public void testGetPeriodConverterRemovedNull() { [EOL]     try { [EOL]         ConverterManager.getInstance().removePeriodConverter(NullConverter.INSTANCE); [EOL]         try { [EOL]             ConverterManager.getInstance().getPeriodConverter(null); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]     } finally { [EOL]         ConverterManager.getInstance().addPeriodConverter(NullConverter.INSTANCE); [EOL]     } [EOL]     assertEquals(PERIOD_SIZE, ConverterManager.getInstance().getPeriodConverters().length); [EOL] }
public void testGetPeriodConverterRemovedNull() { [EOL]     try { [EOL]         ConverterManager.getInstance().removePeriodConverter(NullConverter.INSTANCE); [EOL]         try { [EOL]             ConverterManager.getInstance().getPeriodConverter(null); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]     } finally { [EOL]         ConverterManager.getInstance().addPeriodConverter(NullConverter.INSTANCE); [EOL]     } [EOL]     assertEquals(PERIOD_SIZE, ConverterManager.getInstance().getPeriodConverters().length); [EOL] }
public void testGetPeriodConverterRemovedNull() { [EOL]     try { [EOL]         ConverterManager.getInstance().removePeriodConverter(NullConverter.INSTANCE); [EOL]         try { [EOL]             ConverterManager.getInstance().getPeriodConverter(null); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]     } finally { [EOL]         ConverterManager.getInstance().addPeriodConverter(NullConverter.INSTANCE); [EOL]     } [EOL]     assertEquals(PERIOD_SIZE, ConverterManager.getInstance().getPeriodConverters().length); [EOL] }
public void testGetPeriodConverterRemovedNull() { [EOL]     try { [EOL]         ConverterManager.getInstance().removePeriodConverter(NullConverter.INSTANCE); [EOL]         try { [EOL]             ConverterManager.getInstance().getPeriodConverter(null); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]     } finally { [EOL]         ConverterManager.getInstance().addPeriodConverter(NullConverter.INSTANCE); [EOL]     } [EOL]     assertEquals(PERIOD_SIZE, ConverterManager.getInstance().getPeriodConverters().length); [EOL] }
public void testGetPeriodConverterRemovedNull() { [EOL]     try { [EOL]         ConverterManager.getInstance().removePeriodConverter(NullConverter.INSTANCE); [EOL]         try { [EOL]             ConverterManager.getInstance().getPeriodConverter(null); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]     } finally { [EOL]         ConverterManager.getInstance().addPeriodConverter(NullConverter.INSTANCE); [EOL]     } [EOL]     assertEquals(PERIOD_SIZE, ConverterManager.getInstance().getPeriodConverters().length); [EOL] }
public void testGetPeriodConverterRemovedNull() { [EOL]     try { [EOL]         ConverterManager.getInstance().removePeriodConverter(NullConverter.INSTANCE); [EOL]         try { [EOL]             ConverterManager.getInstance().getPeriodConverter(null); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]     } finally { [EOL]         ConverterManager.getInstance().addPeriodConverter(NullConverter.INSTANCE); [EOL]     } [EOL]     assertEquals(PERIOD_SIZE, ConverterManager.getInstance().getPeriodConverters().length); [EOL] }
public void testGetPeriodConverterRemovedNull() { [EOL]     try { [EOL]         ConverterManager.getInstance().removePeriodConverter(NullConverter.INSTANCE); [EOL]         try { [EOL]             ConverterManager.getInstance().getPeriodConverter(null); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]     } finally { [EOL]         ConverterManager.getInstance().addPeriodConverter(NullConverter.INSTANCE); [EOL]     } [EOL]     assertEquals(PERIOD_SIZE, ConverterManager.getInstance().getPeriodConverters().length); [EOL] }
public void testGetPeriodConverterRemovedNull() { [EOL]     try { [EOL]         ConverterManager.getInstance().removePeriodConverter(NullConverter.INSTANCE); [EOL]         try { [EOL]             ConverterManager.getInstance().getPeriodConverter(null); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]     } finally { [EOL]         ConverterManager.getInstance().addPeriodConverter(NullConverter.INSTANCE); [EOL]     } [EOL]     assertEquals(PERIOD_SIZE, ConverterManager.getInstance().getPeriodConverters().length); [EOL] }
public void testGetPeriodConverterRemovedNull() { [EOL]     try { [EOL]         ConverterManager.getInstance().removePeriodConverter(NullConverter.INSTANCE); [EOL]         try { [EOL]             ConverterManager.getInstance().getPeriodConverter(null); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]     } finally { [EOL]         ConverterManager.getInstance().addPeriodConverter(NullConverter.INSTANCE); [EOL]     } [EOL]     assertEquals(PERIOD_SIZE, ConverterManager.getInstance().getPeriodConverters().length); [EOL] }
public void testGetPeriodConverterRemovedNull() { [EOL]     try { [EOL]         ConverterManager.getInstance().removePeriodConverter(NullConverter.INSTANCE); [EOL]         try { [EOL]             ConverterManager.getInstance().getPeriodConverter(null); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]     } finally { [EOL]         ConverterManager.getInstance().addPeriodConverter(NullConverter.INSTANCE); [EOL]     } [EOL]     assertEquals(PERIOD_SIZE, ConverterManager.getInstance().getPeriodConverters().length); [EOL] }
public void testGetPeriodConverterRemovedNull() { [EOL]     try { [EOL]         ConverterManager.getInstance().removePeriodConverter(NullConverter.INSTANCE); [EOL]         try { [EOL]             ConverterManager.getInstance().getPeriodConverter(null); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]     } finally { [EOL]         ConverterManager.getInstance().addPeriodConverter(NullConverter.INSTANCE); [EOL]     } [EOL]     assertEquals(PERIOD_SIZE, ConverterManager.getInstance().getPeriodConverters().length); [EOL] }
public void testGetPeriodConverterRemovedNull() { [EOL]     try { [EOL]         ConverterManager.getInstance().removePeriodConverter(NullConverter.INSTANCE); [EOL]         try { [EOL]             ConverterManager.getInstance().getPeriodConverter(null); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]     } finally { [EOL]         ConverterManager.getInstance().addPeriodConverter(NullConverter.INSTANCE); [EOL]     } [EOL]     assertEquals(PERIOD_SIZE, ConverterManager.getInstance().getPeriodConverters().length); [EOL] }
public void testRemoveIntervalConverter3() { [EOL]     IntervalConverter removed = ConverterManager.getInstance().removeIntervalConverter(null); [EOL]     assertEquals(null, removed); [EOL]     assertEquals(INTERVAL_SIZE, ConverterManager.getInstance().getIntervalConverters().length); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void testStaticGetDateOnlyInstance() { [EOL]     DateTimeComparator c = DateTimeComparator.getDateOnlyInstance(); [EOL]     assertEquals(DateTimeFieldType.dayOfYear(), c.getLowerLimit()); [EOL]     assertEquals(null, c.getUpperLimit()); [EOL]     assertEquals("DateTimeComparator[dayOfYear-]", c.toString()); [EOL]     assertSame(DateTimeComparator.getDateOnlyInstance(), DateTimeComparator.getDateOnlyInstance()); [EOL] }
public void testMinute() { [EOL]     aDateTime = getADate("1969-12-31T23:58:00"); [EOL]     bDateTime = getADate("1969-12-31T23:59:00"); [EOL]     assertEquals("MinuteM1a", -1, cMinute.compare(aDateTime, bDateTime)); [EOL]     assertEquals("MinuteP1a", 1, cMinute.compare(bDateTime, aDateTime)); [EOL]     aDateTime = getADate("1970-01-01T00:00:00"); [EOL]     bDateTime = getADate("1970-01-01T00:01:00"); [EOL]     assertEquals("MinuteM1b", -1, cMinute.compare(aDateTime, bDateTime)); [EOL]     assertEquals("MinuteP1b", 1, cMinute.compare(bDateTime, aDateTime)); [EOL] }
public void testStaticGetDateOnlyInstance() { [EOL]     DateTimeComparator c = DateTimeComparator.getDateOnlyInstance(); [EOL]     assertEquals(DateTimeFieldType.dayOfYear(), c.getLowerLimit()); [EOL]     assertEquals(null, c.getUpperLimit()); [EOL]     assertEquals("DateTimeComparator[dayOfYear-]", c.toString()); [EOL]     assertSame(DateTimeComparator.getDateOnlyInstance(), DateTimeComparator.getDateOnlyInstance()); [EOL] }
public void testStaticGetDateOnlyInstance() { [EOL]     DateTimeComparator c = DateTimeComparator.getDateOnlyInstance(); [EOL]     assertEquals(DateTimeFieldType.dayOfYear(), c.getLowerLimit()); [EOL]     assertEquals(null, c.getUpperLimit()); [EOL]     assertEquals("DateTimeComparator[dayOfYear-]", c.toString()); [EOL]     assertSame(DateTimeComparator.getDateOnlyInstance(), DateTimeComparator.getDateOnlyInstance()); [EOL] }
public void testStaticGetDateOnlyInstance() { [EOL]     DateTimeComparator c = DateTimeComparator.getDateOnlyInstance(); [EOL]     assertEquals(DateTimeFieldType.dayOfYear(), c.getLowerLimit()); [EOL]     assertEquals(null, c.getUpperLimit()); [EOL]     assertEquals("DateTimeComparator[dayOfYear-]", c.toString()); [EOL]     assertSame(DateTimeComparator.getDateOnlyInstance(), DateTimeComparator.getDateOnlyInstance()); [EOL] }
public void testStaticGetDateOnlyInstance() { [EOL]     DateTimeComparator c = DateTimeComparator.getDateOnlyInstance(); [EOL]     assertEquals(DateTimeFieldType.dayOfYear(), c.getLowerLimit()); [EOL]     assertEquals(null, c.getUpperLimit()); [EOL]     assertEquals("DateTimeComparator[dayOfYear-]", c.toString()); [EOL]     assertSame(DateTimeComparator.getDateOnlyInstance(), DateTimeComparator.getDateOnlyInstance()); [EOL] }
public void testStaticGetDateOnlyInstance() { [EOL]     DateTimeComparator c = DateTimeComparator.getDateOnlyInstance(); [EOL]     assertEquals(DateTimeFieldType.dayOfYear(), c.getLowerLimit()); [EOL]     assertEquals(null, c.getUpperLimit()); [EOL]     assertEquals("DateTimeComparator[dayOfYear-]", c.toString()); [EOL]     assertSame(DateTimeComparator.getDateOnlyInstance(), DateTimeComparator.getDateOnlyInstance()); [EOL] }
public void testToMutablePeriod() { [EOL]     Single test = new Single(20); [EOL]     MutablePeriod expected = new MutablePeriod(0, 0, 0, 20, 0, 0, 0, 0); [EOL]     assertEquals(expected, test.toMutablePeriod()); [EOL] }
public void testToMutablePeriod() { [EOL]     Single test = new Single(20); [EOL]     MutablePeriod expected = new MutablePeriod(0, 0, 0, 20, 0, 0, 0, 0); [EOL]     assertEquals(expected, test.toMutablePeriod()); [EOL] }
public void testToMutablePeriod() { [EOL]     Single test = new Single(20); [EOL]     MutablePeriod expected = new MutablePeriod(0, 0, 0, 20, 0, 0, 0, 0); [EOL]     assertEquals(expected, test.toMutablePeriod()); [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testConstructor_long_long1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testConstructor_long_long1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testConstructor_long_long1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testConstructor_long_long1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testConstructor_long_long1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testConstructor_long_long1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testToStandardSeconds() { [EOL]     Period test = new Period(0, 0, 0, 0, 0, 0, 7, 8); [EOL]     assertEquals(7, test.toStandardSeconds().getSeconds()); [EOL]     test = new Period(0, 0, 0, 0, 0, 1, 3, 0); [EOL]     assertEquals(63, test.toStandardSeconds().getSeconds()); [EOL]     test = new Period(0, 0, 0, 0, 0, 0, 0, 1000); [EOL]     assertEquals(1, test.toStandardSeconds().getSeconds()); [EOL]     test = new Period(0, 0, 0, 0, 0, 0, Integer.MAX_VALUE, 0); [EOL]     assertEquals(Integer.MAX_VALUE, test.toStandardSeconds().getSeconds()); [EOL]     test = new Period(0, 0, 0, 0, 0, 0, 20, Integer.MAX_VALUE); [EOL]     long expected = 20; [EOL]     expected += ((long) Integer.MAX_VALUE) / DateTimeConstants.MILLIS_PER_SECOND; [EOL]     assertEquals(expected, test.toStandardSeconds().getSeconds()); [EOL]     test = new Period(0, 0, 0, 0, 0, 0, Integer.MAX_VALUE, 1000); [EOL]     try { [EOL]         test.toStandardSeconds(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testToStandardSeconds() { [EOL]     Period test = new Period(0, 0, 0, 0, 0, 0, 7, 8); [EOL]     assertEquals(7, test.toStandardSeconds().getSeconds()); [EOL]     test = new Period(0, 0, 0, 0, 0, 1, 3, 0); [EOL]     assertEquals(63, test.toStandardSeconds().getSeconds()); [EOL]     test = new Period(0, 0, 0, 0, 0, 0, 0, 1000); [EOL]     assertEquals(1, test.toStandardSeconds().getSeconds()); [EOL]     test = new Period(0, 0, 0, 0, 0, 0, Integer.MAX_VALUE, 0); [EOL]     assertEquals(Integer.MAX_VALUE, test.toStandardSeconds().getSeconds()); [EOL]     test = new Period(0, 0, 0, 0, 0, 0, 20, Integer.MAX_VALUE); [EOL]     long expected = 20; [EOL]     expected += ((long) Integer.MAX_VALUE) / DateTimeConstants.MILLIS_PER_SECOND; [EOL]     assertEquals(expected, test.toStandardSeconds().getSeconds()); [EOL]     test = new Period(0, 0, 0, 0, 0, 0, Integer.MAX_VALUE, 1000); [EOL]     try { [EOL]         test.toStandardSeconds(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testToStandardSeconds() { [EOL]     Period test = new Period(0, 0, 0, 0, 0, 0, 7, 8); [EOL]     assertEquals(7, test.toStandardSeconds().getSeconds()); [EOL]     test = new Period(0, 0, 0, 0, 0, 1, 3, 0); [EOL]     assertEquals(63, test.toStandardSeconds().getSeconds()); [EOL]     test = new Period(0, 0, 0, 0, 0, 0, 0, 1000); [EOL]     assertEquals(1, test.toStandardSeconds().getSeconds()); [EOL]     test = new Period(0, 0, 0, 0, 0, 0, Integer.MAX_VALUE, 0); [EOL]     assertEquals(Integer.MAX_VALUE, test.toStandardSeconds().getSeconds()); [EOL]     test = new Period(0, 0, 0, 0, 0, 0, 20, Integer.MAX_VALUE); [EOL]     long expected = 20; [EOL]     expected += ((long) Integer.MAX_VALUE) / DateTimeConstants.MILLIS_PER_SECOND; [EOL]     assertEquals(expected, test.toStandardSeconds().getSeconds()); [EOL]     test = new Period(0, 0, 0, 0, 0, 0, Integer.MAX_VALUE, 1000); [EOL]     try { [EOL]         test.toStandardSeconds(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testToStandardSeconds() { [EOL]     Period test = new Period(0, 0, 0, 0, 0, 0, 7, 8); [EOL]     assertEquals(7, test.toStandardSeconds().getSeconds()); [EOL]     test = new Period(0, 0, 0, 0, 0, 1, 3, 0); [EOL]     assertEquals(63, test.toStandardSeconds().getSeconds()); [EOL]     test = new Period(0, 0, 0, 0, 0, 0, 0, 1000); [EOL]     assertEquals(1, test.toStandardSeconds().getSeconds()); [EOL]     test = new Period(0, 0, 0, 0, 0, 0, Integer.MAX_VALUE, 0); [EOL]     assertEquals(Integer.MAX_VALUE, test.toStandardSeconds().getSeconds()); [EOL]     test = new Period(0, 0, 0, 0, 0, 0, 20, Integer.MAX_VALUE); [EOL]     long expected = 20; [EOL]     expected += ((long) Integer.MAX_VALUE) / DateTimeConstants.MILLIS_PER_SECOND; [EOL]     assertEquals(expected, test.toStandardSeconds().getSeconds()); [EOL]     test = new Period(0, 0, 0, 0, 0, 0, Integer.MAX_VALUE, 1000); [EOL]     try { [EOL]         test.toStandardSeconds(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testToStandardSeconds() { [EOL]     Period test = new Period(0, 0, 0, 0, 0, 0, 7, 8); [EOL]     assertEquals(7, test.toStandardSeconds().getSeconds()); [EOL]     test = new Period(0, 0, 0, 0, 0, 1, 3, 0); [EOL]     assertEquals(63, test.toStandardSeconds().getSeconds()); [EOL]     test = new Period(0, 0, 0, 0, 0, 0, 0, 1000); [EOL]     assertEquals(1, test.toStandardSeconds().getSeconds()); [EOL]     test = new Period(0, 0, 0, 0, 0, 0, Integer.MAX_VALUE, 0); [EOL]     assertEquals(Integer.MAX_VALUE, test.toStandardSeconds().getSeconds()); [EOL]     test = new Period(0, 0, 0, 0, 0, 0, 20, Integer.MAX_VALUE); [EOL]     long expected = 20; [EOL]     expected += ((long) Integer.MAX_VALUE) / DateTimeConstants.MILLIS_PER_SECOND; [EOL]     assertEquals(expected, test.toStandardSeconds().getSeconds()); [EOL]     test = new Period(0, 0, 0, 0, 0, 0, Integer.MAX_VALUE, 1000); [EOL]     try { [EOL]         test.toStandardSeconds(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testToStandardSeconds() { [EOL]     Period test = new Period(0, 0, 0, 0, 0, 0, 7, 8); [EOL]     assertEquals(7, test.toStandardSeconds().getSeconds()); [EOL]     test = new Period(0, 0, 0, 0, 0, 1, 3, 0); [EOL]     assertEquals(63, test.toStandardSeconds().getSeconds()); [EOL]     test = new Period(0, 0, 0, 0, 0, 0, 0, 1000); [EOL]     assertEquals(1, test.toStandardSeconds().getSeconds()); [EOL]     test = new Period(0, 0, 0, 0, 0, 0, Integer.MAX_VALUE, 0); [EOL]     assertEquals(Integer.MAX_VALUE, test.toStandardSeconds().getSeconds()); [EOL]     test = new Period(0, 0, 0, 0, 0, 0, 20, Integer.MAX_VALUE); [EOL]     long expected = 20; [EOL]     expected += ((long) Integer.MAX_VALUE) / DateTimeConstants.MILLIS_PER_SECOND; [EOL]     assertEquals(expected, test.toStandardSeconds().getSeconds()); [EOL]     test = new Period(0, 0, 0, 0, 0, 0, Integer.MAX_VALUE, 1000); [EOL]     try { [EOL]         test.toStandardSeconds(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testToStandardSeconds() { [EOL]     Period test = new Period(0, 0, 0, 0, 0, 0, 7, 8); [EOL]     assertEquals(7, test.toStandardSeconds().getSeconds()); [EOL]     test = new Period(0, 0, 0, 0, 0, 1, 3, 0); [EOL]     assertEquals(63, test.toStandardSeconds().getSeconds()); [EOL]     test = new Period(0, 0, 0, 0, 0, 0, 0, 1000); [EOL]     assertEquals(1, test.toStandardSeconds().getSeconds()); [EOL]     test = new Period(0, 0, 0, 0, 0, 0, Integer.MAX_VALUE, 0); [EOL]     assertEquals(Integer.MAX_VALUE, test.toStandardSeconds().getSeconds()); [EOL]     test = new Period(0, 0, 0, 0, 0, 0, 20, Integer.MAX_VALUE); [EOL]     long expected = 20; [EOL]     expected += ((long) Integer.MAX_VALUE) / DateTimeConstants.MILLIS_PER_SECOND; [EOL]     assertEquals(expected, test.toStandardSeconds().getSeconds()); [EOL]     test = new Period(0, 0, 0, 0, 0, 0, Integer.MAX_VALUE, 1000); [EOL]     try { [EOL]         test.toStandardSeconds(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testFactory_secondsBetween_RPartial() { [EOL]     LocalTime start = new LocalTime(12, 0, 3); [EOL]     LocalTime end1 = new LocalTime(12, 0, 6); [EOL]     @SuppressWarnings("deprecation") [EOL]     TimeOfDay end2 = new TimeOfDay(12, 0, 9); [EOL]     assertEquals(3, Seconds.secondsBetween(start, end1).getSeconds()); [EOL]     assertEquals(0, Seconds.secondsBetween(start, start).getSeconds()); [EOL]     assertEquals(0, Seconds.secondsBetween(end1, end1).getSeconds()); [EOL]     assertEquals(-3, Seconds.secondsBetween(end1, start).getSeconds()); [EOL]     assertEquals(6, Seconds.secondsBetween(start, end2).getSeconds()); [EOL] }
public void testFactory_secondsBetween_RPartial() { [EOL]     LocalTime start = new LocalTime(12, 0, 3); [EOL]     LocalTime end1 = new LocalTime(12, 0, 6); [EOL]     @SuppressWarnings("deprecation") [EOL]     TimeOfDay end2 = new TimeOfDay(12, 0, 9); [EOL]     assertEquals(3, Seconds.secondsBetween(start, end1).getSeconds()); [EOL]     assertEquals(0, Seconds.secondsBetween(start, start).getSeconds()); [EOL]     assertEquals(0, Seconds.secondsBetween(end1, end1).getSeconds()); [EOL]     assertEquals(-3, Seconds.secondsBetween(end1, start).getSeconds()); [EOL]     assertEquals(6, Seconds.secondsBetween(start, end2).getSeconds()); [EOL] }
public void testFactory_parseSeconds_String() { [EOL]     assertEquals(0, Seconds.parseSeconds((String) null).getSeconds()); [EOL]     assertEquals(0, Seconds.parseSeconds("PT0S").getSeconds()); [EOL]     assertEquals(1, Seconds.parseSeconds("PT1S").getSeconds()); [EOL]     assertEquals(-3, Seconds.parseSeconds("PT-3S").getSeconds()); [EOL]     assertEquals(2, Seconds.parseSeconds("P0Y0M0DT2S").getSeconds()); [EOL]     assertEquals(2, Seconds.parseSeconds("PT0H2S").getSeconds()); [EOL]     try { [EOL]         Seconds.parseSeconds("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Seconds.parseSeconds("P1DT1S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_parseSeconds_String() { [EOL]     assertEquals(0, Seconds.parseSeconds((String) null).getSeconds()); [EOL]     assertEquals(0, Seconds.parseSeconds("PT0S").getSeconds()); [EOL]     assertEquals(1, Seconds.parseSeconds("PT1S").getSeconds()); [EOL]     assertEquals(-3, Seconds.parseSeconds("PT-3S").getSeconds()); [EOL]     assertEquals(2, Seconds.parseSeconds("P0Y0M0DT2S").getSeconds()); [EOL]     assertEquals(2, Seconds.parseSeconds("PT0H2S").getSeconds()); [EOL]     try { [EOL]         Seconds.parseSeconds("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Seconds.parseSeconds("P1DT1S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_parseSeconds_String() { [EOL]     assertEquals(0, Seconds.parseSeconds((String) null).getSeconds()); [EOL]     assertEquals(0, Seconds.parseSeconds("PT0S").getSeconds()); [EOL]     assertEquals(1, Seconds.parseSeconds("PT1S").getSeconds()); [EOL]     assertEquals(-3, Seconds.parseSeconds("PT-3S").getSeconds()); [EOL]     assertEquals(2, Seconds.parseSeconds("P0Y0M0DT2S").getSeconds()); [EOL]     assertEquals(2, Seconds.parseSeconds("PT0H2S").getSeconds()); [EOL]     try { [EOL]         Seconds.parseSeconds("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Seconds.parseSeconds("P1DT1S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testDurationMonth() { [EOL]     DateTime dt11 = new DateTime(1723, 11, 2, 0, 0, 0, 0, COPTIC_UTC); [EOL]     DateTime dt12 = new DateTime(1723, 12, 2, 0, 0, 0, 0, COPTIC_UTC); [EOL]     DateTime dt13 = new DateTime(1723, 13, 2, 0, 0, 0, 0, COPTIC_UTC); [EOL]     DateTime dt01 = new DateTime(1724, 1, 2, 0, 0, 0, 0, COPTIC_UTC); [EOL]     DurationField fld = dt11.monthOfYear().getDurationField(); [EOL]     assertEquals(COPTIC_UTC.months(), fld); [EOL]     assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1, dt11.getMillis())); [EOL]     assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2, dt11.getMillis())); [EOL]     assertEquals((2L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(3, dt11.getMillis())); [EOL]     assertEquals((3L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(4, dt11.getMillis())); [EOL]     assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1)); [EOL]     assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2)); [EOL]     assertEquals(13L * 30L * MILLIS_PER_DAY, fld.getMillis(13)); [EOL]     assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1L, dt11.getMillis())); [EOL]     assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2L, dt11.getMillis())); [EOL]     assertEquals((2L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(3L, dt11.getMillis())); [EOL]     assertEquals((3L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(4L, dt11.getMillis())); [EOL]     assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1L)); [EOL]     assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2L)); [EOL]     assertEquals(13L * 30L * MILLIS_PER_DAY, fld.getMillis(13L)); [EOL]     assertEquals(0, fld.getValue(1L * 30L * MILLIS_PER_DAY - 1L, dt11.getMillis())); [EOL]     assertEquals(1, fld.getValue(1L * 30L * MILLIS_PER_DAY, dt11.getMillis())); [EOL]     assertEquals(1, fld.getValue(1L * 30L * MILLIS_PER_DAY + 1L, dt11.getMillis())); [EOL]     assertEquals(1, fld.getValue(2L * 30L * MILLIS_PER_DAY - 1L, dt11.getMillis())); [EOL]     assertEquals(2, fld.getValue(2L * 30L * MILLIS_PER_DAY, dt11.getMillis())); [EOL]     assertEquals(2, fld.getValue(2L * 30L * MILLIS_PER_DAY + 1L, dt11.getMillis())); [EOL]     assertEquals(2, fld.getValue((2L * 30L + 6L) * MILLIS_PER_DAY - 1L, dt11.getMillis())); [EOL]     assertEquals(3, fld.getValue((2L * 30L + 6L) * MILLIS_PER_DAY, dt11.getMillis())); [EOL]     assertEquals(3, fld.getValue((2L * 30L + 6L) * MILLIS_PER_DAY + 1L, dt11.getMillis())); [EOL]     assertEquals(3, fld.getValue((3L * 30L + 6L) * MILLIS_PER_DAY - 1L, dt11.getMillis())); [EOL]     assertEquals(4, fld.getValue((3L * 30L + 6L) * MILLIS_PER_DAY, dt11.getMillis())); [EOL]     assertEquals(4, fld.getValue((3L * 30L + 6L) * MILLIS_PER_DAY + 1L, dt11.getMillis())); [EOL]     assertEquals(dt12.getMillis(), fld.add(dt11.getMillis(), 1)); [EOL]     assertEquals(dt13.getMillis(), fld.add(dt11.getMillis(), 2)); [EOL]     assertEquals(dt01.getMillis(), fld.add(dt11.getMillis(), 3)); [EOL]     assertEquals(dt12.getMillis(), fld.add(dt11.getMillis(), 1L)); [EOL]     assertEquals(dt13.getMillis(), fld.add(dt11.getMillis(), 2L)); [EOL]     assertEquals(dt01.getMillis(), fld.add(dt11.getMillis(), 3L)); [EOL] }
public void testDurationMonth() { [EOL]     DateTime dt11 = new DateTime(1723, 11, 2, 0, 0, 0, 0, COPTIC_UTC); [EOL]     DateTime dt12 = new DateTime(1723, 12, 2, 0, 0, 0, 0, COPTIC_UTC); [EOL]     DateTime dt13 = new DateTime(1723, 13, 2, 0, 0, 0, 0, COPTIC_UTC); [EOL]     DateTime dt01 = new DateTime(1724, 1, 2, 0, 0, 0, 0, COPTIC_UTC); [EOL]     DurationField fld = dt11.monthOfYear().getDurationField(); [EOL]     assertEquals(COPTIC_UTC.months(), fld); [EOL]     assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1, dt11.getMillis())); [EOL]     assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2, dt11.getMillis())); [EOL]     assertEquals((2L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(3, dt11.getMillis())); [EOL]     assertEquals((3L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(4, dt11.getMillis())); [EOL]     assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1)); [EOL]     assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2)); [EOL]     assertEquals(13L * 30L * MILLIS_PER_DAY, fld.getMillis(13)); [EOL]     assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1L, dt11.getMillis())); [EOL]     assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2L, dt11.getMillis())); [EOL]     assertEquals((2L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(3L, dt11.getMillis())); [EOL]     assertEquals((3L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(4L, dt11.getMillis())); [EOL]     assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1L)); [EOL]     assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2L)); [EOL]     assertEquals(13L * 30L * MILLIS_PER_DAY, fld.getMillis(13L)); [EOL]     assertEquals(0, fld.getValue(1L * 30L * MILLIS_PER_DAY - 1L, dt11.getMillis())); [EOL]     assertEquals(1, fld.getValue(1L * 30L * MILLIS_PER_DAY, dt11.getMillis())); [EOL]     assertEquals(1, fld.getValue(1L * 30L * MILLIS_PER_DAY + 1L, dt11.getMillis())); [EOL]     assertEquals(1, fld.getValue(2L * 30L * MILLIS_PER_DAY - 1L, dt11.getMillis())); [EOL]     assertEquals(2, fld.getValue(2L * 30L * MILLIS_PER_DAY, dt11.getMillis())); [EOL]     assertEquals(2, fld.getValue(2L * 30L * MILLIS_PER_DAY + 1L, dt11.getMillis())); [EOL]     assertEquals(2, fld.getValue((2L * 30L + 6L) * MILLIS_PER_DAY - 1L, dt11.getMillis())); [EOL]     assertEquals(3, fld.getValue((2L * 30L + 6L) * MILLIS_PER_DAY, dt11.getMillis())); [EOL]     assertEquals(3, fld.getValue((2L * 30L + 6L) * MILLIS_PER_DAY + 1L, dt11.getMillis())); [EOL]     assertEquals(3, fld.getValue((3L * 30L + 6L) * MILLIS_PER_DAY - 1L, dt11.getMillis())); [EOL]     assertEquals(4, fld.getValue((3L * 30L + 6L) * MILLIS_PER_DAY, dt11.getMillis())); [EOL]     assertEquals(4, fld.getValue((3L * 30L + 6L) * MILLIS_PER_DAY + 1L, dt11.getMillis())); [EOL]     assertEquals(dt12.getMillis(), fld.add(dt11.getMillis(), 1)); [EOL]     assertEquals(dt13.getMillis(), fld.add(dt11.getMillis(), 2)); [EOL]     assertEquals(dt01.getMillis(), fld.add(dt11.getMillis(), 3)); [EOL]     assertEquals(dt12.getMillis(), fld.add(dt11.getMillis(), 1L)); [EOL]     assertEquals(dt13.getMillis(), fld.add(dt11.getMillis(), 2L)); [EOL]     assertEquals(dt01.getMillis(), fld.add(dt11.getMillis(), 3L)); [EOL] }
public void testDurationMonth() { [EOL]     DateTime dt11 = new DateTime(1723, 11, 2, 0, 0, 0, 0, COPTIC_UTC); [EOL]     DateTime dt12 = new DateTime(1723, 12, 2, 0, 0, 0, 0, COPTIC_UTC); [EOL]     DateTime dt13 = new DateTime(1723, 13, 2, 0, 0, 0, 0, COPTIC_UTC); [EOL]     DateTime dt01 = new DateTime(1724, 1, 2, 0, 0, 0, 0, COPTIC_UTC); [EOL]     DurationField fld = dt11.monthOfYear().getDurationField(); [EOL]     assertEquals(COPTIC_UTC.months(), fld); [EOL]     assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1, dt11.getMillis())); [EOL]     assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2, dt11.getMillis())); [EOL]     assertEquals((2L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(3, dt11.getMillis())); [EOL]     assertEquals((3L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(4, dt11.getMillis())); [EOL]     assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1)); [EOL]     assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2)); [EOL]     assertEquals(13L * 30L * MILLIS_PER_DAY, fld.getMillis(13)); [EOL]     assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1L, dt11.getMillis())); [EOL]     assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2L, dt11.getMillis())); [EOL]     assertEquals((2L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(3L, dt11.getMillis())); [EOL]     assertEquals((3L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(4L, dt11.getMillis())); [EOL]     assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1L)); [EOL]     assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2L)); [EOL]     assertEquals(13L * 30L * MILLIS_PER_DAY, fld.getMillis(13L)); [EOL]     assertEquals(0, fld.getValue(1L * 30L * MILLIS_PER_DAY - 1L, dt11.getMillis())); [EOL]     assertEquals(1, fld.getValue(1L * 30L * MILLIS_PER_DAY, dt11.getMillis())); [EOL]     assertEquals(1, fld.getValue(1L * 30L * MILLIS_PER_DAY + 1L, dt11.getMillis())); [EOL]     assertEquals(1, fld.getValue(2L * 30L * MILLIS_PER_DAY - 1L, dt11.getMillis())); [EOL]     assertEquals(2, fld.getValue(2L * 30L * MILLIS_PER_DAY, dt11.getMillis())); [EOL]     assertEquals(2, fld.getValue(2L * 30L * MILLIS_PER_DAY + 1L, dt11.getMillis())); [EOL]     assertEquals(2, fld.getValue((2L * 30L + 6L) * MILLIS_PER_DAY - 1L, dt11.getMillis())); [EOL]     assertEquals(3, fld.getValue((2L * 30L + 6L) * MILLIS_PER_DAY, dt11.getMillis())); [EOL]     assertEquals(3, fld.getValue((2L * 30L + 6L) * MILLIS_PER_DAY + 1L, dt11.getMillis())); [EOL]     assertEquals(3, fld.getValue((3L * 30L + 6L) * MILLIS_PER_DAY - 1L, dt11.getMillis())); [EOL]     assertEquals(4, fld.getValue((3L * 30L + 6L) * MILLIS_PER_DAY, dt11.getMillis())); [EOL]     assertEquals(4, fld.getValue((3L * 30L + 6L) * MILLIS_PER_DAY + 1L, dt11.getMillis())); [EOL]     assertEquals(dt12.getMillis(), fld.add(dt11.getMillis(), 1)); [EOL]     assertEquals(dt13.getMillis(), fld.add(dt11.getMillis(), 2)); [EOL]     assertEquals(dt01.getMillis(), fld.add(dt11.getMillis(), 3)); [EOL]     assertEquals(dt12.getMillis(), fld.add(dt11.getMillis(), 1L)); [EOL]     assertEquals(dt13.getMillis(), fld.add(dt11.getMillis(), 2L)); [EOL]     assertEquals(dt01.getMillis(), fld.add(dt11.getMillis(), 3L)); [EOL] }
public void testDurationMonth() { [EOL]     DateTime dt11 = new DateTime(1723, 11, 2, 0, 0, 0, 0, COPTIC_UTC); [EOL]     DateTime dt12 = new DateTime(1723, 12, 2, 0, 0, 0, 0, COPTIC_UTC); [EOL]     DateTime dt13 = new DateTime(1723, 13, 2, 0, 0, 0, 0, COPTIC_UTC); [EOL]     DateTime dt01 = new DateTime(1724, 1, 2, 0, 0, 0, 0, COPTIC_UTC); [EOL]     DurationField fld = dt11.monthOfYear().getDurationField(); [EOL]     assertEquals(COPTIC_UTC.months(), fld); [EOL]     assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1, dt11.getMillis())); [EOL]     assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2, dt11.getMillis())); [EOL]     assertEquals((2L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(3, dt11.getMillis())); [EOL]     assertEquals((3L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(4, dt11.getMillis())); [EOL]     assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1)); [EOL]     assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2)); [EOL]     assertEquals(13L * 30L * MILLIS_PER_DAY, fld.getMillis(13)); [EOL]     assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1L, dt11.getMillis())); [EOL]     assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2L, dt11.getMillis())); [EOL]     assertEquals((2L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(3L, dt11.getMillis())); [EOL]     assertEquals((3L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(4L, dt11.getMillis())); [EOL]     assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1L)); [EOL]     assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2L)); [EOL]     assertEquals(13L * 30L * MILLIS_PER_DAY, fld.getMillis(13L)); [EOL]     assertEquals(0, fld.getValue(1L * 30L * MILLIS_PER_DAY - 1L, dt11.getMillis())); [EOL]     assertEquals(1, fld.getValue(1L * 30L * MILLIS_PER_DAY, dt11.getMillis())); [EOL]     assertEquals(1, fld.getValue(1L * 30L * MILLIS_PER_DAY + 1L, dt11.getMillis())); [EOL]     assertEquals(1, fld.getValue(2L * 30L * MILLIS_PER_DAY - 1L, dt11.getMillis())); [EOL]     assertEquals(2, fld.getValue(2L * 30L * MILLIS_PER_DAY, dt11.getMillis())); [EOL]     assertEquals(2, fld.getValue(2L * 30L * MILLIS_PER_DAY + 1L, dt11.getMillis())); [EOL]     assertEquals(2, fld.getValue((2L * 30L + 6L) * MILLIS_PER_DAY - 1L, dt11.getMillis())); [EOL]     assertEquals(3, fld.getValue((2L * 30L + 6L) * MILLIS_PER_DAY, dt11.getMillis())); [EOL]     assertEquals(3, fld.getValue((2L * 30L + 6L) * MILLIS_PER_DAY + 1L, dt11.getMillis())); [EOL]     assertEquals(3, fld.getValue((3L * 30L + 6L) * MILLIS_PER_DAY - 1L, dt11.getMillis())); [EOL]     assertEquals(4, fld.getValue((3L * 30L + 6L) * MILLIS_PER_DAY, dt11.getMillis())); [EOL]     assertEquals(4, fld.getValue((3L * 30L + 6L) * MILLIS_PER_DAY + 1L, dt11.getMillis())); [EOL]     assertEquals(dt12.getMillis(), fld.add(dt11.getMillis(), 1)); [EOL]     assertEquals(dt13.getMillis(), fld.add(dt11.getMillis(), 2)); [EOL]     assertEquals(dt01.getMillis(), fld.add(dt11.getMillis(), 3)); [EOL]     assertEquals(dt12.getMillis(), fld.add(dt11.getMillis(), 1L)); [EOL]     assertEquals(dt13.getMillis(), fld.add(dt11.getMillis(), 2L)); [EOL]     assertEquals(dt01.getMillis(), fld.add(dt11.getMillis(), 3L)); [EOL] }
public void testPrint_simple() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", f.print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("Wed 2004-06-09T12:20:30+02:00", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals("Wed 2004-06-09T06:20:30-04:00", f.print(dt)); [EOL]     dt = dt.withChronology(BUDDHIST_PARIS); [EOL]     assertEquals("Wed 2547-06-09T12:20:30+02:00", f.print(dt)); [EOL] }
public void testPrint_simple() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", f.print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("Wed 2004-06-09T12:20:30+02:00", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals("Wed 2004-06-09T06:20:30-04:00", f.print(dt)); [EOL]     dt = dt.withChronology(BUDDHIST_PARIS); [EOL]     assertEquals("Wed 2547-06-09T12:20:30+02:00", f.print(dt)); [EOL] }
public void testPrint_simple() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", f.print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("Wed 2004-06-09T12:20:30+02:00", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals("Wed 2004-06-09T06:20:30-04:00", f.print(dt)); [EOL]     dt = dt.withChronology(BUDDHIST_PARIS); [EOL]     assertEquals("Wed 2547-06-09T12:20:30+02:00", f.print(dt)); [EOL] }
public void testWithZoneRetainFields_DateTimeZone() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateMidnight result = test.withZoneRetainFields(PARIS); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_PARIS, result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertEquals(TEST_TIME1_PARIS, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_LONDON, result.getMillis()); [EOL]     assertEquals(GREGORIAN_DEFAULT, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, new MockNullZoneChronology()); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL] }
public void testGetMethods() { [EOL]     MutableDateTime test = new MutableDateTime(); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(LONDON, test.getZone()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL]     assertEquals(1, test.getEra()); [EOL]     assertEquals(20, test.getCenturyOfEra()); [EOL]     assertEquals(2, test.getYearOfCentury()); [EOL]     assertEquals(2002, test.getYearOfEra()); [EOL]     assertEquals(2002, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(2002, test.getWeekyear()); [EOL]     assertEquals(23, test.getWeekOfWeekyear()); [EOL]     assertEquals(7, test.getDayOfWeek()); [EOL]     assertEquals(160, test.getDayOfYear()); [EOL]     assertEquals(1, test.getHourOfDay()); [EOL]     assertEquals(0, test.getMinuteOfHour()); [EOL]     assertEquals(60, test.getMinuteOfDay()); [EOL]     assertEquals(0, test.getSecondOfMinute()); [EOL]     assertEquals(60 * 60, test.getSecondOfDay()); [EOL]     assertEquals(0, test.getMillisOfSecond()); [EOL]     assertEquals(60 * 60 * 1000, test.getMillisOfDay()); [EOL] }
public void testGetMethods() { [EOL]     MutableDateTime test = new MutableDateTime(); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(LONDON, test.getZone()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL]     assertEquals(1, test.getEra()); [EOL]     assertEquals(20, test.getCenturyOfEra()); [EOL]     assertEquals(2, test.getYearOfCentury()); [EOL]     assertEquals(2002, test.getYearOfEra()); [EOL]     assertEquals(2002, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(2002, test.getWeekyear()); [EOL]     assertEquals(23, test.getWeekOfWeekyear()); [EOL]     assertEquals(7, test.getDayOfWeek()); [EOL]     assertEquals(160, test.getDayOfYear()); [EOL]     assertEquals(1, test.getHourOfDay()); [EOL]     assertEquals(0, test.getMinuteOfHour()); [EOL]     assertEquals(60, test.getMinuteOfDay()); [EOL]     assertEquals(0, test.getSecondOfMinute()); [EOL]     assertEquals(60 * 60, test.getSecondOfDay()); [EOL]     assertEquals(0, test.getMillisOfSecond()); [EOL]     assertEquals(60 * 60 * 1000, test.getMillisOfDay()); [EOL] }
public void testSetDateTime_int_int_int_int_int_int_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 12, 24, 48, 501); [EOL]     test.setDateTime(2010, 12, 3, 5, 6, 7, 8); [EOL]     assertEquals(2010, test.getYear()); [EOL]     assertEquals(12, test.getMonthOfYear()); [EOL]     assertEquals(3, test.getDayOfMonth()); [EOL]     assertEquals(5, test.getHourOfDay()); [EOL]     assertEquals(6, test.getMinuteOfHour()); [EOL]     assertEquals(7, test.getSecondOfMinute()); [EOL]     assertEquals(8, test.getMillisOfSecond()); [EOL] }
public void testGetMethods() { [EOL]     MutableDateTime test = new MutableDateTime(); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(LONDON, test.getZone()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL]     assertEquals(1, test.getEra()); [EOL]     assertEquals(20, test.getCenturyOfEra()); [EOL]     assertEquals(2, test.getYearOfCentury()); [EOL]     assertEquals(2002, test.getYearOfEra()); [EOL]     assertEquals(2002, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(2002, test.getWeekyear()); [EOL]     assertEquals(23, test.getWeekOfWeekyear()); [EOL]     assertEquals(7, test.getDayOfWeek()); [EOL]     assertEquals(160, test.getDayOfYear()); [EOL]     assertEquals(1, test.getHourOfDay()); [EOL]     assertEquals(0, test.getMinuteOfHour()); [EOL]     assertEquals(60, test.getMinuteOfDay()); [EOL]     assertEquals(0, test.getSecondOfMinute()); [EOL]     assertEquals(60 * 60, test.getSecondOfDay()); [EOL]     assertEquals(0, test.getMillisOfSecond()); [EOL]     assertEquals(60 * 60 * 1000, test.getMillisOfDay()); [EOL] }
public void testSetDateTime_int_int_int_int_int_int_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 12, 24, 48, 501); [EOL]     test.setDateTime(2010, 12, 3, 5, 6, 7, 8); [EOL]     assertEquals(2010, test.getYear()); [EOL]     assertEquals(12, test.getMonthOfYear()); [EOL]     assertEquals(3, test.getDayOfMonth()); [EOL]     assertEquals(5, test.getHourOfDay()); [EOL]     assertEquals(6, test.getMinuteOfHour()); [EOL]     assertEquals(7, test.getSecondOfMinute()); [EOL]     assertEquals(8, test.getMillisOfSecond()); [EOL] }
public void testGetMethods() { [EOL]     MutableDateTime test = new MutableDateTime(); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(LONDON, test.getZone()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL]     assertEquals(1, test.getEra()); [EOL]     assertEquals(20, test.getCenturyOfEra()); [EOL]     assertEquals(2, test.getYearOfCentury()); [EOL]     assertEquals(2002, test.getYearOfEra()); [EOL]     assertEquals(2002, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(2002, test.getWeekyear()); [EOL]     assertEquals(23, test.getWeekOfWeekyear()); [EOL]     assertEquals(7, test.getDayOfWeek()); [EOL]     assertEquals(160, test.getDayOfYear()); [EOL]     assertEquals(1, test.getHourOfDay()); [EOL]     assertEquals(0, test.getMinuteOfHour()); [EOL]     assertEquals(60, test.getMinuteOfDay()); [EOL]     assertEquals(0, test.getSecondOfMinute()); [EOL]     assertEquals(60 * 60, test.getSecondOfDay()); [EOL]     assertEquals(0, test.getMillisOfSecond()); [EOL]     assertEquals(60 * 60 * 1000, test.getMillisOfDay()); [EOL] }
public void testSetDateTime_int_int_int_int_int_int_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 12, 24, 48, 501); [EOL]     test.setDateTime(2010, 12, 3, 5, 6, 7, 8); [EOL]     assertEquals(2010, test.getYear()); [EOL]     assertEquals(12, test.getMonthOfYear()); [EOL]     assertEquals(3, test.getDayOfMonth()); [EOL]     assertEquals(5, test.getHourOfDay()); [EOL]     assertEquals(6, test.getMinuteOfHour()); [EOL]     assertEquals(7, test.getSecondOfMinute()); [EOL]     assertEquals(8, test.getMillisOfSecond()); [EOL] }
public void testGetMethods() { [EOL]     MutableDateTime test = new MutableDateTime(); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(LONDON, test.getZone()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL]     assertEquals(1, test.getEra()); [EOL]     assertEquals(20, test.getCenturyOfEra()); [EOL]     assertEquals(2, test.getYearOfCentury()); [EOL]     assertEquals(2002, test.getYearOfEra()); [EOL]     assertEquals(2002, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(2002, test.getWeekyear()); [EOL]     assertEquals(23, test.getWeekOfWeekyear()); [EOL]     assertEquals(7, test.getDayOfWeek()); [EOL]     assertEquals(160, test.getDayOfYear()); [EOL]     assertEquals(1, test.getHourOfDay()); [EOL]     assertEquals(0, test.getMinuteOfHour()); [EOL]     assertEquals(60, test.getMinuteOfDay()); [EOL]     assertEquals(0, test.getSecondOfMinute()); [EOL]     assertEquals(60 * 60, test.getSecondOfDay()); [EOL]     assertEquals(0, test.getMillisOfSecond()); [EOL]     assertEquals(60 * 60 * 1000, test.getMillisOfDay()); [EOL] }
public void testSetDateTime_int_int_int_int_int_int_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 12, 24, 48, 501); [EOL]     test.setDateTime(2010, 12, 3, 5, 6, 7, 8); [EOL]     assertEquals(2010, test.getYear()); [EOL]     assertEquals(12, test.getMonthOfYear()); [EOL]     assertEquals(3, test.getDayOfMonth()); [EOL]     assertEquals(5, test.getHourOfDay()); [EOL]     assertEquals(6, test.getMinuteOfHour()); [EOL]     assertEquals(7, test.getSecondOfMinute()); [EOL]     assertEquals(8, test.getMillisOfSecond()); [EOL] }
public void testToCalendar_Locale() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     Calendar result = test.toCalendar(null); [EOL]     assertEquals(test.getMillis(), result.getTime().getTime()); [EOL]     assertEquals(TimeZone.getTimeZone("Europe/London"), result.getTimeZone()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, PARIS); [EOL]     result = test.toCalendar(null); [EOL]     assertEquals(test.getMillis(), result.getTime().getTime()); [EOL]     assertEquals(TimeZone.getTimeZone("Europe/Paris"), result.getTimeZone()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, PARIS); [EOL]     result = test.toCalendar(Locale.UK); [EOL]     assertEquals(test.getMillis(), result.getTime().getTime()); [EOL]     assertEquals(TimeZone.getTimeZone("Europe/Paris"), result.getTimeZone()); [EOL] }
public void testToCalendar_Locale() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     Calendar result = test.toCalendar(null); [EOL]     assertEquals(test.getMillis(), result.getTime().getTime()); [EOL]     assertEquals(TimeZone.getTimeZone("Europe/London"), result.getTimeZone()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, PARIS); [EOL]     result = test.toCalendar(null); [EOL]     assertEquals(test.getMillis(), result.getTime().getTime()); [EOL]     assertEquals(TimeZone.getTimeZone("Europe/Paris"), result.getTimeZone()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, PARIS); [EOL]     result = test.toCalendar(Locale.UK); [EOL]     assertEquals(test.getMillis(), result.getTime().getTime()); [EOL]     assertEquals(TimeZone.getTimeZone("Europe/Paris"), result.getTimeZone()); [EOL] }
public void testToGregorianCalendar() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     GregorianCalendar result = test.toGregorianCalendar(); [EOL]     assertEquals(test.getMillis(), result.getTime().getTime()); [EOL]     assertEquals(TimeZone.getTimeZone("Europe/London"), result.getTimeZone()); [EOL]     test = new MutableDateTime(TEST_TIME1, PARIS); [EOL]     result = test.toGregorianCalendar(); [EOL]     assertEquals(test.getMillis(), result.getTime().getTime()); [EOL]     assertEquals(TimeZone.getTimeZone("Europe/Paris"), result.getTimeZone()); [EOL] }
public void test_setHourOfDay() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withHourOfDay(24); [EOL]     assertEquals("2007-01-02T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withHourOfDay(-1); [EOL]     assertEquals("2007-01-01T23:00:00.000Z", dt.toString()); [EOL] }
public void test_setHourOfDay() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withHourOfDay(24); [EOL]     assertEquals("2007-01-02T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withHourOfDay(-1); [EOL]     assertEquals("2007-01-01T23:00:00.000Z", dt.toString()); [EOL] }
public void test_setHourOfDay() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withHourOfDay(24); [EOL]     assertEquals("2007-01-02T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withHourOfDay(-1); [EOL]     assertEquals("2007-01-01T23:00:00.000Z", dt.toString()); [EOL] }
public void test_setHourOfDay() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withHourOfDay(24); [EOL]     assertEquals("2007-01-02T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withHourOfDay(-1); [EOL]     assertEquals("2007-01-01T23:00:00.000Z", dt.toString()); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void test_setHourOfDay() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withHourOfDay(24); [EOL]     assertEquals("2007-01-02T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withHourOfDay(-1); [EOL]     assertEquals("2007-01-01T23:00:00.000Z", dt.toString()); [EOL] }
public void test_setHourOfDay() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withHourOfDay(24); [EOL]     assertEquals("2007-01-02T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withHourOfDay(-1); [EOL]     assertEquals("2007-01-01T23:00:00.000Z", dt.toString()); [EOL] }
public void test_setHourOfDay() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withHourOfDay(24); [EOL]     assertEquals("2007-01-02T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withHourOfDay(-1); [EOL]     assertEquals("2007-01-01T23:00:00.000Z", dt.toString()); [EOL] }
public void testID() { [EOL]     DateTimeZone tz = buildAmericaLosAngeles(); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL] }
public void testID() { [EOL]     DateTimeZone tz = buildAmericaLosAngeles(); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL] }
public void testID() { [EOL]     DateTimeZone tz = buildAmericaLosAngeles(); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL] }
public void testConstructor_RI_RP3() throws Throwable { [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW, ISOChronology.getInstanceUTC()); [EOL]     Period dur = new Period(0, 6, 0, 3, 1, 0, 0, 0, PeriodType.standard()); [EOL]     long result = TEST_TIME_NOW; [EOL]     result = ISOChronology.getInstanceUTC().months().add(result, 6); [EOL]     result = ISOChronology.getInstanceUTC().days().add(result, 3); [EOL]     result = ISOChronology.getInstanceUTC().hours().add(result, 1); [EOL]     MutableInterval test = new MutableInterval(dt, dur); [EOL]     assertEquals(dt.getMillis(), test.getStartMillis()); [EOL]     assertEquals(result, test.getEndMillis()); [EOL] }
public void testID() { [EOL]     DateTimeZone tz = buildAmericaLosAngeles(); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL] }
public void testToStandardWeeks() { [EOL]     Period test = new Period(0, 0, 3, 4, 5, 6, 7, 8); [EOL]     assertEquals(3, test.toStandardWeeks().getWeeks()); [EOL]     test = new Period(0, 0, 3, 7, 0, 0, 0, 0); [EOL]     assertEquals(4, test.toStandardWeeks().getWeeks()); [EOL]     test = new Period(0, 0, 0, 6, 23, 59, 59, 1000); [EOL]     assertEquals(1, test.toStandardWeeks().getWeeks()); [EOL]     test = new Period(0, 0, Integer.MAX_VALUE, 0, 0, 0, 0, 0); [EOL]     assertEquals(Integer.MAX_VALUE, test.toStandardWeeks().getWeeks()); [EOL]     test = new Period(0, 0, 0, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE); [EOL]     long intMax = Integer.MAX_VALUE; [EOL]     BigInteger expected = BigInteger.valueOf(intMax); [EOL]     expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_SECOND)); [EOL]     expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_MINUTE)); [EOL]     expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_HOUR)); [EOL]     expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_DAY)); [EOL]     expected = expected.divide(BigInteger.valueOf(DateTimeConstants.MILLIS_PER_WEEK)); [EOL]     assertTrue(expected.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) < 0); [EOL]     assertEquals(expected.longValue(), test.toStandardWeeks().getWeeks()); [EOL]     test = new Period(0, 0, Integer.MAX_VALUE, 7, 0, 0, 0, 0); [EOL]     try { [EOL]         test.toStandardWeeks(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testToStandardWeeks() { [EOL]     Period test = new Period(0, 0, 3, 4, 5, 6, 7, 8); [EOL]     assertEquals(3, test.toStandardWeeks().getWeeks()); [EOL]     test = new Period(0, 0, 3, 7, 0, 0, 0, 0); [EOL]     assertEquals(4, test.toStandardWeeks().getWeeks()); [EOL]     test = new Period(0, 0, 0, 6, 23, 59, 59, 1000); [EOL]     assertEquals(1, test.toStandardWeeks().getWeeks()); [EOL]     test = new Period(0, 0, Integer.MAX_VALUE, 0, 0, 0, 0, 0); [EOL]     assertEquals(Integer.MAX_VALUE, test.toStandardWeeks().getWeeks()); [EOL]     test = new Period(0, 0, 0, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE); [EOL]     long intMax = Integer.MAX_VALUE; [EOL]     BigInteger expected = BigInteger.valueOf(intMax); [EOL]     expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_SECOND)); [EOL]     expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_MINUTE)); [EOL]     expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_HOUR)); [EOL]     expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_DAY)); [EOL]     expected = expected.divide(BigInteger.valueOf(DateTimeConstants.MILLIS_PER_WEEK)); [EOL]     assertTrue(expected.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) < 0); [EOL]     assertEquals(expected.longValue(), test.toStandardWeeks().getWeeks()); [EOL]     test = new Period(0, 0, Integer.MAX_VALUE, 7, 0, 0, 0, 0); [EOL]     try { [EOL]         test.toStandardWeeks(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testToStandardWeeks() { [EOL]     Period test = new Period(0, 0, 3, 4, 5, 6, 7, 8); [EOL]     assertEquals(3, test.toStandardWeeks().getWeeks()); [EOL]     test = new Period(0, 0, 3, 7, 0, 0, 0, 0); [EOL]     assertEquals(4, test.toStandardWeeks().getWeeks()); [EOL]     test = new Period(0, 0, 0, 6, 23, 59, 59, 1000); [EOL]     assertEquals(1, test.toStandardWeeks().getWeeks()); [EOL]     test = new Period(0, 0, Integer.MAX_VALUE, 0, 0, 0, 0, 0); [EOL]     assertEquals(Integer.MAX_VALUE, test.toStandardWeeks().getWeeks()); [EOL]     test = new Period(0, 0, 0, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE); [EOL]     long intMax = Integer.MAX_VALUE; [EOL]     BigInteger expected = BigInteger.valueOf(intMax); [EOL]     expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_SECOND)); [EOL]     expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_MINUTE)); [EOL]     expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_HOUR)); [EOL]     expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_DAY)); [EOL]     expected = expected.divide(BigInteger.valueOf(DateTimeConstants.MILLIS_PER_WEEK)); [EOL]     assertTrue(expected.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) < 0); [EOL]     assertEquals(expected.longValue(), test.toStandardWeeks().getWeeks()); [EOL]     test = new Period(0, 0, Integer.MAX_VALUE, 7, 0, 0, 0, 0); [EOL]     try { [EOL]         test.toStandardWeeks(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testToStandardWeeks() { [EOL]     Period test = new Period(0, 0, 3, 4, 5, 6, 7, 8); [EOL]     assertEquals(3, test.toStandardWeeks().getWeeks()); [EOL]     test = new Period(0, 0, 3, 7, 0, 0, 0, 0); [EOL]     assertEquals(4, test.toStandardWeeks().getWeeks()); [EOL]     test = new Period(0, 0, 0, 6, 23, 59, 59, 1000); [EOL]     assertEquals(1, test.toStandardWeeks().getWeeks()); [EOL]     test = new Period(0, 0, Integer.MAX_VALUE, 0, 0, 0, 0, 0); [EOL]     assertEquals(Integer.MAX_VALUE, test.toStandardWeeks().getWeeks()); [EOL]     test = new Period(0, 0, 0, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE); [EOL]     long intMax = Integer.MAX_VALUE; [EOL]     BigInteger expected = BigInteger.valueOf(intMax); [EOL]     expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_SECOND)); [EOL]     expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_MINUTE)); [EOL]     expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_HOUR)); [EOL]     expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_DAY)); [EOL]     expected = expected.divide(BigInteger.valueOf(DateTimeConstants.MILLIS_PER_WEEK)); [EOL]     assertTrue(expected.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) < 0); [EOL]     assertEquals(expected.longValue(), test.toStandardWeeks().getWeeks()); [EOL]     test = new Period(0, 0, Integer.MAX_VALUE, 7, 0, 0, 0, 0); [EOL]     try { [EOL]         test.toStandardWeeks(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testToStandardWeeks() { [EOL]     Period test = new Period(0, 0, 3, 4, 5, 6, 7, 8); [EOL]     assertEquals(3, test.toStandardWeeks().getWeeks()); [EOL]     test = new Period(0, 0, 3, 7, 0, 0, 0, 0); [EOL]     assertEquals(4, test.toStandardWeeks().getWeeks()); [EOL]     test = new Period(0, 0, 0, 6, 23, 59, 59, 1000); [EOL]     assertEquals(1, test.toStandardWeeks().getWeeks()); [EOL]     test = new Period(0, 0, Integer.MAX_VALUE, 0, 0, 0, 0, 0); [EOL]     assertEquals(Integer.MAX_VALUE, test.toStandardWeeks().getWeeks()); [EOL]     test = new Period(0, 0, 0, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE); [EOL]     long intMax = Integer.MAX_VALUE; [EOL]     BigInteger expected = BigInteger.valueOf(intMax); [EOL]     expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_SECOND)); [EOL]     expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_MINUTE)); [EOL]     expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_HOUR)); [EOL]     expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_DAY)); [EOL]     expected = expected.divide(BigInteger.valueOf(DateTimeConstants.MILLIS_PER_WEEK)); [EOL]     assertTrue(expected.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) < 0); [EOL]     assertEquals(expected.longValue(), test.toStandardWeeks().getWeeks()); [EOL]     test = new Period(0, 0, Integer.MAX_VALUE, 7, 0, 0, 0, 0); [EOL]     try { [EOL]         test.toStandardWeeks(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testToStandardWeeks() { [EOL]     Period test = new Period(0, 0, 3, 4, 5, 6, 7, 8); [EOL]     assertEquals(3, test.toStandardWeeks().getWeeks()); [EOL]     test = new Period(0, 0, 3, 7, 0, 0, 0, 0); [EOL]     assertEquals(4, test.toStandardWeeks().getWeeks()); [EOL]     test = new Period(0, 0, 0, 6, 23, 59, 59, 1000); [EOL]     assertEquals(1, test.toStandardWeeks().getWeeks()); [EOL]     test = new Period(0, 0, Integer.MAX_VALUE, 0, 0, 0, 0, 0); [EOL]     assertEquals(Integer.MAX_VALUE, test.toStandardWeeks().getWeeks()); [EOL]     test = new Period(0, 0, 0, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE); [EOL]     long intMax = Integer.MAX_VALUE; [EOL]     BigInteger expected = BigInteger.valueOf(intMax); [EOL]     expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_SECOND)); [EOL]     expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_MINUTE)); [EOL]     expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_HOUR)); [EOL]     expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_DAY)); [EOL]     expected = expected.divide(BigInteger.valueOf(DateTimeConstants.MILLIS_PER_WEEK)); [EOL]     assertTrue(expected.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) < 0); [EOL]     assertEquals(expected.longValue(), test.toStandardWeeks().getWeeks()); [EOL]     test = new Period(0, 0, Integer.MAX_VALUE, 7, 0, 0, 0, 0); [EOL]     try { [EOL]         test.toStandardWeeks(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testToStandardWeeks() { [EOL]     Period test = new Period(0, 0, 3, 4, 5, 6, 7, 8); [EOL]     assertEquals(3, test.toStandardWeeks().getWeeks()); [EOL]     test = new Period(0, 0, 3, 7, 0, 0, 0, 0); [EOL]     assertEquals(4, test.toStandardWeeks().getWeeks()); [EOL]     test = new Period(0, 0, 0, 6, 23, 59, 59, 1000); [EOL]     assertEquals(1, test.toStandardWeeks().getWeeks()); [EOL]     test = new Period(0, 0, Integer.MAX_VALUE, 0, 0, 0, 0, 0); [EOL]     assertEquals(Integer.MAX_VALUE, test.toStandardWeeks().getWeeks()); [EOL]     test = new Period(0, 0, 0, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE); [EOL]     long intMax = Integer.MAX_VALUE; [EOL]     BigInteger expected = BigInteger.valueOf(intMax); [EOL]     expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_SECOND)); [EOL]     expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_MINUTE)); [EOL]     expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_HOUR)); [EOL]     expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_DAY)); [EOL]     expected = expected.divide(BigInteger.valueOf(DateTimeConstants.MILLIS_PER_WEEK)); [EOL]     assertTrue(expected.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) < 0); [EOL]     assertEquals(expected.longValue(), test.toStandardWeeks().getWeeks()); [EOL]     test = new Period(0, 0, Integer.MAX_VALUE, 7, 0, 0, 0, 0); [EOL]     try { [EOL]         test.toStandardWeeks(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testFactory_standardWeeksIn_RPeriod() { [EOL]     assertEquals(0, Weeks.standardWeeksIn((ReadablePeriod) null).getWeeks()); [EOL]     assertEquals(0, Weeks.standardWeeksIn(Period.ZERO).getWeeks()); [EOL]     assertEquals(1, Weeks.standardWeeksIn(new Period(0, 0, 1, 0, 0, 0, 0, 0)).getWeeks()); [EOL]     assertEquals(123, Weeks.standardWeeksIn(Period.weeks(123)).getWeeks()); [EOL]     assertEquals(-987, Weeks.standardWeeksIn(Period.weeks(-987)).getWeeks()); [EOL]     assertEquals(1, Weeks.standardWeeksIn(Period.days(13)).getWeeks()); [EOL]     assertEquals(2, Weeks.standardWeeksIn(Period.days(14)).getWeeks()); [EOL]     assertEquals(2, Weeks.standardWeeksIn(Period.days(15)).getWeeks()); [EOL]     try { [EOL]         Weeks.standardWeeksIn(Period.months(1)); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_standardWeeksIn_RPeriod() { [EOL]     assertEquals(0, Weeks.standardWeeksIn((ReadablePeriod) null).getWeeks()); [EOL]     assertEquals(0, Weeks.standardWeeksIn(Period.ZERO).getWeeks()); [EOL]     assertEquals(1, Weeks.standardWeeksIn(new Period(0, 0, 1, 0, 0, 0, 0, 0)).getWeeks()); [EOL]     assertEquals(123, Weeks.standardWeeksIn(Period.weeks(123)).getWeeks()); [EOL]     assertEquals(-987, Weeks.standardWeeksIn(Period.weeks(-987)).getWeeks()); [EOL]     assertEquals(1, Weeks.standardWeeksIn(Period.days(13)).getWeeks()); [EOL]     assertEquals(2, Weeks.standardWeeksIn(Period.days(14)).getWeeks()); [EOL]     assertEquals(2, Weeks.standardWeeksIn(Period.days(15)).getWeeks()); [EOL]     try { [EOL]         Weeks.standardWeeksIn(Period.months(1)); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_standardWeeksIn_RPeriod() { [EOL]     assertEquals(0, Weeks.standardWeeksIn((ReadablePeriod) null).getWeeks()); [EOL]     assertEquals(0, Weeks.standardWeeksIn(Period.ZERO).getWeeks()); [EOL]     assertEquals(1, Weeks.standardWeeksIn(new Period(0, 0, 1, 0, 0, 0, 0, 0)).getWeeks()); [EOL]     assertEquals(123, Weeks.standardWeeksIn(Period.weeks(123)).getWeeks()); [EOL]     assertEquals(-987, Weeks.standardWeeksIn(Period.weeks(-987)).getWeeks()); [EOL]     assertEquals(1, Weeks.standardWeeksIn(Period.days(13)).getWeeks()); [EOL]     assertEquals(2, Weeks.standardWeeksIn(Period.days(14)).getWeeks()); [EOL]     assertEquals(2, Weeks.standardWeeksIn(Period.days(15)).getWeeks()); [EOL]     try { [EOL]         Weeks.standardWeeksIn(Period.months(1)); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testToStandardDays() { [EOL]     Weeks test = Weeks.weeks(2); [EOL]     Days expected = Days.days(14); [EOL]     assertEquals(expected, test.toStandardDays()); [EOL]     try { [EOL]         Weeks.MAX_VALUE.toStandardDays(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testToStandardDays() { [EOL]     Weeks test = Weeks.weeks(2); [EOL]     Days expected = Days.days(14); [EOL]     assertEquals(expected, test.toStandardDays()); [EOL]     try { [EOL]         Weeks.MAX_VALUE.toStandardDays(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testToStandardDays() { [EOL]     Weeks test = Weeks.weeks(2); [EOL]     Days expected = Days.days(14); [EOL]     assertEquals(expected, test.toStandardDays()); [EOL]     try { [EOL]         Weeks.MAX_VALUE.toStandardDays(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testNegated() { [EOL]     Weeks test = Weeks.weeks(12); [EOL]     assertEquals(-12, test.negated().getWeeks()); [EOL]     assertEquals(12, test.getWeeks()); [EOL]     try { [EOL]         Weeks.MIN_VALUE.negated(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testNegated() { [EOL]     Weeks test = Weeks.weeks(12); [EOL]     assertEquals(-12, test.negated().getWeeks()); [EOL]     assertEquals(12, test.getWeeks()); [EOL]     try { [EOL]         Weeks.MIN_VALUE.negated(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testNegated() { [EOL]     Weeks test = Weeks.weeks(12); [EOL]     assertEquals(-12, test.negated().getWeeks()); [EOL]     assertEquals(12, test.getWeeks()); [EOL]     try { [EOL]         Weeks.MIN_VALUE.negated(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testNegated() { [EOL]     Weeks test = Weeks.weeks(12); [EOL]     assertEquals(-12, test.negated().getWeeks()); [EOL]     assertEquals(12, test.getWeeks()); [EOL]     try { [EOL]         Weeks.MIN_VALUE.negated(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testNegated() { [EOL]     Weeks test = Weeks.weeks(12); [EOL]     assertEquals(-12, test.negated().getWeeks()); [EOL]     assertEquals(12, test.getWeeks()); [EOL]     try { [EOL]         Weeks.MIN_VALUE.negated(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testIsGreaterThan() { [EOL]     assertEquals(true, Weeks.THREE.isGreaterThan(Weeks.TWO)); [EOL]     assertEquals(false, Weeks.THREE.isGreaterThan(Weeks.THREE)); [EOL]     assertEquals(false, Weeks.TWO.isGreaterThan(Weeks.THREE)); [EOL]     assertEquals(true, Weeks.ONE.isGreaterThan(null)); [EOL]     assertEquals(false, Weeks.weeks(-1).isGreaterThan(null)); [EOL] }
public void testIsGreaterThan() { [EOL]     assertEquals(true, Weeks.THREE.isGreaterThan(Weeks.TWO)); [EOL]     assertEquals(false, Weeks.THREE.isGreaterThan(Weeks.THREE)); [EOL]     assertEquals(false, Weeks.TWO.isGreaterThan(Weeks.THREE)); [EOL]     assertEquals(true, Weeks.ONE.isGreaterThan(null)); [EOL]     assertEquals(false, Weeks.weeks(-1).isGreaterThan(null)); [EOL] }
public void testIsGreaterThan() { [EOL]     assertEquals(true, Weeks.THREE.isGreaterThan(Weeks.TWO)); [EOL]     assertEquals(false, Weeks.THREE.isGreaterThan(Weeks.THREE)); [EOL]     assertEquals(false, Weeks.TWO.isGreaterThan(Weeks.THREE)); [EOL]     assertEquals(true, Weeks.ONE.isGreaterThan(null)); [EOL]     assertEquals(false, Weeks.weeks(-1).isGreaterThan(null)); [EOL] }
public void testIsGreaterThan() { [EOL]     assertEquals(true, Weeks.THREE.isGreaterThan(Weeks.TWO)); [EOL]     assertEquals(false, Weeks.THREE.isGreaterThan(Weeks.THREE)); [EOL]     assertEquals(false, Weeks.TWO.isGreaterThan(Weeks.THREE)); [EOL]     assertEquals(true, Weeks.ONE.isGreaterThan(null)); [EOL]     assertEquals(false, Weeks.weeks(-1).isGreaterThan(null)); [EOL] }
public void testIsGreaterThan() { [EOL]     assertEquals(true, Weeks.THREE.isGreaterThan(Weeks.TWO)); [EOL]     assertEquals(false, Weeks.THREE.isGreaterThan(Weeks.THREE)); [EOL]     assertEquals(false, Weeks.TWO.isGreaterThan(Weeks.THREE)); [EOL]     assertEquals(true, Weeks.ONE.isGreaterThan(null)); [EOL]     assertEquals(false, Weeks.weeks(-1).isGreaterThan(null)); [EOL] }
public void testPropertyGetMonth() { [EOL]     LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40); [EOL]     assertSame(test.getChronology().monthOfYear(), test.monthOfYear().getField()); [EOL]     assertEquals("monthOfYear", test.monthOfYear().getName()); [EOL]     assertEquals("Property[monthOfYear]", test.monthOfYear().toString()); [EOL]     assertSame(test, test.monthOfYear().getLocalDateTime()); [EOL]     assertEquals(6, test.monthOfYear().get()); [EOL]     assertEquals("6", test.monthOfYear().getAsString()); [EOL]     assertEquals("June", test.monthOfYear().getAsText()); [EOL]     assertEquals("juin", test.monthOfYear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("Jun", test.monthOfYear().getAsShortText()); [EOL]     assertEquals("juin", test.monthOfYear().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().months(), test.monthOfYear().getDurationField()); [EOL]     assertEquals(test.getChronology().years(), test.monthOfYear().getRangeDurationField()); [EOL]     assertEquals(9, test.monthOfYear().getMaximumTextLength(null)); [EOL]     assertEquals(3, test.monthOfYear().getMaximumShortTextLength(null)); [EOL]     test = new LocalDateTime(1972, 7, 9, 10, 20, 30, 40); [EOL]     assertEquals("juillet", test.monthOfYear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("juil.", test.monthOfYear().getAsShortText(Locale.FRENCH)); [EOL] }
public void testPropertyGetMonth() { [EOL]     LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40); [EOL]     assertSame(test.getChronology().monthOfYear(), test.monthOfYear().getField()); [EOL]     assertEquals("monthOfYear", test.monthOfYear().getName()); [EOL]     assertEquals("Property[monthOfYear]", test.monthOfYear().toString()); [EOL]     assertSame(test, test.monthOfYear().getLocalDateTime()); [EOL]     assertEquals(6, test.monthOfYear().get()); [EOL]     assertEquals("6", test.monthOfYear().getAsString()); [EOL]     assertEquals("June", test.monthOfYear().getAsText()); [EOL]     assertEquals("juin", test.monthOfYear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("Jun", test.monthOfYear().getAsShortText()); [EOL]     assertEquals("juin", test.monthOfYear().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().months(), test.monthOfYear().getDurationField()); [EOL]     assertEquals(test.getChronology().years(), test.monthOfYear().getRangeDurationField()); [EOL]     assertEquals(9, test.monthOfYear().getMaximumTextLength(null)); [EOL]     assertEquals(3, test.monthOfYear().getMaximumShortTextLength(null)); [EOL]     test = new LocalDateTime(1972, 7, 9, 10, 20, 30, 40); [EOL]     assertEquals("juillet", test.monthOfYear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("juil.", test.monthOfYear().getAsShortText(Locale.FRENCH)); [EOL] }
public void test_now() throws Throwable { [EOL]     DateTime test = DateTime.now(); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] }
public void test_now_nullDateTimeZone() throws Throwable { [EOL]     try { [EOL]         DateTime.now((DateTimeZone) null); [EOL]         fail(); [EOL]     } catch (NullPointerException ex) { [EOL]     } [EOL] }
public void test_now_nullDateTimeZone() throws Throwable { [EOL]     try { [EOL]         DateTime.now((DateTimeZone) null); [EOL]         fail(); [EOL]     } catch (NullPointerException ex) { [EOL]     } [EOL] }
public void testConstructor() throws Throwable { [EOL]     DateTime test = new DateTime(); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] }
public void testConstructor_DateTimeZone() throws Throwable { [EOL]     DateTime test = new DateTime(PARIS); [EOL]     assertEquals(ISOChronology.getInstance(PARIS), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] }
public void testConstructor_DateTimeZone() throws Throwable { [EOL]     DateTime test = new DateTime(PARIS); [EOL]     assertEquals(ISOChronology.getInstance(PARIS), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] }
public void testConstructor_int_int_int_int_int() throws Throwable { [EOL]     DateTime test = new DateTime(2002, 6, 9, 1, 0); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(LONDON, test.getZone()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] }
public void testPropertyEqualsHashCodeStrict() { [EOL]     DateTime test1 = new DateTime(1970, 6, 9, 0, 0, 0, 0, StrictChronology.getInstance(COPTIC_PARIS)); [EOL]     DateTime test2 = new DateTime(1970, 6, 9, 0, 0, 0, 0, StrictChronology.getInstance(COPTIC_PARIS)); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL] }
public void testWithZoneRetainFields_DateTimeZone() { [EOL]     DateTime test = new DateTime(TEST_TIME1); [EOL]     DateTime result = test.withZoneRetainFields(PARIS); [EOL]     assertEquals(test.getMillis() - DateTimeConstants.MILLIS_PER_HOUR, result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     test = new DateTime(TEST_TIME1); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL]     test = new DateTime(TEST_TIME1); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertSame(test, result); [EOL]     test = new DateTime(TEST_TIME1, GREGORIAN_PARIS); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertEquals(test.getMillis() + DateTimeConstants.MILLIS_PER_HOUR, result.getMillis()); [EOL]     assertEquals(GREGORIAN_DEFAULT, result.getChronology()); [EOL]     test = new DateTime(TEST_TIME1, new MockNullZoneChronology()); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL] }
public void testWithZoneRetainFields_DateTimeZone() { [EOL]     DateTime test = new DateTime(TEST_TIME1); [EOL]     DateTime result = test.withZoneRetainFields(PARIS); [EOL]     assertEquals(test.getMillis() - DateTimeConstants.MILLIS_PER_HOUR, result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     test = new DateTime(TEST_TIME1); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL]     test = new DateTime(TEST_TIME1); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertSame(test, result); [EOL]     test = new DateTime(TEST_TIME1, GREGORIAN_PARIS); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertEquals(test.getMillis() + DateTimeConstants.MILLIS_PER_HOUR, result.getMillis()); [EOL]     assertEquals(GREGORIAN_DEFAULT, result.getChronology()); [EOL]     test = new DateTime(TEST_TIME1, new MockNullZoneChronology()); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL] }
public void testWithField1() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime result = test.withField(DateTimeFieldType.year(), 2006); [EOL]     assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0), test); [EOL]     assertEquals(new DateTime(2006, 6, 9, 0, 0, 0, 0), result); [EOL] }
public void testWithField1() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime result = test.withField(DateTimeFieldType.year(), 2006); [EOL]     assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0), test); [EOL]     assertEquals(new DateTime(2006, 6, 9, 0, 0, 0, 0), result); [EOL] }
public void testPlus_RD() { [EOL]     DateTime test = new DateTime(TEST_TIME1, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.plus(new Duration(123456789L)); [EOL]     DateTime expected = new DateTime(TEST_TIME1 + 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadableDuration) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlus_RD() { [EOL]     DateTime test = new DateTime(TEST_TIME1, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.plus(new Duration(123456789L)); [EOL]     DateTime expected = new DateTime(TEST_TIME1 + 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadableDuration) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlusWeeks_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.plusWeeks(1); [EOL]     DateTime expected = new DateTime(2002, 5, 10, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusWeeks(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusWeeks_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.plusWeeks(1); [EOL]     DateTime expected = new DateTime(2002, 5, 10, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusWeeks(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusWeeks_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.plusWeeks(1); [EOL]     DateTime expected = new DateTime(2002, 5, 10, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusWeeks(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusHours_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.plusHours(1); [EOL]     DateTime expected = new DateTime(2002, 5, 3, 2, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusHours(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusHours_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.plusHours(1); [EOL]     DateTime expected = new DateTime(2002, 5, 3, 2, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusHours(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusHours_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.plusHours(1); [EOL]     DateTime expected = new DateTime(2002, 5, 3, 2, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusHours(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusMinutes_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.plusMinutes(1); [EOL]     DateTime expected = new DateTime(2002, 5, 3, 1, 3, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusMinutes(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusMinutes_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.plusMinutes(1); [EOL]     DateTime expected = new DateTime(2002, 5, 3, 1, 3, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusMinutes(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusMinutes_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.plusMinutes(1); [EOL]     DateTime expected = new DateTime(2002, 5, 3, 1, 3, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusMinutes(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusSeconds_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.plusSeconds(1); [EOL]     DateTime expected = new DateTime(2002, 5, 3, 1, 2, 4, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusSeconds(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusSeconds_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.plusSeconds(1); [EOL]     DateTime expected = new DateTime(2002, 5, 3, 1, 2, 4, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusSeconds(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusSeconds_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.plusSeconds(1); [EOL]     DateTime expected = new DateTime(2002, 5, 3, 1, 2, 4, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusSeconds(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusMillisInDstChange() { [EOL]     DateTime dateTime = new DateTime("2010-10-31T02:30:10.123+02:00", ZONE_PARIS); [EOL]     assertEquals("2010-10-31T02:30:10.123+02:00", dateTime.toString()); [EOL]     DateTime test = dateTime.plusMillis(1); [EOL]     assertEquals("2010-10-31T02:30:10.124+02:00", test.toString()); [EOL] }
public void testPlusMillisInDstChange() { [EOL]     DateTime dateTime = new DateTime("2010-10-31T02:30:10.123+02:00", ZONE_PARIS); [EOL]     assertEquals("2010-10-31T02:30:10.123+02:00", dateTime.toString()); [EOL]     DateTime test = dateTime.plusMillis(1); [EOL]     assertEquals("2010-10-31T02:30:10.124+02:00", test.toString()); [EOL] }
public void testPlusMillisInDstChange() { [EOL]     DateTime dateTime = new DateTime("2010-10-31T02:30:10.123+02:00", ZONE_PARIS); [EOL]     assertEquals("2010-10-31T02:30:10.123+02:00", dateTime.toString()); [EOL]     DateTime test = dateTime.plusMillis(1); [EOL]     assertEquals("2010-10-31T02:30:10.124+02:00", test.toString()); [EOL] }
public void testMinus_RD() { [EOL]     DateTime test = new DateTime(TEST_TIME1, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.minus(new Duration(123456789L)); [EOL]     DateTime expected = new DateTime(TEST_TIME1 - 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minus((ReadableDuration) null); [EOL]     assertSame(test, result); [EOL] }
public void testMinus_RD() { [EOL]     DateTime test = new DateTime(TEST_TIME1, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.minus(new Duration(123456789L)); [EOL]     DateTime expected = new DateTime(TEST_TIME1 - 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minus((ReadableDuration) null); [EOL]     assertSame(test, result); [EOL] }
public void testMinus_RP() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1)); [EOL]     DateTime expected = new DateTime(2001, 3, 26, 0, 1, 2, 3, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testMinus_RP() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1)); [EOL]     DateTime expected = new DateTime(2001, 3, 26, 0, 1, 2, 3, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testMinusYears_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.minusYears(1); [EOL]     DateTime expected = new DateTime(2001, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusYears(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusYears_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.minusYears(1); [EOL]     DateTime expected = new DateTime(2001, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusYears(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusYears_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.minusYears(1); [EOL]     DateTime expected = new DateTime(2001, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusYears(0); [EOL]     assertSame(test, result); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testToDateMidnight() { [EOL]     DateTime base = new DateTime(TEST_TIME1, COPTIC_DEFAULT); [EOL]     DateMidnight test = base.toDateMidnight(); [EOL]     assertEquals(new DateMidnight(base, COPTIC_DEFAULT), test); [EOL] }
public void testPrint_appendableMethods() throws Exception { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     StringBuilder buf = new StringBuilder(); [EOL]     f.printTo(buf, dt); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", buf.toString()); [EOL]     buf = new StringBuilder(); [EOL]     f.printTo(buf, dt.getMillis()); [EOL]     assertEquals("Wed 2004-06-09T11:20:30+01:00", buf.toString()); [EOL]     buf = new StringBuilder(); [EOL]     ISODateTimeFormat.yearMonthDay().printTo(buf, dt.toLocalDate()); [EOL]     assertEquals("2004-06-09", buf.toString()); [EOL]     buf = new StringBuilder(); [EOL]     try { [EOL]         ISODateTimeFormat.yearMonthDay().printTo(buf, (ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPrint_appendableMethods() throws Exception { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     StringBuilder buf = new StringBuilder(); [EOL]     f.printTo(buf, dt); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", buf.toString()); [EOL]     buf = new StringBuilder(); [EOL]     f.printTo(buf, dt.getMillis()); [EOL]     assertEquals("Wed 2004-06-09T11:20:30+01:00", buf.toString()); [EOL]     buf = new StringBuilder(); [EOL]     ISODateTimeFormat.yearMonthDay().printTo(buf, dt.toLocalDate()); [EOL]     assertEquals("2004-06-09", buf.toString()); [EOL]     buf = new StringBuilder(); [EOL]     try { [EOL]         ISODateTimeFormat.yearMonthDay().printTo(buf, (ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testBug2182444_ausNSW() { [EOL]     Chronology chronAusNSW = GregorianChronology.getInstance(DateTimeZone.forID("Australia/NSW")); [EOL]     Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC); [EOL]     DateTime australiaNSWStandardInUTC = new DateTime(2008, 4, 5, 16, 0, 0, 0, chronUTC); [EOL]     DateTime australiaNSWDaylightInUTC = new DateTime(2008, 4, 5, 15, 0, 0, 0, chronUTC); [EOL]     assertTrue("Should be standard time", chronAusNSW.getZone().isStandardOffset(australiaNSWStandardInUTC.getMillis())); [EOL]     assertFalse("Should be daylight time", chronAusNSW.getZone().isStandardOffset(australiaNSWDaylightInUTC.getMillis())); [EOL]     DateTime australiaNSWStandardInAustraliaNSW = australiaNSWStandardInUTC.toDateTime(chronAusNSW); [EOL]     DateTime australiaNSWDaylightInAusraliaNSW = australiaNSWDaylightInUTC.toDateTime(chronAusNSW); [EOL]     assertEquals(2, australiaNSWStandardInAustraliaNSW.getHourOfDay()); [EOL]     assertEquals(australiaNSWStandardInAustraliaNSW.getHourOfDay(), australiaNSWDaylightInAusraliaNSW.getHourOfDay()); [EOL]     assertTrue(australiaNSWStandardInAustraliaNSW.getMillis() != australiaNSWDaylightInAusraliaNSW.getMillis()); [EOL]     assertEquals(australiaNSWStandardInAustraliaNSW, australiaNSWStandardInAustraliaNSW.withHourOfDay(2)); [EOL]     assertEquals(australiaNSWStandardInAustraliaNSW.getMillis() + 3, australiaNSWStandardInAustraliaNSW.withMillisOfSecond(3).getMillis()); [EOL]     assertEquals(australiaNSWDaylightInAusraliaNSW, australiaNSWDaylightInAusraliaNSW.withHourOfDay(2)); [EOL]     assertEquals(australiaNSWDaylightInAusraliaNSW.getMillis() + 3, australiaNSWDaylightInAusraliaNSW.withMillisOfSecond(3).getMillis()); [EOL] }
public void testBug2182444_ausNSW() { [EOL]     Chronology chronAusNSW = GregorianChronology.getInstance(DateTimeZone.forID("Australia/NSW")); [EOL]     Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC); [EOL]     DateTime australiaNSWStandardInUTC = new DateTime(2008, 4, 5, 16, 0, 0, 0, chronUTC); [EOL]     DateTime australiaNSWDaylightInUTC = new DateTime(2008, 4, 5, 15, 0, 0, 0, chronUTC); [EOL]     assertTrue("Should be standard time", chronAusNSW.getZone().isStandardOffset(australiaNSWStandardInUTC.getMillis())); [EOL]     assertFalse("Should be daylight time", chronAusNSW.getZone().isStandardOffset(australiaNSWDaylightInUTC.getMillis())); [EOL]     DateTime australiaNSWStandardInAustraliaNSW = australiaNSWStandardInUTC.toDateTime(chronAusNSW); [EOL]     DateTime australiaNSWDaylightInAusraliaNSW = australiaNSWDaylightInUTC.toDateTime(chronAusNSW); [EOL]     assertEquals(2, australiaNSWStandardInAustraliaNSW.getHourOfDay()); [EOL]     assertEquals(australiaNSWStandardInAustraliaNSW.getHourOfDay(), australiaNSWDaylightInAusraliaNSW.getHourOfDay()); [EOL]     assertTrue(australiaNSWStandardInAustraliaNSW.getMillis() != australiaNSWDaylightInAusraliaNSW.getMillis()); [EOL]     assertEquals(australiaNSWStandardInAustraliaNSW, australiaNSWStandardInAustraliaNSW.withHourOfDay(2)); [EOL]     assertEquals(australiaNSWStandardInAustraliaNSW.getMillis() + 3, australiaNSWStandardInAustraliaNSW.withMillisOfSecond(3).getMillis()); [EOL]     assertEquals(australiaNSWDaylightInAusraliaNSW, australiaNSWDaylightInAusraliaNSW.withHourOfDay(2)); [EOL]     assertEquals(australiaNSWDaylightInAusraliaNSW.getMillis() + 3, australiaNSWDaylightInAusraliaNSW.withMillisOfSecond(3).getMillis()); [EOL] }
public void testWithMillisOfSecondInDstChange_NewYork_summer() { [EOL]     DateTime dateTime = new DateTime("2007-11-04T01:30:00.123-04:00", ZONE_NEW_YORK); [EOL]     assertEquals("2007-11-04T01:30:00.123-04:00", dateTime.toString()); [EOL]     DateTime test = dateTime.withMillisOfSecond(0); [EOL]     assertEquals("2007-11-04T01:30:00.000-04:00", test.toString()); [EOL] }
public void testPropertyGetEra() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertSame(test.getChronology().era(), test.era().getField()); [EOL]     assertEquals("era", test.era().getName()); [EOL]     assertEquals("Property[era]", test.era().toString()); [EOL]     assertSame(test, test.era().getDateTime()); [EOL]     assertEquals(1, test.era().get()); [EOL]     assertEquals("1", test.era().getAsString()); [EOL]     assertEquals("AD", test.era().getAsText()); [EOL]     assertEquals("AD", test.era().getField().getAsText(1, Locale.ENGLISH)); [EOL]     assertEquals("ap. J.-C.", test.era().getAsText(Locale.FRENCH)); [EOL]     assertEquals("ap. J.-C.", test.era().getField().getAsText(1, Locale.FRENCH)); [EOL]     assertEquals("AD", test.era().getAsShortText()); [EOL]     assertEquals("AD", test.era().getField().getAsShortText(1, Locale.ENGLISH)); [EOL]     assertEquals("ap. J.-C.", test.era().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals("ap. J.-C.", test.era().getField().getAsShortText(1, Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().eras(), test.era().getDurationField()); [EOL]     assertEquals(null, test.era().getRangeDurationField()); [EOL]     assertEquals(2, test.era().getMaximumTextLength(null)); [EOL]     assertEquals(9, test.era().getMaximumTextLength(Locale.FRENCH)); [EOL]     assertEquals(2, test.era().getMaximumShortTextLength(null)); [EOL]     assertEquals(9, test.era().getMaximumShortTextLength(Locale.FRENCH)); [EOL] }
public void testPropertySetWeekOfWeekyear() { [EOL]     DateTime test = new DateTime(2004, 6, 7, 0, 0, 0, 0); [EOL]     DateTime copy = test.weekOfWeekyear().setCopy(4); [EOL]     assertEquals("2004-06-07T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2004-01-19T00:00:00.000Z", copy.toString()); [EOL]     try { [EOL]         test.weekOfWeekyear().setCopy(54); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.weekOfWeekyear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyWithMinimumValueMillisOfDayDSTGap() { [EOL]     DateTimeZone gaza = DateTimeZone.forID("Asia/Gaza"); [EOL]     DateTime dt = new DateTime(2001, 4, 20, 18, 0, 0, 0, gaza); [EOL]     DateTime test = dt.millisOfDay().withMinimumValue(); [EOL]     assertEquals("2001-04-20T01:00:00.000+03:00", test.toString()); [EOL] }
public void testPropertyEqualsHashCodeStrict() { [EOL]     DateTime test1 = new DateTime(1970, 6, 9, 0, 0, 0, 0, StrictChronology.getInstance(COPTIC_PARIS)); [EOL]     DateTime test2 = new DateTime(1970, 6, 9, 0, 0, 0, 0, StrictChronology.getInstance(COPTIC_PARIS)); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL] }
public void testPropertyWithMinimumValueMillisOfDayDSTGap() { [EOL]     DateTimeZone gaza = DateTimeZone.forID("Asia/Gaza"); [EOL]     DateTime dt = new DateTime(2001, 4, 20, 18, 0, 0, 0, gaza); [EOL]     DateTime test = dt.millisOfDay().withMinimumValue(); [EOL]     assertEquals("2001-04-20T01:00:00.000+03:00", test.toString()); [EOL] }
public void testPropertyWithMinimumValueMillisOfDayDSTGap() { [EOL]     DateTimeZone gaza = DateTimeZone.forID("Asia/Gaza"); [EOL]     DateTime dt = new DateTime(2001, 4, 20, 18, 0, 0, 0, gaza); [EOL]     DateTime test = dt.millisOfDay().withMinimumValue(); [EOL]     assertEquals("2001-04-20T01:00:00.000+03:00", test.toString()); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testProvider_badClassName() { [EOL]     try { [EOL]         System.setProperty("org.joda.time.DateTimeZone.Provider", "xxx"); [EOL]         DateTimeZone.setProvider(null); [EOL]     } catch (RuntimeException ex) { [EOL]         assertEquals(ZoneInfoProvider.class, DateTimeZone.getProvider().getClass()); [EOL]     } finally { [EOL]         System.getProperties().remove("org.joda.time.DateTimeZone.Provider"); [EOL]         DateTimeZone.setProvider(null); [EOL]     } [EOL] }
public void testProvider_badClassName() { [EOL]     try { [EOL]         System.setProperty("org.joda.time.DateTimeZone.Provider", "xxx"); [EOL]         DateTimeZone.setProvider(null); [EOL]     } catch (RuntimeException ex) { [EOL]         assertEquals(ZoneInfoProvider.class, DateTimeZone.getProvider().getClass()); [EOL]     } finally { [EOL]         System.getProperties().remove("org.joda.time.DateTimeZone.Provider"); [EOL]         DateTimeZone.setProvider(null); [EOL]     } [EOL] }
public void testProvider_badClassName() { [EOL]     try { [EOL]         System.setProperty("org.joda.time.DateTimeZone.Provider", "xxx"); [EOL]         DateTimeZone.setProvider(null); [EOL]     } catch (RuntimeException ex) { [EOL]         assertEquals(ZoneInfoProvider.class, DateTimeZone.getProvider().getClass()); [EOL]     } finally { [EOL]         System.getProperties().remove("org.joda.time.DateTimeZone.Provider"); [EOL]         DateTimeZone.setProvider(null); [EOL]     } [EOL] }
public void testProvider_badClassName() { [EOL]     try { [EOL]         System.setProperty("org.joda.time.DateTimeZone.Provider", "xxx"); [EOL]         DateTimeZone.setProvider(null); [EOL]     } catch (RuntimeException ex) { [EOL]         assertEquals(ZoneInfoProvider.class, DateTimeZone.getProvider().getClass()); [EOL]     } finally { [EOL]         System.getProperties().remove("org.joda.time.DateTimeZone.Provider"); [EOL]         DateTimeZone.setProvider(null); [EOL]     } [EOL] }
public void testProvider_badClassName() { [EOL]     try { [EOL]         System.setProperty("org.joda.time.DateTimeZone.Provider", "xxx"); [EOL]         DateTimeZone.setProvider(null); [EOL]     } catch (RuntimeException ex) { [EOL]         assertEquals(ZoneInfoProvider.class, DateTimeZone.getProvider().getClass()); [EOL]     } finally { [EOL]         System.getProperties().remove("org.joda.time.DateTimeZone.Provider"); [EOL]         DateTimeZone.setProvider(null); [EOL]     } [EOL] }
public void testProvider_badClassName() { [EOL]     try { [EOL]         System.setProperty("org.joda.time.DateTimeZone.Provider", "xxx"); [EOL]         DateTimeZone.setProvider(null); [EOL]     } catch (RuntimeException ex) { [EOL]         assertEquals(ZoneInfoProvider.class, DateTimeZone.getProvider().getClass()); [EOL]     } finally { [EOL]         System.getProperties().remove("org.joda.time.DateTimeZone.Provider"); [EOL]         DateTimeZone.setProvider(null); [EOL]     } [EOL] }
public void testProvider_badClassName() { [EOL]     try { [EOL]         System.setProperty("org.joda.time.DateTimeZone.Provider", "xxx"); [EOL]         DateTimeZone.setProvider(null); [EOL]     } catch (RuntimeException ex) { [EOL]         assertEquals(ZoneInfoProvider.class, DateTimeZone.getProvider().getClass()); [EOL]     } finally { [EOL]         System.getProperties().remove("org.joda.time.DateTimeZone.Provider"); [EOL]         DateTimeZone.setProvider(null); [EOL]     } [EOL] }
public void testSetDayOfMonth_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setDayOfMonth(30); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testSetDayOfMonth_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setDayOfMonth(30); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testSetDayOfMonth_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setDayOfMonth(30); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testSetDayOfMonth_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setDayOfMonth(30); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testSetDayOfMonth_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setDayOfMonth(30); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testSetDayOfMonth_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setDayOfMonth(30); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] }
public void testProvider_badClassName() { [EOL]     try { [EOL]         System.setProperty("org.joda.time.DateTimeZone.Provider", "xxx"); [EOL]         DateTimeZone.setProvider(null); [EOL]     } catch (RuntimeException ex) { [EOL]         assertEquals(ZoneInfoProvider.class, DateTimeZone.getProvider().getClass()); [EOL]     } finally { [EOL]         System.getProperties().remove("org.joda.time.DateTimeZone.Provider"); [EOL]         DateTimeZone.setProvider(null); [EOL]     } [EOL] }
public void testProvider_badClassName() { [EOL]     try { [EOL]         System.setProperty("org.joda.time.DateTimeZone.Provider", "xxx"); [EOL]         DateTimeZone.setProvider(null); [EOL]     } catch (RuntimeException ex) { [EOL]         assertEquals(ZoneInfoProvider.class, DateTimeZone.getProvider().getClass()); [EOL]     } finally { [EOL]         System.getProperties().remove("org.joda.time.DateTimeZone.Provider"); [EOL]         DateTimeZone.setProvider(null); [EOL]     } [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testProvider_badClassName() { [EOL]     try { [EOL]         System.setProperty("org.joda.time.DateTimeZone.Provider", "xxx"); [EOL]         DateTimeZone.setProvider(null); [EOL]     } catch (RuntimeException ex) { [EOL]         assertEquals(ZoneInfoProvider.class, DateTimeZone.getProvider().getClass()); [EOL]     } finally { [EOL]         System.getProperties().remove("org.joda.time.DateTimeZone.Provider"); [EOL]         DateTimeZone.setProvider(null); [EOL]     } [EOL] }
public void testProvider_badClassName() { [EOL]     try { [EOL]         System.setProperty("org.joda.time.DateTimeZone.Provider", "xxx"); [EOL]         DateTimeZone.setProvider(null); [EOL]     } catch (RuntimeException ex) { [EOL]         assertEquals(ZoneInfoProvider.class, DateTimeZone.getProvider().getClass()); [EOL]     } finally { [EOL]         System.getProperties().remove("org.joda.time.DateTimeZone.Provider"); [EOL]         DateTimeZone.setProvider(null); [EOL]     } [EOL] }
public void testProvider_badClassName() { [EOL]     try { [EOL]         System.setProperty("org.joda.time.DateTimeZone.Provider", "xxx"); [EOL]         DateTimeZone.setProvider(null); [EOL]     } catch (RuntimeException ex) { [EOL]         assertEquals(ZoneInfoProvider.class, DateTimeZone.getProvider().getClass()); [EOL]     } finally { [EOL]         System.getProperties().remove("org.joda.time.DateTimeZone.Provider"); [EOL]         DateTimeZone.setProvider(null); [EOL]     } [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testWithGetParseTypeMethods() { [EOL]     PeriodFormatter f2 = f.withParseType(PeriodType.dayTime()); [EOL]     assertEquals(PeriodType.dayTime(), f2.getParseType()); [EOL]     assertSame(f2, f2.withParseType(PeriodType.dayTime())); [EOL]     f2 = f.withParseType(null); [EOL]     assertEquals(null, f2.getParseType()); [EOL]     assertSame(f2, f2.withParseType(null)); [EOL] }
public void testWithGetParseTypeMethods() { [EOL]     PeriodFormatter f2 = f.withParseType(PeriodType.dayTime()); [EOL]     assertEquals(PeriodType.dayTime(), f2.getParseType()); [EOL]     assertSame(f2, f2.withParseType(PeriodType.dayTime())); [EOL]     f2 = f.withParseType(null); [EOL]     assertEquals(null, f2.getParseType()); [EOL]     assertSame(f2, f2.withParseType(null)); [EOL] }
public void testWithGetParseTypeMethods() { [EOL]     PeriodFormatter f2 = f.withParseType(PeriodType.dayTime()); [EOL]     assertEquals(PeriodType.dayTime(), f2.getParseType()); [EOL]     assertSame(f2, f2.withParseType(PeriodType.dayTime())); [EOL]     f2 = f.withParseType(null); [EOL]     assertEquals(null, f2.getParseType()); [EOL]     assertSame(f2, f2.withParseType(null)); [EOL] }
public void testPrint_bufferMethods() throws Exception { [EOL]     Period p = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     StringBuffer buf = new StringBuffer(); [EOL]     f.printTo(buf, p); [EOL]     assertEquals("P1Y2M3W4DT5H6M7.008S", buf.toString()); [EOL]     buf = new StringBuffer(); [EOL]     try { [EOL]         f.printTo(buf, null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testConstructorEx6_TypeArray_intArray() throws Throwable { [EOL]     try { [EOL]         new Partial(new DateTimeFieldType[] { null, DateTimeFieldType.dayOfYear() }, new int[2]); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         assertMessageContains(ex, "contain null"); [EOL]     } [EOL]     try { [EOL]         new Partial(new DateTimeFieldType[] { DateTimeFieldType.dayOfYear(), null }, new int[2]); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         assertMessageContains(ex, "contain null"); [EOL]     } [EOL] }
public void testWithField2() { [EOL]     Partial test = createHourMinPartial(); [EOL]     try { [EOL]         test.withField(null, 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 10, 20); [EOL] }
public void testWithField2() { [EOL]     Partial test = createHourMinPartial(); [EOL]     try { [EOL]         test.withField(null, 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 10, 20); [EOL] }
public void testWithField2() { [EOL]     Partial test = createHourMinPartial(); [EOL]     try { [EOL]         test.withField(null, 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 10, 20); [EOL] }
public void testMinus_RP() { [EOL]     Partial test = createHourMinPartial(BUDDHIST_LONDON); [EOL]     Partial result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1)); [EOL]     check(test, 10, 20); [EOL]     check(result, 9, 19); [EOL]     result = test.minus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testMinus_RP() { [EOL]     Partial test = createHourMinPartial(BUDDHIST_LONDON); [EOL]     Partial result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1)); [EOL]     check(test, 10, 20); [EOL]     check(result, 9, 19); [EOL]     result = test.minus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testMinus_RP() { [EOL]     Partial test = createHourMinPartial(BUDDHIST_LONDON); [EOL]     Partial result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1)); [EOL]     check(test, 10, 20); [EOL]     check(result, 9, 19); [EOL]     result = test.minus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlus_RP() { [EOL]     Partial test = createHourMinPartial(BUDDHIST_LONDON); [EOL]     Partial result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8)); [EOL]     check(test, 10, 20); [EOL]     check(result, 15, 26); [EOL]     result = test.plus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlus_RP() { [EOL]     Partial test = createHourMinPartial(BUDDHIST_LONDON); [EOL]     Partial result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8)); [EOL]     check(test, 10, 20); [EOL]     check(result, 15, 26); [EOL]     result = test.plus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testMinus_RP() { [EOL]     Partial test = createHourMinPartial(BUDDHIST_LONDON); [EOL]     Partial result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1)); [EOL]     check(test, 10, 20); [EOL]     check(result, 9, 19); [EOL]     result = test.minus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testMinus_RP() { [EOL]     Partial test = createHourMinPartial(BUDDHIST_LONDON); [EOL]     Partial result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1)); [EOL]     check(test, 10, 20); [EOL]     check(result, 9, 19); [EOL]     result = test.minus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testIsMatch_Partial() { [EOL]     Partial test = createYMDwPartial(ISO_UTC, 2005, 7, 2); [EOL]     LocalDate partial = new LocalDate(2005, 7, 5); [EOL]     assertEquals(true, test.isMatch(partial)); [EOL]     partial = new LocalDate(2005, 7, 4); [EOL]     assertEquals(false, test.isMatch(partial)); [EOL]     partial = new LocalDate(2005, 7, 6); [EOL]     assertEquals(false, test.isMatch(partial)); [EOL]     partial = new LocalDate(2005, 7, 12); [EOL]     assertEquals(true, test.isMatch(partial)); [EOL]     partial = new LocalDate(2005, 7, 19); [EOL]     assertEquals(true, test.isMatch(partial)); [EOL]     partial = new LocalDate(2005, 7, 26); [EOL]     assertEquals(true, test.isMatch(partial)); [EOL]     partial = new LocalDate(2005, 8, 2); [EOL]     assertEquals(false, test.isMatch(partial)); [EOL]     partial = new LocalDate(2006, 7, 5); [EOL]     assertEquals(false, test.isMatch(partial)); [EOL]     partial = new LocalDate(2005, 6, 5); [EOL]     assertEquals(false, test.isMatch(partial)); [EOL]     try { [EOL]         test.isMatch((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testIsMatch_Partial() { [EOL]     Partial test = createYMDwPartial(ISO_UTC, 2005, 7, 2); [EOL]     LocalDate partial = new LocalDate(2005, 7, 5); [EOL]     assertEquals(true, test.isMatch(partial)); [EOL]     partial = new LocalDate(2005, 7, 4); [EOL]     assertEquals(false, test.isMatch(partial)); [EOL]     partial = new LocalDate(2005, 7, 6); [EOL]     assertEquals(false, test.isMatch(partial)); [EOL]     partial = new LocalDate(2005, 7, 12); [EOL]     assertEquals(true, test.isMatch(partial)); [EOL]     partial = new LocalDate(2005, 7, 19); [EOL]     assertEquals(true, test.isMatch(partial)); [EOL]     partial = new LocalDate(2005, 7, 26); [EOL]     assertEquals(true, test.isMatch(partial)); [EOL]     partial = new LocalDate(2005, 8, 2); [EOL]     assertEquals(false, test.isMatch(partial)); [EOL]     partial = new LocalDate(2006, 7, 5); [EOL]     assertEquals(false, test.isMatch(partial)); [EOL]     partial = new LocalDate(2005, 6, 5); [EOL]     assertEquals(false, test.isMatch(partial)); [EOL]     try { [EOL]         test.isMatch((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testIsMatch_Partial() { [EOL]     Partial test = createYMDwPartial(ISO_UTC, 2005, 7, 2); [EOL]     LocalDate partial = new LocalDate(2005, 7, 5); [EOL]     assertEquals(true, test.isMatch(partial)); [EOL]     partial = new LocalDate(2005, 7, 4); [EOL]     assertEquals(false, test.isMatch(partial)); [EOL]     partial = new LocalDate(2005, 7, 6); [EOL]     assertEquals(false, test.isMatch(partial)); [EOL]     partial = new LocalDate(2005, 7, 12); [EOL]     assertEquals(true, test.isMatch(partial)); [EOL]     partial = new LocalDate(2005, 7, 19); [EOL]     assertEquals(true, test.isMatch(partial)); [EOL]     partial = new LocalDate(2005, 7, 26); [EOL]     assertEquals(true, test.isMatch(partial)); [EOL]     partial = new LocalDate(2005, 8, 2); [EOL]     assertEquals(false, test.isMatch(partial)); [EOL]     partial = new LocalDate(2006, 7, 5); [EOL]     assertEquals(false, test.isMatch(partial)); [EOL]     partial = new LocalDate(2005, 6, 5); [EOL]     assertEquals(false, test.isMatch(partial)); [EOL]     try { [EOL]         test.isMatch((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testToString5() { [EOL]     Partial test = new Partial(DateTimeFieldType.era(), 1); [EOL]     assertEquals("[era=1]", test.toString()); [EOL]     test = test.with(DateTimeFieldType.halfdayOfDay(), 0); [EOL]     assertEquals("[era=1, halfdayOfDay=0]", test.toString()); [EOL] }
public void testToString5() { [EOL]     Partial test = new Partial(DateTimeFieldType.era(), 1); [EOL]     assertEquals("[era=1]", test.toString()); [EOL]     test = test.with(DateTimeFieldType.halfdayOfDay(), 0); [EOL]     assertEquals("[era=1, halfdayOfDay=0]", test.toString()); [EOL] }
public void testToString5() { [EOL]     Partial test = new Partial(DateTimeFieldType.era(), 1); [EOL]     assertEquals("[era=1]", test.toString()); [EOL]     test = test.with(DateTimeFieldType.halfdayOfDay(), 0); [EOL]     assertEquals("[era=1, halfdayOfDay=0]", test.toString()); [EOL] }
public void testToString5() { [EOL]     Partial test = new Partial(DateTimeFieldType.era(), 1); [EOL]     assertEquals("[era=1]", test.toString()); [EOL]     test = test.with(DateTimeFieldType.halfdayOfDay(), 0); [EOL]     assertEquals("[era=1, halfdayOfDay=0]", test.toString()); [EOL] }
public void testToString5() { [EOL]     Partial test = new Partial(DateTimeFieldType.era(), 1); [EOL]     assertEquals("[era=1]", test.toString()); [EOL]     test = test.with(DateTimeFieldType.halfdayOfDay(), 0); [EOL]     assertEquals("[era=1, halfdayOfDay=0]", test.toString()); [EOL] }
public void testToString5() { [EOL]     Partial test = new Partial(DateTimeFieldType.era(), 1); [EOL]     assertEquals("[era=1]", test.toString()); [EOL]     test = test.with(DateTimeFieldType.halfdayOfDay(), 0); [EOL]     assertEquals("[era=1, halfdayOfDay=0]", test.toString()); [EOL] }
public void testToString_String() { [EOL]     Partial test = createHourMinPartial(); [EOL]     assertEquals("\ufffd\ufffd\ufffd\ufffd 10", test.toString("yyyy HH")); [EOL]     assertEquals("10:20", test.toString((String) null)); [EOL] }
public void testToString_String() { [EOL]     Partial test = createHourMinPartial(); [EOL]     assertEquals("\ufffd\ufffd\ufffd\ufffd 10", test.toString("yyyy HH")); [EOL]     assertEquals("10:20", test.toString((String) null)); [EOL] }
public void testToString_String_Locale() { [EOL]     Partial test = createHourMinPartial(); [EOL]     assertEquals("10 20", test.toString("H m", Locale.ENGLISH)); [EOL]     assertEquals("10:20", test.toString(null, Locale.ENGLISH)); [EOL]     assertEquals("10 20", test.toString("H m", null)); [EOL]     assertEquals("10:20", test.toString(null, null)); [EOL] }
public void testToString_String_Locale() { [EOL]     Partial test = createHourMinPartial(); [EOL]     assertEquals("10 20", test.toString("H m", Locale.ENGLISH)); [EOL]     assertEquals("10:20", test.toString(null, Locale.ENGLISH)); [EOL]     assertEquals("10 20", test.toString("H m", null)); [EOL]     assertEquals("10:20", test.toString(null, null)); [EOL] }
public void testPropertyAddMinute() { [EOL]     Partial test = new Partial(TYPES, VALUES); [EOL]     Partial copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(9); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 29, 30, 40); [EOL]     copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(39); [EOL]     check(copy, 10, 59, 30, 40); [EOL]     copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(40); [EOL]     check(copy, 11, 0, 30, 40); [EOL]     copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(1 * 60 + 45); [EOL]     check(copy, 12, 5, 30, 40); [EOL]     copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(13 * 60 + 39); [EOL]     check(copy, 23, 59, 30, 40); [EOL]     try { [EOL]         test.property(DateTimeFieldType.minuteOfHour()).addToCopy(13 * 60 + 40); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 10, 20, 30, 40); [EOL]     copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(-9); [EOL]     check(copy, 10, 11, 30, 40); [EOL]     copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(-19); [EOL]     check(copy, 10, 1, 30, 40); [EOL]     copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(-20); [EOL]     check(copy, 10, 0, 30, 40); [EOL]     copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(-21); [EOL]     check(copy, 9, 59, 30, 40); [EOL]     copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(-(10 * 60 + 20)); [EOL]     check(copy, 0, 0, 30, 40); [EOL]     try { [EOL]         test.property(DateTimeFieldType.minuteOfHour()).addToCopy(-(10 * 60 + 21)); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 10, 20, 30, 40); [EOL] }
public void testPropertyAddMinute() { [EOL]     Partial test = new Partial(TYPES, VALUES); [EOL]     Partial copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(9); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 29, 30, 40); [EOL]     copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(39); [EOL]     check(copy, 10, 59, 30, 40); [EOL]     copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(40); [EOL]     check(copy, 11, 0, 30, 40); [EOL]     copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(1 * 60 + 45); [EOL]     check(copy, 12, 5, 30, 40); [EOL]     copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(13 * 60 + 39); [EOL]     check(copy, 23, 59, 30, 40); [EOL]     try { [EOL]         test.property(DateTimeFieldType.minuteOfHour()).addToCopy(13 * 60 + 40); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 10, 20, 30, 40); [EOL]     copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(-9); [EOL]     check(copy, 10, 11, 30, 40); [EOL]     copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(-19); [EOL]     check(copy, 10, 1, 30, 40); [EOL]     copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(-20); [EOL]     check(copy, 10, 0, 30, 40); [EOL]     copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(-21); [EOL]     check(copy, 9, 59, 30, 40); [EOL]     copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(-(10 * 60 + 20)); [EOL]     check(copy, 0, 0, 30, 40); [EOL]     try { [EOL]         test.property(DateTimeFieldType.minuteOfHour()).addToCopy(-(10 * 60 + 21)); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 10, 20, 30, 40); [EOL] }
public void testPropertyWithMaximumValueHour() { [EOL]     Partial test = new Partial(TYPES, VALUES); [EOL]     Partial copy = test.property(DateTimeFieldType.hourOfDay()).withMaximumValue(); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 23, 20, 30, 40); [EOL] }
public void testToDurationTo() { [EOL]     Period test = new Period(123L); [EOL]     assertEquals(new Duration(123L), test.toDurationTo(new Instant(123L))); [EOL] }
public void testToDurationTo() { [EOL]     Period test = new Period(123L); [EOL]     assertEquals(new Duration(123L), test.toDurationTo(new Instant(123L))); [EOL] }
public void testToDurationTo() { [EOL]     Period test = new Period(123L); [EOL]     assertEquals(new Duration(123L), test.toDurationTo(new Instant(123L))); [EOL] }
public void testToPeriodFrom() { [EOL]     long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L; [EOL]     Duration test = new Duration(length); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     Period result = test.toPeriodFrom(dt); [EOL]     assertEquals(new Period(dt, test), result); [EOL] }
public void testToPeriodFrom() { [EOL]     long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L; [EOL]     Duration test = new Duration(length); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     Period result = test.toPeriodFrom(dt); [EOL]     assertEquals(new Period(dt, test), result); [EOL] }
public void testFactory_yearsIn_RInterval() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2009, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2012, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     assertEquals(0, Years.yearsIn((ReadableInterval) null).getYears()); [EOL]     assertEquals(3, Years.yearsIn(new Interval(start, end1)).getYears()); [EOL]     assertEquals(0, Years.yearsIn(new Interval(start, start)).getYears()); [EOL]     assertEquals(0, Years.yearsIn(new Interval(end1, end1)).getYears()); [EOL]     assertEquals(6, Years.yearsIn(new Interval(start, end2)).getYears()); [EOL] }
public void testFactory_yearsIn_RInterval() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2009, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2012, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     assertEquals(0, Years.yearsIn((ReadableInterval) null).getYears()); [EOL]     assertEquals(3, Years.yearsIn(new Interval(start, end1)).getYears()); [EOL]     assertEquals(0, Years.yearsIn(new Interval(start, start)).getYears()); [EOL]     assertEquals(0, Years.yearsIn(new Interval(end1, end1)).getYears()); [EOL]     assertEquals(6, Years.yearsIn(new Interval(start, end2)).getYears()); [EOL] }
public void testSerialization() throws Exception { [EOL]     Years test = Years.THREE; [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     Years result = (Years) ois.readObject(); [EOL]     ois.close(); [EOL]     assertSame(test, result); [EOL] }
public void testGetFieldType() { [EOL]     Years test = Years.years(20); [EOL]     assertEquals(DurationFieldType.years(), test.getFieldType()); [EOL] }
public void testGetPeriodType() { [EOL]     Years test = Years.years(20); [EOL]     assertEquals(PeriodType.years(), test.getPeriodType()); [EOL] }
public void testPlus_Years() { [EOL]     Years test2 = Years.years(2); [EOL]     Years test3 = Years.years(3); [EOL]     Years result = test2.plus(test3); [EOL]     assertEquals(2, test2.getYears()); [EOL]     assertEquals(3, test3.getYears()); [EOL]     assertEquals(5, result.getYears()); [EOL]     assertEquals(1, Years.ONE.plus(Years.ZERO).getYears()); [EOL]     assertEquals(1, Years.ONE.plus((Years) null).getYears()); [EOL]     try { [EOL]         Years.MAX_VALUE.plus(Years.ONE); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testPlus_Years() { [EOL]     Years test2 = Years.years(2); [EOL]     Years test3 = Years.years(3); [EOL]     Years result = test2.plus(test3); [EOL]     assertEquals(2, test2.getYears()); [EOL]     assertEquals(3, test3.getYears()); [EOL]     assertEquals(5, result.getYears()); [EOL]     assertEquals(1, Years.ONE.plus(Years.ZERO).getYears()); [EOL]     assertEquals(1, Years.ONE.plus((Years) null).getYears()); [EOL]     try { [EOL]         Years.MAX_VALUE.plus(Years.ONE); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testPlus_Years() { [EOL]     Years test2 = Years.years(2); [EOL]     Years test3 = Years.years(3); [EOL]     Years result = test2.plus(test3); [EOL]     assertEquals(2, test2.getYears()); [EOL]     assertEquals(3, test3.getYears()); [EOL]     assertEquals(5, result.getYears()); [EOL]     assertEquals(1, Years.ONE.plus(Years.ZERO).getYears()); [EOL]     assertEquals(1, Years.ONE.plus((Years) null).getYears()); [EOL]     try { [EOL]         Years.MAX_VALUE.plus(Years.ONE); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testPlus_Years() { [EOL]     Years test2 = Years.years(2); [EOL]     Years test3 = Years.years(3); [EOL]     Years result = test2.plus(test3); [EOL]     assertEquals(2, test2.getYears()); [EOL]     assertEquals(3, test3.getYears()); [EOL]     assertEquals(5, result.getYears()); [EOL]     assertEquals(1, Years.ONE.plus(Years.ZERO).getYears()); [EOL]     assertEquals(1, Years.ONE.plus((Years) null).getYears()); [EOL]     try { [EOL]         Years.MAX_VALUE.plus(Years.ONE); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testPlus_Years() { [EOL]     Years test2 = Years.years(2); [EOL]     Years test3 = Years.years(3); [EOL]     Years result = test2.plus(test3); [EOL]     assertEquals(2, test2.getYears()); [EOL]     assertEquals(3, test3.getYears()); [EOL]     assertEquals(5, result.getYears()); [EOL]     assertEquals(1, Years.ONE.plus(Years.ZERO).getYears()); [EOL]     assertEquals(1, Years.ONE.plus((Years) null).getYears()); [EOL]     try { [EOL]         Years.MAX_VALUE.plus(Years.ONE); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testPlus_long() { [EOL]     Instant test = new Instant(TEST_TIME1); [EOL]     Instant result = test.plus(123456789L); [EOL]     Instant expected = new Instant(TEST_TIME1 + 123456789L); [EOL]     assertEquals(expected, result); [EOL] }
public void testPlus_long() { [EOL]     Instant test = new Instant(TEST_TIME1); [EOL]     Instant result = test.plus(123456789L); [EOL]     Instant expected = new Instant(TEST_TIME1 + 123456789L); [EOL]     assertEquals(expected, result); [EOL] }
public void testPlus_long() { [EOL]     Instant test = new Instant(TEST_TIME1); [EOL]     Instant result = test.plus(123456789L); [EOL]     Instant expected = new Instant(TEST_TIME1 + 123456789L); [EOL]     assertEquals(expected, result); [EOL] }
public void testPlus_long() { [EOL]     Instant test = new Instant(TEST_TIME1); [EOL]     Instant result = test.plus(123456789L); [EOL]     Instant expected = new Instant(TEST_TIME1 + 123456789L); [EOL]     assertEquals(expected, result); [EOL] }
public void testPlus_long() { [EOL]     Instant test = new Instant(TEST_TIME1); [EOL]     Instant result = test.plus(123456789L); [EOL]     Instant expected = new Instant(TEST_TIME1 + 123456789L); [EOL]     assertEquals(expected, result); [EOL] }
public void testMinus_RD() { [EOL]     Instant test = new Instant(TEST_TIME1); [EOL]     Instant result = test.minus(new Duration(123456789L)); [EOL]     Instant expected = new Instant(TEST_TIME1 - 123456789L); [EOL]     assertEquals(expected, result); [EOL]     result = test.minus((ReadableDuration) null); [EOL]     assertSame(test, result); [EOL] }
public void testMinus_RD() { [EOL]     Instant test = new Instant(TEST_TIME1); [EOL]     Instant result = test.minus(new Duration(123456789L)); [EOL]     Instant expected = new Instant(TEST_TIME1 - 123456789L); [EOL]     assertEquals(expected, result); [EOL]     result = test.minus((ReadableDuration) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlus_long() { [EOL]     Instant test = new Instant(TEST_TIME1); [EOL]     Instant result = test.plus(123456789L); [EOL]     Instant expected = new Instant(TEST_TIME1 + 123456789L); [EOL]     assertEquals(expected, result); [EOL] }
public void testMinus_RD() { [EOL]     Instant test = new Instant(TEST_TIME1); [EOL]     Instant result = test.minus(new Duration(123456789L)); [EOL]     Instant expected = new Instant(TEST_TIME1 - 123456789L); [EOL]     assertEquals(expected, result); [EOL]     result = test.minus((ReadableDuration) null); [EOL]     assertSame(test, result); [EOL] }
public void testMinus_RD() { [EOL]     Instant test = new Instant(TEST_TIME1); [EOL]     Instant result = test.minus(new Duration(123456789L)); [EOL]     Instant expected = new Instant(TEST_TIME1 - 123456789L); [EOL]     assertEquals(expected, result); [EOL]     result = test.minus((ReadableDuration) null); [EOL]     assertSame(test, result); [EOL] }
public void testMinus_RD() { [EOL]     Instant test = new Instant(TEST_TIME1); [EOL]     Instant result = test.minus(new Duration(123456789L)); [EOL]     Instant expected = new Instant(TEST_TIME1 - 123456789L); [EOL]     assertEquals(expected, result); [EOL]     result = test.minus((ReadableDuration) null); [EOL]     assertSame(test, result); [EOL] }
public void testMinus_RD() { [EOL]     Instant test = new Instant(TEST_TIME1); [EOL]     Instant result = test.minus(new Duration(123456789L)); [EOL]     Instant expected = new Instant(TEST_TIME1 - 123456789L); [EOL]     assertEquals(expected, result); [EOL]     result = test.minus((ReadableDuration) null); [EOL]     assertSame(test, result); [EOL] }
public void testToDateTimeISO() { [EOL]     Instant test = new Instant(TEST_TIME1); [EOL]     DateTime result = test.toDateTimeISO(); [EOL]     assertSame(DateTime.class, result.getClass()); [EOL]     assertSame(ISOChronology.class, result.getChronology().getClass()); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISOChronology.getInstance(), result.getChronology()); [EOL] }
public void testConstructor_DateTimeZone() throws Throwable { [EOL]     DateTime dt = new DateTime(2005, 6, 8, 23, 59, 0, 0, LONDON); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     LocalDate test = new LocalDate(LONDON); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2005, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(8, test.getDayOfMonth()); [EOL]     assertEquals(test, LocalDate.now(LONDON)); [EOL]     test = new LocalDate(PARIS); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2005, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(test, LocalDate.now(PARIS)); [EOL] }
public void testConstructor_DateTimeZone() throws Throwable { [EOL]     DateTime dt = new DateTime(2005, 6, 8, 23, 59, 0, 0, LONDON); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     LocalDate test = new LocalDate(LONDON); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2005, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(8, test.getDayOfMonth()); [EOL]     assertEquals(test, LocalDate.now(LONDON)); [EOL]     test = new LocalDate(PARIS); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2005, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(test, LocalDate.now(PARIS)); [EOL] }
public void testConstructor_Chronology() throws Throwable { [EOL]     LocalDate test = new LocalDate(GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(test, LocalDate.now(GREGORIAN_PARIS)); [EOL] }
public void testGetValues() { [EOL]     LocalDate test = new LocalDate(); [EOL]     int[] values = test.getValues(); [EOL]     assertEquals(1970, values[0]); [EOL]     assertEquals(6, values[1]); [EOL]     assertEquals(9, values[2]); [EOL]     assertNotSame(test.getValues(), test.getValues()); [EOL] }
public void testPropertyCompareToMonth() { [EOL]     LocalDate test1 = new LocalDate(TEST_TIME1); [EOL]     LocalDate test2 = new LocalDate(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonth() { [EOL]     LocalDate test1 = new LocalDate(TEST_TIME1); [EOL]     LocalDate test2 = new LocalDate(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void test_LocalDate_new_Turk() { [EOL]     LocalDate date1 = new LocalDate(CUTOVER_TURK, MOCK_TURK); [EOL]     assertEquals("2007-04-01", date1.toString()); [EOL]     LocalDate date2 = new LocalDate(CUTOVER_TURK - 1, MOCK_TURK); [EOL]     assertEquals("2007-03-31", date2.toString()); [EOL] }
public void test_LocalDate_new_Turk() { [EOL]     LocalDate date1 = new LocalDate(CUTOVER_TURK, MOCK_TURK); [EOL]     assertEquals("2007-04-01", date1.toString()); [EOL]     LocalDate date2 = new LocalDate(CUTOVER_TURK - 1, MOCK_TURK); [EOL]     assertEquals("2007-03-31", date2.toString()); [EOL] }
public void testConstructor_ObjectString2() throws Throwable { [EOL]     LocalDate test = new LocalDate("1972-037"); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1972, test.getYear()); [EOL]     assertEquals(2, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testConstructor_ObjectString2() throws Throwable { [EOL]     LocalDate test = new LocalDate("1972-037"); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1972, test.getYear()); [EOL]     assertEquals(2, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testConstructor_ObjectString2() throws Throwable { [EOL]     LocalDate test = new LocalDate("1972-037"); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1972, test.getYear()); [EOL]     assertEquals(2, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testConstructor_ObjectString2() throws Throwable { [EOL]     LocalDate test = new LocalDate("1972-037"); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1972, test.getYear()); [EOL]     assertEquals(2, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testConstructor_ObjectString2() throws Throwable { [EOL]     LocalDate test = new LocalDate("1972-037"); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1972, test.getYear()); [EOL]     assertEquals(2, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testConstructor_ObjectString2() throws Throwable { [EOL]     LocalDate test = new LocalDate("1972-037"); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1972, test.getYear()); [EOL]     assertEquals(2, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testConstructor_ObjectString2() throws Throwable { [EOL]     LocalDate test = new LocalDate("1972-037"); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1972, test.getYear()); [EOL]     assertEquals(2, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testConstructor_ObjectString2() throws Throwable { [EOL]     LocalDate test = new LocalDate("1972-037"); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1972, test.getYear()); [EOL]     assertEquals(2, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testConstructor_ObjectString2() throws Throwable { [EOL]     LocalDate test = new LocalDate("1972-037"); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1972, test.getYear()); [EOL]     assertEquals(2, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testConstructor_ObjectString2() throws Throwable { [EOL]     LocalDate test = new LocalDate("1972-037"); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1972, test.getYear()); [EOL]     assertEquals(2, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testConstructor_ObjectString2() throws Throwable { [EOL]     LocalDate test = new LocalDate("1972-037"); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1972, test.getYear()); [EOL]     assertEquals(2, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testGetValues() { [EOL]     LocalDate test = new LocalDate(); [EOL]     int[] values = test.getValues(); [EOL]     assertEquals(1970, values[0]); [EOL]     assertEquals(6, values[1]); [EOL]     assertEquals(9, values[2]); [EOL]     assertNotSame(test.getValues(), test.getValues()); [EOL] }
public void testGetValues() { [EOL]     LocalDate test = new LocalDate(); [EOL]     int[] values = test.getValues(); [EOL]     assertEquals(1970, values[0]); [EOL]     assertEquals(6, values[1]); [EOL]     assertEquals(9, values[2]); [EOL]     assertNotSame(test.getValues(), test.getValues()); [EOL] }
public void testGetValues() { [EOL]     LocalDate test = new LocalDate(); [EOL]     int[] values = test.getValues(); [EOL]     assertEquals(1970, values[0]); [EOL]     assertEquals(6, values[1]); [EOL]     assertEquals(9, values[2]); [EOL]     assertNotSame(test.getValues(), test.getValues()); [EOL] }
public void testGetValues() { [EOL]     LocalDate test = new LocalDate(); [EOL]     int[] values = test.getValues(); [EOL]     assertEquals(1970, values[0]); [EOL]     assertEquals(6, values[1]); [EOL]     assertEquals(9, values[2]); [EOL]     assertNotSame(test.getValues(), test.getValues()); [EOL] }
public void testPropertyCompareToMonth() { [EOL]     LocalDate test1 = new LocalDate(TEST_TIME1); [EOL]     LocalDate test2 = new LocalDate(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonth() { [EOL]     LocalDate test1 = new LocalDate(TEST_TIME1); [EOL]     LocalDate test2 = new LocalDate(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonth() { [EOL]     LocalDate test1 = new LocalDate(TEST_TIME1); [EOL]     LocalDate test2 = new LocalDate(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonth() { [EOL]     LocalDate test1 = new LocalDate(TEST_TIME1); [EOL]     LocalDate test2 = new LocalDate(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonth() { [EOL]     LocalDate test1 = new LocalDate(TEST_TIME1); [EOL]     LocalDate test2 = new LocalDate(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonth() { [EOL]     LocalDate test1 = new LocalDate(TEST_TIME1); [EOL]     LocalDate test2 = new LocalDate(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonth() { [EOL]     LocalDate test1 = new LocalDate(TEST_TIME1); [EOL]     LocalDate test2 = new LocalDate(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testIsSupported_DurationFieldType() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.eras())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.centuries())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.years())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.months())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.weekyears())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.weeks())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.days())); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.hours())); [EOL]     assertEquals(false, test.isSupported((DurationFieldType) null)); [EOL] }
public void testIsSupported_DurationFieldType() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.eras())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.centuries())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.years())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.months())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.weekyears())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.weeks())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.days())); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.hours())); [EOL]     assertEquals(false, test.isSupported((DurationFieldType) null)); [EOL] }
public void testIsSupported_DurationFieldType() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.eras())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.centuries())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.years())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.months())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.weekyears())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.weeks())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.days())); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.hours())); [EOL]     assertEquals(false, test.isSupported((DurationFieldType) null)); [EOL] }
public void testEqualsHashCodeStrict() { [EOL]     LocalDate test1 = new LocalDate(1970, 6, 9, StrictChronology.getInstance(COPTIC_PARIS)); [EOL]     LocalDate test2 = new LocalDate(1970, 6, 9, StrictChronology.getInstance(COPTIC_PARIS)); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL] }
public void testEqualsHashCodeStrict() { [EOL]     LocalDate test1 = new LocalDate(1970, 6, 9, StrictChronology.getInstance(COPTIC_PARIS)); [EOL]     LocalDate test2 = new LocalDate(1970, 6, 9, StrictChronology.getInstance(COPTIC_PARIS)); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL] }
public void testEqualsHashCodeStrict() { [EOL]     LocalDate test1 = new LocalDate(1970, 6, 9, StrictChronology.getInstance(COPTIC_PARIS)); [EOL]     LocalDate test2 = new LocalDate(1970, 6, 9, StrictChronology.getInstance(COPTIC_PARIS)); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL] }
public void testEqualsHashCodeStrict() { [EOL]     LocalDate test1 = new LocalDate(1970, 6, 9, StrictChronology.getInstance(COPTIC_PARIS)); [EOL]     LocalDate test2 = new LocalDate(1970, 6, 9, StrictChronology.getInstance(COPTIC_PARIS)); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL] }
public void testEqualsHashCodeStrict() { [EOL]     LocalDate test1 = new LocalDate(1970, 6, 9, StrictChronology.getInstance(COPTIC_PARIS)); [EOL]     LocalDate test2 = new LocalDate(1970, 6, 9, StrictChronology.getInstance(COPTIC_PARIS)); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL] }
public void testEqualsHashCodeStrict() { [EOL]     LocalDate test1 = new LocalDate(1970, 6, 9, StrictChronology.getInstance(COPTIC_PARIS)); [EOL]     LocalDate test2 = new LocalDate(1970, 6, 9, StrictChronology.getInstance(COPTIC_PARIS)); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL] }
public void testEqualsHashCodeStrict() { [EOL]     LocalDate test1 = new LocalDate(1970, 6, 9, StrictChronology.getInstance(COPTIC_PARIS)); [EOL]     LocalDate test2 = new LocalDate(1970, 6, 9, StrictChronology.getInstance(COPTIC_PARIS)); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL] }
public void testToLocalDateTime_nullLocalTime() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     try { [EOL]         base.toLocalDateTime((LocalTime) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testToLocalDateTime_nullLocalTime() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     try { [EOL]         base.toLocalDateTime((LocalTime) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testToLocalDateTime_nullLocalTime() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     try { [EOL]         base.toLocalDateTime((LocalTime) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testToInterval() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime start = base.toDateTimeAtStartOfDay(); [EOL]     DateTime end = start.plus(Period.days(1)); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testWithField_DateTimeFieldType_int_1() { [EOL]     LocalDate test = new LocalDate(2004, 6, 9); [EOL]     LocalDate result = test.withField(DateTimeFieldType.year(), 2006); [EOL]     assertEquals(new LocalDate(2004, 6, 9), test); [EOL]     assertEquals(new LocalDate(2006, 6, 9), result); [EOL] }
public void testWithField_DateTimeFieldType_int_1() { [EOL]     LocalDate test = new LocalDate(2004, 6, 9); [EOL]     LocalDate result = test.withField(DateTimeFieldType.year(), 2006); [EOL]     assertEquals(new LocalDate(2004, 6, 9), test); [EOL]     assertEquals(new LocalDate(2006, 6, 9), result); [EOL] }
public void testWithField_DateTimeFieldType_int_1() { [EOL]     LocalDate test = new LocalDate(2004, 6, 9); [EOL]     LocalDate result = test.withField(DateTimeFieldType.year(), 2006); [EOL]     assertEquals(new LocalDate(2004, 6, 9), test); [EOL]     assertEquals(new LocalDate(2006, 6, 9), result); [EOL] }
public void testWithFieldAdded_DurationFieldType_int_2() { [EOL]     LocalDate test = new LocalDate(2004, 6, 9); [EOL]     try { [EOL]         test.withFieldAdded(null, 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithFieldAdded_DurationFieldType_int_2() { [EOL]     LocalDate test = new LocalDate(2004, 6, 9); [EOL]     try { [EOL]         test.withFieldAdded(null, 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithFieldAdded_DurationFieldType_int_2() { [EOL]     LocalDate test = new LocalDate(2004, 6, 9); [EOL]     try { [EOL]         test.withFieldAdded(null, 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithFieldAdded_DurationFieldType_int_2() { [EOL]     LocalDate test = new LocalDate(2004, 6, 9); [EOL]     try { [EOL]         test.withFieldAdded(null, 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPlusDays_int() { [EOL]     LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON); [EOL]     LocalDate result = test.plusDays(1); [EOL]     LocalDate expected = new LocalDate(2002, 5, 4, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusDays(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusDays_int() { [EOL]     LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON); [EOL]     LocalDate result = test.plusDays(1); [EOL]     LocalDate expected = new LocalDate(2002, 5, 4, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusDays(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusDays_int() { [EOL]     LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON); [EOL]     LocalDate result = test.plusDays(1); [EOL]     LocalDate expected = new LocalDate(2002, 5, 4, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusDays(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinus_RP() { [EOL]     LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON); [EOL]     LocalDate result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1)); [EOL]     LocalDate expected = new LocalDate(2001, 3, 26, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testMinus_RP() { [EOL]     LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON); [EOL]     LocalDate result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1)); [EOL]     LocalDate expected = new LocalDate(2001, 3, 26, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testMinusDays_int() { [EOL]     LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON); [EOL]     LocalDate result = test.minusDays(1); [EOL]     LocalDate expected = new LocalDate(2002, 5, 2, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusDays(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusDays_int() { [EOL]     LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON); [EOL]     LocalDate result = test.minusDays(1); [EOL]     LocalDate expected = new LocalDate(2002, 5, 2, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusDays(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusDays_int() { [EOL]     LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON); [EOL]     LocalDate result = test.minusDays(1); [EOL]     LocalDate expected = new LocalDate(2002, 5, 2, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusDays(0); [EOL]     assertSame(test, result); [EOL] }
public void testPropertyEquals() { [EOL]     LocalDate test1 = new LocalDate(2005, 11, 8); [EOL]     LocalDate test2 = new LocalDate(2005, 11, 9); [EOL]     LocalDate test3 = new LocalDate(2005, 11, 8, CopticChronology.getInstanceUTC()); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test1.year())); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test1.monthOfYear())); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test2.year())); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test2.monthOfYear())); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(false, test1.monthOfYear().equals(test1.year())); [EOL]     assertEquals(true, test1.monthOfYear().equals(test1.monthOfYear())); [EOL]     assertEquals(false, test1.monthOfYear().equals(test1.dayOfMonth())); [EOL]     assertEquals(false, test1.monthOfYear().equals(test2.year())); [EOL]     assertEquals(true, test1.monthOfYear().equals(test2.monthOfYear())); [EOL]     assertEquals(false, test1.monthOfYear().equals(test2.dayOfMonth())); [EOL]     assertEquals(false, test1.dayOfMonth().equals(null)); [EOL]     assertEquals(false, test1.dayOfMonth().equals("any")); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test3.dayOfMonth())); [EOL] }
public void testPropertyCompareToMonth() { [EOL]     LocalDate test1 = new LocalDate(TEST_TIME1); [EOL]     LocalDate test2 = new LocalDate(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonth() { [EOL]     LocalDate test1 = new LocalDate(TEST_TIME1); [EOL]     LocalDate test2 = new LocalDate(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonth() { [EOL]     LocalDate test1 = new LocalDate(TEST_TIME1); [EOL]     LocalDate test2 = new LocalDate(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyAddWrapFieldToCopyDay() { [EOL]     LocalDate test = new LocalDate(1972, 6, 9); [EOL]     LocalDate copy = test.dayOfMonth().addWrapFieldToCopy(21); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 6, 30); [EOL]     copy = test.dayOfMonth().addWrapFieldToCopy(22); [EOL]     check(copy, 1972, 6, 1); [EOL]     copy = test.dayOfMonth().addWrapFieldToCopy(-12); [EOL]     check(copy, 1972, 6, 27); [EOL]     test = new LocalDate(1972, 7, 9); [EOL]     copy = test.dayOfMonth().addWrapFieldToCopy(21); [EOL]     check(copy, 1972, 7, 30); [EOL]     copy = test.dayOfMonth().addWrapFieldToCopy(22); [EOL]     check(copy, 1972, 7, 31); [EOL]     copy = test.dayOfMonth().addWrapFieldToCopy(23); [EOL]     check(copy, 1972, 7, 1); [EOL]     copy = test.dayOfMonth().addWrapFieldToCopy(-12); [EOL]     check(copy, 1972, 7, 28); [EOL] }
public void testPropertyWithMinimumValueDayOfMonth() { [EOL]     LocalDate test = new LocalDate(1972, 6, 9); [EOL]     LocalDate copy = test.dayOfMonth().withMinimumValue(); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 6, 1); [EOL] }
public void testPropertyWithMinimumValueDayOfMonth() { [EOL]     LocalDate test = new LocalDate(1972, 6, 9); [EOL]     LocalDate copy = test.dayOfMonth().withMinimumValue(); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 6, 1); [EOL] }
public void testPropertyWithMaximumValueDayOfMonth() { [EOL]     LocalDate test = new LocalDate(1972, 6, 9); [EOL]     LocalDate copy = test.dayOfMonth().withMaximumValue(); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 6, 30); [EOL] }
public void testPropertyWithMinimumValueDayOfMonth() { [EOL]     LocalDate test = new LocalDate(1972, 6, 9); [EOL]     LocalDate copy = test.dayOfMonth().withMinimumValue(); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 6, 1); [EOL] }
public void testCalendar() { [EOL]     if (TestAll.FAST) { [EOL]         return; [EOL]     } [EOL]     System.out.println("\nTestEthiopicChronology.testCalendar"); [EOL]     DateTime epoch = new DateTime(1, 1, 1, 0, 0, 0, 0, ETHIOPIC_UTC); [EOL]     long millis = epoch.getMillis(); [EOL]     long end = new DateTime(3000, 1, 1, 0, 0, 0, 0, ISO_UTC).getMillis(); [EOL]     DateTimeField dayOfWeek = ETHIOPIC_UTC.dayOfWeek(); [EOL]     DateTimeField dayOfYear = ETHIOPIC_UTC.dayOfYear(); [EOL]     DateTimeField dayOfMonth = ETHIOPIC_UTC.dayOfMonth(); [EOL]     DateTimeField monthOfYear = ETHIOPIC_UTC.monthOfYear(); [EOL]     DateTimeField year = ETHIOPIC_UTC.year(); [EOL]     DateTimeField yearOfEra = ETHIOPIC_UTC.yearOfEra(); [EOL]     DateTimeField era = ETHIOPIC_UTC.era(); [EOL]     int expectedDOW = new DateTime(8, 8, 29, 0, 0, 0, 0, JULIAN_UTC).getDayOfWeek(); [EOL]     int expectedDOY = 1; [EOL]     int expectedDay = 1; [EOL]     int expectedMonth = 1; [EOL]     int expectedYear = 1; [EOL]     while (millis < end) { [EOL]         int dowValue = dayOfWeek.get(millis); [EOL]         int doyValue = dayOfYear.get(millis); [EOL]         int dayValue = dayOfMonth.get(millis); [EOL]         int monthValue = monthOfYear.get(millis); [EOL]         int yearValue = year.get(millis); [EOL]         int yearOfEraValue = yearOfEra.get(millis); [EOL]         int monthLen = dayOfMonth.getMaximumValue(millis); [EOL]         if (monthValue < 1 || monthValue > 13) { [EOL]             fail("Bad month: " + millis); [EOL]         } [EOL]         assertEquals(1, era.get(millis)); [EOL]         assertEquals("EE", era.getAsText(millis)); [EOL]         assertEquals("EE", era.getAsShortText(millis)); [EOL]         assertEquals(expectedYear, yearValue); [EOL]         assertEquals(expectedYear, yearOfEraValue); [EOL]         assertEquals(expectedMonth, monthValue); [EOL]         assertEquals(expectedDay, dayValue); [EOL]         assertEquals(expectedDOW, dowValue); [EOL]         assertEquals(expectedDOY, doyValue); [EOL]         assertEquals(yearValue % 4 == 3, year.isLeap(millis)); [EOL]         if (monthValue == 13) { [EOL]             assertEquals(yearValue % 4 == 3, monthOfYear.isLeap(millis)); [EOL]             if (yearValue % 4 == 3) { [EOL]                 assertEquals(6, monthLen); [EOL]             } else { [EOL]                 assertEquals(5, monthLen); [EOL]             } [EOL]         } else { [EOL]             assertEquals(30, monthLen); [EOL]         } [EOL]         expectedDOW = (((expectedDOW + 1) - 1) % 7) + 1; [EOL]         expectedDay++; [EOL]         expectedDOY++; [EOL]         if (expectedDay == 31 && expectedMonth < 13) { [EOL]             expectedDay = 1; [EOL]             expectedMonth++; [EOL]         } else if (expectedMonth == 13) { [EOL]             if (expectedYear % 4 == 3 && expectedDay == 7) { [EOL]                 expectedDay = 1; [EOL]                 expectedMonth = 1; [EOL]                 expectedYear++; [EOL]                 expectedDOY = 1; [EOL]             } else if (expectedYear % 4 != 3 && expectedDay == 6) { [EOL]                 expectedDay = 1; [EOL]                 expectedMonth = 1; [EOL]                 expectedYear++; [EOL]                 expectedDOY = 1; [EOL]             } [EOL]         } [EOL]         millis += SKIP; [EOL]     } [EOL] }
public void testCalendar() { [EOL]     if (TestAll.FAST) { [EOL]         return; [EOL]     } [EOL]     System.out.println("\nTestEthiopicChronology.testCalendar"); [EOL]     DateTime epoch = new DateTime(1, 1, 1, 0, 0, 0, 0, ETHIOPIC_UTC); [EOL]     long millis = epoch.getMillis(); [EOL]     long end = new DateTime(3000, 1, 1, 0, 0, 0, 0, ISO_UTC).getMillis(); [EOL]     DateTimeField dayOfWeek = ETHIOPIC_UTC.dayOfWeek(); [EOL]     DateTimeField dayOfYear = ETHIOPIC_UTC.dayOfYear(); [EOL]     DateTimeField dayOfMonth = ETHIOPIC_UTC.dayOfMonth(); [EOL]     DateTimeField monthOfYear = ETHIOPIC_UTC.monthOfYear(); [EOL]     DateTimeField year = ETHIOPIC_UTC.year(); [EOL]     DateTimeField yearOfEra = ETHIOPIC_UTC.yearOfEra(); [EOL]     DateTimeField era = ETHIOPIC_UTC.era(); [EOL]     int expectedDOW = new DateTime(8, 8, 29, 0, 0, 0, 0, JULIAN_UTC).getDayOfWeek(); [EOL]     int expectedDOY = 1; [EOL]     int expectedDay = 1; [EOL]     int expectedMonth = 1; [EOL]     int expectedYear = 1; [EOL]     while (millis < end) { [EOL]         int dowValue = dayOfWeek.get(millis); [EOL]         int doyValue = dayOfYear.get(millis); [EOL]         int dayValue = dayOfMonth.get(millis); [EOL]         int monthValue = monthOfYear.get(millis); [EOL]         int yearValue = year.get(millis); [EOL]         int yearOfEraValue = yearOfEra.get(millis); [EOL]         int monthLen = dayOfMonth.getMaximumValue(millis); [EOL]         if (monthValue < 1 || monthValue > 13) { [EOL]             fail("Bad month: " + millis); [EOL]         } [EOL]         assertEquals(1, era.get(millis)); [EOL]         assertEquals("EE", era.getAsText(millis)); [EOL]         assertEquals("EE", era.getAsShortText(millis)); [EOL]         assertEquals(expectedYear, yearValue); [EOL]         assertEquals(expectedYear, yearOfEraValue); [EOL]         assertEquals(expectedMonth, monthValue); [EOL]         assertEquals(expectedDay, dayValue); [EOL]         assertEquals(expectedDOW, dowValue); [EOL]         assertEquals(expectedDOY, doyValue); [EOL]         assertEquals(yearValue % 4 == 3, year.isLeap(millis)); [EOL]         if (monthValue == 13) { [EOL]             assertEquals(yearValue % 4 == 3, monthOfYear.isLeap(millis)); [EOL]             if (yearValue % 4 == 3) { [EOL]                 assertEquals(6, monthLen); [EOL]             } else { [EOL]                 assertEquals(5, monthLen); [EOL]             } [EOL]         } else { [EOL]             assertEquals(30, monthLen); [EOL]         } [EOL]         expectedDOW = (((expectedDOW + 1) - 1) % 7) + 1; [EOL]         expectedDay++; [EOL]         expectedDOY++; [EOL]         if (expectedDay == 31 && expectedMonth < 13) { [EOL]             expectedDay = 1; [EOL]             expectedMonth++; [EOL]         } else if (expectedMonth == 13) { [EOL]             if (expectedYear % 4 == 3 && expectedDay == 7) { [EOL]                 expectedDay = 1; [EOL]                 expectedMonth = 1; [EOL]                 expectedYear++; [EOL]                 expectedDOY = 1; [EOL]             } else if (expectedYear % 4 != 3 && expectedDay == 6) { [EOL]                 expectedDay = 1; [EOL]                 expectedMonth = 1; [EOL]                 expectedYear++; [EOL]                 expectedDOY = 1; [EOL]             } [EOL]         } [EOL]         millis += SKIP; [EOL]     } [EOL] }
public void testCalendar() { [EOL]     if (TestAll.FAST) { [EOL]         return; [EOL]     } [EOL]     System.out.println("\nTestEthiopicChronology.testCalendar"); [EOL]     DateTime epoch = new DateTime(1, 1, 1, 0, 0, 0, 0, ETHIOPIC_UTC); [EOL]     long millis = epoch.getMillis(); [EOL]     long end = new DateTime(3000, 1, 1, 0, 0, 0, 0, ISO_UTC).getMillis(); [EOL]     DateTimeField dayOfWeek = ETHIOPIC_UTC.dayOfWeek(); [EOL]     DateTimeField dayOfYear = ETHIOPIC_UTC.dayOfYear(); [EOL]     DateTimeField dayOfMonth = ETHIOPIC_UTC.dayOfMonth(); [EOL]     DateTimeField monthOfYear = ETHIOPIC_UTC.monthOfYear(); [EOL]     DateTimeField year = ETHIOPIC_UTC.year(); [EOL]     DateTimeField yearOfEra = ETHIOPIC_UTC.yearOfEra(); [EOL]     DateTimeField era = ETHIOPIC_UTC.era(); [EOL]     int expectedDOW = new DateTime(8, 8, 29, 0, 0, 0, 0, JULIAN_UTC).getDayOfWeek(); [EOL]     int expectedDOY = 1; [EOL]     int expectedDay = 1; [EOL]     int expectedMonth = 1; [EOL]     int expectedYear = 1; [EOL]     while (millis < end) { [EOL]         int dowValue = dayOfWeek.get(millis); [EOL]         int doyValue = dayOfYear.get(millis); [EOL]         int dayValue = dayOfMonth.get(millis); [EOL]         int monthValue = monthOfYear.get(millis); [EOL]         int yearValue = year.get(millis); [EOL]         int yearOfEraValue = yearOfEra.get(millis); [EOL]         int monthLen = dayOfMonth.getMaximumValue(millis); [EOL]         if (monthValue < 1 || monthValue > 13) { [EOL]             fail("Bad month: " + millis); [EOL]         } [EOL]         assertEquals(1, era.get(millis)); [EOL]         assertEquals("EE", era.getAsText(millis)); [EOL]         assertEquals("EE", era.getAsShortText(millis)); [EOL]         assertEquals(expectedYear, yearValue); [EOL]         assertEquals(expectedYear, yearOfEraValue); [EOL]         assertEquals(expectedMonth, monthValue); [EOL]         assertEquals(expectedDay, dayValue); [EOL]         assertEquals(expectedDOW, dowValue); [EOL]         assertEquals(expectedDOY, doyValue); [EOL]         assertEquals(yearValue % 4 == 3, year.isLeap(millis)); [EOL]         if (monthValue == 13) { [EOL]             assertEquals(yearValue % 4 == 3, monthOfYear.isLeap(millis)); [EOL]             if (yearValue % 4 == 3) { [EOL]                 assertEquals(6, monthLen); [EOL]             } else { [EOL]                 assertEquals(5, monthLen); [EOL]             } [EOL]         } else { [EOL]             assertEquals(30, monthLen); [EOL]         } [EOL]         expectedDOW = (((expectedDOW + 1) - 1) % 7) + 1; [EOL]         expectedDay++; [EOL]         expectedDOY++; [EOL]         if (expectedDay == 31 && expectedMonth < 13) { [EOL]             expectedDay = 1; [EOL]             expectedMonth++; [EOL]         } else if (expectedMonth == 13) { [EOL]             if (expectedYear % 4 == 3 && expectedDay == 7) { [EOL]                 expectedDay = 1; [EOL]                 expectedMonth = 1; [EOL]                 expectedYear++; [EOL]                 expectedDOY = 1; [EOL]             } else if (expectedYear % 4 != 3 && expectedDay == 6) { [EOL]                 expectedDay = 1; [EOL]                 expectedMonth = 1; [EOL]                 expectedYear++; [EOL]                 expectedDOY = 1; [EOL]             } [EOL]         } [EOL]         millis += SKIP; [EOL]     } [EOL] }
public void testCalendar() { [EOL]     if (TestAll.FAST) { [EOL]         return; [EOL]     } [EOL]     System.out.println("\nTestEthiopicChronology.testCalendar"); [EOL]     DateTime epoch = new DateTime(1, 1, 1, 0, 0, 0, 0, ETHIOPIC_UTC); [EOL]     long millis = epoch.getMillis(); [EOL]     long end = new DateTime(3000, 1, 1, 0, 0, 0, 0, ISO_UTC).getMillis(); [EOL]     DateTimeField dayOfWeek = ETHIOPIC_UTC.dayOfWeek(); [EOL]     DateTimeField dayOfYear = ETHIOPIC_UTC.dayOfYear(); [EOL]     DateTimeField dayOfMonth = ETHIOPIC_UTC.dayOfMonth(); [EOL]     DateTimeField monthOfYear = ETHIOPIC_UTC.monthOfYear(); [EOL]     DateTimeField year = ETHIOPIC_UTC.year(); [EOL]     DateTimeField yearOfEra = ETHIOPIC_UTC.yearOfEra(); [EOL]     DateTimeField era = ETHIOPIC_UTC.era(); [EOL]     int expectedDOW = new DateTime(8, 8, 29, 0, 0, 0, 0, JULIAN_UTC).getDayOfWeek(); [EOL]     int expectedDOY = 1; [EOL]     int expectedDay = 1; [EOL]     int expectedMonth = 1; [EOL]     int expectedYear = 1; [EOL]     while (millis < end) { [EOL]         int dowValue = dayOfWeek.get(millis); [EOL]         int doyValue = dayOfYear.get(millis); [EOL]         int dayValue = dayOfMonth.get(millis); [EOL]         int monthValue = monthOfYear.get(millis); [EOL]         int yearValue = year.get(millis); [EOL]         int yearOfEraValue = yearOfEra.get(millis); [EOL]         int monthLen = dayOfMonth.getMaximumValue(millis); [EOL]         if (monthValue < 1 || monthValue > 13) { [EOL]             fail("Bad month: " + millis); [EOL]         } [EOL]         assertEquals(1, era.get(millis)); [EOL]         assertEquals("EE", era.getAsText(millis)); [EOL]         assertEquals("EE", era.getAsShortText(millis)); [EOL]         assertEquals(expectedYear, yearValue); [EOL]         assertEquals(expectedYear, yearOfEraValue); [EOL]         assertEquals(expectedMonth, monthValue); [EOL]         assertEquals(expectedDay, dayValue); [EOL]         assertEquals(expectedDOW, dowValue); [EOL]         assertEquals(expectedDOY, doyValue); [EOL]         assertEquals(yearValue % 4 == 3, year.isLeap(millis)); [EOL]         if (monthValue == 13) { [EOL]             assertEquals(yearValue % 4 == 3, monthOfYear.isLeap(millis)); [EOL]             if (yearValue % 4 == 3) { [EOL]                 assertEquals(6, monthLen); [EOL]             } else { [EOL]                 assertEquals(5, monthLen); [EOL]             } [EOL]         } else { [EOL]             assertEquals(30, monthLen); [EOL]         } [EOL]         expectedDOW = (((expectedDOW + 1) - 1) % 7) + 1; [EOL]         expectedDay++; [EOL]         expectedDOY++; [EOL]         if (expectedDay == 31 && expectedMonth < 13) { [EOL]             expectedDay = 1; [EOL]             expectedMonth++; [EOL]         } else if (expectedMonth == 13) { [EOL]             if (expectedYear % 4 == 3 && expectedDay == 7) { [EOL]                 expectedDay = 1; [EOL]                 expectedMonth = 1; [EOL]                 expectedYear++; [EOL]                 expectedDOY = 1; [EOL]             } else if (expectedYear % 4 != 3 && expectedDay == 6) { [EOL]                 expectedDay = 1; [EOL]                 expectedMonth = 1; [EOL]                 expectedYear++; [EOL]                 expectedDOY = 1; [EOL]             } [EOL]         } [EOL]         millis += SKIP; [EOL]     } [EOL] }
public void testCalendar() { [EOL]     if (TestAll.FAST) { [EOL]         return; [EOL]     } [EOL]     System.out.println("\nTestEthiopicChronology.testCalendar"); [EOL]     DateTime epoch = new DateTime(1, 1, 1, 0, 0, 0, 0, ETHIOPIC_UTC); [EOL]     long millis = epoch.getMillis(); [EOL]     long end = new DateTime(3000, 1, 1, 0, 0, 0, 0, ISO_UTC).getMillis(); [EOL]     DateTimeField dayOfWeek = ETHIOPIC_UTC.dayOfWeek(); [EOL]     DateTimeField dayOfYear = ETHIOPIC_UTC.dayOfYear(); [EOL]     DateTimeField dayOfMonth = ETHIOPIC_UTC.dayOfMonth(); [EOL]     DateTimeField monthOfYear = ETHIOPIC_UTC.monthOfYear(); [EOL]     DateTimeField year = ETHIOPIC_UTC.year(); [EOL]     DateTimeField yearOfEra = ETHIOPIC_UTC.yearOfEra(); [EOL]     DateTimeField era = ETHIOPIC_UTC.era(); [EOL]     int expectedDOW = new DateTime(8, 8, 29, 0, 0, 0, 0, JULIAN_UTC).getDayOfWeek(); [EOL]     int expectedDOY = 1; [EOL]     int expectedDay = 1; [EOL]     int expectedMonth = 1; [EOL]     int expectedYear = 1; [EOL]     while (millis < end) { [EOL]         int dowValue = dayOfWeek.get(millis); [EOL]         int doyValue = dayOfYear.get(millis); [EOL]         int dayValue = dayOfMonth.get(millis); [EOL]         int monthValue = monthOfYear.get(millis); [EOL]         int yearValue = year.get(millis); [EOL]         int yearOfEraValue = yearOfEra.get(millis); [EOL]         int monthLen = dayOfMonth.getMaximumValue(millis); [EOL]         if (monthValue < 1 || monthValue > 13) { [EOL]             fail("Bad month: " + millis); [EOL]         } [EOL]         assertEquals(1, era.get(millis)); [EOL]         assertEquals("EE", era.getAsText(millis)); [EOL]         assertEquals("EE", era.getAsShortText(millis)); [EOL]         assertEquals(expectedYear, yearValue); [EOL]         assertEquals(expectedYear, yearOfEraValue); [EOL]         assertEquals(expectedMonth, monthValue); [EOL]         assertEquals(expectedDay, dayValue); [EOL]         assertEquals(expectedDOW, dowValue); [EOL]         assertEquals(expectedDOY, doyValue); [EOL]         assertEquals(yearValue % 4 == 3, year.isLeap(millis)); [EOL]         if (monthValue == 13) { [EOL]             assertEquals(yearValue % 4 == 3, monthOfYear.isLeap(millis)); [EOL]             if (yearValue % 4 == 3) { [EOL]                 assertEquals(6, monthLen); [EOL]             } else { [EOL]                 assertEquals(5, monthLen); [EOL]             } [EOL]         } else { [EOL]             assertEquals(30, monthLen); [EOL]         } [EOL]         expectedDOW = (((expectedDOW + 1) - 1) % 7) + 1; [EOL]         expectedDay++; [EOL]         expectedDOY++; [EOL]         if (expectedDay == 31 && expectedMonth < 13) { [EOL]             expectedDay = 1; [EOL]             expectedMonth++; [EOL]         } else if (expectedMonth == 13) { [EOL]             if (expectedYear % 4 == 3 && expectedDay == 7) { [EOL]                 expectedDay = 1; [EOL]                 expectedMonth = 1; [EOL]                 expectedYear++; [EOL]                 expectedDOY = 1; [EOL]             } else if (expectedYear % 4 != 3 && expectedDay == 6) { [EOL]                 expectedDay = 1; [EOL]                 expectedMonth = 1; [EOL]                 expectedYear++; [EOL]                 expectedDOY = 1; [EOL]             } [EOL]         } [EOL]         millis += SKIP; [EOL]     } [EOL] }
public void testPropertyGetEra() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertSame(test.getChronology().era(), test.era().getField()); [EOL]     assertEquals("era", test.era().getName()); [EOL]     assertEquals("Property[era]", test.era().toString()); [EOL]     assertSame(test, test.era().getDateTime()); [EOL]     assertEquals(1, test.era().get()); [EOL]     assertEquals("1", test.era().getAsString()); [EOL]     assertEquals("AD", test.era().getAsText()); [EOL]     assertEquals("AD", test.era().getField().getAsText(1, Locale.ENGLISH)); [EOL]     assertEquals("ap. J.-C.", test.era().getAsText(Locale.FRENCH)); [EOL]     assertEquals("ap. J.-C.", test.era().getField().getAsText(1, Locale.FRENCH)); [EOL]     assertEquals("AD", test.era().getAsShortText()); [EOL]     assertEquals("AD", test.era().getField().getAsShortText(1, Locale.ENGLISH)); [EOL]     assertEquals("ap. J.-C.", test.era().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals("ap. J.-C.", test.era().getField().getAsShortText(1, Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().eras(), test.era().getDurationField()); [EOL]     assertEquals(null, test.era().getRangeDurationField()); [EOL]     assertEquals(2, test.era().getMaximumTextLength(null)); [EOL]     assertEquals(9, test.era().getMaximumTextLength(Locale.FRENCH)); [EOL]     assertEquals(2, test.era().getMaximumShortTextLength(null)); [EOL]     assertEquals(9, test.era().getMaximumShortTextLength(Locale.FRENCH)); [EOL] }
public void testPropertyGetEra() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertSame(test.getChronology().era(), test.era().getField()); [EOL]     assertEquals("era", test.era().getName()); [EOL]     assertEquals("Property[era]", test.era().toString()); [EOL]     assertSame(test, test.era().getDateTime()); [EOL]     assertEquals(1, test.era().get()); [EOL]     assertEquals("1", test.era().getAsString()); [EOL]     assertEquals("AD", test.era().getAsText()); [EOL]     assertEquals("AD", test.era().getField().getAsText(1, Locale.ENGLISH)); [EOL]     assertEquals("ap. J.-C.", test.era().getAsText(Locale.FRENCH)); [EOL]     assertEquals("ap. J.-C.", test.era().getField().getAsText(1, Locale.FRENCH)); [EOL]     assertEquals("AD", test.era().getAsShortText()); [EOL]     assertEquals("AD", test.era().getField().getAsShortText(1, Locale.ENGLISH)); [EOL]     assertEquals("ap. J.-C.", test.era().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals("ap. J.-C.", test.era().getField().getAsShortText(1, Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().eras(), test.era().getDurationField()); [EOL]     assertEquals(null, test.era().getRangeDurationField()); [EOL]     assertEquals(2, test.era().getMaximumTextLength(null)); [EOL]     assertEquals(9, test.era().getMaximumTextLength(Locale.FRENCH)); [EOL]     assertEquals(2, test.era().getMaximumShortTextLength(null)); [EOL]     assertEquals(9, test.era().getMaximumShortTextLength(Locale.FRENCH)); [EOL] }
public void testPropertyGetEra() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertSame(test.getChronology().era(), test.era().getField()); [EOL]     assertEquals("era", test.era().getName()); [EOL]     assertEquals("Property[era]", test.era().toString()); [EOL]     assertSame(test, test.era().getDateTime()); [EOL]     assertEquals(1, test.era().get()); [EOL]     assertEquals("1", test.era().getAsString()); [EOL]     assertEquals("AD", test.era().getAsText()); [EOL]     assertEquals("AD", test.era().getField().getAsText(1, Locale.ENGLISH)); [EOL]     assertEquals("ap. J.-C.", test.era().getAsText(Locale.FRENCH)); [EOL]     assertEquals("ap. J.-C.", test.era().getField().getAsText(1, Locale.FRENCH)); [EOL]     assertEquals("AD", test.era().getAsShortText()); [EOL]     assertEquals("AD", test.era().getField().getAsShortText(1, Locale.ENGLISH)); [EOL]     assertEquals("ap. J.-C.", test.era().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals("ap. J.-C.", test.era().getField().getAsShortText(1, Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().eras(), test.era().getDurationField()); [EOL]     assertEquals(null, test.era().getRangeDurationField()); [EOL]     assertEquals(2, test.era().getMaximumTextLength(null)); [EOL]     assertEquals(9, test.era().getMaximumTextLength(Locale.FRENCH)); [EOL]     assertEquals(2, test.era().getMaximumShortTextLength(null)); [EOL]     assertEquals(9, test.era().getMaximumShortTextLength(Locale.FRENCH)); [EOL] }
public void testPropertyGetEra() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertSame(test.getChronology().era(), test.era().getField()); [EOL]     assertEquals("era", test.era().getName()); [EOL]     assertEquals("Property[era]", test.era().toString()); [EOL]     assertSame(test, test.era().getDateTime()); [EOL]     assertEquals(1, test.era().get()); [EOL]     assertEquals("1", test.era().getAsString()); [EOL]     assertEquals("AD", test.era().getAsText()); [EOL]     assertEquals("AD", test.era().getField().getAsText(1, Locale.ENGLISH)); [EOL]     assertEquals("ap. J.-C.", test.era().getAsText(Locale.FRENCH)); [EOL]     assertEquals("ap. J.-C.", test.era().getField().getAsText(1, Locale.FRENCH)); [EOL]     assertEquals("AD", test.era().getAsShortText()); [EOL]     assertEquals("AD", test.era().getField().getAsShortText(1, Locale.ENGLISH)); [EOL]     assertEquals("ap. J.-C.", test.era().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals("ap. J.-C.", test.era().getField().getAsShortText(1, Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().eras(), test.era().getDurationField()); [EOL]     assertEquals(null, test.era().getRangeDurationField()); [EOL]     assertEquals(2, test.era().getMaximumTextLength(null)); [EOL]     assertEquals(9, test.era().getMaximumTextLength(Locale.FRENCH)); [EOL]     assertEquals(2, test.era().getMaximumShortTextLength(null)); [EOL]     assertEquals(9, test.era().getMaximumShortTextLength(Locale.FRENCH)); [EOL] }
public void testPropertyGetEra() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertSame(test.getChronology().era(), test.era().getField()); [EOL]     assertEquals("era", test.era().getName()); [EOL]     assertEquals("Property[era]", test.era().toString()); [EOL]     assertSame(test, test.era().getDateTime()); [EOL]     assertEquals(1, test.era().get()); [EOL]     assertEquals("1", test.era().getAsString()); [EOL]     assertEquals("AD", test.era().getAsText()); [EOL]     assertEquals("AD", test.era().getField().getAsText(1, Locale.ENGLISH)); [EOL]     assertEquals("ap. J.-C.", test.era().getAsText(Locale.FRENCH)); [EOL]     assertEquals("ap. J.-C.", test.era().getField().getAsText(1, Locale.FRENCH)); [EOL]     assertEquals("AD", test.era().getAsShortText()); [EOL]     assertEquals("AD", test.era().getField().getAsShortText(1, Locale.ENGLISH)); [EOL]     assertEquals("ap. J.-C.", test.era().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals("ap. J.-C.", test.era().getField().getAsShortText(1, Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().eras(), test.era().getDurationField()); [EOL]     assertEquals(null, test.era().getRangeDurationField()); [EOL]     assertEquals(2, test.era().getMaximumTextLength(null)); [EOL]     assertEquals(9, test.era().getMaximumTextLength(Locale.FRENCH)); [EOL]     assertEquals(2, test.era().getMaximumShortTextLength(null)); [EOL]     assertEquals(9, test.era().getMaximumShortTextLength(Locale.FRENCH)); [EOL] }
public void testWithers() { [EOL]     DateMidnight test = new DateMidnight(1970, 6, 9, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     DateMidnight test = new DateMidnight(1970, 6, 9, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     DateMidnight test = new DateMidnight(1970, 6, 9, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testParseLocalDate_yearOfEra() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YYYY-MM GG").withChronology(chrono).withLocale(Locale.UK); [EOL]     LocalDate date = new LocalDate(2005, 10, 1, chrono); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 AD")); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 CE")); [EOL]     date = new LocalDate(-2005, 10, 1, chrono); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 BC")); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 BCE")); [EOL] }
public void testParseLocalDate_yearOfEra() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YYYY-MM GG").withChronology(chrono).withLocale(Locale.UK); [EOL]     LocalDate date = new LocalDate(2005, 10, 1, chrono); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 AD")); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 CE")); [EOL]     date = new LocalDate(-2005, 10, 1, chrono); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 BC")); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 BCE")); [EOL] }
public void testPropertyGetEra() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertSame(test.getChronology().era(), test.era().getField()); [EOL]     assertEquals("era", test.era().getName()); [EOL]     assertEquals("Property[era]", test.era().toString()); [EOL]     assertSame(test, test.era().getDateTime()); [EOL]     assertEquals(1, test.era().get()); [EOL]     assertEquals("1", test.era().getAsString()); [EOL]     assertEquals("AD", test.era().getAsText()); [EOL]     assertEquals("AD", test.era().getField().getAsText(1, Locale.ENGLISH)); [EOL]     assertEquals("ap. J.-C.", test.era().getAsText(Locale.FRENCH)); [EOL]     assertEquals("ap. J.-C.", test.era().getField().getAsText(1, Locale.FRENCH)); [EOL]     assertEquals("AD", test.era().getAsShortText()); [EOL]     assertEquals("AD", test.era().getField().getAsShortText(1, Locale.ENGLISH)); [EOL]     assertEquals("ap. J.-C.", test.era().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals("ap. J.-C.", test.era().getField().getAsShortText(1, Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().eras(), test.era().getDurationField()); [EOL]     assertEquals(null, test.era().getRangeDurationField()); [EOL]     assertEquals(2, test.era().getMaximumTextLength(null)); [EOL]     assertEquals(9, test.era().getMaximumTextLength(Locale.FRENCH)); [EOL]     assertEquals(2, test.era().getMaximumShortTextLength(null)); [EOL]     assertEquals(9, test.era().getMaximumShortTextLength(Locale.FRENCH)); [EOL] }
public void testPropertyGetEra() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertSame(test.getChronology().era(), test.era().getField()); [EOL]     assertEquals("era", test.era().getName()); [EOL]     assertEquals("Property[era]", test.era().toString()); [EOL]     assertSame(test, test.era().getDateTime()); [EOL]     assertEquals(1, test.era().get()); [EOL]     assertEquals("1", test.era().getAsString()); [EOL]     assertEquals("AD", test.era().getAsText()); [EOL]     assertEquals("AD", test.era().getField().getAsText(1, Locale.ENGLISH)); [EOL]     assertEquals("ap. J.-C.", test.era().getAsText(Locale.FRENCH)); [EOL]     assertEquals("ap. J.-C.", test.era().getField().getAsText(1, Locale.FRENCH)); [EOL]     assertEquals("AD", test.era().getAsShortText()); [EOL]     assertEquals("AD", test.era().getField().getAsShortText(1, Locale.ENGLISH)); [EOL]     assertEquals("ap. J.-C.", test.era().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals("ap. J.-C.", test.era().getField().getAsShortText(1, Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().eras(), test.era().getDurationField()); [EOL]     assertEquals(null, test.era().getRangeDurationField()); [EOL]     assertEquals(2, test.era().getMaximumTextLength(null)); [EOL]     assertEquals(9, test.era().getMaximumTextLength(Locale.FRENCH)); [EOL]     assertEquals(2, test.era().getMaximumShortTextLength(null)); [EOL]     assertEquals(9, test.era().getMaximumShortTextLength(Locale.FRENCH)); [EOL] }
public void testToPeriod_PeriodType2() { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 7, 8, 9, 10); [EOL]     DateTime dt2 = new DateTime(2005, 8, 13, 12, 14, 16, 18); [EOL]     Interval base = new Interval(dt1, dt2); [EOL]     Period test = base.toPeriod(PeriodType.yearWeekDayTime()); [EOL]     Period expected = new Period(dt1, dt2, PeriodType.yearWeekDayTime()); [EOL]     assertEquals(expected, test); [EOL] }
public void testToPeriod_PeriodType2() { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 7, 8, 9, 10); [EOL]     DateTime dt2 = new DateTime(2005, 8, 13, 12, 14, 16, 18); [EOL]     Interval base = new Interval(dt1, dt2); [EOL]     Period test = base.toPeriod(PeriodType.yearWeekDayTime()); [EOL]     Period expected = new Period(dt1, dt2, PeriodType.yearWeekDayTime()); [EOL]     assertEquals(expected, test); [EOL] }
public void testConstructor_Object3() throws Throwable { [EOL]     Period test = new Period(new Period(0, 0, 0, 0, 1, 2, 3, 4, PeriodType.dayTime())); [EOL]     assertEquals(PeriodType.dayTime(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(2, test.getMinutes()); [EOL]     assertEquals(3, test.getSeconds()); [EOL]     assertEquals(4, test.getMillis()); [EOL] }
public void testConstructor_Object3() throws Throwable { [EOL]     Period test = new Period(new Period(0, 0, 0, 0, 1, 2, 3, 4, PeriodType.dayTime())); [EOL]     assertEquals(PeriodType.dayTime(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(2, test.getMinutes()); [EOL]     assertEquals(3, test.getSeconds()); [EOL]     assertEquals(4, test.getMillis()); [EOL] }
public void testWeeks() throws Exception { [EOL]     PeriodType type = PeriodType.weeks(); [EOL]     assertEquals(1, type.size()); [EOL]     assertEquals(DurationFieldType.weeks(), type.getFieldType(0)); [EOL]     assertEquals("Weeks", type.getName()); [EOL]     assertEquals("PeriodType[Weeks]", type.toString()); [EOL]     assertEquals(true, type.equals(type)); [EOL]     assertEquals(true, type == PeriodType.weeks()); [EOL]     assertEquals(false, type.equals(PeriodType.standard())); [EOL]     assertEquals(true, type.hashCode() == type.hashCode()); [EOL]     assertEquals(true, type.hashCode() == PeriodType.weeks().hashCode()); [EOL]     assertEquals(false, type.hashCode() == PeriodType.standard().hashCode()); [EOL]     assertSameAfterSerialization(type); [EOL] }
public void testForFields6() throws Exception { [EOL]     DurationFieldType[] types = null; [EOL]     try { [EOL]         PeriodType.forFields(types); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new DurationFieldType[0]; [EOL]     try { [EOL]         PeriodType.forFields(types); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new DurationFieldType[] { null, DurationFieldType.months() }; [EOL]     try { [EOL]         PeriodType.forFields(types); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new DurationFieldType[] { DurationFieldType.months(), null }; [EOL]     try { [EOL]         PeriodType.forFields(types); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields6() throws Exception { [EOL]     DurationFieldType[] types = null; [EOL]     try { [EOL]         PeriodType.forFields(types); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new DurationFieldType[0]; [EOL]     try { [EOL]         PeriodType.forFields(types); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new DurationFieldType[] { null, DurationFieldType.months() }; [EOL]     try { [EOL]         PeriodType.forFields(types); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new DurationFieldType[] { DurationFieldType.months(), null }; [EOL]     try { [EOL]         PeriodType.forFields(types); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields6() throws Exception { [EOL]     DurationFieldType[] types = null; [EOL]     try { [EOL]         PeriodType.forFields(types); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new DurationFieldType[0]; [EOL]     try { [EOL]         PeriodType.forFields(types); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new DurationFieldType[] { null, DurationFieldType.months() }; [EOL]     try { [EOL]         PeriodType.forFields(types); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new DurationFieldType[] { DurationFieldType.months(), null }; [EOL]     try { [EOL]         PeriodType.forFields(types); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields6() throws Exception { [EOL]     DurationFieldType[] types = null; [EOL]     try { [EOL]         PeriodType.forFields(types); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new DurationFieldType[0]; [EOL]     try { [EOL]         PeriodType.forFields(types); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new DurationFieldType[] { null, DurationFieldType.months() }; [EOL]     try { [EOL]         PeriodType.forFields(types); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new DurationFieldType[] { DurationFieldType.months(), null }; [EOL]     try { [EOL]         PeriodType.forFields(types); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields6() throws Exception { [EOL]     DurationFieldType[] types = null; [EOL]     try { [EOL]         PeriodType.forFields(types); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new DurationFieldType[0]; [EOL]     try { [EOL]         PeriodType.forFields(types); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new DurationFieldType[] { null, DurationFieldType.months() }; [EOL]     try { [EOL]         PeriodType.forFields(types); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new DurationFieldType[] { DurationFieldType.months(), null }; [EOL]     try { [EOL]         PeriodType.forFields(types); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testMinus() { [EOL]     Period base = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     Period baseDaysOnly = new Period(0, 0, 0, 10, 0, 0, 0, 0, PeriodType.days()); [EOL]     Period test = base.minus((ReadablePeriod) null); [EOL]     assertSame(base, test); [EOL]     test = base.minus(Period.years(10)); [EOL]     assertEquals(-9, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(3, test.getWeeks()); [EOL]     assertEquals(4, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL]     test = base.minus(Years.years(10)); [EOL]     assertEquals(-9, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(3, test.getWeeks()); [EOL]     assertEquals(4, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL]     test = base.minus(Period.days(10)); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(3, test.getWeeks()); [EOL]     assertEquals(-6, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL]     test = baseDaysOnly.minus(Period.years(0)); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(10, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL]     test = baseDaysOnly.minus(baseDaysOnly); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL]     try { [EOL]         baseDaysOnly.minus(Period.years(1)); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     try { [EOL]         Period.days(Integer.MAX_VALUE).minus(Period.days(-1)); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         Period.days(Integer.MIN_VALUE).minus(Period.days(1)); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMinus() { [EOL]     Period base = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     Period baseDaysOnly = new Period(0, 0, 0, 10, 0, 0, 0, 0, PeriodType.days()); [EOL]     Period test = base.minus((ReadablePeriod) null); [EOL]     assertSame(base, test); [EOL]     test = base.minus(Period.years(10)); [EOL]     assertEquals(-9, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(3, test.getWeeks()); [EOL]     assertEquals(4, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL]     test = base.minus(Years.years(10)); [EOL]     assertEquals(-9, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(3, test.getWeeks()); [EOL]     assertEquals(4, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL]     test = base.minus(Period.days(10)); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(3, test.getWeeks()); [EOL]     assertEquals(-6, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL]     test = baseDaysOnly.minus(Period.years(0)); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(10, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL]     test = baseDaysOnly.minus(baseDaysOnly); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL]     try { [EOL]         baseDaysOnly.minus(Period.years(1)); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     try { [EOL]         Period.days(Integer.MAX_VALUE).minus(Period.days(-1)); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         Period.days(Integer.MIN_VALUE).minus(Period.days(1)); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMinus() { [EOL]     Period base = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     Period baseDaysOnly = new Period(0, 0, 0, 10, 0, 0, 0, 0, PeriodType.days()); [EOL]     Period test = base.minus((ReadablePeriod) null); [EOL]     assertSame(base, test); [EOL]     test = base.minus(Period.years(10)); [EOL]     assertEquals(-9, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(3, test.getWeeks()); [EOL]     assertEquals(4, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL]     test = base.minus(Years.years(10)); [EOL]     assertEquals(-9, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(3, test.getWeeks()); [EOL]     assertEquals(4, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL]     test = base.minus(Period.days(10)); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(3, test.getWeeks()); [EOL]     assertEquals(-6, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL]     test = baseDaysOnly.minus(Period.years(0)); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(10, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL]     test = baseDaysOnly.minus(baseDaysOnly); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL]     try { [EOL]         baseDaysOnly.minus(Period.years(1)); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     try { [EOL]         Period.days(Integer.MAX_VALUE).minus(Period.days(-1)); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         Period.days(Integer.MIN_VALUE).minus(Period.days(1)); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testEquals() throws Exception { [EOL]     PeriodType type = PeriodType.dayTime().withMillisRemoved(); [EOL]     assertEquals(true, type.equals(type)); [EOL]     assertEquals(true, type.equals(PeriodType.dayTime().withMillisRemoved())); [EOL]     assertEquals(false, type.equals(null)); [EOL]     assertEquals(false, type.equals("")); [EOL] }
public void testEquals() throws Exception { [EOL]     PeriodType type = PeriodType.dayTime().withMillisRemoved(); [EOL]     assertEquals(true, type.equals(type)); [EOL]     assertEquals(true, type.equals(PeriodType.dayTime().withMillisRemoved())); [EOL]     assertEquals(false, type.equals(null)); [EOL]     assertEquals(false, type.equals("")); [EOL] }
public void testGetInstantMillis_RI() { [EOL]     Instant i = new Instant(123L); [EOL]     assertEquals(123L, DateTimeUtils.getInstantMillis(i)); [EOL]     try { [EOL]         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW); [EOL]         assertEquals(TEST_TIME_NOW, DateTimeUtils.getInstantMillis(null)); [EOL]     } finally { [EOL]         DateTimeUtils.setCurrentMillisSystem(); [EOL]     } [EOL] }
public void testGetInstantMillis_RI() { [EOL]     Instant i = new Instant(123L); [EOL]     assertEquals(123L, DateTimeUtils.getInstantMillis(i)); [EOL]     try { [EOL]         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW); [EOL]         assertEquals(TEST_TIME_NOW, DateTimeUtils.getInstantMillis(null)); [EOL]     } finally { [EOL]         DateTimeUtils.setCurrentMillisSystem(); [EOL]     } [EOL] }
public void testGetInstantMillis_RI() { [EOL]     Instant i = new Instant(123L); [EOL]     assertEquals(123L, DateTimeUtils.getInstantMillis(i)); [EOL]     try { [EOL]         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW); [EOL]         assertEquals(TEST_TIME_NOW, DateTimeUtils.getInstantMillis(null)); [EOL]     } finally { [EOL]         DateTimeUtils.setCurrentMillisSystem(); [EOL]     } [EOL] }
public void testGetInstantMillis_RI() { [EOL]     Instant i = new Instant(123L); [EOL]     assertEquals(123L, DateTimeUtils.getInstantMillis(i)); [EOL]     try { [EOL]         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW); [EOL]         assertEquals(TEST_TIME_NOW, DateTimeUtils.getInstantMillis(null)); [EOL]     } finally { [EOL]         DateTimeUtils.setCurrentMillisSystem(); [EOL]     } [EOL] }
public void testGetInstantMillis_RI() { [EOL]     Instant i = new Instant(123L); [EOL]     assertEquals(123L, DateTimeUtils.getInstantMillis(i)); [EOL]     try { [EOL]         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW); [EOL]         assertEquals(TEST_TIME_NOW, DateTimeUtils.getInstantMillis(null)); [EOL]     } finally { [EOL]         DateTimeUtils.setCurrentMillisSystem(); [EOL]     } [EOL] }
public void testGetInstantMillis_RI() { [EOL]     Instant i = new Instant(123L); [EOL]     assertEquals(123L, DateTimeUtils.getInstantMillis(i)); [EOL]     try { [EOL]         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW); [EOL]         assertEquals(TEST_TIME_NOW, DateTimeUtils.getInstantMillis(null)); [EOL]     } finally { [EOL]         DateTimeUtils.setCurrentMillisSystem(); [EOL]     } [EOL] }
public void testGetInstantMillis_RI() { [EOL]     Instant i = new Instant(123L); [EOL]     assertEquals(123L, DateTimeUtils.getInstantMillis(i)); [EOL]     try { [EOL]         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW); [EOL]         assertEquals(TEST_TIME_NOW, DateTimeUtils.getInstantMillis(null)); [EOL]     } finally { [EOL]         DateTimeUtils.setCurrentMillisSystem(); [EOL]     } [EOL] }
public void testGetInstantMillis_RI() { [EOL]     Instant i = new Instant(123L); [EOL]     assertEquals(123L, DateTimeUtils.getInstantMillis(i)); [EOL]     try { [EOL]         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW); [EOL]         assertEquals(TEST_TIME_NOW, DateTimeUtils.getInstantMillis(null)); [EOL]     } finally { [EOL]         DateTimeUtils.setCurrentMillisSystem(); [EOL]     } [EOL] }
public void testConstructor_badconverterObject() throws Throwable { [EOL]     try { [EOL]         ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE); [EOL]         Instant test = new Instant(new Integer(0)); [EOL]         assertEquals(ISOChronology.getInstanceUTC(), test.getChronology()); [EOL]         assertEquals(0L, test.getMillis()); [EOL]     } finally { [EOL]         ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE); [EOL]     } [EOL] }
public void testGetDurationMillis_Object() throws Exception { [EOL]     assertEquals(0L, NullConverter.INSTANCE.getDurationMillis(null)); [EOL] }
public void testSetInto_Object() throws Exception { [EOL]     MutablePeriod m = new MutablePeriod(PeriodType.millis()); [EOL]     NullConverter.INSTANCE.setInto(m, null, null); [EOL]     assertEquals(0L, m.getMillis()); [EOL] }
public void testConstructor_RI_RI3() throws Throwable { [EOL]     Interval test = new Interval((ReadableInstant) null, (ReadableInstant) null); [EOL]     assertEquals(TEST_TIME_NOW, test.getStartMillis()); [EOL]     assertEquals(TEST_TIME_NOW, test.getEndMillis()); [EOL] }
public void testConstructor_RI_RI3() throws Throwable { [EOL]     Interval test = new Interval((ReadableInstant) null, (ReadableInstant) null); [EOL]     assertEquals(TEST_TIME_NOW, test.getStartMillis()); [EOL]     assertEquals(TEST_TIME_NOW, test.getEndMillis()); [EOL] }
public void testConstructor_RI_RI3() throws Throwable { [EOL]     Interval test = new Interval((ReadableInstant) null, (ReadableInstant) null); [EOL]     assertEquals(TEST_TIME_NOW, test.getStartMillis()); [EOL]     assertEquals(TEST_TIME_NOW, test.getEndMillis()); [EOL] }
public void testConstructor_RI_RP3() throws Throwable { [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW, ISOChronology.getInstanceUTC()); [EOL]     Period dur = new Period(0, 6, 0, 3, 1, 0, 0, 0, PeriodType.standard()); [EOL]     long result = TEST_TIME_NOW; [EOL]     result = ISOChronology.getInstanceUTC().months().add(result, 6); [EOL]     result = ISOChronology.getInstanceUTC().days().add(result, 3); [EOL]     result = ISOChronology.getInstanceUTC().hours().add(result, 1); [EOL]     MutableInterval test = new MutableInterval(dt, dur); [EOL]     assertEquals(dt.getMillis(), test.getStartMillis()); [EOL]     assertEquals(result, test.getEndMillis()); [EOL] }
public void testConstructor_RI_RP3() throws Throwable { [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW, ISOChronology.getInstanceUTC()); [EOL]     Period dur = new Period(0, 6, 0, 3, 1, 0, 0, 0, PeriodType.standard()); [EOL]     long result = TEST_TIME_NOW; [EOL]     result = ISOChronology.getInstanceUTC().months().add(result, 6); [EOL]     result = ISOChronology.getInstanceUTC().days().add(result, 3); [EOL]     result = ISOChronology.getInstanceUTC().hours().add(result, 1); [EOL]     MutableInterval test = new MutableInterval(dt, dur); [EOL]     assertEquals(dt.getMillis(), test.getStartMillis()); [EOL]     assertEquals(result, test.getEndMillis()); [EOL] }
public void testConstructor_Object6() throws Throwable { [EOL]     IntervalConverter oldConv = ConverterManager.getInstance().getIntervalConverter(new MutableInterval(0L, 0L)); [EOL]     IntervalConverter conv = new IntervalConverter() { [EOL]  [EOL]         public boolean isReadableInterval(Object object, Chronology chrono) { [EOL]             return false; [EOL]         } [EOL]  [EOL]         public void setInto(ReadWritableInterval interval, Object object, Chronology chrono) { [EOL]             interval.setChronology(chrono); [EOL]             interval.setInterval(1234L, 5678L); [EOL]         } [EOL]  [EOL]         public Class<?> getSupportedType() { [EOL]             return ReadableInterval.class; [EOL]         } [EOL]     }; [EOL]     try { [EOL]         ConverterManager.getInstance().addIntervalConverter(conv); [EOL]         Interval base = new Interval(-1000L, 1000L); [EOL]         MutableInterval test = new MutableInterval(base); [EOL]         assertEquals(1234L, test.getStartMillis()); [EOL]         assertEquals(5678L, test.getEndMillis()); [EOL]     } finally { [EOL]         ConverterManager.getInstance().addIntervalConverter(oldConv); [EOL]     } [EOL] }
public void testConstructor_Object6() throws Throwable { [EOL]     IntervalConverter oldConv = ConverterManager.getInstance().getIntervalConverter(new MutableInterval(0L, 0L)); [EOL]     IntervalConverter conv = new IntervalConverter() { [EOL]  [EOL]         public boolean isReadableInterval(Object object, Chronology chrono) { [EOL]             return false; [EOL]         } [EOL]  [EOL]         public void setInto(ReadWritableInterval interval, Object object, Chronology chrono) { [EOL]             interval.setChronology(chrono); [EOL]             interval.setInterval(1234L, 5678L); [EOL]         } [EOL]  [EOL]         public Class<?> getSupportedType() { [EOL]             return ReadableInterval.class; [EOL]         } [EOL]     }; [EOL]     try { [EOL]         ConverterManager.getInstance().addIntervalConverter(conv); [EOL]         Interval base = new Interval(-1000L, 1000L); [EOL]         MutableInterval test = new MutableInterval(base); [EOL]         assertEquals(1234L, test.getStartMillis()); [EOL]         assertEquals(5678L, test.getEndMillis()); [EOL]     } finally { [EOL]         ConverterManager.getInstance().addIntervalConverter(oldConv); [EOL]     } [EOL] }
public void testConstructor_Object6() throws Throwable { [EOL]     IntervalConverter oldConv = ConverterManager.getInstance().getIntervalConverter(new MutableInterval(0L, 0L)); [EOL]     IntervalConverter conv = new IntervalConverter() { [EOL]  [EOL]         public boolean isReadableInterval(Object object, Chronology chrono) { [EOL]             return false; [EOL]         } [EOL]  [EOL]         public void setInto(ReadWritableInterval interval, Object object, Chronology chrono) { [EOL]             interval.setChronology(chrono); [EOL]             interval.setInterval(1234L, 5678L); [EOL]         } [EOL]  [EOL]         public Class<?> getSupportedType() { [EOL]             return ReadableInterval.class; [EOL]         } [EOL]     }; [EOL]     try { [EOL]         ConverterManager.getInstance().addIntervalConverter(conv); [EOL]         Interval base = new Interval(-1000L, 1000L); [EOL]         MutableInterval test = new MutableInterval(base); [EOL]         assertEquals(1234L, test.getStartMillis()); [EOL]         assertEquals(5678L, test.getEndMillis()); [EOL]     } finally { [EOL]         ConverterManager.getInstance().addIntervalConverter(oldConv); [EOL]     } [EOL] }
public void testConstructor_Object6() throws Throwable { [EOL]     IntervalConverter oldConv = ConverterManager.getInstance().getIntervalConverter(new MutableInterval(0L, 0L)); [EOL]     IntervalConverter conv = new IntervalConverter() { [EOL]  [EOL]         public boolean isReadableInterval(Object object, Chronology chrono) { [EOL]             return false; [EOL]         } [EOL]  [EOL]         public void setInto(ReadWritableInterval interval, Object object, Chronology chrono) { [EOL]             interval.setChronology(chrono); [EOL]             interval.setInterval(1234L, 5678L); [EOL]         } [EOL]  [EOL]         public Class<?> getSupportedType() { [EOL]             return ReadableInterval.class; [EOL]         } [EOL]     }; [EOL]     try { [EOL]         ConverterManager.getInstance().addIntervalConverter(conv); [EOL]         Interval base = new Interval(-1000L, 1000L); [EOL]         MutableInterval test = new MutableInterval(base); [EOL]         assertEquals(1234L, test.getStartMillis()); [EOL]         assertEquals(5678L, test.getEndMillis()); [EOL]     } finally { [EOL]         ConverterManager.getInstance().addIntervalConverter(oldConv); [EOL]     } [EOL] }
public void testWithZoneRetainFields_DateTimeZone() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateMidnight result = test.withZoneRetainFields(PARIS); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_PARIS, result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertEquals(TEST_TIME1_PARIS, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_LONDON, result.getMillis()); [EOL]     assertEquals(GREGORIAN_DEFAULT, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, new MockNullZoneChronology()); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL] }
public void testWithZoneRetainFields_DateTimeZone() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateMidnight result = test.withZoneRetainFields(PARIS); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_PARIS, result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertEquals(TEST_TIME1_PARIS, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_LONDON, result.getMillis()); [EOL]     assertEquals(GREGORIAN_DEFAULT, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, new MockNullZoneChronology()); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL] }
public void testWithZoneRetainFields_DateTimeZone() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateMidnight result = test.withZoneRetainFields(PARIS); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_PARIS, result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertEquals(TEST_TIME1_PARIS, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_LONDON, result.getMillis()); [EOL]     assertEquals(GREGORIAN_DEFAULT, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, new MockNullZoneChronology()); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL] }
public void testForOffsetHoursMinutes_int_int() { [EOL]     assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0)); [EOL]     assertEquals(DateTimeZone.forID("+23:59"), DateTimeZone.forOffsetHoursMinutes(23, 59)); [EOL]     assertEquals(DateTimeZone.forID("+02:15"), DateTimeZone.forOffsetHoursMinutes(2, 15)); [EOL]     assertEquals(DateTimeZone.forID("+02:00"), DateTimeZone.forOffsetHoursMinutes(2, 0)); [EOL]     try { [EOL]         DateTimeZone.forOffsetHoursMinutes(2, -15); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(DateTimeZone.forID("+00:15"), DateTimeZone.forOffsetHoursMinutes(0, 15)); [EOL]     assertEquals(DateTimeZone.forID("+00:00"), DateTimeZone.forOffsetHoursMinutes(0, 0)); [EOL]     assertEquals(DateTimeZone.forID("-00:15"), DateTimeZone.forOffsetHoursMinutes(0, -15)); [EOL]     assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetHoursMinutes(-2, 0)); [EOL]     assertEquals(DateTimeZone.forID("-02:15"), DateTimeZone.forOffsetHoursMinutes(-2, -15)); [EOL]     assertEquals(DateTimeZone.forID("-02:15"), DateTimeZone.forOffsetHoursMinutes(-2, 15)); [EOL]     assertEquals(DateTimeZone.forID("-23:59"), DateTimeZone.forOffsetHoursMinutes(-23, 59)); [EOL]     try { [EOL]         DateTimeZone.forOffsetHoursMinutes(2, 60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateTimeZone.forOffsetHoursMinutes(-2, 60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateTimeZone.forOffsetHoursMinutes(24, 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateTimeZone.forOffsetHoursMinutes(-24, 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForOffsetHoursMinutes_int_int() { [EOL]     assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0)); [EOL]     assertEquals(DateTimeZone.forID("+23:59"), DateTimeZone.forOffsetHoursMinutes(23, 59)); [EOL]     assertEquals(DateTimeZone.forID("+02:15"), DateTimeZone.forOffsetHoursMinutes(2, 15)); [EOL]     assertEquals(DateTimeZone.forID("+02:00"), DateTimeZone.forOffsetHoursMinutes(2, 0)); [EOL]     try { [EOL]         DateTimeZone.forOffsetHoursMinutes(2, -15); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(DateTimeZone.forID("+00:15"), DateTimeZone.forOffsetHoursMinutes(0, 15)); [EOL]     assertEquals(DateTimeZone.forID("+00:00"), DateTimeZone.forOffsetHoursMinutes(0, 0)); [EOL]     assertEquals(DateTimeZone.forID("-00:15"), DateTimeZone.forOffsetHoursMinutes(0, -15)); [EOL]     assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetHoursMinutes(-2, 0)); [EOL]     assertEquals(DateTimeZone.forID("-02:15"), DateTimeZone.forOffsetHoursMinutes(-2, -15)); [EOL]     assertEquals(DateTimeZone.forID("-02:15"), DateTimeZone.forOffsetHoursMinutes(-2, 15)); [EOL]     assertEquals(DateTimeZone.forID("-23:59"), DateTimeZone.forOffsetHoursMinutes(-23, 59)); [EOL]     try { [EOL]         DateTimeZone.forOffsetHoursMinutes(2, 60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateTimeZone.forOffsetHoursMinutes(-2, 60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateTimeZone.forOffsetHoursMinutes(24, 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateTimeZone.forOffsetHoursMinutes(-24, 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForOffsetHoursMinutes_int_int() { [EOL]     assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0)); [EOL]     assertEquals(DateTimeZone.forID("+23:59"), DateTimeZone.forOffsetHoursMinutes(23, 59)); [EOL]     assertEquals(DateTimeZone.forID("+02:15"), DateTimeZone.forOffsetHoursMinutes(2, 15)); [EOL]     assertEquals(DateTimeZone.forID("+02:00"), DateTimeZone.forOffsetHoursMinutes(2, 0)); [EOL]     try { [EOL]         DateTimeZone.forOffsetHoursMinutes(2, -15); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(DateTimeZone.forID("+00:15"), DateTimeZone.forOffsetHoursMinutes(0, 15)); [EOL]     assertEquals(DateTimeZone.forID("+00:00"), DateTimeZone.forOffsetHoursMinutes(0, 0)); [EOL]     assertEquals(DateTimeZone.forID("-00:15"), DateTimeZone.forOffsetHoursMinutes(0, -15)); [EOL]     assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetHoursMinutes(-2, 0)); [EOL]     assertEquals(DateTimeZone.forID("-02:15"), DateTimeZone.forOffsetHoursMinutes(-2, -15)); [EOL]     assertEquals(DateTimeZone.forID("-02:15"), DateTimeZone.forOffsetHoursMinutes(-2, 15)); [EOL]     assertEquals(DateTimeZone.forID("-23:59"), DateTimeZone.forOffsetHoursMinutes(-23, 59)); [EOL]     try { [EOL]         DateTimeZone.forOffsetHoursMinutes(2, 60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateTimeZone.forOffsetHoursMinutes(-2, 60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateTimeZone.forOffsetHoursMinutes(24, 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateTimeZone.forOffsetHoursMinutes(-24, 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForOffsetHoursMinutes_int_int() { [EOL]     assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0)); [EOL]     assertEquals(DateTimeZone.forID("+23:59"), DateTimeZone.forOffsetHoursMinutes(23, 59)); [EOL]     assertEquals(DateTimeZone.forID("+02:15"), DateTimeZone.forOffsetHoursMinutes(2, 15)); [EOL]     assertEquals(DateTimeZone.forID("+02:00"), DateTimeZone.forOffsetHoursMinutes(2, 0)); [EOL]     try { [EOL]         DateTimeZone.forOffsetHoursMinutes(2, -15); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(DateTimeZone.forID("+00:15"), DateTimeZone.forOffsetHoursMinutes(0, 15)); [EOL]     assertEquals(DateTimeZone.forID("+00:00"), DateTimeZone.forOffsetHoursMinutes(0, 0)); [EOL]     assertEquals(DateTimeZone.forID("-00:15"), DateTimeZone.forOffsetHoursMinutes(0, -15)); [EOL]     assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetHoursMinutes(-2, 0)); [EOL]     assertEquals(DateTimeZone.forID("-02:15"), DateTimeZone.forOffsetHoursMinutes(-2, -15)); [EOL]     assertEquals(DateTimeZone.forID("-02:15"), DateTimeZone.forOffsetHoursMinutes(-2, 15)); [EOL]     assertEquals(DateTimeZone.forID("-23:59"), DateTimeZone.forOffsetHoursMinutes(-23, 59)); [EOL]     try { [EOL]         DateTimeZone.forOffsetHoursMinutes(2, 60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateTimeZone.forOffsetHoursMinutes(-2, 60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateTimeZone.forOffsetHoursMinutes(24, 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateTimeZone.forOffsetHoursMinutes(-24, 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForOffsetHoursMinutes_int_int() { [EOL]     assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0)); [EOL]     assertEquals(DateTimeZone.forID("+23:59"), DateTimeZone.forOffsetHoursMinutes(23, 59)); [EOL]     assertEquals(DateTimeZone.forID("+02:15"), DateTimeZone.forOffsetHoursMinutes(2, 15)); [EOL]     assertEquals(DateTimeZone.forID("+02:00"), DateTimeZone.forOffsetHoursMinutes(2, 0)); [EOL]     try { [EOL]         DateTimeZone.forOffsetHoursMinutes(2, -15); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(DateTimeZone.forID("+00:15"), DateTimeZone.forOffsetHoursMinutes(0, 15)); [EOL]     assertEquals(DateTimeZone.forID("+00:00"), DateTimeZone.forOffsetHoursMinutes(0, 0)); [EOL]     assertEquals(DateTimeZone.forID("-00:15"), DateTimeZone.forOffsetHoursMinutes(0, -15)); [EOL]     assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetHoursMinutes(-2, 0)); [EOL]     assertEquals(DateTimeZone.forID("-02:15"), DateTimeZone.forOffsetHoursMinutes(-2, -15)); [EOL]     assertEquals(DateTimeZone.forID("-02:15"), DateTimeZone.forOffsetHoursMinutes(-2, 15)); [EOL]     assertEquals(DateTimeZone.forID("-23:59"), DateTimeZone.forOffsetHoursMinutes(-23, 59)); [EOL]     try { [EOL]         DateTimeZone.forOffsetHoursMinutes(2, 60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateTimeZone.forOffsetHoursMinutes(-2, 60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateTimeZone.forOffsetHoursMinutes(24, 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateTimeZone.forOffsetHoursMinutes(-24, 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForOffsetHoursMinutes_int_int() { [EOL]     assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0)); [EOL]     assertEquals(DateTimeZone.forID("+23:59"), DateTimeZone.forOffsetHoursMinutes(23, 59)); [EOL]     assertEquals(DateTimeZone.forID("+02:15"), DateTimeZone.forOffsetHoursMinutes(2, 15)); [EOL]     assertEquals(DateTimeZone.forID("+02:00"), DateTimeZone.forOffsetHoursMinutes(2, 0)); [EOL]     try { [EOL]         DateTimeZone.forOffsetHoursMinutes(2, -15); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(DateTimeZone.forID("+00:15"), DateTimeZone.forOffsetHoursMinutes(0, 15)); [EOL]     assertEquals(DateTimeZone.forID("+00:00"), DateTimeZone.forOffsetHoursMinutes(0, 0)); [EOL]     assertEquals(DateTimeZone.forID("-00:15"), DateTimeZone.forOffsetHoursMinutes(0, -15)); [EOL]     assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetHoursMinutes(-2, 0)); [EOL]     assertEquals(DateTimeZone.forID("-02:15"), DateTimeZone.forOffsetHoursMinutes(-2, -15)); [EOL]     assertEquals(DateTimeZone.forID("-02:15"), DateTimeZone.forOffsetHoursMinutes(-2, 15)); [EOL]     assertEquals(DateTimeZone.forID("-23:59"), DateTimeZone.forOffsetHoursMinutes(-23, 59)); [EOL]     try { [EOL]         DateTimeZone.forOffsetHoursMinutes(2, 60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateTimeZone.forOffsetHoursMinutes(-2, 60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateTimeZone.forOffsetHoursMinutes(24, 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateTimeZone.forOffsetHoursMinutes(-24, 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGetAvailableIDs() { [EOL]     assertTrue(DateTimeZone.getAvailableIDs().contains("UTC")); [EOL] }
public void testProvider_badClassName() { [EOL]     try { [EOL]         System.setProperty("org.joda.time.DateTimeZone.Provider", "xxx"); [EOL]         DateTimeZone.setProvider(null); [EOL]     } catch (RuntimeException ex) { [EOL]         assertEquals(ZoneInfoProvider.class, DateTimeZone.getProvider().getClass()); [EOL]     } finally { [EOL]         System.getProperties().remove("org.joda.time.DateTimeZone.Provider"); [EOL]         DateTimeZone.setProvider(null); [EOL]     } [EOL] }
public void testProvider_badClassName() { [EOL]     try { [EOL]         System.setProperty("org.joda.time.DateTimeZone.Provider", "xxx"); [EOL]         DateTimeZone.setProvider(null); [EOL]     } catch (RuntimeException ex) { [EOL]         assertEquals(ZoneInfoProvider.class, DateTimeZone.getProvider().getClass()); [EOL]     } finally { [EOL]         System.getProperties().remove("org.joda.time.DateTimeZone.Provider"); [EOL]         DateTimeZone.setProvider(null); [EOL]     } [EOL] }
public void testProvider_badClassName() { [EOL]     try { [EOL]         System.setProperty("org.joda.time.DateTimeZone.Provider", "xxx"); [EOL]         DateTimeZone.setProvider(null); [EOL]     } catch (RuntimeException ex) { [EOL]         assertEquals(ZoneInfoProvider.class, DateTimeZone.getProvider().getClass()); [EOL]     } finally { [EOL]         System.getProperties().remove("org.joda.time.DateTimeZone.Provider"); [EOL]         DateTimeZone.setProvider(null); [EOL]     } [EOL] }
public void testConstructor() { [EOL]     assertEquals(1, DateTimeZone.class.getDeclaredConstructors().length); [EOL]     assertTrue(Modifier.isProtected(DateTimeZone.class.getDeclaredConstructors()[0].getModifiers())); [EOL]     try { [EOL]         new DateTimeZone(null) { [EOL]  [EOL]             public String getNameKey(long instant) { [EOL]                 return null; [EOL]             } [EOL]  [EOL]             public int getOffset(long instant) { [EOL]                 return 0; [EOL]             } [EOL]  [EOL]             public int getStandardOffset(long instant) { [EOL]                 return 0; [EOL]             } [EOL]  [EOL]             public boolean isFixed() { [EOL]                 return false; [EOL]             } [EOL]  [EOL]             public long nextTransition(long instant) { [EOL]                 return 0; [EOL]             } [EOL]  [EOL]             public long previousTransition(long instant) { [EOL]                 return 0; [EOL]             } [EOL]  [EOL]             public boolean equals(Object object) { [EOL]                 return false; [EOL]             } [EOL]         }; [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testConstructor() { [EOL]     assertEquals(1, DateTimeZone.class.getDeclaredConstructors().length); [EOL]     assertTrue(Modifier.isProtected(DateTimeZone.class.getDeclaredConstructors()[0].getModifiers())); [EOL]     try { [EOL]         new DateTimeZone(null) { [EOL]  [EOL]             public String getNameKey(long instant) { [EOL]                 return null; [EOL]             } [EOL]  [EOL]             public int getOffset(long instant) { [EOL]                 return 0; [EOL]             } [EOL]  [EOL]             public int getStandardOffset(long instant) { [EOL]                 return 0; [EOL]             } [EOL]  [EOL]             public boolean isFixed() { [EOL]                 return false; [EOL]             } [EOL]  [EOL]             public long nextTransition(long instant) { [EOL]                 return 0; [EOL]             } [EOL]  [EOL]             public long previousTransition(long instant) { [EOL]                 return 0; [EOL]             } [EOL]  [EOL]             public boolean equals(Object object) { [EOL]                 return false; [EOL]             } [EOL]         }; [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithZoneRetainFields_DateTimeZone() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateMidnight result = test.withZoneRetainFields(PARIS); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_PARIS, result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertEquals(TEST_TIME1_PARIS, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_LONDON, result.getMillis()); [EOL]     assertEquals(GREGORIAN_DEFAULT, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, new MockNullZoneChronology()); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL] }
public void testBug2182444_ausNSW() { [EOL]     Chronology chronAusNSW = GregorianChronology.getInstance(DateTimeZone.forID("Australia/NSW")); [EOL]     Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC); [EOL]     DateTime australiaNSWStandardInUTC = new DateTime(2008, 4, 5, 16, 0, 0, 0, chronUTC); [EOL]     DateTime australiaNSWDaylightInUTC = new DateTime(2008, 4, 5, 15, 0, 0, 0, chronUTC); [EOL]     assertTrue("Should be standard time", chronAusNSW.getZone().isStandardOffset(australiaNSWStandardInUTC.getMillis())); [EOL]     assertFalse("Should be daylight time", chronAusNSW.getZone().isStandardOffset(australiaNSWDaylightInUTC.getMillis())); [EOL]     DateTime australiaNSWStandardInAustraliaNSW = australiaNSWStandardInUTC.toDateTime(chronAusNSW); [EOL]     DateTime australiaNSWDaylightInAusraliaNSW = australiaNSWDaylightInUTC.toDateTime(chronAusNSW); [EOL]     assertEquals(2, australiaNSWStandardInAustraliaNSW.getHourOfDay()); [EOL]     assertEquals(australiaNSWStandardInAustraliaNSW.getHourOfDay(), australiaNSWDaylightInAusraliaNSW.getHourOfDay()); [EOL]     assertTrue(australiaNSWStandardInAustraliaNSW.getMillis() != australiaNSWDaylightInAusraliaNSW.getMillis()); [EOL]     assertEquals(australiaNSWStandardInAustraliaNSW, australiaNSWStandardInAustraliaNSW.withHourOfDay(2)); [EOL]     assertEquals(australiaNSWStandardInAustraliaNSW.getMillis() + 3, australiaNSWStandardInAustraliaNSW.withMillisOfSecond(3).getMillis()); [EOL]     assertEquals(australiaNSWDaylightInAusraliaNSW, australiaNSWDaylightInAusraliaNSW.withHourOfDay(2)); [EOL]     assertEquals(australiaNSWDaylightInAusraliaNSW.getMillis() + 3, australiaNSWDaylightInAusraliaNSW.withMillisOfSecond(3).getMillis()); [EOL] }
public void testBug2182444_ausNSW() { [EOL]     Chronology chronAusNSW = GregorianChronology.getInstance(DateTimeZone.forID("Australia/NSW")); [EOL]     Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC); [EOL]     DateTime australiaNSWStandardInUTC = new DateTime(2008, 4, 5, 16, 0, 0, 0, chronUTC); [EOL]     DateTime australiaNSWDaylightInUTC = new DateTime(2008, 4, 5, 15, 0, 0, 0, chronUTC); [EOL]     assertTrue("Should be standard time", chronAusNSW.getZone().isStandardOffset(australiaNSWStandardInUTC.getMillis())); [EOL]     assertFalse("Should be daylight time", chronAusNSW.getZone().isStandardOffset(australiaNSWDaylightInUTC.getMillis())); [EOL]     DateTime australiaNSWStandardInAustraliaNSW = australiaNSWStandardInUTC.toDateTime(chronAusNSW); [EOL]     DateTime australiaNSWDaylightInAusraliaNSW = australiaNSWDaylightInUTC.toDateTime(chronAusNSW); [EOL]     assertEquals(2, australiaNSWStandardInAustraliaNSW.getHourOfDay()); [EOL]     assertEquals(australiaNSWStandardInAustraliaNSW.getHourOfDay(), australiaNSWDaylightInAusraliaNSW.getHourOfDay()); [EOL]     assertTrue(australiaNSWStandardInAustraliaNSW.getMillis() != australiaNSWDaylightInAusraliaNSW.getMillis()); [EOL]     assertEquals(australiaNSWStandardInAustraliaNSW, australiaNSWStandardInAustraliaNSW.withHourOfDay(2)); [EOL]     assertEquals(australiaNSWStandardInAustraliaNSW.getMillis() + 3, australiaNSWStandardInAustraliaNSW.withMillisOfSecond(3).getMillis()); [EOL]     assertEquals(australiaNSWDaylightInAusraliaNSW, australiaNSWDaylightInAusraliaNSW.withHourOfDay(2)); [EOL]     assertEquals(australiaNSWDaylightInAusraliaNSW.getMillis() + 3, australiaNSWDaylightInAusraliaNSW.withMillisOfSecond(3).getMillis()); [EOL] }
public void testWithZoneRetainFields_DateTimeZone() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateMidnight result = test.withZoneRetainFields(PARIS); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_PARIS, result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertEquals(TEST_TIME1_PARIS, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_LONDON, result.getMillis()); [EOL]     assertEquals(GREGORIAN_DEFAULT, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, new MockNullZoneChronology()); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL] }
public void testWithZoneRetainFields_DateTimeZone() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateMidnight result = test.withZoneRetainFields(PARIS); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_PARIS, result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertEquals(TEST_TIME1_PARIS, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_LONDON, result.getMillis()); [EOL]     assertEquals(GREGORIAN_DEFAULT, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, new MockNullZoneChronology()); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL] }
public void testWithZoneRetainFields_DateTimeZone() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateMidnight result = test.withZoneRetainFields(PARIS); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_PARIS, result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertEquals(TEST_TIME1_PARIS, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_LONDON, result.getMillis()); [EOL]     assertEquals(GREGORIAN_DEFAULT, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, new MockNullZoneChronology()); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL] }
public void testWithZoneRetainFields_DateTimeZone() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateMidnight result = test.withZoneRetainFields(PARIS); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_PARIS, result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertEquals(TEST_TIME1_PARIS, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_LONDON, result.getMillis()); [EOL]     assertEquals(GREGORIAN_DEFAULT, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, new MockNullZoneChronology()); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL] }
public void testWithZoneRetainFields_DateTimeZone() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateMidnight result = test.withZoneRetainFields(PARIS); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_PARIS, result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertEquals(TEST_TIME1_PARIS, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_LONDON, result.getMillis()); [EOL]     assertEquals(GREGORIAN_DEFAULT, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, new MockNullZoneChronology()); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL] }
public void testWithZoneRetainFields_DateTimeZone() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateMidnight result = test.withZoneRetainFields(PARIS); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_PARIS, result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertEquals(TEST_TIME1_PARIS, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_LONDON, result.getMillis()); [EOL]     assertEquals(GREGORIAN_DEFAULT, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, new MockNullZoneChronology()); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL] }
public void testWithZoneRetainFields_DateTimeZone() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateMidnight result = test.withZoneRetainFields(PARIS); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_PARIS, result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertEquals(TEST_TIME1_PARIS, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_LONDON, result.getMillis()); [EOL]     assertEquals(GREGORIAN_DEFAULT, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, new MockNullZoneChronology()); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL] }
public void testToTimeZone() { [EOL]     DateTimeZone zone = DateTimeZone.forID("Europe/Paris"); [EOL]     TimeZone tz = zone.toTimeZone(); [EOL]     assertEquals("Europe/Paris", tz.getID()); [EOL] }
public void testToTimeZone() { [EOL]     DateTimeZone zone = DateTimeZone.forID("Europe/Paris"); [EOL]     TimeZone tz = zone.toTimeZone(); [EOL]     assertEquals("Europe/Paris", tz.getID()); [EOL] }
public void testToTimeZone() { [EOL]     DateTimeZone zone = DateTimeZone.forID("Europe/Paris"); [EOL]     TimeZone tz = zone.toTimeZone(); [EOL]     assertEquals("Europe/Paris", tz.getID()); [EOL] }
public void testWithZoneRetainFields_DateTimeZone() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateMidnight result = test.withZoneRetainFields(PARIS); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_PARIS, result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertEquals(TEST_TIME1_PARIS, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_LONDON, result.getMillis()); [EOL]     assertEquals(GREGORIAN_DEFAULT, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, new MockNullZoneChronology()); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL] }
public void testDurationFields() { [EOL]     final CopticChronology coptic = CopticChronology.getInstance(); [EOL]     assertEquals("eras", coptic.eras().getName()); [EOL]     assertEquals("centuries", coptic.centuries().getName()); [EOL]     assertEquals("years", coptic.years().getName()); [EOL]     assertEquals("weekyears", coptic.weekyears().getName()); [EOL]     assertEquals("months", coptic.months().getName()); [EOL]     assertEquals("weeks", coptic.weeks().getName()); [EOL]     assertEquals("days", coptic.days().getName()); [EOL]     assertEquals("halfdays", coptic.halfdays().getName()); [EOL]     assertEquals("hours", coptic.hours().getName()); [EOL]     assertEquals("minutes", coptic.minutes().getName()); [EOL]     assertEquals("seconds", coptic.seconds().getName()); [EOL]     assertEquals("millis", coptic.millis().getName()); [EOL]     assertEquals(false, coptic.eras().isSupported()); [EOL]     assertEquals(true, coptic.centuries().isSupported()); [EOL]     assertEquals(true, coptic.years().isSupported()); [EOL]     assertEquals(true, coptic.weekyears().isSupported()); [EOL]     assertEquals(true, coptic.months().isSupported()); [EOL]     assertEquals(true, coptic.weeks().isSupported()); [EOL]     assertEquals(true, coptic.days().isSupported()); [EOL]     assertEquals(true, coptic.halfdays().isSupported()); [EOL]     assertEquals(true, coptic.hours().isSupported()); [EOL]     assertEquals(true, coptic.minutes().isSupported()); [EOL]     assertEquals(true, coptic.seconds().isSupported()); [EOL]     assertEquals(true, coptic.millis().isSupported()); [EOL]     assertEquals(false, coptic.centuries().isPrecise()); [EOL]     assertEquals(false, coptic.years().isPrecise()); [EOL]     assertEquals(false, coptic.weekyears().isPrecise()); [EOL]     assertEquals(false, coptic.months().isPrecise()); [EOL]     assertEquals(false, coptic.weeks().isPrecise()); [EOL]     assertEquals(false, coptic.days().isPrecise()); [EOL]     assertEquals(false, coptic.halfdays().isPrecise()); [EOL]     assertEquals(true, coptic.hours().isPrecise()); [EOL]     assertEquals(true, coptic.minutes().isPrecise()); [EOL]     assertEquals(true, coptic.seconds().isPrecise()); [EOL]     assertEquals(true, coptic.millis().isPrecise()); [EOL]     final CopticChronology copticUTC = CopticChronology.getInstanceUTC(); [EOL]     assertEquals(false, copticUTC.centuries().isPrecise()); [EOL]     assertEquals(false, copticUTC.years().isPrecise()); [EOL]     assertEquals(false, copticUTC.weekyears().isPrecise()); [EOL]     assertEquals(false, copticUTC.months().isPrecise()); [EOL]     assertEquals(true, copticUTC.weeks().isPrecise()); [EOL]     assertEquals(true, copticUTC.days().isPrecise()); [EOL]     assertEquals(true, copticUTC.halfdays().isPrecise()); [EOL]     assertEquals(true, copticUTC.hours().isPrecise()); [EOL]     assertEquals(true, copticUTC.minutes().isPrecise()); [EOL]     assertEquals(true, copticUTC.seconds().isPrecise()); [EOL]     assertEquals(true, copticUTC.millis().isPrecise()); [EOL]     final DateTimeZone gmt = DateTimeZone.forID("Etc/GMT"); [EOL]     final CopticChronology copticGMT = CopticChronology.getInstance(gmt); [EOL]     assertEquals(false, copticGMT.centuries().isPrecise()); [EOL]     assertEquals(false, copticGMT.years().isPrecise()); [EOL]     assertEquals(false, copticGMT.weekyears().isPrecise()); [EOL]     assertEquals(false, copticGMT.months().isPrecise()); [EOL]     assertEquals(true, copticGMT.weeks().isPrecise()); [EOL]     assertEquals(true, copticGMT.days().isPrecise()); [EOL]     assertEquals(true, copticGMT.halfdays().isPrecise()); [EOL]     assertEquals(true, copticGMT.hours().isPrecise()); [EOL]     assertEquals(true, copticGMT.minutes().isPrecise()); [EOL]     assertEquals(true, copticGMT.seconds().isPrecise()); [EOL]     assertEquals(true, copticGMT.millis().isPrecise()); [EOL] }
public void testDurationFields() { [EOL]     final CopticChronology coptic = CopticChronology.getInstance(); [EOL]     assertEquals("eras", coptic.eras().getName()); [EOL]     assertEquals("centuries", coptic.centuries().getName()); [EOL]     assertEquals("years", coptic.years().getName()); [EOL]     assertEquals("weekyears", coptic.weekyears().getName()); [EOL]     assertEquals("months", coptic.months().getName()); [EOL]     assertEquals("weeks", coptic.weeks().getName()); [EOL]     assertEquals("days", coptic.days().getName()); [EOL]     assertEquals("halfdays", coptic.halfdays().getName()); [EOL]     assertEquals("hours", coptic.hours().getName()); [EOL]     assertEquals("minutes", coptic.minutes().getName()); [EOL]     assertEquals("seconds", coptic.seconds().getName()); [EOL]     assertEquals("millis", coptic.millis().getName()); [EOL]     assertEquals(false, coptic.eras().isSupported()); [EOL]     assertEquals(true, coptic.centuries().isSupported()); [EOL]     assertEquals(true, coptic.years().isSupported()); [EOL]     assertEquals(true, coptic.weekyears().isSupported()); [EOL]     assertEquals(true, coptic.months().isSupported()); [EOL]     assertEquals(true, coptic.weeks().isSupported()); [EOL]     assertEquals(true, coptic.days().isSupported()); [EOL]     assertEquals(true, coptic.halfdays().isSupported()); [EOL]     assertEquals(true, coptic.hours().isSupported()); [EOL]     assertEquals(true, coptic.minutes().isSupported()); [EOL]     assertEquals(true, coptic.seconds().isSupported()); [EOL]     assertEquals(true, coptic.millis().isSupported()); [EOL]     assertEquals(false, coptic.centuries().isPrecise()); [EOL]     assertEquals(false, coptic.years().isPrecise()); [EOL]     assertEquals(false, coptic.weekyears().isPrecise()); [EOL]     assertEquals(false, coptic.months().isPrecise()); [EOL]     assertEquals(false, coptic.weeks().isPrecise()); [EOL]     assertEquals(false, coptic.days().isPrecise()); [EOL]     assertEquals(false, coptic.halfdays().isPrecise()); [EOL]     assertEquals(true, coptic.hours().isPrecise()); [EOL]     assertEquals(true, coptic.minutes().isPrecise()); [EOL]     assertEquals(true, coptic.seconds().isPrecise()); [EOL]     assertEquals(true, coptic.millis().isPrecise()); [EOL]     final CopticChronology copticUTC = CopticChronology.getInstanceUTC(); [EOL]     assertEquals(false, copticUTC.centuries().isPrecise()); [EOL]     assertEquals(false, copticUTC.years().isPrecise()); [EOL]     assertEquals(false, copticUTC.weekyears().isPrecise()); [EOL]     assertEquals(false, copticUTC.months().isPrecise()); [EOL]     assertEquals(true, copticUTC.weeks().isPrecise()); [EOL]     assertEquals(true, copticUTC.days().isPrecise()); [EOL]     assertEquals(true, copticUTC.halfdays().isPrecise()); [EOL]     assertEquals(true, copticUTC.hours().isPrecise()); [EOL]     assertEquals(true, copticUTC.minutes().isPrecise()); [EOL]     assertEquals(true, copticUTC.seconds().isPrecise()); [EOL]     assertEquals(true, copticUTC.millis().isPrecise()); [EOL]     final DateTimeZone gmt = DateTimeZone.forID("Etc/GMT"); [EOL]     final CopticChronology copticGMT = CopticChronology.getInstance(gmt); [EOL]     assertEquals(false, copticGMT.centuries().isPrecise()); [EOL]     assertEquals(false, copticGMT.years().isPrecise()); [EOL]     assertEquals(false, copticGMT.weekyears().isPrecise()); [EOL]     assertEquals(false, copticGMT.months().isPrecise()); [EOL]     assertEquals(true, copticGMT.weeks().isPrecise()); [EOL]     assertEquals(true, copticGMT.days().isPrecise()); [EOL]     assertEquals(true, copticGMT.halfdays().isPrecise()); [EOL]     assertEquals(true, copticGMT.hours().isPrecise()); [EOL]     assertEquals(true, copticGMT.minutes().isPrecise()); [EOL]     assertEquals(true, copticGMT.seconds().isPrecise()); [EOL]     assertEquals(true, copticGMT.millis().isPrecise()); [EOL] }
public void testDurationFields() { [EOL]     final CopticChronology coptic = CopticChronology.getInstance(); [EOL]     assertEquals("eras", coptic.eras().getName()); [EOL]     assertEquals("centuries", coptic.centuries().getName()); [EOL]     assertEquals("years", coptic.years().getName()); [EOL]     assertEquals("weekyears", coptic.weekyears().getName()); [EOL]     assertEquals("months", coptic.months().getName()); [EOL]     assertEquals("weeks", coptic.weeks().getName()); [EOL]     assertEquals("days", coptic.days().getName()); [EOL]     assertEquals("halfdays", coptic.halfdays().getName()); [EOL]     assertEquals("hours", coptic.hours().getName()); [EOL]     assertEquals("minutes", coptic.minutes().getName()); [EOL]     assertEquals("seconds", coptic.seconds().getName()); [EOL]     assertEquals("millis", coptic.millis().getName()); [EOL]     assertEquals(false, coptic.eras().isSupported()); [EOL]     assertEquals(true, coptic.centuries().isSupported()); [EOL]     assertEquals(true, coptic.years().isSupported()); [EOL]     assertEquals(true, coptic.weekyears().isSupported()); [EOL]     assertEquals(true, coptic.months().isSupported()); [EOL]     assertEquals(true, coptic.weeks().isSupported()); [EOL]     assertEquals(true, coptic.days().isSupported()); [EOL]     assertEquals(true, coptic.halfdays().isSupported()); [EOL]     assertEquals(true, coptic.hours().isSupported()); [EOL]     assertEquals(true, coptic.minutes().isSupported()); [EOL]     assertEquals(true, coptic.seconds().isSupported()); [EOL]     assertEquals(true, coptic.millis().isSupported()); [EOL]     assertEquals(false, coptic.centuries().isPrecise()); [EOL]     assertEquals(false, coptic.years().isPrecise()); [EOL]     assertEquals(false, coptic.weekyears().isPrecise()); [EOL]     assertEquals(false, coptic.months().isPrecise()); [EOL]     assertEquals(false, coptic.weeks().isPrecise()); [EOL]     assertEquals(false, coptic.days().isPrecise()); [EOL]     assertEquals(false, coptic.halfdays().isPrecise()); [EOL]     assertEquals(true, coptic.hours().isPrecise()); [EOL]     assertEquals(true, coptic.minutes().isPrecise()); [EOL]     assertEquals(true, coptic.seconds().isPrecise()); [EOL]     assertEquals(true, coptic.millis().isPrecise()); [EOL]     final CopticChronology copticUTC = CopticChronology.getInstanceUTC(); [EOL]     assertEquals(false, copticUTC.centuries().isPrecise()); [EOL]     assertEquals(false, copticUTC.years().isPrecise()); [EOL]     assertEquals(false, copticUTC.weekyears().isPrecise()); [EOL]     assertEquals(false, copticUTC.months().isPrecise()); [EOL]     assertEquals(true, copticUTC.weeks().isPrecise()); [EOL]     assertEquals(true, copticUTC.days().isPrecise()); [EOL]     assertEquals(true, copticUTC.halfdays().isPrecise()); [EOL]     assertEquals(true, copticUTC.hours().isPrecise()); [EOL]     assertEquals(true, copticUTC.minutes().isPrecise()); [EOL]     assertEquals(true, copticUTC.seconds().isPrecise()); [EOL]     assertEquals(true, copticUTC.millis().isPrecise()); [EOL]     final DateTimeZone gmt = DateTimeZone.forID("Etc/GMT"); [EOL]     final CopticChronology copticGMT = CopticChronology.getInstance(gmt); [EOL]     assertEquals(false, copticGMT.centuries().isPrecise()); [EOL]     assertEquals(false, copticGMT.years().isPrecise()); [EOL]     assertEquals(false, copticGMT.weekyears().isPrecise()); [EOL]     assertEquals(false, copticGMT.months().isPrecise()); [EOL]     assertEquals(true, copticGMT.weeks().isPrecise()); [EOL]     assertEquals(true, copticGMT.days().isPrecise()); [EOL]     assertEquals(true, copticGMT.halfdays().isPrecise()); [EOL]     assertEquals(true, copticGMT.hours().isPrecise()); [EOL]     assertEquals(true, copticGMT.minutes().isPrecise()); [EOL]     assertEquals(true, copticGMT.seconds().isPrecise()); [EOL]     assertEquals(true, copticGMT.millis().isPrecise()); [EOL] }
public void testWithZoneRetainFields_DateTimeZone() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateMidnight result = test.withZoneRetainFields(PARIS); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_PARIS, result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertEquals(TEST_TIME1_PARIS, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_LONDON, result.getMillis()); [EOL]     assertEquals(GREGORIAN_DEFAULT, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, new MockNullZoneChronology()); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL] }
public void testWithZoneRetainFields_DateTimeZone() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateMidnight result = test.withZoneRetainFields(PARIS); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_PARIS, result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertEquals(TEST_TIME1_PARIS, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_LONDON, result.getMillis()); [EOL]     assertEquals(GREGORIAN_DEFAULT, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, new MockNullZoneChronology()); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testWithZoneRetainFields_DateTimeZone() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateMidnight result = test.withZoneRetainFields(PARIS); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_PARIS, result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertEquals(TEST_TIME1_PARIS, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_LONDON, result.getMillis()); [EOL]     assertEquals(GREGORIAN_DEFAULT, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, new MockNullZoneChronology()); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL] }
public void testWithZoneRetainFields_DateTimeZone() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateMidnight result = test.withZoneRetainFields(PARIS); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_PARIS, result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertEquals(TEST_TIME1_PARIS, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_LONDON, result.getMillis()); [EOL]     assertEquals(GREGORIAN_DEFAULT, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, new MockNullZoneChronology()); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL] }
public void testWithZoneRetainFields_DateTimeZone() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateMidnight result = test.withZoneRetainFields(PARIS); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_PARIS, result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertEquals(TEST_TIME1_PARIS, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_LONDON, result.getMillis()); [EOL]     assertEquals(GREGORIAN_DEFAULT, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, new MockNullZoneChronology()); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL] }
public void testWithZoneRetainFields_DateTimeZone() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateMidnight result = test.withZoneRetainFields(PARIS); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_PARIS, result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertEquals(TEST_TIME1_PARIS, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_LONDON, result.getMillis()); [EOL]     assertEquals(GREGORIAN_DEFAULT, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, new MockNullZoneChronology()); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL] }
public void testWithZoneRetainFields_DateTimeZone() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateMidnight result = test.withZoneRetainFields(PARIS); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_PARIS, result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertEquals(TEST_TIME1_PARIS, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_LONDON, result.getMillis()); [EOL]     assertEquals(GREGORIAN_DEFAULT, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, new MockNullZoneChronology()); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL] }
public void testWithZoneRetainFields_DateTimeZone() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateMidnight result = test.withZoneRetainFields(PARIS); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_PARIS, result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertEquals(TEST_TIME1_PARIS, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_LONDON, result.getMillis()); [EOL]     assertEquals(GREGORIAN_DEFAULT, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, new MockNullZoneChronology()); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testMinusWeeks_int() { [EOL]     DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.minusWeeks(1); [EOL]     DateMidnight expected = new DateMidnight(2002, 4, 26, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusWeeks(0); [EOL]     assertSame(test, result); [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testFormatParse_textHalfdayAM_UK() { [EOL]     DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder().appendLiteral('$').appendClockhourOfHalfday(2).appendLiteral('-').appendHalfdayOfDayText().appendLiteral('-').appendYear(4, 4).toFormatter().withLocale(Locale.UK).withZoneUTC(); [EOL]     String str = new DateTime(2007, 6, 23, 18, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("$06-PM-2007", str); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     check(date, 2007, 1, 1); [EOL] }
public void testFormatParse_textHalfdayAM_UK() { [EOL]     DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder().appendLiteral('$').appendClockhourOfHalfday(2).appendLiteral('-').appendHalfdayOfDayText().appendLiteral('-').appendYear(4, 4).toFormatter().withLocale(Locale.UK).withZoneUTC(); [EOL]     String str = new DateTime(2007, 6, 23, 18, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("$06-PM-2007", str); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     check(date, 2007, 1, 1); [EOL] }
public void testFormatSuffixPlural2() { [EOL]     PeriodFormatter f = builder.appendHours().appendSuffix(" hour", " hours").toFormatter(); [EOL]     assertEquals("5 hours", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 hours", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testID() { [EOL]     DateTimeZone tz = buildAmericaLosAngeles(); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL] }
public void testConstructor_RI_RI5() throws Throwable { [EOL]     DateTime dt1 = null; [EOL]     DateTime dt2 = null; [EOL]     MutablePeriod test = new MutablePeriod(dt1, dt2); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testConstructor_RP_RP_PeriodType6() throws Throwable { [EOL]     YearMonthDay dt1 = new YearMonthDay(2005, 7, 17); [EOL]     TimeOfDay dt2 = new TimeOfDay(10, 20, 30, 40); [EOL]     try { [EOL]         new Period(dt1, dt2, PeriodType.standard()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testConstructor_RP_RP_PeriodType6() throws Throwable { [EOL]     YearMonthDay dt1 = new YearMonthDay(2005, 7, 17); [EOL]     TimeOfDay dt2 = new TimeOfDay(10, 20, 30, 40); [EOL]     try { [EOL]         new Period(dt1, dt2, PeriodType.standard()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testConstructor_RP_RP_PeriodType6() throws Throwable { [EOL]     YearMonthDay dt1 = new YearMonthDay(2005, 7, 17); [EOL]     TimeOfDay dt2 = new TimeOfDay(10, 20, 30, 40); [EOL]     try { [EOL]         new Period(dt1, dt2, PeriodType.standard()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testConstructor_RP_RP_PeriodType6() throws Throwable { [EOL]     YearMonthDay dt1 = new YearMonthDay(2005, 7, 17); [EOL]     TimeOfDay dt2 = new TimeOfDay(10, 20, 30, 40); [EOL]     try { [EOL]         new Period(dt1, dt2, PeriodType.standard()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testConstructor_RP_RP_PeriodType6() throws Throwable { [EOL]     YearMonthDay dt1 = new YearMonthDay(2005, 7, 17); [EOL]     TimeOfDay dt2 = new TimeOfDay(10, 20, 30, 40); [EOL]     try { [EOL]         new Period(dt1, dt2, PeriodType.standard()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testConstructor_RP_RP_PeriodType6() throws Throwable { [EOL]     YearMonthDay dt1 = new YearMonthDay(2005, 7, 17); [EOL]     TimeOfDay dt2 = new TimeOfDay(10, 20, 30, 40); [EOL]     try { [EOL]         new Period(dt1, dt2, PeriodType.standard()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testConstructor_RD_RI2() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     Duration dur = null; [EOL]     Period test = new Period(dur, dt1); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] }
public void testConstructor_RD_RI2() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     Duration dur = null; [EOL]     Period test = new Period(dur, dt1); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] }
public void testConstructor_RD_RI2() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     Duration dur = null; [EOL]     Period test = new Period(dur, dt1); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] }
public void testConstructor_RD_RI2() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     Duration dur = null; [EOL]     Period test = new Period(dur, dt1); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] }
public void testToDurationTo() { [EOL]     Period test = new Period(123L); [EOL]     assertEquals(new Duration(123L), test.toDurationTo(new Instant(123L))); [EOL] }
public void testFormatSuffixPlural2() { [EOL]     PeriodFormatter f = builder.appendHours().appendSuffix(" hour", " hours").toFormatter(); [EOL]     assertEquals("5 hours", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 hours", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixPlural2() { [EOL]     PeriodFormatter f = builder.appendHours().appendSuffix(" hour", " hours").toFormatter(); [EOL]     assertEquals("5 hours", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 hours", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixPlural2() { [EOL]     PeriodFormatter f = builder.appendHours().appendSuffix(" hour", " hours").toFormatter(); [EOL]     assertEquals("5 hours", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 hours", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixPlural2() { [EOL]     PeriodFormatter f = builder.appendHours().appendSuffix(" hour", " hours").toFormatter(); [EOL]     assertEquals("5 hours", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 hours", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testSetWeeks() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setWeeks(10); [EOL]     assertEquals(10, test.getWeeks()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setWeeks(-10); [EOL]     assertEquals(-10, test.getWeeks()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setWeeks(0); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setWeeks(3); [EOL]     assertEquals(3, test.getWeeks()); [EOL] }
public void testSetWeeks() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setWeeks(10); [EOL]     assertEquals(10, test.getWeeks()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setWeeks(-10); [EOL]     assertEquals(-10, test.getWeeks()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setWeeks(0); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setWeeks(3); [EOL]     assertEquals(3, test.getWeeks()); [EOL] }
public void testForFields_calBased_YMD_unmodifiable() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth() }; [EOL]     int[] values = new int[] { 2005, 6, 25 }; [EOL]     List types = Collections.unmodifiableList(new ArrayList(Arrays.asList(fields))); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(3, types.size()); [EOL]     types = Arrays.asList(fields); [EOL]     f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(3, types.size()); [EOL] }
public void testForFields_calBased_YMD_unmodifiable() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth() }; [EOL]     int[] values = new int[] { 2005, 6, 25 }; [EOL]     List types = Collections.unmodifiableList(new ArrayList(Arrays.asList(fields))); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(3, types.size()); [EOL]     types = Arrays.asList(fields); [EOL]     f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(3, types.size()); [EOL] }
public void testForFields_calBased_YMD_unmodifiable() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth() }; [EOL]     int[] values = new int[] { 2005, 6, 25 }; [EOL]     List types = Collections.unmodifiableList(new ArrayList(Arrays.asList(fields))); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(3, types.size()); [EOL]     types = Arrays.asList(fields); [EOL]     f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(3, types.size()); [EOL] }
public void testForFields_calBased_YMD_unmodifiable() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth() }; [EOL]     int[] values = new int[] { 2005, 6, 25 }; [EOL]     List types = Collections.unmodifiableList(new ArrayList(Arrays.asList(fields))); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(3, types.size()); [EOL]     types = Arrays.asList(fields); [EOL]     f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(3, types.size()); [EOL] }
public void testForFields_calBased_YMD_unmodifiable() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth() }; [EOL]     int[] values = new int[] { 2005, 6, 25 }; [EOL]     List types = Collections.unmodifiableList(new ArrayList(Arrays.asList(fields))); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(3, types.size()); [EOL]     types = Arrays.asList(fields); [EOL]     f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(3, types.size()); [EOL] }
public void testForFields_calBased_YMD_unmodifiable() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth() }; [EOL]     int[] values = new int[] { 2005, 6, 25 }; [EOL]     List types = Collections.unmodifiableList(new ArrayList(Arrays.asList(fields))); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(3, types.size()); [EOL]     types = Arrays.asList(fields); [EOL]     f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(3, types.size()); [EOL] }
public void testForFields_calBased_YMD_unmodifiable() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth() }; [EOL]     int[] values = new int[] { 2005, 6, 25 }; [EOL]     List types = Collections.unmodifiableList(new ArrayList(Arrays.asList(fields))); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(3, types.size()); [EOL]     types = Arrays.asList(fields); [EOL]     f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(3, types.size()); [EOL] }
public void testForFields_calBased_YMD_unmodifiable() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth() }; [EOL]     int[] values = new int[] { 2005, 6, 25 }; [EOL]     List types = Collections.unmodifiableList(new ArrayList(Arrays.asList(fields))); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(3, types.size()); [EOL]     types = Arrays.asList(fields); [EOL]     f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(3, types.size()); [EOL] }
public void testForFields_calBased_YMD_unmodifiable() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth() }; [EOL]     int[] values = new int[] { 2005, 6, 25 }; [EOL]     List types = Collections.unmodifiableList(new ArrayList(Arrays.asList(fields))); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(3, types.size()); [EOL]     types = Arrays.asList(fields); [EOL]     f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(3, types.size()); [EOL] }
public void testForFields_calBased_YMD_unmodifiable() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth() }; [EOL]     int[] values = new int[] { 2005, 6, 25 }; [EOL]     List types = Collections.unmodifiableList(new ArrayList(Arrays.asList(fields))); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(3, types.size()); [EOL]     types = Arrays.asList(fields); [EOL]     f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(3, types.size()); [EOL] }
public void testForFields_calBased_YMD_unmodifiable() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth() }; [EOL]     int[] values = new int[] { 2005, 6, 25 }; [EOL]     List types = Collections.unmodifiableList(new ArrayList(Arrays.asList(fields))); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(3, types.size()); [EOL]     types = Arrays.asList(fields); [EOL]     f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(3, types.size()); [EOL] }
public void testForFields_calBased_YMD_unmodifiable() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth() }; [EOL]     int[] values = new int[] { 2005, 6, 25 }; [EOL]     List types = Collections.unmodifiableList(new ArrayList(Arrays.asList(fields))); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(3, types.size()); [EOL]     types = Arrays.asList(fields); [EOL]     f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(3, types.size()); [EOL] }
public void testForFields_calBased_YMD_unmodifiable() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth() }; [EOL]     int[] values = new int[] { 2005, 6, 25 }; [EOL]     List types = Collections.unmodifiableList(new ArrayList(Arrays.asList(fields))); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(3, types.size()); [EOL]     types = Arrays.asList(fields); [EOL]     f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(3, types.size()); [EOL] }
public void testForFields_calBased_YMD_unmodifiable() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth() }; [EOL]     int[] values = new int[] { 2005, 6, 25 }; [EOL]     List types = Collections.unmodifiableList(new ArrayList(Arrays.asList(fields))); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(3, types.size()); [EOL]     types = Arrays.asList(fields); [EOL]     f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(3, types.size()); [EOL] }
public void testForFields_calBased_YMD_unmodifiable() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth() }; [EOL]     int[] values = new int[] { 2005, 6, 25 }; [EOL]     List types = Collections.unmodifiableList(new ArrayList(Arrays.asList(fields))); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(3, types.size()); [EOL]     types = Arrays.asList(fields); [EOL]     f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(3, types.size()); [EOL] }
public void testForFields_calBased_YMD_unmodifiable() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth() }; [EOL]     int[] values = new int[] { 2005, 6, 25 }; [EOL]     List types = Collections.unmodifiableList(new ArrayList(Arrays.asList(fields))); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(3, types.size()); [EOL]     types = Arrays.asList(fields); [EOL]     f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(3, types.size()); [EOL] }
public void testForFields_calBased_YMD_unmodifiable() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth() }; [EOL]     int[] values = new int[] { 2005, 6, 25 }; [EOL]     List types = Collections.unmodifiableList(new ArrayList(Arrays.asList(fields))); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(3, types.size()); [EOL]     types = Arrays.asList(fields); [EOL]     f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(3, types.size()); [EOL] }
public void testForFields_calBased_YMD_unmodifiable() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth() }; [EOL]     int[] values = new int[] { 2005, 6, 25 }; [EOL]     List types = Collections.unmodifiableList(new ArrayList(Arrays.asList(fields))); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(3, types.size()); [EOL]     types = Arrays.asList(fields); [EOL]     f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(3, types.size()); [EOL] }
public void testForFields_calBased_YMD_unmodifiable() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth() }; [EOL]     int[] values = new int[] { 2005, 6, 25 }; [EOL]     List types = Collections.unmodifiableList(new ArrayList(Arrays.asList(fields))); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(3, types.size()); [EOL]     types = Arrays.asList(fields); [EOL]     f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(3, types.size()); [EOL] }
public void testForFields_calBased_YMD_unmodifiable() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth() }; [EOL]     int[] values = new int[] { 2005, 6, 25 }; [EOL]     List types = Collections.unmodifiableList(new ArrayList(Arrays.asList(fields))); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(3, types.size()); [EOL]     types = Arrays.asList(fields); [EOL]     f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(3, types.size()); [EOL] }
public void testForFields_calBased_YMD_unmodifiable() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth() }; [EOL]     int[] values = new int[] { 2005, 6, 25 }; [EOL]     List types = Collections.unmodifiableList(new ArrayList(Arrays.asList(fields))); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(3, types.size()); [EOL]     types = Arrays.asList(fields); [EOL]     f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(3, types.size()); [EOL] }
public void testForFields_calBased_YMD_unmodifiable() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth() }; [EOL]     int[] values = new int[] { 2005, 6, 25 }; [EOL]     List types = Collections.unmodifiableList(new ArrayList(Arrays.asList(fields))); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(3, types.size()); [EOL]     types = Arrays.asList(fields); [EOL]     f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(3, types.size()); [EOL] }
public void testForFields_calBased_YMD_unmodifiable() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth() }; [EOL]     int[] values = new int[] { 2005, 6, 25 }; [EOL]     List types = Collections.unmodifiableList(new ArrayList(Arrays.asList(fields))); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(3, types.size()); [EOL]     types = Arrays.asList(fields); [EOL]     f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(3, types.size()); [EOL] }
public void testForFields_calBased_YMD_unmodifiable() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth() }; [EOL]     int[] values = new int[] { 2005, 6, 25 }; [EOL]     List types = Collections.unmodifiableList(new ArrayList(Arrays.asList(fields))); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(3, types.size()); [EOL]     types = Arrays.asList(fields); [EOL]     f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(3, types.size()); [EOL] }
public void testForFields_calBased_YMD_unmodifiable() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth() }; [EOL]     int[] values = new int[] { 2005, 6, 25 }; [EOL]     List types = Collections.unmodifiableList(new ArrayList(Arrays.asList(fields))); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(3, types.size()); [EOL]     types = Arrays.asList(fields); [EOL]     f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(3, types.size()); [EOL] }
public void testForFields_calBased_YMD_unmodifiable() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth() }; [EOL]     int[] values = new int[] { 2005, 6, 25 }; [EOL]     List types = Collections.unmodifiableList(new ArrayList(Arrays.asList(fields))); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(3, types.size()); [EOL]     types = Arrays.asList(fields); [EOL]     f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(3, types.size()); [EOL] }
public void testForFields_calBased_YMD_unmodifiable() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth() }; [EOL]     int[] values = new int[] { 2005, 6, 25 }; [EOL]     List types = Collections.unmodifiableList(new ArrayList(Arrays.asList(fields))); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(3, types.size()); [EOL]     types = Arrays.asList(fields); [EOL]     f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(3, types.size()); [EOL] }
public void testForFields_calBased_YMD_unmodifiable() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth() }; [EOL]     int[] values = new int[] { 2005, 6, 25 }; [EOL]     List types = Collections.unmodifiableList(new ArrayList(Arrays.asList(fields))); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(3, types.size()); [EOL]     types = Arrays.asList(fields); [EOL]     f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(3, types.size()); [EOL] }
public void test_dateParser() { [EOL]     DateTimeFormatter parser = ISODateTimeFormat.dateParser(); [EOL]     assertParse(parser, true, "2006-06-09"); [EOL]     assertParse(parser, true, "2006-W27-3"); [EOL]     assertParse(parser, true, "2006-123"); [EOL]     assertParse(parser, true, "2006-06-09T+02:00"); [EOL]     assertParse(parser, true, "2006-W27-3T+02:00"); [EOL]     assertParse(parser, true, "2006-123T+02:00"); [EOL]     assertParse(parser, false, "2006-06-09T10:20:30.040"); [EOL]     assertParse(parser, false, "2006-W27-3T10:20:30.040"); [EOL]     assertParse(parser, false, "2006-123T10:20:30.040"); [EOL]     assertParse(parser, false, "2006-06-09T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "2006-W27-3T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "2006-123T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "T10:20:30.040"); [EOL]     assertParse(parser, false, "T10.5"); [EOL]     assertParse(parser, false, "T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "T10.5+02:00"); [EOL]     assertParse(parser, false, "10:20:30.040"); [EOL]     assertParse(parser, false, "10.5"); [EOL]     assertParse(parser, false, "10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "10.5+02:00"); [EOL] }
public void test_localTimeParser() { [EOL]     DateTimeFormatter parser = ISODateTimeFormat.localTimeParser(); [EOL]     assertEquals(DateTimeZone.UTC, parser.getZone()); [EOL]     assertParse(parser, false, "2006-06-09"); [EOL]     assertParse(parser, false, "2006-W27-3"); [EOL]     assertParse(parser, false, "2006-123"); [EOL]     assertParse(parser, false, "2006-06-09T+02:00"); [EOL]     assertParse(parser, false, "2006-W27-3T+02:00"); [EOL]     assertParse(parser, false, "2006-123T+02:00"); [EOL]     assertParse(parser, false, "2006-06-09T10:20:30.040"); [EOL]     assertParse(parser, false, "2006-W27-3T10:20:30.040"); [EOL]     assertParse(parser, false, "2006-123T10:20:30.040"); [EOL]     assertParse(parser, false, "2006-06-09T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "2006-W27-3T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "2006-123T10:20:30.040+02:00"); [EOL]     assertParse(parser, true, "T10:20:30.040"); [EOL]     assertParse(parser, true, "T10.5"); [EOL]     assertParse(parser, false, "T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "T10.5+02:00"); [EOL]     assertParse(parser, true, "10:20:30.040"); [EOL]     assertParse(parser, true, "10.5"); [EOL]     assertParse(parser, false, "10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "10.5+02:00"); [EOL]     assertParse(parser, true, "00:00:10.512345678"); [EOL]     assertEquals(10512, parser.parseMillis("00:00:10.512345678")); [EOL] }
public void test_timeElementParser() { [EOL]     DateTimeFormatter parser = ISODateTimeFormat.timeElementParser(); [EOL]     assertParse(parser, false, "2006-06-09"); [EOL]     assertParse(parser, false, "2006-W27-3"); [EOL]     assertParse(parser, false, "2006-123"); [EOL]     assertParse(parser, false, "2006-06-09T+02:00"); [EOL]     assertParse(parser, false, "2006-W27-3T+02:00"); [EOL]     assertParse(parser, false, "2006-123T+02:00"); [EOL]     assertParse(parser, false, "2006-06-09T10:20:30.040"); [EOL]     assertParse(parser, false, "2006-W27-3T10:20:30.040"); [EOL]     assertParse(parser, false, "2006-123T10:20:30.040"); [EOL]     assertParse(parser, false, "2006-06-09T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "2006-W27-3T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "2006-123T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "T10:20:30.040"); [EOL]     assertParse(parser, false, "T10.5"); [EOL]     assertParse(parser, false, "T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "T10.5+02:00"); [EOL]     assertParse(parser, true, "10:20:30.040"); [EOL]     assertParse(parser, true, "10.5"); [EOL]     assertParse(parser, false, "10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "10.5+02:00"); [EOL]     assertParse(parser, true, "00:00:10.512345678"); [EOL]     assertEquals(10512, parser.parseMillis("00:00:10.512345678") + DateTimeZone.getDefault().getOffset(0L)); [EOL] }
public void test_dateOptionalTimeParser() { [EOL]     DateTimeFormatter parser = ISODateTimeFormat.dateOptionalTimeParser(); [EOL]     assertParse(parser, true, "2006-06-09"); [EOL]     assertParse(parser, true, "2006-W27-3"); [EOL]     assertParse(parser, true, "2006-123"); [EOL]     assertParse(parser, true, "2006-06-09T+02:00"); [EOL]     assertParse(parser, true, "2006-W27-3T+02:00"); [EOL]     assertParse(parser, true, "2006-123T+02:00"); [EOL]     assertParse(parser, true, "2006-06-09T10:20:30.040"); [EOL]     assertParse(parser, true, "2006-W27-3T10:20:30.040"); [EOL]     assertParse(parser, true, "2006-123T10:20:30.040"); [EOL]     assertParse(parser, true, "2006-06-09T10:20:30.040+02:00"); [EOL]     assertParse(parser, true, "2006-W27-3T10:20:30.040+02:00"); [EOL]     assertParse(parser, true, "2006-123T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "T10:20:30.040"); [EOL]     assertParse(parser, false, "T10.5"); [EOL]     assertParse(parser, false, "T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "T10.5+02:00"); [EOL]     assertParse(parser, false, "10:20:30.040"); [EOL]     assertParse(parser, false, "10.5"); [EOL]     assertParse(parser, false, "10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "10.5+02:00"); [EOL] }
public void test_tTime() { [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL]     DateTimeFormatter parser = ISODateTimeFormat.tTime(); [EOL]     assertParse(parser, "T10:20:30.400999999Z", new DateTime(1970, 1, 1, 10, 20, 30, 400)); [EOL]     assertParse(parser, "T10:20:30.400Z", new DateTime(1970, 1, 1, 10, 20, 30, 400)); [EOL]     assertParse(parser, "T10:20:30.40Z", new DateTime(1970, 1, 1, 10, 20, 30, 400)); [EOL]     assertParse(parser, "T10:20:30.4Z", new DateTime(1970, 1, 1, 10, 20, 30, 400)); [EOL]     assertParse(parser, "T5:6:7.8Z", new DateTime(1970, 1, 1, 5, 6, 7, 800)); [EOL]     assertParse(parser, false, "T10:20.400Z"); [EOL]     assertParse(parser, false, "T102.400Z"); [EOL]     assertParse(parser, false, "T10.400Z"); [EOL]     assertParse(parser, false, "T1.400Z"); [EOL] }
public void test_ordinalDate() { [EOL]     DateTimeFormatter parser = ISODateTimeFormat.ordinalDate(); [EOL]     assertParse(parser, "2006-123", new DateTime(2006, 1, 1, 0, 0, 0, 0).withDayOfYear(123)); [EOL]     assertParse(parser, "2006-12", new DateTime(2006, 1, 1, 0, 0, 0, 0).withDayOfYear(12)); [EOL]     assertParse(parser, "2006-1", new DateTime(2006, 1, 1, 0, 0, 0, 0).withDayOfYear(1)); [EOL]     assertParse(parser, false, "2006-"); [EOL]     assertParse(parser, false, "2006"); [EOL] }
public void test_basicTimeNoMillis() { [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL]     DateTimeFormatter parser = ISODateTimeFormat.basicTimeNoMillis(); [EOL]     assertParse(parser, "102030Z", new DateTime(1970, 1, 1, 10, 20, 30, 0)); [EOL]     assertParse(parser, false, "10203Z"); [EOL]     assertParse(parser, false, "1020Z"); [EOL]     assertParse(parser, false, "102Z"); [EOL]     assertParse(parser, false, "10Z"); [EOL]     assertParse(parser, false, "1Z"); [EOL] }
public void testFormat_basicDateTimeNoMillis() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("20040609T102030Z", ISODateTimeFormat.basicDateTimeNoMillis().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("20040609T112030+0100", ISODateTimeFormat.basicDateTimeNoMillis().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("20040609T122030+0200", ISODateTimeFormat.basicDateTimeNoMillis().print(dt)); [EOL] }
public void test_basicOrdinalDate() { [EOL]     DateTimeFormatter parser = ISODateTimeFormat.basicOrdinalDate(); [EOL]     assertParse(parser, "2006123", new DateTime(2006, 1, 1, 0, 0, 0, 0).withDayOfYear(123)); [EOL]     assertParse(parser, false, "200612"); [EOL]     assertParse(parser, false, "20061"); [EOL]     assertParse(parser, false, "2006"); [EOL] }
public void testFormat_basicWeekDateTimeNoMillis() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("2004W243T102030Z", ISODateTimeFormat.basicWeekDateTimeNoMillis().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("2004W243T112030+0100", ISODateTimeFormat.basicWeekDateTimeNoMillis().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("2004W243T122030+0200", ISODateTimeFormat.basicWeekDateTimeNoMillis().print(dt)); [EOL] }
public void testFormat_year() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("2004", ISODateTimeFormat.year().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("2004", ISODateTimeFormat.year().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("2004", ISODateTimeFormat.year().print(dt)); [EOL] }
public void testFormat_yearMonth() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("2004-06", ISODateTimeFormat.yearMonth().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("2004-06", ISODateTimeFormat.yearMonth().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("2004-06", ISODateTimeFormat.yearMonth().print(dt)); [EOL] }
public void testIsLessThan() { [EOL]     assertEquals(false, Minutes.THREE.isLessThan(Minutes.TWO)); [EOL]     assertEquals(false, Minutes.THREE.isLessThan(Minutes.THREE)); [EOL]     assertEquals(true, Minutes.TWO.isLessThan(Minutes.THREE)); [EOL]     assertEquals(false, Minutes.ONE.isLessThan(null)); [EOL]     assertEquals(true, Minutes.minutes(-1).isLessThan(null)); [EOL] }
public void testIsLessThan() { [EOL]     assertEquals(false, Minutes.THREE.isLessThan(Minutes.TWO)); [EOL]     assertEquals(false, Minutes.THREE.isLessThan(Minutes.THREE)); [EOL]     assertEquals(true, Minutes.TWO.isLessThan(Minutes.THREE)); [EOL]     assertEquals(false, Minutes.ONE.isLessThan(null)); [EOL]     assertEquals(true, Minutes.minutes(-1).isLessThan(null)); [EOL] }
public void testIsLessThan() { [EOL]     assertEquals(false, Minutes.THREE.isLessThan(Minutes.TWO)); [EOL]     assertEquals(false, Minutes.THREE.isLessThan(Minutes.THREE)); [EOL]     assertEquals(true, Minutes.TWO.isLessThan(Minutes.THREE)); [EOL]     assertEquals(false, Minutes.ONE.isLessThan(null)); [EOL]     assertEquals(true, Minutes.minutes(-1).isLessThan(null)); [EOL] }
public void testIsLessThan() { [EOL]     assertEquals(false, Minutes.THREE.isLessThan(Minutes.TWO)); [EOL]     assertEquals(false, Minutes.THREE.isLessThan(Minutes.THREE)); [EOL]     assertEquals(true, Minutes.TWO.isLessThan(Minutes.THREE)); [EOL]     assertEquals(false, Minutes.ONE.isLessThan(null)); [EOL]     assertEquals(true, Minutes.minutes(-1).isLessThan(null)); [EOL] }
public void testIsLessThan() { [EOL]     assertEquals(false, Minutes.THREE.isLessThan(Minutes.TWO)); [EOL]     assertEquals(false, Minutes.THREE.isLessThan(Minutes.THREE)); [EOL]     assertEquals(true, Minutes.TWO.isLessThan(Minutes.THREE)); [EOL]     assertEquals(false, Minutes.ONE.isLessThan(null)); [EOL]     assertEquals(true, Minutes.minutes(-1).isLessThan(null)); [EOL] }
public void testIsLessThan() { [EOL]     assertEquals(false, Minutes.THREE.isLessThan(Minutes.TWO)); [EOL]     assertEquals(false, Minutes.THREE.isLessThan(Minutes.THREE)); [EOL]     assertEquals(true, Minutes.TWO.isLessThan(Minutes.THREE)); [EOL]     assertEquals(false, Minutes.ONE.isLessThan(null)); [EOL]     assertEquals(true, Minutes.minutes(-1).isLessThan(null)); [EOL] }
public void testIsLessThan() { [EOL]     assertEquals(false, Minutes.THREE.isLessThan(Minutes.TWO)); [EOL]     assertEquals(false, Minutes.THREE.isLessThan(Minutes.THREE)); [EOL]     assertEquals(true, Minutes.TWO.isLessThan(Minutes.THREE)); [EOL]     assertEquals(false, Minutes.ONE.isLessThan(null)); [EOL]     assertEquals(true, Minutes.minutes(-1).isLessThan(null)); [EOL] }
public void testFactory_minutesBetween_RInstant() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 3, 0, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 6, 9, 12, 6, 0, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 6, 9, 12, 9, 0, 0, PARIS); [EOL]     assertEquals(3, Minutes.minutesBetween(start, end1).getMinutes()); [EOL]     assertEquals(0, Minutes.minutesBetween(start, start).getMinutes()); [EOL]     assertEquals(0, Minutes.minutesBetween(end1, end1).getMinutes()); [EOL]     assertEquals(-3, Minutes.minutesBetween(end1, start).getMinutes()); [EOL]     assertEquals(6, Minutes.minutesBetween(start, end2).getMinutes()); [EOL] }
public void testFactory_minutesBetween_RInstant() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 3, 0, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 6, 9, 12, 6, 0, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 6, 9, 12, 9, 0, 0, PARIS); [EOL]     assertEquals(3, Minutes.minutesBetween(start, end1).getMinutes()); [EOL]     assertEquals(0, Minutes.minutesBetween(start, start).getMinutes()); [EOL]     assertEquals(0, Minutes.minutesBetween(end1, end1).getMinutes()); [EOL]     assertEquals(-3, Minutes.minutesBetween(end1, start).getMinutes()); [EOL]     assertEquals(6, Minutes.minutesBetween(start, end2).getMinutes()); [EOL] }
public void testIsLessThan() { [EOL]     assertEquals(false, Minutes.THREE.isLessThan(Minutes.TWO)); [EOL]     assertEquals(false, Minutes.THREE.isLessThan(Minutes.THREE)); [EOL]     assertEquals(true, Minutes.TWO.isLessThan(Minutes.THREE)); [EOL]     assertEquals(false, Minutes.ONE.isLessThan(null)); [EOL]     assertEquals(true, Minutes.minutes(-1).isLessThan(null)); [EOL] }
public void testToStandardSeconds() { [EOL]     Minutes test = Minutes.minutes(3); [EOL]     Seconds expected = Seconds.seconds(3 * 60); [EOL]     assertEquals(expected, test.toStandardSeconds()); [EOL]     try { [EOL]         Minutes.MAX_VALUE.toStandardSeconds(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testToStandardSeconds() { [EOL]     Minutes test = Minutes.minutes(3); [EOL]     Seconds expected = Seconds.seconds(3 * 60); [EOL]     assertEquals(expected, test.toStandardSeconds()); [EOL]     try { [EOL]         Minutes.MAX_VALUE.toStandardSeconds(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testToStandardSeconds() { [EOL]     Minutes test = Minutes.minutes(3); [EOL]     Seconds expected = Seconds.seconds(3 * 60); [EOL]     assertEquals(expected, test.toStandardSeconds()); [EOL]     try { [EOL]         Minutes.MAX_VALUE.toStandardSeconds(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testIsLessThan() { [EOL]     assertEquals(false, Minutes.THREE.isLessThan(Minutes.TWO)); [EOL]     assertEquals(false, Minutes.THREE.isLessThan(Minutes.THREE)); [EOL]     assertEquals(true, Minutes.TWO.isLessThan(Minutes.THREE)); [EOL]     assertEquals(false, Minutes.ONE.isLessThan(null)); [EOL]     assertEquals(true, Minutes.minutes(-1).isLessThan(null)); [EOL] }
public void testIsLessThan() { [EOL]     assertEquals(false, Minutes.THREE.isLessThan(Minutes.TWO)); [EOL]     assertEquals(false, Minutes.THREE.isLessThan(Minutes.THREE)); [EOL]     assertEquals(true, Minutes.TWO.isLessThan(Minutes.THREE)); [EOL]     assertEquals(false, Minutes.ONE.isLessThan(null)); [EOL]     assertEquals(true, Minutes.minutes(-1).isLessThan(null)); [EOL] }
public void testIsLessThan() { [EOL]     assertEquals(false, Minutes.THREE.isLessThan(Minutes.TWO)); [EOL]     assertEquals(false, Minutes.THREE.isLessThan(Minutes.THREE)); [EOL]     assertEquals(true, Minutes.TWO.isLessThan(Minutes.THREE)); [EOL]     assertEquals(false, Minutes.ONE.isLessThan(null)); [EOL]     assertEquals(true, Minutes.minutes(-1).isLessThan(null)); [EOL] }
public void testIsLessThan() { [EOL]     assertEquals(false, Minutes.THREE.isLessThan(Minutes.TWO)); [EOL]     assertEquals(false, Minutes.THREE.isLessThan(Minutes.THREE)); [EOL]     assertEquals(true, Minutes.TWO.isLessThan(Minutes.THREE)); [EOL]     assertEquals(false, Minutes.ONE.isLessThan(null)); [EOL]     assertEquals(true, Minutes.minutes(-1).isLessThan(null)); [EOL] }
public void testIsLessThan() { [EOL]     assertEquals(false, Minutes.THREE.isLessThan(Minutes.TWO)); [EOL]     assertEquals(false, Minutes.THREE.isLessThan(Minutes.THREE)); [EOL]     assertEquals(true, Minutes.TWO.isLessThan(Minutes.THREE)); [EOL]     assertEquals(false, Minutes.ONE.isLessThan(null)); [EOL]     assertEquals(true, Minutes.minutes(-1).isLessThan(null)); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void test_2400_fromDay() { [EOL]     StringTokenizer st = new StringTokenizer("Apr Sun>=1  24:00"); [EOL]     DateTimeOfYear test = new DateTimeOfYear(st); [EOL]     assertEquals(4, test.iMonthOfYear); [EOL]     assertEquals(2, test.iDayOfMonth); [EOL]     assertEquals(1, test.iDayOfWeek); [EOL]     assertEquals(0, test.iMillisOfDay); [EOL]     assertEquals(true, test.iAdvanceDayOfWeek); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] }
public void testFactory_Zone() { [EOL]     assertEquals(TOKYO, GregorianChronology.getInstance(TOKYO).getZone()); [EOL]     assertEquals(PARIS, GregorianChronology.getInstance(PARIS).getZone()); [EOL]     assertEquals(LONDON, GregorianChronology.getInstance(null).getZone()); [EOL]     assertSame(GregorianChronology.class, GregorianChronology.getInstance(TOKYO).getClass()); [EOL] }
public void testFactory_Zone() { [EOL]     assertEquals(TOKYO, GregorianChronology.getInstance(TOKYO).getZone()); [EOL]     assertEquals(PARIS, GregorianChronology.getInstance(PARIS).getZone()); [EOL]     assertEquals(LONDON, GregorianChronology.getInstance(null).getZone()); [EOL]     assertSame(GregorianChronology.class, GregorianChronology.getInstance(TOKYO).getClass()); [EOL] }
public void testFactory_Zone() { [EOL]     assertEquals(TOKYO, GregorianChronology.getInstance(TOKYO).getZone()); [EOL]     assertEquals(PARIS, GregorianChronology.getInstance(PARIS).getZone()); [EOL]     assertEquals(LONDON, GregorianChronology.getInstance(null).getZone()); [EOL]     assertSame(GregorianChronology.class, GregorianChronology.getInstance(TOKYO).getClass()); [EOL] }
public void testFactory_Zone() { [EOL]     assertEquals(TOKYO, GregorianChronology.getInstance(TOKYO).getZone()); [EOL]     assertEquals(PARIS, GregorianChronology.getInstance(PARIS).getZone()); [EOL]     assertEquals(LONDON, GregorianChronology.getInstance(null).getZone()); [EOL]     assertSame(GregorianChronology.class, GregorianChronology.getInstance(TOKYO).getClass()); [EOL] }
public void testFactory_Zone_int() { [EOL]     GregorianChronology chrono = GregorianChronology.getInstance(TOKYO, 2); [EOL]     assertEquals(TOKYO, chrono.getZone()); [EOL]     assertEquals(2, chrono.getMinimumDaysInFirstWeek()); [EOL]     try { [EOL]         GregorianChronology.getInstance(TOKYO, 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         GregorianChronology.getInstance(TOKYO, 8); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testSerializedGregorianChronology() throws Exception { [EOL]     GregorianChronology test = GregorianChronology.getInstance(PARIS); [EOL]     loadAndCompare(test, "GregorianChronology", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGregorianChronology() throws Exception { [EOL]     GregorianChronology test = GregorianChronology.getInstance(PARIS); [EOL]     loadAndCompare(test, "GregorianChronology", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGregorianChronology() throws Exception { [EOL]     GregorianChronology test = GregorianChronology.getInstance(PARIS); [EOL]     loadAndCompare(test, "GregorianChronology", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGregorianChronology() throws Exception { [EOL]     GregorianChronology test = GregorianChronology.getInstance(PARIS); [EOL]     loadAndCompare(test, "GregorianChronology", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGregorianChronology() throws Exception { [EOL]     GregorianChronology test = GregorianChronology.getInstance(PARIS); [EOL]     loadAndCompare(test, "GregorianChronology", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGregorianChronology() throws Exception { [EOL]     GregorianChronology test = GregorianChronology.getInstance(PARIS); [EOL]     loadAndCompare(test, "GregorianChronology", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testConstructor() throws Throwable { [EOL]     DateTime test = new DateTime(); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] }
public void testWithZoneRetainFields_DateTimeZone() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateMidnight result = test.withZoneRetainFields(PARIS); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_PARIS, result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertEquals(TEST_TIME1_PARIS, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_LONDON, result.getMillis()); [EOL]     assertEquals(GREGORIAN_DEFAULT, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, new MockNullZoneChronology()); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL] }
public void testWithZoneRetainFields_DateTimeZone() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateMidnight result = test.withZoneRetainFields(PARIS); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_PARIS, result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertEquals(TEST_TIME1_PARIS, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_LONDON, result.getMillis()); [EOL]     assertEquals(GREGORIAN_DEFAULT, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, new MockNullZoneChronology()); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL] }
public void testWithZoneRetainFields_DateTimeZone() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateMidnight result = test.withZoneRetainFields(PARIS); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_PARIS, result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertEquals(TEST_TIME1_PARIS, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_LONDON, result.getMillis()); [EOL]     assertEquals(GREGORIAN_DEFAULT, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, new MockNullZoneChronology()); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL] }
public void testWithZoneRetainFields_DateTimeZone() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateMidnight result = test.withZoneRetainFields(PARIS); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_PARIS, result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertEquals(TEST_TIME1_PARIS, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_LONDON, result.getMillis()); [EOL]     assertEquals(GREGORIAN_DEFAULT, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, new MockNullZoneChronology()); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL] }
public void testWithZoneRetainFields_DateTimeZone() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateMidnight result = test.withZoneRetainFields(PARIS); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_PARIS, result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertEquals(TEST_TIME1_PARIS, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_LONDON, result.getMillis()); [EOL]     assertEquals(GREGORIAN_DEFAULT, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, new MockNullZoneChronology()); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL] }
public void testWithZoneRetainFields_DateTimeZone() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateMidnight result = test.withZoneRetainFields(PARIS); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_PARIS, result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertEquals(TEST_TIME1_PARIS, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_LONDON, result.getMillis()); [EOL]     assertEquals(GREGORIAN_DEFAULT, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, new MockNullZoneChronology()); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL] }
public void testWithZoneRetainFields_DateTimeZone() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateMidnight result = test.withZoneRetainFields(PARIS); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_PARIS, result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertEquals(TEST_TIME1_PARIS, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_LONDON, result.getMillis()); [EOL]     assertEquals(GREGORIAN_DEFAULT, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, new MockNullZoneChronology()); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL] }
public void testFormat_basicDateTimeNoMillis() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("20040609T102030Z", ISODateTimeFormat.basicDateTimeNoMillis().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("20040609T112030+0100", ISODateTimeFormat.basicDateTimeNoMillis().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("20040609T122030+0200", ISODateTimeFormat.basicDateTimeNoMillis().print(dt)); [EOL] }
public void testToTimeZone2() throws Exception { [EOL]     FixedDateTimeZone zone = new FixedDateTimeZone("A", "B", 1, 5); [EOL]     java.util.TimeZone tz = zone.toTimeZone(); [EOL]     assertEquals(1, tz.getRawOffset()); [EOL]     assertEquals(1, getOffset(tz, 1167638400000L)); [EOL]     assertEquals(1, getOffset(tz, 1185951600000L)); [EOL] }
public void testToTimeZone2() throws Exception { [EOL]     FixedDateTimeZone zone = new FixedDateTimeZone("A", "B", 1, 5); [EOL]     java.util.TimeZone tz = zone.toTimeZone(); [EOL]     assertEquals(1, tz.getRawOffset()); [EOL]     assertEquals(1, getOffset(tz, 1167638400000L)); [EOL]     assertEquals(1, getOffset(tz, 1185951600000L)); [EOL] }
public void testEquals() throws Exception { [EOL]     FixedDateTimeZone zone1 = new FixedDateTimeZone("A", "B", 1, 5); [EOL]     FixedDateTimeZone zone1b = new FixedDateTimeZone("A", "B", 1, 5); [EOL]     FixedDateTimeZone zone2 = new FixedDateTimeZone("A", "C", 1, 5); [EOL]     FixedDateTimeZone zone3 = new FixedDateTimeZone("A", "B", 2, 5); [EOL]     FixedDateTimeZone zone4 = new FixedDateTimeZone("A", "B", 1, 6); [EOL]     assertEquals(true, zone1.equals(zone1)); [EOL]     assertEquals(true, zone1.equals(zone1b)); [EOL]     assertEquals(true, zone1.equals(zone2)); [EOL]     assertEquals(false, zone1.equals(zone3)); [EOL]     assertEquals(false, zone1.equals(zone4)); [EOL] }
public void testEquals() throws Exception { [EOL]     FixedDateTimeZone zone1 = new FixedDateTimeZone("A", "B", 1, 5); [EOL]     FixedDateTimeZone zone1b = new FixedDateTimeZone("A", "B", 1, 5); [EOL]     FixedDateTimeZone zone2 = new FixedDateTimeZone("A", "C", 1, 5); [EOL]     FixedDateTimeZone zone3 = new FixedDateTimeZone("A", "B", 2, 5); [EOL]     FixedDateTimeZone zone4 = new FixedDateTimeZone("A", "B", 1, 6); [EOL]     assertEquals(true, zone1.equals(zone1)); [EOL]     assertEquals(true, zone1.equals(zone1b)); [EOL]     assertEquals(true, zone1.equals(zone2)); [EOL]     assertEquals(false, zone1.equals(zone3)); [EOL]     assertEquals(false, zone1.equals(zone4)); [EOL] }
public void testEquals() throws Exception { [EOL]     FixedDateTimeZone zone1 = new FixedDateTimeZone("A", "B", 1, 5); [EOL]     FixedDateTimeZone zone1b = new FixedDateTimeZone("A", "B", 1, 5); [EOL]     FixedDateTimeZone zone2 = new FixedDateTimeZone("A", "C", 1, 5); [EOL]     FixedDateTimeZone zone3 = new FixedDateTimeZone("A", "B", 2, 5); [EOL]     FixedDateTimeZone zone4 = new FixedDateTimeZone("A", "B", 1, 6); [EOL]     assertEquals(true, zone1.equals(zone1)); [EOL]     assertEquals(true, zone1.equals(zone1b)); [EOL]     assertEquals(true, zone1.equals(zone2)); [EOL]     assertEquals(false, zone1.equals(zone3)); [EOL]     assertEquals(false, zone1.equals(zone4)); [EOL] }
public void testEquals() throws Exception { [EOL]     FixedDateTimeZone zone1 = new FixedDateTimeZone("A", "B", 1, 5); [EOL]     FixedDateTimeZone zone1b = new FixedDateTimeZone("A", "B", 1, 5); [EOL]     FixedDateTimeZone zone2 = new FixedDateTimeZone("A", "C", 1, 5); [EOL]     FixedDateTimeZone zone3 = new FixedDateTimeZone("A", "B", 2, 5); [EOL]     FixedDateTimeZone zone4 = new FixedDateTimeZone("A", "B", 1, 6); [EOL]     assertEquals(true, zone1.equals(zone1)); [EOL]     assertEquals(true, zone1.equals(zone1b)); [EOL]     assertEquals(true, zone1.equals(zone2)); [EOL]     assertEquals(false, zone1.equals(zone3)); [EOL]     assertEquals(false, zone1.equals(zone4)); [EOL] }
public void testEquals() throws Exception { [EOL]     FixedDateTimeZone zone1 = new FixedDateTimeZone("A", "B", 1, 5); [EOL]     FixedDateTimeZone zone1b = new FixedDateTimeZone("A", "B", 1, 5); [EOL]     FixedDateTimeZone zone2 = new FixedDateTimeZone("A", "C", 1, 5); [EOL]     FixedDateTimeZone zone3 = new FixedDateTimeZone("A", "B", 2, 5); [EOL]     FixedDateTimeZone zone4 = new FixedDateTimeZone("A", "B", 1, 6); [EOL]     assertEquals(true, zone1.equals(zone1)); [EOL]     assertEquals(true, zone1.equals(zone1b)); [EOL]     assertEquals(true, zone1.equals(zone2)); [EOL]     assertEquals(false, zone1.equals(zone3)); [EOL]     assertEquals(false, zone1.equals(zone4)); [EOL] }
public void testEquals() throws Exception { [EOL]     FixedDateTimeZone zone1 = new FixedDateTimeZone("A", "B", 1, 5); [EOL]     FixedDateTimeZone zone1b = new FixedDateTimeZone("A", "B", 1, 5); [EOL]     FixedDateTimeZone zone2 = new FixedDateTimeZone("A", "C", 1, 5); [EOL]     FixedDateTimeZone zone3 = new FixedDateTimeZone("A", "B", 2, 5); [EOL]     FixedDateTimeZone zone4 = new FixedDateTimeZone("A", "B", 1, 6); [EOL]     assertEquals(true, zone1.equals(zone1)); [EOL]     assertEquals(true, zone1.equals(zone1b)); [EOL]     assertEquals(true, zone1.equals(zone2)); [EOL]     assertEquals(false, zone1.equals(zone3)); [EOL]     assertEquals(false, zone1.equals(zone4)); [EOL] }
public void testEquals() throws Exception { [EOL]     FixedDateTimeZone zone1 = new FixedDateTimeZone("A", "B", 1, 5); [EOL]     FixedDateTimeZone zone1b = new FixedDateTimeZone("A", "B", 1, 5); [EOL]     FixedDateTimeZone zone2 = new FixedDateTimeZone("A", "C", 1, 5); [EOL]     FixedDateTimeZone zone3 = new FixedDateTimeZone("A", "B", 2, 5); [EOL]     FixedDateTimeZone zone4 = new FixedDateTimeZone("A", "B", 1, 6); [EOL]     assertEquals(true, zone1.equals(zone1)); [EOL]     assertEquals(true, zone1.equals(zone1b)); [EOL]     assertEquals(true, zone1.equals(zone2)); [EOL]     assertEquals(false, zone1.equals(zone3)); [EOL]     assertEquals(false, zone1.equals(zone4)); [EOL] }
public void testConstructor_badconverterObject() throws Throwable { [EOL]     try { [EOL]         ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE); [EOL]         Instant test = new Instant(new Integer(0)); [EOL]         assertEquals(ISOChronology.getInstanceUTC(), test.getChronology()); [EOL]         assertEquals(0L, test.getMillis()); [EOL]     } finally { [EOL]         ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE); [EOL]     } [EOL] }
public void testPropertyCompareToDay() { [EOL]     LocalDateTime test1 = new LocalDateTime(TEST_TIME1); [EOL]     LocalDateTime test2 = new LocalDateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.dayOfMonth().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.dayOfMonth().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.dayOfMonth().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.dayOfMonth().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyGetDifferenceMonthOfYear() { [EOL]     DateMidnight test1 = new DateMidnight(2004, 6, 9); [EOL]     DateMidnight test2 = new DateMidnight(2004, 8, 9); [EOL]     assertEquals(-2, test1.monthOfYear().getDifference(test2)); [EOL]     assertEquals(2, test2.monthOfYear().getDifference(test1)); [EOL]     assertEquals(-2L, test1.monthOfYear().getDifferenceAsLong(test2)); [EOL]     assertEquals(2L, test2.monthOfYear().getDifferenceAsLong(test1)); [EOL] }
public void testPropertyGetDifferenceMonthOfYear() { [EOL]     DateMidnight test1 = new DateMidnight(2004, 6, 9); [EOL]     DateMidnight test2 = new DateMidnight(2004, 8, 9); [EOL]     assertEquals(-2, test1.monthOfYear().getDifference(test2)); [EOL]     assertEquals(2, test2.monthOfYear().getDifference(test1)); [EOL]     assertEquals(-2L, test1.monthOfYear().getDifferenceAsLong(test2)); [EOL]     assertEquals(2L, test2.monthOfYear().getDifferenceAsLong(test1)); [EOL] }
public void testPropertyGetDifferenceMonthOfYear() { [EOL]     DateMidnight test1 = new DateMidnight(2004, 6, 9); [EOL]     DateMidnight test2 = new DateMidnight(2004, 8, 9); [EOL]     assertEquals(-2, test1.monthOfYear().getDifference(test2)); [EOL]     assertEquals(2, test2.monthOfYear().getDifference(test1)); [EOL]     assertEquals(-2L, test1.monthOfYear().getDifferenceAsLong(test2)); [EOL]     assertEquals(2L, test2.monthOfYear().getDifferenceAsLong(test1)); [EOL] }
public void testPropertyGetDifferenceMonthOfYear() { [EOL]     DateMidnight test1 = new DateMidnight(2004, 6, 9); [EOL]     DateMidnight test2 = new DateMidnight(2004, 8, 9); [EOL]     assertEquals(-2, test1.monthOfYear().getDifference(test2)); [EOL]     assertEquals(2, test2.monthOfYear().getDifference(test1)); [EOL]     assertEquals(-2L, test1.monthOfYear().getDifferenceAsLong(test2)); [EOL]     assertEquals(2L, test2.monthOfYear().getDifferenceAsLong(test1)); [EOL] }
public void testPropertyToIntervalYearOfCentury() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     Interval testInterval = test.yearOfCentury().toInterval(); [EOL]     assertEquals(new DateTime(2004, 1, 1, 0, 0, 0, 0), testInterval.getStart()); [EOL]     assertEquals(new DateTime(2005, 1, 1, 0, 0, 0, 0), testInterval.getEnd()); [EOL] }
public void testPropertyCompareToDay() { [EOL]     LocalDateTime test1 = new LocalDateTime(TEST_TIME1); [EOL]     LocalDateTime test2 = new LocalDateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.dayOfMonth().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.dayOfMonth().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.dayOfMonth().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.dayOfMonth().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToDay() { [EOL]     LocalDateTime test1 = new LocalDateTime(TEST_TIME1); [EOL]     LocalDateTime test2 = new LocalDateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.dayOfMonth().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.dayOfMonth().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.dayOfMonth().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.dayOfMonth().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToDay() { [EOL]     LocalDateTime test1 = new LocalDateTime(TEST_TIME1); [EOL]     LocalDateTime test2 = new LocalDateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.dayOfMonth().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.dayOfMonth().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.dayOfMonth().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.dayOfMonth().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToDay() { [EOL]     LocalDateTime test1 = new LocalDateTime(TEST_TIME1); [EOL]     LocalDateTime test2 = new LocalDateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.dayOfMonth().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.dayOfMonth().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.dayOfMonth().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.dayOfMonth().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToDay() { [EOL]     LocalDateTime test1 = new LocalDateTime(TEST_TIME1); [EOL]     LocalDateTime test2 = new LocalDateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.dayOfMonth().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.dayOfMonth().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.dayOfMonth().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.dayOfMonth().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToDay() { [EOL]     LocalDateTime test1 = new LocalDateTime(TEST_TIME1); [EOL]     LocalDateTime test2 = new LocalDateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.dayOfMonth().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.dayOfMonth().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.dayOfMonth().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.dayOfMonth().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToDay() { [EOL]     LocalDateTime test1 = new LocalDateTime(TEST_TIME1); [EOL]     LocalDateTime test2 = new LocalDateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.dayOfMonth().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.dayOfMonth().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.dayOfMonth().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.dayOfMonth().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToDay() { [EOL]     LocalDateTime test1 = new LocalDateTime(TEST_TIME1); [EOL]     LocalDateTime test2 = new LocalDateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.dayOfMonth().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.dayOfMonth().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.dayOfMonth().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.dayOfMonth().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyEquals() { [EOL]     LocalDate test1 = new LocalDate(2005, 11, 8); [EOL]     LocalDate test2 = new LocalDate(2005, 11, 9); [EOL]     LocalDate test3 = new LocalDate(2005, 11, 8, CopticChronology.getInstanceUTC()); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test1.year())); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test1.monthOfYear())); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test2.year())); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test2.monthOfYear())); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(false, test1.monthOfYear().equals(test1.year())); [EOL]     assertEquals(true, test1.monthOfYear().equals(test1.monthOfYear())); [EOL]     assertEquals(false, test1.monthOfYear().equals(test1.dayOfMonth())); [EOL]     assertEquals(false, test1.monthOfYear().equals(test2.year())); [EOL]     assertEquals(true, test1.monthOfYear().equals(test2.monthOfYear())); [EOL]     assertEquals(false, test1.monthOfYear().equals(test2.dayOfMonth())); [EOL]     assertEquals(false, test1.dayOfMonth().equals(null)); [EOL]     assertEquals(false, test1.dayOfMonth().equals("any")); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test3.dayOfMonth())); [EOL] }
public void testPropertyEquals() { [EOL]     LocalDate test1 = new LocalDate(2005, 11, 8); [EOL]     LocalDate test2 = new LocalDate(2005, 11, 9); [EOL]     LocalDate test3 = new LocalDate(2005, 11, 8, CopticChronology.getInstanceUTC()); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test1.year())); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test1.monthOfYear())); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test2.year())); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test2.monthOfYear())); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(false, test1.monthOfYear().equals(test1.year())); [EOL]     assertEquals(true, test1.monthOfYear().equals(test1.monthOfYear())); [EOL]     assertEquals(false, test1.monthOfYear().equals(test1.dayOfMonth())); [EOL]     assertEquals(false, test1.monthOfYear().equals(test2.year())); [EOL]     assertEquals(true, test1.monthOfYear().equals(test2.monthOfYear())); [EOL]     assertEquals(false, test1.monthOfYear().equals(test2.dayOfMonth())); [EOL]     assertEquals(false, test1.dayOfMonth().equals(null)); [EOL]     assertEquals(false, test1.dayOfMonth().equals("any")); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test3.dayOfMonth())); [EOL] }
public void testPropertyEquals() { [EOL]     LocalDate test1 = new LocalDate(2005, 11, 8); [EOL]     LocalDate test2 = new LocalDate(2005, 11, 9); [EOL]     LocalDate test3 = new LocalDate(2005, 11, 8, CopticChronology.getInstanceUTC()); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test1.year())); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test1.monthOfYear())); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test2.year())); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test2.monthOfYear())); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(false, test1.monthOfYear().equals(test1.year())); [EOL]     assertEquals(true, test1.monthOfYear().equals(test1.monthOfYear())); [EOL]     assertEquals(false, test1.monthOfYear().equals(test1.dayOfMonth())); [EOL]     assertEquals(false, test1.monthOfYear().equals(test2.year())); [EOL]     assertEquals(true, test1.monthOfYear().equals(test2.monthOfYear())); [EOL]     assertEquals(false, test1.monthOfYear().equals(test2.dayOfMonth())); [EOL]     assertEquals(false, test1.dayOfMonth().equals(null)); [EOL]     assertEquals(false, test1.dayOfMonth().equals("any")); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test3.dayOfMonth())); [EOL] }
public void testPropertyEquals() { [EOL]     LocalDate test1 = new LocalDate(2005, 11, 8); [EOL]     LocalDate test2 = new LocalDate(2005, 11, 9); [EOL]     LocalDate test3 = new LocalDate(2005, 11, 8, CopticChronology.getInstanceUTC()); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test1.year())); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test1.monthOfYear())); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test2.year())); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test2.monthOfYear())); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(false, test1.monthOfYear().equals(test1.year())); [EOL]     assertEquals(true, test1.monthOfYear().equals(test1.monthOfYear())); [EOL]     assertEquals(false, test1.monthOfYear().equals(test1.dayOfMonth())); [EOL]     assertEquals(false, test1.monthOfYear().equals(test2.year())); [EOL]     assertEquals(true, test1.monthOfYear().equals(test2.monthOfYear())); [EOL]     assertEquals(false, test1.monthOfYear().equals(test2.dayOfMonth())); [EOL]     assertEquals(false, test1.dayOfMonth().equals(null)); [EOL]     assertEquals(false, test1.dayOfMonth().equals("any")); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test3.dayOfMonth())); [EOL] }
public void testPropertyEquals() { [EOL]     LocalDate test1 = new LocalDate(2005, 11, 8); [EOL]     LocalDate test2 = new LocalDate(2005, 11, 9); [EOL]     LocalDate test3 = new LocalDate(2005, 11, 8, CopticChronology.getInstanceUTC()); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test1.year())); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test1.monthOfYear())); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test2.year())); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test2.monthOfYear())); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(false, test1.monthOfYear().equals(test1.year())); [EOL]     assertEquals(true, test1.monthOfYear().equals(test1.monthOfYear())); [EOL]     assertEquals(false, test1.monthOfYear().equals(test1.dayOfMonth())); [EOL]     assertEquals(false, test1.monthOfYear().equals(test2.year())); [EOL]     assertEquals(true, test1.monthOfYear().equals(test2.monthOfYear())); [EOL]     assertEquals(false, test1.monthOfYear().equals(test2.dayOfMonth())); [EOL]     assertEquals(false, test1.dayOfMonth().equals(null)); [EOL]     assertEquals(false, test1.dayOfMonth().equals("any")); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test3.dayOfMonth())); [EOL] }
public void testPropertyEquals() { [EOL]     LocalDate test1 = new LocalDate(2005, 11, 8); [EOL]     LocalDate test2 = new LocalDate(2005, 11, 9); [EOL]     LocalDate test3 = new LocalDate(2005, 11, 8, CopticChronology.getInstanceUTC()); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test1.year())); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test1.monthOfYear())); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test2.year())); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test2.monthOfYear())); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(false, test1.monthOfYear().equals(test1.year())); [EOL]     assertEquals(true, test1.monthOfYear().equals(test1.monthOfYear())); [EOL]     assertEquals(false, test1.monthOfYear().equals(test1.dayOfMonth())); [EOL]     assertEquals(false, test1.monthOfYear().equals(test2.year())); [EOL]     assertEquals(true, test1.monthOfYear().equals(test2.monthOfYear())); [EOL]     assertEquals(false, test1.monthOfYear().equals(test2.dayOfMonth())); [EOL]     assertEquals(false, test1.dayOfMonth().equals(null)); [EOL]     assertEquals(false, test1.dayOfMonth().equals("any")); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test3.dayOfMonth())); [EOL] }
public void testPropertyEquals() { [EOL]     LocalDate test1 = new LocalDate(2005, 11, 8); [EOL]     LocalDate test2 = new LocalDate(2005, 11, 9); [EOL]     LocalDate test3 = new LocalDate(2005, 11, 8, CopticChronology.getInstanceUTC()); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test1.year())); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test1.monthOfYear())); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test2.year())); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test2.monthOfYear())); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(false, test1.monthOfYear().equals(test1.year())); [EOL]     assertEquals(true, test1.monthOfYear().equals(test1.monthOfYear())); [EOL]     assertEquals(false, test1.monthOfYear().equals(test1.dayOfMonth())); [EOL]     assertEquals(false, test1.monthOfYear().equals(test2.year())); [EOL]     assertEquals(true, test1.monthOfYear().equals(test2.monthOfYear())); [EOL]     assertEquals(false, test1.monthOfYear().equals(test2.dayOfMonth())); [EOL]     assertEquals(false, test1.dayOfMonth().equals(null)); [EOL]     assertEquals(false, test1.dayOfMonth().equals("any")); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test3.dayOfMonth())); [EOL] }
public void testUnsupportedMethods() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     try { [EOL]         fieldOne.add(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(100000L, 250); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapPartial(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.get(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getLeapAmount(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumShortTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(10000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.isLeap(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.remainder(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfEven(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, 1000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation"); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, 10000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] }
public void testUnsupportedMethods() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     try { [EOL]         fieldOne.add(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(100000L, 250); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapPartial(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.get(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getLeapAmount(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumShortTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(10000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.isLeap(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.remainder(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfEven(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, 1000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation"); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, 10000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] }
public void testUnsupportedMethods() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     try { [EOL]         fieldOne.add(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(100000L, 250); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapPartial(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.get(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getLeapAmount(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumShortTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(10000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.isLeap(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.remainder(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfEven(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, 1000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation"); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, 10000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] }
public void testUnsupportedMethods() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     try { [EOL]         fieldOne.add(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(100000L, 250); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapPartial(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.get(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getLeapAmount(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumShortTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(10000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.isLeap(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.remainder(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfEven(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, 1000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation"); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, 10000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] }
public void testUnsupportedMethods() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     try { [EOL]         fieldOne.add(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(100000L, 250); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapPartial(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.get(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getLeapAmount(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumShortTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(10000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.isLeap(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.remainder(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfEven(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, 1000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation"); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, 10000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] }
public void testUnsupportedMethods() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     try { [EOL]         fieldOne.add(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(100000L, 250); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapPartial(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.get(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getLeapAmount(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumShortTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(10000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.isLeap(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.remainder(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfEven(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, 1000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation"); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, 10000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] }
public void testUnsupportedMethods() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     try { [EOL]         fieldOne.add(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(100000L, 250); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapPartial(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.get(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getLeapAmount(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumShortTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(10000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.isLeap(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.remainder(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfEven(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, 1000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation"); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, 10000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] }
public void testUnsupportedMethods() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     try { [EOL]         fieldOne.add(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(100000L, 250); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapPartial(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.get(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getLeapAmount(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumShortTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(10000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.isLeap(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.remainder(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfEven(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, 1000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation"); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, 10000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] }
public void testUnsupportedMethods() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     try { [EOL]         fieldOne.add(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(100000L, 250); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapPartial(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.get(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getLeapAmount(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumShortTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(10000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.isLeap(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.remainder(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfEven(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, 1000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation"); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, 10000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] }
public void testUnsupportedMethods() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     try { [EOL]         fieldOne.add(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(100000L, 250); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapPartial(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.get(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getLeapAmount(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumShortTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(10000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.isLeap(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.remainder(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfEven(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, 1000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation"); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, 10000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] }
public void testUnsupportedMethods() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     try { [EOL]         fieldOne.add(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(100000L, 250); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapPartial(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.get(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getLeapAmount(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumShortTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(10000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.isLeap(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.remainder(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfEven(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, 1000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation"); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, 10000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] }
public void testUnsupportedMethods() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     try { [EOL]         fieldOne.add(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(100000L, 250); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapPartial(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.get(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getLeapAmount(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumShortTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(10000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.isLeap(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.remainder(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfEven(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, 1000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation"); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, 10000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] }
public void testUnsupportedMethods() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     try { [EOL]         fieldOne.add(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(100000L, 250); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapPartial(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.get(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getLeapAmount(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumShortTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(10000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.isLeap(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.remainder(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfEven(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, 1000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation"); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, 10000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] }
public void testUnsupportedMethods() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     try { [EOL]         fieldOne.add(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(100000L, 250); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapPartial(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.get(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getLeapAmount(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumShortTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(10000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.isLeap(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.remainder(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfEven(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, 1000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation"); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, 10000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] }
public void testUnsupportedMethods() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     try { [EOL]         fieldOne.add(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(100000L, 250); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapPartial(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.get(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getLeapAmount(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumShortTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(10000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.isLeap(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.remainder(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfEven(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, 1000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation"); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, 10000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] }
public void testUnsupportedMethods() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     try { [EOL]         fieldOne.add(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(100000L, 250); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapPartial(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.get(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getLeapAmount(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumShortTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(10000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.isLeap(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.remainder(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfEven(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, 1000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation"); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, 10000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] }
public void testUnsupportedMethods() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     try { [EOL]         fieldOne.add(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(100000L, 250); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapPartial(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.get(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getLeapAmount(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumShortTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(10000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.isLeap(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.remainder(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfEven(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, 1000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation"); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, 10000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] }
public void testUnsupportedMethods() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     try { [EOL]         fieldOne.add(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(100000L, 250); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapPartial(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.get(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getLeapAmount(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumShortTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(10000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.isLeap(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.remainder(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfEven(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, 1000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation"); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, 10000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] }
public void testUnsupportedMethods() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     try { [EOL]         fieldOne.add(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(100000L, 250); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapPartial(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.get(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getLeapAmount(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumShortTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(10000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.isLeap(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.remainder(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfEven(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, 1000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation"); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, 10000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] }
public void testUnsupportedMethods() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     try { [EOL]         fieldOne.add(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(100000L, 250); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapPartial(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.get(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getLeapAmount(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumShortTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(10000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.isLeap(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.remainder(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfEven(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, 1000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation"); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, 10000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] }
public void testUnsupportedMethods() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     try { [EOL]         fieldOne.add(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(100000L, 250); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapPartial(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.get(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getLeapAmount(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumShortTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(10000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.isLeap(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.remainder(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfEven(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, 1000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation"); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, 10000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] }
public void testMethodsThatShouldAlwaysReturnNull() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     assertNull(fieldOne.getLeapDurationField()); [EOL]     assertNull(fieldOne.getRangeDurationField()); [EOL] }
public void testUnsupportedMethods() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     try { [EOL]         fieldOne.add(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(100000L, 250); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapPartial(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.get(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getLeapAmount(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumShortTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(10000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.isLeap(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.remainder(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfEven(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, 1000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation"); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, 10000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] }
public void testUnsupportedMethods() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     try { [EOL]         fieldOne.add(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(100000L, 250); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapPartial(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.get(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getLeapAmount(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumShortTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(10000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.isLeap(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.remainder(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfEven(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, 1000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation"); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, 10000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] }
public void testUnsupportedMethods() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     try { [EOL]         fieldOne.add(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(100000L, 250); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapPartial(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.get(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getLeapAmount(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumShortTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(10000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.isLeap(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.remainder(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfEven(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, 1000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation"); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, 10000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] }
public void testUnsupportedMethods() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     try { [EOL]         fieldOne.add(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(100000L, 250); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapPartial(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.get(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getLeapAmount(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumShortTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(10000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.isLeap(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.remainder(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfEven(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, 1000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation"); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, 10000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] }
public void testUnsupportedMethods() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     try { [EOL]         fieldOne.add(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(100000L, 250); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapPartial(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.get(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getLeapAmount(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumShortTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(10000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.isLeap(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.remainder(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfEven(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, 1000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation"); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, 10000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] }
public void testUnsupportedMethods() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     try { [EOL]         fieldOne.add(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(100000L, 250); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapPartial(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.get(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getLeapAmount(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumShortTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(10000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.isLeap(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.remainder(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfEven(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, 1000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation"); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, 10000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] }
public void testUnsupportedMethods() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     try { [EOL]         fieldOne.add(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(100000L, 250); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapPartial(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.get(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getLeapAmount(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumShortTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(10000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.isLeap(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.remainder(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfEven(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, 1000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation"); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, 10000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] }
public void testUnsupportedMethods() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     try { [EOL]         fieldOne.add(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(100000L, 250); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapPartial(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.get(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getLeapAmount(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumShortTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(10000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.isLeap(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.remainder(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfEven(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, 1000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation"); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, 10000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] }
public void testUnsupportedMethods() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     try { [EOL]         fieldOne.add(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(100000L, 250); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapPartial(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.get(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getLeapAmount(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumShortTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(10000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.isLeap(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.remainder(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfEven(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, 1000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation"); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, 10000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] }
public void testUnsupportedMethods() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     try { [EOL]         fieldOne.add(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(100000L, 250); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapPartial(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.get(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getLeapAmount(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumShortTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(10000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.isLeap(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.remainder(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfEven(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, 1000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation"); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, 10000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] }
public void testUnsupportedMethods() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     try { [EOL]         fieldOne.add(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(100000L, 250); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapPartial(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.get(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getLeapAmount(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumShortTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(10000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.isLeap(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.remainder(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfEven(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, 1000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation"); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, 10000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] }
public void testUnsupportedMethods() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     try { [EOL]         fieldOne.add(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(100000L, 250); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapPartial(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.get(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getLeapAmount(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumShortTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(10000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.isLeap(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.remainder(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfEven(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, 1000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation"); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, 10000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] }
public void testUnsupportedMethods() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     try { [EOL]         fieldOne.add(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(100000L, 250); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapPartial(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.get(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getLeapAmount(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumShortTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(10000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.isLeap(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.remainder(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfEven(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, 1000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation"); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, 10000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] }
public void testUnsupportedMethods() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     try { [EOL]         fieldOne.add(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(100000L, 250); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapPartial(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.get(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getLeapAmount(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumShortTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(10000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.isLeap(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.remainder(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfEven(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, 1000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation"); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, 10000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] }
public void testUnsupportedMethods() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     try { [EOL]         fieldOne.add(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(100000L, 250); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapPartial(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.get(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getLeapAmount(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumShortTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(10000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.isLeap(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.remainder(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfEven(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, 1000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation"); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, 10000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] }
public void testUnsupportedMethods() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     try { [EOL]         fieldOne.add(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(100000L, 250); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapPartial(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.get(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getLeapAmount(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumShortTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(10000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.isLeap(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.remainder(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfEven(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, 1000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation"); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, 10000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] }
public void testUnsupportedMethods() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     try { [EOL]         fieldOne.add(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(100000L, 250); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapPartial(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.get(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getLeapAmount(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumShortTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(10000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.isLeap(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.remainder(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfEven(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, 1000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation"); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, 10000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] }
public void testUnsupportedMethods() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     try { [EOL]         fieldOne.add(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(100000L, 250); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapPartial(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.get(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getLeapAmount(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumShortTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(10000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.isLeap(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.remainder(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfEven(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, 1000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation"); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, 10000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] }
public void testToString() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     String debugMessage = fieldOne.toString(); [EOL]     assertNotNull(debugMessage); [EOL]     assertTrue(debugMessage.length() > 0); [EOL] }
public void testUnsupportedMethods() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     try { [EOL]         fieldOne.add(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(100000L, 250); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapPartial(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.get(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getLeapAmount(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumShortTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(10000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.isLeap(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.remainder(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfEven(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, 1000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation"); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, 10000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] }
public void testMinusWeeks_int() { [EOL]     DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.minusWeeks(1); [EOL]     DateMidnight expected = new DateMidnight(2002, 4, 26, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusWeeks(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusWeeks_int() { [EOL]     DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.minusWeeks(1); [EOL]     DateMidnight expected = new DateMidnight(2002, 4, 26, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusWeeks(0); [EOL]     assertSame(test, result); [EOL] }
public void test_set_long_String() { [EOL]     BaseDateTimeField field = new MockPreciseDateTimeField(); [EOL]     assertEquals(0, field.set(0L, "0")); [EOL]     assertEquals(29 * 60, field.set(0L, "29")); [EOL] }
public void test_set_long_String() { [EOL]     BaseDateTimeField field = new MockPreciseDateTimeField(); [EOL]     assertEquals(0, field.set(0L, "0")); [EOL]     assertEquals(29 * 60, field.set(0L, "29")); [EOL] }
public void test_set_long_String() { [EOL]     BaseDateTimeField field = new MockPreciseDateTimeField(); [EOL]     assertEquals(0, field.set(0L, "0")); [EOL]     assertEquals(29 * 60, field.set(0L, "29")); [EOL] }
public void testWithZoneRetainFields_DateTimeZone() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateMidnight result = test.withZoneRetainFields(PARIS); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_PARIS, result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertEquals(TEST_TIME1_PARIS, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_LONDON, result.getMillis()); [EOL]     assertEquals(GREGORIAN_DEFAULT, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, new MockNullZoneChronology()); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL] }
public void testPropertyToIntervalMonthOfYear() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     Interval testInterval = test.monthOfYear().toInterval(); [EOL]     assertEquals(new MutableDateTime(2004, 6, 1, 0, 0, 0, 0), testInterval.getStart()); [EOL]     assertEquals(new MutableDateTime(2004, 7, 1, 0, 0, 0, 0), testInterval.getEnd()); [EOL]     assertEquals(new MutableDateTime(2004, 6, 9, 13, 23, 43, 53), test); [EOL] }
public void testPropertyToIntervalMonthOfYear() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     Interval testInterval = test.monthOfYear().toInterval(); [EOL]     assertEquals(new MutableDateTime(2004, 6, 1, 0, 0, 0, 0), testInterval.getStart()); [EOL]     assertEquals(new MutableDateTime(2004, 7, 1, 0, 0, 0, 0), testInterval.getEnd()); [EOL]     assertEquals(new MutableDateTime(2004, 6, 9, 13, 23, 43, 53), test); [EOL] }
public void testMinusWeeks_int() { [EOL]     DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.minusWeeks(1); [EOL]     DateMidnight expected = new DateMidnight(2002, 4, 26, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusWeeks(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusWeeks_int() { [EOL]     DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.minusWeeks(1); [EOL]     DateMidnight expected = new DateMidnight(2002, 4, 26, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusWeeks(0); [EOL]     assertSame(test, result); [EOL] }
public void testPropertyGetDifferenceMonthOfYear() { [EOL]     DateMidnight test1 = new DateMidnight(2004, 6, 9); [EOL]     DateMidnight test2 = new DateMidnight(2004, 8, 9); [EOL]     assertEquals(-2, test1.monthOfYear().getDifference(test2)); [EOL]     assertEquals(2, test2.monthOfYear().getDifference(test1)); [EOL]     assertEquals(-2L, test1.monthOfYear().getDifferenceAsLong(test2)); [EOL]     assertEquals(2L, test2.monthOfYear().getDifferenceAsLong(test1)); [EOL] }
public void testPropertyGetDifferenceMonthOfYear() { [EOL]     DateMidnight test1 = new DateMidnight(2004, 6, 9); [EOL]     DateMidnight test2 = new DateMidnight(2004, 8, 9); [EOL]     assertEquals(-2, test1.monthOfYear().getDifference(test2)); [EOL]     assertEquals(2, test2.monthOfYear().getDifference(test1)); [EOL]     assertEquals(-2L, test1.monthOfYear().getDifferenceAsLong(test2)); [EOL]     assertEquals(2L, test2.monthOfYear().getDifferenceAsLong(test1)); [EOL] }
public void testPropertyGetDifferenceMonthOfYear() { [EOL]     DateMidnight test1 = new DateMidnight(2004, 6, 9); [EOL]     DateMidnight test2 = new DateMidnight(2004, 8, 9); [EOL]     assertEquals(-2, test1.monthOfYear().getDifference(test2)); [EOL]     assertEquals(2, test2.monthOfYear().getDifference(test1)); [EOL]     assertEquals(-2L, test1.monthOfYear().getDifferenceAsLong(test2)); [EOL]     assertEquals(2L, test2.monthOfYear().getDifferenceAsLong(test1)); [EOL] }
public void testPropertyGetDifferenceMonthOfYear() { [EOL]     DateMidnight test1 = new DateMidnight(2004, 6, 9); [EOL]     DateMidnight test2 = new DateMidnight(2004, 8, 9); [EOL]     assertEquals(-2, test1.monthOfYear().getDifference(test2)); [EOL]     assertEquals(2, test2.monthOfYear().getDifference(test1)); [EOL]     assertEquals(-2L, test1.monthOfYear().getDifferenceAsLong(test2)); [EOL]     assertEquals(2L, test2.monthOfYear().getDifferenceAsLong(test1)); [EOL] }
public void testWithZoneRetainFields_DateTimeZone() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateMidnight result = test.withZoneRetainFields(PARIS); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_PARIS, result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertEquals(TEST_TIME1_PARIS, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_LONDON, result.getMillis()); [EOL]     assertEquals(GREGORIAN_DEFAULT, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, new MockNullZoneChronology()); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL] }
public void testWithZoneRetainFields_DateTimeZone() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateMidnight result = test.withZoneRetainFields(PARIS); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_PARIS, result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertEquals(TEST_TIME1_PARIS, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_LONDON, result.getMillis()); [EOL]     assertEquals(GREGORIAN_DEFAULT, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, new MockNullZoneChronology()); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL] }
public void testCalendar() { [EOL]     if (TestAll.FAST) { [EOL]         return; [EOL]     } [EOL]     System.out.println("\nTestEthiopicChronology.testCalendar"); [EOL]     DateTime epoch = new DateTime(1, 1, 1, 0, 0, 0, 0, ETHIOPIC_UTC); [EOL]     long millis = epoch.getMillis(); [EOL]     long end = new DateTime(3000, 1, 1, 0, 0, 0, 0, ISO_UTC).getMillis(); [EOL]     DateTimeField dayOfWeek = ETHIOPIC_UTC.dayOfWeek(); [EOL]     DateTimeField dayOfYear = ETHIOPIC_UTC.dayOfYear(); [EOL]     DateTimeField dayOfMonth = ETHIOPIC_UTC.dayOfMonth(); [EOL]     DateTimeField monthOfYear = ETHIOPIC_UTC.monthOfYear(); [EOL]     DateTimeField year = ETHIOPIC_UTC.year(); [EOL]     DateTimeField yearOfEra = ETHIOPIC_UTC.yearOfEra(); [EOL]     DateTimeField era = ETHIOPIC_UTC.era(); [EOL]     int expectedDOW = new DateTime(8, 8, 29, 0, 0, 0, 0, JULIAN_UTC).getDayOfWeek(); [EOL]     int expectedDOY = 1; [EOL]     int expectedDay = 1; [EOL]     int expectedMonth = 1; [EOL]     int expectedYear = 1; [EOL]     while (millis < end) { [EOL]         int dowValue = dayOfWeek.get(millis); [EOL]         int doyValue = dayOfYear.get(millis); [EOL]         int dayValue = dayOfMonth.get(millis); [EOL]         int monthValue = monthOfYear.get(millis); [EOL]         int yearValue = year.get(millis); [EOL]         int yearOfEraValue = yearOfEra.get(millis); [EOL]         int monthLen = dayOfMonth.getMaximumValue(millis); [EOL]         if (monthValue < 1 || monthValue > 13) { [EOL]             fail("Bad month: " + millis); [EOL]         } [EOL]         assertEquals(1, era.get(millis)); [EOL]         assertEquals("EE", era.getAsText(millis)); [EOL]         assertEquals("EE", era.getAsShortText(millis)); [EOL]         assertEquals(expectedYear, yearValue); [EOL]         assertEquals(expectedYear, yearOfEraValue); [EOL]         assertEquals(expectedMonth, monthValue); [EOL]         assertEquals(expectedDay, dayValue); [EOL]         assertEquals(expectedDOW, dowValue); [EOL]         assertEquals(expectedDOY, doyValue); [EOL]         assertEquals(yearValue % 4 == 3, year.isLeap(millis)); [EOL]         if (monthValue == 13) { [EOL]             assertEquals(yearValue % 4 == 3, monthOfYear.isLeap(millis)); [EOL]             if (yearValue % 4 == 3) { [EOL]                 assertEquals(6, monthLen); [EOL]             } else { [EOL]                 assertEquals(5, monthLen); [EOL]             } [EOL]         } else { [EOL]             assertEquals(30, monthLen); [EOL]         } [EOL]         expectedDOW = (((expectedDOW + 1) - 1) % 7) + 1; [EOL]         expectedDay++; [EOL]         expectedDOY++; [EOL]         if (expectedDay == 31 && expectedMonth < 13) { [EOL]             expectedDay = 1; [EOL]             expectedMonth++; [EOL]         } else if (expectedMonth == 13) { [EOL]             if (expectedYear % 4 == 3 && expectedDay == 7) { [EOL]                 expectedDay = 1; [EOL]                 expectedMonth = 1; [EOL]                 expectedYear++; [EOL]                 expectedDOY = 1; [EOL]             } else if (expectedYear % 4 != 3 && expectedDay == 6) { [EOL]                 expectedDay = 1; [EOL]                 expectedMonth = 1; [EOL]                 expectedYear++; [EOL]                 expectedDOY = 1; [EOL]             } [EOL]         } [EOL]         millis += SKIP; [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void test_DateTime_setHourForward_Moscow_Spring() { [EOL]     DateTime dt = new DateTime(2007, 3, 25, 0, 0, 0, 0, ZONE_MOSCOW); [EOL]     assertEquals("2007-03-25T00:00:00.000+03:00", dt.toString()); [EOL]     try { [EOL]         dt.hourOfDay().setCopy(2); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException ex) { [EOL]     } [EOL] }
public void test_DateTime_setHourForward_Moscow_Spring() { [EOL]     DateTime dt = new DateTime(2007, 3, 25, 0, 0, 0, 0, ZONE_MOSCOW); [EOL]     assertEquals("2007-03-25T00:00:00.000+03:00", dt.toString()); [EOL]     try { [EOL]         dt.hourOfDay().setCopy(2); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException ex) { [EOL]     } [EOL] }
public void test_DateTime_setHourForward_Moscow_Spring() { [EOL]     DateTime dt = new DateTime(2007, 3, 25, 0, 0, 0, 0, ZONE_MOSCOW); [EOL]     assertEquals("2007-03-25T00:00:00.000+03:00", dt.toString()); [EOL]     try { [EOL]         dt.hourOfDay().setCopy(2); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException ex) { [EOL]     } [EOL] }
public void testPropertyWithMinimumValueMillisOfDayDSTGap() { [EOL]     DateTimeZone gaza = DateTimeZone.forID("Asia/Gaza"); [EOL]     DateTime dt = new DateTime(2001, 4, 20, 18, 0, 0, 0, gaza); [EOL]     DateTime test = dt.millisOfDay().withMinimumValue(); [EOL]     assertEquals("2001-04-20T01:00:00.000+03:00", test.toString()); [EOL] }
public void testPropertyWithMinimumValueMillisOfDayDSTGap() { [EOL]     DateTimeZone gaza = DateTimeZone.forID("Asia/Gaza"); [EOL]     DateTime dt = new DateTime(2001, 4, 20, 18, 0, 0, 0, gaza); [EOL]     DateTime test = dt.millisOfDay().withMinimumValue(); [EOL]     assertEquals("2001-04-20T01:00:00.000+03:00", test.toString()); [EOL] }
public void testPropertyWithMinimumValueMillisOfDayDSTGap() { [EOL]     DateTimeZone gaza = DateTimeZone.forID("Asia/Gaza"); [EOL]     DateTime dt = new DateTime(2001, 4, 20, 18, 0, 0, 0, gaza); [EOL]     DateTime test = dt.millisOfDay().withMinimumValue(); [EOL]     assertEquals("2001-04-20T01:00:00.000+03:00", test.toString()); [EOL] }
public void testPropertyWithMinimumValueMillisOfDayDSTGap() { [EOL]     DateTimeZone gaza = DateTimeZone.forID("Asia/Gaza"); [EOL]     DateTime dt = new DateTime(2001, 4, 20, 18, 0, 0, 0, gaza); [EOL]     DateTime test = dt.millisOfDay().withMinimumValue(); [EOL]     assertEquals("2001-04-20T01:00:00.000+03:00", test.toString()); [EOL] }
public void testPropertyWithMinimumValueMillisOfDayDSTGap() { [EOL]     DateTimeZone gaza = DateTimeZone.forID("Asia/Gaza"); [EOL]     DateTime dt = new DateTime(2001, 4, 20, 18, 0, 0, 0, gaza); [EOL]     DateTime test = dt.millisOfDay().withMinimumValue(); [EOL]     assertEquals("2001-04-20T01:00:00.000+03:00", test.toString()); [EOL] }
public void testSkipDateTimeField() { [EOL]     DateTimeField field = new SkipDateTimeField(ISOChronology.getInstanceUTC(), ISOChronology.getInstanceUTC().year(), 1970); [EOL]     try { [EOL]         field.set(0, 1970); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("year", e.getFieldName()); [EOL]         assertEquals(new Integer(1970), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("1970", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL] }
public void testSkipDateTimeField() { [EOL]     DateTimeField field = new SkipDateTimeField(ISOChronology.getInstanceUTC(), ISOChronology.getInstanceUTC().year(), 1970); [EOL]     try { [EOL]         field.set(0, 1970); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("year", e.getFieldName()); [EOL]         assertEquals(new Integer(1970), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("1970", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL] }
public void testSkipDateTimeField() { [EOL]     DateTimeField field = new SkipDateTimeField(ISOChronology.getInstanceUTC(), ISOChronology.getInstanceUTC().year(), 1970); [EOL]     try { [EOL]         field.set(0, 1970); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("year", e.getFieldName()); [EOL]         assertEquals(new Integer(1970), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("1970", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL] }
public void testSkipDateTimeField() { [EOL]     DateTimeField field = new SkipDateTimeField(ISOChronology.getInstanceUTC(), ISOChronology.getInstanceUTC().year(), 1970); [EOL]     try { [EOL]         field.set(0, 1970); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("year", e.getFieldName()); [EOL]         assertEquals(new Integer(1970), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("1970", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL] }
public void testSkipDateTimeField() { [EOL]     DateTimeField field = new SkipDateTimeField(ISOChronology.getInstanceUTC(), ISOChronology.getInstanceUTC().year(), 1970); [EOL]     try { [EOL]         field.set(0, 1970); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("year", e.getFieldName()); [EOL]         assertEquals(new Integer(1970), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("1970", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL] }
public void testSkipDateTimeField() { [EOL]     DateTimeField field = new SkipDateTimeField(ISOChronology.getInstanceUTC(), ISOChronology.getInstanceUTC().year(), 1970); [EOL]     try { [EOL]         field.set(0, 1970); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("year", e.getFieldName()); [EOL]         assertEquals(new Integer(1970), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("1970", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL] }
public void testSkipDateTimeField() { [EOL]     DateTimeField field = new SkipDateTimeField(ISOChronology.getInstanceUTC(), ISOChronology.getInstanceUTC().year(), 1970); [EOL]     try { [EOL]         field.set(0, 1970); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("year", e.getFieldName()); [EOL]         assertEquals(new Integer(1970), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("1970", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL] }
public void testSkipDateTimeField() { [EOL]     DateTimeField field = new SkipDateTimeField(ISOChronology.getInstanceUTC(), ISOChronology.getInstanceUTC().year(), 1970); [EOL]     try { [EOL]         field.set(0, 1970); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("year", e.getFieldName()); [EOL]         assertEquals(new Integer(1970), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("1970", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL] }
public void testSkipDateTimeField() { [EOL]     DateTimeField field = new SkipDateTimeField(ISOChronology.getInstanceUTC(), ISOChronology.getInstanceUTC().year(), 1970); [EOL]     try { [EOL]         field.set(0, 1970); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("year", e.getFieldName()); [EOL]         assertEquals(new Integer(1970), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("1970", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL] }
public void testSkipDateTimeField() { [EOL]     DateTimeField field = new SkipDateTimeField(ISOChronology.getInstanceUTC(), ISOChronology.getInstanceUTC().year(), 1970); [EOL]     try { [EOL]         field.set(0, 1970); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("year", e.getFieldName()); [EOL]         assertEquals(new Integer(1970), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("1970", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL] }
public void testSkipDateTimeField() { [EOL]     DateTimeField field = new SkipDateTimeField(ISOChronology.getInstanceUTC(), ISOChronology.getInstanceUTC().year(), 1970); [EOL]     try { [EOL]         field.set(0, 1970); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("year", e.getFieldName()); [EOL]         assertEquals(new Integer(1970), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("1970", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL] }
public void testSkipDateTimeField() { [EOL]     DateTimeField field = new SkipDateTimeField(ISOChronology.getInstanceUTC(), ISOChronology.getInstanceUTC().year(), 1970); [EOL]     try { [EOL]         field.set(0, 1970); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("year", e.getFieldName()); [EOL]         assertEquals(new Integer(1970), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("1970", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL] }
public void testSkipDateTimeField() { [EOL]     DateTimeField field = new SkipDateTimeField(ISOChronology.getInstanceUTC(), ISOChronology.getInstanceUTC().year(), 1970); [EOL]     try { [EOL]         field.set(0, 1970); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("year", e.getFieldName()); [EOL]         assertEquals(new Integer(1970), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("1970", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL] }
public void testConstructor() throws Throwable { [EOL]     LocalTime test = new LocalTime(); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(10 + OFFSET_LONDON, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL]     assertEquals(test, LocalTime.now()); [EOL] }
public void testConstructor_Chronology() throws Throwable { [EOL]     LocalTime test = new LocalTime(JULIAN_LONDON); [EOL]     assertEquals(JULIAN_UTC, test.getChronology()); [EOL]     assertEquals(10 + OFFSET_LONDON, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL]     assertEquals(test, LocalTime.now(JULIAN_LONDON)); [EOL] }
public void testConstructor_Chronology() throws Throwable { [EOL]     LocalTime test = new LocalTime(JULIAN_LONDON); [EOL]     assertEquals(JULIAN_UTC, test.getChronology()); [EOL]     assertEquals(10 + OFFSET_LONDON, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL]     assertEquals(test, LocalTime.now(JULIAN_LONDON)); [EOL] }
public void testParse_noFormatter() throws Throwable { [EOL]     assertEquals(new LocalTime(1, 20), LocalTime.parse("01:20")); [EOL]     assertEquals(new LocalTime(14, 50, 30, 432), LocalTime.parse("14:50:30.432")); [EOL] }
public void testParse_formatter() throws Throwable { [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("HH mm").withChronology(ISOChronology.getInstance(PARIS)); [EOL]     assertEquals(new LocalTime(13, 30), LocalTime.parse("13 30", f)); [EOL] }
public void testParse_formatter() throws Throwable { [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("HH mm").withChronology(ISOChronology.getInstance(PARIS)); [EOL]     assertEquals(new LocalTime(13, 30), LocalTime.parse("13 30", f)); [EOL] }
public void testFactory_FromDateFields_null() throws Exception { [EOL]     try { [EOL]         LocalTime.fromDateFields((Date) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testConstructor_Chronology() throws Throwable { [EOL]     LocalTime test = new LocalTime(JULIAN_LONDON); [EOL]     assertEquals(JULIAN_UTC, test.getChronology()); [EOL]     assertEquals(10 + OFFSET_LONDON, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL]     assertEquals(test, LocalTime.now(JULIAN_LONDON)); [EOL] }
public void testConstructor_Chronology() throws Throwable { [EOL]     LocalTime test = new LocalTime(JULIAN_LONDON); [EOL]     assertEquals(JULIAN_UTC, test.getChronology()); [EOL]     assertEquals(10 + OFFSET_LONDON, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL]     assertEquals(test, LocalTime.now(JULIAN_LONDON)); [EOL] }
public void testParse_formatter() throws Throwable { [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("HH mm").withChronology(ISOChronology.getInstance(PARIS)); [EOL]     assertEquals(new LocalTime(13, 30), LocalTime.parse("13 30", f)); [EOL] }
public void testParse_formatter() throws Throwable { [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("HH mm").withChronology(ISOChronology.getInstance(PARIS)); [EOL]     assertEquals(new LocalTime(13, 30), LocalTime.parse("13 30", f)); [EOL] }
public void testParse_formatter() throws Throwable { [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("HH mm").withChronology(ISOChronology.getInstance(PARIS)); [EOL]     assertEquals(new LocalTime(13, 30), LocalTime.parse("13 30", f)); [EOL] }
public void testParse_formatter() throws Throwable { [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("HH mm").withChronology(ISOChronology.getInstance(PARIS)); [EOL]     assertEquals(new LocalTime(13, 30), LocalTime.parse("13 30", f)); [EOL] }
public void testParse_formatter() throws Throwable { [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("HH mm").withChronology(ISOChronology.getInstance(PARIS)); [EOL]     assertEquals(new LocalTime(13, 30), LocalTime.parse("13 30", f)); [EOL] }
public void testParseLocalTime_simple() { [EOL]     assertEquals(new LocalTime(10, 20, 30), g.parseLocalTime("2004-06-09T10:20:30Z")); [EOL]     assertEquals(new LocalTime(10, 20, 30), g.parseLocalTime("2004-06-09T10:20:30+18:00")); [EOL]     assertEquals(new LocalTime(10, 20, 30), g.parseLocalTime("2004-06-09T10:20:30-18:00")); [EOL]     assertEquals(new LocalTime(10, 20, 30, 0, BUDDHIST_PARIS), g.withChronology(BUDDHIST_PARIS).parseLocalTime("2004-06-09T10:20:30Z")); [EOL]     try { [EOL]         g.parseDateTime("ABC"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testParseLocalTime_simple() { [EOL]     assertEquals(new LocalTime(10, 20, 30), g.parseLocalTime("2004-06-09T10:20:30Z")); [EOL]     assertEquals(new LocalTime(10, 20, 30), g.parseLocalTime("2004-06-09T10:20:30+18:00")); [EOL]     assertEquals(new LocalTime(10, 20, 30), g.parseLocalTime("2004-06-09T10:20:30-18:00")); [EOL]     assertEquals(new LocalTime(10, 20, 30, 0, BUDDHIST_PARIS), g.withChronology(BUDDHIST_PARIS).parseLocalTime("2004-06-09T10:20:30Z")); [EOL]     try { [EOL]         g.parseDateTime("ABC"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGetValue_int() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40, COPTIC_PARIS); [EOL]     assertEquals(10, test.getValue(0)); [EOL]     assertEquals(20, test.getValue(1)); [EOL]     assertEquals(30, test.getValue(2)); [EOL]     assertEquals(40, test.getValue(3)); [EOL]     try { [EOL]         test.getValue(-1); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         test.getValue(5); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] }
public void testGetValue_int() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40, COPTIC_PARIS); [EOL]     assertEquals(10, test.getValue(0)); [EOL]     assertEquals(20, test.getValue(1)); [EOL]     assertEquals(30, test.getValue(2)); [EOL]     assertEquals(40, test.getValue(3)); [EOL]     try { [EOL]         test.getValue(-1); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         test.getValue(5); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] }
public void testGetValue_int() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40, COPTIC_PARIS); [EOL]     assertEquals(10, test.getValue(0)); [EOL]     assertEquals(20, test.getValue(1)); [EOL]     assertEquals(30, test.getValue(2)); [EOL]     assertEquals(40, test.getValue(3)); [EOL]     try { [EOL]         test.getValue(-1); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         test.getValue(5); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] }
public void testGetValue_int() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40, COPTIC_PARIS); [EOL]     assertEquals(10, test.getValue(0)); [EOL]     assertEquals(20, test.getValue(1)); [EOL]     assertEquals(30, test.getValue(2)); [EOL]     assertEquals(40, test.getValue(3)); [EOL]     try { [EOL]         test.getValue(-1); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         test.getValue(5); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] }
public void testGetValue_int() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40, COPTIC_PARIS); [EOL]     assertEquals(10, test.getValue(0)); [EOL]     assertEquals(20, test.getValue(1)); [EOL]     assertEquals(30, test.getValue(2)); [EOL]     assertEquals(40, test.getValue(3)); [EOL]     try { [EOL]         test.getValue(-1); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         test.getValue(5); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] }
public void testWithField_DateTimeFieldType_int_3() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     try { [EOL]         test.withField(DateTimeFieldType.dayOfMonth(), 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithField_DateTimeFieldType_int_3() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     try { [EOL]         test.withField(DateTimeFieldType.dayOfMonth(), 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithField_DateTimeFieldType_int_3() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     try { [EOL]         test.withField(DateTimeFieldType.dayOfMonth(), 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithFieldAdded_DurationFieldType_int_4() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     LocalTime result = test.withFieldAdded(DurationFieldType.hours(), 0); [EOL]     assertSame(test, result); [EOL] }
public void testWithFieldAdded_DurationFieldType_int_4() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     LocalTime result = test.withFieldAdded(DurationFieldType.hours(), 0); [EOL]     assertSame(test, result); [EOL] }
public void testWithFieldAdded_DurationFieldType_int_4() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     LocalTime result = test.withFieldAdded(DurationFieldType.hours(), 0); [EOL]     assertSame(test, result); [EOL] }
public void testWithFieldAdded_DurationFieldType_int_4() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     LocalTime result = test.withFieldAdded(DurationFieldType.hours(), 0); [EOL]     assertSame(test, result); [EOL] }
public void testMinus_RP() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalTime result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1)); [EOL]     LocalTime expected = new LocalTime(9, 19, 29, 39, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testMinus_RP() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalTime result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1)); [EOL]     LocalTime expected = new LocalTime(9, 19, 29, 39, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testToString_String_Locale() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals("10 20", test.toString("H m", Locale.ENGLISH)); [EOL]     assertEquals("10:20:30.040", test.toString(null, Locale.ENGLISH)); [EOL]     assertEquals("10 20", test.toString("H m", null)); [EOL]     assertEquals("10:20:30.040", test.toString(null, null)); [EOL] }
public void testToString_String_Locale() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals("10 20", test.toString("H m", Locale.ENGLISH)); [EOL]     assertEquals("10:20:30.040", test.toString(null, Locale.ENGLISH)); [EOL]     assertEquals("10 20", test.toString("H m", null)); [EOL]     assertEquals("10:20:30.040", test.toString(null, null)); [EOL] }
public void testPropertyGetMinute() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     assertSame(test.getChronology().minuteOfHour(), test.minuteOfHour().getField()); [EOL]     assertEquals("minuteOfHour", test.minuteOfHour().getName()); [EOL]     assertEquals("Property[minuteOfHour]", test.minuteOfHour().toString()); [EOL]     assertSame(test, test.minuteOfHour().getLocalTime()); [EOL]     assertEquals(20, test.minuteOfHour().get()); [EOL]     assertEquals("20", test.minuteOfHour().getAsString()); [EOL]     assertEquals("20", test.minuteOfHour().getAsText()); [EOL]     assertEquals("20", test.minuteOfHour().getAsText(Locale.FRENCH)); [EOL]     assertEquals("20", test.minuteOfHour().getAsShortText()); [EOL]     assertEquals("20", test.minuteOfHour().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().minutes(), test.minuteOfHour().getDurationField()); [EOL]     assertEquals(test.getChronology().hours(), test.minuteOfHour().getRangeDurationField()); [EOL]     assertEquals(2, test.minuteOfHour().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.minuteOfHour().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyPlusWrapFieldMinute() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     LocalTime copy = test.minuteOfHour().addWrapFieldToCopy(9); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 29, 30, 40); [EOL]     copy = test.minuteOfHour().addWrapFieldToCopy(49); [EOL]     check(copy, 10, 9, 30, 40); [EOL]     copy = test.minuteOfHour().addWrapFieldToCopy(-47); [EOL]     check(copy, 10, 33, 30, 40); [EOL] }
public void testPropertyPlusWrapFieldMinute() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     LocalTime copy = test.minuteOfHour().addWrapFieldToCopy(9); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 29, 30, 40); [EOL]     copy = test.minuteOfHour().addWrapFieldToCopy(49); [EOL]     check(copy, 10, 9, 30, 40); [EOL]     copy = test.minuteOfHour().addWrapFieldToCopy(-47); [EOL]     check(copy, 10, 33, 30, 40); [EOL] }
public void testPropertyPlusWrapFieldMinute() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     LocalTime copy = test.minuteOfHour().addWrapFieldToCopy(9); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 29, 30, 40); [EOL]     copy = test.minuteOfHour().addWrapFieldToCopy(49); [EOL]     check(copy, 10, 9, 30, 40); [EOL]     copy = test.minuteOfHour().addWrapFieldToCopy(-47); [EOL]     check(copy, 10, 33, 30, 40); [EOL] }
public void testPropertyRoundHour() { [EOL]     LocalTime test = new LocalTime(10, 20); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 10, 0, 0, 0); [EOL]     test = new LocalTime(10, 40); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 11, 0, 0, 0); [EOL]     test = new LocalTime(10, 30); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 10, 0, 0, 0); [EOL]     test = new LocalTime(11, 30); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 12, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 12, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 12, 0, 0, 0); [EOL] }
public void testPropertyRoundHour() { [EOL]     LocalTime test = new LocalTime(10, 20); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 10, 0, 0, 0); [EOL]     test = new LocalTime(10, 40); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 11, 0, 0, 0); [EOL]     test = new LocalTime(10, 30); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 10, 0, 0, 0); [EOL]     test = new LocalTime(11, 30); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 12, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 12, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 12, 0, 0, 0); [EOL] }
public void testPropertyRoundHour() { [EOL]     LocalTime test = new LocalTime(10, 20); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 10, 0, 0, 0); [EOL]     test = new LocalTime(10, 40); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 11, 0, 0, 0); [EOL]     test = new LocalTime(10, 30); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 10, 0, 0, 0); [EOL]     test = new LocalTime(11, 30); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 12, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 12, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 12, 0, 0, 0); [EOL] }
public void testPropertyRoundHour() { [EOL]     LocalTime test = new LocalTime(10, 20); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 10, 0, 0, 0); [EOL]     test = new LocalTime(10, 40); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 11, 0, 0, 0); [EOL]     test = new LocalTime(10, 30); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 10, 0, 0, 0); [EOL]     test = new LocalTime(11, 30); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 12, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 12, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 12, 0, 0, 0); [EOL] }
public void testPropertyRoundHour() { [EOL]     LocalTime test = new LocalTime(10, 20); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 10, 0, 0, 0); [EOL]     test = new LocalTime(10, 40); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 11, 0, 0, 0); [EOL]     test = new LocalTime(10, 30); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 10, 0, 0, 0); [EOL]     test = new LocalTime(11, 30); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 12, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 12, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 12, 0, 0, 0); [EOL] }
public void testPropertyRoundHour() { [EOL]     LocalTime test = new LocalTime(10, 20); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 10, 0, 0, 0); [EOL]     test = new LocalTime(10, 40); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 11, 0, 0, 0); [EOL]     test = new LocalTime(10, 30); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 10, 0, 0, 0); [EOL]     test = new LocalTime(11, 30); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 12, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 12, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 12, 0, 0, 0); [EOL] }
public void testPropertyRoundHour() { [EOL]     LocalTime test = new LocalTime(10, 20); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 10, 0, 0, 0); [EOL]     test = new LocalTime(10, 40); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 11, 0, 0, 0); [EOL]     test = new LocalTime(10, 30); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 10, 0, 0, 0); [EOL]     test = new LocalTime(11, 30); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 12, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 12, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 12, 0, 0, 0); [EOL] }
public void testPropertyRoundHour() { [EOL]     LocalTime test = new LocalTime(10, 20); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 10, 0, 0, 0); [EOL]     test = new LocalTime(10, 40); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 11, 0, 0, 0); [EOL]     test = new LocalTime(10, 30); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 10, 0, 0, 0); [EOL]     test = new LocalTime(11, 30); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 12, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 12, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 12, 0, 0, 0); [EOL] }
public void testPropertyRoundHour() { [EOL]     LocalTime test = new LocalTime(10, 20); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 10, 0, 0, 0); [EOL]     test = new LocalTime(10, 40); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 11, 0, 0, 0); [EOL]     test = new LocalTime(10, 30); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 10, 0, 0, 0); [EOL]     test = new LocalTime(11, 30); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 12, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 12, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 12, 0, 0, 0); [EOL] }
public void testPropertyRoundHour() { [EOL]     LocalTime test = new LocalTime(10, 20); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 10, 0, 0, 0); [EOL]     test = new LocalTime(10, 40); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 11, 0, 0, 0); [EOL]     test = new LocalTime(10, 30); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 10, 0, 0, 0); [EOL]     test = new LocalTime(11, 30); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 12, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 12, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 12, 0, 0, 0); [EOL] }
public void testPropertyRoundHour() { [EOL]     LocalTime test = new LocalTime(10, 20); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 10, 0, 0, 0); [EOL]     test = new LocalTime(10, 40); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 11, 0, 0, 0); [EOL]     test = new LocalTime(10, 30); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 10, 0, 0, 0); [EOL]     test = new LocalTime(11, 30); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 12, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 12, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 12, 0, 0, 0); [EOL] }
public void testPropertyRoundHour() { [EOL]     LocalTime test = new LocalTime(10, 20); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 10, 0, 0, 0); [EOL]     test = new LocalTime(10, 40); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 11, 0, 0, 0); [EOL]     test = new LocalTime(10, 30); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 10, 0, 0, 0); [EOL]     test = new LocalTime(11, 30); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 12, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 12, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 12, 0, 0, 0); [EOL] }
public void testPropertyRoundHour() { [EOL]     LocalTime test = new LocalTime(10, 20); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 10, 0, 0, 0); [EOL]     test = new LocalTime(10, 40); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 11, 0, 0, 0); [EOL]     test = new LocalTime(10, 30); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 10, 0, 0, 0); [EOL]     test = new LocalTime(11, 30); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 12, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 12, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 12, 0, 0, 0); [EOL] }
public void testPropertyRoundHour() { [EOL]     LocalTime test = new LocalTime(10, 20); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 10, 0, 0, 0); [EOL]     test = new LocalTime(10, 40); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 11, 0, 0, 0); [EOL]     test = new LocalTime(10, 30); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 10, 0, 0, 0); [EOL]     test = new LocalTime(11, 30); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 12, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 12, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 12, 0, 0, 0); [EOL] }
public void testPropertyRoundHour() { [EOL]     LocalTime test = new LocalTime(10, 20); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 10, 0, 0, 0); [EOL]     test = new LocalTime(10, 40); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 11, 0, 0, 0); [EOL]     test = new LocalTime(10, 30); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 10, 0, 0, 0); [EOL]     test = new LocalTime(11, 30); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 12, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 12, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 12, 0, 0, 0); [EOL] }
public void testPropertyRoundHour() { [EOL]     LocalTime test = new LocalTime(10, 20); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 10, 0, 0, 0); [EOL]     test = new LocalTime(10, 40); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 11, 0, 0, 0); [EOL]     test = new LocalTime(10, 30); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 10, 0, 0, 0); [EOL]     test = new LocalTime(11, 30); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 12, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 12, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 12, 0, 0, 0); [EOL] }
public void testSkipDateTimeField() { [EOL]     DateTimeField field = new SkipDateTimeField(ISOChronology.getInstanceUTC(), ISOChronology.getInstanceUTC().year(), 1970); [EOL]     try { [EOL]         field.set(0, 1970); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("year", e.getFieldName()); [EOL]         assertEquals(new Integer(1970), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("1970", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL] }
public void testSkipDateTimeField() { [EOL]     DateTimeField field = new SkipDateTimeField(ISOChronology.getInstanceUTC(), ISOChronology.getInstanceUTC().year(), 1970); [EOL]     try { [EOL]         field.set(0, 1970); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("year", e.getFieldName()); [EOL]         assertEquals(new Integer(1970), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("1970", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL] }
public void testSkipDateTimeField() { [EOL]     DateTimeField field = new SkipDateTimeField(ISOChronology.getInstanceUTC(), ISOChronology.getInstanceUTC().year(), 1970); [EOL]     try { [EOL]         field.set(0, 1970); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("year", e.getFieldName()); [EOL]         assertEquals(new Integer(1970), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("1970", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL] }
public void testWithers() { [EOL]     DateMidnight test = new DateMidnight(1970, 6, 9, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     DateMidnight test = new DateMidnight(1970, 6, 9, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testSkipDateTimeField() { [EOL]     DateTimeField field = new SkipDateTimeField(ISOChronology.getInstanceUTC(), ISOChronology.getInstanceUTC().year(), 1970); [EOL]     try { [EOL]         field.set(0, 1970); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("year", e.getFieldName()); [EOL]         assertEquals(new Integer(1970), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("1970", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL] }
public void testSkipDateTimeField() { [EOL]     DateTimeField field = new SkipDateTimeField(ISOChronology.getInstanceUTC(), ISOChronology.getInstanceUTC().year(), 1970); [EOL]     try { [EOL]         field.set(0, 1970); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("year", e.getFieldName()); [EOL]         assertEquals(new Integer(1970), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("1970", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL] }
public void testSkipDateTimeField() { [EOL]     DateTimeField field = new SkipDateTimeField(ISOChronology.getInstanceUTC(), ISOChronology.getInstanceUTC().year(), 1970); [EOL]     try { [EOL]         field.set(0, 1970); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("year", e.getFieldName()); [EOL]         assertEquals(new Integer(1970), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("1970", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL] }
public void testSkipDateTimeField() { [EOL]     DateTimeField field = new SkipDateTimeField(ISOChronology.getInstanceUTC(), ISOChronology.getInstanceUTC().year(), 1970); [EOL]     try { [EOL]         field.set(0, 1970); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("year", e.getFieldName()); [EOL]         assertEquals(new Integer(1970), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("1970", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL] }
public void testSkipDateTimeField() { [EOL]     DateTimeField field = new SkipDateTimeField(ISOChronology.getInstanceUTC(), ISOChronology.getInstanceUTC().year(), 1970); [EOL]     try { [EOL]         field.set(0, 1970); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("year", e.getFieldName()); [EOL]         assertEquals(new Integer(1970), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("1970", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL] }
public void testSkipDateTimeField() { [EOL]     DateTimeField field = new SkipDateTimeField(ISOChronology.getInstanceUTC(), ISOChronology.getInstanceUTC().year(), 1970); [EOL]     try { [EOL]         field.set(0, 1970); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("year", e.getFieldName()); [EOL]         assertEquals(new Integer(1970), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("1970", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL] }
public void testIsSupported_DurationFieldType() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.eras())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.centuries())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.years())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.months())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.weekyears())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.weeks())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.days())); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.hours())); [EOL]     assertEquals(false, test.isSupported((DurationFieldType) null)); [EOL] }
public void testIsSupported_DurationFieldType() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.eras())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.centuries())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.years())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.months())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.weekyears())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.weeks())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.days())); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.hours())); [EOL]     assertEquals(false, test.isSupported((DurationFieldType) null)); [EOL] }
public void testIsSupported_DurationFieldType() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.eras())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.centuries())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.years())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.months())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.weekyears())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.weeks())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.days())); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.hours())); [EOL]     assertEquals(false, test.isSupported((DurationFieldType) null)); [EOL] }
public void testIsSupported_DurationFieldType() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.eras())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.centuries())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.years())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.months())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.weekyears())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.weeks())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.days())); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.hours())); [EOL]     assertEquals(false, test.isSupported((DurationFieldType) null)); [EOL] }
public void testIsSupported_DurationFieldType() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.eras())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.centuries())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.years())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.months())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.weekyears())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.weeks())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.days())); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.hours())); [EOL]     assertEquals(false, test.isSupported((DurationFieldType) null)); [EOL] }
public void testIsSupported_DurationFieldType() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.eras())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.centuries())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.years())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.months())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.weekyears())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.weeks())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.days())); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.hours())); [EOL]     assertEquals(false, test.isSupported((DurationFieldType) null)); [EOL] }
public void testIsSupported_DurationFieldType() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.eras())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.centuries())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.years())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.months())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.weekyears())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.weeks())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.days())); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.hours())); [EOL]     assertEquals(false, test.isSupported((DurationFieldType) null)); [EOL] }
public void testIsSupported_DurationFieldType() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.eras())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.centuries())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.years())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.months())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.weekyears())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.weeks())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.days())); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.hours())); [EOL]     assertEquals(false, test.isSupported((DurationFieldType) null)); [EOL] }
public void testIsSupported_DurationFieldType() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.eras())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.centuries())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.years())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.months())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.weekyears())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.weeks())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.days())); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.hours())); [EOL]     assertEquals(false, test.isSupported((DurationFieldType) null)); [EOL] }
public void testIsSupported_DurationFieldType() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.eras())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.centuries())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.years())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.months())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.weekyears())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.weeks())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.days())); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.hours())); [EOL]     assertEquals(false, test.isSupported((DurationFieldType) null)); [EOL] }
public void testIsSupported_DurationFieldType() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.eras())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.centuries())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.years())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.months())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.weekyears())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.weeks())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.days())); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.hours())); [EOL]     assertEquals(false, test.isSupported((DurationFieldType) null)); [EOL] }
public void testIsSupported_DurationFieldType() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.eras())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.centuries())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.years())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.months())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.weekyears())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.weeks())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.days())); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.hours())); [EOL]     assertEquals(false, test.isSupported((DurationFieldType) null)); [EOL] }
public void testIsSupported_DurationFieldType() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.eras())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.centuries())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.years())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.months())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.weekyears())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.weeks())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.days())); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.hours())); [EOL]     assertEquals(false, test.isSupported((DurationFieldType) null)); [EOL] }
public void testIsSupported_DurationFieldType() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.eras())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.centuries())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.years())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.months())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.weekyears())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.weeks())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.days())); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.hours())); [EOL]     assertEquals(false, test.isSupported((DurationFieldType) null)); [EOL] }
public void testIsSupported_DurationFieldType() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.eras())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.centuries())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.years())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.months())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.weekyears())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.weeks())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.days())); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.hours())); [EOL]     assertEquals(false, test.isSupported((DurationFieldType) null)); [EOL] }
public void testIsSupported_DurationFieldType() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.eras())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.centuries())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.years())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.months())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.weekyears())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.weeks())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.days())); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.hours())); [EOL]     assertEquals(false, test.isSupported((DurationFieldType) null)); [EOL] }
public void testIsSupported_DurationFieldType() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.eras())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.centuries())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.years())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.months())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.weekyears())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.weeks())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.days())); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.hours())); [EOL]     assertEquals(false, test.isSupported((DurationFieldType) null)); [EOL] }
public void test_minutes() throws Exception { [EOL]     assertEquals(DurationFieldType.minutes(), DurationFieldType.minutes()); [EOL]     assertEquals("minutes", DurationFieldType.minutes().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().minutes(), DurationFieldType.minutes().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().minutes().isSupported(), DurationFieldType.minutes().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.minutes()); [EOL] }
public void test_minutes() throws Exception { [EOL]     assertEquals(DurationFieldType.minutes(), DurationFieldType.minutes()); [EOL]     assertEquals("minutes", DurationFieldType.minutes().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().minutes(), DurationFieldType.minutes().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().minutes().isSupported(), DurationFieldType.minutes().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.minutes()); [EOL] }
public void test_minutes() throws Exception { [EOL]     assertEquals(DurationFieldType.minutes(), DurationFieldType.minutes()); [EOL]     assertEquals("minutes", DurationFieldType.minutes().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().minutes(), DurationFieldType.minutes().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().minutes().isSupported(), DurationFieldType.minutes().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.minutes()); [EOL] }
public void test_minutes() throws Exception { [EOL]     assertEquals(DurationFieldType.minutes(), DurationFieldType.minutes()); [EOL]     assertEquals("minutes", DurationFieldType.minutes().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().minutes(), DurationFieldType.minutes().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().minutes().isSupported(), DurationFieldType.minutes().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.minutes()); [EOL] }
public void test_minutes() throws Exception { [EOL]     assertEquals(DurationFieldType.minutes(), DurationFieldType.minutes()); [EOL]     assertEquals("minutes", DurationFieldType.minutes().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().minutes(), DurationFieldType.minutes().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().minutes().isSupported(), DurationFieldType.minutes().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.minutes()); [EOL] }
public void test_minutes() throws Exception { [EOL]     assertEquals(DurationFieldType.minutes(), DurationFieldType.minutes()); [EOL]     assertEquals("minutes", DurationFieldType.minutes().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().minutes(), DurationFieldType.minutes().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().minutes().isSupported(), DurationFieldType.minutes().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.minutes()); [EOL] }
public void test_minutes() throws Exception { [EOL]     assertEquals(DurationFieldType.minutes(), DurationFieldType.minutes()); [EOL]     assertEquals("minutes", DurationFieldType.minutes().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().minutes(), DurationFieldType.minutes().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().minutes().isSupported(), DurationFieldType.minutes().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.minutes()); [EOL] }
public void test_minutes() throws Exception { [EOL]     assertEquals(DurationFieldType.minutes(), DurationFieldType.minutes()); [EOL]     assertEquals("minutes", DurationFieldType.minutes().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().minutes(), DurationFieldType.minutes().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().minutes().isSupported(), DurationFieldType.minutes().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.minutes()); [EOL] }
public void test_minutes() throws Exception { [EOL]     assertEquals(DurationFieldType.minutes(), DurationFieldType.minutes()); [EOL]     assertEquals("minutes", DurationFieldType.minutes().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().minutes(), DurationFieldType.minutes().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().minutes().isSupported(), DurationFieldType.minutes().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.minutes()); [EOL] }
public void test_minutes() throws Exception { [EOL]     assertEquals(DurationFieldType.minutes(), DurationFieldType.minutes()); [EOL]     assertEquals("minutes", DurationFieldType.minutes().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().minutes(), DurationFieldType.minutes().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().minutes().isSupported(), DurationFieldType.minutes().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.minutes()); [EOL] }
public void test_minutes() throws Exception { [EOL]     assertEquals(DurationFieldType.minutes(), DurationFieldType.minutes()); [EOL]     assertEquals("minutes", DurationFieldType.minutes().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().minutes(), DurationFieldType.minutes().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().minutes().isSupported(), DurationFieldType.minutes().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.minutes()); [EOL] }
public void test_minutes() throws Exception { [EOL]     assertEquals(DurationFieldType.minutes(), DurationFieldType.minutes()); [EOL]     assertEquals("minutes", DurationFieldType.minutes().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().minutes(), DurationFieldType.minutes().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().minutes().isSupported(), DurationFieldType.minutes().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.minutes()); [EOL] }
public void test_minutes() throws Exception { [EOL]     assertEquals(DurationFieldType.minutes(), DurationFieldType.minutes()); [EOL]     assertEquals("minutes", DurationFieldType.minutes().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().minutes(), DurationFieldType.minutes().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().minutes().isSupported(), DurationFieldType.minutes().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.minutes()); [EOL] }
public void testPropertyGetEra() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertSame(test.getChronology().era(), test.era().getField()); [EOL]     assertEquals("era", test.era().getName()); [EOL]     assertEquals("Property[era]", test.era().toString()); [EOL]     assertSame(test, test.era().getDateTime()); [EOL]     assertEquals(1, test.era().get()); [EOL]     assertEquals("1", test.era().getAsString()); [EOL]     assertEquals("AD", test.era().getAsText()); [EOL]     assertEquals("AD", test.era().getField().getAsText(1, Locale.ENGLISH)); [EOL]     assertEquals("ap. J.-C.", test.era().getAsText(Locale.FRENCH)); [EOL]     assertEquals("ap. J.-C.", test.era().getField().getAsText(1, Locale.FRENCH)); [EOL]     assertEquals("AD", test.era().getAsShortText()); [EOL]     assertEquals("AD", test.era().getField().getAsShortText(1, Locale.ENGLISH)); [EOL]     assertEquals("ap. J.-C.", test.era().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals("ap. J.-C.", test.era().getField().getAsShortText(1, Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().eras(), test.era().getDurationField()); [EOL]     assertEquals(null, test.era().getRangeDurationField()); [EOL]     assertEquals(2, test.era().getMaximumTextLength(null)); [EOL]     assertEquals(9, test.era().getMaximumTextLength(Locale.FRENCH)); [EOL]     assertEquals(2, test.era().getMaximumShortTextLength(null)); [EOL]     assertEquals(9, test.era().getMaximumShortTextLength(Locale.FRENCH)); [EOL] }
public void testPropertyGetEra() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertSame(test.getChronology().era(), test.era().getField()); [EOL]     assertEquals("era", test.era().getName()); [EOL]     assertEquals("Property[era]", test.era().toString()); [EOL]     assertSame(test, test.era().getDateTime()); [EOL]     assertEquals(1, test.era().get()); [EOL]     assertEquals("1", test.era().getAsString()); [EOL]     assertEquals("AD", test.era().getAsText()); [EOL]     assertEquals("AD", test.era().getField().getAsText(1, Locale.ENGLISH)); [EOL]     assertEquals("ap. J.-C.", test.era().getAsText(Locale.FRENCH)); [EOL]     assertEquals("ap. J.-C.", test.era().getField().getAsText(1, Locale.FRENCH)); [EOL]     assertEquals("AD", test.era().getAsShortText()); [EOL]     assertEquals("AD", test.era().getField().getAsShortText(1, Locale.ENGLISH)); [EOL]     assertEquals("ap. J.-C.", test.era().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals("ap. J.-C.", test.era().getField().getAsShortText(1, Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().eras(), test.era().getDurationField()); [EOL]     assertEquals(null, test.era().getRangeDurationField()); [EOL]     assertEquals(2, test.era().getMaximumTextLength(null)); [EOL]     assertEquals(9, test.era().getMaximumTextLength(Locale.FRENCH)); [EOL]     assertEquals(2, test.era().getMaximumShortTextLength(null)); [EOL]     assertEquals(9, test.era().getMaximumShortTextLength(Locale.FRENCH)); [EOL] }
public void testPropertyGetEra() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertSame(test.getChronology().era(), test.era().getField()); [EOL]     assertEquals("era", test.era().getName()); [EOL]     assertEquals("Property[era]", test.era().toString()); [EOL]     assertSame(test, test.era().getDateTime()); [EOL]     assertEquals(1, test.era().get()); [EOL]     assertEquals("1", test.era().getAsString()); [EOL]     assertEquals("AD", test.era().getAsText()); [EOL]     assertEquals("AD", test.era().getField().getAsText(1, Locale.ENGLISH)); [EOL]     assertEquals("ap. J.-C.", test.era().getAsText(Locale.FRENCH)); [EOL]     assertEquals("ap. J.-C.", test.era().getField().getAsText(1, Locale.FRENCH)); [EOL]     assertEquals("AD", test.era().getAsShortText()); [EOL]     assertEquals("AD", test.era().getField().getAsShortText(1, Locale.ENGLISH)); [EOL]     assertEquals("ap. J.-C.", test.era().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals("ap. J.-C.", test.era().getField().getAsShortText(1, Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().eras(), test.era().getDurationField()); [EOL]     assertEquals(null, test.era().getRangeDurationField()); [EOL]     assertEquals(2, test.era().getMaximumTextLength(null)); [EOL]     assertEquals(9, test.era().getMaximumTextLength(Locale.FRENCH)); [EOL]     assertEquals(2, test.era().getMaximumShortTextLength(null)); [EOL]     assertEquals(9, test.era().getMaximumShortTextLength(Locale.FRENCH)); [EOL] }
public void testPropertyGetEra() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertSame(test.getChronology().era(), test.era().getField()); [EOL]     assertEquals("era", test.era().getName()); [EOL]     assertEquals("Property[era]", test.era().toString()); [EOL]     assertSame(test, test.era().getDateTime()); [EOL]     assertEquals(1, test.era().get()); [EOL]     assertEquals("1", test.era().getAsString()); [EOL]     assertEquals("AD", test.era().getAsText()); [EOL]     assertEquals("AD", test.era().getField().getAsText(1, Locale.ENGLISH)); [EOL]     assertEquals("ap. J.-C.", test.era().getAsText(Locale.FRENCH)); [EOL]     assertEquals("ap. J.-C.", test.era().getField().getAsText(1, Locale.FRENCH)); [EOL]     assertEquals("AD", test.era().getAsShortText()); [EOL]     assertEquals("AD", test.era().getField().getAsShortText(1, Locale.ENGLISH)); [EOL]     assertEquals("ap. J.-C.", test.era().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals("ap. J.-C.", test.era().getField().getAsShortText(1, Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().eras(), test.era().getDurationField()); [EOL]     assertEquals(null, test.era().getRangeDurationField()); [EOL]     assertEquals(2, test.era().getMaximumTextLength(null)); [EOL]     assertEquals(9, test.era().getMaximumTextLength(Locale.FRENCH)); [EOL]     assertEquals(2, test.era().getMaximumShortTextLength(null)); [EOL]     assertEquals(9, test.era().getMaximumShortTextLength(Locale.FRENCH)); [EOL] }
public void testPropertyGetEra() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertSame(test.getChronology().era(), test.era().getField()); [EOL]     assertEquals("era", test.era().getName()); [EOL]     assertEquals("Property[era]", test.era().toString()); [EOL]     assertSame(test, test.era().getDateTime()); [EOL]     assertEquals(1, test.era().get()); [EOL]     assertEquals("1", test.era().getAsString()); [EOL]     assertEquals("AD", test.era().getAsText()); [EOL]     assertEquals("AD", test.era().getField().getAsText(1, Locale.ENGLISH)); [EOL]     assertEquals("ap. J.-C.", test.era().getAsText(Locale.FRENCH)); [EOL]     assertEquals("ap. J.-C.", test.era().getField().getAsText(1, Locale.FRENCH)); [EOL]     assertEquals("AD", test.era().getAsShortText()); [EOL]     assertEquals("AD", test.era().getField().getAsShortText(1, Locale.ENGLISH)); [EOL]     assertEquals("ap. J.-C.", test.era().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals("ap. J.-C.", test.era().getField().getAsShortText(1, Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().eras(), test.era().getDurationField()); [EOL]     assertEquals(null, test.era().getRangeDurationField()); [EOL]     assertEquals(2, test.era().getMaximumTextLength(null)); [EOL]     assertEquals(9, test.era().getMaximumTextLength(Locale.FRENCH)); [EOL]     assertEquals(2, test.era().getMaximumShortTextLength(null)); [EOL]     assertEquals(9, test.era().getMaximumShortTextLength(Locale.FRENCH)); [EOL] }
public void testPropertyGetEra() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertSame(test.getChronology().era(), test.era().getField()); [EOL]     assertEquals("era", test.era().getName()); [EOL]     assertEquals("Property[era]", test.era().toString()); [EOL]     assertSame(test, test.era().getDateTime()); [EOL]     assertEquals(1, test.era().get()); [EOL]     assertEquals("1", test.era().getAsString()); [EOL]     assertEquals("AD", test.era().getAsText()); [EOL]     assertEquals("AD", test.era().getField().getAsText(1, Locale.ENGLISH)); [EOL]     assertEquals("ap. J.-C.", test.era().getAsText(Locale.FRENCH)); [EOL]     assertEquals("ap. J.-C.", test.era().getField().getAsText(1, Locale.FRENCH)); [EOL]     assertEquals("AD", test.era().getAsShortText()); [EOL]     assertEquals("AD", test.era().getField().getAsShortText(1, Locale.ENGLISH)); [EOL]     assertEquals("ap. J.-C.", test.era().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals("ap. J.-C.", test.era().getField().getAsShortText(1, Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().eras(), test.era().getDurationField()); [EOL]     assertEquals(null, test.era().getRangeDurationField()); [EOL]     assertEquals(2, test.era().getMaximumTextLength(null)); [EOL]     assertEquals(9, test.era().getMaximumTextLength(Locale.FRENCH)); [EOL]     assertEquals(2, test.era().getMaximumShortTextLength(null)); [EOL]     assertEquals(9, test.era().getMaximumShortTextLength(Locale.FRENCH)); [EOL] }
public void testPropertyGetEra() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertSame(test.getChronology().era(), test.era().getField()); [EOL]     assertEquals("era", test.era().getName()); [EOL]     assertEquals("Property[era]", test.era().toString()); [EOL]     assertSame(test, test.era().getDateTime()); [EOL]     assertEquals(1, test.era().get()); [EOL]     assertEquals("1", test.era().getAsString()); [EOL]     assertEquals("AD", test.era().getAsText()); [EOL]     assertEquals("AD", test.era().getField().getAsText(1, Locale.ENGLISH)); [EOL]     assertEquals("ap. J.-C.", test.era().getAsText(Locale.FRENCH)); [EOL]     assertEquals("ap. J.-C.", test.era().getField().getAsText(1, Locale.FRENCH)); [EOL]     assertEquals("AD", test.era().getAsShortText()); [EOL]     assertEquals("AD", test.era().getField().getAsShortText(1, Locale.ENGLISH)); [EOL]     assertEquals("ap. J.-C.", test.era().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals("ap. J.-C.", test.era().getField().getAsShortText(1, Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().eras(), test.era().getDurationField()); [EOL]     assertEquals(null, test.era().getRangeDurationField()); [EOL]     assertEquals(2, test.era().getMaximumTextLength(null)); [EOL]     assertEquals(9, test.era().getMaximumTextLength(Locale.FRENCH)); [EOL]     assertEquals(2, test.era().getMaximumShortTextLength(null)); [EOL]     assertEquals(9, test.era().getMaximumShortTextLength(Locale.FRENCH)); [EOL] }
public void test_now_nullDateTimeZone() throws Throwable { [EOL]     try { [EOL]         MutableDateTime.now((DateTimeZone) null); [EOL]         fail(); [EOL]     } catch (NullPointerException ex) { [EOL]     } [EOL] }
public void test_now_nullDateTimeZone() throws Throwable { [EOL]     try { [EOL]         MutableDateTime.now((DateTimeZone) null); [EOL]         fail(); [EOL]     } catch (NullPointerException ex) { [EOL]     } [EOL] }
public void testRounding4() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_HALF_FLOOR); [EOL]     assertEquals("2002-06-09T05:00:00.000+01:00", test.toString()); [EOL]     assertEquals(MutableDateTime.ROUND_HALF_FLOOR, test.getRoundingMode()); [EOL]     assertEquals(ISOChronology.getInstance().hourOfDay(), test.getRoundingField()); [EOL]     test = new MutableDateTime(2002, 6, 9, 5, 30, 0, 0); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_HALF_FLOOR); [EOL]     assertEquals("2002-06-09T05:00:00.000+01:00", test.toString()); [EOL] }
public void testRounding4() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_HALF_FLOOR); [EOL]     assertEquals("2002-06-09T05:00:00.000+01:00", test.toString()); [EOL]     assertEquals(MutableDateTime.ROUND_HALF_FLOOR, test.getRoundingMode()); [EOL]     assertEquals(ISOChronology.getInstance().hourOfDay(), test.getRoundingField()); [EOL]     test = new MutableDateTime(2002, 6, 9, 5, 30, 0, 0); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_HALF_FLOOR); [EOL]     assertEquals("2002-06-09T05:00:00.000+01:00", test.toString()); [EOL] }
public void testRounding4() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_HALF_FLOOR); [EOL]     assertEquals("2002-06-09T05:00:00.000+01:00", test.toString()); [EOL]     assertEquals(MutableDateTime.ROUND_HALF_FLOOR, test.getRoundingMode()); [EOL]     assertEquals(ISOChronology.getInstance().hourOfDay(), test.getRoundingField()); [EOL]     test = new MutableDateTime(2002, 6, 9, 5, 30, 0, 0); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_HALF_FLOOR); [EOL]     assertEquals("2002-06-09T05:00:00.000+01:00", test.toString()); [EOL] }
public void testRounding4() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_HALF_FLOOR); [EOL]     assertEquals("2002-06-09T05:00:00.000+01:00", test.toString()); [EOL]     assertEquals(MutableDateTime.ROUND_HALF_FLOOR, test.getRoundingMode()); [EOL]     assertEquals(ISOChronology.getInstance().hourOfDay(), test.getRoundingField()); [EOL]     test = new MutableDateTime(2002, 6, 9, 5, 30, 0, 0); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_HALF_FLOOR); [EOL]     assertEquals("2002-06-09T05:00:00.000+01:00", test.toString()); [EOL] }
public void testRounding4() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_HALF_FLOOR); [EOL]     assertEquals("2002-06-09T05:00:00.000+01:00", test.toString()); [EOL]     assertEquals(MutableDateTime.ROUND_HALF_FLOOR, test.getRoundingMode()); [EOL]     assertEquals(ISOChronology.getInstance().hourOfDay(), test.getRoundingField()); [EOL]     test = new MutableDateTime(2002, 6, 9, 5, 30, 0, 0); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_HALF_FLOOR); [EOL]     assertEquals("2002-06-09T05:00:00.000+01:00", test.toString()); [EOL] }
public void testRounding4() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_HALF_FLOOR); [EOL]     assertEquals("2002-06-09T05:00:00.000+01:00", test.toString()); [EOL]     assertEquals(MutableDateTime.ROUND_HALF_FLOOR, test.getRoundingMode()); [EOL]     assertEquals(ISOChronology.getInstance().hourOfDay(), test.getRoundingField()); [EOL]     test = new MutableDateTime(2002, 6, 9, 5, 30, 0, 0); [EOL]     test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_HALF_FLOOR); [EOL]     assertEquals("2002-06-09T05:00:00.000+01:00", test.toString()); [EOL] }
public void testSetMillis_RI1() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1, BuddhistChronology.getInstance()); [EOL]     test.setMillis(new Instant(TEST_TIME2)); [EOL]     assertEquals(TEST_TIME2, test.getMillis()); [EOL]     assertEquals(BuddhistChronology.getInstance(), test.getChronology()); [EOL] }
public void testSetMillis_RI1() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1, BuddhistChronology.getInstance()); [EOL]     test.setMillis(new Instant(TEST_TIME2)); [EOL]     assertEquals(TEST_TIME2, test.getMillis()); [EOL]     assertEquals(BuddhistChronology.getInstance(), test.getChronology()); [EOL] }
public void testParseMutableDateTime_offsetParsed() { [EOL]     MutableDateTime expect = null; [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     assertEquals(expect, g.withOffsetParsed().parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 6, 20, 30, 0, DateTimeZone.forOffsetHours(-4)); [EOL]     assertEquals(expect, g.withOffsetParsed().parseMutableDateTime("2004-06-09T06:20:30-04:00")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     assertEquals(expect, g.withZone(PARIS).withOffsetParsed().parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS); [EOL]     assertEquals(expect, g.withOffsetParsed().withZone(PARIS).parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL] }
public void testSetZoneRetainFields_DateTimeZone2() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     test.setZoneRetainFields(null); [EOL]     assertEquals(TEST_TIME1, test.getMillis()); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL] }
public void testSetZoneRetainFields_DateTimeZone2() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     test.setZoneRetainFields(null); [EOL]     assertEquals(TEST_TIME1, test.getMillis()); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL] }
public void testAdd_DurationFieldType_int1() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     test.add(DurationFieldType.years(), 8); [EOL]     assertEquals(2010, test.getYear()); [EOL] }
public void testAdd_DurationFieldType_int1() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     test.add(DurationFieldType.years(), 8); [EOL]     assertEquals(2010, test.getYear()); [EOL] }
public void testAdd_DurationFieldType_int1() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     test.add(DurationFieldType.years(), 8); [EOL]     assertEquals(2010, test.getYear()); [EOL] }
public void testSetMonthOfYear_int_dstOverlapWinter_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     test.addHours(1); [EOL]     assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); [EOL] }
public void testSetMonthOfYear_int_dstOverlapWinter_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     test.addHours(1); [EOL]     assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); [EOL] }
public void testSetMonthOfYear_int_dstOverlapWinter_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     test.addHours(1); [EOL]     assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); [EOL] }
public void testSetDayOfWeek_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     test.setDayOfWeek(5); [EOL]     assertEquals("2002-06-07T05:06:07.008+01:00", test.toString()); [EOL] }
public void testSetDayOfWeek_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     test.setDayOfWeek(5); [EOL]     assertEquals("2002-06-07T05:06:07.008+01:00", test.toString()); [EOL] }
public void testSetMonthOfYear_int_dstOverlapWinter_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     test.addHours(1); [EOL]     assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); [EOL] }
public void testSetMonthOfYear_int_dstOverlapWinter_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     test.addHours(1); [EOL]     assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); [EOL] }
public void testSetMonthOfYear_int_dstOverlapWinter_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     test.addHours(1); [EOL]     assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); [EOL] }
public void testSetMinuteOfHour_int2() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     try { [EOL]         test.setMinuteOfHour(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals("2002-06-09T05:06:07.008+01:00", test.toString()); [EOL] }
public void testSetMinuteOfHour_int2() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     try { [EOL]         test.setMinuteOfHour(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals("2002-06-09T05:06:07.008+01:00", test.toString()); [EOL] }
public void testSetMinuteOfHour_int2() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     try { [EOL]         test.setMinuteOfHour(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals("2002-06-09T05:06:07.008+01:00", test.toString()); [EOL] }
public void testSetSecondOfMinute_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     test.setSecondOfMinute(13); [EOL]     assertEquals("2002-06-09T05:06:13.008+01:00", test.toString()); [EOL] }
public void testAddSeconds_int_dstOverlapWinter_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     test.addHours(1); [EOL]     assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); [EOL]     test.addSeconds(0); [EOL]     assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); [EOL] }
public void testAddSeconds_int_dstOverlapWinter_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     test.addHours(1); [EOL]     assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); [EOL]     test.addSeconds(0); [EOL]     assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); [EOL] }
public void testAddSeconds_int_dstOverlapWinter_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     test.addHours(1); [EOL]     assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); [EOL]     test.addSeconds(0); [EOL]     assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); [EOL] }
public void testSetDateTime_int_int_int_int_int_int_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 12, 24, 48, 501); [EOL]     test.setDateTime(2010, 12, 3, 5, 6, 7, 8); [EOL]     assertEquals(2010, test.getYear()); [EOL]     assertEquals(12, test.getMonthOfYear()); [EOL]     assertEquals(3, test.getDayOfMonth()); [EOL]     assertEquals(5, test.getHourOfDay()); [EOL]     assertEquals(6, test.getMinuteOfHour()); [EOL]     assertEquals(7, test.getSecondOfMinute()); [EOL]     assertEquals(8, test.getMillisOfSecond()); [EOL] }
public void testPropertyAddWeekOfWeekyear() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 7, 0, 0, 0, 0); [EOL]     test.weekOfWeekyear().add(1); [EOL]     assertEquals("2004-06-14T00:00:00.000+01:00", test.toString()); [EOL] }
public void testPropertyAddWeekOfWeekyear() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 7, 0, 0, 0, 0); [EOL]     test.weekOfWeekyear().add(1); [EOL]     assertEquals("2004-06-14T00:00:00.000+01:00", test.toString()); [EOL] }
public void testPropertyAddWeekOfWeekyear() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 7, 0, 0, 0, 0); [EOL]     test.weekOfWeekyear().add(1); [EOL]     assertEquals("2004-06-14T00:00:00.000+01:00", test.toString()); [EOL] }
public void testPropertyRoundHalfCeilingHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     test.hourOfDay().roundHalfCeiling(); [EOL]     assertEquals("2004-06-09T14:00:00.000+01:00", test.toString()); [EOL]     test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 1); [EOL]     test.hourOfDay().roundHalfCeiling(); [EOL]     assertEquals("2004-06-09T14:00:00.000+01:00", test.toString()); [EOL]     test = new MutableDateTime(2004, 6, 9, 13, 29, 59, 999); [EOL]     test.hourOfDay().roundHalfCeiling(); [EOL]     assertEquals("2004-06-09T13:00:00.000+01:00", test.toString()); [EOL] }
public void testPropertyRoundHalfCeilingHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     test.hourOfDay().roundHalfCeiling(); [EOL]     assertEquals("2004-06-09T14:00:00.000+01:00", test.toString()); [EOL]     test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 1); [EOL]     test.hourOfDay().roundHalfCeiling(); [EOL]     assertEquals("2004-06-09T14:00:00.000+01:00", test.toString()); [EOL]     test = new MutableDateTime(2004, 6, 9, 13, 29, 59, 999); [EOL]     test.hourOfDay().roundHalfCeiling(); [EOL]     assertEquals("2004-06-09T13:00:00.000+01:00", test.toString()); [EOL] }
public void testFactory_hoursBetween_RInstant() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 6, 9, 15, 0, 0, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 6, 9, 18, 0, 0, 0, PARIS); [EOL]     assertEquals(3, Hours.hoursBetween(start, end1).getHours()); [EOL]     assertEquals(0, Hours.hoursBetween(start, start).getHours()); [EOL]     assertEquals(0, Hours.hoursBetween(end1, end1).getHours()); [EOL]     assertEquals(-3, Hours.hoursBetween(end1, start).getHours()); [EOL]     assertEquals(6, Hours.hoursBetween(start, end2).getHours()); [EOL] }
public void testFactory_hoursBetween_RInstant() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 6, 9, 15, 0, 0, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 6, 9, 18, 0, 0, 0, PARIS); [EOL]     assertEquals(3, Hours.hoursBetween(start, end1).getHours()); [EOL]     assertEquals(0, Hours.hoursBetween(start, start).getHours()); [EOL]     assertEquals(0, Hours.hoursBetween(end1, end1).getHours()); [EOL]     assertEquals(-3, Hours.hoursBetween(end1, start).getHours()); [EOL]     assertEquals(6, Hours.hoursBetween(start, end2).getHours()); [EOL] }
public void testFactory_hoursIn_RInterval() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 6, 9, 15, 0, 0, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 6, 9, 18, 0, 0, 0, PARIS); [EOL]     assertEquals(0, Hours.hoursIn((ReadableInterval) null).getHours()); [EOL]     assertEquals(3, Hours.hoursIn(new Interval(start, end1)).getHours()); [EOL]     assertEquals(0, Hours.hoursIn(new Interval(start, start)).getHours()); [EOL]     assertEquals(0, Hours.hoursIn(new Interval(end1, end1)).getHours()); [EOL]     assertEquals(6, Hours.hoursIn(new Interval(start, end2)).getHours()); [EOL] }
public void testFactory_hoursIn_RInterval() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 6, 9, 15, 0, 0, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 6, 9, 18, 0, 0, 0, PARIS); [EOL]     assertEquals(0, Hours.hoursIn((ReadableInterval) null).getHours()); [EOL]     assertEquals(3, Hours.hoursIn(new Interval(start, end1)).getHours()); [EOL]     assertEquals(0, Hours.hoursIn(new Interval(start, start)).getHours()); [EOL]     assertEquals(0, Hours.hoursIn(new Interval(end1, end1)).getHours()); [EOL]     assertEquals(6, Hours.hoursIn(new Interval(start, end2)).getHours()); [EOL] }
public void testHours() { [EOL]     Hours test = Hours.hours(5); [EOL]     String str = StringConvert.INSTANCE.convertToString(test); [EOL]     assertEquals("PT5H", str); [EOL]     assertEquals(test, StringConvert.INSTANCE.convertFromString(Hours.class, str)); [EOL] }
public void testHours() { [EOL]     Hours test = Hours.hours(5); [EOL]     String str = StringConvert.INSTANCE.convertToString(test); [EOL]     assertEquals("PT5H", str); [EOL]     assertEquals(test, StringConvert.INSTANCE.convertFromString(Hours.class, str)); [EOL] }
public void testHours() { [EOL]     Hours test = Hours.hours(5); [EOL]     String str = StringConvert.INSTANCE.convertToString(test); [EOL]     assertEquals("PT5H", str); [EOL]     assertEquals(test, StringConvert.INSTANCE.convertFromString(Hours.class, str)); [EOL] }
public void testToStandardMinutes() { [EOL]     Hours test = Hours.hours(3); [EOL]     Minutes expected = Minutes.minutes(3 * 60); [EOL]     assertEquals(expected, test.toStandardMinutes()); [EOL]     try { [EOL]         Hours.MAX_VALUE.toStandardMinutes(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testToStandardMinutes() { [EOL]     Hours test = Hours.hours(3); [EOL]     Minutes expected = Minutes.minutes(3 * 60); [EOL]     assertEquals(expected, test.toStandardMinutes()); [EOL]     try { [EOL]         Hours.MAX_VALUE.toStandardMinutes(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testToStandardMinutes() { [EOL]     Hours test = Hours.hours(3); [EOL]     Minutes expected = Minutes.minutes(3 * 60); [EOL]     assertEquals(expected, test.toStandardMinutes()); [EOL]     try { [EOL]         Hours.MAX_VALUE.toStandardMinutes(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMinus_Hours() { [EOL]     Hours test2 = Hours.hours(2); [EOL]     Hours test3 = Hours.hours(3); [EOL]     Hours result = test2.minus(test3); [EOL]     assertEquals(2, test2.getHours()); [EOL]     assertEquals(3, test3.getHours()); [EOL]     assertEquals(-1, result.getHours()); [EOL]     assertEquals(1, Hours.ONE.minus(Hours.ZERO).getHours()); [EOL]     assertEquals(1, Hours.ONE.minus((Hours) null).getHours()); [EOL]     try { [EOL]         Hours.MIN_VALUE.minus(Hours.ONE); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMinus_Hours() { [EOL]     Hours test2 = Hours.hours(2); [EOL]     Hours test3 = Hours.hours(3); [EOL]     Hours result = test2.minus(test3); [EOL]     assertEquals(2, test2.getHours()); [EOL]     assertEquals(3, test3.getHours()); [EOL]     assertEquals(-1, result.getHours()); [EOL]     assertEquals(1, Hours.ONE.minus(Hours.ZERO).getHours()); [EOL]     assertEquals(1, Hours.ONE.minus((Hours) null).getHours()); [EOL]     try { [EOL]         Hours.MIN_VALUE.minus(Hours.ONE); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testToString() { [EOL]     Hours test = Hours.hours(20); [EOL]     assertEquals("PT20H", test.toString()); [EOL]     test = Hours.hours(-20); [EOL]     assertEquals("PT-20H", test.toString()); [EOL] }
public void testToString() { [EOL]     Hours test = Hours.hours(20); [EOL]     assertEquals("PT20H", test.toString()); [EOL]     test = Hours.hours(-20); [EOL]     assertEquals("PT-20H", test.toString()); [EOL] }
public void testToString() { [EOL]     Hours test = Hours.hours(20); [EOL]     assertEquals("PT20H", test.toString()); [EOL]     test = Hours.hours(-20); [EOL]     assertEquals("PT-20H", test.toString()); [EOL] }
public void testAddNullRemoved2() { [EOL]     Converter[] array = new Converter[] { c1, c2, c3, c4 }; [EOL]     ConverterSet set = new ConverterSet(array); [EOL]     ConverterSet result = set.add(c4, null); [EOL]     assertSame(set, result); [EOL] }
public void testAddNullRemoved2() { [EOL]     Converter[] array = new Converter[] { c1, c2, c3, c4 }; [EOL]     ConverterSet set = new ConverterSet(array); [EOL]     ConverterSet result = set.add(c4, null); [EOL]     assertSame(set, result); [EOL] }
public void testAddNullRemoved2() { [EOL]     Converter[] array = new Converter[] { c1, c2, c3, c4 }; [EOL]     ConverterSet set = new ConverterSet(array); [EOL]     ConverterSet result = set.add(c4, null); [EOL]     assertSame(set, result); [EOL] }
public void testAddNullRemoved2() { [EOL]     Converter[] array = new Converter[] { c1, c2, c3, c4 }; [EOL]     ConverterSet set = new ConverterSet(array); [EOL]     ConverterSet result = set.add(c4, null); [EOL]     assertSame(set, result); [EOL] }
public void testAddNullRemoved2() { [EOL]     Converter[] array = new Converter[] { c1, c2, c3, c4 }; [EOL]     ConverterSet set = new ConverterSet(array); [EOL]     ConverterSet result = set.add(c4, null); [EOL]     assertSame(set, result); [EOL] }
public void testAddNullRemoved2() { [EOL]     Converter[] array = new Converter[] { c1, c2, c3, c4 }; [EOL]     ConverterSet set = new ConverterSet(array); [EOL]     ConverterSet result = set.add(c4, null); [EOL]     assertSame(set, result); [EOL] }
public void testConstructor_badconverterObject_DateTimeZone() throws Throwable { [EOL]     try { [EOL]         ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE); [EOL]         DateMidnight test = new DateMidnight(new Integer(0), GregorianChronology.getInstance()); [EOL]         assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]         assertEquals(0L - DateTimeConstants.MILLIS_PER_HOUR, test.getMillis()); [EOL]     } finally { [EOL]         ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE); [EOL]     } [EOL] }
public void testConstructor_badconverterObject_DateTimeZone() throws Throwable { [EOL]     try { [EOL]         ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE); [EOL]         DateMidnight test = new DateMidnight(new Integer(0), GregorianChronology.getInstance()); [EOL]         assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]         assertEquals(0L - DateTimeConstants.MILLIS_PER_HOUR, test.getMillis()); [EOL]     } finally { [EOL]         ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE); [EOL]     } [EOL] }
public void testConstructor_badconverterObject_DateTimeZone() throws Throwable { [EOL]     try { [EOL]         ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE); [EOL]         DateMidnight test = new DateMidnight(new Integer(0), GregorianChronology.getInstance()); [EOL]         assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]         assertEquals(0L - DateTimeConstants.MILLIS_PER_HOUR, test.getMillis()); [EOL]     } finally { [EOL]         ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE); [EOL]     } [EOL] }
public void testToString_String_Locale() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals("10 20", test.toString("H m", Locale.ENGLISH)); [EOL]     assertEquals("10:20:30.040", test.toString(null, Locale.ENGLISH)); [EOL]     assertEquals("10 20", test.toString("H m", null)); [EOL]     assertEquals("10:20:30.040", test.toString(null, null)); [EOL] }
public void testToString_String_Locale() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals("10 20", test.toString("H m", Locale.ENGLISH)); [EOL]     assertEquals("10:20:30.040", test.toString(null, Locale.ENGLISH)); [EOL]     assertEquals("10 20", test.toString("H m", null)); [EOL]     assertEquals("10:20:30.040", test.toString(null, null)); [EOL] }
public void testToString_String_Locale() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals("10 20", test.toString("H m", Locale.ENGLISH)); [EOL]     assertEquals("10:20:30.040", test.toString(null, Locale.ENGLISH)); [EOL]     assertEquals("10 20", test.toString("H m", null)); [EOL]     assertEquals("10:20:30.040", test.toString(null, null)); [EOL] }
public void testToString_String_Locale() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals("10 20", test.toString("H m", Locale.ENGLISH)); [EOL]     assertEquals("10:20:30.040", test.toString(null, Locale.ENGLISH)); [EOL]     assertEquals("10 20", test.toString("H m", null)); [EOL]     assertEquals("10:20:30.040", test.toString(null, null)); [EOL] }
public void testToString_String_Locale() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals("10 20", test.toString("H m", Locale.ENGLISH)); [EOL]     assertEquals("10:20:30.040", test.toString(null, Locale.ENGLISH)); [EOL]     assertEquals("10 20", test.toString("H m", null)); [EOL]     assertEquals("10:20:30.040", test.toString(null, null)); [EOL] }
public void testToString_String_Locale() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals("10 20", test.toString("H m", Locale.ENGLISH)); [EOL]     assertEquals("10:20:30.040", test.toString(null, Locale.ENGLISH)); [EOL]     assertEquals("10 20", test.toString("H m", null)); [EOL]     assertEquals("10:20:30.040", test.toString(null, null)); [EOL] }
public void test_appendFixedDecimal() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.year(), 4); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     assertEquals("2007", f.print(new DateTime("2007-01-01"))); [EOL]     assertEquals("0123", f.print(new DateTime("123-01-01"))); [EOL]     assertEquals("0001", f.print(new DateTime("1-2-3"))); [EOL]     assertEquals("99999", f.print(new DateTime("99999-2-3"))); [EOL]     assertEquals("-0099", f.print(new DateTime("-99-2-3"))); [EOL]     assertEquals("0000", f.print(new DateTime("0-2-3"))); [EOL]     assertEquals(2001, f.parseDateTime("2001").getYear()); [EOL]     try { [EOL]         f.parseDateTime("-2001"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("200"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("20016"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.hourOfDay(), 2); [EOL]     bld.appendLiteral(':'); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.minuteOfHour(), 2); [EOL]     bld.appendLiteral(':'); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.secondOfMinute(), 2); [EOL]     f = bld.toFormatter(); [EOL]     assertEquals("01:02:34", f.print(new DateTime("T1:2:34"))); [EOL]     DateTime dt = f.parseDateTime("01:02:34"); [EOL]     assertEquals(1, dt.getHourOfDay()); [EOL]     assertEquals(2, dt.getMinuteOfHour()); [EOL]     assertEquals(34, dt.getSecondOfMinute()); [EOL]     try { [EOL]         f.parseDateTime("0145:02:34"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("01:0:34"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL] }
public void test_appendFixedDecimal() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.year(), 4); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     assertEquals("2007", f.print(new DateTime("2007-01-01"))); [EOL]     assertEquals("0123", f.print(new DateTime("123-01-01"))); [EOL]     assertEquals("0001", f.print(new DateTime("1-2-3"))); [EOL]     assertEquals("99999", f.print(new DateTime("99999-2-3"))); [EOL]     assertEquals("-0099", f.print(new DateTime("-99-2-3"))); [EOL]     assertEquals("0000", f.print(new DateTime("0-2-3"))); [EOL]     assertEquals(2001, f.parseDateTime("2001").getYear()); [EOL]     try { [EOL]         f.parseDateTime("-2001"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("200"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("20016"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.hourOfDay(), 2); [EOL]     bld.appendLiteral(':'); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.minuteOfHour(), 2); [EOL]     bld.appendLiteral(':'); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.secondOfMinute(), 2); [EOL]     f = bld.toFormatter(); [EOL]     assertEquals("01:02:34", f.print(new DateTime("T1:2:34"))); [EOL]     DateTime dt = f.parseDateTime("01:02:34"); [EOL]     assertEquals(1, dt.getHourOfDay()); [EOL]     assertEquals(2, dt.getMinuteOfHour()); [EOL]     assertEquals(34, dt.getSecondOfMinute()); [EOL]     try { [EOL]         f.parseDateTime("0145:02:34"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("01:0:34"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL] }
public void test_appendFixedDecimal() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.year(), 4); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     assertEquals("2007", f.print(new DateTime("2007-01-01"))); [EOL]     assertEquals("0123", f.print(new DateTime("123-01-01"))); [EOL]     assertEquals("0001", f.print(new DateTime("1-2-3"))); [EOL]     assertEquals("99999", f.print(new DateTime("99999-2-3"))); [EOL]     assertEquals("-0099", f.print(new DateTime("-99-2-3"))); [EOL]     assertEquals("0000", f.print(new DateTime("0-2-3"))); [EOL]     assertEquals(2001, f.parseDateTime("2001").getYear()); [EOL]     try { [EOL]         f.parseDateTime("-2001"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("200"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("20016"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.hourOfDay(), 2); [EOL]     bld.appendLiteral(':'); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.minuteOfHour(), 2); [EOL]     bld.appendLiteral(':'); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.secondOfMinute(), 2); [EOL]     f = bld.toFormatter(); [EOL]     assertEquals("01:02:34", f.print(new DateTime("T1:2:34"))); [EOL]     DateTime dt = f.parseDateTime("01:02:34"); [EOL]     assertEquals(1, dt.getHourOfDay()); [EOL]     assertEquals(2, dt.getMinuteOfHour()); [EOL]     assertEquals(34, dt.getSecondOfMinute()); [EOL]     try { [EOL]         f.parseDateTime("0145:02:34"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("01:0:34"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL] }
public void test_appendFixedDecimal() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.year(), 4); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     assertEquals("2007", f.print(new DateTime("2007-01-01"))); [EOL]     assertEquals("0123", f.print(new DateTime("123-01-01"))); [EOL]     assertEquals("0001", f.print(new DateTime("1-2-3"))); [EOL]     assertEquals("99999", f.print(new DateTime("99999-2-3"))); [EOL]     assertEquals("-0099", f.print(new DateTime("-99-2-3"))); [EOL]     assertEquals("0000", f.print(new DateTime("0-2-3"))); [EOL]     assertEquals(2001, f.parseDateTime("2001").getYear()); [EOL]     try { [EOL]         f.parseDateTime("-2001"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("200"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("20016"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.hourOfDay(), 2); [EOL]     bld.appendLiteral(':'); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.minuteOfHour(), 2); [EOL]     bld.appendLiteral(':'); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.secondOfMinute(), 2); [EOL]     f = bld.toFormatter(); [EOL]     assertEquals("01:02:34", f.print(new DateTime("T1:2:34"))); [EOL]     DateTime dt = f.parseDateTime("01:02:34"); [EOL]     assertEquals(1, dt.getHourOfDay()); [EOL]     assertEquals(2, dt.getMinuteOfHour()); [EOL]     assertEquals(34, dt.getSecondOfMinute()); [EOL]     try { [EOL]         f.parseDateTime("0145:02:34"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("01:0:34"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL] }
public void test_appendFixedSignedDecimal() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendFixedSignedDecimal(DateTimeFieldType.year(), 4); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     assertEquals("2007", f.print(new DateTime("2007-01-01"))); [EOL]     assertEquals("0123", f.print(new DateTime("123-01-01"))); [EOL]     assertEquals("0001", f.print(new DateTime("1-2-3"))); [EOL]     assertEquals("99999", f.print(new DateTime("99999-2-3"))); [EOL]     assertEquals("-0099", f.print(new DateTime("-99-2-3"))); [EOL]     assertEquals("0000", f.print(new DateTime("0-2-3"))); [EOL]     assertEquals(2001, f.parseDateTime("2001").getYear()); [EOL]     assertEquals(-2001, f.parseDateTime("-2001").getYear()); [EOL]     assertEquals(2001, f.parseDateTime("+2001").getYear()); [EOL]     try { [EOL]         f.parseDateTime("20016"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL] }
public void test_appendFixedSignedDecimal() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendFixedSignedDecimal(DateTimeFieldType.year(), 4); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     assertEquals("2007", f.print(new DateTime("2007-01-01"))); [EOL]     assertEquals("0123", f.print(new DateTime("123-01-01"))); [EOL]     assertEquals("0001", f.print(new DateTime("1-2-3"))); [EOL]     assertEquals("99999", f.print(new DateTime("99999-2-3"))); [EOL]     assertEquals("-0099", f.print(new DateTime("-99-2-3"))); [EOL]     assertEquals("0000", f.print(new DateTime("0-2-3"))); [EOL]     assertEquals(2001, f.parseDateTime("2001").getYear()); [EOL]     assertEquals(-2001, f.parseDateTime("-2001").getYear()); [EOL]     assertEquals(2001, f.parseDateTime("+2001").getYear()); [EOL]     try { [EOL]         f.parseDateTime("20016"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL] }
public void test_appendFixedSignedDecimal() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendFixedSignedDecimal(DateTimeFieldType.year(), 4); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     assertEquals("2007", f.print(new DateTime("2007-01-01"))); [EOL]     assertEquals("0123", f.print(new DateTime("123-01-01"))); [EOL]     assertEquals("0001", f.print(new DateTime("1-2-3"))); [EOL]     assertEquals("99999", f.print(new DateTime("99999-2-3"))); [EOL]     assertEquals("-0099", f.print(new DateTime("-99-2-3"))); [EOL]     assertEquals("0000", f.print(new DateTime("0-2-3"))); [EOL]     assertEquals(2001, f.parseDateTime("2001").getYear()); [EOL]     assertEquals(-2001, f.parseDateTime("-2001").getYear()); [EOL]     assertEquals(2001, f.parseDateTime("+2001").getYear()); [EOL]     try { [EOL]         f.parseDateTime("20016"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL] }
public void test_appendFixedSignedDecimal() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendFixedSignedDecimal(DateTimeFieldType.year(), 4); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     assertEquals("2007", f.print(new DateTime("2007-01-01"))); [EOL]     assertEquals("0123", f.print(new DateTime("123-01-01"))); [EOL]     assertEquals("0001", f.print(new DateTime("1-2-3"))); [EOL]     assertEquals("99999", f.print(new DateTime("99999-2-3"))); [EOL]     assertEquals("-0099", f.print(new DateTime("-99-2-3"))); [EOL]     assertEquals("0000", f.print(new DateTime("0-2-3"))); [EOL]     assertEquals(2001, f.parseDateTime("2001").getYear()); [EOL]     assertEquals(-2001, f.parseDateTime("-2001").getYear()); [EOL]     assertEquals(2001, f.parseDateTime("+2001").getYear()); [EOL]     try { [EOL]         f.parseDateTime("20016"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL] }
public void testFormat_dayOfWeekText() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("EEEE").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "Wednesday", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals(dt.toString(), "Wednesday", f.print(dt)); [EOL]     dt = dt.withZone(TOKYO); [EOL]     assertEquals(dt.toString(), "Wednesday", f.print(dt)); [EOL]     f = f.withLocale(Locale.FRENCH); [EOL]     assertEquals(dt.toString(), "mercredi", f.print(dt)); [EOL] }
public void test_appendFixedDecimal() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.year(), 4); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     assertEquals("2007", f.print(new DateTime("2007-01-01"))); [EOL]     assertEquals("0123", f.print(new DateTime("123-01-01"))); [EOL]     assertEquals("0001", f.print(new DateTime("1-2-3"))); [EOL]     assertEquals("99999", f.print(new DateTime("99999-2-3"))); [EOL]     assertEquals("-0099", f.print(new DateTime("-99-2-3"))); [EOL]     assertEquals("0000", f.print(new DateTime("0-2-3"))); [EOL]     assertEquals(2001, f.parseDateTime("2001").getYear()); [EOL]     try { [EOL]         f.parseDateTime("-2001"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("200"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("20016"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.hourOfDay(), 2); [EOL]     bld.appendLiteral(':'); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.minuteOfHour(), 2); [EOL]     bld.appendLiteral(':'); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.secondOfMinute(), 2); [EOL]     f = bld.toFormatter(); [EOL]     assertEquals("01:02:34", f.print(new DateTime("T1:2:34"))); [EOL]     DateTime dt = f.parseDateTime("01:02:34"); [EOL]     assertEquals(1, dt.getHourOfDay()); [EOL]     assertEquals(2, dt.getMinuteOfHour()); [EOL]     assertEquals(34, dt.getSecondOfMinute()); [EOL]     try { [EOL]         f.parseDateTime("0145:02:34"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("01:0:34"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL] }
public void test_appendFixedDecimal() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.year(), 4); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     assertEquals("2007", f.print(new DateTime("2007-01-01"))); [EOL]     assertEquals("0123", f.print(new DateTime("123-01-01"))); [EOL]     assertEquals("0001", f.print(new DateTime("1-2-3"))); [EOL]     assertEquals("99999", f.print(new DateTime("99999-2-3"))); [EOL]     assertEquals("-0099", f.print(new DateTime("-99-2-3"))); [EOL]     assertEquals("0000", f.print(new DateTime("0-2-3"))); [EOL]     assertEquals(2001, f.parseDateTime("2001").getYear()); [EOL]     try { [EOL]         f.parseDateTime("-2001"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("200"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("20016"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.hourOfDay(), 2); [EOL]     bld.appendLiteral(':'); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.minuteOfHour(), 2); [EOL]     bld.appendLiteral(':'); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.secondOfMinute(), 2); [EOL]     f = bld.toFormatter(); [EOL]     assertEquals("01:02:34", f.print(new DateTime("T1:2:34"))); [EOL]     DateTime dt = f.parseDateTime("01:02:34"); [EOL]     assertEquals(1, dt.getHourOfDay()); [EOL]     assertEquals(2, dt.getMinuteOfHour()); [EOL]     assertEquals(34, dt.getSecondOfMinute()); [EOL]     try { [EOL]         f.parseDateTime("0145:02:34"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("01:0:34"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL] }
public void test_appendFixedDecimal() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.year(), 4); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     assertEquals("2007", f.print(new DateTime("2007-01-01"))); [EOL]     assertEquals("0123", f.print(new DateTime("123-01-01"))); [EOL]     assertEquals("0001", f.print(new DateTime("1-2-3"))); [EOL]     assertEquals("99999", f.print(new DateTime("99999-2-3"))); [EOL]     assertEquals("-0099", f.print(new DateTime("-99-2-3"))); [EOL]     assertEquals("0000", f.print(new DateTime("0-2-3"))); [EOL]     assertEquals(2001, f.parseDateTime("2001").getYear()); [EOL]     try { [EOL]         f.parseDateTime("-2001"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("200"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("20016"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.hourOfDay(), 2); [EOL]     bld.appendLiteral(':'); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.minuteOfHour(), 2); [EOL]     bld.appendLiteral(':'); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.secondOfMinute(), 2); [EOL]     f = bld.toFormatter(); [EOL]     assertEquals("01:02:34", f.print(new DateTime("T1:2:34"))); [EOL]     DateTime dt = f.parseDateTime("01:02:34"); [EOL]     assertEquals(1, dt.getHourOfDay()); [EOL]     assertEquals(2, dt.getMinuteOfHour()); [EOL]     assertEquals(34, dt.getSecondOfMinute()); [EOL]     try { [EOL]         f.parseDateTime("0145:02:34"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("01:0:34"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL] }
public void test_appendFixedDecimal() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.year(), 4); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     assertEquals("2007", f.print(new DateTime("2007-01-01"))); [EOL]     assertEquals("0123", f.print(new DateTime("123-01-01"))); [EOL]     assertEquals("0001", f.print(new DateTime("1-2-3"))); [EOL]     assertEquals("99999", f.print(new DateTime("99999-2-3"))); [EOL]     assertEquals("-0099", f.print(new DateTime("-99-2-3"))); [EOL]     assertEquals("0000", f.print(new DateTime("0-2-3"))); [EOL]     assertEquals(2001, f.parseDateTime("2001").getYear()); [EOL]     try { [EOL]         f.parseDateTime("-2001"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("200"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("20016"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.hourOfDay(), 2); [EOL]     bld.appendLiteral(':'); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.minuteOfHour(), 2); [EOL]     bld.appendLiteral(':'); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.secondOfMinute(), 2); [EOL]     f = bld.toFormatter(); [EOL]     assertEquals("01:02:34", f.print(new DateTime("T1:2:34"))); [EOL]     DateTime dt = f.parseDateTime("01:02:34"); [EOL]     assertEquals(1, dt.getHourOfDay()); [EOL]     assertEquals(2, dt.getMinuteOfHour()); [EOL]     assertEquals(34, dt.getSecondOfMinute()); [EOL]     try { [EOL]         f.parseDateTime("0145:02:34"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("01:0:34"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL] }
public void test_appendFixedDecimal() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.year(), 4); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     assertEquals("2007", f.print(new DateTime("2007-01-01"))); [EOL]     assertEquals("0123", f.print(new DateTime("123-01-01"))); [EOL]     assertEquals("0001", f.print(new DateTime("1-2-3"))); [EOL]     assertEquals("99999", f.print(new DateTime("99999-2-3"))); [EOL]     assertEquals("-0099", f.print(new DateTime("-99-2-3"))); [EOL]     assertEquals("0000", f.print(new DateTime("0-2-3"))); [EOL]     assertEquals(2001, f.parseDateTime("2001").getYear()); [EOL]     try { [EOL]         f.parseDateTime("-2001"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("200"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("20016"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.hourOfDay(), 2); [EOL]     bld.appendLiteral(':'); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.minuteOfHour(), 2); [EOL]     bld.appendLiteral(':'); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.secondOfMinute(), 2); [EOL]     f = bld.toFormatter(); [EOL]     assertEquals("01:02:34", f.print(new DateTime("T1:2:34"))); [EOL]     DateTime dt = f.parseDateTime("01:02:34"); [EOL]     assertEquals(1, dt.getHourOfDay()); [EOL]     assertEquals(2, dt.getMinuteOfHour()); [EOL]     assertEquals(34, dt.getSecondOfMinute()); [EOL]     try { [EOL]         f.parseDateTime("0145:02:34"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("01:0:34"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL] }
public void test_appendFixedDecimal() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.year(), 4); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     assertEquals("2007", f.print(new DateTime("2007-01-01"))); [EOL]     assertEquals("0123", f.print(new DateTime("123-01-01"))); [EOL]     assertEquals("0001", f.print(new DateTime("1-2-3"))); [EOL]     assertEquals("99999", f.print(new DateTime("99999-2-3"))); [EOL]     assertEquals("-0099", f.print(new DateTime("-99-2-3"))); [EOL]     assertEquals("0000", f.print(new DateTime("0-2-3"))); [EOL]     assertEquals(2001, f.parseDateTime("2001").getYear()); [EOL]     try { [EOL]         f.parseDateTime("-2001"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("200"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("20016"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.hourOfDay(), 2); [EOL]     bld.appendLiteral(':'); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.minuteOfHour(), 2); [EOL]     bld.appendLiteral(':'); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.secondOfMinute(), 2); [EOL]     f = bld.toFormatter(); [EOL]     assertEquals("01:02:34", f.print(new DateTime("T1:2:34"))); [EOL]     DateTime dt = f.parseDateTime("01:02:34"); [EOL]     assertEquals(1, dt.getHourOfDay()); [EOL]     assertEquals(2, dt.getMinuteOfHour()); [EOL]     assertEquals(34, dt.getSecondOfMinute()); [EOL]     try { [EOL]         f.parseDateTime("0145:02:34"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("01:0:34"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL] }
public void testToString_String_Locale() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals("10 20", test.toString("H m", Locale.ENGLISH)); [EOL]     assertEquals("10:20:30.040", test.toString(null, Locale.ENGLISH)); [EOL]     assertEquals("10 20", test.toString("H m", null)); [EOL]     assertEquals("10:20:30.040", test.toString(null, null)); [EOL] }
public void testToString_String_Locale() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals("10 20", test.toString("H m", Locale.ENGLISH)); [EOL]     assertEquals("10:20:30.040", test.toString(null, Locale.ENGLISH)); [EOL]     assertEquals("10 20", test.toString("H m", null)); [EOL]     assertEquals("10:20:30.040", test.toString(null, null)); [EOL] }
public void testToString_String_Locale() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals("10 20", test.toString("H m", Locale.ENGLISH)); [EOL]     assertEquals("10:20:30.040", test.toString(null, Locale.ENGLISH)); [EOL]     assertEquals("10 20", test.toString("H m", null)); [EOL]     assertEquals("10:20:30.040", test.toString(null, null)); [EOL] }
public void testToString_String_Locale() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals("10 20", test.toString("H m", Locale.ENGLISH)); [EOL]     assertEquals("10:20:30.040", test.toString(null, Locale.ENGLISH)); [EOL]     assertEquals("10 20", test.toString("H m", null)); [EOL]     assertEquals("10:20:30.040", test.toString(null, null)); [EOL] }
public void test_appendFixedDecimal() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.year(), 4); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     assertEquals("2007", f.print(new DateTime("2007-01-01"))); [EOL]     assertEquals("0123", f.print(new DateTime("123-01-01"))); [EOL]     assertEquals("0001", f.print(new DateTime("1-2-3"))); [EOL]     assertEquals("99999", f.print(new DateTime("99999-2-3"))); [EOL]     assertEquals("-0099", f.print(new DateTime("-99-2-3"))); [EOL]     assertEquals("0000", f.print(new DateTime("0-2-3"))); [EOL]     assertEquals(2001, f.parseDateTime("2001").getYear()); [EOL]     try { [EOL]         f.parseDateTime("-2001"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("200"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("20016"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.hourOfDay(), 2); [EOL]     bld.appendLiteral(':'); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.minuteOfHour(), 2); [EOL]     bld.appendLiteral(':'); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.secondOfMinute(), 2); [EOL]     f = bld.toFormatter(); [EOL]     assertEquals("01:02:34", f.print(new DateTime("T1:2:34"))); [EOL]     DateTime dt = f.parseDateTime("01:02:34"); [EOL]     assertEquals(1, dt.getHourOfDay()); [EOL]     assertEquals(2, dt.getMinuteOfHour()); [EOL]     assertEquals(34, dt.getSecondOfMinute()); [EOL]     try { [EOL]         f.parseDateTime("0145:02:34"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("01:0:34"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL] }
public void test_appendFixedDecimal() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.year(), 4); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     assertEquals("2007", f.print(new DateTime("2007-01-01"))); [EOL]     assertEquals("0123", f.print(new DateTime("123-01-01"))); [EOL]     assertEquals("0001", f.print(new DateTime("1-2-3"))); [EOL]     assertEquals("99999", f.print(new DateTime("99999-2-3"))); [EOL]     assertEquals("-0099", f.print(new DateTime("-99-2-3"))); [EOL]     assertEquals("0000", f.print(new DateTime("0-2-3"))); [EOL]     assertEquals(2001, f.parseDateTime("2001").getYear()); [EOL]     try { [EOL]         f.parseDateTime("-2001"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("200"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("20016"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.hourOfDay(), 2); [EOL]     bld.appendLiteral(':'); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.minuteOfHour(), 2); [EOL]     bld.appendLiteral(':'); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.secondOfMinute(), 2); [EOL]     f = bld.toFormatter(); [EOL]     assertEquals("01:02:34", f.print(new DateTime("T1:2:34"))); [EOL]     DateTime dt = f.parseDateTime("01:02:34"); [EOL]     assertEquals(1, dt.getHourOfDay()); [EOL]     assertEquals(2, dt.getMinuteOfHour()); [EOL]     assertEquals(34, dt.getSecondOfMinute()); [EOL]     try { [EOL]         f.parseDateTime("0145:02:34"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("01:0:34"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL] }
public void test_appendFixedDecimal() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.year(), 4); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     assertEquals("2007", f.print(new DateTime("2007-01-01"))); [EOL]     assertEquals("0123", f.print(new DateTime("123-01-01"))); [EOL]     assertEquals("0001", f.print(new DateTime("1-2-3"))); [EOL]     assertEquals("99999", f.print(new DateTime("99999-2-3"))); [EOL]     assertEquals("-0099", f.print(new DateTime("-99-2-3"))); [EOL]     assertEquals("0000", f.print(new DateTime("0-2-3"))); [EOL]     assertEquals(2001, f.parseDateTime("2001").getYear()); [EOL]     try { [EOL]         f.parseDateTime("-2001"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("200"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("20016"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.hourOfDay(), 2); [EOL]     bld.appendLiteral(':'); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.minuteOfHour(), 2); [EOL]     bld.appendLiteral(':'); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.secondOfMinute(), 2); [EOL]     f = bld.toFormatter(); [EOL]     assertEquals("01:02:34", f.print(new DateTime("T1:2:34"))); [EOL]     DateTime dt = f.parseDateTime("01:02:34"); [EOL]     assertEquals(1, dt.getHourOfDay()); [EOL]     assertEquals(2, dt.getMinuteOfHour()); [EOL]     assertEquals(34, dt.getSecondOfMinute()); [EOL]     try { [EOL]         f.parseDateTime("0145:02:34"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("01:0:34"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL] }
public void test_appendFixedDecimal() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.year(), 4); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     assertEquals("2007", f.print(new DateTime("2007-01-01"))); [EOL]     assertEquals("0123", f.print(new DateTime("123-01-01"))); [EOL]     assertEquals("0001", f.print(new DateTime("1-2-3"))); [EOL]     assertEquals("99999", f.print(new DateTime("99999-2-3"))); [EOL]     assertEquals("-0099", f.print(new DateTime("-99-2-3"))); [EOL]     assertEquals("0000", f.print(new DateTime("0-2-3"))); [EOL]     assertEquals(2001, f.parseDateTime("2001").getYear()); [EOL]     try { [EOL]         f.parseDateTime("-2001"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("200"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("20016"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.hourOfDay(), 2); [EOL]     bld.appendLiteral(':'); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.minuteOfHour(), 2); [EOL]     bld.appendLiteral(':'); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.secondOfMinute(), 2); [EOL]     f = bld.toFormatter(); [EOL]     assertEquals("01:02:34", f.print(new DateTime("T1:2:34"))); [EOL]     DateTime dt = f.parseDateTime("01:02:34"); [EOL]     assertEquals(1, dt.getHourOfDay()); [EOL]     assertEquals(2, dt.getMinuteOfHour()); [EOL]     assertEquals(34, dt.getSecondOfMinute()); [EOL]     try { [EOL]         f.parseDateTime("0145:02:34"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("01:0:34"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL] }
public void test_appendFixedDecimal() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.year(), 4); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     assertEquals("2007", f.print(new DateTime("2007-01-01"))); [EOL]     assertEquals("0123", f.print(new DateTime("123-01-01"))); [EOL]     assertEquals("0001", f.print(new DateTime("1-2-3"))); [EOL]     assertEquals("99999", f.print(new DateTime("99999-2-3"))); [EOL]     assertEquals("-0099", f.print(new DateTime("-99-2-3"))); [EOL]     assertEquals("0000", f.print(new DateTime("0-2-3"))); [EOL]     assertEquals(2001, f.parseDateTime("2001").getYear()); [EOL]     try { [EOL]         f.parseDateTime("-2001"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("200"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("20016"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.hourOfDay(), 2); [EOL]     bld.appendLiteral(':'); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.minuteOfHour(), 2); [EOL]     bld.appendLiteral(':'); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.secondOfMinute(), 2); [EOL]     f = bld.toFormatter(); [EOL]     assertEquals("01:02:34", f.print(new DateTime("T1:2:34"))); [EOL]     DateTime dt = f.parseDateTime("01:02:34"); [EOL]     assertEquals(1, dt.getHourOfDay()); [EOL]     assertEquals(2, dt.getMinuteOfHour()); [EOL]     assertEquals(34, dt.getSecondOfMinute()); [EOL]     try { [EOL]         f.parseDateTime("0145:02:34"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("01:0:34"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL] }
public void test_appendFixedDecimal() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.year(), 4); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     assertEquals("2007", f.print(new DateTime("2007-01-01"))); [EOL]     assertEquals("0123", f.print(new DateTime("123-01-01"))); [EOL]     assertEquals("0001", f.print(new DateTime("1-2-3"))); [EOL]     assertEquals("99999", f.print(new DateTime("99999-2-3"))); [EOL]     assertEquals("-0099", f.print(new DateTime("-99-2-3"))); [EOL]     assertEquals("0000", f.print(new DateTime("0-2-3"))); [EOL]     assertEquals(2001, f.parseDateTime("2001").getYear()); [EOL]     try { [EOL]         f.parseDateTime("-2001"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("200"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("20016"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.hourOfDay(), 2); [EOL]     bld.appendLiteral(':'); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.minuteOfHour(), 2); [EOL]     bld.appendLiteral(':'); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.secondOfMinute(), 2); [EOL]     f = bld.toFormatter(); [EOL]     assertEquals("01:02:34", f.print(new DateTime("T1:2:34"))); [EOL]     DateTime dt = f.parseDateTime("01:02:34"); [EOL]     assertEquals(1, dt.getHourOfDay()); [EOL]     assertEquals(2, dt.getMinuteOfHour()); [EOL]     assertEquals(34, dt.getSecondOfMinute()); [EOL]     try { [EOL]         f.parseDateTime("0145:02:34"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("01:0:34"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL] }
public void test_appendFixedDecimal() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.year(), 4); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     assertEquals("2007", f.print(new DateTime("2007-01-01"))); [EOL]     assertEquals("0123", f.print(new DateTime("123-01-01"))); [EOL]     assertEquals("0001", f.print(new DateTime("1-2-3"))); [EOL]     assertEquals("99999", f.print(new DateTime("99999-2-3"))); [EOL]     assertEquals("-0099", f.print(new DateTime("-99-2-3"))); [EOL]     assertEquals("0000", f.print(new DateTime("0-2-3"))); [EOL]     assertEquals(2001, f.parseDateTime("2001").getYear()); [EOL]     try { [EOL]         f.parseDateTime("-2001"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("200"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("20016"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.hourOfDay(), 2); [EOL]     bld.appendLiteral(':'); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.minuteOfHour(), 2); [EOL]     bld.appendLiteral(':'); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.secondOfMinute(), 2); [EOL]     f = bld.toFormatter(); [EOL]     assertEquals("01:02:34", f.print(new DateTime("T1:2:34"))); [EOL]     DateTime dt = f.parseDateTime("01:02:34"); [EOL]     assertEquals(1, dt.getHourOfDay()); [EOL]     assertEquals(2, dt.getMinuteOfHour()); [EOL]     assertEquals(34, dt.getSecondOfMinute()); [EOL]     try { [EOL]         f.parseDateTime("0145:02:34"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("01:0:34"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL] }
public void testForStyle_shortMediumDateTime() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.forStyle("SM"); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL] }
public void testForStyle_shortMediumDateTime() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.forStyle("SM"); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL] }
public void testFormat_shortBasicParse() { [EOL]     DateTime dt = new DateTime(2004, 3, 9, 0, 0, 0, 0); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyMMdd"); [EOL]     assertEquals(dt, f.parseDateTime("040309")); [EOL]     try { [EOL]         assertEquals(dt, f.parseDateTime("20040309")); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = DateTimeFormat.forPattern("yy/MM/dd"); [EOL]     assertEquals(dt, f.parseDateTime("04/03/09")); [EOL]     assertEquals(dt, f.parseDateTime("2004/03/09")); [EOL] }
public void testFormat_shortBasicParse() { [EOL]     DateTime dt = new DateTime(2004, 3, 9, 0, 0, 0, 0); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyMMdd"); [EOL]     assertEquals(dt, f.parseDateTime("040309")); [EOL]     try { [EOL]         assertEquals(dt, f.parseDateTime("20040309")); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = DateTimeFormat.forPattern("yy/MM/dd"); [EOL]     assertEquals(dt, f.parseDateTime("04/03/09")); [EOL]     assertEquals(dt, f.parseDateTime("2004/03/09")); [EOL] }
public void testFormat_shortBasicParse() { [EOL]     DateTime dt = new DateTime(2004, 3, 9, 0, 0, 0, 0); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyMMdd"); [EOL]     assertEquals(dt, f.parseDateTime("040309")); [EOL]     try { [EOL]         assertEquals(dt, f.parseDateTime("20040309")); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = DateTimeFormat.forPattern("yy/MM/dd"); [EOL]     assertEquals(dt, f.parseDateTime("04/03/09")); [EOL]     assertEquals(dt, f.parseDateTime("2004/03/09")); [EOL] }
public void testFormat_shortBasicParse() { [EOL]     DateTime dt = new DateTime(2004, 3, 9, 0, 0, 0, 0); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyMMdd"); [EOL]     assertEquals(dt, f.parseDateTime("040309")); [EOL]     try { [EOL]         assertEquals(dt, f.parseDateTime("20040309")); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = DateTimeFormat.forPattern("yy/MM/dd"); [EOL]     assertEquals(dt, f.parseDateTime("04/03/09")); [EOL]     assertEquals(dt, f.parseDateTime("2004/03/09")); [EOL] }
public void testFormat_shortBasicParse() { [EOL]     DateTime dt = new DateTime(2004, 3, 9, 0, 0, 0, 0); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyMMdd"); [EOL]     assertEquals(dt, f.parseDateTime("040309")); [EOL]     try { [EOL]         assertEquals(dt, f.parseDateTime("20040309")); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = DateTimeFormat.forPattern("yy/MM/dd"); [EOL]     assertEquals(dt, f.parseDateTime("04/03/09")); [EOL]     assertEquals(dt, f.parseDateTime("2004/03/09")); [EOL] }
public void testFormat_shortBasicParse() { [EOL]     DateTime dt = new DateTime(2004, 3, 9, 0, 0, 0, 0); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyMMdd"); [EOL]     assertEquals(dt, f.parseDateTime("040309")); [EOL]     try { [EOL]         assertEquals(dt, f.parseDateTime("20040309")); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = DateTimeFormat.forPattern("yy/MM/dd"); [EOL]     assertEquals(dt, f.parseDateTime("04/03/09")); [EOL]     assertEquals(dt, f.parseDateTime("2004/03/09")); [EOL] }
public void testFormat_shortBasicParse() { [EOL]     DateTime dt = new DateTime(2004, 3, 9, 0, 0, 0, 0); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyMMdd"); [EOL]     assertEquals(dt, f.parseDateTime("040309")); [EOL]     try { [EOL]         assertEquals(dt, f.parseDateTime("20040309")); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = DateTimeFormat.forPattern("yy/MM/dd"); [EOL]     assertEquals(dt, f.parseDateTime("04/03/09")); [EOL]     assertEquals(dt, f.parseDateTime("2004/03/09")); [EOL] }
public void testFormat_shortBasicParse() { [EOL]     DateTime dt = new DateTime(2004, 3, 9, 0, 0, 0, 0); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyMMdd"); [EOL]     assertEquals(dt, f.parseDateTime("040309")); [EOL]     try { [EOL]         assertEquals(dt, f.parseDateTime("20040309")); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = DateTimeFormat.forPattern("yy/MM/dd"); [EOL]     assertEquals(dt, f.parseDateTime("04/03/09")); [EOL]     assertEquals(dt, f.parseDateTime("2004/03/09")); [EOL] }
public void testFormat_shortBasicParse() { [EOL]     DateTime dt = new DateTime(2004, 3, 9, 0, 0, 0, 0); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyMMdd"); [EOL]     assertEquals(dt, f.parseDateTime("040309")); [EOL]     try { [EOL]         assertEquals(dt, f.parseDateTime("20040309")); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = DateTimeFormat.forPattern("yy/MM/dd"); [EOL]     assertEquals(dt, f.parseDateTime("04/03/09")); [EOL]     assertEquals(dt, f.parseDateTime("2004/03/09")); [EOL] }
public void testFormat_shortBasicParse() { [EOL]     DateTime dt = new DateTime(2004, 3, 9, 0, 0, 0, 0); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyMMdd"); [EOL]     assertEquals(dt, f.parseDateTime("040309")); [EOL]     try { [EOL]         assertEquals(dt, f.parseDateTime("20040309")); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = DateTimeFormat.forPattern("yy/MM/dd"); [EOL]     assertEquals(dt, f.parseDateTime("04/03/09")); [EOL]     assertEquals(dt, f.parseDateTime("2004/03/09")); [EOL] }
public void testParseLocalDate_yearOfEra() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YYYY-MM GG").withChronology(chrono).withLocale(Locale.UK); [EOL]     LocalDate date = new LocalDate(2005, 10, 1, chrono); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 AD")); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 CE")); [EOL]     date = new LocalDate(-2005, 10, 1, chrono); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 BC")); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 BCE")); [EOL] }
public void testParseLocalDate_yearOfEra() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YYYY-MM GG").withChronology(chrono).withLocale(Locale.UK); [EOL]     LocalDate date = new LocalDate(2005, 10, 1, chrono); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 AD")); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 CE")); [EOL]     date = new LocalDate(-2005, 10, 1, chrono); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 BC")); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 BCE")); [EOL] }
public void testParseLocalDate_yearOfEra() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YYYY-MM GG").withChronology(chrono).withLocale(Locale.UK); [EOL]     LocalDate date = new LocalDate(2005, 10, 1, chrono); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 AD")); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 CE")); [EOL]     date = new LocalDate(-2005, 10, 1, chrono); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 BC")); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 BCE")); [EOL] }
public void testParseLocalDate_yearOfEra() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YYYY-MM GG").withChronology(chrono).withLocale(Locale.UK); [EOL]     LocalDate date = new LocalDate(2005, 10, 1, chrono); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 AD")); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 CE")); [EOL]     date = new LocalDate(-2005, 10, 1, chrono); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 BC")); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 BCE")); [EOL] }
public void testParseLocalDate_yearOfEra() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YYYY-MM GG").withChronology(chrono).withLocale(Locale.UK); [EOL]     LocalDate date = new LocalDate(2005, 10, 1, chrono); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 AD")); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 CE")); [EOL]     date = new LocalDate(-2005, 10, 1, chrono); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 BC")); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 BCE")); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void testToString_String_Locale() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals("10 20", test.toString("H m", Locale.ENGLISH)); [EOL]     assertEquals("10:20:30.040", test.toString(null, Locale.ENGLISH)); [EOL]     assertEquals("10 20", test.toString("H m", null)); [EOL]     assertEquals("10:20:30.040", test.toString(null, null)); [EOL] }
public void testToString_String_Locale() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals("10 20", test.toString("H m", Locale.ENGLISH)); [EOL]     assertEquals("10:20:30.040", test.toString(null, Locale.ENGLISH)); [EOL]     assertEquals("10 20", test.toString("H m", null)); [EOL]     assertEquals("10:20:30.040", test.toString(null, null)); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void testFormat_fractionOfSecondLong() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("SSSSSS").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "040000", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals(dt.toString(), "040000", f.print(dt)); [EOL]     dt = dt.withZone(TOKYO); [EOL]     assertEquals(dt.toString(), "040000", f.print(dt)); [EOL] }
public void testFormat_fractionOfSecondLong() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("SSSSSS").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "040000", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals(dt.toString(), "040000", f.print(dt)); [EOL]     dt = dt.withZone(TOKYO); [EOL]     assertEquals(dt.toString(), "040000", f.print(dt)); [EOL] }
public void testFormat_fractionOfSecondLong() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("SSSSSS").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "040000", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals(dt.toString(), "040000", f.print(dt)); [EOL]     dt = dt.withZone(TOKYO); [EOL]     assertEquals(dt.toString(), "040000", f.print(dt)); [EOL] }
public void testFormat_fractionOfSecondLong() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("SSSSSS").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "040000", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals(dt.toString(), "040000", f.print(dt)); [EOL]     dt = dt.withZone(TOKYO); [EOL]     assertEquals(dt.toString(), "040000", f.print(dt)); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_appendFixedDecimal() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.year(), 4); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     assertEquals("2007", f.print(new DateTime("2007-01-01"))); [EOL]     assertEquals("0123", f.print(new DateTime("123-01-01"))); [EOL]     assertEquals("0001", f.print(new DateTime("1-2-3"))); [EOL]     assertEquals("99999", f.print(new DateTime("99999-2-3"))); [EOL]     assertEquals("-0099", f.print(new DateTime("-99-2-3"))); [EOL]     assertEquals("0000", f.print(new DateTime("0-2-3"))); [EOL]     assertEquals(2001, f.parseDateTime("2001").getYear()); [EOL]     try { [EOL]         f.parseDateTime("-2001"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("200"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("20016"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.hourOfDay(), 2); [EOL]     bld.appendLiteral(':'); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.minuteOfHour(), 2); [EOL]     bld.appendLiteral(':'); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.secondOfMinute(), 2); [EOL]     f = bld.toFormatter(); [EOL]     assertEquals("01:02:34", f.print(new DateTime("T1:2:34"))); [EOL]     DateTime dt = f.parseDateTime("01:02:34"); [EOL]     assertEquals(1, dt.getHourOfDay()); [EOL]     assertEquals(2, dt.getMinuteOfHour()); [EOL]     assertEquals(34, dt.getSecondOfMinute()); [EOL]     try { [EOL]         f.parseDateTime("0145:02:34"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("01:0:34"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL] }
public void test_appendFixedDecimal() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.year(), 4); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     assertEquals("2007", f.print(new DateTime("2007-01-01"))); [EOL]     assertEquals("0123", f.print(new DateTime("123-01-01"))); [EOL]     assertEquals("0001", f.print(new DateTime("1-2-3"))); [EOL]     assertEquals("99999", f.print(new DateTime("99999-2-3"))); [EOL]     assertEquals("-0099", f.print(new DateTime("-99-2-3"))); [EOL]     assertEquals("0000", f.print(new DateTime("0-2-3"))); [EOL]     assertEquals(2001, f.parseDateTime("2001").getYear()); [EOL]     try { [EOL]         f.parseDateTime("-2001"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("200"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("20016"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.hourOfDay(), 2); [EOL]     bld.appendLiteral(':'); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.minuteOfHour(), 2); [EOL]     bld.appendLiteral(':'); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.secondOfMinute(), 2); [EOL]     f = bld.toFormatter(); [EOL]     assertEquals("01:02:34", f.print(new DateTime("T1:2:34"))); [EOL]     DateTime dt = f.parseDateTime("01:02:34"); [EOL]     assertEquals(1, dt.getHourOfDay()); [EOL]     assertEquals(2, dt.getMinuteOfHour()); [EOL]     assertEquals(34, dt.getSecondOfMinute()); [EOL]     try { [EOL]         f.parseDateTime("0145:02:34"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("01:0:34"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL] }
public void testConstructor() throws Throwable { [EOL]     TimeOfDay test = new TimeOfDay(); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(10 + OFFSET, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL] }
public void testConstructor() throws Throwable { [EOL]     TimeOfDay test = new TimeOfDay(); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(10 + OFFSET, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL] }
public void testConstructor() throws Throwable { [EOL]     TimeOfDay test = new TimeOfDay(); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(10 + OFFSET, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL] }
public void testConstructor() throws Throwable { [EOL]     TimeOfDay test = new TimeOfDay(); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(10 + OFFSET, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL] }
public void testConstructor() throws Throwable { [EOL]     TimeOfDay test = new TimeOfDay(); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(10 + OFFSET, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL] }
public void testConstructor() throws Throwable { [EOL]     TimeOfDay test = new TimeOfDay(); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(10 + OFFSET, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL] }
public void testConstructor() throws Throwable { [EOL]     TimeOfDay test = new TimeOfDay(); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(10 + OFFSET, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL] }
public void testConstructor() throws Throwable { [EOL]     TimeOfDay test = new TimeOfDay(); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(10 + OFFSET, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL] }
public void testConstructor() throws Throwable { [EOL]     TimeOfDay test = new TimeOfDay(); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(10 + OFFSET, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL] }
public void testConstructor() throws Throwable { [EOL]     TimeOfDay test = new TimeOfDay(); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(10 + OFFSET, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL] }
public void testConstructor() throws Throwable { [EOL]     TimeOfDay test = new TimeOfDay(); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(10 + OFFSET, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL] }
public void testConstructor_long2_Chronology() throws Throwable { [EOL]     TimeOfDay test = new TimeOfDay(TEST_TIME2, JulianChronology.getInstance()); [EOL]     assertEquals(JulianChronology.getInstanceUTC(), test.getChronology()); [EOL]     assertEquals(5 + OFFSET, test.getHourOfDay()); [EOL]     assertEquals(6, test.getMinuteOfHour()); [EOL]     assertEquals(7, test.getSecondOfMinute()); [EOL]     assertEquals(8, test.getMillisOfSecond()); [EOL] }
public void testPlusSeconds_int() { [EOL]     TimeOfDay test = new TimeOfDay(1, 2, 3, 4, BuddhistChronology.getInstance()); [EOL]     TimeOfDay result = test.plusSeconds(1); [EOL]     TimeOfDay expected = new TimeOfDay(1, 2, 4, 4, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusSeconds(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusSeconds_int() { [EOL]     TimeOfDay test = new TimeOfDay(1, 2, 3, 4, BuddhistChronology.getInstance()); [EOL]     TimeOfDay result = test.plusSeconds(1); [EOL]     TimeOfDay expected = new TimeOfDay(1, 2, 4, 4, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusSeconds(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusSeconds_int() { [EOL]     TimeOfDay test = new TimeOfDay(1, 2, 3, 4, BuddhistChronology.getInstance()); [EOL]     TimeOfDay result = test.plusSeconds(1); [EOL]     TimeOfDay expected = new TimeOfDay(1, 2, 4, 4, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusSeconds(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusMillis_int() { [EOL]     TimeOfDay test = new TimeOfDay(1, 2, 3, 4, BuddhistChronology.getInstance()); [EOL]     TimeOfDay result = test.minusMillis(1); [EOL]     TimeOfDay expected = new TimeOfDay(1, 2, 3, 3, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusMillis(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusMillis_int() { [EOL]     TimeOfDay test = new TimeOfDay(1, 2, 3, 4, BuddhistChronology.getInstance()); [EOL]     TimeOfDay result = test.minusMillis(1); [EOL]     TimeOfDay expected = new TimeOfDay(1, 2, 3, 3, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusMillis(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusMillis_int() { [EOL]     TimeOfDay test = new TimeOfDay(1, 2, 3, 4, BuddhistChronology.getInstance()); [EOL]     TimeOfDay result = test.minusMillis(1); [EOL]     TimeOfDay expected = new TimeOfDay(1, 2, 3, 3, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusMillis(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusMillis_int() { [EOL]     TimeOfDay test = new TimeOfDay(1, 2, 3, 4, BuddhistChronology.getInstance()); [EOL]     TimeOfDay result = test.minusMillis(1); [EOL]     TimeOfDay expected = new TimeOfDay(1, 2, 3, 3, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusMillis(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusMillis_int() { [EOL]     TimeOfDay test = new TimeOfDay(1, 2, 3, 4, BuddhistChronology.getInstance()); [EOL]     TimeOfDay result = test.minusMillis(1); [EOL]     TimeOfDay expected = new TimeOfDay(1, 2, 3, 3, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusMillis(0); [EOL]     assertSame(test, result); [EOL] }
public void testPropertyAddWrapFieldHour() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.hourOfDay().addWrapFieldToCopy(9); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 19, 20, 30, 40); [EOL]     copy = test.hourOfDay().addWrapFieldToCopy(0); [EOL]     check(copy, 10, 20, 30, 40); [EOL]     copy = test.hourOfDay().addWrapFieldToCopy(18); [EOL]     check(copy, 4, 20, 30, 40); [EOL]     copy = test.hourOfDay().addWrapFieldToCopy(-15); [EOL]     check(copy, 19, 20, 30, 40); [EOL] }
public void testPropertyWithMinimumValueHour() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.hourOfDay().withMinimumValue(); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 0, 20, 30, 40); [EOL] }
public void testPropertyToIntervalYearOfCentury() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     Interval testInterval = test.yearOfCentury().toInterval(); [EOL]     assertEquals(new DateTime(2004, 1, 1, 0, 0, 0, 0), testInterval.getStart()); [EOL]     assertEquals(new DateTime(2005, 1, 1, 0, 0, 0, 0), testInterval.getEnd()); [EOL] }
public void testPropertyToIntervalYearOfCentury() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     Interval testInterval = test.yearOfCentury().toInterval(); [EOL]     assertEquals(new DateTime(2004, 1, 1, 0, 0, 0, 0), testInterval.getStart()); [EOL]     assertEquals(new DateTime(2005, 1, 1, 0, 0, 0, 0), testInterval.getEnd()); [EOL] }
public void testContains_RInterval_zeroDuration() { [EOL]     assertEquals(false, interval33.contains(interval33)); [EOL]     assertEquals(false, interval33.contains(interval37)); [EOL]     assertEquals(true, interval37.contains(interval33)); [EOL]     assertEquals(false, interval33.contains(new Interval(1, 2))); [EOL]     assertEquals(false, interval33.contains(new Interval(8, 9))); [EOL]     assertEquals(false, interval33.contains(new Interval(1, 9))); [EOL]     DateTimeUtils.setCurrentMillisFixed(2); [EOL]     assertEquals(false, interval33.contains((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(false, interval33.contains((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(4); [EOL]     assertEquals(false, interval33.contains((ReadableInterval) null)); [EOL] }
public void testContains_RInterval_zeroDuration() { [EOL]     assertEquals(false, interval33.contains(interval33)); [EOL]     assertEquals(false, interval33.contains(interval37)); [EOL]     assertEquals(true, interval37.contains(interval33)); [EOL]     assertEquals(false, interval33.contains(new Interval(1, 2))); [EOL]     assertEquals(false, interval33.contains(new Interval(8, 9))); [EOL]     assertEquals(false, interval33.contains(new Interval(1, 9))); [EOL]     DateTimeUtils.setCurrentMillisFixed(2); [EOL]     assertEquals(false, interval33.contains((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(false, interval33.contains((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(4); [EOL]     assertEquals(false, interval33.contains((ReadableInterval) null)); [EOL] }
public void testContains_RInterval_zeroDuration() { [EOL]     assertEquals(false, interval33.contains(interval33)); [EOL]     assertEquals(false, interval33.contains(interval37)); [EOL]     assertEquals(true, interval37.contains(interval33)); [EOL]     assertEquals(false, interval33.contains(new Interval(1, 2))); [EOL]     assertEquals(false, interval33.contains(new Interval(8, 9))); [EOL]     assertEquals(false, interval33.contains(new Interval(1, 9))); [EOL]     DateTimeUtils.setCurrentMillisFixed(2); [EOL]     assertEquals(false, interval33.contains((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(false, interval33.contains((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(4); [EOL]     assertEquals(false, interval33.contains((ReadableInterval) null)); [EOL] }
public void testContains_RInterval_zeroDuration() { [EOL]     assertEquals(false, interval33.contains(interval33)); [EOL]     assertEquals(false, interval33.contains(interval37)); [EOL]     assertEquals(true, interval37.contains(interval33)); [EOL]     assertEquals(false, interval33.contains(new Interval(1, 2))); [EOL]     assertEquals(false, interval33.contains(new Interval(8, 9))); [EOL]     assertEquals(false, interval33.contains(new Interval(1, 9))); [EOL]     DateTimeUtils.setCurrentMillisFixed(2); [EOL]     assertEquals(false, interval33.contains((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(false, interval33.contains((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(4); [EOL]     assertEquals(false, interval33.contains((ReadableInterval) null)); [EOL] }
public void testIsAfter_RInterval_null() { [EOL]     DateTimeUtils.setCurrentMillisFixed(2); [EOL]     assertEquals(true, interval37.isAfter((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(true, interval37.isAfter((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(4); [EOL]     assertEquals(false, interval37.isAfter((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(6); [EOL]     assertEquals(false, interval37.isAfter((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(7); [EOL]     assertEquals(false, interval37.isAfter((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(8); [EOL]     assertEquals(false, interval37.isAfter((ReadableInterval) null)); [EOL] }
public void testIsAfter_RInterval_null() { [EOL]     DateTimeUtils.setCurrentMillisFixed(2); [EOL]     assertEquals(true, interval37.isAfter((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(true, interval37.isAfter((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(4); [EOL]     assertEquals(false, interval37.isAfter((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(6); [EOL]     assertEquals(false, interval37.isAfter((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(7); [EOL]     assertEquals(false, interval37.isAfter((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(8); [EOL]     assertEquals(false, interval37.isAfter((ReadableInterval) null)); [EOL] }
public void testIsAfter_RInterval_null() { [EOL]     DateTimeUtils.setCurrentMillisFixed(2); [EOL]     assertEquals(true, interval37.isAfter((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(true, interval37.isAfter((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(4); [EOL]     assertEquals(false, interval37.isAfter((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(6); [EOL]     assertEquals(false, interval37.isAfter((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(7); [EOL]     assertEquals(false, interval37.isAfter((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(8); [EOL]     assertEquals(false, interval37.isAfter((ReadableInterval) null)); [EOL] }
public void testIsAfter_RInterval_null() { [EOL]     DateTimeUtils.setCurrentMillisFixed(2); [EOL]     assertEquals(true, interval37.isAfter((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(true, interval37.isAfter((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(4); [EOL]     assertEquals(false, interval37.isAfter((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(6); [EOL]     assertEquals(false, interval37.isAfter((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(7); [EOL]     assertEquals(false, interval37.isAfter((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(8); [EOL]     assertEquals(false, interval37.isAfter((ReadableInterval) null)); [EOL] }
public void testGetDuration2() { [EOL]     Interval test = new Interval(TEST_TIME1, TEST_TIME1); [EOL]     assertSame(Duration.ZERO, test.toDuration()); [EOL] }
public void testGetDuration2() { [EOL]     Interval test = new Interval(TEST_TIME1, TEST_TIME1); [EOL]     assertSame(Duration.ZERO, test.toDuration()); [EOL] }
public void testFormatSuffixPlural2() { [EOL]     PeriodFormatter f = builder.appendHours().appendSuffix(" hour", " hours").toFormatter(); [EOL]     assertEquals("5 hours", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 hours", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixPlural2() { [EOL]     PeriodFormatter f = builder.appendHours().appendSuffix(" hour", " hours").toFormatter(); [EOL]     assertEquals("5 hours", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 hours", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSuffixPlural2() { [EOL]     PeriodFormatter f = builder.appendHours().appendSuffix(" hour", " hours").toFormatter(); [EOL]     assertEquals("5 hours", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 hours", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] }
public void testParse_noFormatter() throws Throwable { [EOL]     assertEquals(new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 890), MutablePeriod.parse("P1Y2M3W4DT5H6M7.890S")); [EOL] }
public void testParse_noFormatter() throws Throwable { [EOL]     assertEquals(new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 890), MutablePeriod.parse("P1Y2M3W4DT5H6M7.890S")); [EOL] }
public void testParse_noFormatter() throws Throwable { [EOL]     assertEquals(new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 890), MutablePeriod.parse("P1Y2M3W4DT5H6M7.890S")); [EOL] }
public void testParse_noFormatter() throws Throwable { [EOL]     assertEquals(new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 890), MutablePeriod.parse("P1Y2M3W4DT5H6M7.890S")); [EOL] }
public void testParse_noFormatter() throws Throwable { [EOL]     assertEquals(new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 890), MutablePeriod.parse("P1Y2M3W4DT5H6M7.890S")); [EOL] }
public void testParse_noFormatter() throws Throwable { [EOL]     assertEquals(new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 890), MutablePeriod.parse("P1Y2M3W4DT5H6M7.890S")); [EOL] }
public void testParse_noFormatter() throws Throwable { [EOL]     assertEquals(new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 890), MutablePeriod.parse("P1Y2M3W4DT5H6M7.890S")); [EOL] }
public void testSetPeriod_long2() { [EOL]     MutablePeriod test = new MutablePeriod(); [EOL]     test.setPeriod((4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals((450 * 24) + 5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] }
public void testConstructor_long_long1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testConstructor_long_long1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testConstructor_long_long1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testSetPeriod_long2() { [EOL]     MutablePeriod test = new MutablePeriod(); [EOL]     test.setPeriod((4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals((450 * 24) + 5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] }
public void testSetPeriod_long2() { [EOL]     MutablePeriod test = new MutablePeriod(); [EOL]     test.setPeriod((4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals((450 * 24) + 5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] }
public void testSetPeriod_long2() { [EOL]     MutablePeriod test = new MutablePeriod(); [EOL]     test.setPeriod((4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals((450 * 24) + 5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] }
public void testSetPeriod_long2() { [EOL]     MutablePeriod test = new MutablePeriod(); [EOL]     test.setPeriod((4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals((450 * 24) + 5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] }
public void testSetPeriod_long2() { [EOL]     MutablePeriod test = new MutablePeriod(); [EOL]     test.setPeriod((4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals((450 * 24) + 5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] }
public void testAdd_8ints1() { [EOL]     MutablePeriod test = new MutablePeriod(100L); [EOL]     test.add(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(3, test.getWeeks()); [EOL]     assertEquals(4, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(108, test.getMillis()); [EOL] }
public void testAdd_long1() { [EOL]     MutablePeriod test = new MutablePeriod(100L); [EOL]     test.add(100L); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(200, test.getMillis()); [EOL] }
public void testAdd_long_Chronology1() { [EOL]     MutablePeriod test = new MutablePeriod(100L); [EOL]     test.add(100L, ISOChronology.getInstance()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(200, test.getMillis()); [EOL] }
public void testSetWeeks() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setWeeks(10); [EOL]     assertEquals(10, test.getWeeks()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setWeeks(-10); [EOL]     assertEquals(-10, test.getWeeks()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setWeeks(0); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setWeeks(3); [EOL]     assertEquals(3, test.getWeeks()); [EOL] }
public void testSetWeeks() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setWeeks(10); [EOL]     assertEquals(10, test.getWeeks()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setWeeks(-10); [EOL]     assertEquals(-10, test.getWeeks()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setWeeks(0); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setWeeks(3); [EOL]     assertEquals(3, test.getWeeks()); [EOL] }
public void testSetWeeks() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setWeeks(10); [EOL]     assertEquals(10, test.getWeeks()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setWeeks(-10); [EOL]     assertEquals(-10, test.getWeeks()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setWeeks(0); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setWeeks(3); [EOL]     assertEquals(3, test.getWeeks()); [EOL] }
public void testSetWeeks() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setWeeks(10); [EOL]     assertEquals(10, test.getWeeks()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setWeeks(-10); [EOL]     assertEquals(-10, test.getWeeks()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setWeeks(0); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setWeeks(3); [EOL]     assertEquals(3, test.getWeeks()); [EOL] }
public void testAddHours() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addHours(10); [EOL]     assertEquals(15, test.getHours()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addHours(-10); [EOL]     assertEquals(-5, test.getHours()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addHours(0); [EOL]     assertEquals(5, test.getHours()); [EOL] }
public void testAddHours() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addHours(10); [EOL]     assertEquals(15, test.getHours()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addHours(-10); [EOL]     assertEquals(-5, test.getHours()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addHours(0); [EOL]     assertEquals(5, test.getHours()); [EOL] }
public void testAddHours() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addHours(10); [EOL]     assertEquals(15, test.getHours()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addHours(-10); [EOL]     assertEquals(-5, test.getHours()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addHours(0); [EOL]     assertEquals(5, test.getHours()); [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void testConstructor_ObjectString2() throws Throwable { [EOL]     LocalDate test = new LocalDate("1972-037"); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1972, test.getYear()); [EOL]     assertEquals(2, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testConstructor_ObjectString2() throws Throwable { [EOL]     LocalDate test = new LocalDate("1972-037"); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1972, test.getYear()); [EOL]     assertEquals(2, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testConstructor_ObjectString2() throws Throwable { [EOL]     LocalDate test = new LocalDate("1972-037"); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1972, test.getYear()); [EOL]     assertEquals(2, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testConstructor_ObjectString2() throws Throwable { [EOL]     LocalDate test = new LocalDate("1972-037"); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1972, test.getYear()); [EOL]     assertEquals(2, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testConstructor_ObjectString2() throws Throwable { [EOL]     LocalDate test = new LocalDate("1972-037"); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1972, test.getYear()); [EOL]     assertEquals(2, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testConstructor_ObjectString2() throws Throwable { [EOL]     LocalDate test = new LocalDate("1972-037"); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1972, test.getYear()); [EOL]     assertEquals(2, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testConstructor_ObjectString2() throws Throwable { [EOL]     LocalDate test = new LocalDate("1972-037"); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1972, test.getYear()); [EOL]     assertEquals(2, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void test_roundCeiling_long() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals(-1000L, field.roundCeiling(-1001L)); [EOL]     assertEquals(-1000L, field.roundCeiling(-1000L)); [EOL]     assertEquals(0L, field.roundCeiling(-999L)); [EOL]     assertEquals(0L, field.roundCeiling(-1L)); [EOL]     assertEquals(0L, field.roundCeiling(0L)); [EOL]     assertEquals(1000L, field.roundCeiling(1L)); [EOL]     assertEquals(1000L, field.roundCeiling(499L)); [EOL]     assertEquals(1000L, field.roundCeiling(500L)); [EOL]     assertEquals(1000L, field.roundCeiling(501L)); [EOL]     assertEquals(1000L, field.roundCeiling(1000L)); [EOL] }
public void testPropertyEqualsHashCodeLenient() { [EOL]     DateTime test1 = new DateTime(1970, 6, 9, 0, 0, 0, 0, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     DateTime test2 = new DateTime(1970, 6, 9, 0, 0, 0, 0, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL] }
public void testPropertyEqualsHashCodeLenient() { [EOL]     DateTime test1 = new DateTime(1970, 6, 9, 0, 0, 0, 0, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     DateTime test2 = new DateTime(1970, 6, 9, 0, 0, 0, 0, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL] }
public void testPropertyEqualsHashCodeLenient() { [EOL]     DateTime test1 = new DateTime(1970, 6, 9, 0, 0, 0, 0, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     DateTime test2 = new DateTime(1970, 6, 9, 0, 0, 0, 0, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL] }
public void testPropertyEqualsHashCodeLenient() { [EOL]     DateTime test1 = new DateTime(1970, 6, 9, 0, 0, 0, 0, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     DateTime test2 = new DateTime(1970, 6, 9, 0, 0, 0, 0, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL] }
public void testPropertyEqualsHashCodeLenient() { [EOL]     DateTime test1 = new DateTime(1970, 6, 9, 0, 0, 0, 0, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     DateTime test2 = new DateTime(1970, 6, 9, 0, 0, 0, 0, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testPropertyEqualsHashCodeLenient() { [EOL]     DateTime test1 = new DateTime(1970, 6, 9, 0, 0, 0, 0, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     DateTime test2 = new DateTime(1970, 6, 9, 0, 0, 0, 0, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL] }
public void testPropertySetWeekOfWeekyear() { [EOL]     DateTime test = new DateTime(2004, 6, 7, 0, 0, 0, 0); [EOL]     DateTime copy = test.weekOfWeekyear().setCopy(4); [EOL]     assertEquals("2004-06-07T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2004-01-19T00:00:00.000Z", copy.toString()); [EOL]     try { [EOL]         test.weekOfWeekyear().setCopy(54); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.weekOfWeekyear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetWeekOfWeekyear() { [EOL]     DateTime test = new DateTime(2004, 6, 7, 0, 0, 0, 0); [EOL]     DateTime copy = test.weekOfWeekyear().setCopy(4); [EOL]     assertEquals("2004-06-07T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2004-01-19T00:00:00.000Z", copy.toString()); [EOL]     try { [EOL]         test.weekOfWeekyear().setCopy(54); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.weekOfWeekyear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetWeekOfWeekyear() { [EOL]     DateTime test = new DateTime(2004, 6, 7, 0, 0, 0, 0); [EOL]     DateTime copy = test.weekOfWeekyear().setCopy(4); [EOL]     assertEquals("2004-06-07T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2004-01-19T00:00:00.000Z", copy.toString()); [EOL]     try { [EOL]         test.weekOfWeekyear().setCopy(54); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.weekOfWeekyear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void testWithZoneRetainFields_DateTimeZone() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateMidnight result = test.withZoneRetainFields(PARIS); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_PARIS, result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertEquals(TEST_TIME1_PARIS, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_LONDON, result.getMillis()); [EOL]     assertEquals(GREGORIAN_DEFAULT, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, new MockNullZoneChronology()); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL] }
public void testWithZoneRetainFields_DateTimeZone() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateMidnight result = test.withZoneRetainFields(PARIS); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_PARIS, result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertEquals(TEST_TIME1_PARIS, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_LONDON, result.getMillis()); [EOL]     assertEquals(GREGORIAN_DEFAULT, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, new MockNullZoneChronology()); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL] }
public void testConstructor_ObjectLocalDateTime() throws Throwable { [EOL]     LocalDateTime dt = new LocalDateTime(1970, 5, 6, 10, 20, 30, 40, BUDDHIST_UTC); [EOL]     LocalDateTime test = new LocalDateTime(dt); [EOL]     assertEquals(BUDDHIST_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(5, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL]     assertEquals(10, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL] }
public void testConstructor_ObjectLocalDateTime() throws Throwable { [EOL]     LocalDateTime dt = new LocalDateTime(1970, 5, 6, 10, 20, 30, 40, BUDDHIST_UTC); [EOL]     LocalDateTime test = new LocalDateTime(dt); [EOL]     assertEquals(BUDDHIST_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(5, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL]     assertEquals(10, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL] }
public void testConstructor_ObjectLocalDateTime() throws Throwable { [EOL]     LocalDateTime dt = new LocalDateTime(1970, 5, 6, 10, 20, 30, 40, BUDDHIST_UTC); [EOL]     LocalDateTime test = new LocalDateTime(dt); [EOL]     assertEquals(BUDDHIST_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(5, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL]     assertEquals(10, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void testConstructor_RI_RP3() throws Throwable { [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW, ISOChronology.getInstanceUTC()); [EOL]     Period dur = new Period(0, 6, 0, 3, 1, 0, 0, 0, PeriodType.standard()); [EOL]     long result = TEST_TIME_NOW; [EOL]     result = ISOChronology.getInstanceUTC().months().add(result, 6); [EOL]     result = ISOChronology.getInstanceUTC().days().add(result, 3); [EOL]     result = ISOChronology.getInstanceUTC().hours().add(result, 1); [EOL]     MutableInterval test = new MutableInterval(dt, dur); [EOL]     assertEquals(dt.getMillis(), test.getStartMillis()); [EOL]     assertEquals(result, test.getEndMillis()); [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void testConstructor_RI_RP3() throws Throwable { [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW, ISOChronology.getInstanceUTC()); [EOL]     Period dur = new Period(0, 6, 0, 3, 1, 0, 0, 0, PeriodType.standard()); [EOL]     long result = TEST_TIME_NOW; [EOL]     result = ISOChronology.getInstanceUTC().months().add(result, 6); [EOL]     result = ISOChronology.getInstanceUTC().days().add(result, 3); [EOL]     result = ISOChronology.getInstanceUTC().hours().add(result, 1); [EOL]     MutableInterval test = new MutableInterval(dt, dur); [EOL]     assertEquals(dt.getMillis(), test.getStartMillis()); [EOL]     assertEquals(result, test.getEndMillis()); [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testWithZoneRetainFields_DateTimeZone() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateMidnight result = test.withZoneRetainFields(PARIS); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_PARIS, result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertEquals(TEST_TIME1_PARIS, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_LONDON, result.getMillis()); [EOL]     assertEquals(GREGORIAN_DEFAULT, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, new MockNullZoneChronology()); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void testFactory_standardDaysIn_RPeriod() { [EOL]     assertEquals(0, Days.standardDaysIn((ReadablePeriod) null).getDays()); [EOL]     assertEquals(0, Days.standardDaysIn(Period.ZERO).getDays()); [EOL]     assertEquals(1, Days.standardDaysIn(new Period(0, 0, 0, 1, 0, 0, 0, 0)).getDays()); [EOL]     assertEquals(123, Days.standardDaysIn(Period.days(123)).getDays()); [EOL]     assertEquals(-987, Days.standardDaysIn(Period.days(-987)).getDays()); [EOL]     assertEquals(1, Days.standardDaysIn(Period.hours(47)).getDays()); [EOL]     assertEquals(2, Days.standardDaysIn(Period.hours(48)).getDays()); [EOL]     assertEquals(2, Days.standardDaysIn(Period.hours(49)).getDays()); [EOL]     assertEquals(14, Days.standardDaysIn(Period.weeks(2)).getDays()); [EOL]     try { [EOL]         Days.standardDaysIn(Period.months(1)); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_standardDaysIn_RPeriod() { [EOL]     assertEquals(0, Days.standardDaysIn((ReadablePeriod) null).getDays()); [EOL]     assertEquals(0, Days.standardDaysIn(Period.ZERO).getDays()); [EOL]     assertEquals(1, Days.standardDaysIn(new Period(0, 0, 0, 1, 0, 0, 0, 0)).getDays()); [EOL]     assertEquals(123, Days.standardDaysIn(Period.days(123)).getDays()); [EOL]     assertEquals(-987, Days.standardDaysIn(Period.days(-987)).getDays()); [EOL]     assertEquals(1, Days.standardDaysIn(Period.hours(47)).getDays()); [EOL]     assertEquals(2, Days.standardDaysIn(Period.hours(48)).getDays()); [EOL]     assertEquals(2, Days.standardDaysIn(Period.hours(49)).getDays()); [EOL]     assertEquals(14, Days.standardDaysIn(Period.weeks(2)).getDays()); [EOL]     try { [EOL]         Days.standardDaysIn(Period.months(1)); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_standardDaysIn_RPeriod() { [EOL]     assertEquals(0, Days.standardDaysIn((ReadablePeriod) null).getDays()); [EOL]     assertEquals(0, Days.standardDaysIn(Period.ZERO).getDays()); [EOL]     assertEquals(1, Days.standardDaysIn(new Period(0, 0, 0, 1, 0, 0, 0, 0)).getDays()); [EOL]     assertEquals(123, Days.standardDaysIn(Period.days(123)).getDays()); [EOL]     assertEquals(-987, Days.standardDaysIn(Period.days(-987)).getDays()); [EOL]     assertEquals(1, Days.standardDaysIn(Period.hours(47)).getDays()); [EOL]     assertEquals(2, Days.standardDaysIn(Period.hours(48)).getDays()); [EOL]     assertEquals(2, Days.standardDaysIn(Period.hours(49)).getDays()); [EOL]     assertEquals(14, Days.standardDaysIn(Period.weeks(2)).getDays()); [EOL]     try { [EOL]         Days.standardDaysIn(Period.months(1)); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_standardDaysIn_RPeriod() { [EOL]     assertEquals(0, Days.standardDaysIn((ReadablePeriod) null).getDays()); [EOL]     assertEquals(0, Days.standardDaysIn(Period.ZERO).getDays()); [EOL]     assertEquals(1, Days.standardDaysIn(new Period(0, 0, 0, 1, 0, 0, 0, 0)).getDays()); [EOL]     assertEquals(123, Days.standardDaysIn(Period.days(123)).getDays()); [EOL]     assertEquals(-987, Days.standardDaysIn(Period.days(-987)).getDays()); [EOL]     assertEquals(1, Days.standardDaysIn(Period.hours(47)).getDays()); [EOL]     assertEquals(2, Days.standardDaysIn(Period.hours(48)).getDays()); [EOL]     assertEquals(2, Days.standardDaysIn(Period.hours(49)).getDays()); [EOL]     assertEquals(14, Days.standardDaysIn(Period.weeks(2)).getDays()); [EOL]     try { [EOL]         Days.standardDaysIn(Period.months(1)); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_parseDays_String() { [EOL]     assertEquals(0, Days.parseDays((String) null).getDays()); [EOL]     assertEquals(0, Days.parseDays("P0D").getDays()); [EOL]     assertEquals(1, Days.parseDays("P1D").getDays()); [EOL]     assertEquals(-3, Days.parseDays("P-3D").getDays()); [EOL]     assertEquals(2, Days.parseDays("P0Y0M2D").getDays()); [EOL]     assertEquals(2, Days.parseDays("P2DT0H0M").getDays()); [EOL]     try { [EOL]         Days.parseDays("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Days.parseDays("P1DT1H"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_parseDays_String() { [EOL]     assertEquals(0, Days.parseDays((String) null).getDays()); [EOL]     assertEquals(0, Days.parseDays("P0D").getDays()); [EOL]     assertEquals(1, Days.parseDays("P1D").getDays()); [EOL]     assertEquals(-3, Days.parseDays("P-3D").getDays()); [EOL]     assertEquals(2, Days.parseDays("P0Y0M2D").getDays()); [EOL]     assertEquals(2, Days.parseDays("P2DT0H0M").getDays()); [EOL]     try { [EOL]         Days.parseDays("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Days.parseDays("P1DT1H"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_parseDays_String() { [EOL]     assertEquals(0, Days.parseDays((String) null).getDays()); [EOL]     assertEquals(0, Days.parseDays("P0D").getDays()); [EOL]     assertEquals(1, Days.parseDays("P1D").getDays()); [EOL]     assertEquals(-3, Days.parseDays("P-3D").getDays()); [EOL]     assertEquals(2, Days.parseDays("P0Y0M2D").getDays()); [EOL]     assertEquals(2, Days.parseDays("P2DT0H0M").getDays()); [EOL]     try { [EOL]         Days.parseDays("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Days.parseDays("P1DT1H"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testToStandardDays() { [EOL]     Weeks test = Weeks.weeks(2); [EOL]     Days expected = Days.days(14); [EOL]     assertEquals(expected, test.toStandardDays()); [EOL]     try { [EOL]         Weeks.MAX_VALUE.toStandardDays(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testToStandardDuration() { [EOL]     Days test = Days.days(20); [EOL]     Duration expected = new Duration(20L * DateTimeConstants.MILLIS_PER_DAY); [EOL]     assertEquals(expected, test.toStandardDuration()); [EOL]     expected = new Duration(((long) Integer.MAX_VALUE) * DateTimeConstants.MILLIS_PER_DAY); [EOL]     assertEquals(expected, Days.MAX_VALUE.toStandardDuration()); [EOL] }
public void testMultipliedBy_int() { [EOL]     Days test = Days.days(2); [EOL]     assertEquals(6, test.multipliedBy(3).getDays()); [EOL]     assertEquals(2, test.getDays()); [EOL]     assertEquals(-6, test.multipliedBy(-3).getDays()); [EOL]     assertSame(test, test.multipliedBy(1)); [EOL]     Days halfMax = Days.days(Integer.MAX_VALUE / 2 + 1); [EOL]     try { [EOL]         halfMax.multipliedBy(2); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMultipliedBy_int() { [EOL]     Days test = Days.days(2); [EOL]     assertEquals(6, test.multipliedBy(3).getDays()); [EOL]     assertEquals(2, test.getDays()); [EOL]     assertEquals(-6, test.multipliedBy(-3).getDays()); [EOL]     assertSame(test, test.multipliedBy(1)); [EOL]     Days halfMax = Days.days(Integer.MAX_VALUE / 2 + 1); [EOL]     try { [EOL]         halfMax.multipliedBy(2); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMultipliedBy_int() { [EOL]     Days test = Days.days(2); [EOL]     assertEquals(6, test.multipliedBy(3).getDays()); [EOL]     assertEquals(2, test.getDays()); [EOL]     assertEquals(-6, test.multipliedBy(-3).getDays()); [EOL]     assertSame(test, test.multipliedBy(1)); [EOL]     Days halfMax = Days.days(Integer.MAX_VALUE / 2 + 1); [EOL]     try { [EOL]         halfMax.multipliedBy(2); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMultipliedBy_int() { [EOL]     Days test = Days.days(2); [EOL]     assertEquals(6, test.multipliedBy(3).getDays()); [EOL]     assertEquals(2, test.getDays()); [EOL]     assertEquals(-6, test.multipliedBy(-3).getDays()); [EOL]     assertSame(test, test.multipliedBy(1)); [EOL]     Days halfMax = Days.days(Integer.MAX_VALUE / 2 + 1); [EOL]     try { [EOL]         halfMax.multipliedBy(2); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testNegated() { [EOL]     Days test = Days.days(12); [EOL]     assertEquals(-12, test.negated().getDays()); [EOL]     assertEquals(12, test.getDays()); [EOL]     try { [EOL]         Days.MIN_VALUE.negated(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testNegated() { [EOL]     Days test = Days.days(12); [EOL]     assertEquals(-12, test.negated().getDays()); [EOL]     assertEquals(12, test.getDays()); [EOL]     try { [EOL]         Days.MIN_VALUE.negated(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testNegated() { [EOL]     Days test = Days.days(12); [EOL]     assertEquals(-12, test.negated().getDays()); [EOL]     assertEquals(12, test.getDays()); [EOL]     try { [EOL]         Days.MIN_VALUE.negated(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testNegated() { [EOL]     Days test = Days.days(12); [EOL]     assertEquals(-12, test.negated().getDays()); [EOL]     assertEquals(12, test.getDays()); [EOL]     try { [EOL]         Days.MIN_VALUE.negated(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testNegated() { [EOL]     Days test = Days.days(12); [EOL]     assertEquals(-12, test.negated().getDays()); [EOL]     assertEquals(12, test.getDays()); [EOL]     try { [EOL]         Days.MIN_VALUE.negated(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testParseLocalDate_yearOfEra() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YYYY-MM GG").withChronology(chrono).withLocale(Locale.UK); [EOL]     LocalDate date = new LocalDate(2005, 10, 1, chrono); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 AD")); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 CE")); [EOL]     date = new LocalDate(-2005, 10, 1, chrono); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 BC")); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 BCE")); [EOL] }
public void testParseLocalDate_yearOfEra() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YYYY-MM GG").withChronology(chrono).withLocale(Locale.UK); [EOL]     LocalDate date = new LocalDate(2005, 10, 1, chrono); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 AD")); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 CE")); [EOL]     date = new LocalDate(-2005, 10, 1, chrono); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 BC")); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 BCE")); [EOL] }
public void testParseLocalDate_yearOfEra() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YYYY-MM GG").withChronology(chrono).withLocale(Locale.UK); [EOL]     LocalDate date = new LocalDate(2005, 10, 1, chrono); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 AD")); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 CE")); [EOL]     date = new LocalDate(-2005, 10, 1, chrono); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 BC")); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 BCE")); [EOL] }
public void testParseLocalDate_yearOfEra() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YYYY-MM GG").withChronology(chrono).withLocale(Locale.UK); [EOL]     LocalDate date = new LocalDate(2005, 10, 1, chrono); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 AD")); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 CE")); [EOL]     date = new LocalDate(-2005, 10, 1, chrono); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 BC")); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 BCE")); [EOL] }
public void testFactory_FromDateFields() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6); [EOL]     cal.set(Calendar.MILLISECOND, 7); [EOL]     MonthDay expected = new MonthDay(2, 3); [EOL]     assertEquals(expected, MonthDay.fromDateFields(cal.getTime())); [EOL]     try { [EOL]         MonthDay.fromDateFields(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_FromDateFields() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6); [EOL]     cal.set(Calendar.MILLISECOND, 7); [EOL]     MonthDay expected = new MonthDay(2, 3); [EOL]     assertEquals(expected, MonthDay.fromDateFields(cal.getTime())); [EOL]     try { [EOL]         MonthDay.fromDateFields(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testConstructor_Object() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     MonthDay test = new MonthDay(date); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testConstructor_Object() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     MonthDay test = new MonthDay(date); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testConstructor_Object() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     MonthDay test = new MonthDay(date); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testConstructor_Object() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     MonthDay test = new MonthDay(date); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] }
public void testWithFieldAdded_unknownField() { [EOL]     MonthDay test = new MonthDay(9, 6); [EOL]     try { [EOL]         test.withFieldAdded(DurationFieldType.hours(), 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPlusDays_int() { [EOL]     MonthDay test = new MonthDay(5, 10, BuddhistChronology.getInstance()); [EOL]     MonthDay result = test.plusDays(1); [EOL]     MonthDay expected = new MonthDay(5, 11, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL] }
public void testPlusDays_int() { [EOL]     MonthDay test = new MonthDay(5, 10, BuddhistChronology.getInstance()); [EOL]     MonthDay result = test.plusDays(1); [EOL]     MonthDay expected = new MonthDay(5, 11, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL] }
public void testPlusDays_int() { [EOL]     MonthDay test = new MonthDay(5, 10, BuddhistChronology.getInstance()); [EOL]     MonthDay result = test.plusDays(1); [EOL]     MonthDay expected = new MonthDay(5, 11, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL] }
public void testPlusDays_int() { [EOL]     MonthDay test = new MonthDay(5, 10, BuddhistChronology.getInstance()); [EOL]     MonthDay result = test.plusDays(1); [EOL]     MonthDay expected = new MonthDay(5, 11, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL] }
public void testPlusDays_int() { [EOL]     MonthDay test = new MonthDay(5, 10, BuddhistChronology.getInstance()); [EOL]     MonthDay result = test.plusDays(1); [EOL]     MonthDay expected = new MonthDay(5, 11, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL] }
public void testPlusDays_int() { [EOL]     MonthDay test = new MonthDay(5, 10, BuddhistChronology.getInstance()); [EOL]     MonthDay result = test.plusDays(1); [EOL]     MonthDay expected = new MonthDay(5, 11, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL] }
public void testConstructor() throws Throwable { [EOL]     LocalDateTime test = new LocalDateTime(); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(10 + OFFSET_MOSCOW, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL]     assertEquals(test, LocalDateTime.now()); [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testFactory_fromDateFields_before1970() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(1969, 1, 3, 4, 5, 6); [EOL]     cal.set(Calendar.MILLISECOND, 7); [EOL]     LocalDateTime expected = new LocalDateTime(1969, 2, 3, 4, 5, 6, 7); [EOL]     assertEquals(expected, LocalDateTime.fromDateFields(cal.getTime())); [EOL] }
public void testFactory_fromDateFields_before1970() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(1969, 1, 3, 4, 5, 6); [EOL]     cal.set(Calendar.MILLISECOND, 7); [EOL]     LocalDateTime expected = new LocalDateTime(1969, 2, 3, 4, 5, 6, 7); [EOL]     assertEquals(expected, LocalDateTime.fromDateFields(cal.getTime())); [EOL] }
public void testFactory_fromDateFields_before1970() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(1969, 1, 3, 4, 5, 6); [EOL]     cal.set(Calendar.MILLISECOND, 7); [EOL]     LocalDateTime expected = new LocalDateTime(1969, 2, 3, 4, 5, 6, 7); [EOL]     assertEquals(expected, LocalDateTime.fromDateFields(cal.getTime())); [EOL] }
public void testConstructor() throws Throwable { [EOL]     LocalDateTime test = new LocalDateTime(); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(10 + OFFSET_MOSCOW, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL]     assertEquals(test, LocalDateTime.now()); [EOL] }
public void testGetFieldTypes() { [EOL]     LocalDateTime test = new LocalDateTime(COPTIC_PARIS); [EOL]     DateTimeFieldType[] fields = test.getFieldTypes(); [EOL]     assertSame(DateTimeFieldType.year(), fields[0]); [EOL]     assertSame(DateTimeFieldType.monthOfYear(), fields[1]); [EOL]     assertSame(DateTimeFieldType.dayOfMonth(), fields[2]); [EOL]     assertSame(DateTimeFieldType.millisOfDay(), fields[3]); [EOL]     assertNotSame(test.getFieldTypes(), test.getFieldTypes()); [EOL] }
public void testGetFieldTypes() { [EOL]     LocalDateTime test = new LocalDateTime(COPTIC_PARIS); [EOL]     DateTimeFieldType[] fields = test.getFieldTypes(); [EOL]     assertSame(DateTimeFieldType.year(), fields[0]); [EOL]     assertSame(DateTimeFieldType.monthOfYear(), fields[1]); [EOL]     assertSame(DateTimeFieldType.dayOfMonth(), fields[2]); [EOL]     assertSame(DateTimeFieldType.millisOfDay(), fields[3]); [EOL]     assertNotSame(test.getFieldTypes(), test.getFieldTypes()); [EOL] }
public void testPropertyCompareToDay() { [EOL]     LocalDateTime test1 = new LocalDateTime(TEST_TIME1); [EOL]     LocalDateTime test2 = new LocalDateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.dayOfMonth().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.dayOfMonth().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.dayOfMonth().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.dayOfMonth().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToDay() { [EOL]     LocalDateTime test1 = new LocalDateTime(TEST_TIME1); [EOL]     LocalDateTime test2 = new LocalDateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.dayOfMonth().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.dayOfMonth().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.dayOfMonth().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.dayOfMonth().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testWithField_DateTimeFieldType_int_3() { [EOL]     LocalDateTime test = new LocalDateTime(2004, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime result = test.withField(DateTimeFieldType.year(), 2004); [EOL]     assertEquals(new LocalDateTime(2004, 6, 9, 10, 20, 30, 40), test); [EOL]     assertSame(test, result); [EOL] }
public void testWithField_DateTimeFieldType_int_3() { [EOL]     LocalDateTime test = new LocalDateTime(2004, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime result = test.withField(DateTimeFieldType.year(), 2004); [EOL]     assertEquals(new LocalDateTime(2004, 6, 9, 10, 20, 30, 40), test); [EOL]     assertSame(test, result); [EOL] }
public void testWithFieldAdded_DurationFieldType_int_2() { [EOL]     LocalDateTime test = new LocalDateTime(2004, 6, 9, 10, 20, 30, 40); [EOL]     try { [EOL]         test.withFieldAdded(null, 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithFieldAdded_DurationFieldType_int_2() { [EOL]     LocalDateTime test = new LocalDateTime(2004, 6, 9, 10, 20, 30, 40); [EOL]     try { [EOL]         test.withFieldAdded(null, 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithFieldAdded_DurationFieldType_int_2() { [EOL]     LocalDateTime test = new LocalDateTime(2004, 6, 9, 10, 20, 30, 40); [EOL]     try { [EOL]         test.withFieldAdded(null, 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPlusHours_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.plusHours(1); [EOL]     LocalDateTime expected = new LocalDateTime(2002, 5, 3, 11, 20, 30, 40, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusHours(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusHours_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.plusHours(1); [EOL]     LocalDateTime expected = new LocalDateTime(2002, 5, 3, 11, 20, 30, 40, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusHours(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusHours_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.plusHours(1); [EOL]     LocalDateTime expected = new LocalDateTime(2002, 5, 3, 11, 20, 30, 40, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusHours(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusMillis_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.plusMillis(1); [EOL]     LocalDateTime expected = new LocalDateTime(2002, 5, 3, 10, 20, 30, 41, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusMillis(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusMillis_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.plusMillis(1); [EOL]     LocalDateTime expected = new LocalDateTime(2002, 5, 3, 10, 20, 30, 41, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusMillis(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusMillis_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.plusMillis(1); [EOL]     LocalDateTime expected = new LocalDateTime(2002, 5, 3, 10, 20, 30, 41, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusMillis(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusMonths_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.minusMonths(1); [EOL]     LocalDateTime expected = new LocalDateTime(2002, 4, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusMonths(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusMonths_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.minusMonths(1); [EOL]     LocalDateTime expected = new LocalDateTime(2002, 4, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusMonths(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusMonths_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.minusMonths(1); [EOL]     LocalDateTime expected = new LocalDateTime(2002, 4, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusMonths(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusWeeks_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.minusWeeks(1); [EOL]     LocalDateTime expected = new LocalDateTime(2002, 4, 26, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusWeeks(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusWeeks_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.minusWeeks(1); [EOL]     LocalDateTime expected = new LocalDateTime(2002, 4, 26, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusWeeks(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusWeeks_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.minusWeeks(1); [EOL]     LocalDateTime expected = new LocalDateTime(2002, 4, 26, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusWeeks(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusHours_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.minusHours(1); [EOL]     LocalDateTime expected = new LocalDateTime(2002, 5, 3, 9, 20, 30, 40, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusHours(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusHours_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.minusHours(1); [EOL]     LocalDateTime expected = new LocalDateTime(2002, 5, 3, 9, 20, 30, 40, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusHours(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusHours_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.minusHours(1); [EOL]     LocalDateTime expected = new LocalDateTime(2002, 5, 3, 9, 20, 30, 40, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusHours(0); [EOL]     assertSame(test, result); [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testPropertyCompareToDay() { [EOL]     LocalDateTime test1 = new LocalDateTime(TEST_TIME1); [EOL]     LocalDateTime test2 = new LocalDateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.dayOfMonth().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.dayOfMonth().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.dayOfMonth().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.dayOfMonth().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyGetMinute() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40); [EOL]     assertSame(test.getChronology().minuteOfHour(), test.minuteOfHour().getField()); [EOL]     assertEquals("minuteOfHour", test.minuteOfHour().getName()); [EOL]     assertEquals("Property[minuteOfHour]", test.minuteOfHour().toString()); [EOL]     assertSame(test, test.minuteOfHour().getLocalDateTime()); [EOL]     assertEquals(20, test.minuteOfHour().get()); [EOL]     assertEquals("20", test.minuteOfHour().getAsString()); [EOL]     assertEquals("20", test.minuteOfHour().getAsText()); [EOL]     assertEquals("20", test.minuteOfHour().getAsText(Locale.FRENCH)); [EOL]     assertEquals("20", test.minuteOfHour().getAsShortText()); [EOL]     assertEquals("20", test.minuteOfHour().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().minutes(), test.minuteOfHour().getDurationField()); [EOL]     assertEquals(test.getChronology().hours(), test.minuteOfHour().getRangeDurationField()); [EOL]     assertEquals(2, test.minuteOfHour().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.minuteOfHour().getMaximumShortTextLength(null)); [EOL] }
public void testPropertySetTextSecond() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime copy = test.secondOfMinute().setCopy("12"); [EOL]     check(test, 2005, 6, 9, 10, 20, 30, 40); [EOL]     check(copy, 2005, 6, 9, 10, 20, 12, 40); [EOL] }
public void testPropertyGetMinute() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40); [EOL]     assertSame(test.getChronology().minuteOfHour(), test.minuteOfHour().getField()); [EOL]     assertEquals("minuteOfHour", test.minuteOfHour().getName()); [EOL]     assertEquals("Property[minuteOfHour]", test.minuteOfHour().toString()); [EOL]     assertSame(test, test.minuteOfHour().getLocalDateTime()); [EOL]     assertEquals(20, test.minuteOfHour().get()); [EOL]     assertEquals("20", test.minuteOfHour().getAsString()); [EOL]     assertEquals("20", test.minuteOfHour().getAsText()); [EOL]     assertEquals("20", test.minuteOfHour().getAsText(Locale.FRENCH)); [EOL]     assertEquals("20", test.minuteOfHour().getAsShortText()); [EOL]     assertEquals("20", test.minuteOfHour().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().minutes(), test.minuteOfHour().getDurationField()); [EOL]     assertEquals(test.getChronology().hours(), test.minuteOfHour().getRangeDurationField()); [EOL]     assertEquals(2, test.minuteOfHour().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.minuteOfHour().getMaximumShortTextLength(null)); [EOL] }
public void testPropertySetTextSecond() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime copy = test.secondOfMinute().setCopy("12"); [EOL]     check(test, 2005, 6, 9, 10, 20, 30, 40); [EOL]     check(copy, 2005, 6, 9, 10, 20, 12, 40); [EOL] }
public void testPropertySetTextSecond() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime copy = test.secondOfMinute().setCopy("12"); [EOL]     check(test, 2005, 6, 9, 10, 20, 30, 40); [EOL]     check(copy, 2005, 6, 9, 10, 20, 12, 40); [EOL] }
public void testPropertySetTextSecond() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime copy = test.secondOfMinute().setCopy("12"); [EOL]     check(test, 2005, 6, 9, 10, 20, 30, 40); [EOL]     check(copy, 2005, 6, 9, 10, 20, 12, 40); [EOL] }
public void testPropertySetTextSecond() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime copy = test.secondOfMinute().setCopy("12"); [EOL]     check(test, 2005, 6, 9, 10, 20, 30, 40); [EOL]     check(copy, 2005, 6, 9, 10, 20, 12, 40); [EOL] }
public void testPropertySetTextSecond() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime copy = test.secondOfMinute().setCopy("12"); [EOL]     check(test, 2005, 6, 9, 10, 20, 30, 40); [EOL]     check(copy, 2005, 6, 9, 10, 20, 12, 40); [EOL] }
public void testPropertySetTextSecond() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime copy = test.secondOfMinute().setCopy("12"); [EOL]     check(test, 2005, 6, 9, 10, 20, 30, 40); [EOL]     check(copy, 2005, 6, 9, 10, 20, 12, 40); [EOL] }
public void testConstructor_badconverterObject() throws Throwable { [EOL]     try { [EOL]         ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE); [EOL]         Instant test = new Instant(new Integer(0)); [EOL]         assertEquals(ISOChronology.getInstanceUTC(), test.getChronology()); [EOL]         assertEquals(0L, test.getMillis()); [EOL]     } finally { [EOL]         ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE); [EOL]     } [EOL] }
public void test_constructor() { [EOL]     try { [EOL]         new ScaledDurationField(null, DurationFieldType.minutes(), 10); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new ScaledDurationField(MillisDurationField.INSTANCE, null, 10); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.minutes(), 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.minutes(), 1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void test_constructor() { [EOL]     try { [EOL]         new ScaledDurationField(null, DurationFieldType.minutes(), 10); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new ScaledDurationField(MillisDurationField.INSTANCE, null, 10); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.minutes(), 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.minutes(), 1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void test_constructor() { [EOL]     try { [EOL]         new ScaledDurationField(null, DurationFieldType.minutes(), 10); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new ScaledDurationField(MillisDurationField.INSTANCE, null, 10); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.minutes(), 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.minutes(), 1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGetZone_String() throws Exception { [EOL]     Provider p = new UTCProvider(); [EOL]     assertSame(DateTimeZone.UTC, p.getZone("UTC")); [EOL]     assertEquals(null, p.getZone(null)); [EOL]     assertEquals(null, p.getZone("Europe/London")); [EOL]     assertEquals(null, p.getZone("Blah")); [EOL] }
public void testGetZone_String() throws Exception { [EOL]     Provider p = new UTCProvider(); [EOL]     assertSame(DateTimeZone.UTC, p.getZone("UTC")); [EOL]     assertEquals(null, p.getZone(null)); [EOL]     assertEquals(null, p.getZone("Europe/London")); [EOL]     assertEquals(null, p.getZone("Blah")); [EOL] }
public void testGetZone_String() throws Exception { [EOL]     Provider p = new UTCProvider(); [EOL]     assertSame(DateTimeZone.UTC, p.getZone("UTC")); [EOL]     assertEquals(null, p.getZone(null)); [EOL]     assertEquals(null, p.getZone("Europe/London")); [EOL]     assertEquals(null, p.getZone("Blah")); [EOL] }
public void testParseMutableDateTime_offsetParsed() { [EOL]     MutableDateTime expect = null; [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     assertEquals(expect, g.withOffsetParsed().parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 6, 20, 30, 0, DateTimeZone.forOffsetHours(-4)); [EOL]     assertEquals(expect, g.withOffsetParsed().parseMutableDateTime("2004-06-09T06:20:30-04:00")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     assertEquals(expect, g.withZone(PARIS).withOffsetParsed().parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS); [EOL]     assertEquals(expect, g.withOffsetParsed().withZone(PARIS).parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL] }
public void testParseMutableDateTime_offsetParsed() { [EOL]     MutableDateTime expect = null; [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     assertEquals(expect, g.withOffsetParsed().parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 6, 20, 30, 0, DateTimeZone.forOffsetHours(-4)); [EOL]     assertEquals(expect, g.withOffsetParsed().parseMutableDateTime("2004-06-09T06:20:30-04:00")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     assertEquals(expect, g.withZone(PARIS).withOffsetParsed().parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS); [EOL]     assertEquals(expect, g.withOffsetParsed().withZone(PARIS).parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL] }
public void testParseMutableDateTime_offsetParsed() { [EOL]     MutableDateTime expect = null; [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     assertEquals(expect, g.withOffsetParsed().parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 6, 20, 30, 0, DateTimeZone.forOffsetHours(-4)); [EOL]     assertEquals(expect, g.withOffsetParsed().parseMutableDateTime("2004-06-09T06:20:30-04:00")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     assertEquals(expect, g.withZone(PARIS).withOffsetParsed().parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS); [EOL]     assertEquals(expect, g.withOffsetParsed().withZone(PARIS).parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL] }
public void testParseMutableDateTime_offsetParsed() { [EOL]     MutableDateTime expect = null; [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     assertEquals(expect, g.withOffsetParsed().parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 6, 20, 30, 0, DateTimeZone.forOffsetHours(-4)); [EOL]     assertEquals(expect, g.withOffsetParsed().parseMutableDateTime("2004-06-09T06:20:30-04:00")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     assertEquals(expect, g.withZone(PARIS).withOffsetParsed().parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS); [EOL]     assertEquals(expect, g.withOffsetParsed().withZone(PARIS).parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL] }
public void testWithGetOffsetParsedMethods() { [EOL]     DateTimeFormatter f2 = f; [EOL]     assertEquals(false, f2.isOffsetParsed()); [EOL]     assertEquals(null, f2.getZone()); [EOL]     f2 = f.withOffsetParsed(); [EOL]     assertEquals(true, f2.isOffsetParsed()); [EOL]     assertEquals(null, f2.getZone()); [EOL]     f2 = f2.withZone(PARIS); [EOL]     assertEquals(false, f2.isOffsetParsed()); [EOL]     assertEquals(PARIS, f2.getZone()); [EOL]     f2 = f2.withOffsetParsed(); [EOL]     assertEquals(true, f2.isOffsetParsed()); [EOL]     assertEquals(null, f2.getZone()); [EOL]     f2 = f.withOffsetParsed(); [EOL]     assertNotSame(f, f2); [EOL]     DateTimeFormatter f3 = f2.withOffsetParsed(); [EOL]     assertSame(f2, f3); [EOL] }
public void testWithGetOffsetParsedMethods() { [EOL]     DateTimeFormatter f2 = f; [EOL]     assertEquals(false, f2.isOffsetParsed()); [EOL]     assertEquals(null, f2.getZone()); [EOL]     f2 = f.withOffsetParsed(); [EOL]     assertEquals(true, f2.isOffsetParsed()); [EOL]     assertEquals(null, f2.getZone()); [EOL]     f2 = f2.withZone(PARIS); [EOL]     assertEquals(false, f2.isOffsetParsed()); [EOL]     assertEquals(PARIS, f2.getZone()); [EOL]     f2 = f2.withOffsetParsed(); [EOL]     assertEquals(true, f2.isOffsetParsed()); [EOL]     assertEquals(null, f2.getZone()); [EOL]     f2 = f.withOffsetParsed(); [EOL]     assertNotSame(f, f2); [EOL]     DateTimeFormatter f3 = f2.withOffsetParsed(); [EOL]     assertSame(f2, f3); [EOL] }
public void test_appendFixedDecimal() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.year(), 4); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     assertEquals("2007", f.print(new DateTime("2007-01-01"))); [EOL]     assertEquals("0123", f.print(new DateTime("123-01-01"))); [EOL]     assertEquals("0001", f.print(new DateTime("1-2-3"))); [EOL]     assertEquals("99999", f.print(new DateTime("99999-2-3"))); [EOL]     assertEquals("-0099", f.print(new DateTime("-99-2-3"))); [EOL]     assertEquals("0000", f.print(new DateTime("0-2-3"))); [EOL]     assertEquals(2001, f.parseDateTime("2001").getYear()); [EOL]     try { [EOL]         f.parseDateTime("-2001"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("200"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("20016"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.hourOfDay(), 2); [EOL]     bld.appendLiteral(':'); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.minuteOfHour(), 2); [EOL]     bld.appendLiteral(':'); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.secondOfMinute(), 2); [EOL]     f = bld.toFormatter(); [EOL]     assertEquals("01:02:34", f.print(new DateTime("T1:2:34"))); [EOL]     DateTime dt = f.parseDateTime("01:02:34"); [EOL]     assertEquals(1, dt.getHourOfDay()); [EOL]     assertEquals(2, dt.getMinuteOfHour()); [EOL]     assertEquals(34, dt.getSecondOfMinute()); [EOL]     try { [EOL]         f.parseDateTime("0145:02:34"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("01:0:34"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL] }
public void test_appendFixedDecimal() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.year(), 4); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     assertEquals("2007", f.print(new DateTime("2007-01-01"))); [EOL]     assertEquals("0123", f.print(new DateTime("123-01-01"))); [EOL]     assertEquals("0001", f.print(new DateTime("1-2-3"))); [EOL]     assertEquals("99999", f.print(new DateTime("99999-2-3"))); [EOL]     assertEquals("-0099", f.print(new DateTime("-99-2-3"))); [EOL]     assertEquals("0000", f.print(new DateTime("0-2-3"))); [EOL]     assertEquals(2001, f.parseDateTime("2001").getYear()); [EOL]     try { [EOL]         f.parseDateTime("-2001"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("200"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("20016"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.hourOfDay(), 2); [EOL]     bld.appendLiteral(':'); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.minuteOfHour(), 2); [EOL]     bld.appendLiteral(':'); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.secondOfMinute(), 2); [EOL]     f = bld.toFormatter(); [EOL]     assertEquals("01:02:34", f.print(new DateTime("T1:2:34"))); [EOL]     DateTime dt = f.parseDateTime("01:02:34"); [EOL]     assertEquals(1, dt.getHourOfDay()); [EOL]     assertEquals(2, dt.getMinuteOfHour()); [EOL]     assertEquals(34, dt.getSecondOfMinute()); [EOL]     try { [EOL]         f.parseDateTime("0145:02:34"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("01:0:34"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL] }
public void testParseMutableDateTime_offsetParsed() { [EOL]     MutableDateTime expect = null; [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     assertEquals(expect, g.withOffsetParsed().parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 6, 20, 30, 0, DateTimeZone.forOffsetHours(-4)); [EOL]     assertEquals(expect, g.withOffsetParsed().parseMutableDateTime("2004-06-09T06:20:30-04:00")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     assertEquals(expect, g.withZone(PARIS).withOffsetParsed().parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS); [EOL]     assertEquals(expect, g.withOffsetParsed().withZone(PARIS).parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL] }
public void testParseMutableDateTime_offsetParsed() { [EOL]     MutableDateTime expect = null; [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     assertEquals(expect, g.withOffsetParsed().parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 6, 20, 30, 0, DateTimeZone.forOffsetHours(-4)); [EOL]     assertEquals(expect, g.withOffsetParsed().parseMutableDateTime("2004-06-09T06:20:30-04:00")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     assertEquals(expect, g.withZone(PARIS).withOffsetParsed().parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS); [EOL]     assertEquals(expect, g.withOffsetParsed().withZone(PARIS).parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL] }
public void testWithGetZone() { [EOL]     DateTimeFormatter f2 = f.withZone(PARIS); [EOL]     assertEquals(PARIS, f2.getZone()); [EOL]     assertSame(f2, f2.withZone(PARIS)); [EOL]     f2 = f.withZone(null); [EOL]     assertEquals(null, f2.getZone()); [EOL]     assertSame(f2, f2.withZone(null)); [EOL] }
public void testParseLocalDate_yearOfCentury() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yy M d").withChronology(chrono).withLocale(Locale.UK).withPivotYear(2050); [EOL]     LocalDate date = new LocalDate(2050, 8, 4, chrono); [EOL]     assertEquals(date, f.parseLocalDate("50 8 4")); [EOL] }
public void testParseLocalDate_yearOfCentury() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yy M d").withChronology(chrono).withLocale(Locale.UK).withPivotYear(2050); [EOL]     LocalDate date = new LocalDate(2050, 8, 4, chrono); [EOL]     assertEquals(date, f.parseLocalDate("50 8 4")); [EOL] }
public void testParseLocalDate_yearOfCentury() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yy M d").withChronology(chrono).withLocale(Locale.UK).withPivotYear(2050); [EOL]     LocalDate date = new LocalDate(2050, 8, 4, chrono); [EOL]     assertEquals(date, f.parseLocalDate("50 8 4")); [EOL] }
public void testParseLocalDate_yearOfCentury() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yy M d").withChronology(chrono).withLocale(Locale.UK).withPivotYear(2050); [EOL]     LocalDate date = new LocalDate(2050, 8, 4, chrono); [EOL]     assertEquals(date, f.parseLocalDate("50 8 4")); [EOL] }
public void testParseLocalDate_yearOfCentury() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yy M d").withChronology(chrono).withLocale(Locale.UK).withPivotYear(2050); [EOL]     LocalDate date = new LocalDate(2050, 8, 4, chrono); [EOL]     assertEquals(date, f.parseLocalDate("50 8 4")); [EOL] }
public void testParseLocalDate_yearOfCentury() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yy M d").withChronology(chrono).withLocale(Locale.UK).withPivotYear(2050); [EOL]     LocalDate date = new LocalDate(2050, 8, 4, chrono); [EOL]     assertEquals(date, f.parseLocalDate("50 8 4")); [EOL] }
public void testPrint_appendableMethods() throws Exception { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     StringBuilder buf = new StringBuilder(); [EOL]     f.printTo(buf, dt); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", buf.toString()); [EOL]     buf = new StringBuilder(); [EOL]     f.printTo(buf, dt.getMillis()); [EOL]     assertEquals("Wed 2004-06-09T11:20:30+01:00", buf.toString()); [EOL]     buf = new StringBuilder(); [EOL]     ISODateTimeFormat.yearMonthDay().printTo(buf, dt.toLocalDate()); [EOL]     assertEquals("2004-06-09", buf.toString()); [EOL]     buf = new StringBuilder(); [EOL]     try { [EOL]         ISODateTimeFormat.yearMonthDay().printTo(buf, (ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPrint_appendableMethods() throws Exception { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     StringBuilder buf = new StringBuilder(); [EOL]     f.printTo(buf, dt); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", buf.toString()); [EOL]     buf = new StringBuilder(); [EOL]     f.printTo(buf, dt.getMillis()); [EOL]     assertEquals("Wed 2004-06-09T11:20:30+01:00", buf.toString()); [EOL]     buf = new StringBuilder(); [EOL]     ISODateTimeFormat.yearMonthDay().printTo(buf, dt.toLocalDate()); [EOL]     assertEquals("2004-06-09", buf.toString()); [EOL]     buf = new StringBuilder(); [EOL]     try { [EOL]         ISODateTimeFormat.yearMonthDay().printTo(buf, (ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPrint_appendableMethods() throws Exception { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     StringBuilder buf = new StringBuilder(); [EOL]     f.printTo(buf, dt); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", buf.toString()); [EOL]     buf = new StringBuilder(); [EOL]     f.printTo(buf, dt.getMillis()); [EOL]     assertEquals("Wed 2004-06-09T11:20:30+01:00", buf.toString()); [EOL]     buf = new StringBuilder(); [EOL]     ISODateTimeFormat.yearMonthDay().printTo(buf, dt.toLocalDate()); [EOL]     assertEquals("2004-06-09", buf.toString()); [EOL]     buf = new StringBuilder(); [EOL]     try { [EOL]         ISODateTimeFormat.yearMonthDay().printTo(buf, (ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPrint_appendableMethods() throws Exception { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     StringBuilder buf = new StringBuilder(); [EOL]     f.printTo(buf, dt); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", buf.toString()); [EOL]     buf = new StringBuilder(); [EOL]     f.printTo(buf, dt.getMillis()); [EOL]     assertEquals("Wed 2004-06-09T11:20:30+01:00", buf.toString()); [EOL]     buf = new StringBuilder(); [EOL]     ISODateTimeFormat.yearMonthDay().printTo(buf, dt.toLocalDate()); [EOL]     assertEquals("2004-06-09", buf.toString()); [EOL]     buf = new StringBuilder(); [EOL]     try { [EOL]         ISODateTimeFormat.yearMonthDay().printTo(buf, (ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPrint_appendableMethods() throws Exception { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     StringBuilder buf = new StringBuilder(); [EOL]     f.printTo(buf, dt); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", buf.toString()); [EOL]     buf = new StringBuilder(); [EOL]     f.printTo(buf, dt.getMillis()); [EOL]     assertEquals("Wed 2004-06-09T11:20:30+01:00", buf.toString()); [EOL]     buf = new StringBuilder(); [EOL]     ISODateTimeFormat.yearMonthDay().printTo(buf, dt.toLocalDate()); [EOL]     assertEquals("2004-06-09", buf.toString()); [EOL]     buf = new StringBuilder(); [EOL]     try { [EOL]         ISODateTimeFormat.yearMonthDay().printTo(buf, (ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPrint_appendableMethods() throws Exception { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     StringBuilder buf = new StringBuilder(); [EOL]     f.printTo(buf, dt); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", buf.toString()); [EOL]     buf = new StringBuilder(); [EOL]     f.printTo(buf, dt.getMillis()); [EOL]     assertEquals("Wed 2004-06-09T11:20:30+01:00", buf.toString()); [EOL]     buf = new StringBuilder(); [EOL]     ISODateTimeFormat.yearMonthDay().printTo(buf, dt.toLocalDate()); [EOL]     assertEquals("2004-06-09", buf.toString()); [EOL]     buf = new StringBuilder(); [EOL]     try { [EOL]         ISODateTimeFormat.yearMonthDay().printTo(buf, (ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPrint_appendableMethods() throws Exception { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     StringBuilder buf = new StringBuilder(); [EOL]     f.printTo(buf, dt); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", buf.toString()); [EOL]     buf = new StringBuilder(); [EOL]     f.printTo(buf, dt.getMillis()); [EOL]     assertEquals("Wed 2004-06-09T11:20:30+01:00", buf.toString()); [EOL]     buf = new StringBuilder(); [EOL]     ISODateTimeFormat.yearMonthDay().printTo(buf, dt.toLocalDate()); [EOL]     assertEquals("2004-06-09", buf.toString()); [EOL]     buf = new StringBuilder(); [EOL]     try { [EOL]         ISODateTimeFormat.yearMonthDay().printTo(buf, (ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPrint_appendableMethods() throws Exception { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     StringBuilder buf = new StringBuilder(); [EOL]     f.printTo(buf, dt); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", buf.toString()); [EOL]     buf = new StringBuilder(); [EOL]     f.printTo(buf, dt.getMillis()); [EOL]     assertEquals("Wed 2004-06-09T11:20:30+01:00", buf.toString()); [EOL]     buf = new StringBuilder(); [EOL]     ISODateTimeFormat.yearMonthDay().printTo(buf, dt.toLocalDate()); [EOL]     assertEquals("2004-06-09", buf.toString()); [EOL]     buf = new StringBuilder(); [EOL]     try { [EOL]         ISODateTimeFormat.yearMonthDay().printTo(buf, (ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPrint_appendableMethods() throws Exception { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     StringBuilder buf = new StringBuilder(); [EOL]     f.printTo(buf, dt); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", buf.toString()); [EOL]     buf = new StringBuilder(); [EOL]     f.printTo(buf, dt.getMillis()); [EOL]     assertEquals("Wed 2004-06-09T11:20:30+01:00", buf.toString()); [EOL]     buf = new StringBuilder(); [EOL]     ISODateTimeFormat.yearMonthDay().printTo(buf, dt.toLocalDate()); [EOL]     assertEquals("2004-06-09", buf.toString()); [EOL]     buf = new StringBuilder(); [EOL]     try { [EOL]         ISODateTimeFormat.yearMonthDay().printTo(buf, (ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPrint_appendableMethods() throws Exception { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     StringBuilder buf = new StringBuilder(); [EOL]     f.printTo(buf, dt); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", buf.toString()); [EOL]     buf = new StringBuilder(); [EOL]     f.printTo(buf, dt.getMillis()); [EOL]     assertEquals("Wed 2004-06-09T11:20:30+01:00", buf.toString()); [EOL]     buf = new StringBuilder(); [EOL]     ISODateTimeFormat.yearMonthDay().printTo(buf, dt.toLocalDate()); [EOL]     assertEquals("2004-06-09", buf.toString()); [EOL]     buf = new StringBuilder(); [EOL]     try { [EOL]         ISODateTimeFormat.yearMonthDay().printTo(buf, (ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPrint_appendableMethods() throws Exception { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     StringBuilder buf = new StringBuilder(); [EOL]     f.printTo(buf, dt); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", buf.toString()); [EOL]     buf = new StringBuilder(); [EOL]     f.printTo(buf, dt.getMillis()); [EOL]     assertEquals("Wed 2004-06-09T11:20:30+01:00", buf.toString()); [EOL]     buf = new StringBuilder(); [EOL]     ISODateTimeFormat.yearMonthDay().printTo(buf, dt.toLocalDate()); [EOL]     assertEquals("2004-06-09", buf.toString()); [EOL]     buf = new StringBuilder(); [EOL]     try { [EOL]         ISODateTimeFormat.yearMonthDay().printTo(buf, (ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testParseInto_simple() { [EOL]     MutableDateTime expect = null; [EOL]     expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON); [EOL]     MutableDateTime result = new MutableDateTime(0L); [EOL]     assertEquals(20, g.parseInto(result, "2004-06-09T10:20:30Z", 0)); [EOL]     assertEquals(expect, result); [EOL]     try { [EOL]         g.parseInto(null, "2004-06-09T10:20:30Z", 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(~0, g.parseInto(result, "ABC", 0)); [EOL]     assertEquals(~10, g.parseInto(result, "2004-06-09", 0)); [EOL]     assertEquals(~13, g.parseInto(result, "XX2004-06-09T", 2)); [EOL] }
public void testParseInto_simple() { [EOL]     MutableDateTime expect = null; [EOL]     expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON); [EOL]     MutableDateTime result = new MutableDateTime(0L); [EOL]     assertEquals(20, g.parseInto(result, "2004-06-09T10:20:30Z", 0)); [EOL]     assertEquals(expect, result); [EOL]     try { [EOL]         g.parseInto(null, "2004-06-09T10:20:30Z", 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(~0, g.parseInto(result, "ABC", 0)); [EOL]     assertEquals(~10, g.parseInto(result, "2004-06-09", 0)); [EOL]     assertEquals(~13, g.parseInto(result, "XX2004-06-09T", 2)); [EOL] }
public void testParseInto_simple() { [EOL]     MutableDateTime expect = null; [EOL]     expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON); [EOL]     MutableDateTime result = new MutableDateTime(0L); [EOL]     assertEquals(20, g.parseInto(result, "2004-06-09T10:20:30Z", 0)); [EOL]     assertEquals(expect, result); [EOL]     try { [EOL]         g.parseInto(null, "2004-06-09T10:20:30Z", 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(~0, g.parseInto(result, "ABC", 0)); [EOL]     assertEquals(~10, g.parseInto(result, "2004-06-09", 0)); [EOL]     assertEquals(~13, g.parseInto(result, "XX2004-06-09T", 2)); [EOL] }
public void testParseInto_simple() { [EOL]     MutableDateTime expect = null; [EOL]     expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON); [EOL]     MutableDateTime result = new MutableDateTime(0L); [EOL]     assertEquals(20, g.parseInto(result, "2004-06-09T10:20:30Z", 0)); [EOL]     assertEquals(expect, result); [EOL]     try { [EOL]         g.parseInto(null, "2004-06-09T10:20:30Z", 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(~0, g.parseInto(result, "ABC", 0)); [EOL]     assertEquals(~10, g.parseInto(result, "2004-06-09", 0)); [EOL]     assertEquals(~13, g.parseInto(result, "XX2004-06-09T", 2)); [EOL] }
public void testParseInto_simple() { [EOL]     MutableDateTime expect = null; [EOL]     expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON); [EOL]     MutableDateTime result = new MutableDateTime(0L); [EOL]     assertEquals(20, g.parseInto(result, "2004-06-09T10:20:30Z", 0)); [EOL]     assertEquals(expect, result); [EOL]     try { [EOL]         g.parseInto(null, "2004-06-09T10:20:30Z", 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(~0, g.parseInto(result, "ABC", 0)); [EOL]     assertEquals(~10, g.parseInto(result, "2004-06-09", 0)); [EOL]     assertEquals(~13, g.parseInto(result, "XX2004-06-09T", 2)); [EOL] }
public void test_appendFixedDecimal() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.year(), 4); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     assertEquals("2007", f.print(new DateTime("2007-01-01"))); [EOL]     assertEquals("0123", f.print(new DateTime("123-01-01"))); [EOL]     assertEquals("0001", f.print(new DateTime("1-2-3"))); [EOL]     assertEquals("99999", f.print(new DateTime("99999-2-3"))); [EOL]     assertEquals("-0099", f.print(new DateTime("-99-2-3"))); [EOL]     assertEquals("0000", f.print(new DateTime("0-2-3"))); [EOL]     assertEquals(2001, f.parseDateTime("2001").getYear()); [EOL]     try { [EOL]         f.parseDateTime("-2001"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("200"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("20016"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.hourOfDay(), 2); [EOL]     bld.appendLiteral(':'); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.minuteOfHour(), 2); [EOL]     bld.appendLiteral(':'); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.secondOfMinute(), 2); [EOL]     f = bld.toFormatter(); [EOL]     assertEquals("01:02:34", f.print(new DateTime("T1:2:34"))); [EOL]     DateTime dt = f.parseDateTime("01:02:34"); [EOL]     assertEquals(1, dt.getHourOfDay()); [EOL]     assertEquals(2, dt.getMinuteOfHour()); [EOL]     assertEquals(34, dt.getSecondOfMinute()); [EOL]     try { [EOL]         f.parseDateTime("0145:02:34"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("01:0:34"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL] }
public void test_appendFixedDecimal() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.year(), 4); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     assertEquals("2007", f.print(new DateTime("2007-01-01"))); [EOL]     assertEquals("0123", f.print(new DateTime("123-01-01"))); [EOL]     assertEquals("0001", f.print(new DateTime("1-2-3"))); [EOL]     assertEquals("99999", f.print(new DateTime("99999-2-3"))); [EOL]     assertEquals("-0099", f.print(new DateTime("-99-2-3"))); [EOL]     assertEquals("0000", f.print(new DateTime("0-2-3"))); [EOL]     assertEquals(2001, f.parseDateTime("2001").getYear()); [EOL]     try { [EOL]         f.parseDateTime("-2001"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("200"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("20016"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.hourOfDay(), 2); [EOL]     bld.appendLiteral(':'); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.minuteOfHour(), 2); [EOL]     bld.appendLiteral(':'); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.secondOfMinute(), 2); [EOL]     f = bld.toFormatter(); [EOL]     assertEquals("01:02:34", f.print(new DateTime("T1:2:34"))); [EOL]     DateTime dt = f.parseDateTime("01:02:34"); [EOL]     assertEquals(1, dt.getHourOfDay()); [EOL]     assertEquals(2, dt.getMinuteOfHour()); [EOL]     assertEquals(34, dt.getSecondOfMinute()); [EOL]     try { [EOL]         f.parseDateTime("0145:02:34"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("01:0:34"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL] }
public void test_appendFixedDecimal() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.year(), 4); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     assertEquals("2007", f.print(new DateTime("2007-01-01"))); [EOL]     assertEquals("0123", f.print(new DateTime("123-01-01"))); [EOL]     assertEquals("0001", f.print(new DateTime("1-2-3"))); [EOL]     assertEquals("99999", f.print(new DateTime("99999-2-3"))); [EOL]     assertEquals("-0099", f.print(new DateTime("-99-2-3"))); [EOL]     assertEquals("0000", f.print(new DateTime("0-2-3"))); [EOL]     assertEquals(2001, f.parseDateTime("2001").getYear()); [EOL]     try { [EOL]         f.parseDateTime("-2001"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("200"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("20016"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.hourOfDay(), 2); [EOL]     bld.appendLiteral(':'); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.minuteOfHour(), 2); [EOL]     bld.appendLiteral(':'); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.secondOfMinute(), 2); [EOL]     f = bld.toFormatter(); [EOL]     assertEquals("01:02:34", f.print(new DateTime("T1:2:34"))); [EOL]     DateTime dt = f.parseDateTime("01:02:34"); [EOL]     assertEquals(1, dt.getHourOfDay()); [EOL]     assertEquals(2, dt.getMinuteOfHour()); [EOL]     assertEquals(34, dt.getSecondOfMinute()); [EOL]     try { [EOL]         f.parseDateTime("0145:02:34"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("01:0:34"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL] }
public void testParseLocalTime_simple() { [EOL]     assertEquals(new LocalTime(10, 20, 30), g.parseLocalTime("2004-06-09T10:20:30Z")); [EOL]     assertEquals(new LocalTime(10, 20, 30), g.parseLocalTime("2004-06-09T10:20:30+18:00")); [EOL]     assertEquals(new LocalTime(10, 20, 30), g.parseLocalTime("2004-06-09T10:20:30-18:00")); [EOL]     assertEquals(new LocalTime(10, 20, 30, 0, BUDDHIST_PARIS), g.withChronology(BUDDHIST_PARIS).parseLocalTime("2004-06-09T10:20:30Z")); [EOL]     try { [EOL]         g.parseDateTime("ABC"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void test_appendFixedDecimal() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.year(), 4); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     assertEquals("2007", f.print(new DateTime("2007-01-01"))); [EOL]     assertEquals("0123", f.print(new DateTime("123-01-01"))); [EOL]     assertEquals("0001", f.print(new DateTime("1-2-3"))); [EOL]     assertEquals("99999", f.print(new DateTime("99999-2-3"))); [EOL]     assertEquals("-0099", f.print(new DateTime("-99-2-3"))); [EOL]     assertEquals("0000", f.print(new DateTime("0-2-3"))); [EOL]     assertEquals(2001, f.parseDateTime("2001").getYear()); [EOL]     try { [EOL]         f.parseDateTime("-2001"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("200"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("20016"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.hourOfDay(), 2); [EOL]     bld.appendLiteral(':'); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.minuteOfHour(), 2); [EOL]     bld.appendLiteral(':'); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.secondOfMinute(), 2); [EOL]     f = bld.toFormatter(); [EOL]     assertEquals("01:02:34", f.print(new DateTime("T1:2:34"))); [EOL]     DateTime dt = f.parseDateTime("01:02:34"); [EOL]     assertEquals(1, dt.getHourOfDay()); [EOL]     assertEquals(2, dt.getMinuteOfHour()); [EOL]     assertEquals(34, dt.getSecondOfMinute()); [EOL]     try { [EOL]         f.parseDateTime("0145:02:34"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("01:0:34"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL] }
public void test_appendFixedDecimal() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.year(), 4); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     assertEquals("2007", f.print(new DateTime("2007-01-01"))); [EOL]     assertEquals("0123", f.print(new DateTime("123-01-01"))); [EOL]     assertEquals("0001", f.print(new DateTime("1-2-3"))); [EOL]     assertEquals("99999", f.print(new DateTime("99999-2-3"))); [EOL]     assertEquals("-0099", f.print(new DateTime("-99-2-3"))); [EOL]     assertEquals("0000", f.print(new DateTime("0-2-3"))); [EOL]     assertEquals(2001, f.parseDateTime("2001").getYear()); [EOL]     try { [EOL]         f.parseDateTime("-2001"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("200"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("20016"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.hourOfDay(), 2); [EOL]     bld.appendLiteral(':'); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.minuteOfHour(), 2); [EOL]     bld.appendLiteral(':'); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.secondOfMinute(), 2); [EOL]     f = bld.toFormatter(); [EOL]     assertEquals("01:02:34", f.print(new DateTime("T1:2:34"))); [EOL]     DateTime dt = f.parseDateTime("01:02:34"); [EOL]     assertEquals(1, dt.getHourOfDay()); [EOL]     assertEquals(2, dt.getMinuteOfHour()); [EOL]     assertEquals(34, dt.getSecondOfMinute()); [EOL]     try { [EOL]         f.parseDateTime("0145:02:34"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("01:0:34"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL] }
public void test_appendFixedDecimal() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.year(), 4); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     assertEquals("2007", f.print(new DateTime("2007-01-01"))); [EOL]     assertEquals("0123", f.print(new DateTime("123-01-01"))); [EOL]     assertEquals("0001", f.print(new DateTime("1-2-3"))); [EOL]     assertEquals("99999", f.print(new DateTime("99999-2-3"))); [EOL]     assertEquals("-0099", f.print(new DateTime("-99-2-3"))); [EOL]     assertEquals("0000", f.print(new DateTime("0-2-3"))); [EOL]     assertEquals(2001, f.parseDateTime("2001").getYear()); [EOL]     try { [EOL]         f.parseDateTime("-2001"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("200"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("20016"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.hourOfDay(), 2); [EOL]     bld.appendLiteral(':'); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.minuteOfHour(), 2); [EOL]     bld.appendLiteral(':'); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.secondOfMinute(), 2); [EOL]     f = bld.toFormatter(); [EOL]     assertEquals("01:02:34", f.print(new DateTime("T1:2:34"))); [EOL]     DateTime dt = f.parseDateTime("01:02:34"); [EOL]     assertEquals(1, dt.getHourOfDay()); [EOL]     assertEquals(2, dt.getMinuteOfHour()); [EOL]     assertEquals(34, dt.getSecondOfMinute()); [EOL]     try { [EOL]         f.parseDateTime("0145:02:34"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("01:0:34"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL] }
public void test_appendFixedDecimal() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.year(), 4); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     assertEquals("2007", f.print(new DateTime("2007-01-01"))); [EOL]     assertEquals("0123", f.print(new DateTime("123-01-01"))); [EOL]     assertEquals("0001", f.print(new DateTime("1-2-3"))); [EOL]     assertEquals("99999", f.print(new DateTime("99999-2-3"))); [EOL]     assertEquals("-0099", f.print(new DateTime("-99-2-3"))); [EOL]     assertEquals("0000", f.print(new DateTime("0-2-3"))); [EOL]     assertEquals(2001, f.parseDateTime("2001").getYear()); [EOL]     try { [EOL]         f.parseDateTime("-2001"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("200"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("20016"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.hourOfDay(), 2); [EOL]     bld.appendLiteral(':'); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.minuteOfHour(), 2); [EOL]     bld.appendLiteral(':'); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.secondOfMinute(), 2); [EOL]     f = bld.toFormatter(); [EOL]     assertEquals("01:02:34", f.print(new DateTime("T1:2:34"))); [EOL]     DateTime dt = f.parseDateTime("01:02:34"); [EOL]     assertEquals(1, dt.getHourOfDay()); [EOL]     assertEquals(2, dt.getMinuteOfHour()); [EOL]     assertEquals(34, dt.getSecondOfMinute()); [EOL]     try { [EOL]         f.parseDateTime("0145:02:34"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("01:0:34"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL] }
public void test_appendFixedDecimal() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.year(), 4); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     assertEquals("2007", f.print(new DateTime("2007-01-01"))); [EOL]     assertEquals("0123", f.print(new DateTime("123-01-01"))); [EOL]     assertEquals("0001", f.print(new DateTime("1-2-3"))); [EOL]     assertEquals("99999", f.print(new DateTime("99999-2-3"))); [EOL]     assertEquals("-0099", f.print(new DateTime("-99-2-3"))); [EOL]     assertEquals("0000", f.print(new DateTime("0-2-3"))); [EOL]     assertEquals(2001, f.parseDateTime("2001").getYear()); [EOL]     try { [EOL]         f.parseDateTime("-2001"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("200"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("20016"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.hourOfDay(), 2); [EOL]     bld.appendLiteral(':'); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.minuteOfHour(), 2); [EOL]     bld.appendLiteral(':'); [EOL]     bld.appendFixedDecimal(DateTimeFieldType.secondOfMinute(), 2); [EOL]     f = bld.toFormatter(); [EOL]     assertEquals("01:02:34", f.print(new DateTime("T1:2:34"))); [EOL]     DateTime dt = f.parseDateTime("01:02:34"); [EOL]     assertEquals(1, dt.getHourOfDay()); [EOL]     assertEquals(2, dt.getMinuteOfHour()); [EOL]     assertEquals(34, dt.getSecondOfMinute()); [EOL]     try { [EOL]         f.parseDateTime("0145:02:34"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("01:0:34"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL] }
public void testParseMutableDateTime_offsetParsed() { [EOL]     MutableDateTime expect = null; [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     assertEquals(expect, g.withOffsetParsed().parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 6, 20, 30, 0, DateTimeZone.forOffsetHours(-4)); [EOL]     assertEquals(expect, g.withOffsetParsed().parseMutableDateTime("2004-06-09T06:20:30-04:00")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     assertEquals(expect, g.withZone(PARIS).withOffsetParsed().parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS); [EOL]     assertEquals(expect, g.withOffsetParsed().withZone(PARIS).parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL] }
public void testParseMutableDateTime_offsetParsed() { [EOL]     MutableDateTime expect = null; [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     assertEquals(expect, g.withOffsetParsed().parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 6, 20, 30, 0, DateTimeZone.forOffsetHours(-4)); [EOL]     assertEquals(expect, g.withOffsetParsed().parseMutableDateTime("2004-06-09T06:20:30-04:00")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     assertEquals(expect, g.withZone(PARIS).withOffsetParsed().parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS); [EOL]     assertEquals(expect, g.withOffsetParsed().withZone(PARIS).parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL] }
public void testParseMutableDateTime_offsetParsed() { [EOL]     MutableDateTime expect = null; [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     assertEquals(expect, g.withOffsetParsed().parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 6, 20, 30, 0, DateTimeZone.forOffsetHours(-4)); [EOL]     assertEquals(expect, g.withOffsetParsed().parseMutableDateTime("2004-06-09T06:20:30-04:00")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     assertEquals(expect, g.withZone(PARIS).withOffsetParsed().parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS); [EOL]     assertEquals(expect, g.withOffsetParsed().withZone(PARIS).parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL] }
public void testParseMutableDateTime_offsetParsed() { [EOL]     MutableDateTime expect = null; [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     assertEquals(expect, g.withOffsetParsed().parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 6, 20, 30, 0, DateTimeZone.forOffsetHours(-4)); [EOL]     assertEquals(expect, g.withOffsetParsed().parseMutableDateTime("2004-06-09T06:20:30-04:00")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     assertEquals(expect, g.withZone(PARIS).withOffsetParsed().parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS); [EOL]     assertEquals(expect, g.withOffsetParsed().withZone(PARIS).parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL] }
public void testParseMutableDateTime_offsetParsed() { [EOL]     MutableDateTime expect = null; [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     assertEquals(expect, g.withOffsetParsed().parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 6, 20, 30, 0, DateTimeZone.forOffsetHours(-4)); [EOL]     assertEquals(expect, g.withOffsetParsed().parseMutableDateTime("2004-06-09T06:20:30-04:00")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     assertEquals(expect, g.withZone(PARIS).withOffsetParsed().parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS); [EOL]     assertEquals(expect, g.withOffsetParsed().withZone(PARIS).parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL] }
public void testParseMutableDateTime_offsetParsed() { [EOL]     MutableDateTime expect = null; [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     assertEquals(expect, g.withOffsetParsed().parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 6, 20, 30, 0, DateTimeZone.forOffsetHours(-4)); [EOL]     assertEquals(expect, g.withOffsetParsed().parseMutableDateTime("2004-06-09T06:20:30-04:00")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     assertEquals(expect, g.withZone(PARIS).withOffsetParsed().parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS); [EOL]     assertEquals(expect, g.withOffsetParsed().withZone(PARIS).parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL] }
public void testParseMutableDateTime_offsetParsed() { [EOL]     MutableDateTime expect = null; [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     assertEquals(expect, g.withOffsetParsed().parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 6, 20, 30, 0, DateTimeZone.forOffsetHours(-4)); [EOL]     assertEquals(expect, g.withOffsetParsed().parseMutableDateTime("2004-06-09T06:20:30-04:00")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     assertEquals(expect, g.withZone(PARIS).withOffsetParsed().parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS); [EOL]     assertEquals(expect, g.withOffsetParsed().withZone(PARIS).parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL] }
public void testParseMutableDateTime_offsetParsed() { [EOL]     MutableDateTime expect = null; [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     assertEquals(expect, g.withOffsetParsed().parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 6, 20, 30, 0, DateTimeZone.forOffsetHours(-4)); [EOL]     assertEquals(expect, g.withOffsetParsed().parseMutableDateTime("2004-06-09T06:20:30-04:00")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     assertEquals(expect, g.withZone(PARIS).withOffsetParsed().parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS); [EOL]     assertEquals(expect, g.withOffsetParsed().withZone(PARIS).parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL] }
public void testParseMutableDateTime_offsetParsed() { [EOL]     MutableDateTime expect = null; [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     assertEquals(expect, g.withOffsetParsed().parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 6, 20, 30, 0, DateTimeZone.forOffsetHours(-4)); [EOL]     assertEquals(expect, g.withOffsetParsed().parseMutableDateTime("2004-06-09T06:20:30-04:00")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     assertEquals(expect, g.withZone(PARIS).withOffsetParsed().parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS); [EOL]     assertEquals(expect, g.withOffsetParsed().withZone(PARIS).parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL] }
public void testParseMutableDateTime_offsetParsed() { [EOL]     MutableDateTime expect = null; [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     assertEquals(expect, g.withOffsetParsed().parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 6, 20, 30, 0, DateTimeZone.forOffsetHours(-4)); [EOL]     assertEquals(expect, g.withOffsetParsed().parseMutableDateTime("2004-06-09T06:20:30-04:00")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     assertEquals(expect, g.withZone(PARIS).withOffsetParsed().parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS); [EOL]     assertEquals(expect, g.withOffsetParsed().withZone(PARIS).parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL] }
public void testParseMutableDateTime_offsetParsed() { [EOL]     MutableDateTime expect = null; [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     assertEquals(expect, g.withOffsetParsed().parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 6, 20, 30, 0, DateTimeZone.forOffsetHours(-4)); [EOL]     assertEquals(expect, g.withOffsetParsed().parseMutableDateTime("2004-06-09T06:20:30-04:00")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     assertEquals(expect, g.withZone(PARIS).withOffsetParsed().parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS); [EOL]     assertEquals(expect, g.withOffsetParsed().withZone(PARIS).parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL] }
public void testParseMutableDateTime_offsetParsed() { [EOL]     MutableDateTime expect = null; [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     assertEquals(expect, g.withOffsetParsed().parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 6, 20, 30, 0, DateTimeZone.forOffsetHours(-4)); [EOL]     assertEquals(expect, g.withOffsetParsed().parseMutableDateTime("2004-06-09T06:20:30-04:00")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     assertEquals(expect, g.withZone(PARIS).withOffsetParsed().parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS); [EOL]     assertEquals(expect, g.withOffsetParsed().withZone(PARIS).parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL] }
public void testParseMutableDateTime_offsetParsed() { [EOL]     MutableDateTime expect = null; [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     assertEquals(expect, g.withOffsetParsed().parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 6, 20, 30, 0, DateTimeZone.forOffsetHours(-4)); [EOL]     assertEquals(expect, g.withOffsetParsed().parseMutableDateTime("2004-06-09T06:20:30-04:00")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     assertEquals(expect, g.withZone(PARIS).withOffsetParsed().parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS); [EOL]     assertEquals(expect, g.withOffsetParsed().withZone(PARIS).parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL] }
public void testWithZoneRetainFields_DateTimeZone() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateMidnight result = test.withZoneRetainFields(PARIS); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_PARIS, result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertEquals(TEST_TIME1_PARIS, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_LONDON, result.getMillis()); [EOL]     assertEquals(GREGORIAN_DEFAULT, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, new MockNullZoneChronology()); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL] }
public void testMinus_RP() { [EOL]     LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON); [EOL]     LocalDate result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1)); [EOL]     LocalDate expected = new LocalDate(2001, 3, 26, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testMinus_RP() { [EOL]     LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON); [EOL]     LocalDate result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1)); [EOL]     LocalDate expected = new LocalDate(2001, 3, 26, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testMinus_RP() { [EOL]     LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON); [EOL]     LocalDate result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1)); [EOL]     LocalDate expected = new LocalDate(2001, 3, 26, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testMinus_RP() { [EOL]     LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON); [EOL]     LocalDate result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1)); [EOL]     LocalDate expected = new LocalDate(2001, 3, 26, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void testPropertyPlusWrapFieldMinute() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     LocalTime copy = test.minuteOfHour().addWrapFieldToCopy(9); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 29, 30, 40); [EOL]     copy = test.minuteOfHour().addWrapFieldToCopy(49); [EOL]     check(copy, 10, 9, 30, 40); [EOL]     copy = test.minuteOfHour().addWrapFieldToCopy(-47); [EOL]     check(copy, 10, 33, 30, 40); [EOL] }
public void testConstructor_RI_RP3() throws Throwable { [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW, ISOChronology.getInstanceUTC()); [EOL]     Period dur = new Period(0, 6, 0, 3, 1, 0, 0, 0, PeriodType.standard()); [EOL]     long result = TEST_TIME_NOW; [EOL]     result = ISOChronology.getInstanceUTC().months().add(result, 6); [EOL]     result = ISOChronology.getInstanceUTC().days().add(result, 3); [EOL]     result = ISOChronology.getInstanceUTC().hours().add(result, 1); [EOL]     MutableInterval test = new MutableInterval(dt, dur); [EOL]     assertEquals(dt.getMillis(), test.getStartMillis()); [EOL]     assertEquals(result, test.getEndMillis()); [EOL] }
public void testConstructor_RI_RP3() throws Throwable { [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW, ISOChronology.getInstanceUTC()); [EOL]     Period dur = new Period(0, 6, 0, 3, 1, 0, 0, 0, PeriodType.standard()); [EOL]     long result = TEST_TIME_NOW; [EOL]     result = ISOChronology.getInstanceUTC().months().add(result, 6); [EOL]     result = ISOChronology.getInstanceUTC().days().add(result, 3); [EOL]     result = ISOChronology.getInstanceUTC().hours().add(result, 1); [EOL]     MutableInterval test = new MutableInterval(dt, dur); [EOL]     assertEquals(dt.getMillis(), test.getStartMillis()); [EOL]     assertEquals(result, test.getEndMillis()); [EOL] }
public void testConstructor_RI_RP3() throws Throwable { [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW, ISOChronology.getInstanceUTC()); [EOL]     Period dur = new Period(0, 6, 0, 3, 1, 0, 0, 0, PeriodType.standard()); [EOL]     long result = TEST_TIME_NOW; [EOL]     result = ISOChronology.getInstanceUTC().months().add(result, 6); [EOL]     result = ISOChronology.getInstanceUTC().days().add(result, 3); [EOL]     result = ISOChronology.getInstanceUTC().hours().add(result, 1); [EOL]     MutableInterval test = new MutableInterval(dt, dur); [EOL]     assertEquals(dt.getMillis(), test.getStartMillis()); [EOL]     assertEquals(result, test.getEndMillis()); [EOL] }
public void testConstructor_RI_RP3() throws Throwable { [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW, ISOChronology.getInstanceUTC()); [EOL]     Period dur = new Period(0, 6, 0, 3, 1, 0, 0, 0, PeriodType.standard()); [EOL]     long result = TEST_TIME_NOW; [EOL]     result = ISOChronology.getInstanceUTC().months().add(result, 6); [EOL]     result = ISOChronology.getInstanceUTC().days().add(result, 3); [EOL]     result = ISOChronology.getInstanceUTC().hours().add(result, 1); [EOL]     MutableInterval test = new MutableInterval(dt, dur); [EOL]     assertEquals(dt.getMillis(), test.getStartMillis()); [EOL]     assertEquals(result, test.getEndMillis()); [EOL] }
public void testConstructor_RI_RP3() throws Throwable { [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW, ISOChronology.getInstanceUTC()); [EOL]     Period dur = new Period(0, 6, 0, 3, 1, 0, 0, 0, PeriodType.standard()); [EOL]     long result = TEST_TIME_NOW; [EOL]     result = ISOChronology.getInstanceUTC().months().add(result, 6); [EOL]     result = ISOChronology.getInstanceUTC().days().add(result, 3); [EOL]     result = ISOChronology.getInstanceUTC().hours().add(result, 1); [EOL]     MutableInterval test = new MutableInterval(dt, dur); [EOL]     assertEquals(dt.getMillis(), test.getStartMillis()); [EOL]     assertEquals(result, test.getEndMillis()); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void test_getMillis_int_long() { [EOL]     assertEquals(0, MillisDurationField.INSTANCE.getMillis(0, 567L)); [EOL]     assertEquals(1234, MillisDurationField.INSTANCE.getMillis(1234, 567L)); [EOL]     assertEquals(-1234, MillisDurationField.INSTANCE.getMillis(-1234, 567L)); [EOL] }
public void test_getMillis_int_long() { [EOL]     assertEquals(0, MillisDurationField.INSTANCE.getMillis(0, 567L)); [EOL]     assertEquals(1234, MillisDurationField.INSTANCE.getMillis(1234, 567L)); [EOL]     assertEquals(-1234, MillisDurationField.INSTANCE.getMillis(-1234, 567L)); [EOL] }
public void test_getMillis_int_long() { [EOL]     assertEquals(0, MillisDurationField.INSTANCE.getMillis(0, 567L)); [EOL]     assertEquals(1234, MillisDurationField.INSTANCE.getMillis(1234, 567L)); [EOL]     assertEquals(-1234, MillisDurationField.INSTANCE.getMillis(-1234, 567L)); [EOL] }
public void test_dayOfMonth() throws Exception { [EOL]     assertEquals(DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfMonth()); [EOL]     assertEquals("dayOfMonth", DateTimeFieldType.dayOfMonth().getName()); [EOL]     assertEquals(DurationFieldType.days(), DateTimeFieldType.dayOfMonth().getDurationType()); [EOL]     assertEquals(DurationFieldType.months(), DateTimeFieldType.dayOfMonth().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().dayOfMonth(), DateTimeFieldType.dayOfMonth().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().dayOfMonth().isSupported(), DateTimeFieldType.dayOfMonth().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.dayOfMonth()); [EOL] }
public void test_dayOfMonth() throws Exception { [EOL]     assertEquals(DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfMonth()); [EOL]     assertEquals("dayOfMonth", DateTimeFieldType.dayOfMonth().getName()); [EOL]     assertEquals(DurationFieldType.days(), DateTimeFieldType.dayOfMonth().getDurationType()); [EOL]     assertEquals(DurationFieldType.months(), DateTimeFieldType.dayOfMonth().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().dayOfMonth(), DateTimeFieldType.dayOfMonth().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().dayOfMonth().isSupported(), DateTimeFieldType.dayOfMonth().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.dayOfMonth()); [EOL] }
public void test_dayOfMonth() throws Exception { [EOL]     assertEquals(DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfMonth()); [EOL]     assertEquals("dayOfMonth", DateTimeFieldType.dayOfMonth().getName()); [EOL]     assertEquals(DurationFieldType.days(), DateTimeFieldType.dayOfMonth().getDurationType()); [EOL]     assertEquals(DurationFieldType.months(), DateTimeFieldType.dayOfMonth().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().dayOfMonth(), DateTimeFieldType.dayOfMonth().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().dayOfMonth().isSupported(), DateTimeFieldType.dayOfMonth().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.dayOfMonth()); [EOL] }
public void test_dayOfMonth() throws Exception { [EOL]     assertEquals(DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfMonth()); [EOL]     assertEquals("dayOfMonth", DateTimeFieldType.dayOfMonth().getName()); [EOL]     assertEquals(DurationFieldType.days(), DateTimeFieldType.dayOfMonth().getDurationType()); [EOL]     assertEquals(DurationFieldType.months(), DateTimeFieldType.dayOfMonth().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().dayOfMonth(), DateTimeFieldType.dayOfMonth().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().dayOfMonth().isSupported(), DateTimeFieldType.dayOfMonth().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.dayOfMonth()); [EOL] }
public void testSerialization() throws Exception { [EOL]     Duration test = new Duration(123L); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     Duration result = (Duration) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL] }
public void testSerialization() throws Exception { [EOL]     Duration test = new Duration(123L); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     Duration result = (Duration) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL] }
public void testConstructor_badconverterObject() throws Throwable { [EOL]     try { [EOL]         ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE); [EOL]         Instant test = new Instant(new Integer(0)); [EOL]         assertEquals(ISOChronology.getInstanceUTC(), test.getChronology()); [EOL]         assertEquals(0L, test.getMillis()); [EOL]     } finally { [EOL]         ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE); [EOL]     } [EOL] }
public void testSetIntoInterval_Object1() throws Exception { [EOL]     Interval i = new Interval(0L, 123L, CopticChronology.getInstance()); [EOL]     MutableInterval m = new MutableInterval(-1000L, 1000L, BuddhistChronology.getInstance()); [EOL]     ReadableIntervalConverter.INSTANCE.setInto(m, i, null); [EOL]     assertEquals(0L, m.getStartMillis()); [EOL]     assertEquals(123L, m.getEndMillis()); [EOL]     assertEquals(CopticChronology.getInstance(), m.getChronology()); [EOL] }
public void testSetIntoInterval_Object1() throws Exception { [EOL]     Interval i = new Interval(0L, 123L, CopticChronology.getInstance()); [EOL]     MutableInterval m = new MutableInterval(-1000L, 1000L, BuddhistChronology.getInstance()); [EOL]     ReadableIntervalConverter.INSTANCE.setInto(m, i, null); [EOL]     assertEquals(0L, m.getStartMillis()); [EOL]     assertEquals(123L, m.getEndMillis()); [EOL]     assertEquals(CopticChronology.getInstance(), m.getChronology()); [EOL] }
public void testPropertyGetEra() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertSame(test.getChronology().era(), test.era().getField()); [EOL]     assertEquals("era", test.era().getName()); [EOL]     assertEquals("Property[era]", test.era().toString()); [EOL]     assertSame(test, test.era().getDateTime()); [EOL]     assertEquals(1, test.era().get()); [EOL]     assertEquals("1", test.era().getAsString()); [EOL]     assertEquals("AD", test.era().getAsText()); [EOL]     assertEquals("AD", test.era().getField().getAsText(1, Locale.ENGLISH)); [EOL]     assertEquals("ap. J.-C.", test.era().getAsText(Locale.FRENCH)); [EOL]     assertEquals("ap. J.-C.", test.era().getField().getAsText(1, Locale.FRENCH)); [EOL]     assertEquals("AD", test.era().getAsShortText()); [EOL]     assertEquals("AD", test.era().getField().getAsShortText(1, Locale.ENGLISH)); [EOL]     assertEquals("ap. J.-C.", test.era().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals("ap. J.-C.", test.era().getField().getAsShortText(1, Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().eras(), test.era().getDurationField()); [EOL]     assertEquals(null, test.era().getRangeDurationField()); [EOL]     assertEquals(2, test.era().getMaximumTextLength(null)); [EOL]     assertEquals(9, test.era().getMaximumTextLength(Locale.FRENCH)); [EOL]     assertEquals(2, test.era().getMaximumShortTextLength(null)); [EOL]     assertEquals(9, test.era().getMaximumShortTextLength(Locale.FRENCH)); [EOL] }
public void testPropertyGetEra() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertSame(test.getChronology().era(), test.era().getField()); [EOL]     assertEquals("era", test.era().getName()); [EOL]     assertEquals("Property[era]", test.era().toString()); [EOL]     assertSame(test, test.era().getDateTime()); [EOL]     assertEquals(1, test.era().get()); [EOL]     assertEquals("1", test.era().getAsString()); [EOL]     assertEquals("AD", test.era().getAsText()); [EOL]     assertEquals("AD", test.era().getField().getAsText(1, Locale.ENGLISH)); [EOL]     assertEquals("ap. J.-C.", test.era().getAsText(Locale.FRENCH)); [EOL]     assertEquals("ap. J.-C.", test.era().getField().getAsText(1, Locale.FRENCH)); [EOL]     assertEquals("AD", test.era().getAsShortText()); [EOL]     assertEquals("AD", test.era().getField().getAsShortText(1, Locale.ENGLISH)); [EOL]     assertEquals("ap. J.-C.", test.era().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals("ap. J.-C.", test.era().getField().getAsShortText(1, Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().eras(), test.era().getDurationField()); [EOL]     assertEquals(null, test.era().getRangeDurationField()); [EOL]     assertEquals(2, test.era().getMaximumTextLength(null)); [EOL]     assertEquals(9, test.era().getMaximumTextLength(Locale.FRENCH)); [EOL]     assertEquals(2, test.era().getMaximumShortTextLength(null)); [EOL]     assertEquals(9, test.era().getMaximumShortTextLength(Locale.FRENCH)); [EOL] }
public void testPropertyGetEra() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertSame(test.getChronology().era(), test.era().getField()); [EOL]     assertEquals("era", test.era().getName()); [EOL]     assertEquals("Property[era]", test.era().toString()); [EOL]     assertSame(test, test.era().getDateTime()); [EOL]     assertEquals(1, test.era().get()); [EOL]     assertEquals("1", test.era().getAsString()); [EOL]     assertEquals("AD", test.era().getAsText()); [EOL]     assertEquals("AD", test.era().getField().getAsText(1, Locale.ENGLISH)); [EOL]     assertEquals("ap. J.-C.", test.era().getAsText(Locale.FRENCH)); [EOL]     assertEquals("ap. J.-C.", test.era().getField().getAsText(1, Locale.FRENCH)); [EOL]     assertEquals("AD", test.era().getAsShortText()); [EOL]     assertEquals("AD", test.era().getField().getAsShortText(1, Locale.ENGLISH)); [EOL]     assertEquals("ap. J.-C.", test.era().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals("ap. J.-C.", test.era().getField().getAsShortText(1, Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().eras(), test.era().getDurationField()); [EOL]     assertEquals(null, test.era().getRangeDurationField()); [EOL]     assertEquals(2, test.era().getMaximumTextLength(null)); [EOL]     assertEquals(9, test.era().getMaximumTextLength(Locale.FRENCH)); [EOL]     assertEquals(2, test.era().getMaximumShortTextLength(null)); [EOL]     assertEquals(9, test.era().getMaximumShortTextLength(Locale.FRENCH)); [EOL] }
public void testPropertyGetEra() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertSame(test.getChronology().era(), test.era().getField()); [EOL]     assertEquals("era", test.era().getName()); [EOL]     assertEquals("Property[era]", test.era().toString()); [EOL]     assertSame(test, test.era().getDateTime()); [EOL]     assertEquals(1, test.era().get()); [EOL]     assertEquals("1", test.era().getAsString()); [EOL]     assertEquals("AD", test.era().getAsText()); [EOL]     assertEquals("AD", test.era().getField().getAsText(1, Locale.ENGLISH)); [EOL]     assertEquals("ap. J.-C.", test.era().getAsText(Locale.FRENCH)); [EOL]     assertEquals("ap. J.-C.", test.era().getField().getAsText(1, Locale.FRENCH)); [EOL]     assertEquals("AD", test.era().getAsShortText()); [EOL]     assertEquals("AD", test.era().getField().getAsShortText(1, Locale.ENGLISH)); [EOL]     assertEquals("ap. J.-C.", test.era().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals("ap. J.-C.", test.era().getField().getAsShortText(1, Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().eras(), test.era().getDurationField()); [EOL]     assertEquals(null, test.era().getRangeDurationField()); [EOL]     assertEquals(2, test.era().getMaximumTextLength(null)); [EOL]     assertEquals(9, test.era().getMaximumTextLength(Locale.FRENCH)); [EOL]     assertEquals(2, test.era().getMaximumShortTextLength(null)); [EOL]     assertEquals(9, test.era().getMaximumShortTextLength(Locale.FRENCH)); [EOL] }
public void testPropertyGetEra() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertSame(test.getChronology().era(), test.era().getField()); [EOL]     assertEquals("era", test.era().getName()); [EOL]     assertEquals("Property[era]", test.era().toString()); [EOL]     assertSame(test, test.era().getDateTime()); [EOL]     assertEquals(1, test.era().get()); [EOL]     assertEquals("1", test.era().getAsString()); [EOL]     assertEquals("AD", test.era().getAsText()); [EOL]     assertEquals("AD", test.era().getField().getAsText(1, Locale.ENGLISH)); [EOL]     assertEquals("ap. J.-C.", test.era().getAsText(Locale.FRENCH)); [EOL]     assertEquals("ap. J.-C.", test.era().getField().getAsText(1, Locale.FRENCH)); [EOL]     assertEquals("AD", test.era().getAsShortText()); [EOL]     assertEquals("AD", test.era().getField().getAsShortText(1, Locale.ENGLISH)); [EOL]     assertEquals("ap. J.-C.", test.era().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals("ap. J.-C.", test.era().getField().getAsShortText(1, Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().eras(), test.era().getDurationField()); [EOL]     assertEquals(null, test.era().getRangeDurationField()); [EOL]     assertEquals(2, test.era().getMaximumTextLength(null)); [EOL]     assertEquals(9, test.era().getMaximumTextLength(Locale.FRENCH)); [EOL]     assertEquals(2, test.era().getMaximumShortTextLength(null)); [EOL]     assertEquals(9, test.era().getMaximumShortTextLength(Locale.FRENCH)); [EOL] }
public void testPropertyGetEra() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertSame(test.getChronology().era(), test.era().getField()); [EOL]     assertEquals("era", test.era().getName()); [EOL]     assertEquals("Property[era]", test.era().toString()); [EOL]     assertSame(test, test.era().getDateTime()); [EOL]     assertEquals(1, test.era().get()); [EOL]     assertEquals("1", test.era().getAsString()); [EOL]     assertEquals("AD", test.era().getAsText()); [EOL]     assertEquals("AD", test.era().getField().getAsText(1, Locale.ENGLISH)); [EOL]     assertEquals("ap. J.-C.", test.era().getAsText(Locale.FRENCH)); [EOL]     assertEquals("ap. J.-C.", test.era().getField().getAsText(1, Locale.FRENCH)); [EOL]     assertEquals("AD", test.era().getAsShortText()); [EOL]     assertEquals("AD", test.era().getField().getAsShortText(1, Locale.ENGLISH)); [EOL]     assertEquals("ap. J.-C.", test.era().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals("ap. J.-C.", test.era().getField().getAsShortText(1, Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().eras(), test.era().getDurationField()); [EOL]     assertEquals(null, test.era().getRangeDurationField()); [EOL]     assertEquals(2, test.era().getMaximumTextLength(null)); [EOL]     assertEquals(9, test.era().getMaximumTextLength(Locale.FRENCH)); [EOL]     assertEquals(2, test.era().getMaximumShortTextLength(null)); [EOL]     assertEquals(9, test.era().getMaximumShortTextLength(Locale.FRENCH)); [EOL] }
public void testPropertyGetMonth() { [EOL]     LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40); [EOL]     assertSame(test.getChronology().monthOfYear(), test.monthOfYear().getField()); [EOL]     assertEquals("monthOfYear", test.monthOfYear().getName()); [EOL]     assertEquals("Property[monthOfYear]", test.monthOfYear().toString()); [EOL]     assertSame(test, test.monthOfYear().getLocalDateTime()); [EOL]     assertEquals(6, test.monthOfYear().get()); [EOL]     assertEquals("6", test.monthOfYear().getAsString()); [EOL]     assertEquals("June", test.monthOfYear().getAsText()); [EOL]     assertEquals("juin", test.monthOfYear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("Jun", test.monthOfYear().getAsShortText()); [EOL]     assertEquals("juin", test.monthOfYear().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().months(), test.monthOfYear().getDurationField()); [EOL]     assertEquals(test.getChronology().years(), test.monthOfYear().getRangeDurationField()); [EOL]     assertEquals(9, test.monthOfYear().getMaximumTextLength(null)); [EOL]     assertEquals(3, test.monthOfYear().getMaximumShortTextLength(null)); [EOL]     test = new LocalDateTime(1972, 7, 9, 10, 20, 30, 40); [EOL]     assertEquals("juillet", test.monthOfYear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("juil.", test.monthOfYear().getAsShortText(Locale.FRENCH)); [EOL] }
public void testWithZoneRetainFields_DateTimeZone() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateMidnight result = test.withZoneRetainFields(PARIS); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_PARIS, result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertEquals(TEST_TIME1_PARIS, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_LONDON, result.getMillis()); [EOL]     assertEquals(GREGORIAN_DEFAULT, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, new MockNullZoneChronology()); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL] }
public void testWithZoneRetainFields_DateTimeZone() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateMidnight result = test.withZoneRetainFields(PARIS); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_PARIS, result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertEquals(TEST_TIME1_PARIS, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_LONDON, result.getMillis()); [EOL]     assertEquals(GREGORIAN_DEFAULT, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, new MockNullZoneChronology()); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL] }
public void testWithZoneRetainFields_DateTimeZone() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateMidnight result = test.withZoneRetainFields(PARIS); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_PARIS, result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertEquals(TEST_TIME1_PARIS, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_LONDON, result.getMillis()); [EOL]     assertEquals(GREGORIAN_DEFAULT, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, new MockNullZoneChronology()); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL] }
public void testIsSupported_DateTimeFieldType() { [EOL]     DateTime test = new DateTime(); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.era())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.centuryOfEra())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.yearOfCentury())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.yearOfEra())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.year())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.weekyear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.halfdayOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.minuteOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.secondOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.millisOfDay())); [EOL]     assertEquals(false, test.isSupported(null)); [EOL] }
public void testIsSupported_DateTimeFieldType() { [EOL]     DateTime test = new DateTime(); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.era())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.centuryOfEra())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.yearOfCentury())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.yearOfEra())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.year())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.weekyear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.halfdayOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.minuteOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.secondOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.millisOfDay())); [EOL]     assertEquals(false, test.isSupported(null)); [EOL] }
public void testIsSupported_DateTimeFieldType() { [EOL]     DateTime test = new DateTime(); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.era())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.centuryOfEra())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.yearOfCentury())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.yearOfEra())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.year())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.weekyear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.halfdayOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.minuteOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.secondOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.millisOfDay())); [EOL]     assertEquals(false, test.isSupported(null)); [EOL] }
public void testGet_DateTimeField() { [EOL]     Instant test = new Instant(); [EOL]     assertEquals(1, test.get(ISOChronology.getInstance().era())); [EOL]     assertEquals(20, test.get(ISOChronology.getInstance().centuryOfEra())); [EOL]     assertEquals(2, test.get(ISOChronology.getInstance().yearOfCentury())); [EOL]     assertEquals(2002, test.get(ISOChronology.getInstance().yearOfEra())); [EOL]     assertEquals(2002, test.get(ISOChronology.getInstance().year())); [EOL]     assertEquals(6, test.get(ISOChronology.getInstance().monthOfYear())); [EOL]     assertEquals(9, test.get(ISOChronology.getInstance().dayOfMonth())); [EOL]     assertEquals(2002, test.get(ISOChronology.getInstance().weekyear())); [EOL]     assertEquals(23, test.get(ISOChronology.getInstance().weekOfWeekyear())); [EOL]     assertEquals(7, test.get(ISOChronology.getInstance().dayOfWeek())); [EOL]     assertEquals(160, test.get(ISOChronology.getInstance().dayOfYear())); [EOL]     assertEquals(0, test.get(ISOChronology.getInstance().halfdayOfDay())); [EOL]     assertEquals(1, test.get(ISOChronology.getInstance().hourOfHalfday())); [EOL]     assertEquals(1, test.get(ISOChronology.getInstance().clockhourOfDay())); [EOL]     assertEquals(1, test.get(ISOChronology.getInstance().clockhourOfHalfday())); [EOL]     assertEquals(1, test.get(ISOChronology.getInstance().hourOfDay())); [EOL]     assertEquals(0, test.get(ISOChronology.getInstance().minuteOfHour())); [EOL]     assertEquals(60, test.get(ISOChronology.getInstance().minuteOfDay())); [EOL]     assertEquals(0, test.get(ISOChronology.getInstance().secondOfMinute())); [EOL]     assertEquals(60 * 60, test.get(ISOChronology.getInstance().secondOfDay())); [EOL]     assertEquals(0, test.get(ISOChronology.getInstance().millisOfSecond())); [EOL]     assertEquals(60 * 60 * 1000, test.get(ISOChronology.getInstance().millisOfDay())); [EOL]     try { [EOL]         test.get((DateTimeField) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGet_DateTimeField() { [EOL]     Instant test = new Instant(); [EOL]     assertEquals(1, test.get(ISOChronology.getInstance().era())); [EOL]     assertEquals(20, test.get(ISOChronology.getInstance().centuryOfEra())); [EOL]     assertEquals(2, test.get(ISOChronology.getInstance().yearOfCentury())); [EOL]     assertEquals(2002, test.get(ISOChronology.getInstance().yearOfEra())); [EOL]     assertEquals(2002, test.get(ISOChronology.getInstance().year())); [EOL]     assertEquals(6, test.get(ISOChronology.getInstance().monthOfYear())); [EOL]     assertEquals(9, test.get(ISOChronology.getInstance().dayOfMonth())); [EOL]     assertEquals(2002, test.get(ISOChronology.getInstance().weekyear())); [EOL]     assertEquals(23, test.get(ISOChronology.getInstance().weekOfWeekyear())); [EOL]     assertEquals(7, test.get(ISOChronology.getInstance().dayOfWeek())); [EOL]     assertEquals(160, test.get(ISOChronology.getInstance().dayOfYear())); [EOL]     assertEquals(0, test.get(ISOChronology.getInstance().halfdayOfDay())); [EOL]     assertEquals(1, test.get(ISOChronology.getInstance().hourOfHalfday())); [EOL]     assertEquals(1, test.get(ISOChronology.getInstance().clockhourOfDay())); [EOL]     assertEquals(1, test.get(ISOChronology.getInstance().clockhourOfHalfday())); [EOL]     assertEquals(1, test.get(ISOChronology.getInstance().hourOfDay())); [EOL]     assertEquals(0, test.get(ISOChronology.getInstance().minuteOfHour())); [EOL]     assertEquals(60, test.get(ISOChronology.getInstance().minuteOfDay())); [EOL]     assertEquals(0, test.get(ISOChronology.getInstance().secondOfMinute())); [EOL]     assertEquals(60 * 60, test.get(ISOChronology.getInstance().secondOfDay())); [EOL]     assertEquals(0, test.get(ISOChronology.getInstance().millisOfSecond())); [EOL]     assertEquals(60 * 60 * 1000, test.get(ISOChronology.getInstance().millisOfDay())); [EOL]     try { [EOL]         test.get((DateTimeField) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testToDateTime() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1, PARIS); [EOL]     DateTime result = test.toDateTime(); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISOChronology.getInstance(PARIS), result.getChronology()); [EOL] }
public void testToMutableDateTimeISO() { [EOL]     DateTime test = new DateTime(TEST_TIME1, PARIS); [EOL]     MutableDateTime result = test.toMutableDateTimeISO(); [EOL]     assertSame(MutableDateTime.class, result.getClass()); [EOL]     assertSame(ISOChronology.class, result.getChronology().getClass()); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL] }
public void testToMutableDateTimeISO() { [EOL]     DateTime test = new DateTime(TEST_TIME1, PARIS); [EOL]     MutableDateTime result = test.toMutableDateTimeISO(); [EOL]     assertSame(MutableDateTime.class, result.getClass()); [EOL]     assertSame(ISOChronology.class, result.getChronology().getClass()); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL] }
public void testIsAfter_RI() { [EOL]     DateTime test1 = new DateTime(TEST_TIME1); [EOL]     DateTime test1a = new DateTime(TEST_TIME1); [EOL]     assertEquals(false, test1.isAfter(test1a)); [EOL]     assertEquals(false, test1a.isAfter(test1)); [EOL]     assertEquals(false, test1.isAfter(test1)); [EOL]     assertEquals(false, test1a.isAfter(test1a)); [EOL]     DateTime test2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(false, test1.isAfter(test2)); [EOL]     assertEquals(true, test2.isAfter(test1)); [EOL]     DateTime test3 = new DateTime(TEST_TIME2, GREGORIAN_PARIS); [EOL]     assertEquals(false, test1.isAfter(test3)); [EOL]     assertEquals(true, test3.isAfter(test1)); [EOL]     assertEquals(false, test3.isAfter(test2)); [EOL]     assertEquals(true, test2.isAfter(new MockInstant())); [EOL]     assertEquals(false, test1.isAfter(new MockInstant())); [EOL]     assertEquals(true, new DateTime(TEST_TIME_NOW + 1).isAfter(null)); [EOL]     assertEquals(false, new DateTime(TEST_TIME_NOW).isAfter(null)); [EOL]     assertEquals(false, new DateTime(TEST_TIME_NOW - 1).isAfter(null)); [EOL] }
public void testIsAfter_RI() { [EOL]     DateTime test1 = new DateTime(TEST_TIME1); [EOL]     DateTime test1a = new DateTime(TEST_TIME1); [EOL]     assertEquals(false, test1.isAfter(test1a)); [EOL]     assertEquals(false, test1a.isAfter(test1)); [EOL]     assertEquals(false, test1.isAfter(test1)); [EOL]     assertEquals(false, test1a.isAfter(test1a)); [EOL]     DateTime test2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(false, test1.isAfter(test2)); [EOL]     assertEquals(true, test2.isAfter(test1)); [EOL]     DateTime test3 = new DateTime(TEST_TIME2, GREGORIAN_PARIS); [EOL]     assertEquals(false, test1.isAfter(test3)); [EOL]     assertEquals(true, test3.isAfter(test1)); [EOL]     assertEquals(false, test3.isAfter(test2)); [EOL]     assertEquals(true, test2.isAfter(new MockInstant())); [EOL]     assertEquals(false, test1.isAfter(new MockInstant())); [EOL]     assertEquals(true, new DateTime(TEST_TIME_NOW + 1).isAfter(null)); [EOL]     assertEquals(false, new DateTime(TEST_TIME_NOW).isAfter(null)); [EOL]     assertEquals(false, new DateTime(TEST_TIME_NOW - 1).isAfter(null)); [EOL] }
public void testIsAfter_RI() { [EOL]     DateTime test1 = new DateTime(TEST_TIME1); [EOL]     DateTime test1a = new DateTime(TEST_TIME1); [EOL]     assertEquals(false, test1.isAfter(test1a)); [EOL]     assertEquals(false, test1a.isAfter(test1)); [EOL]     assertEquals(false, test1.isAfter(test1)); [EOL]     assertEquals(false, test1a.isAfter(test1a)); [EOL]     DateTime test2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(false, test1.isAfter(test2)); [EOL]     assertEquals(true, test2.isAfter(test1)); [EOL]     DateTime test3 = new DateTime(TEST_TIME2, GREGORIAN_PARIS); [EOL]     assertEquals(false, test1.isAfter(test3)); [EOL]     assertEquals(true, test3.isAfter(test1)); [EOL]     assertEquals(false, test3.isAfter(test2)); [EOL]     assertEquals(true, test2.isAfter(new MockInstant())); [EOL]     assertEquals(false, test1.isAfter(new MockInstant())); [EOL]     assertEquals(true, new DateTime(TEST_TIME_NOW + 1).isAfter(null)); [EOL]     assertEquals(false, new DateTime(TEST_TIME_NOW).isAfter(null)); [EOL]     assertEquals(false, new DateTime(TEST_TIME_NOW - 1).isAfter(null)); [EOL] }
public void testIsAfterNow() { [EOL]     assertEquals(false, new DateTime(TEST_TIME_NOW - 1).isAfterNow()); [EOL]     assertEquals(false, new DateTime(TEST_TIME_NOW).isAfterNow()); [EOL]     assertEquals(true, new DateTime(TEST_TIME_NOW + 1).isAfterNow()); [EOL] }
public void testIsAfter_RI() { [EOL]     DateTime test1 = new DateTime(TEST_TIME1); [EOL]     DateTime test1a = new DateTime(TEST_TIME1); [EOL]     assertEquals(false, test1.isAfter(test1a)); [EOL]     assertEquals(false, test1a.isAfter(test1)); [EOL]     assertEquals(false, test1.isAfter(test1)); [EOL]     assertEquals(false, test1a.isAfter(test1a)); [EOL]     DateTime test2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(false, test1.isAfter(test2)); [EOL]     assertEquals(true, test2.isAfter(test1)); [EOL]     DateTime test3 = new DateTime(TEST_TIME2, GREGORIAN_PARIS); [EOL]     assertEquals(false, test1.isAfter(test3)); [EOL]     assertEquals(true, test3.isAfter(test1)); [EOL]     assertEquals(false, test3.isAfter(test2)); [EOL]     assertEquals(true, test2.isAfter(new MockInstant())); [EOL]     assertEquals(false, test1.isAfter(new MockInstant())); [EOL]     assertEquals(true, new DateTime(TEST_TIME_NOW + 1).isAfter(null)); [EOL]     assertEquals(false, new DateTime(TEST_TIME_NOW).isAfter(null)); [EOL]     assertEquals(false, new DateTime(TEST_TIME_NOW - 1).isAfter(null)); [EOL] }
public void testIsAfter_RI() { [EOL]     DateTime test1 = new DateTime(TEST_TIME1); [EOL]     DateTime test1a = new DateTime(TEST_TIME1); [EOL]     assertEquals(false, test1.isAfter(test1a)); [EOL]     assertEquals(false, test1a.isAfter(test1)); [EOL]     assertEquals(false, test1.isAfter(test1)); [EOL]     assertEquals(false, test1a.isAfter(test1a)); [EOL]     DateTime test2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(false, test1.isAfter(test2)); [EOL]     assertEquals(true, test2.isAfter(test1)); [EOL]     DateTime test3 = new DateTime(TEST_TIME2, GREGORIAN_PARIS); [EOL]     assertEquals(false, test1.isAfter(test3)); [EOL]     assertEquals(true, test3.isAfter(test1)); [EOL]     assertEquals(false, test3.isAfter(test2)); [EOL]     assertEquals(true, test2.isAfter(new MockInstant())); [EOL]     assertEquals(false, test1.isAfter(new MockInstant())); [EOL]     assertEquals(true, new DateTime(TEST_TIME_NOW + 1).isAfter(null)); [EOL]     assertEquals(false, new DateTime(TEST_TIME_NOW).isAfter(null)); [EOL]     assertEquals(false, new DateTime(TEST_TIME_NOW - 1).isAfter(null)); [EOL] }
public void testIsAfter_RI() { [EOL]     DateTime test1 = new DateTime(TEST_TIME1); [EOL]     DateTime test1a = new DateTime(TEST_TIME1); [EOL]     assertEquals(false, test1.isAfter(test1a)); [EOL]     assertEquals(false, test1a.isAfter(test1)); [EOL]     assertEquals(false, test1.isAfter(test1)); [EOL]     assertEquals(false, test1a.isAfter(test1a)); [EOL]     DateTime test2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(false, test1.isAfter(test2)); [EOL]     assertEquals(true, test2.isAfter(test1)); [EOL]     DateTime test3 = new DateTime(TEST_TIME2, GREGORIAN_PARIS); [EOL]     assertEquals(false, test1.isAfter(test3)); [EOL]     assertEquals(true, test3.isAfter(test1)); [EOL]     assertEquals(false, test3.isAfter(test2)); [EOL]     assertEquals(true, test2.isAfter(new MockInstant())); [EOL]     assertEquals(false, test1.isAfter(new MockInstant())); [EOL]     assertEquals(true, new DateTime(TEST_TIME_NOW + 1).isAfter(null)); [EOL]     assertEquals(false, new DateTime(TEST_TIME_NOW).isAfter(null)); [EOL]     assertEquals(false, new DateTime(TEST_TIME_NOW - 1).isAfter(null)); [EOL] }
public void testIsAfter_RI() { [EOL]     DateTime test1 = new DateTime(TEST_TIME1); [EOL]     DateTime test1a = new DateTime(TEST_TIME1); [EOL]     assertEquals(false, test1.isAfter(test1a)); [EOL]     assertEquals(false, test1a.isAfter(test1)); [EOL]     assertEquals(false, test1.isAfter(test1)); [EOL]     assertEquals(false, test1a.isAfter(test1a)); [EOL]     DateTime test2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(false, test1.isAfter(test2)); [EOL]     assertEquals(true, test2.isAfter(test1)); [EOL]     DateTime test3 = new DateTime(TEST_TIME2, GREGORIAN_PARIS); [EOL]     assertEquals(false, test1.isAfter(test3)); [EOL]     assertEquals(true, test3.isAfter(test1)); [EOL]     assertEquals(false, test3.isAfter(test2)); [EOL]     assertEquals(true, test2.isAfter(new MockInstant())); [EOL]     assertEquals(false, test1.isAfter(new MockInstant())); [EOL]     assertEquals(true, new DateTime(TEST_TIME_NOW + 1).isAfter(null)); [EOL]     assertEquals(false, new DateTime(TEST_TIME_NOW).isAfter(null)); [EOL]     assertEquals(false, new DateTime(TEST_TIME_NOW - 1).isAfter(null)); [EOL] }
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] }
public void testConstructor_RI_RP3() throws Throwable { [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW, ISOChronology.getInstanceUTC()); [EOL]     Period dur = new Period(0, 6, 0, 3, 1, 0, 0, 0, PeriodType.standard()); [EOL]     long result = TEST_TIME_NOW; [EOL]     result = ISOChronology.getInstanceUTC().months().add(result, 6); [EOL]     result = ISOChronology.getInstanceUTC().days().add(result, 3); [EOL]     result = ISOChronology.getInstanceUTC().hours().add(result, 1); [EOL]     MutableInterval test = new MutableInterval(dt, dur); [EOL]     assertEquals(dt.getMillis(), test.getStartMillis()); [EOL]     assertEquals(result, test.getEndMillis()); [EOL] }
public void testConstructor_RI_RP3() throws Throwable { [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW, ISOChronology.getInstanceUTC()); [EOL]     Period dur = new Period(0, 6, 0, 3, 1, 0, 0, 0, PeriodType.standard()); [EOL]     long result = TEST_TIME_NOW; [EOL]     result = ISOChronology.getInstanceUTC().months().add(result, 6); [EOL]     result = ISOChronology.getInstanceUTC().days().add(result, 3); [EOL]     result = ISOChronology.getInstanceUTC().hours().add(result, 1); [EOL]     MutableInterval test = new MutableInterval(dt, dur); [EOL]     assertEquals(dt.getMillis(), test.getStartMillis()); [EOL]     assertEquals(result, test.getEndMillis()); [EOL] }
public void testConstructor_Object6() throws Throwable { [EOL]     IntervalConverter oldConv = ConverterManager.getInstance().getIntervalConverter(new MutableInterval(0L, 0L)); [EOL]     IntervalConverter conv = new IntervalConverter() { [EOL]  [EOL]         public boolean isReadableInterval(Object object, Chronology chrono) { [EOL]             return false; [EOL]         } [EOL]  [EOL]         public void setInto(ReadWritableInterval interval, Object object, Chronology chrono) { [EOL]             interval.setChronology(chrono); [EOL]             interval.setInterval(1234L, 5678L); [EOL]         } [EOL]  [EOL]         public Class<?> getSupportedType() { [EOL]             return ReadableInterval.class; [EOL]         } [EOL]     }; [EOL]     try { [EOL]         ConverterManager.getInstance().addIntervalConverter(conv); [EOL]         Interval base = new Interval(-1000L, 1000L); [EOL]         MutableInterval test = new MutableInterval(base); [EOL]         assertEquals(1234L, test.getStartMillis()); [EOL]         assertEquals(5678L, test.getEndMillis()); [EOL]     } finally { [EOL]         ConverterManager.getInstance().addIntervalConverter(oldConv); [EOL]     } [EOL] }
public void testConstructor_Object6() throws Throwable { [EOL]     IntervalConverter oldConv = ConverterManager.getInstance().getIntervalConverter(new MutableInterval(0L, 0L)); [EOL]     IntervalConverter conv = new IntervalConverter() { [EOL]  [EOL]         public boolean isReadableInterval(Object object, Chronology chrono) { [EOL]             return false; [EOL]         } [EOL]  [EOL]         public void setInto(ReadWritableInterval interval, Object object, Chronology chrono) { [EOL]             interval.setChronology(chrono); [EOL]             interval.setInterval(1234L, 5678L); [EOL]         } [EOL]  [EOL]         public Class<?> getSupportedType() { [EOL]             return ReadableInterval.class; [EOL]         } [EOL]     }; [EOL]     try { [EOL]         ConverterManager.getInstance().addIntervalConverter(conv); [EOL]         Interval base = new Interval(-1000L, 1000L); [EOL]         MutableInterval test = new MutableInterval(base); [EOL]         assertEquals(1234L, test.getStartMillis()); [EOL]         assertEquals(5678L, test.getEndMillis()); [EOL]     } finally { [EOL]         ConverterManager.getInstance().addIntervalConverter(oldConv); [EOL]     } [EOL] }
public void testConstructor_Object6() throws Throwable { [EOL]     IntervalConverter oldConv = ConverterManager.getInstance().getIntervalConverter(new MutableInterval(0L, 0L)); [EOL]     IntervalConverter conv = new IntervalConverter() { [EOL]  [EOL]         public boolean isReadableInterval(Object object, Chronology chrono) { [EOL]             return false; [EOL]         } [EOL]  [EOL]         public void setInto(ReadWritableInterval interval, Object object, Chronology chrono) { [EOL]             interval.setChronology(chrono); [EOL]             interval.setInterval(1234L, 5678L); [EOL]         } [EOL]  [EOL]         public Class<?> getSupportedType() { [EOL]             return ReadableInterval.class; [EOL]         } [EOL]     }; [EOL]     try { [EOL]         ConverterManager.getInstance().addIntervalConverter(conv); [EOL]         Interval base = new Interval(-1000L, 1000L); [EOL]         MutableInterval test = new MutableInterval(base); [EOL]         assertEquals(1234L, test.getStartMillis()); [EOL]         assertEquals(5678L, test.getEndMillis()); [EOL]     } finally { [EOL]         ConverterManager.getInstance().addIntervalConverter(oldConv); [EOL]     } [EOL] }
public void testConstructor_Object6() throws Throwable { [EOL]     IntervalConverter oldConv = ConverterManager.getInstance().getIntervalConverter(new MutableInterval(0L, 0L)); [EOL]     IntervalConverter conv = new IntervalConverter() { [EOL]  [EOL]         public boolean isReadableInterval(Object object, Chronology chrono) { [EOL]             return false; [EOL]         } [EOL]  [EOL]         public void setInto(ReadWritableInterval interval, Object object, Chronology chrono) { [EOL]             interval.setChronology(chrono); [EOL]             interval.setInterval(1234L, 5678L); [EOL]         } [EOL]  [EOL]         public Class<?> getSupportedType() { [EOL]             return ReadableInterval.class; [EOL]         } [EOL]     }; [EOL]     try { [EOL]         ConverterManager.getInstance().addIntervalConverter(conv); [EOL]         Interval base = new Interval(-1000L, 1000L); [EOL]         MutableInterval test = new MutableInterval(base); [EOL]         assertEquals(1234L, test.getStartMillis()); [EOL]         assertEquals(5678L, test.getEndMillis()); [EOL]     } finally { [EOL]         ConverterManager.getInstance().addIntervalConverter(oldConv); [EOL]     } [EOL] }
public void testSetDurationBeforeEnd_long1() { [EOL]     MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     test.setDurationBeforeEnd(123L); [EOL]     assertEquals(TEST_TIME2 - 123L, test.getStartMillis()); [EOL]     assertEquals(TEST_TIME2, test.getEndMillis()); [EOL] }
public void testSetDurationBeforeEnd_long1() { [EOL]     MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     test.setDurationBeforeEnd(123L); [EOL]     assertEquals(TEST_TIME2 - 123L, test.getStartMillis()); [EOL]     assertEquals(TEST_TIME2, test.getEndMillis()); [EOL] }
public void testSetDurationBeforeEnd_long1() { [EOL]     MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     test.setDurationBeforeEnd(123L); [EOL]     assertEquals(TEST_TIME2 - 123L, test.getStartMillis()); [EOL]     assertEquals(TEST_TIME2, test.getEndMillis()); [EOL] }
public void test_now_Chronology() throws Throwable { [EOL]     DateMidnight test = DateMidnight.now(GregorianChronology.getInstance()); [EOL]     assertEquals(GregorianChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW_LONDON, test.getMillis()); [EOL] }
public void test_now_Chronology() throws Throwable { [EOL]     DateMidnight test = DateMidnight.now(GregorianChronology.getInstance()); [EOL]     assertEquals(GregorianChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW_LONDON, test.getMillis()); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testDateMidnight() { [EOL]     DateMidnight test = new DateMidnight(2010, 6, 30, ISOChronology.getInstance(ZONE)); [EOL]     String str = StringConvert.INSTANCE.convertToString(test); [EOL]     assertEquals("2010-06-30T00:00:00.000+02:00", str); [EOL]     assertEquals(test, StringConvert.INSTANCE.convertFromString(DateMidnight.class, str)); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testDateMidnight() { [EOL]     DateMidnight test = new DateMidnight(2010, 6, 30, ISOChronology.getInstance(ZONE)); [EOL]     String str = StringConvert.INSTANCE.convertToString(test); [EOL]     assertEquals("2010-06-30T00:00:00.000+02:00", str); [EOL]     assertEquals(test, StringConvert.INSTANCE.convertFromString(DateMidnight.class, str)); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testDateMidnight() { [EOL]     DateMidnight test = new DateMidnight(2010, 6, 30, ISOChronology.getInstance(ZONE)); [EOL]     String str = StringConvert.INSTANCE.convertToString(test); [EOL]     assertEquals("2010-06-30T00:00:00.000+02:00", str); [EOL]     assertEquals(test, StringConvert.INSTANCE.convertFromString(DateMidnight.class, str)); [EOL] }
public void testWithZoneRetainFields_DateTimeZone() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateMidnight result = test.withZoneRetainFields(PARIS); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_PARIS, result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertEquals(TEST_TIME1_PARIS, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_LONDON, result.getMillis()); [EOL]     assertEquals(GREGORIAN_DEFAULT, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, new MockNullZoneChronology()); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL] }
public void testToCalendar_Locale() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     Calendar result = test.toCalendar(null); [EOL]     assertEquals(test.getMillis(), result.getTime().getTime()); [EOL]     assertEquals(TimeZone.getTimeZone("Europe/London"), result.getTimeZone()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, PARIS); [EOL]     result = test.toCalendar(null); [EOL]     assertEquals(test.getMillis(), result.getTime().getTime()); [EOL]     assertEquals(TimeZone.getTimeZone("Europe/Paris"), result.getTimeZone()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, PARIS); [EOL]     result = test.toCalendar(Locale.UK); [EOL]     assertEquals(test.getMillis(), result.getTime().getTime()); [EOL]     assertEquals(TimeZone.getTimeZone("Europe/Paris"), result.getTimeZone()); [EOL] }
public void testToCalendar_Locale() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     Calendar result = test.toCalendar(null); [EOL]     assertEquals(test.getMillis(), result.getTime().getTime()); [EOL]     assertEquals(TimeZone.getTimeZone("Europe/London"), result.getTimeZone()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, PARIS); [EOL]     result = test.toCalendar(null); [EOL]     assertEquals(test.getMillis(), result.getTime().getTime()); [EOL]     assertEquals(TimeZone.getTimeZone("Europe/Paris"), result.getTimeZone()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, PARIS); [EOL]     result = test.toCalendar(Locale.UK); [EOL]     assertEquals(test.getMillis(), result.getTime().getTime()); [EOL]     assertEquals(TimeZone.getTimeZone("Europe/Paris"), result.getTimeZone()); [EOL] }
public void testWithZoneRetainFields_DateTimeZone() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateMidnight result = test.withZoneRetainFields(PARIS); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_PARIS, result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertEquals(TEST_TIME1_PARIS, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_LONDON, result.getMillis()); [EOL]     assertEquals(GREGORIAN_DEFAULT, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, new MockNullZoneChronology()); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL] }
public void testWithZoneRetainFields_DateTimeZone() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateMidnight result = test.withZoneRetainFields(PARIS); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_PARIS, result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertEquals(TEST_TIME1_PARIS, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_LONDON, result.getMillis()); [EOL]     assertEquals(GREGORIAN_DEFAULT, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, new MockNullZoneChronology()); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL] }
public void testConstructor_Object_nullChronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1_UTC); [EOL]     DateMidnight test = new DateMidnight(date, (Chronology) null); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL] }
public void testConstructor_Object_nullChronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1_UTC); [EOL]     DateMidnight test = new DateMidnight(date, (Chronology) null); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL] }
public void testConstructor_Object_nullChronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1_UTC); [EOL]     DateMidnight test = new DateMidnight(date, (Chronology) null); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL] }
public void testConstructor_Object_nullChronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1_UTC); [EOL]     DateMidnight test = new DateMidnight(date, (Chronology) null); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL] }
public void testConstructor_int_int_int_nullDateTimeZone() throws Throwable { [EOL]     DateMidnight test = new DateMidnight(2002, 6, 9, (DateTimeZone) null); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW_LONDON, test.getMillis()); [EOL]     assertEquals(2002, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL] }
public void testConstructor_int_int_int_nullDateTimeZone() throws Throwable { [EOL]     DateMidnight test = new DateMidnight(2002, 6, 9, (DateTimeZone) null); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW_LONDON, test.getMillis()); [EOL]     assertEquals(2002, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL] }
public void testWithZoneRetainFields_DateTimeZone() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateMidnight result = test.withZoneRetainFields(PARIS); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_PARIS, result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertEquals(TEST_TIME1_PARIS, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_LONDON, result.getMillis()); [EOL]     assertEquals(GREGORIAN_DEFAULT, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, new MockNullZoneChronology()); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL] }
public void testWithZoneRetainFields_DateTimeZone() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateMidnight result = test.withZoneRetainFields(PARIS); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_PARIS, result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertEquals(TEST_TIME1_PARIS, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_LONDON, result.getMillis()); [EOL]     assertEquals(GREGORIAN_DEFAULT, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, new MockNullZoneChronology()); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL] }
public void testWithZoneRetainFields_DateTimeZone() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateMidnight result = test.withZoneRetainFields(PARIS); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_PARIS, result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertEquals(TEST_TIME1_PARIS, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_LONDON, result.getMillis()); [EOL]     assertEquals(GREGORIAN_DEFAULT, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, new MockNullZoneChronology()); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL] }
public void testWithFields_RPartial() { [EOL]     DateMidnight test = new DateMidnight(2004, 5, 6); [EOL]     DateMidnight result = test.withFields(new YearMonthDay(2003, 4, 5)); [EOL]     DateMidnight expected = new DateMidnight(2003, 4, 5); [EOL]     assertEquals(expected, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withFields(null); [EOL]     assertSame(test, result); [EOL] }
public void testWithFields_RPartial() { [EOL]     DateMidnight test = new DateMidnight(2004, 5, 6); [EOL]     DateMidnight result = test.withFields(new YearMonthDay(2003, 4, 5)); [EOL]     DateMidnight expected = new DateMidnight(2003, 4, 5); [EOL]     assertEquals(expected, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withFields(null); [EOL]     assertSame(test, result); [EOL] }
public void testWithFieldAdded4() { [EOL]     DateMidnight test = new DateMidnight(2004, 6, 9); [EOL]     DateMidnight result = test.withFieldAdded(DurationFieldType.years(), 0); [EOL]     assertSame(test, result); [EOL] }
public void testWithFieldAdded4() { [EOL]     DateMidnight test = new DateMidnight(2004, 6, 9); [EOL]     DateMidnight result = test.withFieldAdded(DurationFieldType.years(), 0); [EOL]     assertSame(test, result); [EOL] }
public void testWithFieldAdded4() { [EOL]     DateMidnight test = new DateMidnight(2004, 6, 9); [EOL]     DateMidnight result = test.withFieldAdded(DurationFieldType.years(), 0); [EOL]     assertSame(test, result); [EOL] }
public void testWithDurationAdded_long_int() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.withDurationAdded(123456789L, 1); [EOL]     DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.withDurationAdded(123456789L, 0); [EOL]     assertSame(test, result); [EOL]     result = test.withDurationAdded(123456789L, 2); [EOL]     expected = new DateMidnight(test.getMillis() + (2L * 123456789L), BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.withDurationAdded(123456789L, -3); [EOL]     expected = new DateMidnight(test.getMillis() - (3L * 123456789L), BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL] }
public void testWithDurationAdded_long_int() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.withDurationAdded(123456789L, 1); [EOL]     DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.withDurationAdded(123456789L, 0); [EOL]     assertSame(test, result); [EOL]     result = test.withDurationAdded(123456789L, 2); [EOL]     expected = new DateMidnight(test.getMillis() + (2L * 123456789L), BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.withDurationAdded(123456789L, -3); [EOL]     expected = new DateMidnight(test.getMillis() - (3L * 123456789L), BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL] }
public void testWithDurationAdded_long_int() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.withDurationAdded(123456789L, 1); [EOL]     DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.withDurationAdded(123456789L, 0); [EOL]     assertSame(test, result); [EOL]     result = test.withDurationAdded(123456789L, 2); [EOL]     expected = new DateMidnight(test.getMillis() + (2L * 123456789L), BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.withDurationAdded(123456789L, -3); [EOL]     expected = new DateMidnight(test.getMillis() - (3L * 123456789L), BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL] }
public void testPlusMonths_int() { [EOL]     DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.plusMonths(1); [EOL]     DateMidnight expected = new DateMidnight(2002, 6, 3, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusMonths(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusMonths_int() { [EOL]     DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.plusMonths(1); [EOL]     DateMidnight expected = new DateMidnight(2002, 6, 3, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusMonths(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusMonths_int() { [EOL]     DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.plusMonths(1); [EOL]     DateMidnight expected = new DateMidnight(2002, 6, 3, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusMonths(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinus_long() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.minus(123456789L); [EOL]     DateMidnight expected = new DateMidnight(test.getMillis() - 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL] }
public void testMinus_long() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.minus(123456789L); [EOL]     DateMidnight expected = new DateMidnight(test.getMillis() - 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL] }
public void testMinus_long() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.minus(123456789L); [EOL]     DateMidnight expected = new DateMidnight(test.getMillis() - 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL] }
public void testMinusMonths_int() { [EOL]     DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.minusMonths(1); [EOL]     DateMidnight expected = new DateMidnight(2002, 4, 3, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusMonths(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusMonths_int() { [EOL]     DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.minusMonths(1); [EOL]     DateMidnight expected = new DateMidnight(2002, 4, 3, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusMonths(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusMonths_int() { [EOL]     DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.minusMonths(1); [EOL]     DateMidnight expected = new DateMidnight(2002, 4, 3, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusMonths(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusWeeks_int() { [EOL]     DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.minusWeeks(1); [EOL]     DateMidnight expected = new DateMidnight(2002, 4, 26, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusWeeks(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusWeeks_int() { [EOL]     DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.minusWeeks(1); [EOL]     DateMidnight expected = new DateMidnight(2002, 4, 26, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusWeeks(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusWeeks_int() { [EOL]     DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.minusWeeks(1); [EOL]     DateMidnight expected = new DateMidnight(2002, 4, 26, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusWeeks(0); [EOL]     assertSame(test, result); [EOL] }
public void testToYearMonthDay() { [EOL]     DateMidnight base = new DateMidnight(TEST_TIME1_UTC, COPTIC_DEFAULT); [EOL]     YearMonthDay test = base.toYearMonthDay(); [EOL]     assertEquals(new YearMonthDay(TEST_TIME1_UTC, COPTIC_DEFAULT), test); [EOL] }
public void testWithers() { [EOL]     DateMidnight test = new DateMidnight(1970, 6, 9, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     DateMidnight test = new DateMidnight(1970, 6, 9, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     DateMidnight test = new DateMidnight(1970, 6, 9, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     DateMidnight test = new DateMidnight(1970, 6, 9, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     DateMidnight test = new DateMidnight(1970, 6, 9, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     DateMidnight test = new DateMidnight(1970, 6, 9, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     DateMidnight test = new DateMidnight(1970, 6, 9, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     DateMidnight test = new DateMidnight(1970, 6, 9, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     DateMidnight test = new DateMidnight(1970, 6, 9, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     DateMidnight test = new DateMidnight(1970, 6, 9, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     DateMidnight test = new DateMidnight(1970, 6, 9, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     DateMidnight test = new DateMidnight(1970, 6, 9, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     DateMidnight test = new DateMidnight(1970, 6, 9, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     DateMidnight test = new DateMidnight(1970, 6, 9, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     DateMidnight test = new DateMidnight(1970, 6, 9, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     DateMidnight test = new DateMidnight(1970, 6, 9, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     DateMidnight test = new DateMidnight(1970, 6, 9, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     DateMidnight test = new DateMidnight(1970, 6, 9, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     DateMidnight test = new DateMidnight(1970, 6, 9, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     DateMidnight test = new DateMidnight(1970, 6, 9, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     DateMidnight test = new DateMidnight(1970, 6, 9, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     DateMidnight test = new DateMidnight(1970, 6, 9, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     DateMidnight test = new DateMidnight(1970, 6, 9, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     DateMidnight test = new DateMidnight(1970, 6, 9, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     DateMidnight test = new DateMidnight(1970, 6, 9, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     DateMidnight test = new DateMidnight(1970, 6, 9, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     DateMidnight test = new DateMidnight(1970, 6, 9, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     DateMidnight test = new DateMidnight(1970, 6, 9, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyGetWeekyear() { [EOL]     DateMidnight test = new DateMidnight(2004, 6, 9); [EOL]     assertSame(test.getChronology().weekyear(), test.weekyear().getField()); [EOL]     assertEquals("weekyear", test.weekyear().getName()); [EOL]     assertEquals("Property[weekyear]", test.weekyear().toString()); [EOL]     assertSame(test, test.weekyear().getDateMidnight()); [EOL]     assertEquals(2004, test.weekyear().get()); [EOL]     assertEquals("2004", test.weekyear().getAsText()); [EOL]     assertEquals("2004", test.weekyear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("2004", test.weekyear().getAsShortText()); [EOL]     assertEquals("2004", test.weekyear().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().weekyears(), test.weekyear().getDurationField()); [EOL]     assertEquals(null, test.weekyear().getRangeDurationField()); [EOL]     assertEquals(9, test.weekyear().getMaximumTextLength(null)); [EOL]     assertEquals(9, test.weekyear().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyAddWrapFieldMonthOfYear() { [EOL]     DateMidnight test = new DateMidnight(2004, 6, 9); [EOL]     DateMidnight copy = test.monthOfYear().addWrapFieldToCopy(8); [EOL]     assertEquals(2004, copy.getYear()); [EOL]     assertEquals(2, copy.getMonthOfYear()); [EOL]     assertEquals(9, copy.getDayOfMonth()); [EOL] }
public void testPropertyAddWrapFieldMonthOfYear() { [EOL]     DateMidnight test = new DateMidnight(2004, 6, 9); [EOL]     DateMidnight copy = test.monthOfYear().addWrapFieldToCopy(8); [EOL]     assertEquals(2004, copy.getYear()); [EOL]     assertEquals(2, copy.getMonthOfYear()); [EOL]     assertEquals(9, copy.getDayOfMonth()); [EOL] }
public void testPropertyAddWrapFieldMonthOfYear() { [EOL]     DateMidnight test = new DateMidnight(2004, 6, 9); [EOL]     DateMidnight copy = test.monthOfYear().addWrapFieldToCopy(8); [EOL]     assertEquals(2004, copy.getYear()); [EOL]     assertEquals(2, copy.getMonthOfYear()); [EOL]     assertEquals(9, copy.getDayOfMonth()); [EOL] }
public void testPropertyRoundHalfEvenMonthOfYear() { [EOL]     DateMidnight test = new DateMidnight(2004, 6, 16); [EOL]     DateMidnight copy = test.monthOfYear().roundHalfEvenCopy(); [EOL]     assertEquals("2004-06-01T00:00:00.000+01:00", copy.toString()); [EOL]     test = new DateMidnight(2004, 9, 16); [EOL]     copy = test.monthOfYear().roundHalfEvenCopy(); [EOL]     assertEquals("2004-10-01T00:00:00.000+01:00", copy.toString()); [EOL]     test = new DateMidnight(2004, 6, 17); [EOL]     copy = test.monthOfYear().roundHalfEvenCopy(); [EOL]     assertEquals("2004-07-01T00:00:00.000+01:00", copy.toString()); [EOL]     test = new DateMidnight(2004, 6, 15); [EOL]     copy = test.monthOfYear().roundHalfEvenCopy(); [EOL]     assertEquals("2004-06-01T00:00:00.000+01:00", copy.toString()); [EOL] }
