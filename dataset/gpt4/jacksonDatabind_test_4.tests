public void testMapperVersions() { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     assertVersion(mapper); [EOL]     assertVersion(mapper.reader()); [EOL]     assertVersion(mapper.writer()); [EOL]     assertVersion(new JacksonAnnotationIntrospector()); [EOL] }
public void testRootWrapping() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(SerializationFeature.WRAP_ROOT_VALUE, true); [EOL]     String json = mapper.writeValueAsString(new StringWrapper("abc")); [EOL]     assertEquals("{\"StringWrapper\":{\"str\":\"abc\"}}", json); [EOL] }
public void testRootWrapping() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(SerializationFeature.WRAP_ROOT_VALUE, true); [EOL]     String json = mapper.writeValueAsString(new StringWrapper("abc")); [EOL]     assertEquals("{\"StringWrapper\":{\"str\":\"abc\"}}", json); [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testPropertyAnnotationForMaps() throws Exception { [EOL]     String json = objectWriter().writeValueAsString(new PointListWrapperMap("a", 1, 2)); [EOL]     assertEquals("{\"values\":{\"a\":[1,2]}}", json); [EOL] }
public void testPropertyAnnotationForMaps() throws Exception { [EOL]     String json = objectWriter().writeValueAsString(new PointListWrapperMap("a", 1, 2)); [EOL]     assertEquals("{\"values\":{\"a\":[1,2]}}", json); [EOL] }
public void testPropertyAnnotationForMaps() throws Exception { [EOL]     String json = objectWriter().writeValueAsString(new PointListWrapperMap("a", 1, 2)); [EOL]     assertEquals("{\"values\":{\"a\":[1,2]}}", json); [EOL] }
public void testPropertyAnnotationForMaps() throws Exception { [EOL]     String json = objectWriter().writeValueAsString(new PointListWrapperMap("a", 1, 2)); [EOL]     assertEquals("{\"values\":{\"a\":[1,2]}}", json); [EOL] }
public void testPropertyAnnotationForMaps() throws Exception { [EOL]     String json = objectWriter().writeValueAsString(new PointListWrapperMap("a", 1, 2)); [EOL]     assertEquals("{\"values\":{\"a\":[1,2]}}", json); [EOL] }
public void testPropertyAnnotationForMaps() throws Exception { [EOL]     String json = objectWriter().writeValueAsString(new PointListWrapperMap("a", 1, 2)); [EOL]     assertEquals("{\"values\":{\"a\":[1,2]}}", json); [EOL] }
public void testPropertyAnnotationForMaps() throws Exception { [EOL]     String json = objectWriter().writeValueAsString(new PointListWrapperMap("a", 1, 2)); [EOL]     assertEquals("{\"values\":{\"a\":[1,2]}}", json); [EOL] }
public void testPropertyAnnotationForMaps() throws Exception { [EOL]     String json = objectWriter().writeValueAsString(new PointListWrapperMap("a", 1, 2)); [EOL]     assertEquals("{\"values\":{\"a\":[1,2]}}", json); [EOL] }
public void testPropertyAnnotationForMaps() throws Exception { [EOL]     String json = objectWriter().writeValueAsString(new PointListWrapperMap("a", 1, 2)); [EOL]     assertEquals("{\"values\":{\"a\":[1,2]}}", json); [EOL] }
public void testPropertyAnnotationSimple() throws Exception { [EOL]     String json = objectWriter().writeValueAsString(new PointWrapper(3, 4)); [EOL]     assertEquals("{\"value\":[3,4]}", json); [EOL] }
public void testPropertyAnnotationSimple() throws Exception { [EOL]     String json = objectWriter().writeValueAsString(new PointWrapper(3, 4)); [EOL]     assertEquals("{\"value\":[3,4]}", json); [EOL] }
public void testPropertyAnnotationSimple() throws Exception { [EOL]     String json = objectWriter().writeValueAsString(new PointWrapper(3, 4)); [EOL]     assertEquals("{\"value\":[3,4]}", json); [EOL] }
public void testPropertyAnnotationForMaps() throws Exception { [EOL]     String json = objectWriter().writeValueAsString(new PointListWrapperMap("a", 1, 2)); [EOL]     assertEquals("{\"values\":{\"a\":[1,2]}}", json); [EOL] }
public void testPropertyAnnotationForMaps() throws Exception { [EOL]     String json = objectWriter().writeValueAsString(new PointListWrapperMap("a", 1, 2)); [EOL]     assertEquals("{\"values\":{\"a\":[1,2]}}", json); [EOL] }
public void testPropertyAnnotationForMaps() throws Exception { [EOL]     String json = objectWriter().writeValueAsString(new PointListWrapperMap("a", 1, 2)); [EOL]     assertEquals("{\"values\":{\"a\":[1,2]}}", json); [EOL] }
public void testKeyDeserializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setHandlerInstantiator(new MyInstantiator("abc:")); [EOL]     MyMap map = mapper.readValue("{\"a\":\"b\"}", MyMap.class); [EOL]     assertEquals("{\"KEY\":\"b\"}", mapper.writeValueAsString(map)); [EOL] }
public void testKeyDeserializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setHandlerInstantiator(new MyInstantiator("abc:")); [EOL]     MyMap map = mapper.readValue("{\"a\":\"b\"}", MyMap.class); [EOL]     assertEquals("{\"KEY\":\"b\"}", mapper.writeValueAsString(map)); [EOL] }
public void testKeyDeserializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setHandlerInstantiator(new MyInstantiator("abc:")); [EOL]     MyMap map = mapper.readValue("{\"a\":\"b\"}", MyMap.class); [EOL]     assertEquals("{\"KEY\":\"b\"}", mapper.writeValueAsString(map)); [EOL] }
public void testDeserializeDecimalProperExceptionWhenIdSet() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = "{\"id\": 5, \"defaultValue\": { \"value\": \"123\" } }"; [EOL]     try { [EOL]         MyBeanHolder result = mapper.readValue(json, MyBeanHolder.class); [EOL]         fail("should have raised exception instead value was set to " + result.defaultValue.value.decimal.toString()); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "not numeric"); [EOL]     } [EOL] }
public void testDeserializeDecimalProperExceptionWhenIdSet() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = "{\"id\": 5, \"defaultValue\": { \"value\": \"123\" } }"; [EOL]     try { [EOL]         MyBeanHolder result = mapper.readValue(json, MyBeanHolder.class); [EOL]         fail("should have raised exception instead value was set to " + result.defaultValue.value.decimal.toString()); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "not numeric"); [EOL]     } [EOL] }
public void testDeserializeDecimalProperExceptionWhenIdSet() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = "{\"id\": 5, \"defaultValue\": { \"value\": \"123\" } }"; [EOL]     try { [EOL]         MyBeanHolder result = mapper.readValue(json, MyBeanHolder.class); [EOL]         fail("should have raised exception instead value was set to " + result.defaultValue.value.decimal.toString()); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "not numeric"); [EOL]     } [EOL] }
public void testPropertyAnnotationArrayLC() throws Exception { [EOL]     LowerCaseTextArray texts = objectReader(LowerCaseTextArray.class).readValue("{\"texts\":[\"ABC\"]}"); [EOL]     assertNotNull(texts); [EOL]     assertNotNull(texts.texts); [EOL]     assertEquals(1, texts.texts.length); [EOL]     assertEquals("abc", texts.texts[0]); [EOL] }
public void testPropertyAnnotationArrayLC() throws Exception { [EOL]     LowerCaseTextArray texts = objectReader(LowerCaseTextArray.class).readValue("{\"texts\":[\"ABC\"]}"); [EOL]     assertNotNull(texts); [EOL]     assertNotNull(texts.texts); [EOL]     assertEquals(1, texts.texts.length); [EOL]     assertEquals("abc", texts.texts[0]); [EOL] }
public void testPropertyAnnotationArrayLC() throws Exception { [EOL]     LowerCaseTextArray texts = objectReader(LowerCaseTextArray.class).readValue("{\"texts\":[\"ABC\"]}"); [EOL]     assertNotNull(texts); [EOL]     assertNotNull(texts.texts); [EOL]     assertEquals(1, texts.texts.length); [EOL]     assertEquals("abc", texts.texts[0]); [EOL] }
public void testImmutable() throws Exception { [EOL]     final String json = "{\"value\":13}"; [EOL]     ValueImmutable value = mapper.readValue(json, ValueImmutable.class); [EOL]     assertEquals(13, value.value); [EOL] }
public void testWithIdNone() throws Exception { [EOL]     final ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(); [EOL]     String json = mapper.writeValueAsString(new NoType()); [EOL]     assertEquals("{\"a\":3}", json); [EOL]     NoTypeInterface bean = mapper.readValue("{\"a\":6}", NoTypeInterface.class); [EOL]     assertNotNull(bean); [EOL]     NoType impl = (NoType) bean; [EOL]     assertEquals(6, impl.a); [EOL] }
public void testWithIdNone() throws Exception { [EOL]     final ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(); [EOL]     String json = mapper.writeValueAsString(new NoType()); [EOL]     assertEquals("{\"a\":3}", json); [EOL]     NoTypeInterface bean = mapper.readValue("{\"a\":6}", NoTypeInterface.class); [EOL]     assertNotNull(bean); [EOL]     NoType impl = (NoType) bean; [EOL]     assertEquals(6, impl.a); [EOL] }
public void testMixedRefsIssue188() throws Exception { [EOL]     Company comp = new Company(); [EOL]     Employee e1 = new Employee(1, "First", null); [EOL]     Employee e2 = new Employee(2, "Second", e1); [EOL]     e1.addReport(e2); [EOL]     comp.add(e1); [EOL]     comp.add(e2); [EOL]     String json = MAPPER.writeValueAsString(comp); [EOL]     assertEquals("{\"employees\":[" + "{\"id\":1,\"name\":\"First\",\"manager\":null,\"reports\":[2]}," + "{\"id\":2,\"name\":\"Second\",\"manager\":1,\"reports\":[]}" + "]}", json); [EOL] }
public void testMixedRefsIssue188() throws Exception { [EOL]     Company comp = new Company(); [EOL]     Employee e1 = new Employee(1, "First", null); [EOL]     Employee e2 = new Employee(2, "Second", e1); [EOL]     e1.addReport(e2); [EOL]     comp.add(e1); [EOL]     comp.add(e2); [EOL]     String json = MAPPER.writeValueAsString(comp); [EOL]     assertEquals("{\"employees\":[" + "{\"id\":1,\"name\":\"First\",\"manager\":null,\"reports\":[2]}," + "{\"id\":2,\"name\":\"Second\",\"manager\":1,\"reports\":[]}" + "]}", json); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testBooleanListAsProp() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\"" + TypedListAsProp.class.getName() + "\",[true, false]]"; [EOL]     JavaType type = TypeFactory.defaultInstance().constructCollectionType(TypedListAsProp.class, Boolean.class); [EOL]     TypedListAsProp<Object> result = m.readValue(JSON, type); [EOL]     assertNotNull(result); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(Boolean.TRUE, result.get(0)); [EOL]     assertEquals(Boolean.FALSE, result.get(1)); [EOL] }
public void testBooleanListAsProp() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\"" + TypedListAsProp.class.getName() + "\",[true, false]]"; [EOL]     JavaType type = TypeFactory.defaultInstance().constructCollectionType(TypedListAsProp.class, Boolean.class); [EOL]     TypedListAsProp<Object> result = m.readValue(JSON, type); [EOL]     assertNotNull(result); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(Boolean.TRUE, result.get(0)); [EOL]     assertEquals(Boolean.FALSE, result.get(1)); [EOL] }
public void testBooleanListAsProp() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\"" + TypedListAsProp.class.getName() + "\",[true, false]]"; [EOL]     JavaType type = TypeFactory.defaultInstance().constructCollectionType(TypedListAsProp.class, Boolean.class); [EOL]     TypedListAsProp<Object> result = m.readValue(JSON, type); [EOL]     assertNotNull(result); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(Boolean.TRUE, result.get(0)); [EOL]     assertEquals(Boolean.FALSE, result.get(1)); [EOL] }
public void testImmutable() throws Exception { [EOL]     final String json = "{\"value\":13}"; [EOL]     ValueImmutable value = mapper.readValue(json, ValueImmutable.class); [EOL]     assertEquals(13, value.value); [EOL] }
public void testImmutable() throws Exception { [EOL]     final String json = "{\"value\":13}"; [EOL]     ValueImmutable value = mapper.readValue(json, ValueImmutable.class); [EOL]     assertEquals(13, value.value); [EOL] }
public void testInvalidFormat() throws Exception { [EOL]     try { [EOL]         MAPPER.readValue(quote("foobar"), Date.class); [EOL]         fail("Should have failed with an exception"); [EOL]     } catch (InvalidFormatException e) { [EOL]         verifyException(e, "Can not construct instance"); [EOL]         assertEquals("foobar", e.getValue()); [EOL]         assertEquals(Date.class, e.getTargetType()); [EOL]     } catch (Exception e) { [EOL]         fail("Wrong type of exception (" + e.getClass().getName() + "), should get " + InvalidFormatException.class.getName()); [EOL]     } [EOL] }
public void testInvalidFormat() throws Exception { [EOL]     try { [EOL]         MAPPER.readValue(quote("foobar"), Date.class); [EOL]         fail("Should have failed with an exception"); [EOL]     } catch (InvalidFormatException e) { [EOL]         verifyException(e, "Can not construct instance"); [EOL]         assertEquals("foobar", e.getValue()); [EOL]         assertEquals(Date.class, e.getTargetType()); [EOL]     } catch (Exception e) { [EOL]         fail("Wrong type of exception (" + e.getClass().getName() + "), should get " + InvalidFormatException.class.getName()); [EOL]     } [EOL] }
public void testUnknownHandlingIgnoreWithHandler() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.clearProblemHandlers(); [EOL]     mapper.addHandler(new MyHandler()); [EOL]     TestBean result = mapper.readValue(new StringReader(JSON_UNKNOWN_FIELD), TestBean.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result._a); [EOL]     assertEquals(-1, result._b); [EOL]     assertEquals("foo:START_ARRAY", result._unknown); [EOL] }
public void testUnknownHandlingIgnoreWithHandler() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.clearProblemHandlers(); [EOL]     mapper.addHandler(new MyHandler()); [EOL]     TestBean result = mapper.readValue(new StringReader(JSON_UNKNOWN_FIELD), TestBean.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result._a); [EOL]     assertEquals(-1, result._b); [EOL]     assertEquals("foo:START_ARRAY", result._unknown); [EOL] }
public void testUnknownHandlingIgnoreWithHandler() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.clearProblemHandlers(); [EOL]     mapper.addHandler(new MyHandler()); [EOL]     TestBean result = mapper.readValue(new StringReader(JSON_UNKNOWN_FIELD), TestBean.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result._a); [EOL]     assertEquals(-1, result._b); [EOL]     assertEquals("foo:START_ARRAY", result._unknown); [EOL] }
public void testInvalidFormat() throws Exception { [EOL]     try { [EOL]         MAPPER.readValue(quote("foobar"), Date.class); [EOL]         fail("Should have failed with an exception"); [EOL]     } catch (InvalidFormatException e) { [EOL]         verifyException(e, "Can not construct instance"); [EOL]         assertEquals("foobar", e.getValue()); [EOL]         assertEquals(Date.class, e.getTargetType()); [EOL]     } catch (Exception e) { [EOL]         fail("Wrong type of exception (" + e.getClass().getName() + "), should get " + InvalidFormatException.class.getName()); [EOL]     } [EOL] }
public void testInvalidFormat() throws Exception { [EOL]     try { [EOL]         MAPPER.readValue(quote("foobar"), Date.class); [EOL]         fail("Should have failed with an exception"); [EOL]     } catch (InvalidFormatException e) { [EOL]         verifyException(e, "Can not construct instance"); [EOL]         assertEquals("foobar", e.getValue()); [EOL]         assertEquals(Date.class, e.getTargetType()); [EOL]     } catch (Exception e) { [EOL]         fail("Wrong type of exception (" + e.getClass().getName() + "), should get " + InvalidFormatException.class.getName()); [EOL]     } [EOL] }
public void testInvalidFormat() throws Exception { [EOL]     try { [EOL]         MAPPER.readValue(quote("foobar"), Date.class); [EOL]         fail("Should have failed with an exception"); [EOL]     } catch (InvalidFormatException e) { [EOL]         verifyException(e, "Can not construct instance"); [EOL]         assertEquals("foobar", e.getValue()); [EOL]         assertEquals(Date.class, e.getTargetType()); [EOL]     } catch (Exception e) { [EOL]         fail("Wrong type of exception (" + e.getClass().getName() + "), should get " + InvalidFormatException.class.getName()); [EOL]     } [EOL] }
public void testInvalidFormat() throws Exception { [EOL]     try { [EOL]         MAPPER.readValue(quote("foobar"), Date.class); [EOL]         fail("Should have failed with an exception"); [EOL]     } catch (InvalidFormatException e) { [EOL]         verifyException(e, "Can not construct instance"); [EOL]         assertEquals("foobar", e.getValue()); [EOL]         assertEquals(Date.class, e.getTargetType()); [EOL]     } catch (Exception e) { [EOL]         fail("Wrong type of exception (" + e.getClass().getName() + "), should get " + InvalidFormatException.class.getName()); [EOL]     } [EOL] }
public void testInvalidFormat() throws Exception { [EOL]     try { [EOL]         MAPPER.readValue(quote("foobar"), Date.class); [EOL]         fail("Should have failed with an exception"); [EOL]     } catch (InvalidFormatException e) { [EOL]         verifyException(e, "Can not construct instance"); [EOL]         assertEquals("foobar", e.getValue()); [EOL]         assertEquals(Date.class, e.getTargetType()); [EOL]     } catch (Exception e) { [EOL]         fail("Wrong type of exception (" + e.getClass().getName() + "), should get " + InvalidFormatException.class.getName()); [EOL]     } [EOL] }
public void testInvalidFormat() throws Exception { [EOL]     try { [EOL]         MAPPER.readValue(quote("foobar"), Date.class); [EOL]         fail("Should have failed with an exception"); [EOL]     } catch (InvalidFormatException e) { [EOL]         verifyException(e, "Can not construct instance"); [EOL]         assertEquals("foobar", e.getValue()); [EOL]         assertEquals(Date.class, e.getTargetType()); [EOL]     } catch (Exception e) { [EOL]         fail("Wrong type of exception (" + e.getClass().getName() + "), should get " + InvalidFormatException.class.getName()); [EOL]     } [EOL] }
public void testInvalidFormat() throws Exception { [EOL]     try { [EOL]         MAPPER.readValue(quote("foobar"), Date.class); [EOL]         fail("Should have failed with an exception"); [EOL]     } catch (InvalidFormatException e) { [EOL]         verifyException(e, "Can not construct instance"); [EOL]         assertEquals("foobar", e.getValue()); [EOL]         assertEquals(Date.class, e.getTargetType()); [EOL]     } catch (Exception e) { [EOL]         fail("Wrong type of exception (" + e.getClass().getName() + "), should get " + InvalidFormatException.class.getName()); [EOL]     } [EOL] }
public void testInvalidFormat() throws Exception { [EOL]     try { [EOL]         MAPPER.readValue(quote("foobar"), Date.class); [EOL]         fail("Should have failed with an exception"); [EOL]     } catch (InvalidFormatException e) { [EOL]         verifyException(e, "Can not construct instance"); [EOL]         assertEquals("foobar", e.getValue()); [EOL]         assertEquals(Date.class, e.getTargetType()); [EOL]     } catch (Exception e) { [EOL]         fail("Wrong type of exception (" + e.getClass().getName() + "), should get " + InvalidFormatException.class.getName()); [EOL]     } [EOL] }
public void testFormat() { [EOL]     String result = df.format(date); [EOL]     assertEquals("2007-08-13T19:51:23Z", result); [EOL] }
public void testFormat() { [EOL]     String result = df.format(date); [EOL]     assertEquals("2007-08-13T19:51:23Z", result); [EOL] }
public void testFormat() { [EOL]     String result = df.format(date); [EOL]     assertEquals("2007-08-13T19:51:23Z", result); [EOL] }
public void testDeserializeDecimalProperExceptionWhenIdSet() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = "{\"id\": 5, \"defaultValue\": { \"value\": \"123\" } }"; [EOL]     try { [EOL]         MyBeanHolder result = mapper.readValue(json, MyBeanHolder.class); [EOL]         fail("should have raised exception instead value was set to " + result.defaultValue.value.decimal.toString()); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "not numeric"); [EOL]     } [EOL] }
public void testDeserializeDecimalProperExceptionWhenIdSet() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = "{\"id\": 5, \"defaultValue\": { \"value\": \"123\" } }"; [EOL]     try { [EOL]         MyBeanHolder result = mapper.readValue(json, MyBeanHolder.class); [EOL]         fail("should have raised exception instead value was set to " + result.defaultValue.value.decimal.toString()); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "not numeric"); [EOL]     } [EOL] }
public void testDeserializeDecimalProperExceptionWhenIdSet() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = "{\"id\": 5, \"defaultValue\": { \"value\": \"123\" } }"; [EOL]     try { [EOL]         MyBeanHolder result = mapper.readValue(json, MyBeanHolder.class); [EOL]         fail("should have raised exception instead value was set to " + result.defaultValue.value.decimal.toString()); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "not numeric"); [EOL]     } [EOL] }
public void testDeserializeDecimalProperExceptionWhenIdSet() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = "{\"id\": 5, \"defaultValue\": { \"value\": \"123\" } }"; [EOL]     try { [EOL]         MyBeanHolder result = mapper.readValue(json, MyBeanHolder.class); [EOL]         fail("should have raised exception instead value was set to " + result.defaultValue.value.decimal.toString()); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "not numeric"); [EOL]     } [EOL] }
public void testDeserializeDecimalProperExceptionWhenIdSet() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = "{\"id\": 5, \"defaultValue\": { \"value\": \"123\" } }"; [EOL]     try { [EOL]         MyBeanHolder result = mapper.readValue(json, MyBeanHolder.class); [EOL]         fail("should have raised exception instead value was set to " + result.defaultValue.value.decimal.toString()); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "not numeric"); [EOL]     } [EOL] }
public void testDeserializeDecimalProperExceptionWhenIdSet() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = "{\"id\": 5, \"defaultValue\": { \"value\": \"123\" } }"; [EOL]     try { [EOL]         MyBeanHolder result = mapper.readValue(json, MyBeanHolder.class); [EOL]         fail("should have raised exception instead value was set to " + result.defaultValue.value.decimal.toString()); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "not numeric"); [EOL]     } [EOL] }
public void testDeserializeDecimalProperExceptionWhenIdSet() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = "{\"id\": 5, \"defaultValue\": { \"value\": \"123\" } }"; [EOL]     try { [EOL]         MyBeanHolder result = mapper.readValue(json, MyBeanHolder.class); [EOL]         fail("should have raised exception instead value was set to " + result.defaultValue.value.decimal.toString()); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "not numeric"); [EOL]     } [EOL] }
public void testDeserializeDecimalProperExceptionWhenIdSet() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = "{\"id\": 5, \"defaultValue\": { \"value\": \"123\" } }"; [EOL]     try { [EOL]         MyBeanHolder result = mapper.readValue(json, MyBeanHolder.class); [EOL]         fail("should have raised exception instead value was set to " + result.defaultValue.value.decimal.toString()); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "not numeric"); [EOL]     } [EOL] }
public void testKeyDeserializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setHandlerInstantiator(new MyInstantiator("abc:")); [EOL]     MyMap map = mapper.readValue("{\"a\":\"b\"}", MyMap.class); [EOL]     assertEquals("{\"KEY\":\"b\"}", mapper.writeValueAsString(map)); [EOL] }
public void testKeyDeserializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setHandlerInstantiator(new MyInstantiator("abc:")); [EOL]     MyMap map = mapper.readValue("{\"a\":\"b\"}", MyMap.class); [EOL]     assertEquals("{\"KEY\":\"b\"}", mapper.writeValueAsString(map)); [EOL] }
public void testKeyDeserializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setHandlerInstantiator(new MyInstantiator("abc:")); [EOL]     MyMap map = mapper.readValue("{\"a\":\"b\"}", MyMap.class); [EOL]     assertEquals("{\"KEY\":\"b\"}", mapper.writeValueAsString(map)); [EOL] }
public void testKeyDeserializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setHandlerInstantiator(new MyInstantiator("abc:")); [EOL]     MyMap map = mapper.readValue("{\"a\":\"b\"}", MyMap.class); [EOL]     assertEquals("{\"KEY\":\"b\"}", mapper.writeValueAsString(map)); [EOL] }
public void testKeyDeserializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setHandlerInstantiator(new MyInstantiator("abc:")); [EOL]     MyMap map = mapper.readValue("{\"a\":\"b\"}", MyMap.class); [EOL]     assertEquals("{\"KEY\":\"b\"}", mapper.writeValueAsString(map)); [EOL] }
public void testKeyDeserializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setHandlerInstantiator(new MyInstantiator("abc:")); [EOL]     MyMap map = mapper.readValue("{\"a\":\"b\"}", MyMap.class); [EOL]     assertEquals("{\"KEY\":\"b\"}", mapper.writeValueAsString(map)); [EOL] }
public void testKeyDeserializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setHandlerInstantiator(new MyInstantiator("abc:")); [EOL]     MyMap map = mapper.readValue("{\"a\":\"b\"}", MyMap.class); [EOL]     assertEquals("{\"KEY\":\"b\"}", mapper.writeValueAsString(map)); [EOL] }
public void testKeyDeserializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setHandlerInstantiator(new MyInstantiator("abc:")); [EOL]     MyMap map = mapper.readValue("{\"a\":\"b\"}", MyMap.class); [EOL]     assertEquals("{\"KEY\":\"b\"}", mapper.writeValueAsString(map)); [EOL] }
public void testPolymorphicSerdeWithDelegate() throws Exception { [EOL]     AdditionInterface adder = new AdditionInterfaceImpl(1); [EOL]     assertEquals(2, adder.add(1)); [EOL]     String json = MAPPER.writeValueAsString(adder); [EOL]     assertEquals("{\"boingo\":\"boopsy\",\"toAdd\":1}", json); [EOL]     assertEquals(2, MAPPER.readValue(json, AdditionInterface.class).add(1)); [EOL]     adder = new NegatingAdditionInterface(adder); [EOL]     assertEquals(0, adder.add(1)); [EOL]     json = MAPPER.writeValueAsString(adder); [EOL]     assertEquals("{\"boingo\":\"boopsy\",\"toAdd\":1}", json); [EOL]     assertEquals(2, MAPPER.readValue(json, AdditionInterface.class).add(1)); [EOL] }
public void testPolymorphicSerdeWithDelegate() throws Exception { [EOL]     AdditionInterface adder = new AdditionInterfaceImpl(1); [EOL]     assertEquals(2, adder.add(1)); [EOL]     String json = MAPPER.writeValueAsString(adder); [EOL]     assertEquals("{\"boingo\":\"boopsy\",\"toAdd\":1}", json); [EOL]     assertEquals(2, MAPPER.readValue(json, AdditionInterface.class).add(1)); [EOL]     adder = new NegatingAdditionInterface(adder); [EOL]     assertEquals(0, adder.add(1)); [EOL]     json = MAPPER.writeValueAsString(adder); [EOL]     assertEquals("{\"boingo\":\"boopsy\",\"toAdd\":1}", json); [EOL]     assertEquals(2, MAPPER.readValue(json, AdditionInterface.class).add(1)); [EOL] }
public void testPolymorphicSerdeWithDelegate() throws Exception { [EOL]     AdditionInterface adder = new AdditionInterfaceImpl(1); [EOL]     assertEquals(2, adder.add(1)); [EOL]     String json = MAPPER.writeValueAsString(adder); [EOL]     assertEquals("{\"boingo\":\"boopsy\",\"toAdd\":1}", json); [EOL]     assertEquals(2, MAPPER.readValue(json, AdditionInterface.class).add(1)); [EOL]     adder = new NegatingAdditionInterface(adder); [EOL]     assertEquals(0, adder.add(1)); [EOL]     json = MAPPER.writeValueAsString(adder); [EOL]     assertEquals("{\"boingo\":\"boopsy\",\"toAdd\":1}", json); [EOL]     assertEquals(2, MAPPER.readValue(json, AdditionInterface.class).add(1)); [EOL] }
public void testPolymorphicSerdeWithDelegate() throws Exception { [EOL]     AdditionInterface adder = new AdditionInterfaceImpl(1); [EOL]     assertEquals(2, adder.add(1)); [EOL]     String json = MAPPER.writeValueAsString(adder); [EOL]     assertEquals("{\"boingo\":\"boopsy\",\"toAdd\":1}", json); [EOL]     assertEquals(2, MAPPER.readValue(json, AdditionInterface.class).add(1)); [EOL]     adder = new NegatingAdditionInterface(adder); [EOL]     assertEquals(0, adder.add(1)); [EOL]     json = MAPPER.writeValueAsString(adder); [EOL]     assertEquals("{\"boingo\":\"boopsy\",\"toAdd\":1}", json); [EOL]     assertEquals(2, MAPPER.readValue(json, AdditionInterface.class).add(1)); [EOL] }
public void testGettersWithoutSetters() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     GettersWithoutSetters bean = new GettersWithoutSetters(123); [EOL]     assertFalse(m.isEnabled(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)); [EOL]     assertEquals("{\"a\":3,\"b\":4,\"c\":5,\"d\":6}", m.writeValueAsString(bean)); [EOL]     m = new ObjectMapper(); [EOL]     m.enable(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS); [EOL]     assertEquals("{\"a\":3,\"c\":5,\"d\":6}", m.writeValueAsString(bean)); [EOL] }
public void testGettersWithoutSetters() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     GettersWithoutSetters bean = new GettersWithoutSetters(123); [EOL]     assertFalse(m.isEnabled(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)); [EOL]     assertEquals("{\"a\":3,\"b\":4,\"c\":5,\"d\":6}", m.writeValueAsString(bean)); [EOL]     m = new ObjectMapper(); [EOL]     m.enable(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS); [EOL]     assertEquals("{\"a\":3,\"c\":5,\"d\":6}", m.writeValueAsString(bean)); [EOL] }
public void testGettersWithoutSetters() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     GettersWithoutSetters bean = new GettersWithoutSetters(123); [EOL]     assertFalse(m.isEnabled(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)); [EOL]     assertEquals("{\"a\":3,\"b\":4,\"c\":5,\"d\":6}", m.writeValueAsString(bean)); [EOL]     m = new ObjectMapper(); [EOL]     m.enable(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS); [EOL]     assertEquals("{\"a\":3,\"c\":5,\"d\":6}", m.writeValueAsString(bean)); [EOL] }
public void testGettersWithoutSetters() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     GettersWithoutSetters bean = new GettersWithoutSetters(123); [EOL]     assertFalse(m.isEnabled(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)); [EOL]     assertEquals("{\"a\":3,\"b\":4,\"c\":5,\"d\":6}", m.writeValueAsString(bean)); [EOL]     m = new ObjectMapper(); [EOL]     m.enable(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS); [EOL]     assertEquals("{\"a\":3,\"c\":5,\"d\":6}", m.writeValueAsString(bean)); [EOL] }
public void testGettersWithoutSetters() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     GettersWithoutSetters bean = new GettersWithoutSetters(123); [EOL]     assertFalse(m.isEnabled(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)); [EOL]     assertEquals("{\"a\":3,\"b\":4,\"c\":5,\"d\":6}", m.writeValueAsString(bean)); [EOL]     m = new ObjectMapper(); [EOL]     m.enable(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS); [EOL]     assertEquals("{\"a\":3,\"c\":5,\"d\":6}", m.writeValueAsString(bean)); [EOL] }
public void testSetterConflict() throws Exception { [EOL]     try { [EOL]         MAPPER.readValue("{ }", ConflictBean.class); [EOL]     } catch (Exception e) { [EOL]         verifyException(e, "Conflicting setter definitions"); [EOL]     } [EOL] }
public void testSetterConflict() throws Exception { [EOL]     try { [EOL]         MAPPER.readValue("{ }", ConflictBean.class); [EOL]     } catch (Exception e) { [EOL]         verifyException(e, "Conflicting setter definitions"); [EOL]     } [EOL] }
public void testSetterConflict() throws Exception { [EOL]     try { [EOL]         MAPPER.readValue("{ }", ConflictBean.class); [EOL]     } catch (Exception e) { [EOL]         verifyException(e, "Conflicting setter definitions"); [EOL]     } [EOL] }
public void testSetterConflict() throws Exception { [EOL]     try { [EOL]         MAPPER.readValue("{ }", ConflictBean.class); [EOL]     } catch (Exception e) { [EOL]         verifyException(e, "Conflicting setter definitions"); [EOL]     } [EOL] }
public void testSetterConflict() throws Exception { [EOL]     try { [EOL]         MAPPER.readValue("{ }", ConflictBean.class); [EOL]     } catch (Exception e) { [EOL]         verifyException(e, "Conflicting setter definitions"); [EOL]     } [EOL] }
public void testGettersWithoutSetters() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     GettersWithoutSetters bean = new GettersWithoutSetters(123); [EOL]     assertFalse(m.isEnabled(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)); [EOL]     assertEquals("{\"a\":3,\"b\":4,\"c\":5,\"d\":6}", m.writeValueAsString(bean)); [EOL]     m = new ObjectMapper(); [EOL]     m.enable(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS); [EOL]     assertEquals("{\"a\":3,\"c\":5,\"d\":6}", m.writeValueAsString(bean)); [EOL] }
public void testGettersWithoutSetters() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     GettersWithoutSetters bean = new GettersWithoutSetters(123); [EOL]     assertFalse(m.isEnabled(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)); [EOL]     assertEquals("{\"a\":3,\"b\":4,\"c\":5,\"d\":6}", m.writeValueAsString(bean)); [EOL]     m = new ObjectMapper(); [EOL]     m.enable(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS); [EOL]     assertEquals("{\"a\":3,\"c\":5,\"d\":6}", m.writeValueAsString(bean)); [EOL] }
public void testGettersWithoutSetters() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     GettersWithoutSetters bean = new GettersWithoutSetters(123); [EOL]     assertFalse(m.isEnabled(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)); [EOL]     assertEquals("{\"a\":3,\"b\":4,\"c\":5,\"d\":6}", m.writeValueAsString(bean)); [EOL]     m = new ObjectMapper(); [EOL]     m.enable(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS); [EOL]     assertEquals("{\"a\":3,\"c\":5,\"d\":6}", m.writeValueAsString(bean)); [EOL] }
public void testGettersWithoutSetters() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     GettersWithoutSetters bean = new GettersWithoutSetters(123); [EOL]     assertFalse(m.isEnabled(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)); [EOL]     assertEquals("{\"a\":3,\"b\":4,\"c\":5,\"d\":6}", m.writeValueAsString(bean)); [EOL]     m = new ObjectMapper(); [EOL]     m.enable(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS); [EOL]     assertEquals("{\"a\":3,\"c\":5,\"d\":6}", m.writeValueAsString(bean)); [EOL] }
public void testGettersWithoutSetters() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     GettersWithoutSetters bean = new GettersWithoutSetters(123); [EOL]     assertFalse(m.isEnabled(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)); [EOL]     assertEquals("{\"a\":3,\"b\":4,\"c\":5,\"d\":6}", m.writeValueAsString(bean)); [EOL]     m = new ObjectMapper(); [EOL]     m.enable(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS); [EOL]     assertEquals("{\"a\":3,\"c\":5,\"d\":6}", m.writeValueAsString(bean)); [EOL] }
public void testConstructorCreator() throws Exception { [EOL]     CreatorBean bean = MAPPER.readValue("{ \"a\" : \"xyz\", \"x\" : 12 }", CreatorBean.class); [EOL]     assertEquals(13, bean.x); [EOL]     assertEquals("ctor:xyz", bean.a); [EOL] }
public void testConstructorCreator() throws Exception { [EOL]     CreatorBean bean = MAPPER.readValue("{ \"a\" : \"xyz\", \"x\" : 12 }", CreatorBean.class); [EOL]     assertEquals(13, bean.x); [EOL]     assertEquals("ctor:xyz", bean.a); [EOL] }
public void testConstructorCreator() throws Exception { [EOL]     CreatorBean bean = MAPPER.readValue("{ \"a\" : \"xyz\", \"x\" : 12 }", CreatorBean.class); [EOL]     assertEquals(13, bean.x); [EOL]     assertEquals("ctor:xyz", bean.a); [EOL] }
public void testGettersWithoutSetters() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     GettersWithoutSetters bean = new GettersWithoutSetters(123); [EOL]     assertFalse(m.isEnabled(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)); [EOL]     assertEquals("{\"a\":3,\"b\":4,\"c\":5,\"d\":6}", m.writeValueAsString(bean)); [EOL]     m = new ObjectMapper(); [EOL]     m.enable(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS); [EOL]     assertEquals("{\"a\":3,\"c\":5,\"d\":6}", m.writeValueAsString(bean)); [EOL] }
public void testGettersWithoutSetters() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     GettersWithoutSetters bean = new GettersWithoutSetters(123); [EOL]     assertFalse(m.isEnabled(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)); [EOL]     assertEquals("{\"a\":3,\"b\":4,\"c\":5,\"d\":6}", m.writeValueAsString(bean)); [EOL]     m = new ObjectMapper(); [EOL]     m.enable(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS); [EOL]     assertEquals("{\"a\":3,\"c\":5,\"d\":6}", m.writeValueAsString(bean)); [EOL] }
public void testGettersWithoutSetters() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     GettersWithoutSetters bean = new GettersWithoutSetters(123); [EOL]     assertFalse(m.isEnabled(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)); [EOL]     assertEquals("{\"a\":3,\"b\":4,\"c\":5,\"d\":6}", m.writeValueAsString(bean)); [EOL]     m = new ObjectMapper(); [EOL]     m.enable(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS); [EOL]     assertEquals("{\"a\":3,\"c\":5,\"d\":6}", m.writeValueAsString(bean)); [EOL] }
public void testGettersWithoutSetters() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     GettersWithoutSetters bean = new GettersWithoutSetters(123); [EOL]     assertFalse(m.isEnabled(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)); [EOL]     assertEquals("{\"a\":3,\"b\":4,\"c\":5,\"d\":6}", m.writeValueAsString(bean)); [EOL]     m = new ObjectMapper(); [EOL]     m.enable(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS); [EOL]     assertEquals("{\"a\":3,\"c\":5,\"d\":6}", m.writeValueAsString(bean)); [EOL] }
public void testGettersWithoutSetters() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     GettersWithoutSetters bean = new GettersWithoutSetters(123); [EOL]     assertFalse(m.isEnabled(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)); [EOL]     assertEquals("{\"a\":3,\"b\":4,\"c\":5,\"d\":6}", m.writeValueAsString(bean)); [EOL]     m = new ObjectMapper(); [EOL]     m.enable(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS); [EOL]     assertEquals("{\"a\":3,\"c\":5,\"d\":6}", m.writeValueAsString(bean)); [EOL] }
public void testConstructorCreator() throws Exception { [EOL]     CreatorBean bean = MAPPER.readValue("{ \"a\" : \"xyz\", \"x\" : 12 }", CreatorBean.class); [EOL]     assertEquals(13, bean.x); [EOL]     assertEquals("ctor:xyz", bean.a); [EOL] }
public void testConstructorCreator() throws Exception { [EOL]     CreatorBean bean = MAPPER.readValue("{ \"a\" : \"xyz\", \"x\" : 12 }", CreatorBean.class); [EOL]     assertEquals(13, bean.x); [EOL]     assertEquals("ctor:xyz", bean.a); [EOL] }
public void testConstructorCreator() throws Exception { [EOL]     CreatorBean bean = MAPPER.readValue("{ \"a\" : \"xyz\", \"x\" : 12 }", CreatorBean.class); [EOL]     assertEquals(13, bean.x); [EOL]     assertEquals("ctor:xyz", bean.a); [EOL] }
public void testConstructorCreator() throws Exception { [EOL]     CreatorBean bean = MAPPER.readValue("{ \"a\" : \"xyz\", \"x\" : 12 }", CreatorBean.class); [EOL]     assertEquals(13, bean.x); [EOL]     assertEquals("ctor:xyz", bean.a); [EOL] }
public void testConstructorCreator() throws Exception { [EOL]     CreatorBean bean = MAPPER.readValue("{ \"a\" : \"xyz\", \"x\" : 12 }", CreatorBean.class); [EOL]     assertEquals(13, bean.x); [EOL]     assertEquals("ctor:xyz", bean.a); [EOL] }
public void testDouble() { [EOL]     DoubleNode n = DoubleNode.valueOf(0.25); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_FLOAT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.DOUBLE, n.numberType()); [EOL]     assertEquals(0, n.intValue()); [EOL]     assertEquals(0.25, n.doubleValue()); [EOL]     assertNotNull(n.decimalValue()); [EOL]     assertEquals(BigInteger.ZERO, n.bigIntegerValue()); [EOL]     assertEquals("0.25", n.asText()); [EOL]     assertNodeNumbers(DoubleNode.valueOf(4.5), 4, 4.5); [EOL]     assertTrue(DoubleNode.valueOf(0).canConvertToInt()); [EOL]     assertTrue(DoubleNode.valueOf(Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(DoubleNode.valueOf(Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertFalse(DoubleNode.valueOf(1L + Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertFalse(DoubleNode.valueOf(-1L + Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(DoubleNode.valueOf(0L).canConvertToLong()); [EOL]     assertTrue(DoubleNode.valueOf(Long.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(DoubleNode.valueOf(Long.MIN_VALUE).canConvertToLong()); [EOL] }
public void testDouble() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     double value = 3.04; [EOL]     JsonNode result = mapper.readTree(String.valueOf(value)); [EOL]     assertTrue(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertType(result, DoubleNode.class); [EOL]     assertTrue(result.isFloatingPointNumber()); [EOL]     assertTrue(result.isDouble()); [EOL]     assertFalse(result.isInt()); [EOL]     assertFalse(result.isLong()); [EOL]     assertFalse(result.isIntegralNumber()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.doubleValue()); [EOL]     assertEquals(value, result.numberValue().doubleValue()); [EOL]     assertEquals((int) value, result.intValue()); [EOL]     assertEquals((long) value, result.longValue()); [EOL]     assertEquals(String.valueOf(value), result.asText()); [EOL]     assertEquals(result, DoubleNode.valueOf(value)); [EOL] }
public void testDouble() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     double value = 3.04; [EOL]     JsonNode result = mapper.readTree(String.valueOf(value)); [EOL]     assertTrue(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertType(result, DoubleNode.class); [EOL]     assertTrue(result.isFloatingPointNumber()); [EOL]     assertTrue(result.isDouble()); [EOL]     assertFalse(result.isInt()); [EOL]     assertFalse(result.isLong()); [EOL]     assertFalse(result.isIntegralNumber()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.doubleValue()); [EOL]     assertEquals(value, result.numberValue().doubleValue()); [EOL]     assertEquals((int) value, result.intValue()); [EOL]     assertEquals((long) value, result.longValue()); [EOL]     assertEquals(String.valueOf(value), result.asText()); [EOL]     assertEquals(result, DoubleNode.valueOf(value)); [EOL] }
public void testDouble() { [EOL]     DoubleNode n = DoubleNode.valueOf(0.25); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_FLOAT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.DOUBLE, n.numberType()); [EOL]     assertEquals(0, n.intValue()); [EOL]     assertEquals(0.25, n.doubleValue()); [EOL]     assertNotNull(n.decimalValue()); [EOL]     assertEquals(BigInteger.ZERO, n.bigIntegerValue()); [EOL]     assertEquals("0.25", n.asText()); [EOL]     assertNodeNumbers(DoubleNode.valueOf(4.5), 4, 4.5); [EOL]     assertTrue(DoubleNode.valueOf(0).canConvertToInt()); [EOL]     assertTrue(DoubleNode.valueOf(Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(DoubleNode.valueOf(Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertFalse(DoubleNode.valueOf(1L + Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertFalse(DoubleNode.valueOf(-1L + Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(DoubleNode.valueOf(0L).canConvertToLong()); [EOL]     assertTrue(DoubleNode.valueOf(Long.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(DoubleNode.valueOf(Long.MIN_VALUE).canConvertToLong()); [EOL] }
public void testDouble() { [EOL]     DoubleNode n = DoubleNode.valueOf(0.25); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_FLOAT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.DOUBLE, n.numberType()); [EOL]     assertEquals(0, n.intValue()); [EOL]     assertEquals(0.25, n.doubleValue()); [EOL]     assertNotNull(n.decimalValue()); [EOL]     assertEquals(BigInteger.ZERO, n.bigIntegerValue()); [EOL]     assertEquals("0.25", n.asText()); [EOL]     assertNodeNumbers(DoubleNode.valueOf(4.5), 4, 4.5); [EOL]     assertTrue(DoubleNode.valueOf(0).canConvertToInt()); [EOL]     assertTrue(DoubleNode.valueOf(Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(DoubleNode.valueOf(Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertFalse(DoubleNode.valueOf(1L + Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertFalse(DoubleNode.valueOf(-1L + Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(DoubleNode.valueOf(0L).canConvertToLong()); [EOL]     assertTrue(DoubleNode.valueOf(Long.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(DoubleNode.valueOf(Long.MIN_VALUE).canConvertToLong()); [EOL] }
public void testDouble() { [EOL]     DoubleNode n = DoubleNode.valueOf(0.25); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_FLOAT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.DOUBLE, n.numberType()); [EOL]     assertEquals(0, n.intValue()); [EOL]     assertEquals(0.25, n.doubleValue()); [EOL]     assertNotNull(n.decimalValue()); [EOL]     assertEquals(BigInteger.ZERO, n.bigIntegerValue()); [EOL]     assertEquals("0.25", n.asText()); [EOL]     assertNodeNumbers(DoubleNode.valueOf(4.5), 4, 4.5); [EOL]     assertTrue(DoubleNode.valueOf(0).canConvertToInt()); [EOL]     assertTrue(DoubleNode.valueOf(Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(DoubleNode.valueOf(Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertFalse(DoubleNode.valueOf(1L + Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertFalse(DoubleNode.valueOf(-1L + Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(DoubleNode.valueOf(0L).canConvertToLong()); [EOL]     assertTrue(DoubleNode.valueOf(Long.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(DoubleNode.valueOf(Long.MIN_VALUE).canConvertToLong()); [EOL] }
public void testDouble() { [EOL]     DoubleNode n = DoubleNode.valueOf(0.25); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_FLOAT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.DOUBLE, n.numberType()); [EOL]     assertEquals(0, n.intValue()); [EOL]     assertEquals(0.25, n.doubleValue()); [EOL]     assertNotNull(n.decimalValue()); [EOL]     assertEquals(BigInteger.ZERO, n.bigIntegerValue()); [EOL]     assertEquals("0.25", n.asText()); [EOL]     assertNodeNumbers(DoubleNode.valueOf(4.5), 4, 4.5); [EOL]     assertTrue(DoubleNode.valueOf(0).canConvertToInt()); [EOL]     assertTrue(DoubleNode.valueOf(Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(DoubleNode.valueOf(Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertFalse(DoubleNode.valueOf(1L + Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertFalse(DoubleNode.valueOf(-1L + Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(DoubleNode.valueOf(0L).canConvertToLong()); [EOL]     assertTrue(DoubleNode.valueOf(Long.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(DoubleNode.valueOf(Long.MIN_VALUE).canConvertToLong()); [EOL] }
public void testDouble() { [EOL]     DoubleNode n = DoubleNode.valueOf(0.25); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_FLOAT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.DOUBLE, n.numberType()); [EOL]     assertEquals(0, n.intValue()); [EOL]     assertEquals(0.25, n.doubleValue()); [EOL]     assertNotNull(n.decimalValue()); [EOL]     assertEquals(BigInteger.ZERO, n.bigIntegerValue()); [EOL]     assertEquals("0.25", n.asText()); [EOL]     assertNodeNumbers(DoubleNode.valueOf(4.5), 4, 4.5); [EOL]     assertTrue(DoubleNode.valueOf(0).canConvertToInt()); [EOL]     assertTrue(DoubleNode.valueOf(Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(DoubleNode.valueOf(Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertFalse(DoubleNode.valueOf(1L + Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertFalse(DoubleNode.valueOf(-1L + Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(DoubleNode.valueOf(0L).canConvertToLong()); [EOL]     assertTrue(DoubleNode.valueOf(Long.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(DoubleNode.valueOf(Long.MIN_VALUE).canConvertToLong()); [EOL] }
public void testDouble() { [EOL]     DoubleNode n = DoubleNode.valueOf(0.25); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_FLOAT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.DOUBLE, n.numberType()); [EOL]     assertEquals(0, n.intValue()); [EOL]     assertEquals(0.25, n.doubleValue()); [EOL]     assertNotNull(n.decimalValue()); [EOL]     assertEquals(BigInteger.ZERO, n.bigIntegerValue()); [EOL]     assertEquals("0.25", n.asText()); [EOL]     assertNodeNumbers(DoubleNode.valueOf(4.5), 4, 4.5); [EOL]     assertTrue(DoubleNode.valueOf(0).canConvertToInt()); [EOL]     assertTrue(DoubleNode.valueOf(Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(DoubleNode.valueOf(Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertFalse(DoubleNode.valueOf(1L + Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertFalse(DoubleNode.valueOf(-1L + Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(DoubleNode.valueOf(0L).canConvertToLong()); [EOL]     assertTrue(DoubleNode.valueOf(Long.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(DoubleNode.valueOf(Long.MIN_VALUE).canConvertToLong()); [EOL] }
public void testDouble() { [EOL]     DoubleNode n = DoubleNode.valueOf(0.25); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_FLOAT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.DOUBLE, n.numberType()); [EOL]     assertEquals(0, n.intValue()); [EOL]     assertEquals(0.25, n.doubleValue()); [EOL]     assertNotNull(n.decimalValue()); [EOL]     assertEquals(BigInteger.ZERO, n.bigIntegerValue()); [EOL]     assertEquals("0.25", n.asText()); [EOL]     assertNodeNumbers(DoubleNode.valueOf(4.5), 4, 4.5); [EOL]     assertTrue(DoubleNode.valueOf(0).canConvertToInt()); [EOL]     assertTrue(DoubleNode.valueOf(Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(DoubleNode.valueOf(Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertFalse(DoubleNode.valueOf(1L + Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertFalse(DoubleNode.valueOf(-1L + Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(DoubleNode.valueOf(0L).canConvertToLong()); [EOL]     assertTrue(DoubleNode.valueOf(Long.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(DoubleNode.valueOf(Long.MIN_VALUE).canConvertToLong()); [EOL] }
public void testDouble() { [EOL]     DoubleNode n = DoubleNode.valueOf(0.25); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_FLOAT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.DOUBLE, n.numberType()); [EOL]     assertEquals(0, n.intValue()); [EOL]     assertEquals(0.25, n.doubleValue()); [EOL]     assertNotNull(n.decimalValue()); [EOL]     assertEquals(BigInteger.ZERO, n.bigIntegerValue()); [EOL]     assertEquals("0.25", n.asText()); [EOL]     assertNodeNumbers(DoubleNode.valueOf(4.5), 4, 4.5); [EOL]     assertTrue(DoubleNode.valueOf(0).canConvertToInt()); [EOL]     assertTrue(DoubleNode.valueOf(Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(DoubleNode.valueOf(Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertFalse(DoubleNode.valueOf(1L + Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertFalse(DoubleNode.valueOf(-1L + Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(DoubleNode.valueOf(0L).canConvertToLong()); [EOL]     assertTrue(DoubleNode.valueOf(Long.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(DoubleNode.valueOf(Long.MIN_VALUE).canConvertToLong()); [EOL] }
public void testDouble() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     double value = 3.04; [EOL]     JsonNode result = mapper.readTree(String.valueOf(value)); [EOL]     assertTrue(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertType(result, DoubleNode.class); [EOL]     assertTrue(result.isFloatingPointNumber()); [EOL]     assertTrue(result.isDouble()); [EOL]     assertFalse(result.isInt()); [EOL]     assertFalse(result.isLong()); [EOL]     assertFalse(result.isIntegralNumber()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.doubleValue()); [EOL]     assertEquals(value, result.numberValue().doubleValue()); [EOL]     assertEquals((int) value, result.intValue()); [EOL]     assertEquals((long) value, result.longValue()); [EOL]     assertEquals(String.valueOf(value), result.asText()); [EOL]     assertEquals(result, DoubleNode.valueOf(value)); [EOL] }
public void testDouble() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     double value = 3.04; [EOL]     JsonNode result = mapper.readTree(String.valueOf(value)); [EOL]     assertTrue(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertType(result, DoubleNode.class); [EOL]     assertTrue(result.isFloatingPointNumber()); [EOL]     assertTrue(result.isDouble()); [EOL]     assertFalse(result.isInt()); [EOL]     assertFalse(result.isLong()); [EOL]     assertFalse(result.isIntegralNumber()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.doubleValue()); [EOL]     assertEquals(value, result.numberValue().doubleValue()); [EOL]     assertEquals((int) value, result.intValue()); [EOL]     assertEquals((long) value, result.longValue()); [EOL]     assertEquals(String.valueOf(value), result.asText()); [EOL]     assertEquals(result, DoubleNode.valueOf(value)); [EOL] }
public void testDouble() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     double value = 3.04; [EOL]     JsonNode result = mapper.readTree(String.valueOf(value)); [EOL]     assertTrue(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertType(result, DoubleNode.class); [EOL]     assertTrue(result.isFloatingPointNumber()); [EOL]     assertTrue(result.isDouble()); [EOL]     assertFalse(result.isInt()); [EOL]     assertFalse(result.isLong()); [EOL]     assertFalse(result.isIntegralNumber()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.doubleValue()); [EOL]     assertEquals(value, result.numberValue().doubleValue()); [EOL]     assertEquals((int) value, result.intValue()); [EOL]     assertEquals((long) value, result.longValue()); [EOL]     assertEquals(String.valueOf(value), result.asText()); [EOL]     assertEquals(result, DoubleNode.valueOf(value)); [EOL] }
public void testDouble() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     double value = 3.04; [EOL]     JsonNode result = mapper.readTree(String.valueOf(value)); [EOL]     assertTrue(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertType(result, DoubleNode.class); [EOL]     assertTrue(result.isFloatingPointNumber()); [EOL]     assertTrue(result.isDouble()); [EOL]     assertFalse(result.isInt()); [EOL]     assertFalse(result.isLong()); [EOL]     assertFalse(result.isIntegralNumber()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.doubleValue()); [EOL]     assertEquals(value, result.numberValue().doubleValue()); [EOL]     assertEquals((int) value, result.intValue()); [EOL]     assertEquals((long) value, result.longValue()); [EOL]     assertEquals(String.valueOf(value), result.asText()); [EOL]     assertEquals(result, DoubleNode.valueOf(value)); [EOL] }
public void testDouble() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     double value = 3.04; [EOL]     JsonNode result = mapper.readTree(String.valueOf(value)); [EOL]     assertTrue(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertType(result, DoubleNode.class); [EOL]     assertTrue(result.isFloatingPointNumber()); [EOL]     assertTrue(result.isDouble()); [EOL]     assertFalse(result.isInt()); [EOL]     assertFalse(result.isLong()); [EOL]     assertFalse(result.isIntegralNumber()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.doubleValue()); [EOL]     assertEquals(value, result.numberValue().doubleValue()); [EOL]     assertEquals((int) value, result.intValue()); [EOL]     assertEquals((long) value, result.longValue()); [EOL]     assertEquals(String.valueOf(value), result.asText()); [EOL]     assertEquals(result, DoubleNode.valueOf(value)); [EOL] }
public void testDouble() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     double value = 3.04; [EOL]     JsonNode result = mapper.readTree(String.valueOf(value)); [EOL]     assertTrue(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertType(result, DoubleNode.class); [EOL]     assertTrue(result.isFloatingPointNumber()); [EOL]     assertTrue(result.isDouble()); [EOL]     assertFalse(result.isInt()); [EOL]     assertFalse(result.isLong()); [EOL]     assertFalse(result.isIntegralNumber()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.doubleValue()); [EOL]     assertEquals(value, result.numberValue().doubleValue()); [EOL]     assertEquals((int) value, result.intValue()); [EOL]     assertEquals((long) value, result.longValue()); [EOL]     assertEquals(String.valueOf(value), result.asText()); [EOL]     assertEquals(result, DoubleNode.valueOf(value)); [EOL] }
public void testDouble() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     double value = 3.04; [EOL]     JsonNode result = mapper.readTree(String.valueOf(value)); [EOL]     assertTrue(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertType(result, DoubleNode.class); [EOL]     assertTrue(result.isFloatingPointNumber()); [EOL]     assertTrue(result.isDouble()); [EOL]     assertFalse(result.isInt()); [EOL]     assertFalse(result.isLong()); [EOL]     assertFalse(result.isIntegralNumber()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.doubleValue()); [EOL]     assertEquals(value, result.numberValue().doubleValue()); [EOL]     assertEquals((int) value, result.intValue()); [EOL]     assertEquals((long) value, result.longValue()); [EOL]     assertEquals(String.valueOf(value), result.asText()); [EOL]     assertEquals(result, DoubleNode.valueOf(value)); [EOL] }
public void testDouble() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     double value = 3.04; [EOL]     JsonNode result = mapper.readTree(String.valueOf(value)); [EOL]     assertTrue(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertType(result, DoubleNode.class); [EOL]     assertTrue(result.isFloatingPointNumber()); [EOL]     assertTrue(result.isDouble()); [EOL]     assertFalse(result.isInt()); [EOL]     assertFalse(result.isLong()); [EOL]     assertFalse(result.isIntegralNumber()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.doubleValue()); [EOL]     assertEquals(value, result.numberValue().doubleValue()); [EOL]     assertEquals((int) value, result.intValue()); [EOL]     assertEquals((long) value, result.longValue()); [EOL]     assertEquals(String.valueOf(value), result.asText()); [EOL]     assertEquals(result, DoubleNode.valueOf(value)); [EOL] }
public void testDouble() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     double value = 3.04; [EOL]     JsonNode result = mapper.readTree(String.valueOf(value)); [EOL]     assertTrue(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertType(result, DoubleNode.class); [EOL]     assertTrue(result.isFloatingPointNumber()); [EOL]     assertTrue(result.isDouble()); [EOL]     assertFalse(result.isInt()); [EOL]     assertFalse(result.isLong()); [EOL]     assertFalse(result.isIntegralNumber()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.doubleValue()); [EOL]     assertEquals(value, result.numberValue().doubleValue()); [EOL]     assertEquals((int) value, result.intValue()); [EOL]     assertEquals((long) value, result.longValue()); [EOL]     assertEquals(String.valueOf(value), result.asText()); [EOL]     assertEquals(result, DoubleNode.valueOf(value)); [EOL] }
public void testDouble() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     double value = 3.04; [EOL]     JsonNode result = mapper.readTree(String.valueOf(value)); [EOL]     assertTrue(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertType(result, DoubleNode.class); [EOL]     assertTrue(result.isFloatingPointNumber()); [EOL]     assertTrue(result.isDouble()); [EOL]     assertFalse(result.isInt()); [EOL]     assertFalse(result.isLong()); [EOL]     assertFalse(result.isIntegralNumber()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.doubleValue()); [EOL]     assertEquals(value, result.numberValue().doubleValue()); [EOL]     assertEquals((int) value, result.intValue()); [EOL]     assertEquals((long) value, result.longValue()); [EOL]     assertEquals(String.valueOf(value), result.asText()); [EOL]     assertEquals(result, DoubleNode.valueOf(value)); [EOL] }
public void testDouble() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     double value = 3.04; [EOL]     JsonNode result = mapper.readTree(String.valueOf(value)); [EOL]     assertTrue(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertType(result, DoubleNode.class); [EOL]     assertTrue(result.isFloatingPointNumber()); [EOL]     assertTrue(result.isDouble()); [EOL]     assertFalse(result.isInt()); [EOL]     assertFalse(result.isLong()); [EOL]     assertFalse(result.isIntegralNumber()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.doubleValue()); [EOL]     assertEquals(value, result.numberValue().doubleValue()); [EOL]     assertEquals((int) value, result.intValue()); [EOL]     assertEquals((long) value, result.longValue()); [EOL]     assertEquals(String.valueOf(value), result.asText()); [EOL]     assertEquals(result, DoubleNode.valueOf(value)); [EOL] }
public void testDouble() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     double value = 3.04; [EOL]     JsonNode result = mapper.readTree(String.valueOf(value)); [EOL]     assertTrue(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertType(result, DoubleNode.class); [EOL]     assertTrue(result.isFloatingPointNumber()); [EOL]     assertTrue(result.isDouble()); [EOL]     assertFalse(result.isInt()); [EOL]     assertFalse(result.isLong()); [EOL]     assertFalse(result.isIntegralNumber()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.doubleValue()); [EOL]     assertEquals(value, result.numberValue().doubleValue()); [EOL]     assertEquals((int) value, result.intValue()); [EOL]     assertEquals((long) value, result.longValue()); [EOL]     assertEquals(String.valueOf(value), result.asText()); [EOL]     assertEquals(result, DoubleNode.valueOf(value)); [EOL] }
public void testDouble() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     double value = 3.04; [EOL]     JsonNode result = mapper.readTree(String.valueOf(value)); [EOL]     assertTrue(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertType(result, DoubleNode.class); [EOL]     assertTrue(result.isFloatingPointNumber()); [EOL]     assertTrue(result.isDouble()); [EOL]     assertFalse(result.isInt()); [EOL]     assertFalse(result.isLong()); [EOL]     assertFalse(result.isIntegralNumber()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.doubleValue()); [EOL]     assertEquals(value, result.numberValue().doubleValue()); [EOL]     assertEquals((int) value, result.intValue()); [EOL]     assertEquals((long) value, result.longValue()); [EOL]     assertEquals(String.valueOf(value), result.asText()); [EOL]     assertEquals(result, DoubleNode.valueOf(value)); [EOL] }
public void testDouble() { [EOL]     DoubleNode n = DoubleNode.valueOf(0.25); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_FLOAT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.DOUBLE, n.numberType()); [EOL]     assertEquals(0, n.intValue()); [EOL]     assertEquals(0.25, n.doubleValue()); [EOL]     assertNotNull(n.decimalValue()); [EOL]     assertEquals(BigInteger.ZERO, n.bigIntegerValue()); [EOL]     assertEquals("0.25", n.asText()); [EOL]     assertNodeNumbers(DoubleNode.valueOf(4.5), 4, 4.5); [EOL]     assertTrue(DoubleNode.valueOf(0).canConvertToInt()); [EOL]     assertTrue(DoubleNode.valueOf(Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(DoubleNode.valueOf(Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertFalse(DoubleNode.valueOf(1L + Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertFalse(DoubleNode.valueOf(-1L + Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(DoubleNode.valueOf(0L).canConvertToLong()); [EOL]     assertTrue(DoubleNode.valueOf(Long.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(DoubleNode.valueOf(Long.MIN_VALUE).canConvertToLong()); [EOL] }
public void testDouble() { [EOL]     DoubleNode n = DoubleNode.valueOf(0.25); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_FLOAT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.DOUBLE, n.numberType()); [EOL]     assertEquals(0, n.intValue()); [EOL]     assertEquals(0.25, n.doubleValue()); [EOL]     assertNotNull(n.decimalValue()); [EOL]     assertEquals(BigInteger.ZERO, n.bigIntegerValue()); [EOL]     assertEquals("0.25", n.asText()); [EOL]     assertNodeNumbers(DoubleNode.valueOf(4.5), 4, 4.5); [EOL]     assertTrue(DoubleNode.valueOf(0).canConvertToInt()); [EOL]     assertTrue(DoubleNode.valueOf(Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(DoubleNode.valueOf(Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertFalse(DoubleNode.valueOf(1L + Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertFalse(DoubleNode.valueOf(-1L + Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(DoubleNode.valueOf(0L).canConvertToLong()); [EOL]     assertTrue(DoubleNode.valueOf(Long.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(DoubleNode.valueOf(Long.MIN_VALUE).canConvertToLong()); [EOL] }
public void testDouble() { [EOL]     DoubleNode n = DoubleNode.valueOf(0.25); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_FLOAT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.DOUBLE, n.numberType()); [EOL]     assertEquals(0, n.intValue()); [EOL]     assertEquals(0.25, n.doubleValue()); [EOL]     assertNotNull(n.decimalValue()); [EOL]     assertEquals(BigInteger.ZERO, n.bigIntegerValue()); [EOL]     assertEquals("0.25", n.asText()); [EOL]     assertNodeNumbers(DoubleNode.valueOf(4.5), 4, 4.5); [EOL]     assertTrue(DoubleNode.valueOf(0).canConvertToInt()); [EOL]     assertTrue(DoubleNode.valueOf(Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(DoubleNode.valueOf(Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertFalse(DoubleNode.valueOf(1L + Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertFalse(DoubleNode.valueOf(-1L + Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(DoubleNode.valueOf(0L).canConvertToLong()); [EOL]     assertTrue(DoubleNode.valueOf(Long.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(DoubleNode.valueOf(Long.MIN_VALUE).canConvertToLong()); [EOL] }
public void testDouble() { [EOL]     DoubleNode n = DoubleNode.valueOf(0.25); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_FLOAT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.DOUBLE, n.numberType()); [EOL]     assertEquals(0, n.intValue()); [EOL]     assertEquals(0.25, n.doubleValue()); [EOL]     assertNotNull(n.decimalValue()); [EOL]     assertEquals(BigInteger.ZERO, n.bigIntegerValue()); [EOL]     assertEquals("0.25", n.asText()); [EOL]     assertNodeNumbers(DoubleNode.valueOf(4.5), 4, 4.5); [EOL]     assertTrue(DoubleNode.valueOf(0).canConvertToInt()); [EOL]     assertTrue(DoubleNode.valueOf(Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(DoubleNode.valueOf(Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertFalse(DoubleNode.valueOf(1L + Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertFalse(DoubleNode.valueOf(-1L + Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(DoubleNode.valueOf(0L).canConvertToLong()); [EOL]     assertTrue(DoubleNode.valueOf(Long.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(DoubleNode.valueOf(Long.MIN_VALUE).canConvertToLong()); [EOL] }
public void testDouble() { [EOL]     DoubleNode n = DoubleNode.valueOf(0.25); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_FLOAT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.DOUBLE, n.numberType()); [EOL]     assertEquals(0, n.intValue()); [EOL]     assertEquals(0.25, n.doubleValue()); [EOL]     assertNotNull(n.decimalValue()); [EOL]     assertEquals(BigInteger.ZERO, n.bigIntegerValue()); [EOL]     assertEquals("0.25", n.asText()); [EOL]     assertNodeNumbers(DoubleNode.valueOf(4.5), 4, 4.5); [EOL]     assertTrue(DoubleNode.valueOf(0).canConvertToInt()); [EOL]     assertTrue(DoubleNode.valueOf(Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(DoubleNode.valueOf(Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertFalse(DoubleNode.valueOf(1L + Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertFalse(DoubleNode.valueOf(-1L + Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(DoubleNode.valueOf(0L).canConvertToLong()); [EOL]     assertTrue(DoubleNode.valueOf(Long.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(DoubleNode.valueOf(Long.MIN_VALUE).canConvertToLong()); [EOL] }
public void testDouble() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     double value = 3.04; [EOL]     JsonNode result = mapper.readTree(String.valueOf(value)); [EOL]     assertTrue(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertType(result, DoubleNode.class); [EOL]     assertTrue(result.isFloatingPointNumber()); [EOL]     assertTrue(result.isDouble()); [EOL]     assertFalse(result.isInt()); [EOL]     assertFalse(result.isLong()); [EOL]     assertFalse(result.isIntegralNumber()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.doubleValue()); [EOL]     assertEquals(value, result.numberValue().doubleValue()); [EOL]     assertEquals((int) value, result.intValue()); [EOL]     assertEquals((long) value, result.longValue()); [EOL]     assertEquals(String.valueOf(value), result.asText()); [EOL]     assertEquals(result, DoubleNode.valueOf(value)); [EOL] }
public void testDouble() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     double value = 3.04; [EOL]     JsonNode result = mapper.readTree(String.valueOf(value)); [EOL]     assertTrue(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertType(result, DoubleNode.class); [EOL]     assertTrue(result.isFloatingPointNumber()); [EOL]     assertTrue(result.isDouble()); [EOL]     assertFalse(result.isInt()); [EOL]     assertFalse(result.isLong()); [EOL]     assertFalse(result.isIntegralNumber()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.doubleValue()); [EOL]     assertEquals(value, result.numberValue().doubleValue()); [EOL]     assertEquals((int) value, result.intValue()); [EOL]     assertEquals((long) value, result.longValue()); [EOL]     assertEquals(String.valueOf(value), result.asText()); [EOL]     assertEquals(result, DoubleNode.valueOf(value)); [EOL] }
public void testDouble() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     double value = 3.04; [EOL]     JsonNode result = mapper.readTree(String.valueOf(value)); [EOL]     assertTrue(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertType(result, DoubleNode.class); [EOL]     assertTrue(result.isFloatingPointNumber()); [EOL]     assertTrue(result.isDouble()); [EOL]     assertFalse(result.isInt()); [EOL]     assertFalse(result.isLong()); [EOL]     assertFalse(result.isIntegralNumber()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.doubleValue()); [EOL]     assertEquals(value, result.numberValue().doubleValue()); [EOL]     assertEquals((int) value, result.intValue()); [EOL]     assertEquals((long) value, result.longValue()); [EOL]     assertEquals(String.valueOf(value), result.asText()); [EOL]     assertEquals(result, DoubleNode.valueOf(value)); [EOL] }
public void testDouble() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     double value = 3.04; [EOL]     JsonNode result = mapper.readTree(String.valueOf(value)); [EOL]     assertTrue(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertType(result, DoubleNode.class); [EOL]     assertTrue(result.isFloatingPointNumber()); [EOL]     assertTrue(result.isDouble()); [EOL]     assertFalse(result.isInt()); [EOL]     assertFalse(result.isLong()); [EOL]     assertFalse(result.isIntegralNumber()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.doubleValue()); [EOL]     assertEquals(value, result.numberValue().doubleValue()); [EOL]     assertEquals((int) value, result.intValue()); [EOL]     assertEquals((long) value, result.longValue()); [EOL]     assertEquals(String.valueOf(value), result.asText()); [EOL]     assertEquals(result, DoubleNode.valueOf(value)); [EOL] }
public void testDouble() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     double value = 3.04; [EOL]     JsonNode result = mapper.readTree(String.valueOf(value)); [EOL]     assertTrue(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertType(result, DoubleNode.class); [EOL]     assertTrue(result.isFloatingPointNumber()); [EOL]     assertTrue(result.isDouble()); [EOL]     assertFalse(result.isInt()); [EOL]     assertFalse(result.isLong()); [EOL]     assertFalse(result.isIntegralNumber()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.doubleValue()); [EOL]     assertEquals(value, result.numberValue().doubleValue()); [EOL]     assertEquals((int) value, result.intValue()); [EOL]     assertEquals((long) value, result.longValue()); [EOL]     assertEquals(String.valueOf(value), result.asText()); [EOL]     assertEquals(result, DoubleNode.valueOf(value)); [EOL] }
public void testDouble() { [EOL]     DoubleNode n = DoubleNode.valueOf(0.25); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_FLOAT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.DOUBLE, n.numberType()); [EOL]     assertEquals(0, n.intValue()); [EOL]     assertEquals(0.25, n.doubleValue()); [EOL]     assertNotNull(n.decimalValue()); [EOL]     assertEquals(BigInteger.ZERO, n.bigIntegerValue()); [EOL]     assertEquals("0.25", n.asText()); [EOL]     assertNodeNumbers(DoubleNode.valueOf(4.5), 4, 4.5); [EOL]     assertTrue(DoubleNode.valueOf(0).canConvertToInt()); [EOL]     assertTrue(DoubleNode.valueOf(Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(DoubleNode.valueOf(Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertFalse(DoubleNode.valueOf(1L + Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertFalse(DoubleNode.valueOf(-1L + Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(DoubleNode.valueOf(0L).canConvertToLong()); [EOL]     assertTrue(DoubleNode.valueOf(Long.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(DoubleNode.valueOf(Long.MIN_VALUE).canConvertToLong()); [EOL] }
public void testDouble() { [EOL]     DoubleNode n = DoubleNode.valueOf(0.25); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_FLOAT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.DOUBLE, n.numberType()); [EOL]     assertEquals(0, n.intValue()); [EOL]     assertEquals(0.25, n.doubleValue()); [EOL]     assertNotNull(n.decimalValue()); [EOL]     assertEquals(BigInteger.ZERO, n.bigIntegerValue()); [EOL]     assertEquals("0.25", n.asText()); [EOL]     assertNodeNumbers(DoubleNode.valueOf(4.5), 4, 4.5); [EOL]     assertTrue(DoubleNode.valueOf(0).canConvertToInt()); [EOL]     assertTrue(DoubleNode.valueOf(Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(DoubleNode.valueOf(Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertFalse(DoubleNode.valueOf(1L + Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertFalse(DoubleNode.valueOf(-1L + Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(DoubleNode.valueOf(0L).canConvertToLong()); [EOL]     assertTrue(DoubleNode.valueOf(Long.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(DoubleNode.valueOf(Long.MIN_VALUE).canConvertToLong()); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testBinary() throws Exception { [EOL]     assertNull(BinaryNode.valueOf(null)); [EOL]     assertNull(BinaryNode.valueOf(null, 0, 0)); [EOL]     BinaryNode empty = BinaryNode.valueOf(new byte[1], 0, 0); [EOL]     assertSame(BinaryNode.EMPTY_BINARY_NODE, empty); [EOL]     assertStandardEquals(empty); [EOL]     byte[] data = new byte[3]; [EOL]     data[1] = (byte) 3; [EOL]     BinaryNode n = BinaryNode.valueOf(data, 1, 1); [EOL]     data[2] = (byte) 3; [EOL]     BinaryNode n2 = BinaryNode.valueOf(data, 2, 1); [EOL]     assertTrue(n.equals(n2)); [EOL]     assertEquals("\"Aw==\"", n.toString()); [EOL]     assertEquals("AAMD", new BinaryNode(data).asText()); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL] }
public void testBasicsWithNullNode() throws Exception { [EOL]     NullNode n = NullNode.instance; [EOL]     assertFalse(n.isContainerNode()); [EOL]     assertFalse(n.isBigDecimal()); [EOL]     assertFalse(n.isBigInteger()); [EOL]     assertFalse(n.isBinary()); [EOL]     assertFalse(n.isBoolean()); [EOL]     assertFalse(n.isPojo()); [EOL]     assertFalse(n.isMissingNode()); [EOL]     assertFalse(n.booleanValue()); [EOL]     assertNull(n.numberValue()); [EOL]     assertEquals(0, n.intValue()); [EOL]     assertEquals(0L, n.longValue()); [EOL]     assertEquals(BigDecimal.ZERO, n.decimalValue()); [EOL]     assertEquals(BigInteger.ZERO, n.bigIntegerValue()); [EOL]     assertEquals(0, n.size()); [EOL]     assertFalse(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     assertNotNull(n.path("xyz")); [EOL]     assertTrue(n.path("xyz").isMissingNode()); [EOL]     assertFalse(n.has("field")); [EOL]     assertFalse(n.has(3)); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL] }
public void testBasicsWithNullNode() throws Exception { [EOL]     NullNode n = NullNode.instance; [EOL]     assertFalse(n.isContainerNode()); [EOL]     assertFalse(n.isBigDecimal()); [EOL]     assertFalse(n.isBigInteger()); [EOL]     assertFalse(n.isBinary()); [EOL]     assertFalse(n.isBoolean()); [EOL]     assertFalse(n.isPojo()); [EOL]     assertFalse(n.isMissingNode()); [EOL]     assertFalse(n.booleanValue()); [EOL]     assertNull(n.numberValue()); [EOL]     assertEquals(0, n.intValue()); [EOL]     assertEquals(0L, n.longValue()); [EOL]     assertEquals(BigDecimal.ZERO, n.decimalValue()); [EOL]     assertEquals(BigInteger.ZERO, n.bigIntegerValue()); [EOL]     assertEquals(0, n.size()); [EOL]     assertFalse(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     assertNotNull(n.path("xyz")); [EOL]     assertTrue(n.path("xyz").isMissingNode()); [EOL]     assertFalse(n.has("field")); [EOL]     assertFalse(n.has(3)); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL] }
public void testBasicsWithNullNode() throws Exception { [EOL]     NullNode n = NullNode.instance; [EOL]     assertFalse(n.isContainerNode()); [EOL]     assertFalse(n.isBigDecimal()); [EOL]     assertFalse(n.isBigInteger()); [EOL]     assertFalse(n.isBinary()); [EOL]     assertFalse(n.isBoolean()); [EOL]     assertFalse(n.isPojo()); [EOL]     assertFalse(n.isMissingNode()); [EOL]     assertFalse(n.booleanValue()); [EOL]     assertNull(n.numberValue()); [EOL]     assertEquals(0, n.intValue()); [EOL]     assertEquals(0L, n.longValue()); [EOL]     assertEquals(BigDecimal.ZERO, n.decimalValue()); [EOL]     assertEquals(BigInteger.ZERO, n.bigIntegerValue()); [EOL]     assertEquals(0, n.size()); [EOL]     assertFalse(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     assertNotNull(n.path("xyz")); [EOL]     assertTrue(n.path("xyz").isMissingNode()); [EOL]     assertFalse(n.has("field")); [EOL]     assertFalse(n.has(3)); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL] }
public void testBasicsWithNullNode() throws Exception { [EOL]     NullNode n = NullNode.instance; [EOL]     assertFalse(n.isContainerNode()); [EOL]     assertFalse(n.isBigDecimal()); [EOL]     assertFalse(n.isBigInteger()); [EOL]     assertFalse(n.isBinary()); [EOL]     assertFalse(n.isBoolean()); [EOL]     assertFalse(n.isPojo()); [EOL]     assertFalse(n.isMissingNode()); [EOL]     assertFalse(n.booleanValue()); [EOL]     assertNull(n.numberValue()); [EOL]     assertEquals(0, n.intValue()); [EOL]     assertEquals(0L, n.longValue()); [EOL]     assertEquals(BigDecimal.ZERO, n.decimalValue()); [EOL]     assertEquals(BigInteger.ZERO, n.bigIntegerValue()); [EOL]     assertEquals(0, n.size()); [EOL]     assertFalse(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     assertNotNull(n.path("xyz")); [EOL]     assertTrue(n.path("xyz").isMissingNode()); [EOL]     assertFalse(n.has("field")); [EOL]     assertFalse(n.has(3)); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL] }
public void testBasicsWithNullNode() throws Exception { [EOL]     NullNode n = NullNode.instance; [EOL]     assertFalse(n.isContainerNode()); [EOL]     assertFalse(n.isBigDecimal()); [EOL]     assertFalse(n.isBigInteger()); [EOL]     assertFalse(n.isBinary()); [EOL]     assertFalse(n.isBoolean()); [EOL]     assertFalse(n.isPojo()); [EOL]     assertFalse(n.isMissingNode()); [EOL]     assertFalse(n.booleanValue()); [EOL]     assertNull(n.numberValue()); [EOL]     assertEquals(0, n.intValue()); [EOL]     assertEquals(0L, n.longValue()); [EOL]     assertEquals(BigDecimal.ZERO, n.decimalValue()); [EOL]     assertEquals(BigInteger.ZERO, n.bigIntegerValue()); [EOL]     assertEquals(0, n.size()); [EOL]     assertFalse(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     assertNotNull(n.path("xyz")); [EOL]     assertTrue(n.path("xyz").isMissingNode()); [EOL]     assertFalse(n.has("field")); [EOL]     assertFalse(n.has(3)); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL] }
public void testBinary() throws Exception { [EOL]     assertNull(BinaryNode.valueOf(null)); [EOL]     assertNull(BinaryNode.valueOf(null, 0, 0)); [EOL]     BinaryNode empty = BinaryNode.valueOf(new byte[1], 0, 0); [EOL]     assertSame(BinaryNode.EMPTY_BINARY_NODE, empty); [EOL]     assertStandardEquals(empty); [EOL]     byte[] data = new byte[3]; [EOL]     data[1] = (byte) 3; [EOL]     BinaryNode n = BinaryNode.valueOf(data, 1, 1); [EOL]     data[2] = (byte) 3; [EOL]     BinaryNode n2 = BinaryNode.valueOf(data, 2, 1); [EOL]     assertTrue(n.equals(n2)); [EOL]     assertEquals("\"Aw==\"", n.toString()); [EOL]     assertEquals("AAMD", new BinaryNode(data).asText()); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL] }
public void testBasicsWithNullNode() throws Exception { [EOL]     NullNode n = NullNode.instance; [EOL]     assertFalse(n.isContainerNode()); [EOL]     assertFalse(n.isBigDecimal()); [EOL]     assertFalse(n.isBigInteger()); [EOL]     assertFalse(n.isBinary()); [EOL]     assertFalse(n.isBoolean()); [EOL]     assertFalse(n.isPojo()); [EOL]     assertFalse(n.isMissingNode()); [EOL]     assertFalse(n.booleanValue()); [EOL]     assertNull(n.numberValue()); [EOL]     assertEquals(0, n.intValue()); [EOL]     assertEquals(0L, n.longValue()); [EOL]     assertEquals(BigDecimal.ZERO, n.decimalValue()); [EOL]     assertEquals(BigInteger.ZERO, n.bigIntegerValue()); [EOL]     assertEquals(0, n.size()); [EOL]     assertFalse(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     assertNotNull(n.path("xyz")); [EOL]     assertTrue(n.path("xyz").isMissingNode()); [EOL]     assertFalse(n.has("field")); [EOL]     assertFalse(n.has(3)); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL] }
public void testBasicsWithNullNode() throws Exception { [EOL]     NullNode n = NullNode.instance; [EOL]     assertFalse(n.isContainerNode()); [EOL]     assertFalse(n.isBigDecimal()); [EOL]     assertFalse(n.isBigInteger()); [EOL]     assertFalse(n.isBinary()); [EOL]     assertFalse(n.isBoolean()); [EOL]     assertFalse(n.isPojo()); [EOL]     assertFalse(n.isMissingNode()); [EOL]     assertFalse(n.booleanValue()); [EOL]     assertNull(n.numberValue()); [EOL]     assertEquals(0, n.intValue()); [EOL]     assertEquals(0L, n.longValue()); [EOL]     assertEquals(BigDecimal.ZERO, n.decimalValue()); [EOL]     assertEquals(BigInteger.ZERO, n.bigIntegerValue()); [EOL]     assertEquals(0, n.size()); [EOL]     assertFalse(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     assertNotNull(n.path("xyz")); [EOL]     assertTrue(n.path("xyz").isMissingNode()); [EOL]     assertFalse(n.has("field")); [EOL]     assertFalse(n.has(3)); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL] }
public void testBasicsWithNullNode() throws Exception { [EOL]     NullNode n = NullNode.instance; [EOL]     assertFalse(n.isContainerNode()); [EOL]     assertFalse(n.isBigDecimal()); [EOL]     assertFalse(n.isBigInteger()); [EOL]     assertFalse(n.isBinary()); [EOL]     assertFalse(n.isBoolean()); [EOL]     assertFalse(n.isPojo()); [EOL]     assertFalse(n.isMissingNode()); [EOL]     assertFalse(n.booleanValue()); [EOL]     assertNull(n.numberValue()); [EOL]     assertEquals(0, n.intValue()); [EOL]     assertEquals(0L, n.longValue()); [EOL]     assertEquals(BigDecimal.ZERO, n.decimalValue()); [EOL]     assertEquals(BigInteger.ZERO, n.bigIntegerValue()); [EOL]     assertEquals(0, n.size()); [EOL]     assertFalse(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     assertNotNull(n.path("xyz")); [EOL]     assertTrue(n.path("xyz").isMissingNode()); [EOL]     assertFalse(n.has("field")); [EOL]     assertFalse(n.has(3)); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL] }
public void testBasicsWithNullNode() throws Exception { [EOL]     NullNode n = NullNode.instance; [EOL]     assertFalse(n.isContainerNode()); [EOL]     assertFalse(n.isBigDecimal()); [EOL]     assertFalse(n.isBigInteger()); [EOL]     assertFalse(n.isBinary()); [EOL]     assertFalse(n.isBoolean()); [EOL]     assertFalse(n.isPojo()); [EOL]     assertFalse(n.isMissingNode()); [EOL]     assertFalse(n.booleanValue()); [EOL]     assertNull(n.numberValue()); [EOL]     assertEquals(0, n.intValue()); [EOL]     assertEquals(0L, n.longValue()); [EOL]     assertEquals(BigDecimal.ZERO, n.decimalValue()); [EOL]     assertEquals(BigInteger.ZERO, n.bigIntegerValue()); [EOL]     assertEquals(0, n.size()); [EOL]     assertFalse(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     assertNotNull(n.path("xyz")); [EOL]     assertTrue(n.path("xyz").isMissingNode()); [EOL]     assertFalse(n.has("field")); [EOL]     assertFalse(n.has(3)); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL] }
public void testBasicsWithNullNode() throws Exception { [EOL]     NullNode n = NullNode.instance; [EOL]     assertFalse(n.isContainerNode()); [EOL]     assertFalse(n.isBigDecimal()); [EOL]     assertFalse(n.isBigInteger()); [EOL]     assertFalse(n.isBinary()); [EOL]     assertFalse(n.isBoolean()); [EOL]     assertFalse(n.isPojo()); [EOL]     assertFalse(n.isMissingNode()); [EOL]     assertFalse(n.booleanValue()); [EOL]     assertNull(n.numberValue()); [EOL]     assertEquals(0, n.intValue()); [EOL]     assertEquals(0L, n.longValue()); [EOL]     assertEquals(BigDecimal.ZERO, n.decimalValue()); [EOL]     assertEquals(BigInteger.ZERO, n.bigIntegerValue()); [EOL]     assertEquals(0, n.size()); [EOL]     assertFalse(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     assertNotNull(n.path("xyz")); [EOL]     assertTrue(n.path("xyz").isMissingNode()); [EOL]     assertFalse(n.has("field")); [EOL]     assertFalse(n.has(3)); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL] }
public void testBasicsWithNullNode() throws Exception { [EOL]     NullNode n = NullNode.instance; [EOL]     assertFalse(n.isContainerNode()); [EOL]     assertFalse(n.isBigDecimal()); [EOL]     assertFalse(n.isBigInteger()); [EOL]     assertFalse(n.isBinary()); [EOL]     assertFalse(n.isBoolean()); [EOL]     assertFalse(n.isPojo()); [EOL]     assertFalse(n.isMissingNode()); [EOL]     assertFalse(n.booleanValue()); [EOL]     assertNull(n.numberValue()); [EOL]     assertEquals(0, n.intValue()); [EOL]     assertEquals(0L, n.longValue()); [EOL]     assertEquals(BigDecimal.ZERO, n.decimalValue()); [EOL]     assertEquals(BigInteger.ZERO, n.bigIntegerValue()); [EOL]     assertEquals(0, n.size()); [EOL]     assertFalse(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     assertNotNull(n.path("xyz")); [EOL]     assertTrue(n.path("xyz").isMissingNode()); [EOL]     assertFalse(n.has("field")); [EOL]     assertFalse(n.has(3)); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL] }
public void testBasicsWithNullNode() throws Exception { [EOL]     NullNode n = NullNode.instance; [EOL]     assertFalse(n.isContainerNode()); [EOL]     assertFalse(n.isBigDecimal()); [EOL]     assertFalse(n.isBigInteger()); [EOL]     assertFalse(n.isBinary()); [EOL]     assertFalse(n.isBoolean()); [EOL]     assertFalse(n.isPojo()); [EOL]     assertFalse(n.isMissingNode()); [EOL]     assertFalse(n.booleanValue()); [EOL]     assertNull(n.numberValue()); [EOL]     assertEquals(0, n.intValue()); [EOL]     assertEquals(0L, n.longValue()); [EOL]     assertEquals(BigDecimal.ZERO, n.decimalValue()); [EOL]     assertEquals(BigInteger.ZERO, n.bigIntegerValue()); [EOL]     assertEquals(0, n.size()); [EOL]     assertFalse(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     assertNotNull(n.path("xyz")); [EOL]     assertTrue(n.path("xyz").isMissingNode()); [EOL]     assertFalse(n.has("field")); [EOL]     assertFalse(n.has(3)); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL] }
public void testBinary() throws Exception { [EOL]     assertNull(BinaryNode.valueOf(null)); [EOL]     assertNull(BinaryNode.valueOf(null, 0, 0)); [EOL]     BinaryNode empty = BinaryNode.valueOf(new byte[1], 0, 0); [EOL]     assertSame(BinaryNode.EMPTY_BINARY_NODE, empty); [EOL]     assertStandardEquals(empty); [EOL]     byte[] data = new byte[3]; [EOL]     data[1] = (byte) 3; [EOL]     BinaryNode n = BinaryNode.valueOf(data, 1, 1); [EOL]     data[2] = (byte) 3; [EOL]     BinaryNode n2 = BinaryNode.valueOf(data, 2, 1); [EOL]     assertTrue(n.equals(n2)); [EOL]     assertEquals("\"Aw==\"", n.toString()); [EOL]     assertEquals("AAMD", new BinaryNode(data).asText()); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL] }
public void testBinary() throws Exception { [EOL]     assertNull(BinaryNode.valueOf(null)); [EOL]     assertNull(BinaryNode.valueOf(null, 0, 0)); [EOL]     BinaryNode empty = BinaryNode.valueOf(new byte[1], 0, 0); [EOL]     assertSame(BinaryNode.EMPTY_BINARY_NODE, empty); [EOL]     assertStandardEquals(empty); [EOL]     byte[] data = new byte[3]; [EOL]     data[1] = (byte) 3; [EOL]     BinaryNode n = BinaryNode.valueOf(data, 1, 1); [EOL]     data[2] = (byte) 3; [EOL]     BinaryNode n2 = BinaryNode.valueOf(data, 2, 1); [EOL]     assertTrue(n.equals(n2)); [EOL]     assertEquals("\"Aw==\"", n.toString()); [EOL]     assertEquals("AAMD", new BinaryNode(data).asText()); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL] }
public void testBinary() throws Exception { [EOL]     assertNull(BinaryNode.valueOf(null)); [EOL]     assertNull(BinaryNode.valueOf(null, 0, 0)); [EOL]     BinaryNode empty = BinaryNode.valueOf(new byte[1], 0, 0); [EOL]     assertSame(BinaryNode.EMPTY_BINARY_NODE, empty); [EOL]     assertStandardEquals(empty); [EOL]     byte[] data = new byte[3]; [EOL]     data[1] = (byte) 3; [EOL]     BinaryNode n = BinaryNode.valueOf(data, 1, 1); [EOL]     data[2] = (byte) 3; [EOL]     BinaryNode n2 = BinaryNode.valueOf(data, 2, 1); [EOL]     assertTrue(n.equals(n2)); [EOL]     assertEquals("\"Aw==\"", n.toString()); [EOL]     assertEquals("AAMD", new BinaryNode(data).asText()); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL] }
public void testBinary() throws Exception { [EOL]     assertNull(BinaryNode.valueOf(null)); [EOL]     assertNull(BinaryNode.valueOf(null, 0, 0)); [EOL]     BinaryNode empty = BinaryNode.valueOf(new byte[1], 0, 0); [EOL]     assertSame(BinaryNode.EMPTY_BINARY_NODE, empty); [EOL]     assertStandardEquals(empty); [EOL]     byte[] data = new byte[3]; [EOL]     data[1] = (byte) 3; [EOL]     BinaryNode n = BinaryNode.valueOf(data, 1, 1); [EOL]     data[2] = (byte) 3; [EOL]     BinaryNode n2 = BinaryNode.valueOf(data, 2, 1); [EOL]     assertTrue(n.equals(n2)); [EOL]     assertEquals("\"Aw==\"", n.toString()); [EOL]     assertEquals("AAMD", new BinaryNode(data).asText()); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL] }
public void testBinary() throws Exception { [EOL]     assertNull(BinaryNode.valueOf(null)); [EOL]     assertNull(BinaryNode.valueOf(null, 0, 0)); [EOL]     BinaryNode empty = BinaryNode.valueOf(new byte[1], 0, 0); [EOL]     assertSame(BinaryNode.EMPTY_BINARY_NODE, empty); [EOL]     assertStandardEquals(empty); [EOL]     byte[] data = new byte[3]; [EOL]     data[1] = (byte) 3; [EOL]     BinaryNode n = BinaryNode.valueOf(data, 1, 1); [EOL]     data[2] = (byte) 3; [EOL]     BinaryNode n2 = BinaryNode.valueOf(data, 2, 1); [EOL]     assertTrue(n.equals(n2)); [EOL]     assertEquals("\"Aw==\"", n.toString()); [EOL]     assertEquals("AAMD", new BinaryNode(data).asText()); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL] }
public void testBinary() throws Exception { [EOL]     assertNull(BinaryNode.valueOf(null)); [EOL]     assertNull(BinaryNode.valueOf(null, 0, 0)); [EOL]     BinaryNode empty = BinaryNode.valueOf(new byte[1], 0, 0); [EOL]     assertSame(BinaryNode.EMPTY_BINARY_NODE, empty); [EOL]     assertStandardEquals(empty); [EOL]     byte[] data = new byte[3]; [EOL]     data[1] = (byte) 3; [EOL]     BinaryNode n = BinaryNode.valueOf(data, 1, 1); [EOL]     data[2] = (byte) 3; [EOL]     BinaryNode n2 = BinaryNode.valueOf(data, 2, 1); [EOL]     assertTrue(n.equals(n2)); [EOL]     assertEquals("\"Aw==\"", n.toString()); [EOL]     assertEquals("AAMD", new BinaryNode(data).asText()); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL] }
public void testBasicsWithNullNode() throws Exception { [EOL]     NullNode n = NullNode.instance; [EOL]     assertFalse(n.isContainerNode()); [EOL]     assertFalse(n.isBigDecimal()); [EOL]     assertFalse(n.isBigInteger()); [EOL]     assertFalse(n.isBinary()); [EOL]     assertFalse(n.isBoolean()); [EOL]     assertFalse(n.isPojo()); [EOL]     assertFalse(n.isMissingNode()); [EOL]     assertFalse(n.booleanValue()); [EOL]     assertNull(n.numberValue()); [EOL]     assertEquals(0, n.intValue()); [EOL]     assertEquals(0L, n.longValue()); [EOL]     assertEquals(BigDecimal.ZERO, n.decimalValue()); [EOL]     assertEquals(BigInteger.ZERO, n.bigIntegerValue()); [EOL]     assertEquals(0, n.size()); [EOL]     assertFalse(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     assertNotNull(n.path("xyz")); [EOL]     assertTrue(n.path("xyz").isMissingNode()); [EOL]     assertFalse(n.has("field")); [EOL]     assertFalse(n.has(3)); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL] }
public void testMatchingMultiple() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     List<JsonNode> nodes = root.findValues("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertEquals(3, nodes.get(0).intValue()); [EOL]     assertEquals(42, nodes.get(1).intValue()); [EOL]     nodes = root.findParents("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertTrue(nodes.get(0).isObject()); [EOL]     assertTrue(nodes.get(1).isObject()); [EOL]     assertEquals(3, nodes.get(0).path("value").intValue()); [EOL]     assertEquals(42, nodes.get(1).path("value").intValue()); [EOL]     List<String> values = root.findValuesAsText("value"); [EOL]     assertEquals(2, values.size()); [EOL]     assertEquals("3", values.get(0)); [EOL]     assertEquals("42", values.get(1)); [EOL] }
public void testMatchingMultiple() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     List<JsonNode> nodes = root.findValues("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertEquals(3, nodes.get(0).intValue()); [EOL]     assertEquals(42, nodes.get(1).intValue()); [EOL]     nodes = root.findParents("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertTrue(nodes.get(0).isObject()); [EOL]     assertTrue(nodes.get(1).isObject()); [EOL]     assertEquals(3, nodes.get(0).path("value").intValue()); [EOL]     assertEquals(42, nodes.get(1).path("value").intValue()); [EOL]     List<String> values = root.findValuesAsText("value"); [EOL]     assertEquals(2, values.size()); [EOL]     assertEquals("3", values.get(0)); [EOL]     assertEquals("42", values.get(1)); [EOL] }
public void testMatchingMultiple() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     List<JsonNode> nodes = root.findValues("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertEquals(3, nodes.get(0).intValue()); [EOL]     assertEquals(42, nodes.get(1).intValue()); [EOL]     nodes = root.findParents("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertTrue(nodes.get(0).isObject()); [EOL]     assertTrue(nodes.get(1).isObject()); [EOL]     assertEquals(3, nodes.get(0).path("value").intValue()); [EOL]     assertEquals(42, nodes.get(1).path("value").intValue()); [EOL]     List<String> values = root.findValuesAsText("value"); [EOL]     assertEquals(2, values.size()); [EOL]     assertEquals("3", values.get(0)); [EOL]     assertEquals("42", values.get(1)); [EOL] }
public void testCanBeABeanType() { [EOL]     assertEquals("annotation", ClassUtil.canBeABeanType(java.lang.annotation.Retention.class)); [EOL]     assertEquals("array", ClassUtil.canBeABeanType(String[].class)); [EOL]     assertEquals("enum", ClassUtil.canBeABeanType(TestEnum.class)); [EOL]     assertEquals("primitive", ClassUtil.canBeABeanType(Integer.TYPE)); [EOL]     assertNull(ClassUtil.canBeABeanType(Integer.class)); [EOL]     assertEquals("non-static member class", ClassUtil.isLocalType(InnerNonStatic.class, false)); [EOL]     assertNull(ClassUtil.isLocalType(Integer.class, false)); [EOL] }
public void testCanBeABeanType() { [EOL]     assertEquals("annotation", ClassUtil.canBeABeanType(java.lang.annotation.Retention.class)); [EOL]     assertEquals("array", ClassUtil.canBeABeanType(String[].class)); [EOL]     assertEquals("enum", ClassUtil.canBeABeanType(TestEnum.class)); [EOL]     assertEquals("primitive", ClassUtil.canBeABeanType(Integer.TYPE)); [EOL]     assertNull(ClassUtil.canBeABeanType(Integer.class)); [EOL]     assertEquals("non-static member class", ClassUtil.isLocalType(InnerNonStatic.class, false)); [EOL]     assertNull(ClassUtil.isLocalType(Integer.class, false)); [EOL] }
public void testCanBeABeanType() { [EOL]     assertEquals("annotation", ClassUtil.canBeABeanType(java.lang.annotation.Retention.class)); [EOL]     assertEquals("array", ClassUtil.canBeABeanType(String[].class)); [EOL]     assertEquals("enum", ClassUtil.canBeABeanType(TestEnum.class)); [EOL]     assertEquals("primitive", ClassUtil.canBeABeanType(Integer.TYPE)); [EOL]     assertNull(ClassUtil.canBeABeanType(Integer.class)); [EOL]     assertEquals("non-static member class", ClassUtil.isLocalType(InnerNonStatic.class, false)); [EOL]     assertNull(ClassUtil.isLocalType(Integer.class, false)); [EOL] }
public void testCanBeABeanType() { [EOL]     assertEquals("annotation", ClassUtil.canBeABeanType(java.lang.annotation.Retention.class)); [EOL]     assertEquals("array", ClassUtil.canBeABeanType(String[].class)); [EOL]     assertEquals("enum", ClassUtil.canBeABeanType(TestEnum.class)); [EOL]     assertEquals("primitive", ClassUtil.canBeABeanType(Integer.TYPE)); [EOL]     assertNull(ClassUtil.canBeABeanType(Integer.class)); [EOL]     assertEquals("non-static member class", ClassUtil.isLocalType(InnerNonStatic.class, false)); [EOL]     assertNull(ClassUtil.isLocalType(Integer.class, false)); [EOL] }
public void testCanBeABeanType() { [EOL]     assertEquals("annotation", ClassUtil.canBeABeanType(java.lang.annotation.Retention.class)); [EOL]     assertEquals("array", ClassUtil.canBeABeanType(String[].class)); [EOL]     assertEquals("enum", ClassUtil.canBeABeanType(TestEnum.class)); [EOL]     assertEquals("primitive", ClassUtil.canBeABeanType(Integer.TYPE)); [EOL]     assertNull(ClassUtil.canBeABeanType(Integer.class)); [EOL]     assertEquals("non-static member class", ClassUtil.isLocalType(InnerNonStatic.class, false)); [EOL]     assertNull(ClassUtil.isLocalType(Integer.class, false)); [EOL] }
public void testCanBeABeanType() { [EOL]     assertEquals("annotation", ClassUtil.canBeABeanType(java.lang.annotation.Retention.class)); [EOL]     assertEquals("array", ClassUtil.canBeABeanType(String[].class)); [EOL]     assertEquals("enum", ClassUtil.canBeABeanType(TestEnum.class)); [EOL]     assertEquals("primitive", ClassUtil.canBeABeanType(Integer.TYPE)); [EOL]     assertNull(ClassUtil.canBeABeanType(Integer.class)); [EOL]     assertEquals("non-static member class", ClassUtil.isLocalType(InnerNonStatic.class, false)); [EOL]     assertNull(ClassUtil.isLocalType(Integer.class, false)); [EOL] }
public void testCanBeABeanType() { [EOL]     assertEquals("annotation", ClassUtil.canBeABeanType(java.lang.annotation.Retention.class)); [EOL]     assertEquals("array", ClassUtil.canBeABeanType(String[].class)); [EOL]     assertEquals("enum", ClassUtil.canBeABeanType(TestEnum.class)); [EOL]     assertEquals("primitive", ClassUtil.canBeABeanType(Integer.TYPE)); [EOL]     assertNull(ClassUtil.canBeABeanType(Integer.class)); [EOL]     assertEquals("non-static member class", ClassUtil.isLocalType(InnerNonStatic.class, false)); [EOL]     assertNull(ClassUtil.isLocalType(Integer.class, false)); [EOL] }
public void testCanBeABeanType() { [EOL]     assertEquals("annotation", ClassUtil.canBeABeanType(java.lang.annotation.Retention.class)); [EOL]     assertEquals("array", ClassUtil.canBeABeanType(String[].class)); [EOL]     assertEquals("enum", ClassUtil.canBeABeanType(TestEnum.class)); [EOL]     assertEquals("primitive", ClassUtil.canBeABeanType(Integer.TYPE)); [EOL]     assertNull(ClassUtil.canBeABeanType(Integer.class)); [EOL]     assertEquals("non-static member class", ClassUtil.isLocalType(InnerNonStatic.class, false)); [EOL]     assertNull(ClassUtil.isLocalType(Integer.class, false)); [EOL] }
public void testCanBeABeanType() { [EOL]     assertEquals("annotation", ClassUtil.canBeABeanType(java.lang.annotation.Retention.class)); [EOL]     assertEquals("array", ClassUtil.canBeABeanType(String[].class)); [EOL]     assertEquals("enum", ClassUtil.canBeABeanType(TestEnum.class)); [EOL]     assertEquals("primitive", ClassUtil.canBeABeanType(Integer.TYPE)); [EOL]     assertNull(ClassUtil.canBeABeanType(Integer.class)); [EOL]     assertEquals("non-static member class", ClassUtil.isLocalType(InnerNonStatic.class, false)); [EOL]     assertNull(ClassUtil.isLocalType(Integer.class, false)); [EOL] }
public void testCanBeABeanType() { [EOL]     assertEquals("annotation", ClassUtil.canBeABeanType(java.lang.annotation.Retention.class)); [EOL]     assertEquals("array", ClassUtil.canBeABeanType(String[].class)); [EOL]     assertEquals("enum", ClassUtil.canBeABeanType(TestEnum.class)); [EOL]     assertEquals("primitive", ClassUtil.canBeABeanType(Integer.TYPE)); [EOL]     assertNull(ClassUtil.canBeABeanType(Integer.class)); [EOL]     assertEquals("non-static member class", ClassUtil.isLocalType(InnerNonStatic.class, false)); [EOL]     assertNull(ClassUtil.isLocalType(Integer.class, false)); [EOL] }
public void testCanBeABeanType() { [EOL]     assertEquals("annotation", ClassUtil.canBeABeanType(java.lang.annotation.Retention.class)); [EOL]     assertEquals("array", ClassUtil.canBeABeanType(String[].class)); [EOL]     assertEquals("enum", ClassUtil.canBeABeanType(TestEnum.class)); [EOL]     assertEquals("primitive", ClassUtil.canBeABeanType(Integer.TYPE)); [EOL]     assertNull(ClassUtil.canBeABeanType(Integer.class)); [EOL]     assertEquals("non-static member class", ClassUtil.isLocalType(InnerNonStatic.class, false)); [EOL]     assertNull(ClassUtil.isLocalType(Integer.class, false)); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testIsConcrete() { [EOL]     assertTrue(ClassUtil.isConcrete(getClass())); [EOL]     assertFalse(ClassUtil.isConcrete(BaseClass.class)); [EOL]     assertFalse(ClassUtil.isConcrete(BaseInt.class)); [EOL] }
public void testIsConcrete() { [EOL]     assertTrue(ClassUtil.isConcrete(getClass())); [EOL]     assertFalse(ClassUtil.isConcrete(BaseClass.class)); [EOL]     assertFalse(ClassUtil.isConcrete(BaseInt.class)); [EOL] }
public void testIsConcrete() { [EOL]     assertTrue(ClassUtil.isConcrete(getClass())); [EOL]     assertFalse(ClassUtil.isConcrete(BaseClass.class)); [EOL]     assertFalse(ClassUtil.isConcrete(BaseInt.class)); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testEnumSet() throws Exception { [EOL]     EnumSet<Choice> set = EnumSet.of(Choice.NO); [EOL]     Object[] input = new Object[] { set }; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String json = m.writeValueAsString(input); [EOL]     Object[] output = m.readValue(json, Object[].class); [EOL]     assertEquals(1, output.length); [EOL]     Object ob = output[0]; [EOL]     assertTrue(ob instanceof EnumSet<?>); [EOL]     EnumSet<Choice> set2 = (EnumSet<Choice>) ob; [EOL]     assertEquals(1, set2.size()); [EOL]     assertTrue(set2.contains(Choice.NO)); [EOL]     assertFalse(set2.contains(Choice.YES)); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testEnumSet() throws Exception { [EOL]     EnumSet<Choice> set = EnumSet.of(Choice.NO); [EOL]     Object[] input = new Object[] { set }; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String json = m.writeValueAsString(input); [EOL]     Object[] output = m.readValue(json, Object[].class); [EOL]     assertEquals(1, output.length); [EOL]     Object ob = output[0]; [EOL]     assertTrue(ob instanceof EnumSet<?>); [EOL]     EnumSet<Choice> set2 = (EnumSet<Choice>) ob; [EOL]     assertEquals(1, set2.size()); [EOL]     assertTrue(set2.contains(Choice.NO)); [EOL]     assertFalse(set2.contains(Choice.YES)); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testEnumSet() throws Exception { [EOL]     EnumSet<Choice> set = EnumSet.of(Choice.NO); [EOL]     Object[] input = new Object[] { set }; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String json = m.writeValueAsString(input); [EOL]     Object[] output = m.readValue(json, Object[].class); [EOL]     assertEquals(1, output.length); [EOL]     Object ob = output[0]; [EOL]     assertTrue(ob instanceof EnumSet<?>); [EOL]     EnumSet<Choice> set2 = (EnumSet<Choice>) ob; [EOL]     assertEquals(1, set2.size()); [EOL]     assertTrue(set2.contains(Choice.NO)); [EOL]     assertFalse(set2.contains(Choice.YES)); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testEnumSet() throws Exception { [EOL]     EnumSet<Choice> set = EnumSet.of(Choice.NO); [EOL]     Object[] input = new Object[] { set }; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String json = m.writeValueAsString(input); [EOL]     Object[] output = m.readValue(json, Object[].class); [EOL]     assertEquals(1, output.length); [EOL]     Object ob = output[0]; [EOL]     assertTrue(ob instanceof EnumSet<?>); [EOL]     EnumSet<Choice> set2 = (EnumSet<Choice>) ob; [EOL]     assertEquals(1, set2.size()); [EOL]     assertTrue(set2.contains(Choice.NO)); [EOL]     assertFalse(set2.contains(Choice.YES)); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testEmptyCollection() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(SerializationFeature.INDENT_OUTPUT, true); [EOL]     List<User> friends = new ArrayList<User>(); [EOL]     friends.add(new DefaultUser("Joe Hildebrandt", null)); [EOL]     friends.add(new DefaultEmployee("Richard Nasr", null, "MDA")); [EOL]     User user = new DefaultEmployee("John Vanspronssen", friends, "MDA"); [EOL]     String json = mapper.writeValueAsString(user); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(DefaultEmployee.class); [EOL]     mapper.registerSubtypes(DefaultUser.class); [EOL]     User result = mapper.readValue(json, User.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(DefaultEmployee.class, result.getClass()); [EOL]     friends = result.getFriends(); [EOL]     assertEquals(2, friends.size()); [EOL]     assertEquals(DefaultUser.class, friends.get(0).getClass()); [EOL]     assertEquals(DefaultEmployee.class, friends.get(1).getClass()); [EOL] }
public void testEmptyCollection() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(SerializationFeature.INDENT_OUTPUT, true); [EOL]     List<User> friends = new ArrayList<User>(); [EOL]     friends.add(new DefaultUser("Joe Hildebrandt", null)); [EOL]     friends.add(new DefaultEmployee("Richard Nasr", null, "MDA")); [EOL]     User user = new DefaultEmployee("John Vanspronssen", friends, "MDA"); [EOL]     String json = mapper.writeValueAsString(user); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(DefaultEmployee.class); [EOL]     mapper.registerSubtypes(DefaultUser.class); [EOL]     User result = mapper.readValue(json, User.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(DefaultEmployee.class, result.getClass()); [EOL]     friends = result.getFriends(); [EOL]     assertEquals(2, friends.size()); [EOL]     assertEquals(DefaultUser.class, friends.get(0).getClass()); [EOL]     assertEquals(DefaultEmployee.class, friends.get(1).getClass()); [EOL] }
public void testEmptyCollection() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(SerializationFeature.INDENT_OUTPUT, true); [EOL]     List<User> friends = new ArrayList<User>(); [EOL]     friends.add(new DefaultUser("Joe Hildebrandt", null)); [EOL]     friends.add(new DefaultEmployee("Richard Nasr", null, "MDA")); [EOL]     User user = new DefaultEmployee("John Vanspronssen", friends, "MDA"); [EOL]     String json = mapper.writeValueAsString(user); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(DefaultEmployee.class); [EOL]     mapper.registerSubtypes(DefaultUser.class); [EOL]     User result = mapper.readValue(json, User.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(DefaultEmployee.class, result.getClass()); [EOL]     friends = result.getFriends(); [EOL]     assertEquals(2, friends.size()); [EOL]     assertEquals(DefaultUser.class, friends.get(0).getClass()); [EOL]     assertEquals(DefaultEmployee.class, friends.get(1).getClass()); [EOL] }
public void testEmptyCollection() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(SerializationFeature.INDENT_OUTPUT, true); [EOL]     List<User> friends = new ArrayList<User>(); [EOL]     friends.add(new DefaultUser("Joe Hildebrandt", null)); [EOL]     friends.add(new DefaultEmployee("Richard Nasr", null, "MDA")); [EOL]     User user = new DefaultEmployee("John Vanspronssen", friends, "MDA"); [EOL]     String json = mapper.writeValueAsString(user); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(DefaultEmployee.class); [EOL]     mapper.registerSubtypes(DefaultUser.class); [EOL]     User result = mapper.readValue(json, User.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(DefaultEmployee.class, result.getClass()); [EOL]     friends = result.getFriends(); [EOL]     assertEquals(2, friends.size()); [EOL]     assertEquals(DefaultUser.class, friends.get(0).getClass()); [EOL]     assertEquals(DefaultEmployee.class, friends.get(1).getClass()); [EOL] }
public void testEmptyCollection() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(SerializationFeature.INDENT_OUTPUT, true); [EOL]     List<User> friends = new ArrayList<User>(); [EOL]     friends.add(new DefaultUser("Joe Hildebrandt", null)); [EOL]     friends.add(new DefaultEmployee("Richard Nasr", null, "MDA")); [EOL]     User user = new DefaultEmployee("John Vanspronssen", friends, "MDA"); [EOL]     String json = mapper.writeValueAsString(user); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(DefaultEmployee.class); [EOL]     mapper.registerSubtypes(DefaultUser.class); [EOL]     User result = mapper.readValue(json, User.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(DefaultEmployee.class, result.getClass()); [EOL]     friends = result.getFriends(); [EOL]     assertEquals(2, friends.size()); [EOL]     assertEquals(DefaultUser.class, friends.get(0).getClass()); [EOL]     assertEquals(DefaultEmployee.class, friends.get(1).getClass()); [EOL] }
public void testEmptyCollection() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(SerializationFeature.INDENT_OUTPUT, true); [EOL]     List<User> friends = new ArrayList<User>(); [EOL]     friends.add(new DefaultUser("Joe Hildebrandt", null)); [EOL]     friends.add(new DefaultEmployee("Richard Nasr", null, "MDA")); [EOL]     User user = new DefaultEmployee("John Vanspronssen", friends, "MDA"); [EOL]     String json = mapper.writeValueAsString(user); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(DefaultEmployee.class); [EOL]     mapper.registerSubtypes(DefaultUser.class); [EOL]     User result = mapper.readValue(json, User.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(DefaultEmployee.class, result.getClass()); [EOL]     friends = result.getFriends(); [EOL]     assertEquals(2, friends.size()); [EOL]     assertEquals(DefaultUser.class, friends.get(0).getClass()); [EOL]     assertEquals(DefaultEmployee.class, friends.get(1).getClass()); [EOL] }
public void testEmptyCollection() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(SerializationFeature.INDENT_OUTPUT, true); [EOL]     List<User> friends = new ArrayList<User>(); [EOL]     friends.add(new DefaultUser("Joe Hildebrandt", null)); [EOL]     friends.add(new DefaultEmployee("Richard Nasr", null, "MDA")); [EOL]     User user = new DefaultEmployee("John Vanspronssen", friends, "MDA"); [EOL]     String json = mapper.writeValueAsString(user); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(DefaultEmployee.class); [EOL]     mapper.registerSubtypes(DefaultUser.class); [EOL]     User result = mapper.readValue(json, User.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(DefaultEmployee.class, result.getClass()); [EOL]     friends = result.getFriends(); [EOL]     assertEquals(2, friends.size()); [EOL]     assertEquals(DefaultUser.class, friends.get(0).getClass()); [EOL]     assertEquals(DefaultEmployee.class, friends.get(1).getClass()); [EOL] }
public void testEmptyCollection() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(SerializationFeature.INDENT_OUTPUT, true); [EOL]     List<User> friends = new ArrayList<User>(); [EOL]     friends.add(new DefaultUser("Joe Hildebrandt", null)); [EOL]     friends.add(new DefaultEmployee("Richard Nasr", null, "MDA")); [EOL]     User user = new DefaultEmployee("John Vanspronssen", friends, "MDA"); [EOL]     String json = mapper.writeValueAsString(user); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(DefaultEmployee.class); [EOL]     mapper.registerSubtypes(DefaultUser.class); [EOL]     User result = mapper.readValue(json, User.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(DefaultEmployee.class, result.getClass()); [EOL]     friends = result.getFriends(); [EOL]     assertEquals(2, friends.size()); [EOL]     assertEquals(DefaultUser.class, friends.get(0).getClass()); [EOL]     assertEquals(DefaultEmployee.class, friends.get(1).getClass()); [EOL] }
public void testEmptyCollection() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(SerializationFeature.INDENT_OUTPUT, true); [EOL]     List<User> friends = new ArrayList<User>(); [EOL]     friends.add(new DefaultUser("Joe Hildebrandt", null)); [EOL]     friends.add(new DefaultEmployee("Richard Nasr", null, "MDA")); [EOL]     User user = new DefaultEmployee("John Vanspronssen", friends, "MDA"); [EOL]     String json = mapper.writeValueAsString(user); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(DefaultEmployee.class); [EOL]     mapper.registerSubtypes(DefaultUser.class); [EOL]     User result = mapper.readValue(json, User.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(DefaultEmployee.class, result.getClass()); [EOL]     friends = result.getFriends(); [EOL]     assertEquals(2, friends.size()); [EOL]     assertEquals(DefaultUser.class, friends.get(0).getClass()); [EOL]     assertEquals(DefaultEmployee.class, friends.get(1).getClass()); [EOL] }
public void testEmptyCollection() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(SerializationFeature.INDENT_OUTPUT, true); [EOL]     List<User> friends = new ArrayList<User>(); [EOL]     friends.add(new DefaultUser("Joe Hildebrandt", null)); [EOL]     friends.add(new DefaultEmployee("Richard Nasr", null, "MDA")); [EOL]     User user = new DefaultEmployee("John Vanspronssen", friends, "MDA"); [EOL]     String json = mapper.writeValueAsString(user); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(DefaultEmployee.class); [EOL]     mapper.registerSubtypes(DefaultUser.class); [EOL]     User result = mapper.readValue(json, User.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(DefaultEmployee.class, result.getClass()); [EOL]     friends = result.getFriends(); [EOL]     assertEquals(2, friends.size()); [EOL]     assertEquals(DefaultUser.class, friends.get(0).getClass()); [EOL]     assertEquals(DefaultEmployee.class, friends.get(1).getClass()); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testEnumSet() throws Exception { [EOL]     EnumSet<Choice> set = EnumSet.of(Choice.NO); [EOL]     Object[] input = new Object[] { set }; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String json = m.writeValueAsString(input); [EOL]     Object[] output = m.readValue(json, Object[].class); [EOL]     assertEquals(1, output.length); [EOL]     Object ob = output[0]; [EOL]     assertTrue(ob instanceof EnumSet<?>); [EOL]     EnumSet<Choice> set2 = (EnumSet<Choice>) ob; [EOL]     assertEquals(1, set2.size()); [EOL]     assertTrue(set2.contains(Choice.NO)); [EOL]     assertFalse(set2.contains(Choice.YES)); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testEnumSet() throws Exception { [EOL]     EnumSet<Choice> set = EnumSet.of(Choice.NO); [EOL]     Object[] input = new Object[] { set }; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String json = m.writeValueAsString(input); [EOL]     Object[] output = m.readValue(json, Object[].class); [EOL]     assertEquals(1, output.length); [EOL]     Object ob = output[0]; [EOL]     assertTrue(ob instanceof EnumSet<?>); [EOL]     EnumSet<Choice> set2 = (EnumSet<Choice>) ob; [EOL]     assertEquals(1, set2.size()); [EOL]     assertTrue(set2.contains(Choice.NO)); [EOL]     assertFalse(set2.contains(Choice.YES)); [EOL] }
public void testGettersWithoutSettersOverride() throws Exception { [EOL]     GettersWithoutSetters2 bean = new GettersWithoutSetters2(); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enable(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS); [EOL]     assertEquals("{\"a\":123}", m.writeValueAsString(bean)); [EOL] }
public void testGettersWithoutSettersOverride() throws Exception { [EOL]     GettersWithoutSetters2 bean = new GettersWithoutSetters2(); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enable(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS); [EOL]     assertEquals("{\"a\":123}", m.writeValueAsString(bean)); [EOL] }
public void testMethodAnnotationInList() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(String.class, new AnnotatedContextualSerializer()); [EOL]     mapper.registerModule(module); [EOL]     ContextualListBean beans = new ContextualListBean("abc"); [EOL]     assertEquals("{\"beans\":[\"list->abc\"]}", mapper.writeValueAsString(beans)); [EOL] }
public void testMethodAnnotationInList() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(String.class, new AnnotatedContextualSerializer()); [EOL]     mapper.registerModule(module); [EOL]     ContextualListBean beans = new ContextualListBean("abc"); [EOL]     assertEquals("{\"beans\":[\"list->abc\"]}", mapper.writeValueAsString(beans)); [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testSimpleBeanSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule mod = new SimpleModule("test", Version.unknownVersion()); [EOL]     mod.addSerializer(new CustomBeanSerializer()); [EOL]     mapper.registerModule(mod); [EOL]     assertEquals(quote("abcde|5"), mapper.writeValueAsString(new CustomBean("abcde", 5))); [EOL] }
public void testSimpleBeanSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule mod = new SimpleModule("test", Version.unknownVersion()); [EOL]     mod.addSerializer(new CustomBeanSerializer()); [EOL]     mapper.registerModule(mod); [EOL]     assertEquals(quote("abcde|5"), mapper.writeValueAsString(new CustomBean("abcde", 5))); [EOL] }
public void testSimpleBeanSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule mod = new SimpleModule("test", Version.unknownVersion()); [EOL]     mod.addSerializer(new CustomBeanSerializer()); [EOL]     mapper.registerModule(mod); [EOL]     assertEquals(quote("abcde|5"), mapper.writeValueAsString(new CustomBean("abcde", 5))); [EOL] }
@SuppressWarnings({ "unchecked", "rawtypes" }) [EOL] public void testCustomLists() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     JsonSerializer<?> ser = new CollectionSerializer(null, false, null, null, null); [EOL]     final JsonSerializer<Object> collectionSerializer = (JsonSerializer<Object>) ser; [EOL]     module.addSerializer(Collection.class, new JsonSerializer<Collection>() { [EOL]  [EOL]         @Override [EOL]         public void serialize(Collection value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException { [EOL]             if (value.size() != 0) { [EOL]                 collectionSerializer.serialize(value, jgen, provider); [EOL]             } else { [EOL]                 jgen.writeNull(); [EOL]             } [EOL]         } [EOL]     }); [EOL]     mapper.registerModule(module); [EOL]     assertEquals("null", mapper.writeValueAsString(new ArrayList<Object>())); [EOL] }
@SuppressWarnings({ "unchecked", "rawtypes" }) [EOL] public void testCustomLists() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     JsonSerializer<?> ser = new CollectionSerializer(null, false, null, null, null); [EOL]     final JsonSerializer<Object> collectionSerializer = (JsonSerializer<Object>) ser; [EOL]     module.addSerializer(Collection.class, new JsonSerializer<Collection>() { [EOL]  [EOL]         @Override [EOL]         public void serialize(Collection value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException { [EOL]             if (value.size() != 0) { [EOL]                 collectionSerializer.serialize(value, jgen, provider); [EOL]             } else { [EOL]                 jgen.writeNull(); [EOL]             } [EOL]         } [EOL]     }); [EOL]     mapper.registerModule(module); [EOL]     assertEquals("null", mapper.writeValueAsString(new ArrayList<Object>())); [EOL] }
public void testDelegating() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(new StdDelegatingSerializer(Immutable.class, new StdConverter<Immutable, Map<String, Integer>>() { [EOL]  [EOL]         @Override [EOL]         public Map<String, Integer> convert(Immutable value) { [EOL]             HashMap<String, Integer> map = new LinkedHashMap<String, Integer>(); [EOL]             map.put("x", value.x()); [EOL]             map.put("y", value.y()); [EOL]             return map; [EOL]         } [EOL]     })); [EOL]     mapper.registerModule(module); [EOL]     assertEquals("{\"x\":3,\"y\":7}", mapper.writeValueAsString(new Immutable())); [EOL] }
public void testDelegating() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(new StdDelegatingSerializer(Immutable.class, new StdConverter<Immutable, Map<String, Integer>>() { [EOL]  [EOL]         @Override [EOL]         public Map<String, Integer> convert(Immutable value) { [EOL]             HashMap<String, Integer> map = new LinkedHashMap<String, Integer>(); [EOL]             map.put("x", value.x()); [EOL]             map.put("y", value.y()); [EOL]             return map; [EOL]         } [EOL]     })); [EOL]     mapper.registerModule(module); [EOL]     assertEquals("{\"x\":3,\"y\":7}", mapper.writeValueAsString(new Immutable())); [EOL] }
public void testDelegating() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(new StdDelegatingSerializer(Immutable.class, new StdConverter<Immutable, Map<String, Integer>>() { [EOL]  [EOL]         @Override [EOL]         public Map<String, Integer> convert(Immutable value) { [EOL]             HashMap<String, Integer> map = new LinkedHashMap<String, Integer>(); [EOL]             map.put("x", value.x()); [EOL]             map.put("y", value.y()); [EOL]             return map; [EOL]         } [EOL]     })); [EOL]     mapper.registerModule(module); [EOL]     assertEquals("{\"x\":3,\"y\":7}", mapper.writeValueAsString(new Immutable())); [EOL] }
public void testDelegating() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(new StdDelegatingSerializer(Immutable.class, new StdConverter<Immutable, Map<String, Integer>>() { [EOL]  [EOL]         @Override [EOL]         public Map<String, Integer> convert(Immutable value) { [EOL]             HashMap<String, Integer> map = new LinkedHashMap<String, Integer>(); [EOL]             map.put("x", value.x()); [EOL]             map.put("y", value.y()); [EOL]             return map; [EOL]         } [EOL]     })); [EOL]     mapper.registerModule(module); [EOL]     assertEquals("{\"x\":3,\"y\":7}", mapper.writeValueAsString(new Immutable())); [EOL] }
@SuppressWarnings({ "unchecked", "rawtypes" }) [EOL] public void testCustomLists() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     JsonSerializer<?> ser = new CollectionSerializer(null, false, null, null, null); [EOL]     final JsonSerializer<Object> collectionSerializer = (JsonSerializer<Object>) ser; [EOL]     module.addSerializer(Collection.class, new JsonSerializer<Collection>() { [EOL]  [EOL]         @Override [EOL]         public void serialize(Collection value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException { [EOL]             if (value.size() != 0) { [EOL]                 collectionSerializer.serialize(value, jgen, provider); [EOL]             } else { [EOL]                 jgen.writeNull(); [EOL]             } [EOL]         } [EOL]     }); [EOL]     mapper.registerModule(module); [EOL]     assertEquals("null", mapper.writeValueAsString(new ArrayList<Object>())); [EOL] }
@SuppressWarnings({ "unchecked", "rawtypes" }) [EOL] public void testCustomLists() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     JsonSerializer<?> ser = new CollectionSerializer(null, false, null, null, null); [EOL]     final JsonSerializer<Object> collectionSerializer = (JsonSerializer<Object>) ser; [EOL]     module.addSerializer(Collection.class, new JsonSerializer<Collection>() { [EOL]  [EOL]         @Override [EOL]         public void serialize(Collection value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException { [EOL]             if (value.size() != 0) { [EOL]                 collectionSerializer.serialize(value, jgen, provider); [EOL]             } else { [EOL]                 jgen.writeNull(); [EOL]             } [EOL]         } [EOL]     }); [EOL]     mapper.registerModule(module); [EOL]     assertEquals("null", mapper.writeValueAsString(new ArrayList<Object>())); [EOL] }
@SuppressWarnings({ "unchecked", "rawtypes" }) [EOL] public void testCustomLists() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     JsonSerializer<?> ser = new CollectionSerializer(null, false, null, null, null); [EOL]     final JsonSerializer<Object> collectionSerializer = (JsonSerializer<Object>) ser; [EOL]     module.addSerializer(Collection.class, new JsonSerializer<Collection>() { [EOL]  [EOL]         @Override [EOL]         public void serialize(Collection value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException { [EOL]             if (value.size() != 0) { [EOL]                 collectionSerializer.serialize(value, jgen, provider); [EOL]             } else { [EOL]                 jgen.writeNull(); [EOL]             } [EOL]         } [EOL]     }); [EOL]     mapper.registerModule(module); [EOL]     assertEquals("null", mapper.writeValueAsString(new ArrayList<Object>())); [EOL] }
public void testSerializedAsListWithPropertyAnnotations2() throws IOException { [EOL]     ListWrapperWithSerializer input = new ListWrapperWithSerializer("abc"); [EOL]     assertEquals("{\"values\":[\"value abc\"]}", MAPPER.writeValueAsString(input)); [EOL] }
public void testSerializedAsListWithPropertyAnnotations2() throws IOException { [EOL]     ListWrapperWithSerializer input = new ListWrapperWithSerializer("abc"); [EOL]     assertEquals("{\"values\":[\"value abc\"]}", MAPPER.writeValueAsString(input)); [EOL] }
public void testSerializedAsListWithPropertyAnnotations2() throws IOException { [EOL]     ListWrapperWithSerializer input = new ListWrapperWithSerializer("abc"); [EOL]     assertEquals("{\"values\":[\"value abc\"]}", MAPPER.writeValueAsString(input)); [EOL] }
public void testSerializedAsListWithPropertyAnnotations2() throws IOException { [EOL]     ListWrapperWithSerializer input = new ListWrapperWithSerializer("abc"); [EOL]     assertEquals("{\"values\":[\"value abc\"]}", MAPPER.writeValueAsString(input)); [EOL] }
public void testSerializedAsListWithPropertyAnnotations2() throws IOException { [EOL]     ListWrapperWithSerializer input = new ListWrapperWithSerializer("abc"); [EOL]     assertEquals("{\"values\":[\"value abc\"]}", MAPPER.writeValueAsString(input)); [EOL] }
public void testSerializedAsListWithPropertyAnnotations2() throws IOException { [EOL]     ListWrapperWithSerializer input = new ListWrapperWithSerializer("abc"); [EOL]     assertEquals("{\"values\":[\"value abc\"]}", MAPPER.writeValueAsString(input)); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testIssue468b() throws Exception { [EOL]     Person2 p2 = new Person2("John"); [EOL]     List<Key<Account>> accounts = new ArrayList<Key<Account>>(); [EOL]     accounts.add(new Key<Account>(new Account("a", 42L))); [EOL]     accounts.add(new Key<Account>(new Account("b", 43L))); [EOL]     accounts.add(new Key<Account>(new Account("c", 44L))); [EOL]     p2.setAccounts(accounts); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = mapper.writeValueAsString(p2); [EOL]     Map<String, Object> map = mapper.readValue(json, Map.class); [EOL]     assertEquals("John", map.get("name")); [EOL]     Object ob = map.get("accounts"); [EOL]     assertNotNull(ob); [EOL]     List<?> acctList = (List<?>) ob; [EOL]     assertEquals(3, acctList.size()); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testIssue468b() throws Exception { [EOL]     Person2 p2 = new Person2("John"); [EOL]     List<Key<Account>> accounts = new ArrayList<Key<Account>>(); [EOL]     accounts.add(new Key<Account>(new Account("a", 42L))); [EOL]     accounts.add(new Key<Account>(new Account("b", 43L))); [EOL]     accounts.add(new Key<Account>(new Account("c", 44L))); [EOL]     p2.setAccounts(accounts); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = mapper.writeValueAsString(p2); [EOL]     Map<String, Object> map = mapper.readValue(json, Map.class); [EOL]     assertEquals("John", map.get("name")); [EOL]     Object ob = map.get("accounts"); [EOL]     assertNotNull(ob); [EOL]     List<?> acctList = (List<?>) ob; [EOL]     assertEquals(3, acctList.size()); [EOL] }
public void testUnknownHandlingIgnoreWithHandler() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.clearProblemHandlers(); [EOL]     mapper.addHandler(new MyHandler()); [EOL]     TestBean result = mapper.readValue(new StringReader(JSON_UNKNOWN_FIELD), TestBean.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result._a); [EOL]     assertEquals(-1, result._b); [EOL]     assertEquals("foo:START_ARRAY", result._unknown); [EOL] }
public void testUnknownHandlingIgnoreWithHandler() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.clearProblemHandlers(); [EOL]     mapper.addHandler(new MyHandler()); [EOL]     TestBean result = mapper.readValue(new StringReader(JSON_UNKNOWN_FIELD), TestBean.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result._a); [EOL]     assertEquals(-1, result._b); [EOL]     assertEquals("foo:START_ARRAY", result._unknown); [EOL] }
public void testUnknownHandlingIgnoreWithHandler() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.clearProblemHandlers(); [EOL]     mapper.addHandler(new MyHandler()); [EOL]     TestBean result = mapper.readValue(new StringReader(JSON_UNKNOWN_FIELD), TestBean.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result._a); [EOL]     assertEquals(-1, result._b); [EOL]     assertEquals("foo:START_ARRAY", result._unknown); [EOL] }
public void testUnknownHandlingIgnoreWithHandler() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.clearProblemHandlers(); [EOL]     mapper.addHandler(new MyHandler()); [EOL]     TestBean result = mapper.readValue(new StringReader(JSON_UNKNOWN_FIELD), TestBean.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result._a); [EOL]     assertEquals(-1, result._b); [EOL]     assertEquals("foo:START_ARRAY", result._unknown); [EOL] }
public void testUnknownHandlingIgnoreWithHandler() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.clearProblemHandlers(); [EOL]     mapper.addHandler(new MyHandler()); [EOL]     TestBean result = mapper.readValue(new StringReader(JSON_UNKNOWN_FIELD), TestBean.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result._a); [EOL]     assertEquals(-1, result._b); [EOL]     assertEquals("foo:START_ARRAY", result._unknown); [EOL] }
public void testUnknownHandlingIgnoreWithHandler() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.clearProblemHandlers(); [EOL]     mapper.addHandler(new MyHandler()); [EOL]     TestBean result = mapper.readValue(new StringReader(JSON_UNKNOWN_FIELD), TestBean.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result._a); [EOL]     assertEquals(-1, result._b); [EOL]     assertEquals("foo:START_ARRAY", result._unknown); [EOL] }
public void testUnknownHandlingIgnoreWithHandler() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.clearProblemHandlers(); [EOL]     mapper.addHandler(new MyHandler()); [EOL]     TestBean result = mapper.readValue(new StringReader(JSON_UNKNOWN_FIELD), TestBean.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result._a); [EOL]     assertEquals(-1, result._b); [EOL]     assertEquals("foo:START_ARRAY", result._unknown); [EOL] }
public void testRetain() { [EOL]     ObjectNode ob = MAPPER.createObjectNode(); [EOL]     ob.put("a", "a"); [EOL]     ob.put("b", "b"); [EOL]     ob.put("c", "c"); [EOL]     assertEquals(3, ob.size()); [EOL]     assertSame(ob, ob.retain("a", "c")); [EOL]     assertEquals(2, ob.size()); [EOL]     assertEquals("a", ob.get("a").textValue()); [EOL]     assertNull(ob.get("b")); [EOL]     assertEquals("c", ob.get("c").textValue()); [EOL] }
public void testImmutable() throws Exception { [EOL]     final String json = "{\"value\":13}"; [EOL]     ValueImmutable value = mapper.readValue(json, ValueImmutable.class); [EOL]     assertEquals(13, value.value); [EOL] }
public void testImmutable() throws Exception { [EOL]     final String json = "{\"value\":13}"; [EOL]     ValueImmutable value = mapper.readValue(json, ValueImmutable.class); [EOL]     assertEquals(13, value.value); [EOL] }
public void testFactoryCreatorWithMixin() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.addMixInAnnotations(CreatorBean.class, MixIn.class); [EOL]     CreatorBean bean = m.readValue("{ \"a\" : \"xyz\", \"x\" : 12 }", CreatorBean.class); [EOL]     assertEquals(11, bean.x); [EOL]     assertEquals("factory:xyz", bean.a); [EOL] }
public void testFactoryCreatorWithMixin() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.addMixInAnnotations(CreatorBean.class, MixIn.class); [EOL]     CreatorBean bean = m.readValue("{ \"a\" : \"xyz\", \"x\" : 12 }", CreatorBean.class); [EOL]     assertEquals(11, bean.x); [EOL]     assertEquals("factory:xyz", bean.a); [EOL] }
public void testSimpleGetterInterfaceImpl() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(m, new PojoImpl()); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals(Integer.valueOf(5), result.get("foobar")); [EOL]     assertEquals(Integer.valueOf(1), result.get("width")); [EOL]     assertEquals(Integer.valueOf(2), result.get("length")); [EOL] }
public void testSimpleGetterInterfaceImpl() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(m, new PojoImpl()); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals(Integer.valueOf(5), result.get("foobar")); [EOL]     assertEquals(Integer.valueOf(1), result.get("width")); [EOL]     assertEquals(Integer.valueOf(2), result.get("length")); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testPolymorphicSerdeWithDelegate() throws Exception { [EOL]     AdditionInterface adder = new AdditionInterfaceImpl(1); [EOL]     assertEquals(2, adder.add(1)); [EOL]     String json = MAPPER.writeValueAsString(adder); [EOL]     assertEquals("{\"boingo\":\"boopsy\",\"toAdd\":1}", json); [EOL]     assertEquals(2, MAPPER.readValue(json, AdditionInterface.class).add(1)); [EOL]     adder = new NegatingAdditionInterface(adder); [EOL]     assertEquals(0, adder.add(1)); [EOL]     json = MAPPER.writeValueAsString(adder); [EOL]     assertEquals("{\"boingo\":\"boopsy\",\"toAdd\":1}", json); [EOL]     assertEquals(2, MAPPER.readValue(json, AdditionInterface.class).add(1)); [EOL] }
public void testPolymorphicSerdeWithDelegate() throws Exception { [EOL]     AdditionInterface adder = new AdditionInterfaceImpl(1); [EOL]     assertEquals(2, adder.add(1)); [EOL]     String json = MAPPER.writeValueAsString(adder); [EOL]     assertEquals("{\"boingo\":\"boopsy\",\"toAdd\":1}", json); [EOL]     assertEquals(2, MAPPER.readValue(json, AdditionInterface.class).add(1)); [EOL]     adder = new NegatingAdditionInterface(adder); [EOL]     assertEquals(0, adder.add(1)); [EOL]     json = MAPPER.writeValueAsString(adder); [EOL]     assertEquals("{\"boingo\":\"boopsy\",\"toAdd\":1}", json); [EOL]     assertEquals(2, MAPPER.readValue(json, AdditionInterface.class).add(1)); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testInvalid() { [EOL]     StdDateFormat std = new StdDateFormat(); [EOL]     try { [EOL]         std.parse("foobar"); [EOL]     } catch (java.text.ParseException e) { [EOL]         verifyException(e, "Can not parse"); [EOL]     } [EOL] }
public void testInvalid() { [EOL]     StdDateFormat std = new StdDateFormat(); [EOL]     try { [EOL]         std.parse("foobar"); [EOL]     } catch (java.text.ParseException e) { [EOL]         verifyException(e, "Can not parse"); [EOL]     } [EOL] }
public void testInvalid() { [EOL]     StdDateFormat std = new StdDateFormat(); [EOL]     try { [EOL]         std.parse("foobar"); [EOL]     } catch (java.text.ParseException e) { [EOL]         verifyException(e, "Can not parse"); [EOL]     } [EOL] }
public void testInvalid() { [EOL]     StdDateFormat std = new StdDateFormat(); [EOL]     try { [EOL]         std.parse("foobar"); [EOL]     } catch (java.text.ParseException e) { [EOL]         verifyException(e, "Can not parse"); [EOL]     } [EOL] }
public void testInvalid() { [EOL]     StdDateFormat std = new StdDateFormat(); [EOL]     try { [EOL]         std.parse("foobar"); [EOL]     } catch (java.text.ParseException e) { [EOL]         verifyException(e, "Can not parse"); [EOL]     } [EOL] }
public void testInvalid() { [EOL]     StdDateFormat std = new StdDateFormat(); [EOL]     try { [EOL]         std.parse("foobar"); [EOL]     } catch (java.text.ParseException e) { [EOL]         verifyException(e, "Can not parse"); [EOL]     } [EOL] }
public void testInvalid() { [EOL]     StdDateFormat std = new StdDateFormat(); [EOL]     try { [EOL]         std.parse("foobar"); [EOL]     } catch (java.text.ParseException e) { [EOL]         verifyException(e, "Can not parse"); [EOL]     } [EOL] }
public void testInvalid() { [EOL]     StdDateFormat std = new StdDateFormat(); [EOL]     try { [EOL]         std.parse("foobar"); [EOL]     } catch (java.text.ParseException e) { [EOL]         verifyException(e, "Can not parse"); [EOL]     } [EOL] }
public void testInvalid() { [EOL]     StdDateFormat std = new StdDateFormat(); [EOL]     try { [EOL]         std.parse("foobar"); [EOL]     } catch (java.text.ParseException e) { [EOL]         verifyException(e, "Can not parse"); [EOL]     } [EOL] }
public void testInvalid() { [EOL]     StdDateFormat std = new StdDateFormat(); [EOL]     try { [EOL]         std.parse("foobar"); [EOL]     } catch (java.text.ParseException e) { [EOL]         verifyException(e, "Can not parse"); [EOL]     } [EOL] }
public void testInvalid() { [EOL]     StdDateFormat std = new StdDateFormat(); [EOL]     try { [EOL]         std.parse("foobar"); [EOL]     } catch (java.text.ParseException e) { [EOL]         verifyException(e, "Can not parse"); [EOL]     } [EOL] }
public void testInvalid() { [EOL]     StdDateFormat std = new StdDateFormat(); [EOL]     try { [EOL]         std.parse("foobar"); [EOL]     } catch (java.text.ParseException e) { [EOL]         verifyException(e, "Can not parse"); [EOL]     } [EOL] }
public void testInvalid() { [EOL]     StdDateFormat std = new StdDateFormat(); [EOL]     try { [EOL]         std.parse("foobar"); [EOL]     } catch (java.text.ParseException e) { [EOL]         verifyException(e, "Can not parse"); [EOL]     } [EOL] }
public void testInvalid() { [EOL]     StdDateFormat std = new StdDateFormat(); [EOL]     try { [EOL]         std.parse("foobar"); [EOL]     } catch (java.text.ParseException e) { [EOL]         verifyException(e, "Can not parse"); [EOL]     } [EOL] }
public void testInvalid() { [EOL]     StdDateFormat std = new StdDateFormat(); [EOL]     try { [EOL]         std.parse("foobar"); [EOL]     } catch (java.text.ParseException e) { [EOL]         verifyException(e, "Can not parse"); [EOL]     } [EOL] }
public void testInvalid() { [EOL]     StdDateFormat std = new StdDateFormat(); [EOL]     try { [EOL]         std.parse("foobar"); [EOL]     } catch (java.text.ParseException e) { [EOL]         verifyException(e, "Can not parse"); [EOL]     } [EOL] }
public void testInvalid() { [EOL]     StdDateFormat std = new StdDateFormat(); [EOL]     try { [EOL]         std.parse("foobar"); [EOL]     } catch (java.text.ParseException e) { [EOL]         verifyException(e, "Can not parse"); [EOL]     } [EOL] }
public void testInvalid() { [EOL]     StdDateFormat std = new StdDateFormat(); [EOL]     try { [EOL]         std.parse("foobar"); [EOL]     } catch (java.text.ParseException e) { [EOL]         verifyException(e, "Can not parse"); [EOL]     } [EOL] }
public void testInvalid() { [EOL]     StdDateFormat std = new StdDateFormat(); [EOL]     try { [EOL]         std.parse("foobar"); [EOL]     } catch (java.text.ParseException e) { [EOL]         verifyException(e, "Can not parse"); [EOL]     } [EOL] }
public void testInvalid() { [EOL]     StdDateFormat std = new StdDateFormat(); [EOL]     try { [EOL]         std.parse("foobar"); [EOL]     } catch (java.text.ParseException e) { [EOL]         verifyException(e, "Can not parse"); [EOL]     } [EOL] }
public void testInvalid() { [EOL]     StdDateFormat std = new StdDateFormat(); [EOL]     try { [EOL]         std.parse("foobar"); [EOL]     } catch (java.text.ParseException e) { [EOL]         verifyException(e, "Can not parse"); [EOL]     } [EOL] }
public void testInvalid() { [EOL]     StdDateFormat std = new StdDateFormat(); [EOL]     try { [EOL]         std.parse("foobar"); [EOL]     } catch (java.text.ParseException e) { [EOL]         verifyException(e, "Can not parse"); [EOL]     } [EOL] }
public void testInvalid() { [EOL]     StdDateFormat std = new StdDateFormat(); [EOL]     try { [EOL]         std.parse("foobar"); [EOL]     } catch (java.text.ParseException e) { [EOL]         verifyException(e, "Can not parse"); [EOL]     } [EOL] }
public void testInvalid() { [EOL]     StdDateFormat std = new StdDateFormat(); [EOL]     try { [EOL]         std.parse("foobar"); [EOL]     } catch (java.text.ParseException e) { [EOL]         verifyException(e, "Can not parse"); [EOL]     } [EOL] }
public void testInvalid() { [EOL]     StdDateFormat std = new StdDateFormat(); [EOL]     try { [EOL]         std.parse("foobar"); [EOL]     } catch (java.text.ParseException e) { [EOL]         verifyException(e, "Can not parse"); [EOL]     } [EOL] }
public void testInvalid() { [EOL]     StdDateFormat std = new StdDateFormat(); [EOL]     try { [EOL]         std.parse("foobar"); [EOL]     } catch (java.text.ParseException e) { [EOL]         verifyException(e, "Can not parse"); [EOL]     } [EOL] }
public void testInvalid() { [EOL]     StdDateFormat std = new StdDateFormat(); [EOL]     try { [EOL]         std.parse("foobar"); [EOL]     } catch (java.text.ParseException e) { [EOL]         verifyException(e, "Can not parse"); [EOL]     } [EOL] }
public void testInvalid() { [EOL]     StdDateFormat std = new StdDateFormat(); [EOL]     try { [EOL]         std.parse("foobar"); [EOL]     } catch (java.text.ParseException e) { [EOL]         verifyException(e, "Can not parse"); [EOL]     } [EOL] }
public void testInvalid() { [EOL]     StdDateFormat std = new StdDateFormat(); [EOL]     try { [EOL]         std.parse("foobar"); [EOL]     } catch (java.text.ParseException e) { [EOL]         verifyException(e, "Can not parse"); [EOL]     } [EOL] }
public void testDateISO8601() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false); [EOL]     String json = mapper.writeValueAsString(new Date(0L)); [EOL]     assertEquals("\"1970-01-01T00:00:00.000+0000\"", json); [EOL] }
public void testDateISO8601() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false); [EOL]     String json = mapper.writeValueAsString(new Date(0L)); [EOL]     assertEquals("\"1970-01-01T00:00:00.000+0000\"", json); [EOL] }
public void testInvalid() { [EOL]     StdDateFormat std = new StdDateFormat(); [EOL]     try { [EOL]         std.parse("foobar"); [EOL]     } catch (java.text.ParseException e) { [EOL]         verifyException(e, "Can not parse"); [EOL]     } [EOL] }
public void testInvalid() { [EOL]     StdDateFormat std = new StdDateFormat(); [EOL]     try { [EOL]         std.parse("foobar"); [EOL]     } catch (java.text.ParseException e) { [EOL]         verifyException(e, "Can not parse"); [EOL]     } [EOL] }
public void testInvalid() { [EOL]     StdDateFormat std = new StdDateFormat(); [EOL]     try { [EOL]         std.parse("foobar"); [EOL]     } catch (java.text.ParseException e) { [EOL]         verifyException(e, "Can not parse"); [EOL]     } [EOL] }
public void testInvalid() { [EOL]     StdDateFormat std = new StdDateFormat(); [EOL]     try { [EOL]         std.parse("foobar"); [EOL]     } catch (java.text.ParseException e) { [EOL]         verifyException(e, "Can not parse"); [EOL]     } [EOL] }
public void testInvalid() { [EOL]     StdDateFormat std = new StdDateFormat(); [EOL]     try { [EOL]         std.parse("foobar"); [EOL]     } catch (java.text.ParseException e) { [EOL]         verifyException(e, "Can not parse"); [EOL]     } [EOL] }
public void testInvalid() { [EOL]     StdDateFormat std = new StdDateFormat(); [EOL]     try { [EOL]         std.parse("foobar"); [EOL]     } catch (java.text.ParseException e) { [EOL]         verifyException(e, "Can not parse"); [EOL]     } [EOL] }
public void testDateUtilISO8601JustDate() throws Exception { [EOL]     String inputStr = "1972-12-28"; [EOL]     Date inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class); [EOL]     Calendar c = Calendar.getInstance(TimeZone.getTimeZone("GMT")); [EOL]     c.setTime(inputDate); [EOL]     assertEquals(1972, c.get(Calendar.YEAR)); [EOL]     assertEquals(Calendar.DECEMBER, c.get(Calendar.MONTH)); [EOL]     assertEquals(28, c.get(Calendar.DAY_OF_MONTH)); [EOL] }
public void testInvalid() { [EOL]     StdDateFormat std = new StdDateFormat(); [EOL]     try { [EOL]         std.parse("foobar"); [EOL]     } catch (java.text.ParseException e) { [EOL]         verifyException(e, "Can not parse"); [EOL]     } [EOL] }
public void testInvalid() { [EOL]     StdDateFormat std = new StdDateFormat(); [EOL]     try { [EOL]         std.parse("foobar"); [EOL]     } catch (java.text.ParseException e) { [EOL]         verifyException(e, "Can not parse"); [EOL]     } [EOL] }
public void testInvalid() { [EOL]     StdDateFormat std = new StdDateFormat(); [EOL]     try { [EOL]         std.parse("foobar"); [EOL]     } catch (java.text.ParseException e) { [EOL]         verifyException(e, "Can not parse"); [EOL]     } [EOL] }
public void testInvalid() { [EOL]     StdDateFormat std = new StdDateFormat(); [EOL]     try { [EOL]         std.parse("foobar"); [EOL]     } catch (java.text.ParseException e) { [EOL]         verifyException(e, "Can not parse"); [EOL]     } [EOL] }
public void testInvalid() { [EOL]     StdDateFormat std = new StdDateFormat(); [EOL]     try { [EOL]         std.parse("foobar"); [EOL]     } catch (java.text.ParseException e) { [EOL]         verifyException(e, "Can not parse"); [EOL]     } [EOL] }
public void testInvalid() { [EOL]     StdDateFormat std = new StdDateFormat(); [EOL]     try { [EOL]         std.parse("foobar"); [EOL]     } catch (java.text.ParseException e) { [EOL]         verifyException(e, "Can not parse"); [EOL]     } [EOL] }
public void testInvalid() { [EOL]     StdDateFormat std = new StdDateFormat(); [EOL]     try { [EOL]         std.parse("foobar"); [EOL]     } catch (java.text.ParseException e) { [EOL]         verifyException(e, "Can not parse"); [EOL]     } [EOL] }
public void testInvalid() { [EOL]     StdDateFormat std = new StdDateFormat(); [EOL]     try { [EOL]         std.parse("foobar"); [EOL]     } catch (java.text.ParseException e) { [EOL]         verifyException(e, "Can not parse"); [EOL]     } [EOL] }
public void testInvalid() { [EOL]     StdDateFormat std = new StdDateFormat(); [EOL]     try { [EOL]         std.parse("foobar"); [EOL]     } catch (java.text.ParseException e) { [EOL]         verifyException(e, "Can not parse"); [EOL]     } [EOL] }
public void testInvalid() { [EOL]     StdDateFormat std = new StdDateFormat(); [EOL]     try { [EOL]         std.parse("foobar"); [EOL]     } catch (java.text.ParseException e) { [EOL]         verifyException(e, "Can not parse"); [EOL]     } [EOL] }
public void testInvalid() { [EOL]     StdDateFormat std = new StdDateFormat(); [EOL]     try { [EOL]         std.parse("foobar"); [EOL]     } catch (java.text.ParseException e) { [EOL]         verifyException(e, "Can not parse"); [EOL]     } [EOL] }
public void testInvalid() { [EOL]     StdDateFormat std = new StdDateFormat(); [EOL]     try { [EOL]         std.parse("foobar"); [EOL]     } catch (java.text.ParseException e) { [EOL]         verifyException(e, "Can not parse"); [EOL]     } [EOL] }
public void testInvalid() { [EOL]     StdDateFormat std = new StdDateFormat(); [EOL]     try { [EOL]         std.parse("foobar"); [EOL]     } catch (java.text.ParseException e) { [EOL]         verifyException(e, "Can not parse"); [EOL]     } [EOL] }
public void testInvalid() { [EOL]     StdDateFormat std = new StdDateFormat(); [EOL]     try { [EOL]         std.parse("foobar"); [EOL]     } catch (java.text.ParseException e) { [EOL]         verifyException(e, "Can not parse"); [EOL]     } [EOL] }
public void testInvalid() { [EOL]     StdDateFormat std = new StdDateFormat(); [EOL]     try { [EOL]         std.parse("foobar"); [EOL]     } catch (java.text.ParseException e) { [EOL]         verifyException(e, "Can not parse"); [EOL]     } [EOL] }
public void testInvalid() { [EOL]     StdDateFormat std = new StdDateFormat(); [EOL]     try { [EOL]         std.parse("foobar"); [EOL]     } catch (java.text.ParseException e) { [EOL]         verifyException(e, "Can not parse"); [EOL]     } [EOL] }
public void testInvalid() { [EOL]     StdDateFormat std = new StdDateFormat(); [EOL]     try { [EOL]         std.parse("foobar"); [EOL]     } catch (java.text.ParseException e) { [EOL]         verifyException(e, "Can not parse"); [EOL]     } [EOL] }
public void testInvalid() { [EOL]     StdDateFormat std = new StdDateFormat(); [EOL]     try { [EOL]         std.parse("foobar"); [EOL]     } catch (java.text.ParseException e) { [EOL]         verifyException(e, "Can not parse"); [EOL]     } [EOL] }
public void testInvalid() { [EOL]     StdDateFormat std = new StdDateFormat(); [EOL]     try { [EOL]         std.parse("foobar"); [EOL]     } catch (java.text.ParseException e) { [EOL]         verifyException(e, "Can not parse"); [EOL]     } [EOL] }
public void testInvalid() { [EOL]     StdDateFormat std = new StdDateFormat(); [EOL]     try { [EOL]         std.parse("foobar"); [EOL]     } catch (java.text.ParseException e) { [EOL]         verifyException(e, "Can not parse"); [EOL]     } [EOL] }
public void testDeepUnwrapping() throws Exception { [EOL]     DeepUnwrapping bean = mapper.readValue("{\"x\":3,\"name\":\"Bob\",\"y\":27}", DeepUnwrapping.class); [EOL]     Unwrapping uw = bean.unwrapped; [EOL]     assertNotNull(uw); [EOL]     assertEquals("Bob", uw.name); [EOL]     Location loc = uw.location; [EOL]     assertNotNull(loc); [EOL]     assertEquals(3, loc.x); [EOL]     assertEquals(27, loc.y); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testDelegating() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(new StdDelegatingSerializer(Immutable.class, new StdConverter<Immutable, Map<String, Integer>>() { [EOL]  [EOL]         @Override [EOL]         public Map<String, Integer> convert(Immutable value) { [EOL]             HashMap<String, Integer> map = new LinkedHashMap<String, Integer>(); [EOL]             map.put("x", value.x()); [EOL]             map.put("y", value.y()); [EOL]             return map; [EOL]         } [EOL]     })); [EOL]     mapper.registerModule(module); [EOL]     assertEquals("{\"x\":3,\"y\":7}", mapper.writeValueAsString(new Immutable())); [EOL] }
public void testDelegating() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(new StdDelegatingSerializer(Immutable.class, new StdConverter<Immutable, Map<String, Integer>>() { [EOL]  [EOL]         @Override [EOL]         public Map<String, Integer> convert(Immutable value) { [EOL]             HashMap<String, Integer> map = new LinkedHashMap<String, Integer>(); [EOL]             map.put("x", value.x()); [EOL]             map.put("y", value.y()); [EOL]             return map; [EOL]         } [EOL]     })); [EOL]     mapper.registerModule(module); [EOL]     assertEquals("{\"x\":3,\"y\":7}", mapper.writeValueAsString(new Immutable())); [EOL] }
public void testPropertyAnnotationForMaps() throws Exception { [EOL]     String json = objectWriter().writeValueAsString(new PointListWrapperMap("a", 1, 2)); [EOL]     assertEquals("{\"values\":{\"a\":[1,2]}}", json); [EOL] }
public void testPropertyAnnotationForMaps() throws Exception { [EOL]     String json = objectWriter().writeValueAsString(new PointListWrapperMap("a", 1, 2)); [EOL]     assertEquals("{\"values\":{\"a\":[1,2]}}", json); [EOL] }
public void testPropertyAnnotationForMaps() throws Exception { [EOL]     String json = objectWriter().writeValueAsString(new PointListWrapperMap("a", 1, 2)); [EOL]     assertEquals("{\"values\":{\"a\":[1,2]}}", json); [EOL] }
public void testPropertyAnnotationForMaps() throws Exception { [EOL]     String json = objectWriter().writeValueAsString(new PointListWrapperMap("a", 1, 2)); [EOL]     assertEquals("{\"values\":{\"a\":[1,2]}}", json); [EOL] }
public void testDelegating() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(new StdDelegatingSerializer(Immutable.class, new StdConverter<Immutable, Map<String, Integer>>() { [EOL]  [EOL]         @Override [EOL]         public Map<String, Integer> convert(Immutable value) { [EOL]             HashMap<String, Integer> map = new LinkedHashMap<String, Integer>(); [EOL]             map.put("x", value.x()); [EOL]             map.put("y", value.y()); [EOL]             return map; [EOL]         } [EOL]     })); [EOL]     mapper.registerModule(module); [EOL]     assertEquals("{\"x\":3,\"y\":7}", mapper.writeValueAsString(new Immutable())); [EOL] }
public void testDelegating() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(new StdDelegatingSerializer(Immutable.class, new StdConverter<Immutable, Map<String, Integer>>() { [EOL]  [EOL]         @Override [EOL]         public Map<String, Integer> convert(Immutable value) { [EOL]             HashMap<String, Integer> map = new LinkedHashMap<String, Integer>(); [EOL]             map.put("x", value.x()); [EOL]             map.put("y", value.y()); [EOL]             return map; [EOL]         } [EOL]     })); [EOL]     mapper.registerModule(module); [EOL]     assertEquals("{\"x\":3,\"y\":7}", mapper.writeValueAsString(new Immutable())); [EOL] }
public void testDelegating() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(new StdDelegatingSerializer(Immutable.class, new StdConverter<Immutable, Map<String, Integer>>() { [EOL]  [EOL]         @Override [EOL]         public Map<String, Integer> convert(Immutable value) { [EOL]             HashMap<String, Integer> map = new LinkedHashMap<String, Integer>(); [EOL]             map.put("x", value.x()); [EOL]             map.put("y", value.y()); [EOL]             return map; [EOL]         } [EOL]     })); [EOL]     mapper.registerModule(module); [EOL]     assertEquals("{\"x\":3,\"y\":7}", mapper.writeValueAsString(new Immutable())); [EOL] }
public void testDelegating() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(new StdDelegatingSerializer(Immutable.class, new StdConverter<Immutable, Map<String, Integer>>() { [EOL]  [EOL]         @Override [EOL]         public Map<String, Integer> convert(Immutable value) { [EOL]             HashMap<String, Integer> map = new LinkedHashMap<String, Integer>(); [EOL]             map.put("x", value.x()); [EOL]             map.put("y", value.y()); [EOL]             return map; [EOL]         } [EOL]     })); [EOL]     mapper.registerModule(module); [EOL]     assertEquals("{\"x\":3,\"y\":7}", mapper.writeValueAsString(new Immutable())); [EOL] }
public void testPropertyAnnotationForMaps() throws Exception { [EOL]     String json = objectWriter().writeValueAsString(new PointListWrapperMap("a", 1, 2)); [EOL]     assertEquals("{\"values\":{\"a\":[1,2]}}", json); [EOL] }
public void testPropertyAnnotationForMaps() throws Exception { [EOL]     String json = objectWriter().writeValueAsString(new PointListWrapperMap("a", 1, 2)); [EOL]     assertEquals("{\"values\":{\"a\":[1,2]}}", json); [EOL] }
public void testPropertyAnnotationForMaps() throws Exception { [EOL]     String json = objectWriter().writeValueAsString(new PointListWrapperMap("a", 1, 2)); [EOL]     assertEquals("{\"values\":{\"a\":[1,2]}}", json); [EOL] }
public void testPropertyAnnotationForMaps() throws Exception { [EOL]     String json = objectWriter().writeValueAsString(new PointListWrapperMap("a", 1, 2)); [EOL]     assertEquals("{\"values\":{\"a\":[1,2]}}", json); [EOL] }
public void testPropertyAnnotationForMaps() throws Exception { [EOL]     String json = objectWriter().writeValueAsString(new PointListWrapperMap("a", 1, 2)); [EOL]     assertEquals("{\"values\":{\"a\":[1,2]}}", json); [EOL] }
public void testPropertyAnnotationForMaps() throws Exception { [EOL]     String json = objectWriter().writeValueAsString(new PointListWrapperMap("a", 1, 2)); [EOL]     assertEquals("{\"values\":{\"a\":[1,2]}}", json); [EOL] }
public void testPropertyAnnotationForMaps() throws Exception { [EOL]     String json = objectWriter().writeValueAsString(new PointListWrapperMap("a", 1, 2)); [EOL]     assertEquals("{\"values\":{\"a\":[1,2]}}", json); [EOL] }
public void testImmutable() throws Exception { [EOL]     final String json = "{\"value\":13}"; [EOL]     ValueImmutable value = mapper.readValue(json, ValueImmutable.class); [EOL]     assertEquals(13, value.value); [EOL] }
public void testImmutable() throws Exception { [EOL]     final String json = "{\"value\":13}"; [EOL]     ValueImmutable value = mapper.readValue(json, ValueImmutable.class); [EOL]     assertEquals(13, value.value); [EOL] }
public void testImmutable() throws Exception { [EOL]     final String json = "{\"value\":13}"; [EOL]     ValueImmutable value = mapper.readValue(json, ValueImmutable.class); [EOL]     assertEquals(13, value.value); [EOL] }
public void testImmutable() throws Exception { [EOL]     final String json = "{\"value\":13}"; [EOL]     ValueImmutable value = mapper.readValue(json, ValueImmutable.class); [EOL]     assertEquals(13, value.value); [EOL] }
public void testImmutable() throws Exception { [EOL]     final String json = "{\"value\":13}"; [EOL]     ValueImmutable value = mapper.readValue(json, ValueImmutable.class); [EOL]     assertEquals(13, value.value); [EOL] }
public void testBasicsWithNullNode() throws Exception { [EOL]     NullNode n = NullNode.instance; [EOL]     assertFalse(n.isContainerNode()); [EOL]     assertFalse(n.isBigDecimal()); [EOL]     assertFalse(n.isBigInteger()); [EOL]     assertFalse(n.isBinary()); [EOL]     assertFalse(n.isBoolean()); [EOL]     assertFalse(n.isPojo()); [EOL]     assertFalse(n.isMissingNode()); [EOL]     assertFalse(n.booleanValue()); [EOL]     assertNull(n.numberValue()); [EOL]     assertEquals(0, n.intValue()); [EOL]     assertEquals(0L, n.longValue()); [EOL]     assertEquals(BigDecimal.ZERO, n.decimalValue()); [EOL]     assertEquals(BigInteger.ZERO, n.bigIntegerValue()); [EOL]     assertEquals(0, n.size()); [EOL]     assertFalse(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     assertNotNull(n.path("xyz")); [EOL]     assertTrue(n.path("xyz").isMissingNode()); [EOL]     assertFalse(n.has("field")); [EOL]     assertFalse(n.has(3)); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL] }
public void testNull() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode result = mapper.readTree("   null "); [EOL]     assertNotNull(result); [EOL]     assertTrue(result.isNull()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertEquals("null", result.asText()); [EOL]     assertEquals(result, NullNode.instance); [EOL] }
public void testBasicsWithNullNode() throws Exception { [EOL]     NullNode n = NullNode.instance; [EOL]     assertFalse(n.isContainerNode()); [EOL]     assertFalse(n.isBigDecimal()); [EOL]     assertFalse(n.isBigInteger()); [EOL]     assertFalse(n.isBinary()); [EOL]     assertFalse(n.isBoolean()); [EOL]     assertFalse(n.isPojo()); [EOL]     assertFalse(n.isMissingNode()); [EOL]     assertFalse(n.booleanValue()); [EOL]     assertNull(n.numberValue()); [EOL]     assertEquals(0, n.intValue()); [EOL]     assertEquals(0L, n.longValue()); [EOL]     assertEquals(BigDecimal.ZERO, n.decimalValue()); [EOL]     assertEquals(BigInteger.ZERO, n.bigIntegerValue()); [EOL]     assertEquals(0, n.size()); [EOL]     assertFalse(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     assertNotNull(n.path("xyz")); [EOL]     assertTrue(n.path("xyz").isMissingNode()); [EOL]     assertFalse(n.has("field")); [EOL]     assertFalse(n.has(3)); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = "{ \"a\" : 123, \"list\" : [ 12.25, null, true, { }, [ ] ] }"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals("Expected START_OBJECT", JsonToken.START_OBJECT.asString(), jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals("a", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals(123, jp.getIntValue()); [EOL]     assertEquals("123", jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals("list", jp.getText()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals(JsonToken.START_ARRAY.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(12.25, jp.getDoubleValue(), 0); [EOL]     assertEquals("12.25", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NULL, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(JsonToken.VALUE_NULL.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_TRUE, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertTrue(jp.getBooleanValue()); [EOL]     assertEquals(JsonToken.VALUE_TRUE.asString(), jp.getText()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL] }
public void testNull() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode result = mapper.readTree("   null "); [EOL]     assertNotNull(result); [EOL]     assertTrue(result.isNull()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertEquals("null", result.asText()); [EOL]     assertEquals(result, NullNode.instance); [EOL] }
public void testNull() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode result = mapper.readTree("   null "); [EOL]     assertNotNull(result); [EOL]     assertTrue(result.isNull()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertEquals("null", result.asText()); [EOL]     assertEquals(result, NullNode.instance); [EOL] }
public void testNull() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode result = mapper.readTree("   null "); [EOL]     assertNotNull(result); [EOL]     assertTrue(result.isNull()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertEquals("null", result.asText()); [EOL]     assertEquals(result, NullNode.instance); [EOL] }
public void testAlwaysIdForTree() throws Exception { [EOL]     TreeNode root = new TreeNode(null, 1, "root"); [EOL]     TreeNode leaf = new TreeNode(root, 2, "leaf"); [EOL]     root.child = leaf; [EOL]     String json = MAPPER.writeValueAsString(root); [EOL]     assertEquals("{\"id\":1,\"name\":\"root\",\"parent\":null,\"child\":" + "{\"id\":2,\"name\":\"leaf\",\"parent\":1,\"child\":null}}", json); [EOL] }
public void testAlwaysIdForTree() throws Exception { [EOL]     TreeNode root = new TreeNode(null, 1, "root"); [EOL]     TreeNode leaf = new TreeNode(root, 2, "leaf"); [EOL]     root.child = leaf; [EOL]     String json = MAPPER.writeValueAsString(root); [EOL]     assertEquals("{\"id\":1,\"name\":\"root\",\"parent\":null,\"child\":" + "{\"id\":2,\"name\":\"leaf\",\"parent\":1,\"child\":null}}", json); [EOL] }
public void testAlwaysIdForTree() throws Exception { [EOL]     TreeNode root = new TreeNode(null, 1, "root"); [EOL]     TreeNode leaf = new TreeNode(root, 2, "leaf"); [EOL]     root.child = leaf; [EOL]     String json = MAPPER.writeValueAsString(root); [EOL]     assertEquals("{\"id\":1,\"name\":\"root\",\"parent\":null,\"child\":" + "{\"id\":2,\"name\":\"leaf\",\"parent\":1,\"child\":null}}", json); [EOL] }
public void testAlwaysIdForTree() throws Exception { [EOL]     TreeNode root = new TreeNode(null, 1, "root"); [EOL]     TreeNode leaf = new TreeNode(root, 2, "leaf"); [EOL]     root.child = leaf; [EOL]     String json = MAPPER.writeValueAsString(root); [EOL]     assertEquals("{\"id\":1,\"name\":\"root\",\"parent\":null,\"child\":" + "{\"id\":2,\"name\":\"leaf\",\"parent\":1,\"child\":null}}", json); [EOL] }
public void testAlwaysIdForTree() throws Exception { [EOL]     TreeNode root = new TreeNode(null, 1, "root"); [EOL]     TreeNode leaf = new TreeNode(root, 2, "leaf"); [EOL]     root.child = leaf; [EOL]     String json = MAPPER.writeValueAsString(root); [EOL]     assertEquals("{\"id\":1,\"name\":\"root\",\"parent\":null,\"child\":" + "{\"id\":2,\"name\":\"leaf\",\"parent\":1,\"child\":null}}", json); [EOL] }
public void testAlwaysIdForTree() throws Exception { [EOL]     TreeNode root = new TreeNode(null, 1, "root"); [EOL]     TreeNode leaf = new TreeNode(root, 2, "leaf"); [EOL]     root.child = leaf; [EOL]     String json = MAPPER.writeValueAsString(root); [EOL]     assertEquals("{\"id\":1,\"name\":\"root\",\"parent\":null,\"child\":" + "{\"id\":2,\"name\":\"leaf\",\"parent\":1,\"child\":null}}", json); [EOL] }
public void testSerializeAsForSimpleProp() throws IOException { [EOL]     assertEquals("{\"foo\":{\"foo\":42}}", WRITER.writeValueAsString(new FooableWrapper())); [EOL] }
public void testSerializeAsForSimpleProp() throws IOException { [EOL]     assertEquals("{\"foo\":{\"foo\":42}}", WRITER.writeValueAsString(new FooableWrapper())); [EOL] }
public void testSerializeAsForSimpleProp() throws IOException { [EOL]     assertEquals("{\"foo\":{\"foo\":42}}", WRITER.writeValueAsString(new FooableWrapper())); [EOL] }
public void testSerializeAsForSimpleProp() throws IOException { [EOL]     assertEquals("{\"foo\":{\"foo\":42}}", WRITER.writeValueAsString(new FooableWrapper())); [EOL] }
public void testSerializeAsForSimpleProp() throws IOException { [EOL]     assertEquals("{\"foo\":{\"foo\":42}}", WRITER.writeValueAsString(new FooableWrapper())); [EOL] }
public void testSerializeAsForSimpleProp() throws IOException { [EOL]     assertEquals("{\"foo\":{\"foo\":42}}", WRITER.writeValueAsString(new FooableWrapper())); [EOL] }
public void testSerializeAsForSimpleProp() throws IOException { [EOL]     assertEquals("{\"foo\":{\"foo\":42}}", WRITER.writeValueAsString(new FooableWrapper())); [EOL] }
public void testSerializeAsForSimpleProp() throws IOException { [EOL]     assertEquals("{\"foo\":{\"foo\":42}}", WRITER.writeValueAsString(new FooableWrapper())); [EOL] }
public void testSerializeAsForSimpleProp() throws IOException { [EOL]     assertEquals("{\"foo\":{\"foo\":42}}", WRITER.writeValueAsString(new FooableWrapper())); [EOL] }
public void testSerializeAsForSimpleProp() throws IOException { [EOL]     assertEquals("{\"foo\":{\"foo\":42}}", WRITER.writeValueAsString(new FooableWrapper())); [EOL] }
public void testSerializeAsForSimpleProp() throws IOException { [EOL]     assertEquals("{\"foo\":{\"foo\":42}}", WRITER.writeValueAsString(new FooableWrapper())); [EOL] }
public void testSerializeAsForSimpleProp() throws IOException { [EOL]     assertEquals("{\"foo\":{\"foo\":42}}", WRITER.writeValueAsString(new FooableWrapper())); [EOL] }
public void testSerializeAsForSimpleProp() throws IOException { [EOL]     assertEquals("{\"foo\":{\"foo\":42}}", WRITER.writeValueAsString(new FooableWrapper())); [EOL] }
public void testCustomTypeIdResolver() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     List<JavaType> types = new ArrayList<JavaType>(); [EOL]     CustomResolver.initTypes = types; [EOL]     String json = m.writeValueAsString(new CustomBean[] { new CustomBean(28) }); [EOL]     assertEquals("[{\"*\":{\"x\":28}}]", json); [EOL]     assertEquals(1, types.size()); [EOL]     assertEquals(CustomBean.class, types.get(0).getRawClass()); [EOL]     types = new ArrayList<JavaType>(); [EOL]     CustomResolver.initTypes = types; [EOL]     CustomBean[] result = m.readValue(json, CustomBean[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.length); [EOL]     assertEquals(28, result[0].x); [EOL]     assertEquals(1, types.size()); [EOL]     assertEquals(CustomBean.class, types.get(0).getRawClass()); [EOL] }
public void testCustomTypeIdResolver() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     List<JavaType> types = new ArrayList<JavaType>(); [EOL]     CustomResolver.initTypes = types; [EOL]     String json = m.writeValueAsString(new CustomBean[] { new CustomBean(28) }); [EOL]     assertEquals("[{\"*\":{\"x\":28}}]", json); [EOL]     assertEquals(1, types.size()); [EOL]     assertEquals(CustomBean.class, types.get(0).getRawClass()); [EOL]     types = new ArrayList<JavaType>(); [EOL]     CustomResolver.initTypes = types; [EOL]     CustomBean[] result = m.readValue(json, CustomBean[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.length); [EOL]     assertEquals(28, result[0].x); [EOL]     assertEquals(1, types.size()); [EOL]     assertEquals(CustomBean.class, types.get(0).getRawClass()); [EOL] }
public void testCustomTypeIdResolver() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     List<JavaType> types = new ArrayList<JavaType>(); [EOL]     CustomResolver.initTypes = types; [EOL]     String json = m.writeValueAsString(new CustomBean[] { new CustomBean(28) }); [EOL]     assertEquals("[{\"*\":{\"x\":28}}]", json); [EOL]     assertEquals(1, types.size()); [EOL]     assertEquals(CustomBean.class, types.get(0).getRawClass()); [EOL]     types = new ArrayList<JavaType>(); [EOL]     CustomResolver.initTypes = types; [EOL]     CustomBean[] result = m.readValue(json, CustomBean[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.length); [EOL]     assertEquals(28, result[0].x); [EOL]     assertEquals(1, types.size()); [EOL]     assertEquals(CustomBean.class, types.get(0).getRawClass()); [EOL] }
public void testDefaultAsNoClass() throws Exception { [EOL]     Object ob = objectReader(DefaultWithNoClass.class).readValue("{ }"); [EOL]     assertNull(ob); [EOL]     ob = objectReader(DefaultWithNoClass.class).readValue("{ \"bogus\":3 }"); [EOL]     assertNull(ob); [EOL] }
public void testDefaultAsNoClass() throws Exception { [EOL]     Object ob = objectReader(DefaultWithNoClass.class).readValue("{ }"); [EOL]     assertNull(ob); [EOL]     ob = objectReader(DefaultWithNoClass.class).readValue("{ \"bogus\":3 }"); [EOL]     assertNull(ob); [EOL] }
public void testBasicsWithNullNode() throws Exception { [EOL]     NullNode n = NullNode.instance; [EOL]     assertFalse(n.isContainerNode()); [EOL]     assertFalse(n.isBigDecimal()); [EOL]     assertFalse(n.isBigInteger()); [EOL]     assertFalse(n.isBinary()); [EOL]     assertFalse(n.isBoolean()); [EOL]     assertFalse(n.isPojo()); [EOL]     assertFalse(n.isMissingNode()); [EOL]     assertFalse(n.booleanValue()); [EOL]     assertNull(n.numberValue()); [EOL]     assertEquals(0, n.intValue()); [EOL]     assertEquals(0L, n.longValue()); [EOL]     assertEquals(BigDecimal.ZERO, n.decimalValue()); [EOL]     assertEquals(BigInteger.ZERO, n.bigIntegerValue()); [EOL]     assertEquals(0, n.size()); [EOL]     assertFalse(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     assertNotNull(n.path("xyz")); [EOL]     assertTrue(n.path("xyz").isMissingNode()); [EOL]     assertFalse(n.has("field")); [EOL]     assertFalse(n.has(3)); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL] }
public void testBasicsWithNullNode() throws Exception { [EOL]     NullNode n = NullNode.instance; [EOL]     assertFalse(n.isContainerNode()); [EOL]     assertFalse(n.isBigDecimal()); [EOL]     assertFalse(n.isBigInteger()); [EOL]     assertFalse(n.isBinary()); [EOL]     assertFalse(n.isBoolean()); [EOL]     assertFalse(n.isPojo()); [EOL]     assertFalse(n.isMissingNode()); [EOL]     assertFalse(n.booleanValue()); [EOL]     assertNull(n.numberValue()); [EOL]     assertEquals(0, n.intValue()); [EOL]     assertEquals(0L, n.longValue()); [EOL]     assertEquals(BigDecimal.ZERO, n.decimalValue()); [EOL]     assertEquals(BigInteger.ZERO, n.bigIntegerValue()); [EOL]     assertEquals(0, n.size()); [EOL]     assertFalse(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     assertNotNull(n.path("xyz")); [EOL]     assertTrue(n.path("xyz").isMissingNode()); [EOL]     assertFalse(n.has("field")); [EOL]     assertFalse(n.has(3)); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL] }
public void testBasicsWithNullNode() throws Exception { [EOL]     NullNode n = NullNode.instance; [EOL]     assertFalse(n.isContainerNode()); [EOL]     assertFalse(n.isBigDecimal()); [EOL]     assertFalse(n.isBigInteger()); [EOL]     assertFalse(n.isBinary()); [EOL]     assertFalse(n.isBoolean()); [EOL]     assertFalse(n.isPojo()); [EOL]     assertFalse(n.isMissingNode()); [EOL]     assertFalse(n.booleanValue()); [EOL]     assertNull(n.numberValue()); [EOL]     assertEquals(0, n.intValue()); [EOL]     assertEquals(0L, n.longValue()); [EOL]     assertEquals(BigDecimal.ZERO, n.decimalValue()); [EOL]     assertEquals(BigInteger.ZERO, n.bigIntegerValue()); [EOL]     assertEquals(0, n.size()); [EOL]     assertFalse(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     assertNotNull(n.path("xyz")); [EOL]     assertTrue(n.path("xyz").isMissingNode()); [EOL]     assertFalse(n.has("field")); [EOL]     assertFalse(n.has(3)); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL] }
public void testMatchingMultiple() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     List<JsonNode> nodes = root.findValues("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertEquals(3, nodes.get(0).intValue()); [EOL]     assertEquals(42, nodes.get(1).intValue()); [EOL]     nodes = root.findParents("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertTrue(nodes.get(0).isObject()); [EOL]     assertTrue(nodes.get(1).isObject()); [EOL]     assertEquals(3, nodes.get(0).path("value").intValue()); [EOL]     assertEquals(42, nodes.get(1).path("value").intValue()); [EOL]     List<String> values = root.findValuesAsText("value"); [EOL]     assertEquals(2, values.size()); [EOL]     assertEquals("3", values.get(0)); [EOL]     assertEquals("42", values.get(1)); [EOL] }
public void testWithIdNone() throws Exception { [EOL]     final ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(); [EOL]     String json = mapper.writeValueAsString(new NoType()); [EOL]     assertEquals("{\"a\":3}", json); [EOL]     NoTypeInterface bean = mapper.readValue("{\"a\":6}", NoTypeInterface.class); [EOL]     assertNotNull(bean); [EOL]     NoType impl = (NoType) bean; [EOL]     assertEquals(6, impl.a); [EOL] }
public void testWithIdNone() throws Exception { [EOL]     final ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(); [EOL]     String json = mapper.writeValueAsString(new NoType()); [EOL]     assertEquals("{\"a\":3}", json); [EOL]     NoTypeInterface bean = mapper.readValue("{\"a\":6}", NoTypeInterface.class); [EOL]     assertNotNull(bean); [EOL]     NoType impl = (NoType) bean; [EOL]     assertEquals(6, impl.a); [EOL] }
public void testWithIdNone() throws Exception { [EOL]     final ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(); [EOL]     String json = mapper.writeValueAsString(new NoType()); [EOL]     assertEquals("{\"a\":3}", json); [EOL]     NoTypeInterface bean = mapper.readValue("{\"a\":6}", NoTypeInterface.class); [EOL]     assertNotNull(bean); [EOL]     NoType impl = (NoType) bean; [EOL]     assertEquals(6, impl.a); [EOL] }
public void testWithIdNone() throws Exception { [EOL]     final ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(); [EOL]     String json = mapper.writeValueAsString(new NoType()); [EOL]     assertEquals("{\"a\":3}", json); [EOL]     NoTypeInterface bean = mapper.readValue("{\"a\":6}", NoTypeInterface.class); [EOL]     assertNotNull(bean); [EOL]     NoType impl = (NoType) bean; [EOL]     assertEquals(6, impl.a); [EOL] }
public void testWithIdNone() throws Exception { [EOL]     final ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(); [EOL]     String json = mapper.writeValueAsString(new NoType()); [EOL]     assertEquals("{\"a\":3}", json); [EOL]     NoTypeInterface bean = mapper.readValue("{\"a\":6}", NoTypeInterface.class); [EOL]     assertNotNull(bean); [EOL]     NoType impl = (NoType) bean; [EOL]     assertEquals(6, impl.a); [EOL] }
public void testWithIdNone() throws Exception { [EOL]     final ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(); [EOL]     String json = mapper.writeValueAsString(new NoType()); [EOL]     assertEquals("{\"a\":3}", json); [EOL]     NoTypeInterface bean = mapper.readValue("{\"a\":6}", NoTypeInterface.class); [EOL]     assertNotNull(bean); [EOL]     NoType impl = (NoType) bean; [EOL]     assertEquals(6, impl.a); [EOL] }
public void testWithIdNone() throws Exception { [EOL]     final ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(); [EOL]     String json = mapper.writeValueAsString(new NoType()); [EOL]     assertEquals("{\"a\":3}", json); [EOL]     NoTypeInterface bean = mapper.readValue("{\"a\":6}", NoTypeInterface.class); [EOL]     assertNotNull(bean); [EOL]     NoType impl = (NoType) bean; [EOL]     assertEquals(6, impl.a); [EOL] }
public void testWithIdNone() throws Exception { [EOL]     final ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(); [EOL]     String json = mapper.writeValueAsString(new NoType()); [EOL]     assertEquals("{\"a\":3}", json); [EOL]     NoTypeInterface bean = mapper.readValue("{\"a\":6}", NoTypeInterface.class); [EOL]     assertNotNull(bean); [EOL]     NoType impl = (NoType) bean; [EOL]     assertEquals(6, impl.a); [EOL] }
public void testWithIdNone() throws Exception { [EOL]     final ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(); [EOL]     String json = mapper.writeValueAsString(new NoType()); [EOL]     assertEquals("{\"a\":3}", json); [EOL]     NoTypeInterface bean = mapper.readValue("{\"a\":6}", NoTypeInterface.class); [EOL]     assertNotNull(bean); [EOL]     NoType impl = (NoType) bean; [EOL]     assertEquals(6, impl.a); [EOL] }
public void testWithIdNone() throws Exception { [EOL]     final ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(); [EOL]     String json = mapper.writeValueAsString(new NoType()); [EOL]     assertEquals("{\"a\":3}", json); [EOL]     NoTypeInterface bean = mapper.readValue("{\"a\":6}", NoTypeInterface.class); [EOL]     assertNotNull(bean); [EOL]     NoType impl = (NoType) bean; [EOL]     assertEquals(6, impl.a); [EOL] }
public void testWithIdNone() throws Exception { [EOL]     final ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(); [EOL]     String json = mapper.writeValueAsString(new NoType()); [EOL]     assertEquals("{\"a\":3}", json); [EOL]     NoTypeInterface bean = mapper.readValue("{\"a\":6}", NoTypeInterface.class); [EOL]     assertNotNull(bean); [EOL]     NoType impl = (NoType) bean; [EOL]     assertEquals(6, impl.a); [EOL] }
public void testWithIdNone() throws Exception { [EOL]     final ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(); [EOL]     String json = mapper.writeValueAsString(new NoType()); [EOL]     assertEquals("{\"a\":3}", json); [EOL]     NoTypeInterface bean = mapper.readValue("{\"a\":6}", NoTypeInterface.class); [EOL]     assertNotNull(bean); [EOL]     NoType impl = (NoType) bean; [EOL]     assertEquals(6, impl.a); [EOL] }
public void testWithIdNone() throws Exception { [EOL]     final ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(); [EOL]     String json = mapper.writeValueAsString(new NoType()); [EOL]     assertEquals("{\"a\":3}", json); [EOL]     NoTypeInterface bean = mapper.readValue("{\"a\":6}", NoTypeInterface.class); [EOL]     assertNotNull(bean); [EOL]     NoType impl = (NoType) bean; [EOL]     assertEquals(6, impl.a); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testBooleanListAsProp() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\"" + TypedListAsProp.class.getName() + "\",[true, false]]"; [EOL]     JavaType type = TypeFactory.defaultInstance().constructCollectionType(TypedListAsProp.class, Boolean.class); [EOL]     TypedListAsProp<Object> result = m.readValue(JSON, type); [EOL]     assertNotNull(result); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(Boolean.TRUE, result.get(0)); [EOL]     assertEquals(Boolean.FALSE, result.get(1)); [EOL] }
public void testBooleanListAsProp() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\"" + TypedListAsProp.class.getName() + "\",[true, false]]"; [EOL]     JavaType type = TypeFactory.defaultInstance().constructCollectionType(TypedListAsProp.class, Boolean.class); [EOL]     TypedListAsProp<Object> result = m.readValue(JSON, type); [EOL]     assertNotNull(result); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(Boolean.TRUE, result.get(0)); [EOL]     assertEquals(Boolean.FALSE, result.get(1)); [EOL] }
public void testEmptyCollection() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(SerializationFeature.INDENT_OUTPUT, true); [EOL]     List<User> friends = new ArrayList<User>(); [EOL]     friends.add(new DefaultUser("Joe Hildebrandt", null)); [EOL]     friends.add(new DefaultEmployee("Richard Nasr", null, "MDA")); [EOL]     User user = new DefaultEmployee("John Vanspronssen", friends, "MDA"); [EOL]     String json = mapper.writeValueAsString(user); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(DefaultEmployee.class); [EOL]     mapper.registerSubtypes(DefaultUser.class); [EOL]     User result = mapper.readValue(json, User.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(DefaultEmployee.class, result.getClass()); [EOL]     friends = result.getFriends(); [EOL]     assertEquals(2, friends.size()); [EOL]     assertEquals(DefaultUser.class, friends.get(0).getClass()); [EOL]     assertEquals(DefaultEmployee.class, friends.get(1).getClass()); [EOL] }
public void testEmptyCollection() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(SerializationFeature.INDENT_OUTPUT, true); [EOL]     List<User> friends = new ArrayList<User>(); [EOL]     friends.add(new DefaultUser("Joe Hildebrandt", null)); [EOL]     friends.add(new DefaultEmployee("Richard Nasr", null, "MDA")); [EOL]     User user = new DefaultEmployee("John Vanspronssen", friends, "MDA"); [EOL]     String json = mapper.writeValueAsString(user); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(DefaultEmployee.class); [EOL]     mapper.registerSubtypes(DefaultUser.class); [EOL]     User result = mapper.readValue(json, User.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(DefaultEmployee.class, result.getClass()); [EOL]     friends = result.getFriends(); [EOL]     assertEquals(2, friends.size()); [EOL]     assertEquals(DefaultUser.class, friends.get(0).getClass()); [EOL]     assertEquals(DefaultEmployee.class, friends.get(1).getClass()); [EOL] }
public void testEmptyCollection() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(SerializationFeature.INDENT_OUTPUT, true); [EOL]     List<User> friends = new ArrayList<User>(); [EOL]     friends.add(new DefaultUser("Joe Hildebrandt", null)); [EOL]     friends.add(new DefaultEmployee("Richard Nasr", null, "MDA")); [EOL]     User user = new DefaultEmployee("John Vanspronssen", friends, "MDA"); [EOL]     String json = mapper.writeValueAsString(user); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(DefaultEmployee.class); [EOL]     mapper.registerSubtypes(DefaultUser.class); [EOL]     User result = mapper.readValue(json, User.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(DefaultEmployee.class, result.getClass()); [EOL]     friends = result.getFriends(); [EOL]     assertEquals(2, friends.size()); [EOL]     assertEquals(DefaultUser.class, friends.get(0).getClass()); [EOL]     assertEquals(DefaultEmployee.class, friends.get(1).getClass()); [EOL] }
public void testEmptyCollection() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(SerializationFeature.INDENT_OUTPUT, true); [EOL]     List<User> friends = new ArrayList<User>(); [EOL]     friends.add(new DefaultUser("Joe Hildebrandt", null)); [EOL]     friends.add(new DefaultEmployee("Richard Nasr", null, "MDA")); [EOL]     User user = new DefaultEmployee("John Vanspronssen", friends, "MDA"); [EOL]     String json = mapper.writeValueAsString(user); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(DefaultEmployee.class); [EOL]     mapper.registerSubtypes(DefaultUser.class); [EOL]     User result = mapper.readValue(json, User.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(DefaultEmployee.class, result.getClass()); [EOL]     friends = result.getFriends(); [EOL]     assertEquals(2, friends.size()); [EOL]     assertEquals(DefaultUser.class, friends.get(0).getClass()); [EOL]     assertEquals(DefaultEmployee.class, friends.get(1).getClass()); [EOL] }
public void testArrayType() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType arrayT = ArrayType.construct(tf.constructType(String.class), null, null); [EOL]     assertNotNull(arrayT); [EOL]     assertTrue(arrayT.isContainerType()); [EOL]     assertSame(arrayT, arrayT.narrowContentsBy(String.class)); [EOL]     assertNotNull(arrayT.toString()); [EOL]     assertTrue(arrayT.equals(arrayT)); [EOL]     assertFalse(arrayT.equals(null)); [EOL]     assertFalse(arrayT.equals("xyz")); [EOL]     assertTrue(arrayT.equals(ArrayType.construct(tf.constructType(String.class), null, null))); [EOL]     assertFalse(arrayT.equals(ArrayType.construct(tf.constructType(Integer.class), null, null))); [EOL]     try { [EOL]         SimpleType.construct(String[].class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "for an array"); [EOL]     } [EOL] }
public void testArrayType() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType arrayT = ArrayType.construct(tf.constructType(String.class), null, null); [EOL]     assertNotNull(arrayT); [EOL]     assertTrue(arrayT.isContainerType()); [EOL]     assertSame(arrayT, arrayT.narrowContentsBy(String.class)); [EOL]     assertNotNull(arrayT.toString()); [EOL]     assertTrue(arrayT.equals(arrayT)); [EOL]     assertFalse(arrayT.equals(null)); [EOL]     assertFalse(arrayT.equals("xyz")); [EOL]     assertTrue(arrayT.equals(ArrayType.construct(tf.constructType(String.class), null, null))); [EOL]     assertFalse(arrayT.equals(ArrayType.construct(tf.constructType(Integer.class), null, null))); [EOL]     try { [EOL]         SimpleType.construct(String[].class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "for an array"); [EOL]     } [EOL] }
public void testArrayType() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType arrayT = ArrayType.construct(tf.constructType(String.class), null, null); [EOL]     assertNotNull(arrayT); [EOL]     assertTrue(arrayT.isContainerType()); [EOL]     assertSame(arrayT, arrayT.narrowContentsBy(String.class)); [EOL]     assertNotNull(arrayT.toString()); [EOL]     assertTrue(arrayT.equals(arrayT)); [EOL]     assertFalse(arrayT.equals(null)); [EOL]     assertFalse(arrayT.equals("xyz")); [EOL]     assertTrue(arrayT.equals(ArrayType.construct(tf.constructType(String.class), null, null))); [EOL]     assertFalse(arrayT.equals(ArrayType.construct(tf.constructType(Integer.class), null, null))); [EOL]     try { [EOL]         SimpleType.construct(String[].class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "for an array"); [EOL]     } [EOL] }
public void testArrayType() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType arrayT = ArrayType.construct(tf.constructType(String.class), null, null); [EOL]     assertNotNull(arrayT); [EOL]     assertTrue(arrayT.isContainerType()); [EOL]     assertSame(arrayT, arrayT.narrowContentsBy(String.class)); [EOL]     assertNotNull(arrayT.toString()); [EOL]     assertTrue(arrayT.equals(arrayT)); [EOL]     assertFalse(arrayT.equals(null)); [EOL]     assertFalse(arrayT.equals("xyz")); [EOL]     assertTrue(arrayT.equals(ArrayType.construct(tf.constructType(String.class), null, null))); [EOL]     assertFalse(arrayT.equals(ArrayType.construct(tf.constructType(Integer.class), null, null))); [EOL]     try { [EOL]         SimpleType.construct(String[].class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "for an array"); [EOL]     } [EOL] }
public void testArrayType() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType arrayT = ArrayType.construct(tf.constructType(String.class), null, null); [EOL]     assertNotNull(arrayT); [EOL]     assertTrue(arrayT.isContainerType()); [EOL]     assertSame(arrayT, arrayT.narrowContentsBy(String.class)); [EOL]     assertNotNull(arrayT.toString()); [EOL]     assertTrue(arrayT.equals(arrayT)); [EOL]     assertFalse(arrayT.equals(null)); [EOL]     assertFalse(arrayT.equals("xyz")); [EOL]     assertTrue(arrayT.equals(ArrayType.construct(tf.constructType(String.class), null, null))); [EOL]     assertFalse(arrayT.equals(ArrayType.construct(tf.constructType(Integer.class), null, null))); [EOL]     try { [EOL]         SimpleType.construct(String[].class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "for an array"); [EOL]     } [EOL] }
public void testArrayType() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType arrayT = ArrayType.construct(tf.constructType(String.class), null, null); [EOL]     assertNotNull(arrayT); [EOL]     assertTrue(arrayT.isContainerType()); [EOL]     assertSame(arrayT, arrayT.narrowContentsBy(String.class)); [EOL]     assertNotNull(arrayT.toString()); [EOL]     assertTrue(arrayT.equals(arrayT)); [EOL]     assertFalse(arrayT.equals(null)); [EOL]     assertFalse(arrayT.equals("xyz")); [EOL]     assertTrue(arrayT.equals(ArrayType.construct(tf.constructType(String.class), null, null))); [EOL]     assertFalse(arrayT.equals(ArrayType.construct(tf.constructType(Integer.class), null, null))); [EOL]     try { [EOL]         SimpleType.construct(String[].class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "for an array"); [EOL]     } [EOL] }
public void testArrayType() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType arrayT = ArrayType.construct(tf.constructType(String.class), null, null); [EOL]     assertNotNull(arrayT); [EOL]     assertTrue(arrayT.isContainerType()); [EOL]     assertSame(arrayT, arrayT.narrowContentsBy(String.class)); [EOL]     assertNotNull(arrayT.toString()); [EOL]     assertTrue(arrayT.equals(arrayT)); [EOL]     assertFalse(arrayT.equals(null)); [EOL]     assertFalse(arrayT.equals("xyz")); [EOL]     assertTrue(arrayT.equals(ArrayType.construct(tf.constructType(String.class), null, null))); [EOL]     assertFalse(arrayT.equals(ArrayType.construct(tf.constructType(Integer.class), null, null))); [EOL]     try { [EOL]         SimpleType.construct(String[].class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "for an array"); [EOL]     } [EOL] }
public void testArrayType() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType arrayT = ArrayType.construct(tf.constructType(String.class), null, null); [EOL]     assertNotNull(arrayT); [EOL]     assertTrue(arrayT.isContainerType()); [EOL]     assertSame(arrayT, arrayT.narrowContentsBy(String.class)); [EOL]     assertNotNull(arrayT.toString()); [EOL]     assertTrue(arrayT.equals(arrayT)); [EOL]     assertFalse(arrayT.equals(null)); [EOL]     assertFalse(arrayT.equals("xyz")); [EOL]     assertTrue(arrayT.equals(ArrayType.construct(tf.constructType(String.class), null, null))); [EOL]     assertFalse(arrayT.equals(ArrayType.construct(tf.constructType(Integer.class), null, null))); [EOL]     try { [EOL]         SimpleType.construct(String[].class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "for an array"); [EOL]     } [EOL] }
public void testArrayType() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType arrayT = ArrayType.construct(tf.constructType(String.class), null, null); [EOL]     assertNotNull(arrayT); [EOL]     assertTrue(arrayT.isContainerType()); [EOL]     assertSame(arrayT, arrayT.narrowContentsBy(String.class)); [EOL]     assertNotNull(arrayT.toString()); [EOL]     assertTrue(arrayT.equals(arrayT)); [EOL]     assertFalse(arrayT.equals(null)); [EOL]     assertFalse(arrayT.equals("xyz")); [EOL]     assertTrue(arrayT.equals(ArrayType.construct(tf.constructType(String.class), null, null))); [EOL]     assertFalse(arrayT.equals(ArrayType.construct(tf.constructType(Integer.class), null, null))); [EOL]     try { [EOL]         SimpleType.construct(String[].class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "for an array"); [EOL]     } [EOL] }
public void testPropertyAnnotationArrayLC() throws Exception { [EOL]     LowerCaseTextArray texts = objectReader(LowerCaseTextArray.class).readValue("{\"texts\":[\"ABC\"]}"); [EOL]     assertNotNull(texts); [EOL]     assertNotNull(texts.texts); [EOL]     assertEquals(1, texts.texts.length); [EOL]     assertEquals("abc", texts.texts[0]); [EOL] }
public void testPropertyAnnotationArrayLC() throws Exception { [EOL]     LowerCaseTextArray texts = objectReader(LowerCaseTextArray.class).readValue("{\"texts\":[\"ABC\"]}"); [EOL]     assertNotNull(texts); [EOL]     assertNotNull(texts.texts); [EOL]     assertEquals(1, texts.texts.length); [EOL]     assertEquals("abc", texts.texts[0]); [EOL] }
public void testPropertyAnnotationArrayLC() throws Exception { [EOL]     LowerCaseTextArray texts = objectReader(LowerCaseTextArray.class).readValue("{\"texts\":[\"ABC\"]}"); [EOL]     assertNotNull(texts); [EOL]     assertNotNull(texts.texts); [EOL]     assertEquals(1, texts.texts.length); [EOL]     assertEquals("abc", texts.texts[0]); [EOL] }
public void testPropertyAnnotationArrayLC() throws Exception { [EOL]     LowerCaseTextArray texts = objectReader(LowerCaseTextArray.class).readValue("{\"texts\":[\"ABC\"]}"); [EOL]     assertNotNull(texts); [EOL]     assertNotNull(texts.texts); [EOL]     assertEquals(1, texts.texts.length); [EOL]     assertEquals("abc", texts.texts[0]); [EOL] }
public void testPropertyAnnotationArrayLC() throws Exception { [EOL]     LowerCaseTextArray texts = objectReader(LowerCaseTextArray.class).readValue("{\"texts\":[\"ABC\"]}"); [EOL]     assertNotNull(texts); [EOL]     assertNotNull(texts.texts); [EOL]     assertEquals(1, texts.texts.length); [EOL]     assertEquals("abc", texts.texts[0]); [EOL] }
public void testPropertyAnnotationArrayLC() throws Exception { [EOL]     LowerCaseTextArray texts = objectReader(LowerCaseTextArray.class).readValue("{\"texts\":[\"ABC\"]}"); [EOL]     assertNotNull(texts); [EOL]     assertNotNull(texts.texts); [EOL]     assertEquals(1, texts.texts.length); [EOL]     assertEquals("abc", texts.texts[0]); [EOL] }
public void testPropertyAnnotationArrayLC() throws Exception { [EOL]     LowerCaseTextArray texts = objectReader(LowerCaseTextArray.class).readValue("{\"texts\":[\"ABC\"]}"); [EOL]     assertNotNull(texts); [EOL]     assertNotNull(texts.texts); [EOL]     assertEquals(1, texts.texts.length); [EOL]     assertEquals("abc", texts.texts[0]); [EOL] }
public void testPropertyAnnotationArrayLC() throws Exception { [EOL]     LowerCaseTextArray texts = objectReader(LowerCaseTextArray.class).readValue("{\"texts\":[\"ABC\"]}"); [EOL]     assertNotNull(texts); [EOL]     assertNotNull(texts.texts); [EOL]     assertEquals(1, texts.texts.length); [EOL]     assertEquals("abc", texts.texts[0]); [EOL] }
public void testPropertyAnnotationArrayLC() throws Exception { [EOL]     LowerCaseTextArray texts = objectReader(LowerCaseTextArray.class).readValue("{\"texts\":[\"ABC\"]}"); [EOL]     assertNotNull(texts); [EOL]     assertNotNull(texts.texts); [EOL]     assertEquals(1, texts.texts.length); [EOL]     assertEquals("abc", texts.texts[0]); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testImplicitArrays() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true); [EOL]     List<Integer> ints = mapper.readValue("4", List.class); [EOL]     assertEquals(1, ints.size()); [EOL]     assertEquals(Integer.valueOf(4), ints.get(0)); [EOL]     List<String> strings = mapper.readValue(quote("abc"), new TypeReference<ArrayList<String>>() { [EOL]     }); [EOL]     assertEquals(1, strings.size()); [EOL]     assertEquals("abc", strings.get(0)); [EOL]     int[] intArray = mapper.readValue("-7", int[].class); [EOL]     assertEquals(1, intArray.length); [EOL]     assertEquals(-7, intArray[0]); [EOL]     String[] stringArray = mapper.readValue(quote("xyz"), String[].class); [EOL]     assertEquals(1, stringArray.length); [EOL]     assertEquals("xyz", stringArray[0]); [EOL]     List<XBean> xbeanList = mapper.readValue("{\"x\":4}", new TypeReference<List<XBean>>() { [EOL]     }); [EOL]     assertEquals(1, xbeanList.size()); [EOL]     assertEquals(XBean.class, xbeanList.get(0).getClass()); [EOL]     Object ob = mapper.readValue("{\"x\":29}", XBean[].class); [EOL]     XBean[] xbeanArray = (XBean[]) ob; [EOL]     assertEquals(1, xbeanArray.length); [EOL]     assertEquals(XBean.class, xbeanArray[0].getClass()); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testImplicitArrays() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true); [EOL]     List<Integer> ints = mapper.readValue("4", List.class); [EOL]     assertEquals(1, ints.size()); [EOL]     assertEquals(Integer.valueOf(4), ints.get(0)); [EOL]     List<String> strings = mapper.readValue(quote("abc"), new TypeReference<ArrayList<String>>() { [EOL]     }); [EOL]     assertEquals(1, strings.size()); [EOL]     assertEquals("abc", strings.get(0)); [EOL]     int[] intArray = mapper.readValue("-7", int[].class); [EOL]     assertEquals(1, intArray.length); [EOL]     assertEquals(-7, intArray[0]); [EOL]     String[] stringArray = mapper.readValue(quote("xyz"), String[].class); [EOL]     assertEquals(1, stringArray.length); [EOL]     assertEquals("xyz", stringArray[0]); [EOL]     List<XBean> xbeanList = mapper.readValue("{\"x\":4}", new TypeReference<List<XBean>>() { [EOL]     }); [EOL]     assertEquals(1, xbeanList.size()); [EOL]     assertEquals(XBean.class, xbeanList.get(0).getClass()); [EOL]     Object ob = mapper.readValue("{\"x\":29}", XBean[].class); [EOL]     XBean[] xbeanArray = (XBean[]) ob; [EOL]     assertEquals(1, xbeanArray.length); [EOL]     assertEquals(XBean.class, xbeanArray[0].getClass()); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testImplicitArrays() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true); [EOL]     List<Integer> ints = mapper.readValue("4", List.class); [EOL]     assertEquals(1, ints.size()); [EOL]     assertEquals(Integer.valueOf(4), ints.get(0)); [EOL]     List<String> strings = mapper.readValue(quote("abc"), new TypeReference<ArrayList<String>>() { [EOL]     }); [EOL]     assertEquals(1, strings.size()); [EOL]     assertEquals("abc", strings.get(0)); [EOL]     int[] intArray = mapper.readValue("-7", int[].class); [EOL]     assertEquals(1, intArray.length); [EOL]     assertEquals(-7, intArray[0]); [EOL]     String[] stringArray = mapper.readValue(quote("xyz"), String[].class); [EOL]     assertEquals(1, stringArray.length); [EOL]     assertEquals("xyz", stringArray[0]); [EOL]     List<XBean> xbeanList = mapper.readValue("{\"x\":4}", new TypeReference<List<XBean>>() { [EOL]     }); [EOL]     assertEquals(1, xbeanList.size()); [EOL]     assertEquals(XBean.class, xbeanList.get(0).getClass()); [EOL]     Object ob = mapper.readValue("{\"x\":29}", XBean[].class); [EOL]     XBean[] xbeanArray = (XBean[]) ob; [EOL]     assertEquals(1, xbeanArray.length); [EOL]     assertEquals(XBean.class, xbeanArray[0].getClass()); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testImplicitArrays() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true); [EOL]     List<Integer> ints = mapper.readValue("4", List.class); [EOL]     assertEquals(1, ints.size()); [EOL]     assertEquals(Integer.valueOf(4), ints.get(0)); [EOL]     List<String> strings = mapper.readValue(quote("abc"), new TypeReference<ArrayList<String>>() { [EOL]     }); [EOL]     assertEquals(1, strings.size()); [EOL]     assertEquals("abc", strings.get(0)); [EOL]     int[] intArray = mapper.readValue("-7", int[].class); [EOL]     assertEquals(1, intArray.length); [EOL]     assertEquals(-7, intArray[0]); [EOL]     String[] stringArray = mapper.readValue(quote("xyz"), String[].class); [EOL]     assertEquals(1, stringArray.length); [EOL]     assertEquals("xyz", stringArray[0]); [EOL]     List<XBean> xbeanList = mapper.readValue("{\"x\":4}", new TypeReference<List<XBean>>() { [EOL]     }); [EOL]     assertEquals(1, xbeanList.size()); [EOL]     assertEquals(XBean.class, xbeanList.get(0).getClass()); [EOL]     Object ob = mapper.readValue("{\"x\":29}", XBean[].class); [EOL]     XBean[] xbeanArray = (XBean[]) ob; [EOL]     assertEquals(1, xbeanArray.length); [EOL]     assertEquals(XBean.class, xbeanArray[0].getClass()); [EOL] }
public void testPropertyAnnotationArrayLC() throws Exception { [EOL]     LowerCaseTextArray texts = objectReader(LowerCaseTextArray.class).readValue("{\"texts\":[\"ABC\"]}"); [EOL]     assertNotNull(texts); [EOL]     assertNotNull(texts.texts); [EOL]     assertEquals(1, texts.texts.length); [EOL]     assertEquals("abc", texts.texts[0]); [EOL] }
public void testPropertyAnnotationArrayLC() throws Exception { [EOL]     LowerCaseTextArray texts = objectReader(LowerCaseTextArray.class).readValue("{\"texts\":[\"ABC\"]}"); [EOL]     assertNotNull(texts); [EOL]     assertNotNull(texts.texts); [EOL]     assertEquals(1, texts.texts.length); [EOL]     assertEquals("abc", texts.texts[0]); [EOL] }
public void testPropertyAnnotationArrayLC() throws Exception { [EOL]     LowerCaseTextArray texts = objectReader(LowerCaseTextArray.class).readValue("{\"texts\":[\"ABC\"]}"); [EOL]     assertNotNull(texts); [EOL]     assertNotNull(texts.texts); [EOL]     assertEquals(1, texts.texts.length); [EOL]     assertEquals("abc", texts.texts[0]); [EOL] }
public void testPropertyAnnotationArrayLC() throws Exception { [EOL]     LowerCaseTextArray texts = objectReader(LowerCaseTextArray.class).readValue("{\"texts\":[\"ABC\"]}"); [EOL]     assertNotNull(texts); [EOL]     assertNotNull(texts.texts); [EOL]     assertEquals(1, texts.texts.length); [EOL]     assertEquals("abc", texts.texts[0]); [EOL] }
public void testPropertyAnnotationArrayLC() throws Exception { [EOL]     LowerCaseTextArray texts = objectReader(LowerCaseTextArray.class).readValue("{\"texts\":[\"ABC\"]}"); [EOL]     assertNotNull(texts); [EOL]     assertNotNull(texts.texts); [EOL]     assertEquals(1, texts.texts.length); [EOL]     assertEquals("abc", texts.texts[0]); [EOL] }
public void testPolymorphicRoundtrip() throws Exception { [EOL]     Impl in1 = new Impl(123, 456); [EOL]     in1.next = new Impl(111, 222); [EOL]     in1.next.next = in1; [EOL]     String json = mapper.writeValueAsString(in1); [EOL]     Base result0 = mapper.readValue(json, Base.class); [EOL]     assertNotNull(result0); [EOL]     assertSame(Impl.class, result0.getClass()); [EOL]     Impl result = (Impl) result0; [EOL]     assertEquals(123, result.value); [EOL]     assertEquals(456, result.extra); [EOL]     Impl result2 = (Impl) result.next; [EOL]     assertEquals(111, result2.value); [EOL]     assertEquals(222, result2.extra); [EOL]     assertSame(result, result2.next); [EOL] }
public void testPolymorphicRoundtrip() throws Exception { [EOL]     Impl in1 = new Impl(123, 456); [EOL]     in1.next = new Impl(111, 222); [EOL]     in1.next.next = in1; [EOL]     String json = mapper.writeValueAsString(in1); [EOL]     Base result0 = mapper.readValue(json, Base.class); [EOL]     assertNotNull(result0); [EOL]     assertSame(Impl.class, result0.getClass()); [EOL]     Impl result = (Impl) result0; [EOL]     assertEquals(123, result.value); [EOL]     assertEquals(456, result.extra); [EOL]     Impl result2 = (Impl) result.next; [EOL]     assertEquals(111, result2.value); [EOL]     assertEquals(222, result2.extra); [EOL]     assertSame(result, result2.next); [EOL] }
public void testImmutable() throws Exception { [EOL]     final String json = "{\"value\":13}"; [EOL]     ValueImmutable value = mapper.readValue(json, ValueImmutable.class); [EOL]     assertEquals(13, value.value); [EOL] }
public void testImmutable() throws Exception { [EOL]     final String json = "{\"value\":13}"; [EOL]     ValueImmutable value = mapper.readValue(json, ValueImmutable.class); [EOL]     assertEquals(13, value.value); [EOL] }
public void testImmutable() throws Exception { [EOL]     final String json = "{\"value\":13}"; [EOL]     ValueImmutable value = mapper.readValue(json, ValueImmutable.class); [EOL]     assertEquals(13, value.value); [EOL] }
public void testPolymorphicRoundtrip() throws Exception { [EOL]     Impl in1 = new Impl(123, 456); [EOL]     in1.next = new Impl(111, 222); [EOL]     in1.next.next = in1; [EOL]     String json = mapper.writeValueAsString(in1); [EOL]     Base result0 = mapper.readValue(json, Base.class); [EOL]     assertNotNull(result0); [EOL]     assertSame(Impl.class, result0.getClass()); [EOL]     Impl result = (Impl) result0; [EOL]     assertEquals(123, result.value); [EOL]     assertEquals(456, result.extra); [EOL]     Impl result2 = (Impl) result.next; [EOL]     assertEquals(111, result2.value); [EOL]     assertEquals(222, result2.extra); [EOL]     assertSame(result, result2.next); [EOL] }
public void testPolymorphicRoundtrip() throws Exception { [EOL]     Impl in1 = new Impl(123, 456); [EOL]     in1.next = new Impl(111, 222); [EOL]     in1.next.next = in1; [EOL]     String json = mapper.writeValueAsString(in1); [EOL]     Base result0 = mapper.readValue(json, Base.class); [EOL]     assertNotNull(result0); [EOL]     assertSame(Impl.class, result0.getClass()); [EOL]     Impl result = (Impl) result0; [EOL]     assertEquals(123, result.value); [EOL]     assertEquals(456, result.extra); [EOL]     Impl result2 = (Impl) result.next; [EOL]     assertEquals(111, result2.value); [EOL]     assertEquals(222, result2.extra); [EOL]     assertSame(result, result2.next); [EOL] }
public void testPolymorphicRoundtrip() throws Exception { [EOL]     Impl in1 = new Impl(123, 456); [EOL]     in1.next = new Impl(111, 222); [EOL]     in1.next.next = in1; [EOL]     String json = mapper.writeValueAsString(in1); [EOL]     Base result0 = mapper.readValue(json, Base.class); [EOL]     assertNotNull(result0); [EOL]     assertSame(Impl.class, result0.getClass()); [EOL]     Impl result = (Impl) result0; [EOL]     assertEquals(123, result.value); [EOL]     assertEquals(456, result.extra); [EOL]     Impl result2 = (Impl) result.next; [EOL]     assertEquals(111, result2.value); [EOL]     assertEquals(222, result2.extra); [EOL]     assertSame(result, result2.next); [EOL] }
public void testImmutable() throws Exception { [EOL]     final String json = "{\"value\":13}"; [EOL]     ValueImmutable value = mapper.readValue(json, ValueImmutable.class); [EOL]     assertEquals(13, value.value); [EOL] }
public void testImmutable() throws Exception { [EOL]     final String json = "{\"value\":13}"; [EOL]     ValueImmutable value = mapper.readValue(json, ValueImmutable.class); [EOL]     assertEquals(13, value.value); [EOL] }
public void testImmutable() throws Exception { [EOL]     final String json = "{\"value\":13}"; [EOL]     ValueImmutable value = mapper.readValue(json, ValueImmutable.class); [EOL]     assertEquals(13, value.value); [EOL] }
public void testImmutable() throws Exception { [EOL]     final String json = "{\"value\":13}"; [EOL]     ValueImmutable value = mapper.readValue(json, ValueImmutable.class); [EOL]     assertEquals(13, value.value); [EOL] }
public void testImmutable() throws Exception { [EOL]     final String json = "{\"value\":13}"; [EOL]     ValueImmutable value = mapper.readValue(json, ValueImmutable.class); [EOL]     assertEquals(13, value.value); [EOL] }
public void testImmutable() throws Exception { [EOL]     final String json = "{\"value\":13}"; [EOL]     ValueImmutable value = mapper.readValue(json, ValueImmutable.class); [EOL]     assertEquals(13, value.value); [EOL] }
public void testImmutable() throws Exception { [EOL]     final String json = "{\"value\":13}"; [EOL]     ValueImmutable value = mapper.readValue(json, ValueImmutable.class); [EOL]     assertEquals(13, value.value); [EOL] }
public void testFloatArray() throws Exception { [EOL]     final int LEN = 7000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(i).append('.').append(i % 10); [EOL]     } [EOL]     sb.append(']'); [EOL]     float[] result = MAPPER.readValue(sb.toString(), float[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         String expStr = String.valueOf(i) + "." + String.valueOf(i % 10); [EOL]         assertEquals(expStr, String.valueOf(result[i])); [EOL]     } [EOL] }
public void testFloatArray() throws Exception { [EOL]     final int LEN = 7000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(i).append('.').append(i % 10); [EOL]     } [EOL]     sb.append(']'); [EOL]     float[] result = MAPPER.readValue(sb.toString(), float[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         String expStr = String.valueOf(i) + "." + String.valueOf(i % 10); [EOL]         assertEquals(expStr, String.valueOf(result[i])); [EOL]     } [EOL] }
public void testFloatArray() throws Exception { [EOL]     final int LEN = 7000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(i).append('.').append(i % 10); [EOL]     } [EOL]     sb.append(']'); [EOL]     float[] result = MAPPER.readValue(sb.toString(), float[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         String expStr = String.valueOf(i) + "." + String.valueOf(i % 10); [EOL]         assertEquals(expStr, String.valueOf(result[i])); [EOL]     } [EOL] }
public void testFloatArray() throws Exception { [EOL]     final int LEN = 7000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(i).append('.').append(i % 10); [EOL]     } [EOL]     sb.append(']'); [EOL]     float[] result = MAPPER.readValue(sb.toString(), float[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         String expStr = String.valueOf(i) + "." + String.valueOf(i % 10); [EOL]         assertEquals(expStr, String.valueOf(result[i])); [EOL]     } [EOL] }
public void testFloatArray() throws Exception { [EOL]     final int LEN = 7000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(i).append('.').append(i % 10); [EOL]     } [EOL]     sb.append(']'); [EOL]     float[] result = MAPPER.readValue(sb.toString(), float[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         String expStr = String.valueOf(i) + "." + String.valueOf(i % 10); [EOL]         assertEquals(expStr, String.valueOf(result[i])); [EOL]     } [EOL] }
public void testFloatArray() throws Exception { [EOL]     final int LEN = 7000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(i).append('.').append(i % 10); [EOL]     } [EOL]     sb.append(']'); [EOL]     float[] result = MAPPER.readValue(sb.toString(), float[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         String expStr = String.valueOf(i) + "." + String.valueOf(i % 10); [EOL]         assertEquals(expStr, String.valueOf(result[i])); [EOL]     } [EOL] }
public void testFloatArray() throws Exception { [EOL]     final int LEN = 7000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(i).append('.').append(i % 10); [EOL]     } [EOL]     sb.append(']'); [EOL]     float[] result = MAPPER.readValue(sb.toString(), float[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         String expStr = String.valueOf(i) + "." + String.valueOf(i % 10); [EOL]         assertEquals(expStr, String.valueOf(result[i])); [EOL]     } [EOL] }
public void testFloatArray() throws Exception { [EOL]     final int LEN = 7000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(i).append('.').append(i % 10); [EOL]     } [EOL]     sb.append(']'); [EOL]     float[] result = MAPPER.readValue(sb.toString(), float[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         String expStr = String.valueOf(i) + "." + String.valueOf(i % 10); [EOL]         assertEquals(expStr, String.valueOf(result[i])); [EOL]     } [EOL] }
public void testFloatArray() throws Exception { [EOL]     final int LEN = 7000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(i).append('.').append(i % 10); [EOL]     } [EOL]     sb.append(']'); [EOL]     float[] result = MAPPER.readValue(sb.toString(), float[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         String expStr = String.valueOf(i) + "." + String.valueOf(i % 10); [EOL]         assertEquals(expStr, String.valueOf(result[i])); [EOL]     } [EOL] }
public void testFloatArray() throws Exception { [EOL]     final int LEN = 7000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(i).append('.').append(i % 10); [EOL]     } [EOL]     sb.append(']'); [EOL]     float[] result = MAPPER.readValue(sb.toString(), float[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         String expStr = String.valueOf(i) + "." + String.valueOf(i % 10); [EOL]         assertEquals(expStr, String.valueOf(result[i])); [EOL]     } [EOL] }
public void testFloatArray() throws Exception { [EOL]     final int LEN = 7000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(i).append('.').append(i % 10); [EOL]     } [EOL]     sb.append(']'); [EOL]     float[] result = MAPPER.readValue(sb.toString(), float[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         String expStr = String.valueOf(i) + "." + String.valueOf(i % 10); [EOL]         assertEquals(expStr, String.valueOf(result[i])); [EOL]     } [EOL] }
public void testFloatArray() throws Exception { [EOL]     final int LEN = 7000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(i).append('.').append(i % 10); [EOL]     } [EOL]     sb.append(']'); [EOL]     float[] result = MAPPER.readValue(sb.toString(), float[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         String expStr = String.valueOf(i) + "." + String.valueOf(i % 10); [EOL]         assertEquals(expStr, String.valueOf(result[i])); [EOL]     } [EOL] }
public void testNonRootMapsWithObjectReader() throws Exception { [EOL]     String JSON = "[{ \"hi\": \"ho\", \"neighbor\": \"Joe\" },\n" + "{\"boy\": \"howdy\", \"huh\": \"what\"}]"; [EOL]     final MappingIterator<Map<String, Object>> iterator = MAPPER.reader().withType(new TypeReference<Map<String, Object>>() { [EOL]     }).readValues(JSON); [EOL]     Map<String, Object> map; [EOL]     assertTrue(iterator.hasNext()); [EOL]     map = iterator.nextValue(); [EOL]     assertEquals(2, map.size()); [EOL]     assertTrue(iterator.hasNext()); [EOL]     map = iterator.nextValue(); [EOL]     assertEquals(2, map.size()); [EOL]     assertFalse(iterator.hasNext()); [EOL] }
public void testNonRootMapsWithObjectReader() throws Exception { [EOL]     String JSON = "[{ \"hi\": \"ho\", \"neighbor\": \"Joe\" },\n" + "{\"boy\": \"howdy\", \"huh\": \"what\"}]"; [EOL]     final MappingIterator<Map<String, Object>> iterator = MAPPER.reader().withType(new TypeReference<Map<String, Object>>() { [EOL]     }).readValues(JSON); [EOL]     Map<String, Object> map; [EOL]     assertTrue(iterator.hasNext()); [EOL]     map = iterator.nextValue(); [EOL]     assertEquals(2, map.size()); [EOL]     assertTrue(iterator.hasNext()); [EOL]     map = iterator.nextValue(); [EOL]     assertEquals(2, map.size()); [EOL]     assertFalse(iterator.hasNext()); [EOL] }
public void testNonRootMapsWithObjectReader() throws Exception { [EOL]     String JSON = "[{ \"hi\": \"ho\", \"neighbor\": \"Joe\" },\n" + "{\"boy\": \"howdy\", \"huh\": \"what\"}]"; [EOL]     final MappingIterator<Map<String, Object>> iterator = MAPPER.reader().withType(new TypeReference<Map<String, Object>>() { [EOL]     }).readValues(JSON); [EOL]     Map<String, Object> map; [EOL]     assertTrue(iterator.hasNext()); [EOL]     map = iterator.nextValue(); [EOL]     assertEquals(2, map.size()); [EOL]     assertTrue(iterator.hasNext()); [EOL]     map = iterator.nextValue(); [EOL]     assertEquals(2, map.size()); [EOL]     assertFalse(iterator.hasNext()); [EOL] }
public void testNonRootMapsWithObjectReader() throws Exception { [EOL]     String JSON = "[{ \"hi\": \"ho\", \"neighbor\": \"Joe\" },\n" + "{\"boy\": \"howdy\", \"huh\": \"what\"}]"; [EOL]     final MappingIterator<Map<String, Object>> iterator = MAPPER.reader().withType(new TypeReference<Map<String, Object>>() { [EOL]     }).readValues(JSON); [EOL]     Map<String, Object> map; [EOL]     assertTrue(iterator.hasNext()); [EOL]     map = iterator.nextValue(); [EOL]     assertEquals(2, map.size()); [EOL]     assertTrue(iterator.hasNext()); [EOL]     map = iterator.nextValue(); [EOL]     assertEquals(2, map.size()); [EOL]     assertFalse(iterator.hasNext()); [EOL] }
public void testNonRootMapsWithObjectReader() throws Exception { [EOL]     String JSON = "[{ \"hi\": \"ho\", \"neighbor\": \"Joe\" },\n" + "{\"boy\": \"howdy\", \"huh\": \"what\"}]"; [EOL]     final MappingIterator<Map<String, Object>> iterator = MAPPER.reader().withType(new TypeReference<Map<String, Object>>() { [EOL]     }).readValues(JSON); [EOL]     Map<String, Object> map; [EOL]     assertTrue(iterator.hasNext()); [EOL]     map = iterator.nextValue(); [EOL]     assertEquals(2, map.size()); [EOL]     assertTrue(iterator.hasNext()); [EOL]     map = iterator.nextValue(); [EOL]     assertEquals(2, map.size()); [EOL]     assertFalse(iterator.hasNext()); [EOL] }
public void testNonRootMapsWithObjectReader() throws Exception { [EOL]     String JSON = "[{ \"hi\": \"ho\", \"neighbor\": \"Joe\" },\n" + "{\"boy\": \"howdy\", \"huh\": \"what\"}]"; [EOL]     final MappingIterator<Map<String, Object>> iterator = MAPPER.reader().withType(new TypeReference<Map<String, Object>>() { [EOL]     }).readValues(JSON); [EOL]     Map<String, Object> map; [EOL]     assertTrue(iterator.hasNext()); [EOL]     map = iterator.nextValue(); [EOL]     assertEquals(2, map.size()); [EOL]     assertTrue(iterator.hasNext()); [EOL]     map = iterator.nextValue(); [EOL]     assertEquals(2, map.size()); [EOL]     assertFalse(iterator.hasNext()); [EOL] }
public void testNonRootMapsWithObjectReader() throws Exception { [EOL]     String JSON = "[{ \"hi\": \"ho\", \"neighbor\": \"Joe\" },\n" + "{\"boy\": \"howdy\", \"huh\": \"what\"}]"; [EOL]     final MappingIterator<Map<String, Object>> iterator = MAPPER.reader().withType(new TypeReference<Map<String, Object>>() { [EOL]     }).readValues(JSON); [EOL]     Map<String, Object> map; [EOL]     assertTrue(iterator.hasNext()); [EOL]     map = iterator.nextValue(); [EOL]     assertEquals(2, map.size()); [EOL]     assertTrue(iterator.hasNext()); [EOL]     map = iterator.nextValue(); [EOL]     assertEquals(2, map.size()); [EOL]     assertFalse(iterator.hasNext()); [EOL] }
public void testKeyDeserializers() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule mod = new SimpleModule("test", Version.unknownVersion()); [EOL]     mod.addKeyDeserializer(Foo.class, new FooKeyDeserializer()); [EOL]     mapper.registerModule(mod); [EOL]     Map<Foo, Integer> map = mapper.readValue("{\"a\":3}", new TypeReference<Map<Foo, Integer>>() { [EOL]     }); [EOL]     assertNotNull(map); [EOL]     assertEquals(1, map.size()); [EOL]     Foo foo = map.keySet().iterator().next(); [EOL]     assertEquals("a", foo.value); [EOL] }
public void testKeyDeserializers() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule mod = new SimpleModule("test", Version.unknownVersion()); [EOL]     mod.addKeyDeserializer(Foo.class, new FooKeyDeserializer()); [EOL]     mapper.registerModule(mod); [EOL]     Map<Foo, Integer> map = mapper.readValue("{\"a\":3}", new TypeReference<Map<Foo, Integer>>() { [EOL]     }); [EOL]     assertNotNull(map); [EOL]     assertEquals(1, map.size()); [EOL]     Foo foo = map.keySet().iterator().next(); [EOL]     assertEquals("a", foo.value); [EOL] }
public void testKeyDeserializers() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule mod = new SimpleModule("test", Version.unknownVersion()); [EOL]     mod.addKeyDeserializer(Foo.class, new FooKeyDeserializer()); [EOL]     mapper.registerModule(mod); [EOL]     Map<Foo, Integer> map = mapper.readValue("{\"a\":3}", new TypeReference<Map<Foo, Integer>>() { [EOL]     }); [EOL]     assertNotNull(map); [EOL]     assertEquals(1, map.size()); [EOL]     Foo foo = map.keySet().iterator().next(); [EOL]     assertEquals("a", foo.value); [EOL] }
public void testKeyDeserializers() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule mod = new SimpleModule("test", Version.unknownVersion()); [EOL]     mod.addKeyDeserializer(Foo.class, new FooKeyDeserializer()); [EOL]     mapper.registerModule(mod); [EOL]     Map<Foo, Integer> map = mapper.readValue("{\"a\":3}", new TypeReference<Map<Foo, Integer>>() { [EOL]     }); [EOL]     assertNotNull(map); [EOL]     assertEquals(1, map.size()); [EOL]     Foo foo = map.keySet().iterator().next(); [EOL]     assertEquals("a", foo.value); [EOL] }
public void testKeyDeserializers() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule mod = new SimpleModule("test", Version.unknownVersion()); [EOL]     mod.addKeyDeserializer(Foo.class, new FooKeyDeserializer()); [EOL]     mapper.registerModule(mod); [EOL]     Map<Foo, Integer> map = mapper.readValue("{\"a\":3}", new TypeReference<Map<Foo, Integer>>() { [EOL]     }); [EOL]     assertNotNull(map); [EOL]     assertEquals(1, map.size()); [EOL]     Foo foo = map.keySet().iterator().next(); [EOL]     assertEquals("a", foo.value); [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testArrayType() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType arrayT = ArrayType.construct(tf.constructType(String.class), null, null); [EOL]     assertNotNull(arrayT); [EOL]     assertTrue(arrayT.isContainerType()); [EOL]     assertSame(arrayT, arrayT.narrowContentsBy(String.class)); [EOL]     assertNotNull(arrayT.toString()); [EOL]     assertTrue(arrayT.equals(arrayT)); [EOL]     assertFalse(arrayT.equals(null)); [EOL]     assertFalse(arrayT.equals("xyz")); [EOL]     assertTrue(arrayT.equals(ArrayType.construct(tf.constructType(String.class), null, null))); [EOL]     assertFalse(arrayT.equals(ArrayType.construct(tf.constructType(Integer.class), null, null))); [EOL]     try { [EOL]         SimpleType.construct(String[].class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "for an array"); [EOL]     } [EOL] }
public void testArrayType() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType arrayT = ArrayType.construct(tf.constructType(String.class), null, null); [EOL]     assertNotNull(arrayT); [EOL]     assertTrue(arrayT.isContainerType()); [EOL]     assertSame(arrayT, arrayT.narrowContentsBy(String.class)); [EOL]     assertNotNull(arrayT.toString()); [EOL]     assertTrue(arrayT.equals(arrayT)); [EOL]     assertFalse(arrayT.equals(null)); [EOL]     assertFalse(arrayT.equals("xyz")); [EOL]     assertTrue(arrayT.equals(ArrayType.construct(tf.constructType(String.class), null, null))); [EOL]     assertFalse(arrayT.equals(ArrayType.construct(tf.constructType(Integer.class), null, null))); [EOL]     try { [EOL]         SimpleType.construct(String[].class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "for an array"); [EOL]     } [EOL] }
public void testArrayType() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType arrayT = ArrayType.construct(tf.constructType(String.class), null, null); [EOL]     assertNotNull(arrayT); [EOL]     assertTrue(arrayT.isContainerType()); [EOL]     assertSame(arrayT, arrayT.narrowContentsBy(String.class)); [EOL]     assertNotNull(arrayT.toString()); [EOL]     assertTrue(arrayT.equals(arrayT)); [EOL]     assertFalse(arrayT.equals(null)); [EOL]     assertFalse(arrayT.equals("xyz")); [EOL]     assertTrue(arrayT.equals(ArrayType.construct(tf.constructType(String.class), null, null))); [EOL]     assertFalse(arrayT.equals(ArrayType.construct(tf.constructType(Integer.class), null, null))); [EOL]     try { [EOL]         SimpleType.construct(String[].class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "for an array"); [EOL]     } [EOL] }
public void testArrayType() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType arrayT = ArrayType.construct(tf.constructType(String.class), null, null); [EOL]     assertNotNull(arrayT); [EOL]     assertTrue(arrayT.isContainerType()); [EOL]     assertSame(arrayT, arrayT.narrowContentsBy(String.class)); [EOL]     assertNotNull(arrayT.toString()); [EOL]     assertTrue(arrayT.equals(arrayT)); [EOL]     assertFalse(arrayT.equals(null)); [EOL]     assertFalse(arrayT.equals("xyz")); [EOL]     assertTrue(arrayT.equals(ArrayType.construct(tf.constructType(String.class), null, null))); [EOL]     assertFalse(arrayT.equals(ArrayType.construct(tf.constructType(Integer.class), null, null))); [EOL]     try { [EOL]         SimpleType.construct(String[].class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "for an array"); [EOL]     } [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testAtomicArrayRefParameters() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType type = tf.constructType(new TypeReference<AtomicReference<long[]>>() { [EOL]     }); [EOL]     JavaType[] params = tf.findTypeParameters(type, AtomicReference.class); [EOL]     assertNotNull(params); [EOL]     assertEquals(1, params.length); [EOL]     assertEquals(tf.constructType(long[].class), params[0]); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testAtomicArrayRefParameters() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType type = tf.constructType(new TypeReference<AtomicReference<long[]>>() { [EOL]     }); [EOL]     JavaType[] params = tf.findTypeParameters(type, AtomicReference.class); [EOL]     assertNotNull(params); [EOL]     assertEquals(1, params.length); [EOL]     assertEquals(tf.constructType(long[].class), params[0]); [EOL] }
public void testAtomicArrayRefParameters() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType type = tf.constructType(new TypeReference<AtomicReference<long[]>>() { [EOL]     }); [EOL]     JavaType[] params = tf.findTypeParameters(type, AtomicReference.class); [EOL]     assertNotNull(params); [EOL]     assertEquals(1, params.length); [EOL]     assertEquals(tf.constructType(long[].class), params[0]); [EOL] }
public void testAtomicArrayRefParameters() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType type = tf.constructType(new TypeReference<AtomicReference<long[]>>() { [EOL]     }); [EOL]     JavaType[] params = tf.findTypeParameters(type, AtomicReference.class); [EOL]     assertNotNull(params); [EOL]     assertEquals(1, params.length); [EOL]     assertEquals(tf.constructType(long[].class), params[0]); [EOL] }
public void testAtomicArrayRefParameters() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType type = tf.constructType(new TypeReference<AtomicReference<long[]>>() { [EOL]     }); [EOL]     JavaType[] params = tf.findTypeParameters(type, AtomicReference.class); [EOL]     assertNotNull(params); [EOL]     assertEquals(1, params.length); [EOL]     assertEquals(tf.constructType(long[].class), params[0]); [EOL] }
public void testAtomicArrayRefParameters() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType type = tf.constructType(new TypeReference<AtomicReference<long[]>>() { [EOL]     }); [EOL]     JavaType[] params = tf.findTypeParameters(type, AtomicReference.class); [EOL]     assertNotNull(params); [EOL]     assertEquals(1, params.length); [EOL]     assertEquals(tf.constructType(long[].class), params[0]); [EOL] }
public void testAtomicArrayRefParameters() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType type = tf.constructType(new TypeReference<AtomicReference<long[]>>() { [EOL]     }); [EOL]     JavaType[] params = tf.findTypeParameters(type, AtomicReference.class); [EOL]     assertNotNull(params); [EOL]     assertEquals(1, params.length); [EOL]     assertEquals(tf.constructType(long[].class), params[0]); [EOL] }
public void testAtomicArrayRefParameters() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType type = tf.constructType(new TypeReference<AtomicReference<long[]>>() { [EOL]     }); [EOL]     JavaType[] params = tf.findTypeParameters(type, AtomicReference.class); [EOL]     assertNotNull(params); [EOL]     assertEquals(1, params.length); [EOL]     assertEquals(tf.constructType(long[].class), params[0]); [EOL] }
public void testAtomicArrayRefParameters() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType type = tf.constructType(new TypeReference<AtomicReference<long[]>>() { [EOL]     }); [EOL]     JavaType[] params = tf.findTypeParameters(type, AtomicReference.class); [EOL]     assertNotNull(params); [EOL]     assertEquals(1, params.length); [EOL]     assertEquals(tf.constructType(long[].class), params[0]); [EOL] }
public void testAtomicArrayRefParameters() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType type = tf.constructType(new TypeReference<AtomicReference<long[]>>() { [EOL]     }); [EOL]     JavaType[] params = tf.findTypeParameters(type, AtomicReference.class); [EOL]     assertNotNull(params); [EOL]     assertEquals(1, params.length); [EOL]     assertEquals(tf.constructType(long[].class), params[0]); [EOL] }
public void testAtomicArrayRefParameters() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType type = tf.constructType(new TypeReference<AtomicReference<long[]>>() { [EOL]     }); [EOL]     JavaType[] params = tf.findTypeParameters(type, AtomicReference.class); [EOL]     assertNotNull(params); [EOL]     assertEquals(1, params.length); [EOL]     assertEquals(tf.constructType(long[].class), params[0]); [EOL] }
public void testAtomicArrayRefParameters() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType type = tf.constructType(new TypeReference<AtomicReference<long[]>>() { [EOL]     }); [EOL]     JavaType[] params = tf.findTypeParameters(type, AtomicReference.class); [EOL]     assertNotNull(params); [EOL]     assertEquals(1, params.length); [EOL]     assertEquals(tf.constructType(long[].class), params[0]); [EOL] }
public void testAtomicArrayRefParameters() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType type = tf.constructType(new TypeReference<AtomicReference<long[]>>() { [EOL]     }); [EOL]     JavaType[] params = tf.findTypeParameters(type, AtomicReference.class); [EOL]     assertNotNull(params); [EOL]     assertEquals(1, params.length); [EOL]     assertEquals(tf.constructType(long[].class), params[0]); [EOL] }
public void testArrays() { [EOL]     Class<?>[] classes = new Class<?>[] { boolean[].class, byte[].class, char[].class, short[].class, int[].class, long[].class, float[].class, double[].class, String[].class, Object[].class, Calendar[].class }; [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     for (Class<?> clz : classes) { [EOL]         assertSame(clz, tf.constructType(clz).getRawClass()); [EOL]         Class<?> elemType = clz.getComponentType(); [EOL]         assertSame(clz, tf.constructArrayType(elemType).getRawClass()); [EOL]     } [EOL] }
public void testArrays() { [EOL]     Class<?>[] classes = new Class<?>[] { boolean[].class, byte[].class, char[].class, short[].class, int[].class, long[].class, float[].class, double[].class, String[].class, Object[].class, Calendar[].class }; [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     for (Class<?> clz : classes) { [EOL]         assertSame(clz, tf.constructType(clz).getRawClass()); [EOL]         Class<?> elemType = clz.getComponentType(); [EOL]         assertSame(clz, tf.constructArrayType(elemType).getRawClass()); [EOL]     } [EOL] }
public void testArrays() { [EOL]     Class<?>[] classes = new Class<?>[] { boolean[].class, byte[].class, char[].class, short[].class, int[].class, long[].class, float[].class, double[].class, String[].class, Object[].class, Calendar[].class }; [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     for (Class<?> clz : classes) { [EOL]         assertSame(clz, tf.constructType(clz).getRawClass()); [EOL]         Class<?> elemType = clz.getComponentType(); [EOL]         assertSame(clz, tf.constructArrayType(elemType).getRawClass()); [EOL]     } [EOL] }
public void testAtomicArrayRefParameters() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType type = tf.constructType(new TypeReference<AtomicReference<long[]>>() { [EOL]     }); [EOL]     JavaType[] params = tf.findTypeParameters(type, AtomicReference.class); [EOL]     assertNotNull(params); [EOL]     assertEquals(1, params.length); [EOL]     assertEquals(tf.constructType(long[].class), params[0]); [EOL] }
public void testAtomicArrayRefParameters() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType type = tf.constructType(new TypeReference<AtomicReference<long[]>>() { [EOL]     }); [EOL]     JavaType[] params = tf.findTypeParameters(type, AtomicReference.class); [EOL]     assertNotNull(params); [EOL]     assertEquals(1, params.length); [EOL]     assertEquals(tf.constructType(long[].class), params[0]); [EOL] }
public void testAtomicArrayRefParameters() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType type = tf.constructType(new TypeReference<AtomicReference<long[]>>() { [EOL]     }); [EOL]     JavaType[] params = tf.findTypeParameters(type, AtomicReference.class); [EOL]     assertNotNull(params); [EOL]     assertEquals(1, params.length); [EOL]     assertEquals(tf.constructType(long[].class), params[0]); [EOL] }
public void testAtomicArrayRefParameters() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType type = tf.constructType(new TypeReference<AtomicReference<long[]>>() { [EOL]     }); [EOL]     JavaType[] params = tf.findTypeParameters(type, AtomicReference.class); [EOL]     assertNotNull(params); [EOL]     assertEquals(1, params.length); [EOL]     assertEquals(tf.constructType(long[].class), params[0]); [EOL] }
public void testAtomicArrayRefParameters() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType type = tf.constructType(new TypeReference<AtomicReference<long[]>>() { [EOL]     }); [EOL]     JavaType[] params = tf.findTypeParameters(type, AtomicReference.class); [EOL]     assertNotNull(params); [EOL]     assertEquals(1, params.length); [EOL]     assertEquals(tf.constructType(long[].class), params[0]); [EOL] }
public void testAtomicArrayRefParameters() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType type = tf.constructType(new TypeReference<AtomicReference<long[]>>() { [EOL]     }); [EOL]     JavaType[] params = tf.findTypeParameters(type, AtomicReference.class); [EOL]     assertNotNull(params); [EOL]     assertEquals(1, params.length); [EOL]     assertEquals(tf.constructType(long[].class), params[0]); [EOL] }
public void testAtomicArrayRefParameters() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType type = tf.constructType(new TypeReference<AtomicReference<long[]>>() { [EOL]     }); [EOL]     JavaType[] params = tf.findTypeParameters(type, AtomicReference.class); [EOL]     assertNotNull(params); [EOL]     assertEquals(1, params.length); [EOL]     assertEquals(tf.constructType(long[].class), params[0]); [EOL] }
public void testAtomicArrayRefParameters() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType type = tf.constructType(new TypeReference<AtomicReference<long[]>>() { [EOL]     }); [EOL]     JavaType[] params = tf.findTypeParameters(type, AtomicReference.class); [EOL]     assertNotNull(params); [EOL]     assertEquals(1, params.length); [EOL]     assertEquals(tf.constructType(long[].class), params[0]); [EOL] }
public void testAtomicArrayRefParameters() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType type = tf.constructType(new TypeReference<AtomicReference<long[]>>() { [EOL]     }); [EOL]     JavaType[] params = tf.findTypeParameters(type, AtomicReference.class); [EOL]     assertNotNull(params); [EOL]     assertEquals(1, params.length); [EOL]     assertEquals(tf.constructType(long[].class), params[0]); [EOL] }
public void testAtomicArrayRefParameters() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType type = tf.constructType(new TypeReference<AtomicReference<long[]>>() { [EOL]     }); [EOL]     JavaType[] params = tf.findTypeParameters(type, AtomicReference.class); [EOL]     assertNotNull(params); [EOL]     assertEquals(1, params.length); [EOL]     assertEquals(tf.constructType(long[].class), params[0]); [EOL] }
public void testAtomicArrayRefParameters() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType type = tf.constructType(new TypeReference<AtomicReference<long[]>>() { [EOL]     }); [EOL]     JavaType[] params = tf.findTypeParameters(type, AtomicReference.class); [EOL]     assertNotNull(params); [EOL]     assertEquals(1, params.length); [EOL]     assertEquals(tf.constructType(long[].class), params[0]); [EOL] }
public void testAtomicArrayRefParameters() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType type = tf.constructType(new TypeReference<AtomicReference<long[]>>() { [EOL]     }); [EOL]     JavaType[] params = tf.findTypeParameters(type, AtomicReference.class); [EOL]     assertNotNull(params); [EOL]     assertEquals(1, params.length); [EOL]     assertEquals(tf.constructType(long[].class), params[0]); [EOL] }
public void testAtomicArrayRefParameters() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType type = tf.constructType(new TypeReference<AtomicReference<long[]>>() { [EOL]     }); [EOL]     JavaType[] params = tf.findTypeParameters(type, AtomicReference.class); [EOL]     assertNotNull(params); [EOL]     assertEquals(1, params.length); [EOL]     assertEquals(tf.constructType(long[].class), params[0]); [EOL] }
public void testAtomicArrayRefParameters() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType type = tf.constructType(new TypeReference<AtomicReference<long[]>>() { [EOL]     }); [EOL]     JavaType[] params = tf.findTypeParameters(type, AtomicReference.class); [EOL]     assertNotNull(params); [EOL]     assertEquals(1, params.length); [EOL]     assertEquals(tf.constructType(long[].class), params[0]); [EOL] }
public void testAtomicArrayRefParameters() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType type = tf.constructType(new TypeReference<AtomicReference<long[]>>() { [EOL]     }); [EOL]     JavaType[] params = tf.findTypeParameters(type, AtomicReference.class); [EOL]     assertNotNull(params); [EOL]     assertEquals(1, params.length); [EOL]     assertEquals(tf.constructType(long[].class), params[0]); [EOL] }
public void testAtomicArrayRefParameters() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType type = tf.constructType(new TypeReference<AtomicReference<long[]>>() { [EOL]     }); [EOL]     JavaType[] params = tf.findTypeParameters(type, AtomicReference.class); [EOL]     assertNotNull(params); [EOL]     assertEquals(1, params.length); [EOL]     assertEquals(tf.constructType(long[].class), params[0]); [EOL] }
public void testAtomicArrayRefParameters() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType type = tf.constructType(new TypeReference<AtomicReference<long[]>>() { [EOL]     }); [EOL]     JavaType[] params = tf.findTypeParameters(type, AtomicReference.class); [EOL]     assertNotNull(params); [EOL]     assertEquals(1, params.length); [EOL]     assertEquals(tf.constructType(long[].class), params[0]); [EOL] }
public void testAtomicArrayRefParameters() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType type = tf.constructType(new TypeReference<AtomicReference<long[]>>() { [EOL]     }); [EOL]     JavaType[] params = tf.findTypeParameters(type, AtomicReference.class); [EOL]     assertNotNull(params); [EOL]     assertEquals(1, params.length); [EOL]     assertEquals(tf.constructType(long[].class), params[0]); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testBeanConvert() { [EOL]     PointStrings input = new PointStrings("37", "-9"); [EOL]     Point point = MAPPER.convertValue(input, Point.class); [EOL]     assertEquals(37, point.x); [EOL]     assertEquals(-9, point.y); [EOL]     assertEquals(-13, point.z); [EOL] }
public void testBeanConvert() { [EOL]     PointStrings input = new PointStrings("37", "-9"); [EOL]     Point point = MAPPER.convertValue(input, Point.class); [EOL]     assertEquals(37, point.x); [EOL]     assertEquals(-9, point.y); [EOL]     assertEquals(-13, point.z); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testArrayIdentityTransforms() throws Exception { [EOL]     verifyByteArrayConversion(bytes(), byte[].class); [EOL]     verifyShortArrayConversion(shorts(), short[].class); [EOL]     verifyIntArrayConversion(ints(), int[].class); [EOL]     verifyLongArrayConversion(longs(), long[].class); [EOL]     verifyFloatArrayConversion(floats(), float[].class); [EOL]     verifyDoubleArrayConversion(doubles(), float[].class); [EOL] }
public void testPropertyAnnotationForMaps() throws Exception { [EOL]     String json = objectWriter().writeValueAsString(new PointListWrapperMap("a", 1, 2)); [EOL]     assertEquals("{\"values\":{\"a\":[1,2]}}", json); [EOL] }
public void testMapNullSerialization() throws IOException { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, String> map = new HashMap<String, String>(); [EOL]     map.put("a", null); [EOL]     assertEquals("{\"a\":null}", m.writeValueAsString(map)); [EOL]     m.configure(SerializationFeature.WRITE_NULL_MAP_VALUES, false); [EOL]     assertEquals("{}", m.writeValueAsString(map)); [EOL] }
public void testMapNullSerialization() throws IOException { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, String> map = new HashMap<String, String>(); [EOL]     map.put("a", null); [EOL]     assertEquals("{\"a\":null}", m.writeValueAsString(map)); [EOL]     m.configure(SerializationFeature.WRITE_NULL_MAP_VALUES, false); [EOL]     assertEquals("{}", m.writeValueAsString(map)); [EOL] }
public void testOverrideKeyClassInvalid() throws Exception { [EOL]     try { [EOL]         BrokenMapKeyHolder result = new ObjectMapper().readValue("{ \"123\" : \"xxx\" }", BrokenMapKeyHolder.class); [EOL]         fail("Expected a failure, but got results: " + result); [EOL]     } catch (JsonMappingException jme) { [EOL]         verifyException(jme, "is not assignable to"); [EOL]     } [EOL] }
public void testArrayType() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType arrayT = ArrayType.construct(tf.constructType(String.class), null, null); [EOL]     assertNotNull(arrayT); [EOL]     assertTrue(arrayT.isContainerType()); [EOL]     assertSame(arrayT, arrayT.narrowContentsBy(String.class)); [EOL]     assertNotNull(arrayT.toString()); [EOL]     assertTrue(arrayT.equals(arrayT)); [EOL]     assertFalse(arrayT.equals(null)); [EOL]     assertFalse(arrayT.equals("xyz")); [EOL]     assertTrue(arrayT.equals(ArrayType.construct(tf.constructType(String.class), null, null))); [EOL]     assertFalse(arrayT.equals(ArrayType.construct(tf.constructType(Integer.class), null, null))); [EOL]     try { [EOL]         SimpleType.construct(String[].class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "for an array"); [EOL]     } [EOL] }
public void testPOJO() { [EOL]     POJONode n = new POJONode("x"); [EOL]     assertStandardEquals(n); [EOL]     assertEquals(n, new POJONode("x")); [EOL]     assertEquals("x", n.asText()); [EOL]     assertEquals("x", n.toString()); [EOL]     assertEquals(new POJONode(null), new POJONode(null)); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL]     assertNodeNumbers(new POJONode(Integer.valueOf(123)), 123, 123.0); [EOL] }
public void testPOJO() { [EOL]     POJONode n = new POJONode("x"); [EOL]     assertStandardEquals(n); [EOL]     assertEquals(n, new POJONode("x")); [EOL]     assertEquals("x", n.asText()); [EOL]     assertEquals("x", n.toString()); [EOL]     assertEquals(new POJONode(null), new POJONode(null)); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL]     assertNodeNumbers(new POJONode(Integer.valueOf(123)), 123, 123.0); [EOL] }
public void testPOJO() { [EOL]     POJONode n = new POJONode("x"); [EOL]     assertStandardEquals(n); [EOL]     assertEquals(n, new POJONode("x")); [EOL]     assertEquals("x", n.asText()); [EOL]     assertEquals("x", n.toString()); [EOL]     assertEquals(new POJONode(null), new POJONode(null)); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL]     assertNodeNumbers(new POJONode(Integer.valueOf(123)), 123, 123.0); [EOL] }
public void testPOJO() { [EOL]     POJONode n = new POJONode("x"); [EOL]     assertStandardEquals(n); [EOL]     assertEquals(n, new POJONode("x")); [EOL]     assertEquals("x", n.asText()); [EOL]     assertEquals("x", n.toString()); [EOL]     assertEquals(new POJONode(null), new POJONode(null)); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL]     assertNodeNumbers(new POJONode(Integer.valueOf(123)), 123, 123.0); [EOL] }
public void testPOJO() { [EOL]     POJONode n = new POJONode("x"); [EOL]     assertStandardEquals(n); [EOL]     assertEquals(n, new POJONode("x")); [EOL]     assertEquals("x", n.asText()); [EOL]     assertEquals("x", n.toString()); [EOL]     assertEquals(new POJONode(null), new POJONode(null)); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL]     assertNodeNumbers(new POJONode(Integer.valueOf(123)), 123, 123.0); [EOL] }
public void testPOJO() { [EOL]     POJONode n = new POJONode("x"); [EOL]     assertStandardEquals(n); [EOL]     assertEquals(n, new POJONode("x")); [EOL]     assertEquals("x", n.asText()); [EOL]     assertEquals("x", n.toString()); [EOL]     assertEquals(new POJONode(null), new POJONode(null)); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL]     assertNodeNumbers(new POJONode(Integer.valueOf(123)), 123, 123.0); [EOL] }
public void testPOJO() { [EOL]     POJONode n = new POJONode("x"); [EOL]     assertStandardEquals(n); [EOL]     assertEquals(n, new POJONode("x")); [EOL]     assertEquals("x", n.asText()); [EOL]     assertEquals("x", n.toString()); [EOL]     assertEquals(new POJONode(null), new POJONode(null)); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL]     assertNodeNumbers(new POJONode(Integer.valueOf(123)), 123, 123.0); [EOL] }
public void testPOJO() { [EOL]     POJONode n = new POJONode("x"); [EOL]     assertStandardEquals(n); [EOL]     assertEquals(n, new POJONode("x")); [EOL]     assertEquals("x", n.asText()); [EOL]     assertEquals("x", n.toString()); [EOL]     assertEquals(new POJONode(null), new POJONode(null)); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL]     assertNodeNumbers(new POJONode(Integer.valueOf(123)), 123, 123.0); [EOL] }
public void testPOJO() { [EOL]     POJONode n = new POJONode("x"); [EOL]     assertStandardEquals(n); [EOL]     assertEquals(n, new POJONode("x")); [EOL]     assertEquals("x", n.asText()); [EOL]     assertEquals("x", n.toString()); [EOL]     assertEquals(new POJONode(null), new POJONode(null)); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL]     assertNodeNumbers(new POJONode(Integer.valueOf(123)), 123, 123.0); [EOL] }
public void testPOJO() { [EOL]     POJONode n = new POJONode("x"); [EOL]     assertStandardEquals(n); [EOL]     assertEquals(n, new POJONode("x")); [EOL]     assertEquals("x", n.asText()); [EOL]     assertEquals("x", n.toString()); [EOL]     assertEquals(new POJONode(null), new POJONode(null)); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL]     assertNodeNumbers(new POJONode(Integer.valueOf(123)), 123, 123.0); [EOL] }
public void testPOJO() { [EOL]     POJONode n = new POJONode("x"); [EOL]     assertStandardEquals(n); [EOL]     assertEquals(n, new POJONode("x")); [EOL]     assertEquals("x", n.asText()); [EOL]     assertEquals("x", n.toString()); [EOL]     assertEquals(new POJONode(null), new POJONode(null)); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL]     assertNodeNumbers(new POJONode(Integer.valueOf(123)), 123, 123.0); [EOL] }
public void testPOJO() { [EOL]     POJONode n = new POJONode("x"); [EOL]     assertStandardEquals(n); [EOL]     assertEquals(n, new POJONode("x")); [EOL]     assertEquals("x", n.asText()); [EOL]     assertEquals("x", n.toString()); [EOL]     assertEquals(new POJONode(null), new POJONode(null)); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL]     assertNodeNumbers(new POJONode(Integer.valueOf(123)), 123, 123.0); [EOL] }
public void testPOJO() { [EOL]     POJONode n = new POJONode("x"); [EOL]     assertStandardEquals(n); [EOL]     assertEquals(n, new POJONode("x")); [EOL]     assertEquals("x", n.asText()); [EOL]     assertEquals("x", n.toString()); [EOL]     assertEquals(new POJONode(null), new POJONode(null)); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL]     assertNodeNumbers(new POJONode(Integer.valueOf(123)), 123, 123.0); [EOL] }
public void testPOJO() { [EOL]     POJONode n = new POJONode("x"); [EOL]     assertStandardEquals(n); [EOL]     assertEquals(n, new POJONode("x")); [EOL]     assertEquals("x", n.asText()); [EOL]     assertEquals("x", n.toString()); [EOL]     assertEquals(new POJONode(null), new POJONode(null)); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL]     assertNodeNumbers(new POJONode(Integer.valueOf(123)), 123, 123.0); [EOL] }
public void testPOJO() { [EOL]     POJONode n = new POJONode("x"); [EOL]     assertStandardEquals(n); [EOL]     assertEquals(n, new POJONode("x")); [EOL]     assertEquals("x", n.asText()); [EOL]     assertEquals("x", n.toString()); [EOL]     assertEquals(new POJONode(null), new POJONode(null)); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL]     assertNodeNumbers(new POJONode(Integer.valueOf(123)), 123, 123.0); [EOL] }
public void testPOJO() { [EOL]     POJONode n = new POJONode("x"); [EOL]     assertStandardEquals(n); [EOL]     assertEquals(n, new POJONode("x")); [EOL]     assertEquals("x", n.asText()); [EOL]     assertEquals("x", n.toString()); [EOL]     assertEquals(new POJONode(null), new POJONode(null)); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL]     assertNodeNumbers(new POJONode(Integer.valueOf(123)), 123, 123.0); [EOL] }
public void testPOJO() { [EOL]     POJONode n = new POJONode("x"); [EOL]     assertStandardEquals(n); [EOL]     assertEquals(n, new POJONode("x")); [EOL]     assertEquals("x", n.asText()); [EOL]     assertEquals("x", n.toString()); [EOL]     assertEquals(new POJONode(null), new POJONode(null)); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL]     assertNodeNumbers(new POJONode(Integer.valueOf(123)), 123, 123.0); [EOL] }
public void testPOJO() { [EOL]     POJONode n = new POJONode("x"); [EOL]     assertStandardEquals(n); [EOL]     assertEquals(n, new POJONode("x")); [EOL]     assertEquals("x", n.asText()); [EOL]     assertEquals("x", n.toString()); [EOL]     assertEquals(new POJONode(null), new POJONode(null)); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL]     assertNodeNumbers(new POJONode(Integer.valueOf(123)), 123, 123.0); [EOL] }
public void testSimpleGetterInterfaceImpl() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(m, new PojoImpl()); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals(Integer.valueOf(5), result.get("foobar")); [EOL]     assertEquals(Integer.valueOf(1), result.get("width")); [EOL]     assertEquals(Integer.valueOf(2), result.get("length")); [EOL] }
public void testSimpleGetterInterfaceImpl() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(m, new PojoImpl()); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals(Integer.valueOf(5), result.get("foobar")); [EOL]     assertEquals(Integer.valueOf(1), result.get("width")); [EOL]     assertEquals(Integer.valueOf(2), result.get("length")); [EOL] }
public void testSimpleGetterInterfaceImpl() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(m, new PojoImpl()); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals(Integer.valueOf(5), result.get("foobar")); [EOL]     assertEquals(Integer.valueOf(1), result.get("width")); [EOL]     assertEquals(Integer.valueOf(2), result.get("length")); [EOL] }
public void testPropertyAnnotationForMaps() throws Exception { [EOL]     String json = objectWriter().writeValueAsString(new PointListWrapperMap("a", 1, 2)); [EOL]     assertEquals("{\"values\":{\"a\":[1,2]}}", json); [EOL] }
public void testPropertyAnnotationForMaps() throws Exception { [EOL]     String json = objectWriter().writeValueAsString(new PointListWrapperMap("a", 1, 2)); [EOL]     assertEquals("{\"values\":{\"a\":[1,2]}}", json); [EOL] }
public void testEmptyCollection() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(SerializationFeature.INDENT_OUTPUT, true); [EOL]     List<User> friends = new ArrayList<User>(); [EOL]     friends.add(new DefaultUser("Joe Hildebrandt", null)); [EOL]     friends.add(new DefaultEmployee("Richard Nasr", null, "MDA")); [EOL]     User user = new DefaultEmployee("John Vanspronssen", friends, "MDA"); [EOL]     String json = mapper.writeValueAsString(user); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(DefaultEmployee.class); [EOL]     mapper.registerSubtypes(DefaultUser.class); [EOL]     User result = mapper.readValue(json, User.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(DefaultEmployee.class, result.getClass()); [EOL]     friends = result.getFriends(); [EOL]     assertEquals(2, friends.size()); [EOL]     assertEquals(DefaultUser.class, friends.get(0).getClass()); [EOL]     assertEquals(DefaultEmployee.class, friends.get(1).getClass()); [EOL] }
public void testEmptyCollection() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(SerializationFeature.INDENT_OUTPUT, true); [EOL]     List<User> friends = new ArrayList<User>(); [EOL]     friends.add(new DefaultUser("Joe Hildebrandt", null)); [EOL]     friends.add(new DefaultEmployee("Richard Nasr", null, "MDA")); [EOL]     User user = new DefaultEmployee("John Vanspronssen", friends, "MDA"); [EOL]     String json = mapper.writeValueAsString(user); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(DefaultEmployee.class); [EOL]     mapper.registerSubtypes(DefaultUser.class); [EOL]     User result = mapper.readValue(json, User.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(DefaultEmployee.class, result.getClass()); [EOL]     friends = result.getFriends(); [EOL]     assertEquals(2, friends.size()); [EOL]     assertEquals(DefaultUser.class, friends.get(0).getClass()); [EOL]     assertEquals(DefaultEmployee.class, friends.get(1).getClass()); [EOL] }
public void testMethodAnnotationInList() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(String.class, new AnnotatedContextualSerializer()); [EOL]     mapper.registerModule(module); [EOL]     ContextualListBean beans = new ContextualListBean("abc"); [EOL]     assertEquals("{\"beans\":[\"list->abc\"]}", mapper.writeValueAsString(beans)); [EOL] }
public void testUnknownHandlingIgnoreWithHandler() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.clearProblemHandlers(); [EOL]     mapper.addHandler(new MyHandler()); [EOL]     TestBean result = mapper.readValue(new StringReader(JSON_UNKNOWN_FIELD), TestBean.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result._a); [EOL]     assertEquals(-1, result._b); [EOL]     assertEquals("foo:START_ARRAY", result._unknown); [EOL] }
public void testUnknownHandlingIgnoreWithHandler() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.clearProblemHandlers(); [EOL]     mapper.addHandler(new MyHandler()); [EOL]     TestBean result = mapper.readValue(new StringReader(JSON_UNKNOWN_FIELD), TestBean.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result._a); [EOL]     assertEquals(-1, result._b); [EOL]     assertEquals("foo:START_ARRAY", result._unknown); [EOL] }
public void testUnknownHandlingIgnoreWithHandler() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.clearProblemHandlers(); [EOL]     mapper.addHandler(new MyHandler()); [EOL]     TestBean result = mapper.readValue(new StringReader(JSON_UNKNOWN_FIELD), TestBean.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result._a); [EOL]     assertEquals(-1, result._b); [EOL]     assertEquals("foo:START_ARRAY", result._unknown); [EOL] }
public void testEOF() throws Exception { [EOL]     String JSON = "{ \"key\": [ { \"a\" : { \"name\": \"foo\",  \"type\": 1\n" + "},  \"type\": 3, \"url\": \"http://www.google.com\" } ],\n" + "\"name\": \"xyz\", \"type\": 1, \"url\" : null }\n  "; [EOL]     JsonFactory jf = new JsonFactory(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonParser jp = jf.createParser(new StringReader(JSON)); [EOL]     JsonNode result = mapper.readTree(jp); [EOL]     assertTrue(result.isObject()); [EOL]     assertEquals(4, result.size()); [EOL]     assertNull(mapper.readTree(jp)); [EOL] }
public void testEOF() throws Exception { [EOL]     String JSON = "{ \"key\": [ { \"a\" : { \"name\": \"foo\",  \"type\": 1\n" + "},  \"type\": 3, \"url\": \"http://www.google.com\" } ],\n" + "\"name\": \"xyz\", \"type\": 1, \"url\" : null }\n  "; [EOL]     JsonFactory jf = new JsonFactory(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonParser jp = jf.createParser(new StringReader(JSON)); [EOL]     JsonNode result = mapper.readTree(jp); [EOL]     assertTrue(result.isObject()); [EOL]     assertEquals(4, result.size()); [EOL]     assertNull(mapper.readTree(jp)); [EOL] }
public void testEOF() throws Exception { [EOL]     String JSON = "{ \"key\": [ { \"a\" : { \"name\": \"foo\",  \"type\": 1\n" + "},  \"type\": 3, \"url\": \"http://www.google.com\" } ],\n" + "\"name\": \"xyz\", \"type\": 1, \"url\" : null }\n  "; [EOL]     JsonFactory jf = new JsonFactory(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonParser jp = jf.createParser(new StringReader(JSON)); [EOL]     JsonNode result = mapper.readTree(jp); [EOL]     assertTrue(result.isObject()); [EOL]     assertEquals(4, result.size()); [EOL]     assertNull(mapper.readTree(jp)); [EOL] }
public void testRetain() { [EOL]     ObjectNode ob = MAPPER.createObjectNode(); [EOL]     ob.put("a", "a"); [EOL]     ob.put("b", "b"); [EOL]     ob.put("c", "c"); [EOL]     assertEquals(3, ob.size()); [EOL]     assertSame(ob, ob.retain("a", "c")); [EOL]     assertEquals(2, ob.size()); [EOL]     assertEquals("a", ob.get("a").textValue()); [EOL]     assertNull(ob.get("b")); [EOL]     assertEquals("c", ob.get("c").textValue()); [EOL] }
public void testBooleanListAsProp() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\"" + TypedListAsProp.class.getName() + "\",[true, false]]"; [EOL]     JavaType type = TypeFactory.defaultInstance().constructCollectionType(TypedListAsProp.class, Boolean.class); [EOL]     TypedListAsProp<Object> result = m.readValue(JSON, type); [EOL]     assertNotNull(result); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(Boolean.TRUE, result.get(0)); [EOL]     assertEquals(Boolean.FALSE, result.get(1)); [EOL] }
public void testBooleanListAsProp() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\"" + TypedListAsProp.class.getName() + "\",[true, false]]"; [EOL]     JavaType type = TypeFactory.defaultInstance().constructCollectionType(TypedListAsProp.class, Boolean.class); [EOL]     TypedListAsProp<Object> result = m.readValue(JSON, type); [EOL]     assertNotNull(result); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(Boolean.TRUE, result.get(0)); [EOL]     assertEquals(Boolean.FALSE, result.get(1)); [EOL] }
public void testBooleanListAsProp() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\"" + TypedListAsProp.class.getName() + "\",[true, false]]"; [EOL]     JavaType type = TypeFactory.defaultInstance().constructCollectionType(TypedListAsProp.class, Boolean.class); [EOL]     TypedListAsProp<Object> result = m.readValue(JSON, type); [EOL]     assertNotNull(result); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(Boolean.TRUE, result.get(0)); [EOL]     assertEquals(Boolean.FALSE, result.get(1)); [EOL] }
public void testBooleanListAsProp() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\"" + TypedListAsProp.class.getName() + "\",[true, false]]"; [EOL]     JavaType type = TypeFactory.defaultInstance().constructCollectionType(TypedListAsProp.class, Boolean.class); [EOL]     TypedListAsProp<Object> result = m.readValue(JSON, type); [EOL]     assertNotNull(result); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(Boolean.TRUE, result.get(0)); [EOL]     assertEquals(Boolean.FALSE, result.get(1)); [EOL] }
public void testUnknownHandlingIgnoreWithHandler() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.clearProblemHandlers(); [EOL]     mapper.addHandler(new MyHandler()); [EOL]     TestBean result = mapper.readValue(new StringReader(JSON_UNKNOWN_FIELD), TestBean.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result._a); [EOL]     assertEquals(-1, result._b); [EOL]     assertEquals("foo:START_ARRAY", result._unknown); [EOL] }
public void testSimpleBean() throws Exception { [EOL]     ArrayList<Object> misc = new ArrayList<Object>(); [EOL]     misc.add("xyz"); [EOL]     misc.add(42); [EOL]     misc.add(null); [EOL]     misc.add(Boolean.TRUE); [EOL]     TestBean bean = new TestBean(13, -900L, "\"test\"", new URI("http://foobar.com"), misc); [EOL]     String json = MAPPER.writeValueAsString(bean); [EOL]     TestBean result = MAPPER.readValue(json, TestBean.class); [EOL]     assertEquals(bean, result); [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testBase64Variants() throws Exception { [EOL]     final byte[] INPUT = "abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890X".getBytes("UTF-8"); [EOL]     assertEquals(quote("YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwWA=="), MAPPER.writeValueAsString(INPUT)); [EOL]     assertEquals(quote("YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwWA=="), MAPPER.writer(Base64Variants.MIME_NO_LINEFEEDS).writeValueAsString(INPUT)); [EOL]     assertEquals(quote("YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwYWJjZGVmZ2hpamtsbW5vcHFyc3R1\\ndnd4eXoxMjM0NTY3ODkwWA=="), MAPPER.writer(Base64Variants.MIME).writeValueAsString(INPUT)); [EOL]     assertEquals(quote("YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwWA"), MAPPER.writer(Base64Variants.MODIFIED_FOR_URL).writeValueAsString(INPUT)); [EOL]     assertEquals(quote("YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwYWJjZGVmZ2hpamts\\nbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwWA=="), MAPPER.writer(Base64Variants.PEM).writeValueAsString(INPUT)); [EOL] }
public void testBase64Variants() throws Exception { [EOL]     final byte[] INPUT = "abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890X".getBytes("UTF-8"); [EOL]     assertEquals(quote("YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwWA=="), MAPPER.writeValueAsString(INPUT)); [EOL]     assertEquals(quote("YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwWA=="), MAPPER.writer(Base64Variants.MIME_NO_LINEFEEDS).writeValueAsString(INPUT)); [EOL]     assertEquals(quote("YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwYWJjZGVmZ2hpamtsbW5vcHFyc3R1\\ndnd4eXoxMjM0NTY3ODkwWA=="), MAPPER.writer(Base64Variants.MIME).writeValueAsString(INPUT)); [EOL]     assertEquals(quote("YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwWA"), MAPPER.writer(Base64Variants.MODIFIED_FOR_URL).writeValueAsString(INPUT)); [EOL]     assertEquals(quote("YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwYWJjZGVmZ2hpamts\\nbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwWA=="), MAPPER.writer(Base64Variants.PEM).writeValueAsString(INPUT)); [EOL] }
public void testNonRootMapsWithObjectReader() throws Exception { [EOL]     String JSON = "[{ \"hi\": \"ho\", \"neighbor\": \"Joe\" },\n" + "{\"boy\": \"howdy\", \"huh\": \"what\"}]"; [EOL]     final MappingIterator<Map<String, Object>> iterator = MAPPER.reader().withType(new TypeReference<Map<String, Object>>() { [EOL]     }).readValues(JSON); [EOL]     Map<String, Object> map; [EOL]     assertTrue(iterator.hasNext()); [EOL]     map = iterator.nextValue(); [EOL]     assertEquals(2, map.size()); [EOL]     assertTrue(iterator.hasNext()); [EOL]     map = iterator.nextValue(); [EOL]     assertEquals(2, map.size()); [EOL]     assertFalse(iterator.hasNext()); [EOL] }
public void testNonRootMapsWithObjectReader() throws Exception { [EOL]     String JSON = "[{ \"hi\": \"ho\", \"neighbor\": \"Joe\" },\n" + "{\"boy\": \"howdy\", \"huh\": \"what\"}]"; [EOL]     final MappingIterator<Map<String, Object>> iterator = MAPPER.reader().withType(new TypeReference<Map<String, Object>>() { [EOL]     }).readValues(JSON); [EOL]     Map<String, Object> map; [EOL]     assertTrue(iterator.hasNext()); [EOL]     map = iterator.nextValue(); [EOL]     assertEquals(2, map.size()); [EOL]     assertTrue(iterator.hasNext()); [EOL]     map = iterator.nextValue(); [EOL]     assertEquals(2, map.size()); [EOL]     assertFalse(iterator.hasNext()); [EOL] }
public void testAllowUnknownEnumValuesAsMapKeysReadAsNull() throws Exception { [EOL]     ObjectReader reader = MAPPER.reader(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL); [EOL]     ClassWithEnumMapKey result = reader.withType(ClassWithEnumMapKey.class).readValue("{\"map\":{\"NO-SUCH-VALUE\":\"val\"}}"); [EOL]     assertTrue(result.map.containsKey(null)); [EOL] }
public void testAllowUnknownEnumValuesAsMapKeysReadAsNull() throws Exception { [EOL]     ObjectReader reader = MAPPER.reader(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL); [EOL]     ClassWithEnumMapKey result = reader.withType(ClassWithEnumMapKey.class).readValue("{\"map\":{\"NO-SUCH-VALUE\":\"val\"}}"); [EOL]     assertTrue(result.map.containsKey(null)); [EOL] }
public void testSimpleBean() throws Exception { [EOL]     ArrayList<Object> misc = new ArrayList<Object>(); [EOL]     misc.add("xyz"); [EOL]     misc.add(42); [EOL]     misc.add(null); [EOL]     misc.add(Boolean.TRUE); [EOL]     TestBean bean = new TestBean(13, -900L, "\"test\"", new URI("http://foobar.com"), misc); [EOL]     String json = MAPPER.writeValueAsString(bean); [EOL]     TestBean result = MAPPER.readValue(json, TestBean.class); [EOL]     assertEquals(bean, result); [EOL] }
public void testSimpleBean() throws Exception { [EOL]     ArrayList<Object> misc = new ArrayList<Object>(); [EOL]     misc.add("xyz"); [EOL]     misc.add(42); [EOL]     misc.add(null); [EOL]     misc.add(Boolean.TRUE); [EOL]     TestBean bean = new TestBean(13, -900L, "\"test\"", new URI("http://foobar.com"), misc); [EOL]     String json = MAPPER.writeValueAsString(bean); [EOL]     TestBean result = MAPPER.readValue(json, TestBean.class); [EOL]     assertEquals(bean, result); [EOL] }
public void testSimpleBean() throws Exception { [EOL]     ArrayList<Object> misc = new ArrayList<Object>(); [EOL]     misc.add("xyz"); [EOL]     misc.add(42); [EOL]     misc.add(null); [EOL]     misc.add(Boolean.TRUE); [EOL]     TestBean bean = new TestBean(13, -900L, "\"test\"", new URI("http://foobar.com"), misc); [EOL]     String json = MAPPER.writeValueAsString(bean); [EOL]     TestBean result = MAPPER.readValue(json, TestBean.class); [EOL]     assertEquals(bean, result); [EOL] }
public void testSimpleBean() throws Exception { [EOL]     ArrayList<Object> misc = new ArrayList<Object>(); [EOL]     misc.add("xyz"); [EOL]     misc.add(42); [EOL]     misc.add(null); [EOL]     misc.add(Boolean.TRUE); [EOL]     TestBean bean = new TestBean(13, -900L, "\"test\"", new URI("http://foobar.com"), misc); [EOL]     String json = MAPPER.writeValueAsString(bean); [EOL]     TestBean result = MAPPER.readValue(json, TestBean.class); [EOL]     assertEquals(bean, result); [EOL] }
public void testIncrementalPojoReading() throws IOException { [EOL]     JsonFactory jf = new MappingJsonFactory(); [EOL]     final String JSON = "[ 1, true, null, \"abc\" ]"; [EOL]     JsonParser jp = jf.createParser(new StringReader(JSON)); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals(Integer.valueOf(1), jp.readValueAs(Integer.class)); [EOL]     assertEquals(Boolean.TRUE, jp.readValueAs(Boolean.class)); [EOL]     assertNull(jp.readValueAs(Object.class)); [EOL]     assertEquals(JsonToken.VALUE_NULL, jp.getLastClearedToken()); [EOL]     assertEquals("abc", jp.readValueAs(String.class)); [EOL]     assertNull(jp.readValueAs(Object.class)); [EOL]     assertEquals(JsonToken.END_ARRAY, jp.getLastClearedToken()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL] }
public void testIncrementalPojoReading() throws IOException { [EOL]     JsonFactory jf = new MappingJsonFactory(); [EOL]     final String JSON = "[ 1, true, null, \"abc\" ]"; [EOL]     JsonParser jp = jf.createParser(new StringReader(JSON)); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals(Integer.valueOf(1), jp.readValueAs(Integer.class)); [EOL]     assertEquals(Boolean.TRUE, jp.readValueAs(Boolean.class)); [EOL]     assertNull(jp.readValueAs(Object.class)); [EOL]     assertEquals(JsonToken.VALUE_NULL, jp.getLastClearedToken()); [EOL]     assertEquals("abc", jp.readValueAs(String.class)); [EOL]     assertNull(jp.readValueAs(Object.class)); [EOL]     assertEquals(JsonToken.END_ARRAY, jp.getLastClearedToken()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL] }
public void testIncrementalPojoReading() throws IOException { [EOL]     JsonFactory jf = new MappingJsonFactory(); [EOL]     final String JSON = "[ 1, true, null, \"abc\" ]"; [EOL]     JsonParser jp = jf.createParser(new StringReader(JSON)); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals(Integer.valueOf(1), jp.readValueAs(Integer.class)); [EOL]     assertEquals(Boolean.TRUE, jp.readValueAs(Boolean.class)); [EOL]     assertNull(jp.readValueAs(Object.class)); [EOL]     assertEquals(JsonToken.VALUE_NULL, jp.getLastClearedToken()); [EOL]     assertEquals("abc", jp.readValueAs(String.class)); [EOL]     assertNull(jp.readValueAs(Object.class)); [EOL]     assertEquals(JsonToken.END_ARRAY, jp.getLastClearedToken()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL] }
public void testIncrementalPojoReading() throws IOException { [EOL]     JsonFactory jf = new MappingJsonFactory(); [EOL]     final String JSON = "[ 1, true, null, \"abc\" ]"; [EOL]     JsonParser jp = jf.createParser(new StringReader(JSON)); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals(Integer.valueOf(1), jp.readValueAs(Integer.class)); [EOL]     assertEquals(Boolean.TRUE, jp.readValueAs(Boolean.class)); [EOL]     assertNull(jp.readValueAs(Object.class)); [EOL]     assertEquals(JsonToken.VALUE_NULL, jp.getLastClearedToken()); [EOL]     assertEquals("abc", jp.readValueAs(String.class)); [EOL]     assertNull(jp.readValueAs(Object.class)); [EOL]     assertEquals(JsonToken.END_ARRAY, jp.getLastClearedToken()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL] }
public void testIncrementalPojoReading() throws IOException { [EOL]     JsonFactory jf = new MappingJsonFactory(); [EOL]     final String JSON = "[ 1, true, null, \"abc\" ]"; [EOL]     JsonParser jp = jf.createParser(new StringReader(JSON)); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals(Integer.valueOf(1), jp.readValueAs(Integer.class)); [EOL]     assertEquals(Boolean.TRUE, jp.readValueAs(Boolean.class)); [EOL]     assertNull(jp.readValueAs(Object.class)); [EOL]     assertEquals(JsonToken.VALUE_NULL, jp.getLastClearedToken()); [EOL]     assertEquals("abc", jp.readValueAs(String.class)); [EOL]     assertNull(jp.readValueAs(Object.class)); [EOL]     assertEquals(JsonToken.END_ARRAY, jp.getLastClearedToken()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL] }
public void testRootViaMapper() throws Exception { [EOL]     ObjectMapper mapper = rootMapper(); [EOL]     String json = mapper.writeValueAsString(new Bean()); [EOL]     assertEquals("{\"rudy\":{\"a\":3}}", json); [EOL]     Bean bean = mapper.readValue(json, Bean.class); [EOL]     assertNotNull(bean); [EOL]     json = mapper.writeValueAsString(new RootBeanWithEmpty()); [EOL]     assertEquals("{\"RootBeanWithEmpty\":{\"a\":2}}", json); [EOL]     RootBeanWithEmpty bean2 = mapper.readValue(json, RootBeanWithEmpty.class); [EOL]     assertNotNull(bean2); [EOL]     assertEquals(2, bean2.a); [EOL] }
public void testRootViaMapper() throws Exception { [EOL]     ObjectMapper mapper = rootMapper(); [EOL]     String json = mapper.writeValueAsString(new Bean()); [EOL]     assertEquals("{\"rudy\":{\"a\":3}}", json); [EOL]     Bean bean = mapper.readValue(json, Bean.class); [EOL]     assertNotNull(bean); [EOL]     json = mapper.writeValueAsString(new RootBeanWithEmpty()); [EOL]     assertEquals("{\"RootBeanWithEmpty\":{\"a\":2}}", json); [EOL]     RootBeanWithEmpty bean2 = mapper.readValue(json, RootBeanWithEmpty.class); [EOL]     assertNotNull(bean2); [EOL]     assertEquals(2, bean2.a); [EOL] }
public void testRootViaMapper() throws Exception { [EOL]     ObjectMapper mapper = rootMapper(); [EOL]     String json = mapper.writeValueAsString(new Bean()); [EOL]     assertEquals("{\"rudy\":{\"a\":3}}", json); [EOL]     Bean bean = mapper.readValue(json, Bean.class); [EOL]     assertNotNull(bean); [EOL]     json = mapper.writeValueAsString(new RootBeanWithEmpty()); [EOL]     assertEquals("{\"RootBeanWithEmpty\":{\"a\":2}}", json); [EOL]     RootBeanWithEmpty bean2 = mapper.readValue(json, RootBeanWithEmpty.class); [EOL]     assertNotNull(bean2); [EOL]     assertEquals(2, bean2.a); [EOL] }
public void testRootViaMapper() throws Exception { [EOL]     ObjectMapper mapper = rootMapper(); [EOL]     String json = mapper.writeValueAsString(new Bean()); [EOL]     assertEquals("{\"rudy\":{\"a\":3}}", json); [EOL]     Bean bean = mapper.readValue(json, Bean.class); [EOL]     assertNotNull(bean); [EOL]     json = mapper.writeValueAsString(new RootBeanWithEmpty()); [EOL]     assertEquals("{\"RootBeanWithEmpty\":{\"a\":2}}", json); [EOL]     RootBeanWithEmpty bean2 = mapper.readValue(json, RootBeanWithEmpty.class); [EOL]     assertNotNull(bean2); [EOL]     assertEquals(2, bean2.a); [EOL] }
public void testRootViaMapper() throws Exception { [EOL]     ObjectMapper mapper = rootMapper(); [EOL]     String json = mapper.writeValueAsString(new Bean()); [EOL]     assertEquals("{\"rudy\":{\"a\":3}}", json); [EOL]     Bean bean = mapper.readValue(json, Bean.class); [EOL]     assertNotNull(bean); [EOL]     json = mapper.writeValueAsString(new RootBeanWithEmpty()); [EOL]     assertEquals("{\"RootBeanWithEmpty\":{\"a\":2}}", json); [EOL]     RootBeanWithEmpty bean2 = mapper.readValue(json, RootBeanWithEmpty.class); [EOL]     assertNotNull(bean2); [EOL]     assertEquals(2, bean2.a); [EOL] }
public void testRootViaMapper() throws Exception { [EOL]     ObjectMapper mapper = rootMapper(); [EOL]     String json = mapper.writeValueAsString(new Bean()); [EOL]     assertEquals("{\"rudy\":{\"a\":3}}", json); [EOL]     Bean bean = mapper.readValue(json, Bean.class); [EOL]     assertNotNull(bean); [EOL]     json = mapper.writeValueAsString(new RootBeanWithEmpty()); [EOL]     assertEquals("{\"RootBeanWithEmpty\":{\"a\":2}}", json); [EOL]     RootBeanWithEmpty bean2 = mapper.readValue(json, RootBeanWithEmpty.class); [EOL]     assertNotNull(bean2); [EOL]     assertEquals(2, bean2.a); [EOL] }
public void testRootViaMapper() throws Exception { [EOL]     ObjectMapper mapper = rootMapper(); [EOL]     String json = mapper.writeValueAsString(new Bean()); [EOL]     assertEquals("{\"rudy\":{\"a\":3}}", json); [EOL]     Bean bean = mapper.readValue(json, Bean.class); [EOL]     assertNotNull(bean); [EOL]     json = mapper.writeValueAsString(new RootBeanWithEmpty()); [EOL]     assertEquals("{\"RootBeanWithEmpty\":{\"a\":2}}", json); [EOL]     RootBeanWithEmpty bean2 = mapper.readValue(json, RootBeanWithEmpty.class); [EOL]     assertNotNull(bean2); [EOL]     assertEquals(2, bean2.a); [EOL] }
public void testSimpleGetterInterfaceImpl() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(m, new PojoImpl()); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals(Integer.valueOf(5), result.get("foobar")); [EOL]     assertEquals(Integer.valueOf(1), result.get("width")); [EOL]     assertEquals(Integer.valueOf(2), result.get("length")); [EOL] }
public void testSimpleGetterInterfaceImpl() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(m, new PojoImpl()); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals(Integer.valueOf(5), result.get("foobar")); [EOL]     assertEquals(Integer.valueOf(1), result.get("width")); [EOL]     assertEquals(Integer.valueOf(2), result.get("length")); [EOL] }
public void testSimpleGetterInterfaceImpl() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(m, new PojoImpl()); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals(Integer.valueOf(5), result.get("foobar")); [EOL]     assertEquals(Integer.valueOf(1), result.get("width")); [EOL]     assertEquals(Integer.valueOf(2), result.get("length")); [EOL] }
public void testSimpleGetterInterfaceImpl() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(m, new PojoImpl()); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals(Integer.valueOf(5), result.get("foobar")); [EOL]     assertEquals(Integer.valueOf(1), result.get("width")); [EOL]     assertEquals(Integer.valueOf(2), result.get("length")); [EOL] }
public void testDateScalars() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     long ts = 12345678L; [EOL]     assertEquals("[[\"java.util.Date\"," + ts + "]]", m.writeValueAsString(new Object[] { new Date(ts) })); [EOL]     Calendar c = Calendar.getInstance(); [EOL]     c.setTimeInMillis(ts); [EOL]     String json = m.writeValueAsString(new Object[] { c }); [EOL]     assertEquals("[[\"" + c.getClass().getName() + "\"," + ts + "]]", json); [EOL]     Object[] result = m.readValue(json, Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     assertTrue(result[0] instanceof Calendar); [EOL]     assertEquals(ts, ((Calendar) result[0]).getTimeInMillis()); [EOL] }
public void testDateScalars() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     long ts = 12345678L; [EOL]     assertEquals("[[\"java.util.Date\"," + ts + "]]", m.writeValueAsString(new Object[] { new Date(ts) })); [EOL]     Calendar c = Calendar.getInstance(); [EOL]     c.setTimeInMillis(ts); [EOL]     String json = m.writeValueAsString(new Object[] { c }); [EOL]     assertEquals("[[\"" + c.getClass().getName() + "\"," + ts + "]]", json); [EOL]     Object[] result = m.readValue(json, Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     assertTrue(result[0] instanceof Calendar); [EOL]     assertEquals(ts, ((Calendar) result[0]).getTimeInMillis()); [EOL] }
public void testDateScalars() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     long ts = 12345678L; [EOL]     assertEquals("[[\"java.util.Date\"," + ts + "]]", m.writeValueAsString(new Object[] { new Date(ts) })); [EOL]     Calendar c = Calendar.getInstance(); [EOL]     c.setTimeInMillis(ts); [EOL]     String json = m.writeValueAsString(new Object[] { c }); [EOL]     assertEquals("[[\"" + c.getClass().getName() + "\"," + ts + "]]", json); [EOL]     Object[] result = m.readValue(json, Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     assertTrue(result[0] instanceof Calendar); [EOL]     assertEquals(ts, ((Calendar) result[0]).getTimeInMillis()); [EOL] }
public void testDelegateBeanInstantiator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new MyModule(MyBean.class, new MyDelegateBeanInstantiator())); [EOL]     MyBean bean = mapper.readValue("123", MyBean.class); [EOL]     assertNotNull(bean); [EOL]     assertEquals("123", bean._secret); [EOL] }
public void testBeanFromDouble() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new MyModule(MysteryBean.class, new InstantiatorBase() { [EOL]  [EOL]         @Override [EOL]         public boolean canCreateFromDouble() { [EOL]             return true; [EOL]         } [EOL]  [EOL]         @Override [EOL]         public Object createFromDouble(DeserializationContext ctxt, double value) { [EOL]             return new MysteryBean(2.0 * value); [EOL]         } [EOL]     })); [EOL]     MysteryBean result = mapper.readValue("0.25", MysteryBean.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(Double.valueOf(0.5), result.value); [EOL] }
public void testBeanFromDouble() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new MyModule(MysteryBean.class, new InstantiatorBase() { [EOL]  [EOL]         @Override [EOL]         public boolean canCreateFromDouble() { [EOL]             return true; [EOL]         } [EOL]  [EOL]         @Override [EOL]         public Object createFromDouble(DeserializationContext ctxt, double value) { [EOL]             return new MysteryBean(2.0 * value); [EOL]         } [EOL]     })); [EOL]     MysteryBean result = mapper.readValue("0.25", MysteryBean.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(Double.valueOf(0.5), result.value); [EOL] }
public void testBeanFromDouble() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new MyModule(MysteryBean.class, new InstantiatorBase() { [EOL]  [EOL]         @Override [EOL]         public boolean canCreateFromDouble() { [EOL]             return true; [EOL]         } [EOL]  [EOL]         @Override [EOL]         public Object createFromDouble(DeserializationContext ctxt, double value) { [EOL]             return new MysteryBean(2.0 * value); [EOL]         } [EOL]     })); [EOL]     MysteryBean result = mapper.readValue("0.25", MysteryBean.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(Double.valueOf(0.5), result.value); [EOL] }
public void testDelegateBeanInstantiator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new MyModule(MyBean.class, new MyDelegateBeanInstantiator())); [EOL]     MyBean bean = mapper.readValue("123", MyBean.class); [EOL]     assertNotNull(bean); [EOL]     assertEquals("123", bean._secret); [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = "{ \"a\" : 123, \"list\" : [ 12.25, null, true, { }, [ ] ] }"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals("Expected START_OBJECT", JsonToken.START_OBJECT.asString(), jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals("a", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals(123, jp.getIntValue()); [EOL]     assertEquals("123", jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals("list", jp.getText()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals(JsonToken.START_ARRAY.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(12.25, jp.getDoubleValue(), 0); [EOL]     assertEquals("12.25", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NULL, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(JsonToken.VALUE_NULL.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_TRUE, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertTrue(jp.getBooleanValue()); [EOL]     assertEquals(JsonToken.VALUE_TRUE.asString(), jp.getText()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = "{ \"a\" : 123, \"list\" : [ 12.25, null, true, { }, [ ] ] }"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals("Expected START_OBJECT", JsonToken.START_OBJECT.asString(), jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals("a", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals(123, jp.getIntValue()); [EOL]     assertEquals("123", jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals("list", jp.getText()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals(JsonToken.START_ARRAY.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(12.25, jp.getDoubleValue(), 0); [EOL]     assertEquals("12.25", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NULL, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(JsonToken.VALUE_NULL.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_TRUE, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertTrue(jp.getBooleanValue()); [EOL]     assertEquals(JsonToken.VALUE_TRUE.asString(), jp.getText()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL] }
public void testDeepUnwrapping() throws Exception { [EOL]     DeepUnwrapping bean = mapper.readValue("{\"x\":3,\"name\":\"Bob\",\"y\":27}", DeepUnwrapping.class); [EOL]     Unwrapping uw = bean.unwrapped; [EOL]     assertNotNull(uw); [EOL]     assertEquals("Bob", uw.name); [EOL]     Location loc = uw.location; [EOL]     assertNotNull(loc); [EOL]     assertEquals(3, loc.x); [EOL]     assertEquals(27, loc.y); [EOL] }
public void testSimpleGetterInterfaceImpl() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(m, new PojoImpl()); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals(Integer.valueOf(5), result.get("foobar")); [EOL]     assertEquals(Integer.valueOf(1), result.get("width")); [EOL]     assertEquals(Integer.valueOf(2), result.get("length")); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testAtomicBoolean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     AtomicBoolean b = mapper.readValue("true", AtomicBoolean.class); [EOL]     assertTrue(b.get()); [EOL] }
public void testAtomicBoolean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     AtomicBoolean b = mapper.readValue("true", AtomicBoolean.class); [EOL]     assertTrue(b.get()); [EOL] }
public void testAtomicBoolean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     AtomicBoolean b = mapper.readValue("true", AtomicBoolean.class); [EOL]     assertTrue(b.get()); [EOL] }
public void testAtomicBoolean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     AtomicBoolean b = mapper.readValue("true", AtomicBoolean.class); [EOL]     assertTrue(b.get()); [EOL] }
public void testAtomicBoolean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     AtomicBoolean b = mapper.readValue("true", AtomicBoolean.class); [EOL]     assertTrue(b.get()); [EOL] }
public void testAtomicBoolean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     AtomicBoolean b = mapper.readValue("true", AtomicBoolean.class); [EOL]     assertTrue(b.get()); [EOL] }
public void testAtomicBoolean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     AtomicBoolean b = mapper.readValue("true", AtomicBoolean.class); [EOL]     assertTrue(b.get()); [EOL] }
public void testAtomicBoolean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     AtomicBoolean b = mapper.readValue("true", AtomicBoolean.class); [EOL]     assertTrue(b.get()); [EOL] }
public void testAtomicBoolean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     AtomicBoolean b = mapper.readValue("true", AtomicBoolean.class); [EOL]     assertTrue(b.get()); [EOL] }
public void testAtomicBoolean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     AtomicBoolean b = mapper.readValue("true", AtomicBoolean.class); [EOL]     assertTrue(b.get()); [EOL] }
public void testAtomicBoolean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     AtomicBoolean b = mapper.readValue("true", AtomicBoolean.class); [EOL]     assertTrue(b.get()); [EOL] }
public void testBooleanListAsProp() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\"" + TypedListAsProp.class.getName() + "\",[true, false]]"; [EOL]     JavaType type = TypeFactory.defaultInstance().constructCollectionType(TypedListAsProp.class, Boolean.class); [EOL]     TypedListAsProp<Object> result = m.readValue(JSON, type); [EOL]     assertNotNull(result); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(Boolean.TRUE, result.get(0)); [EOL]     assertEquals(Boolean.FALSE, result.get(1)); [EOL] }
public void testBooleanListAsProp() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\"" + TypedListAsProp.class.getName() + "\",[true, false]]"; [EOL]     JavaType type = TypeFactory.defaultInstance().constructCollectionType(TypedListAsProp.class, Boolean.class); [EOL]     TypedListAsProp<Object> result = m.readValue(JSON, type); [EOL]     assertNotNull(result); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(Boolean.TRUE, result.get(0)); [EOL]     assertEquals(Boolean.FALSE, result.get(1)); [EOL] }
public void testBooleanListAsProp() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\"" + TypedListAsProp.class.getName() + "\",[true, false]]"; [EOL]     JavaType type = TypeFactory.defaultInstance().constructCollectionType(TypedListAsProp.class, Boolean.class); [EOL]     TypedListAsProp<Object> result = m.readValue(JSON, type); [EOL]     assertNotNull(result); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(Boolean.TRUE, result.get(0)); [EOL]     assertEquals(Boolean.FALSE, result.get(1)); [EOL] }
public void testBooleanListAsProp() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\"" + TypedListAsProp.class.getName() + "\",[true, false]]"; [EOL]     JavaType type = TypeFactory.defaultInstance().constructCollectionType(TypedListAsProp.class, Boolean.class); [EOL]     TypedListAsProp<Object> result = m.readValue(JSON, type); [EOL]     assertNotNull(result); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(Boolean.TRUE, result.get(0)); [EOL]     assertEquals(Boolean.FALSE, result.get(1)); [EOL] }
public void testBooleanListAsProp() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\"" + TypedListAsProp.class.getName() + "\",[true, false]]"; [EOL]     JavaType type = TypeFactory.defaultInstance().constructCollectionType(TypedListAsProp.class, Boolean.class); [EOL]     TypedListAsProp<Object> result = m.readValue(JSON, type); [EOL]     assertNotNull(result); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(Boolean.TRUE, result.get(0)); [EOL]     assertEquals(Boolean.FALSE, result.get(1)); [EOL] }
public void testBooleanListAsProp() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\"" + TypedListAsProp.class.getName() + "\",[true, false]]"; [EOL]     JavaType type = TypeFactory.defaultInstance().constructCollectionType(TypedListAsProp.class, Boolean.class); [EOL]     TypedListAsProp<Object> result = m.readValue(JSON, type); [EOL]     assertNotNull(result); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(Boolean.TRUE, result.get(0)); [EOL]     assertEquals(Boolean.FALSE, result.get(1)); [EOL] }
public void testBooleanListAsProp() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\"" + TypedListAsProp.class.getName() + "\",[true, false]]"; [EOL]     JavaType type = TypeFactory.defaultInstance().constructCollectionType(TypedListAsProp.class, Boolean.class); [EOL]     TypedListAsProp<Object> result = m.readValue(JSON, type); [EOL]     assertNotNull(result); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(Boolean.TRUE, result.get(0)); [EOL]     assertEquals(Boolean.FALSE, result.get(1)); [EOL] }
public void testBooleanListAsProp() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\"" + TypedListAsProp.class.getName() + "\",[true, false]]"; [EOL]     JavaType type = TypeFactory.defaultInstance().constructCollectionType(TypedListAsProp.class, Boolean.class); [EOL]     TypedListAsProp<Object> result = m.readValue(JSON, type); [EOL]     assertNotNull(result); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(Boolean.TRUE, result.get(0)); [EOL]     assertEquals(Boolean.FALSE, result.get(1)); [EOL] }
public void testBooleanListAsProp() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\"" + TypedListAsProp.class.getName() + "\",[true, false]]"; [EOL]     JavaType type = TypeFactory.defaultInstance().constructCollectionType(TypedListAsProp.class, Boolean.class); [EOL]     TypedListAsProp<Object> result = m.readValue(JSON, type); [EOL]     assertNotNull(result); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(Boolean.TRUE, result.get(0)); [EOL]     assertEquals(Boolean.FALSE, result.get(1)); [EOL] }
public void testBooleanListAsProp() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\"" + TypedListAsProp.class.getName() + "\",[true, false]]"; [EOL]     JavaType type = TypeFactory.defaultInstance().constructCollectionType(TypedListAsProp.class, Boolean.class); [EOL]     TypedListAsProp<Object> result = m.readValue(JSON, type); [EOL]     assertNotNull(result); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(Boolean.TRUE, result.get(0)); [EOL]     assertEquals(Boolean.FALSE, result.get(1)); [EOL] }
public void testBooleanListAsProp() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\"" + TypedListAsProp.class.getName() + "\",[true, false]]"; [EOL]     JavaType type = TypeFactory.defaultInstance().constructCollectionType(TypedListAsProp.class, Boolean.class); [EOL]     TypedListAsProp<Object> result = m.readValue(JSON, type); [EOL]     assertNotNull(result); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(Boolean.TRUE, result.get(0)); [EOL]     assertEquals(Boolean.FALSE, result.get(1)); [EOL] }
public void testLongToBoolean() throws Exception { [EOL]     long value = 1L + Integer.MAX_VALUE; [EOL]     BooleanBean b = mapper.readValue("{\"primitive\" : " + value + ", \"wrapper\":" + value + ", \"ctor\":" + value + "}", BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, b.wrapper); [EOL]     assertTrue(b.primitive); [EOL]     assertEquals(Boolean.TRUE, b.ctor); [EOL] }
public void testLongToBoolean() throws Exception { [EOL]     long value = 1L + Integer.MAX_VALUE; [EOL]     BooleanBean b = mapper.readValue("{\"primitive\" : " + value + ", \"wrapper\":" + value + ", \"ctor\":" + value + "}", BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, b.wrapper); [EOL]     assertTrue(b.primitive); [EOL]     assertEquals(Boolean.TRUE, b.ctor); [EOL] }
public void testLongToBoolean() throws Exception { [EOL]     long value = 1L + Integer.MAX_VALUE; [EOL]     BooleanBean b = mapper.readValue("{\"primitive\" : " + value + ", \"wrapper\":" + value + ", \"ctor\":" + value + "}", BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, b.wrapper); [EOL]     assertTrue(b.primitive); [EOL]     assertEquals(Boolean.TRUE, b.ctor); [EOL] }
public void testLongToBoolean() throws Exception { [EOL]     long value = 1L + Integer.MAX_VALUE; [EOL]     BooleanBean b = mapper.readValue("{\"primitive\" : " + value + ", \"wrapper\":" + value + ", \"ctor\":" + value + "}", BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, b.wrapper); [EOL]     assertTrue(b.primitive); [EOL]     assertEquals(Boolean.TRUE, b.ctor); [EOL] }
public void testLongToBoolean() throws Exception { [EOL]     long value = 1L + Integer.MAX_VALUE; [EOL]     BooleanBean b = mapper.readValue("{\"primitive\" : " + value + ", \"wrapper\":" + value + ", \"ctor\":" + value + "}", BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, b.wrapper); [EOL]     assertTrue(b.primitive); [EOL]     assertEquals(Boolean.TRUE, b.ctor); [EOL] }
public void testStringsToInts() { [EOL]     assertArrayEquals(new int[] { 1, 2, 3, 4, -1, 0 }, MAPPER.convertValue("1  2 3    4  -1 0".split("\\s+"), int[].class)); [EOL] }
public void testStringsToInts() { [EOL]     assertArrayEquals(new int[] { 1, 2, 3, 4, -1, 0 }, MAPPER.convertValue("1  2 3    4  -1 0".split("\\s+"), int[].class)); [EOL] }
public void testStringsToInts() { [EOL]     assertArrayEquals(new int[] { 1, 2, 3, 4, -1, 0 }, MAPPER.convertValue("1  2 3    4  -1 0".split("\\s+"), int[].class)); [EOL] }
public void testStringsToInts() { [EOL]     assertArrayEquals(new int[] { 1, 2, 3, 4, -1, 0 }, MAPPER.convertValue("1  2 3    4  -1 0".split("\\s+"), int[].class)); [EOL] }
public void testStringsToInts() { [EOL]     assertArrayEquals(new int[] { 1, 2, 3, 4, -1, 0 }, MAPPER.convertValue("1  2 3    4  -1 0".split("\\s+"), int[].class)); [EOL] }
public void testStringsToInts() { [EOL]     assertArrayEquals(new int[] { 1, 2, 3, 4, -1, 0 }, MAPPER.convertValue("1  2 3    4  -1 0".split("\\s+"), int[].class)); [EOL] }
public void testStringsToInts() { [EOL]     assertArrayEquals(new int[] { 1, 2, 3, 4, -1, 0 }, MAPPER.convertValue("1  2 3    4  -1 0".split("\\s+"), int[].class)); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testArrayIdentityTransforms() throws Exception { [EOL]     verifyByteArrayConversion(bytes(), byte[].class); [EOL]     verifyShortArrayConversion(shorts(), short[].class); [EOL]     verifyIntArrayConversion(ints(), int[].class); [EOL]     verifyLongArrayConversion(longs(), long[].class); [EOL]     verifyFloatArrayConversion(floats(), float[].class); [EOL]     verifyDoubleArrayConversion(doubles(), float[].class); [EOL] }
public void testArrayIdentityTransforms() throws Exception { [EOL]     verifyByteArrayConversion(bytes(), byte[].class); [EOL]     verifyShortArrayConversion(shorts(), short[].class); [EOL]     verifyIntArrayConversion(ints(), int[].class); [EOL]     verifyLongArrayConversion(longs(), long[].class); [EOL]     verifyFloatArrayConversion(floats(), float[].class); [EOL]     verifyDoubleArrayConversion(doubles(), float[].class); [EOL] }
public void testArrayIdentityTransforms() throws Exception { [EOL]     verifyByteArrayConversion(bytes(), byte[].class); [EOL]     verifyShortArrayConversion(shorts(), short[].class); [EOL]     verifyIntArrayConversion(ints(), int[].class); [EOL]     verifyLongArrayConversion(longs(), long[].class); [EOL]     verifyFloatArrayConversion(floats(), float[].class); [EOL]     verifyDoubleArrayConversion(doubles(), float[].class); [EOL] }
public void testArrayIdentityTransforms() throws Exception { [EOL]     verifyByteArrayConversion(bytes(), byte[].class); [EOL]     verifyShortArrayConversion(shorts(), short[].class); [EOL]     verifyIntArrayConversion(ints(), int[].class); [EOL]     verifyLongArrayConversion(longs(), long[].class); [EOL]     verifyFloatArrayConversion(floats(), float[].class); [EOL]     verifyDoubleArrayConversion(doubles(), float[].class); [EOL] }
public void testArrayIdentityTransforms() throws Exception { [EOL]     verifyByteArrayConversion(bytes(), byte[].class); [EOL]     verifyShortArrayConversion(shorts(), short[].class); [EOL]     verifyIntArrayConversion(ints(), int[].class); [EOL]     verifyLongArrayConversion(longs(), long[].class); [EOL]     verifyFloatArrayConversion(floats(), float[].class); [EOL]     verifyDoubleArrayConversion(doubles(), float[].class); [EOL] }
public void testArrayIdentityTransforms() throws Exception { [EOL]     verifyByteArrayConversion(bytes(), byte[].class); [EOL]     verifyShortArrayConversion(shorts(), short[].class); [EOL]     verifyIntArrayConversion(ints(), int[].class); [EOL]     verifyLongArrayConversion(longs(), long[].class); [EOL]     verifyFloatArrayConversion(floats(), float[].class); [EOL]     verifyDoubleArrayConversion(doubles(), float[].class); [EOL] }
public void testArrayIdentityTransforms() throws Exception { [EOL]     verifyByteArrayConversion(bytes(), byte[].class); [EOL]     verifyShortArrayConversion(shorts(), short[].class); [EOL]     verifyIntArrayConversion(ints(), int[].class); [EOL]     verifyLongArrayConversion(longs(), long[].class); [EOL]     verifyFloatArrayConversion(floats(), float[].class); [EOL]     verifyDoubleArrayConversion(doubles(), float[].class); [EOL] }
public void testArrayIdentityTransforms() throws Exception { [EOL]     verifyByteArrayConversion(bytes(), byte[].class); [EOL]     verifyShortArrayConversion(shorts(), short[].class); [EOL]     verifyIntArrayConversion(ints(), int[].class); [EOL]     verifyLongArrayConversion(longs(), long[].class); [EOL]     verifyFloatArrayConversion(floats(), float[].class); [EOL]     verifyDoubleArrayConversion(doubles(), float[].class); [EOL] }
public void testArrayIdentityTransforms() throws Exception { [EOL]     verifyByteArrayConversion(bytes(), byte[].class); [EOL]     verifyShortArrayConversion(shorts(), short[].class); [EOL]     verifyIntArrayConversion(ints(), int[].class); [EOL]     verifyLongArrayConversion(longs(), long[].class); [EOL]     verifyFloatArrayConversion(floats(), float[].class); [EOL]     verifyDoubleArrayConversion(doubles(), float[].class); [EOL] }
public void testArrayIdentityTransforms() throws Exception { [EOL]     verifyByteArrayConversion(bytes(), byte[].class); [EOL]     verifyShortArrayConversion(shorts(), short[].class); [EOL]     verifyIntArrayConversion(ints(), int[].class); [EOL]     verifyLongArrayConversion(longs(), long[].class); [EOL]     verifyFloatArrayConversion(floats(), float[].class); [EOL]     verifyDoubleArrayConversion(doubles(), float[].class); [EOL] }
public void testDoubleWrapper() throws Exception { [EOL]     String[] STRS = new String[] { "1.0", "0.0", "-0.3", "0.7", "42.012", "-999.0", NAN_STRING }; [EOL]     for (String str : STRS) { [EOL]         Double exp = Double.valueOf(str); [EOL]         Double result; [EOL]         if (NAN_STRING != str) { [EOL]             result = MAPPER.readValue(new StringReader(str), Double.class); [EOL]             assertEquals(exp, result); [EOL]         } [EOL]         result = MAPPER.readValue(new StringReader(" \"" + str + "\""), Double.class); [EOL]         assertEquals(exp, result); [EOL]     } [EOL] }
public void testDatesWithEmptyStrings() throws Exception { [EOL]     assertNull(MAPPER.readValue(quote(""), java.util.Date.class)); [EOL]     assertNull(MAPPER.readValue(quote(""), java.util.Calendar.class)); [EOL]     assertNull(MAPPER.readValue(quote(""), java.sql.Date.class)); [EOL] }
public void testDatesWithEmptyStrings() throws Exception { [EOL]     assertNull(MAPPER.readValue(quote(""), java.util.Date.class)); [EOL]     assertNull(MAPPER.readValue(quote(""), java.util.Calendar.class)); [EOL]     assertNull(MAPPER.readValue(quote(""), java.sql.Date.class)); [EOL] }
public void testDatesWithEmptyStrings() throws Exception { [EOL]     assertNull(MAPPER.readValue(quote(""), java.util.Date.class)); [EOL]     assertNull(MAPPER.readValue(quote(""), java.util.Calendar.class)); [EOL]     assertNull(MAPPER.readValue(quote(""), java.sql.Date.class)); [EOL] }
public void testDatesWithEmptyStrings() throws Exception { [EOL]     assertNull(MAPPER.readValue(quote(""), java.util.Date.class)); [EOL]     assertNull(MAPPER.readValue(quote(""), java.util.Calendar.class)); [EOL]     assertNull(MAPPER.readValue(quote(""), java.sql.Date.class)); [EOL] }
public void testDatesWithEmptyStrings() throws Exception { [EOL]     assertNull(MAPPER.readValue(quote(""), java.util.Date.class)); [EOL]     assertNull(MAPPER.readValue(quote(""), java.util.Calendar.class)); [EOL]     assertNull(MAPPER.readValue(quote(""), java.sql.Date.class)); [EOL] }
public void testDatesWithEmptyStrings() throws Exception { [EOL]     assertNull(MAPPER.readValue(quote(""), java.util.Date.class)); [EOL]     assertNull(MAPPER.readValue(quote(""), java.util.Calendar.class)); [EOL]     assertNull(MAPPER.readValue(quote(""), java.sql.Date.class)); [EOL] }
public void testDoubleWrapper() throws Exception { [EOL]     String[] STRS = new String[] { "1.0", "0.0", "-0.3", "0.7", "42.012", "-999.0", NAN_STRING }; [EOL]     for (String str : STRS) { [EOL]         Double exp = Double.valueOf(str); [EOL]         Double result; [EOL]         if (NAN_STRING != str) { [EOL]             result = MAPPER.readValue(new StringReader(str), Double.class); [EOL]             assertEquals(exp, result); [EOL]         } [EOL]         result = MAPPER.readValue(new StringReader(" \"" + str + "\""), Double.class); [EOL]         assertEquals(exp, result); [EOL]     } [EOL] }
public void testDoubleWrapper() throws Exception { [EOL]     String[] STRS = new String[] { "1.0", "0.0", "-0.3", "0.7", "42.012", "-999.0", NAN_STRING }; [EOL]     for (String str : STRS) { [EOL]         Double exp = Double.valueOf(str); [EOL]         Double result; [EOL]         if (NAN_STRING != str) { [EOL]             result = MAPPER.readValue(new StringReader(str), Double.class); [EOL]             assertEquals(exp, result); [EOL]         } [EOL]         result = MAPPER.readValue(new StringReader(" \"" + str + "\""), Double.class); [EOL]         assertEquals(exp, result); [EOL]     } [EOL] }
public void testDoubleWrapper() throws Exception { [EOL]     String[] STRS = new String[] { "1.0", "0.0", "-0.3", "0.7", "42.012", "-999.0", NAN_STRING }; [EOL]     for (String str : STRS) { [EOL]         Double exp = Double.valueOf(str); [EOL]         Double result; [EOL]         if (NAN_STRING != str) { [EOL]             result = MAPPER.readValue(new StringReader(str), Double.class); [EOL]             assertEquals(exp, result); [EOL]         } [EOL]         result = MAPPER.readValue(new StringReader(" \"" + str + "\""), Double.class); [EOL]         assertEquals(exp, result); [EOL]     } [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testUnknownHandlingIgnoreWithHandler() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.clearProblemHandlers(); [EOL]     mapper.addHandler(new MyHandler()); [EOL]     TestBean result = mapper.readValue(new StringReader(JSON_UNKNOWN_FIELD), TestBean.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result._a); [EOL]     assertEquals(-1, result._b); [EOL]     assertEquals("foo:START_ARRAY", result._unknown); [EOL] }
public void testUnknownHandlingIgnoreWithHandler() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.clearProblemHandlers(); [EOL]     mapper.addHandler(new MyHandler()); [EOL]     TestBean result = mapper.readValue(new StringReader(JSON_UNKNOWN_FIELD), TestBean.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result._a); [EOL]     assertEquals(-1, result._b); [EOL]     assertEquals("foo:START_ARRAY", result._unknown); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testBase64Variants() throws Exception { [EOL]     final byte[] INPUT = "abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890X".getBytes("UTF-8"); [EOL]     assertEquals(quote("YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwWA=="), MAPPER.writeValueAsString(INPUT)); [EOL]     assertEquals(quote("YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwWA=="), MAPPER.writer(Base64Variants.MIME_NO_LINEFEEDS).writeValueAsString(INPUT)); [EOL]     assertEquals(quote("YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwYWJjZGVmZ2hpamtsbW5vcHFyc3R1\\ndnd4eXoxMjM0NTY3ODkwWA=="), MAPPER.writer(Base64Variants.MIME).writeValueAsString(INPUT)); [EOL]     assertEquals(quote("YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwWA"), MAPPER.writer(Base64Variants.MODIFIED_FOR_URL).writeValueAsString(INPUT)); [EOL]     assertEquals(quote("YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwYWJjZGVmZ2hpamts\\nbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwWA=="), MAPPER.writer(Base64Variants.PEM).writeValueAsString(INPUT)); [EOL] }
public void testBase64Variants() throws Exception { [EOL]     final byte[] INPUT = "abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890X".getBytes("UTF-8"); [EOL]     assertEquals(quote("YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwWA=="), MAPPER.writeValueAsString(INPUT)); [EOL]     assertEquals(quote("YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwWA=="), MAPPER.writer(Base64Variants.MIME_NO_LINEFEEDS).writeValueAsString(INPUT)); [EOL]     assertEquals(quote("YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwYWJjZGVmZ2hpamtsbW5vcHFyc3R1\\ndnd4eXoxMjM0NTY3ODkwWA=="), MAPPER.writer(Base64Variants.MIME).writeValueAsString(INPUT)); [EOL]     assertEquals(quote("YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwWA"), MAPPER.writer(Base64Variants.MODIFIED_FOR_URL).writeValueAsString(INPUT)); [EOL]     assertEquals(quote("YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwYWJjZGVmZ2hpamts\\nbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwWA=="), MAPPER.writer(Base64Variants.PEM).writeValueAsString(INPUT)); [EOL] }
public void testGlobalAutoDetection() throws IOException { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(m, new GetterClass()); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(Integer.valueOf(-2), result.get("x")); [EOL]     assertEquals(Integer.valueOf(1), result.get("y")); [EOL]     m = new ObjectMapper(); [EOL]     m.configure(MapperFeature.AUTO_DETECT_GETTERS, false); [EOL]     result = writeAndMap(m, new GetterClass()); [EOL]     assertEquals(1, result.size()); [EOL]     assertTrue(result.containsKey("x")); [EOL] }
public void testGlobalAutoDetection() throws IOException { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(m, new GetterClass()); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(Integer.valueOf(-2), result.get("x")); [EOL]     assertEquals(Integer.valueOf(1), result.get("y")); [EOL]     m = new ObjectMapper(); [EOL]     m.configure(MapperFeature.AUTO_DETECT_GETTERS, false); [EOL]     result = writeAndMap(m, new GetterClass()); [EOL]     assertEquals(1, result.size()); [EOL]     assertTrue(result.containsKey("x")); [EOL] }
public void testGlobalAutoDetection() throws IOException { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(m, new GetterClass()); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(Integer.valueOf(-2), result.get("x")); [EOL]     assertEquals(Integer.valueOf(1), result.get("y")); [EOL]     m = new ObjectMapper(); [EOL]     m.configure(MapperFeature.AUTO_DETECT_GETTERS, false); [EOL]     result = writeAndMap(m, new GetterClass()); [EOL]     assertEquals(1, result.size()); [EOL]     assertTrue(result.containsKey("x")); [EOL] }
public void testGlobalAutoDetection() throws IOException { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(m, new GetterClass()); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(Integer.valueOf(-2), result.get("x")); [EOL]     assertEquals(Integer.valueOf(1), result.get("y")); [EOL]     m = new ObjectMapper(); [EOL]     m.configure(MapperFeature.AUTO_DETECT_GETTERS, false); [EOL]     result = writeAndMap(m, new GetterClass()); [EOL]     assertEquals(1, result.size()); [EOL]     assertTrue(result.containsKey("x")); [EOL] }
public void testGlobalAutoDetection() throws IOException { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(m, new GetterClass()); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(Integer.valueOf(-2), result.get("x")); [EOL]     assertEquals(Integer.valueOf(1), result.get("y")); [EOL]     m = new ObjectMapper(); [EOL]     m.configure(MapperFeature.AUTO_DETECT_GETTERS, false); [EOL]     result = writeAndMap(m, new GetterClass()); [EOL]     assertEquals(1, result.size()); [EOL]     assertTrue(result.containsKey("x")); [EOL] }
public void testInetAddress() throws IOException { [EOL]     InetAddress address = mapper.readValue(quote("127.0.0.1"), InetAddress.class); [EOL]     assertEquals("127.0.0.1", address.getHostAddress()); [EOL]     final String HOST = "www.ning.com"; [EOL]     address = mapper.readValue(quote(HOST), InetAddress.class); [EOL]     assertEquals(HOST, address.getHostName()); [EOL] }
public void testInetAddress() throws IOException { [EOL]     InetAddress address = mapper.readValue(quote("127.0.0.1"), InetAddress.class); [EOL]     assertEquals("127.0.0.1", address.getHostAddress()); [EOL]     final String HOST = "www.ning.com"; [EOL]     address = mapper.readValue(quote(HOST), InetAddress.class); [EOL]     assertEquals(HOST, address.getHostName()); [EOL] }
public void testInetAddress() throws IOException { [EOL]     InetAddress address = mapper.readValue(quote("127.0.0.1"), InetAddress.class); [EOL]     assertEquals("127.0.0.1", address.getHostAddress()); [EOL]     final String HOST = "www.ning.com"; [EOL]     address = mapper.readValue(quote(HOST), InetAddress.class); [EOL]     assertEquals(HOST, address.getHostName()); [EOL] }
public void testInetAddress() throws IOException { [EOL]     InetAddress address = mapper.readValue(quote("127.0.0.1"), InetAddress.class); [EOL]     assertEquals("127.0.0.1", address.getHostAddress()); [EOL]     final String HOST = "www.ning.com"; [EOL]     address = mapper.readValue(quote(HOST), InetAddress.class); [EOL]     assertEquals(HOST, address.getHostName()); [EOL] }
public void testInetAddress() throws IOException { [EOL]     InetAddress address = mapper.readValue(quote("127.0.0.1"), InetAddress.class); [EOL]     assertEquals("127.0.0.1", address.getHostAddress()); [EOL]     final String HOST = "www.ning.com"; [EOL]     address = mapper.readValue(quote(HOST), InetAddress.class); [EOL]     assertEquals(HOST, address.getHostName()); [EOL] }
public void testInetAddress() throws IOException { [EOL]     InetAddress address = mapper.readValue(quote("127.0.0.1"), InetAddress.class); [EOL]     assertEquals("127.0.0.1", address.getHostAddress()); [EOL]     final String HOST = "www.ning.com"; [EOL]     address = mapper.readValue(quote(HOST), InetAddress.class); [EOL]     assertEquals(HOST, address.getHostName()); [EOL] }
public void testInetAddress() throws IOException { [EOL]     InetAddress address = mapper.readValue(quote("127.0.0.1"), InetAddress.class); [EOL]     assertEquals("127.0.0.1", address.getHostAddress()); [EOL]     final String HOST = "www.ning.com"; [EOL]     address = mapper.readValue(quote(HOST), InetAddress.class); [EOL]     assertEquals(HOST, address.getHostName()); [EOL] }
public void testInetAddress() throws IOException { [EOL]     InetAddress address = mapper.readValue(quote("127.0.0.1"), InetAddress.class); [EOL]     assertEquals("127.0.0.1", address.getHostAddress()); [EOL]     final String HOST = "www.ning.com"; [EOL]     address = mapper.readValue(quote(HOST), InetAddress.class); [EOL]     assertEquals(HOST, address.getHostName()); [EOL] }
public void testInetAddress() throws IOException { [EOL]     InetAddress address = mapper.readValue(quote("127.0.0.1"), InetAddress.class); [EOL]     assertEquals("127.0.0.1", address.getHostAddress()); [EOL]     final String HOST = "www.ning.com"; [EOL]     address = mapper.readValue(quote(HOST), InetAddress.class); [EOL]     assertEquals(HOST, address.getHostName()); [EOL] }
public void testInetAddress() throws IOException { [EOL]     InetAddress address = mapper.readValue(quote("127.0.0.1"), InetAddress.class); [EOL]     assertEquals("127.0.0.1", address.getHostAddress()); [EOL]     final String HOST = "www.ning.com"; [EOL]     address = mapper.readValue(quote(HOST), InetAddress.class); [EOL]     assertEquals(HOST, address.getHostName()); [EOL] }
public void testInetAddress() throws IOException { [EOL]     InetAddress address = mapper.readValue(quote("127.0.0.1"), InetAddress.class); [EOL]     assertEquals("127.0.0.1", address.getHostAddress()); [EOL]     final String HOST = "www.ning.com"; [EOL]     address = mapper.readValue(quote(HOST), InetAddress.class); [EOL]     assertEquals(HOST, address.getHostName()); [EOL] }
public void testInetAddress() throws IOException { [EOL]     InetAddress address = mapper.readValue(quote("127.0.0.1"), InetAddress.class); [EOL]     assertEquals("127.0.0.1", address.getHostAddress()); [EOL]     final String HOST = "www.ning.com"; [EOL]     address = mapper.readValue(quote(HOST), InetAddress.class); [EOL]     assertEquals(HOST, address.getHostName()); [EOL] }
public void testInetAddress() throws IOException { [EOL]     InetAddress address = mapper.readValue(quote("127.0.0.1"), InetAddress.class); [EOL]     assertEquals("127.0.0.1", address.getHostAddress()); [EOL]     final String HOST = "www.ning.com"; [EOL]     address = mapper.readValue(quote(HOST), InetAddress.class); [EOL]     assertEquals(HOST, address.getHostName()); [EOL] }
public void testInetAddress() throws IOException { [EOL]     InetAddress address = mapper.readValue(quote("127.0.0.1"), InetAddress.class); [EOL]     assertEquals("127.0.0.1", address.getHostAddress()); [EOL]     final String HOST = "www.ning.com"; [EOL]     address = mapper.readValue(quote(HOST), InetAddress.class); [EOL]     assertEquals(HOST, address.getHostName()); [EOL] }
public void testInetAddress() throws IOException { [EOL]     InetAddress address = mapper.readValue(quote("127.0.0.1"), InetAddress.class); [EOL]     assertEquals("127.0.0.1", address.getHostAddress()); [EOL]     final String HOST = "www.ning.com"; [EOL]     address = mapper.readValue(quote(HOST), InetAddress.class); [EOL]     assertEquals(HOST, address.getHostName()); [EOL] }
public void testInetAddress() throws IOException { [EOL]     InetAddress address = mapper.readValue(quote("127.0.0.1"), InetAddress.class); [EOL]     assertEquals("127.0.0.1", address.getHostAddress()); [EOL]     final String HOST = "www.ning.com"; [EOL]     address = mapper.readValue(quote(HOST), InetAddress.class); [EOL]     assertEquals(HOST, address.getHostName()); [EOL] }
public void testInetAddress() throws IOException { [EOL]     InetAddress address = mapper.readValue(quote("127.0.0.1"), InetAddress.class); [EOL]     assertEquals("127.0.0.1", address.getHostAddress()); [EOL]     final String HOST = "www.ning.com"; [EOL]     address = mapper.readValue(quote(HOST), InetAddress.class); [EOL]     assertEquals(HOST, address.getHostName()); [EOL] }
public void testAtomicBoolean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     AtomicBoolean b = mapper.readValue("true", AtomicBoolean.class); [EOL]     assertTrue(b.get()); [EOL] }
public void testAtomicBoolean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     AtomicBoolean b = mapper.readValue("true", AtomicBoolean.class); [EOL]     assertTrue(b.get()); [EOL] }
public void testAtomicBoolean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     AtomicBoolean b = mapper.readValue("true", AtomicBoolean.class); [EOL]     assertTrue(b.get()); [EOL] }
public void testAtomicBoolean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     AtomicBoolean b = mapper.readValue("true", AtomicBoolean.class); [EOL]     assertTrue(b.get()); [EOL] }
public void testSimpleGetterInterfaceImpl() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(m, new PojoImpl()); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals(Integer.valueOf(5), result.get("foobar")); [EOL]     assertEquals(Integer.valueOf(1), result.get("width")); [EOL]     assertEquals(Integer.valueOf(2), result.get("length")); [EOL] }
public void testSimpleGetterInterfaceImpl() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(m, new PojoImpl()); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals(Integer.valueOf(5), result.get("foobar")); [EOL]     assertEquals(Integer.valueOf(1), result.get("width")); [EOL]     assertEquals(Integer.valueOf(2), result.get("length")); [EOL] }
public void testSimpleGetterInterfaceImpl() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(m, new PojoImpl()); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals(Integer.valueOf(5), result.get("foobar")); [EOL]     assertEquals(Integer.valueOf(1), result.get("width")); [EOL]     assertEquals(Integer.valueOf(2), result.get("length")); [EOL] }
public void testDeepUnwrapping() throws Exception { [EOL]     DeepUnwrapping bean = mapper.readValue("{\"x\":3,\"name\":\"Bob\",\"y\":27}", DeepUnwrapping.class); [EOL]     Unwrapping uw = bean.unwrapped; [EOL]     assertNotNull(uw); [EOL]     assertEquals("Bob", uw.name); [EOL]     Location loc = uw.location; [EOL]     assertNotNull(loc); [EOL]     assertEquals(3, loc.x); [EOL]     assertEquals(27, loc.y); [EOL] }
public void testDeepUnwrapping() throws Exception { [EOL]     DeepUnwrapping bean = mapper.readValue("{\"x\":3,\"name\":\"Bob\",\"y\":27}", DeepUnwrapping.class); [EOL]     Unwrapping uw = bean.unwrapped; [EOL]     assertNotNull(uw); [EOL]     assertEquals("Bob", uw.name); [EOL]     Location loc = uw.location; [EOL]     assertNotNull(loc); [EOL]     assertEquals(3, loc.x); [EOL]     assertEquals(27, loc.y); [EOL] }
public void testDeepUnwrapping() throws Exception { [EOL]     DeepUnwrapping bean = mapper.readValue("{\"x\":3,\"name\":\"Bob\",\"y\":27}", DeepUnwrapping.class); [EOL]     Unwrapping uw = bean.unwrapped; [EOL]     assertNotNull(uw); [EOL]     assertEquals("Bob", uw.name); [EOL]     Location loc = uw.location; [EOL]     assertNotNull(loc); [EOL]     assertEquals(3, loc.x); [EOL]     assertEquals(27, loc.y); [EOL] }
public void testDeepUnwrapping() throws Exception { [EOL]     DeepUnwrapping bean = mapper.readValue("{\"x\":3,\"name\":\"Bob\",\"y\":27}", DeepUnwrapping.class); [EOL]     Unwrapping uw = bean.unwrapped; [EOL]     assertNotNull(uw); [EOL]     assertEquals("Bob", uw.name); [EOL]     Location loc = uw.location; [EOL]     assertNotNull(loc); [EOL]     assertEquals(3, loc.x); [EOL]     assertEquals(27, loc.y); [EOL] }
public void testDeepUnwrapping() throws Exception { [EOL]     DeepUnwrapping bean = mapper.readValue("{\"x\":3,\"name\":\"Bob\",\"y\":27}", DeepUnwrapping.class); [EOL]     Unwrapping uw = bean.unwrapped; [EOL]     assertNotNull(uw); [EOL]     assertEquals("Bob", uw.name); [EOL]     Location loc = uw.location; [EOL]     assertNotNull(loc); [EOL]     assertEquals(3, loc.x); [EOL]     assertEquals(27, loc.y); [EOL] }
public void testPolymorphicRoundtrip() throws Exception { [EOL]     Impl in1 = new Impl(123, 456); [EOL]     in1.next = new Impl(111, 222); [EOL]     in1.next.next = in1; [EOL]     String json = mapper.writeValueAsString(in1); [EOL]     Base result0 = mapper.readValue(json, Base.class); [EOL]     assertNotNull(result0); [EOL]     assertSame(Impl.class, result0.getClass()); [EOL]     Impl result = (Impl) result0; [EOL]     assertEquals(123, result.value); [EOL]     assertEquals(456, result.extra); [EOL]     Impl result2 = (Impl) result.next; [EOL]     assertEquals(111, result2.value); [EOL]     assertEquals(222, result2.extra); [EOL]     assertSame(result, result2.next); [EOL] }
public void testPolymorphicRoundtrip() throws Exception { [EOL]     Impl in1 = new Impl(123, 456); [EOL]     in1.next = new Impl(111, 222); [EOL]     in1.next.next = in1; [EOL]     String json = mapper.writeValueAsString(in1); [EOL]     Base result0 = mapper.readValue(json, Base.class); [EOL]     assertNotNull(result0); [EOL]     assertSame(Impl.class, result0.getClass()); [EOL]     Impl result = (Impl) result0; [EOL]     assertEquals(123, result.value); [EOL]     assertEquals(456, result.extra); [EOL]     Impl result2 = (Impl) result.next; [EOL]     assertEquals(111, result2.value); [EOL]     assertEquals(222, result2.extra); [EOL]     assertSame(result, result2.next); [EOL] }
public void testPolymorphicRoundtrip() throws Exception { [EOL]     Impl in1 = new Impl(123, 456); [EOL]     in1.next = new Impl(111, 222); [EOL]     in1.next.next = in1; [EOL]     String json = mapper.writeValueAsString(in1); [EOL]     Base result0 = mapper.readValue(json, Base.class); [EOL]     assertNotNull(result0); [EOL]     assertSame(Impl.class, result0.getClass()); [EOL]     Impl result = (Impl) result0; [EOL]     assertEquals(123, result.value); [EOL]     assertEquals(456, result.extra); [EOL]     Impl result2 = (Impl) result.next; [EOL]     assertEquals(111, result2.value); [EOL]     assertEquals(222, result2.extra); [EOL]     assertSame(result, result2.next); [EOL] }
public void testPolymorphicRoundtrip() throws Exception { [EOL]     Impl in1 = new Impl(123, 456); [EOL]     in1.next = new Impl(111, 222); [EOL]     in1.next.next = in1; [EOL]     String json = mapper.writeValueAsString(in1); [EOL]     Base result0 = mapper.readValue(json, Base.class); [EOL]     assertNotNull(result0); [EOL]     assertSame(Impl.class, result0.getClass()); [EOL]     Impl result = (Impl) result0; [EOL]     assertEquals(123, result.value); [EOL]     assertEquals(456, result.extra); [EOL]     Impl result2 = (Impl) result.next; [EOL]     assertEquals(111, result2.value); [EOL]     assertEquals(222, result2.extra); [EOL]     assertSame(result, result2.next); [EOL] }
public void testPolymorphicRoundtrip() throws Exception { [EOL]     Impl in1 = new Impl(123, 456); [EOL]     in1.next = new Impl(111, 222); [EOL]     in1.next.next = in1; [EOL]     String json = mapper.writeValueAsString(in1); [EOL]     Base result0 = mapper.readValue(json, Base.class); [EOL]     assertNotNull(result0); [EOL]     assertSame(Impl.class, result0.getClass()); [EOL]     Impl result = (Impl) result0; [EOL]     assertEquals(123, result.value); [EOL]     assertEquals(456, result.extra); [EOL]     Impl result2 = (Impl) result.next; [EOL]     assertEquals(111, result2.value); [EOL]     assertEquals(222, result2.extra); [EOL]     assertSame(result, result2.next); [EOL] }
public void testWithoutModule() { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.writeValueAsString(new CustomBean("foo", 3)); [EOL]         fail("Should have caused an exception"); [EOL]     } catch (IOException e) { [EOL]         verifyException(e, "No serializer found"); [EOL]     } [EOL]     try { [EOL]         mapper.readValue("{\"str\":\"ab\",\"num\":2}", CustomBean.class); [EOL]         fail("Should have caused an exception"); [EOL]     } catch (IOException e) { [EOL]         verifyException(e, "No suitable constructor found"); [EOL]     } [EOL] }
public void testWithoutModule() { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.writeValueAsString(new CustomBean("foo", 3)); [EOL]         fail("Should have caused an exception"); [EOL]     } catch (IOException e) { [EOL]         verifyException(e, "No serializer found"); [EOL]     } [EOL]     try { [EOL]         mapper.readValue("{\"str\":\"ab\",\"num\":2}", CustomBean.class); [EOL]         fail("Should have caused an exception"); [EOL]     } catch (IOException e) { [EOL]         verifyException(e, "No suitable constructor found"); [EOL]     } [EOL] }
public void testWithoutModule() { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.writeValueAsString(new CustomBean("foo", 3)); [EOL]         fail("Should have caused an exception"); [EOL]     } catch (IOException e) { [EOL]         verifyException(e, "No serializer found"); [EOL]     } [EOL]     try { [EOL]         mapper.readValue("{\"str\":\"ab\",\"num\":2}", CustomBean.class); [EOL]         fail("Should have caused an exception"); [EOL]     } catch (IOException e) { [EOL]         verifyException(e, "No suitable constructor found"); [EOL]     } [EOL] }
public void testWithoutModule() { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.writeValueAsString(new CustomBean("foo", 3)); [EOL]         fail("Should have caused an exception"); [EOL]     } catch (IOException e) { [EOL]         verifyException(e, "No serializer found"); [EOL]     } [EOL]     try { [EOL]         mapper.readValue("{\"str\":\"ab\",\"num\":2}", CustomBean.class); [EOL]         fail("Should have caused an exception"); [EOL]     } catch (IOException e) { [EOL]         verifyException(e, "No suitable constructor found"); [EOL]     } [EOL] }
public void testFromIntCtor() throws Exception { [EOL]     CtorValueBean result = MAPPER.readValue("13", CtorValueBean.class); [EOL]     assertEquals("13", result.toString()); [EOL] }
public void testFromIntCtor() throws Exception { [EOL]     CtorValueBean result = MAPPER.readValue("13", CtorValueBean.class); [EOL]     assertEquals("13", result.toString()); [EOL] }
public void testFromIntCtor() throws Exception { [EOL]     CtorValueBean result = MAPPER.readValue("13", CtorValueBean.class); [EOL]     assertEquals("13", result.toString()); [EOL] }
public void testFromIntCtor() throws Exception { [EOL]     CtorValueBean result = MAPPER.readValue("13", CtorValueBean.class); [EOL]     assertEquals("13", result.toString()); [EOL] }
public void testFromIntCtor() throws Exception { [EOL]     CtorValueBean result = MAPPER.readValue("13", CtorValueBean.class); [EOL]     assertEquals("13", result.toString()); [EOL] }
public void testFromIntCtor() throws Exception { [EOL]     CtorValueBean result = MAPPER.readValue("13", CtorValueBean.class); [EOL]     assertEquals("13", result.toString()); [EOL] }
public void testFromIntCtor() throws Exception { [EOL]     CtorValueBean result = MAPPER.readValue("13", CtorValueBean.class); [EOL]     assertEquals("13", result.toString()); [EOL] }
public void testBooleanDelegate() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     BooleanBean bb = m.readValue("true", BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL]     bb = m.readValue(quote("true"), BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL] }
public void testBooleanDelegate() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     BooleanBean bb = m.readValue("true", BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL]     bb = m.readValue(quote("true"), BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL] }
public void testBooleanDelegate() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     BooleanBean bb = m.readValue("true", BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL]     bb = m.readValue(quote("true"), BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL] }
public void testBooleanDelegate() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     BooleanBean bb = m.readValue("true", BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL]     bb = m.readValue(quote("true"), BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL] }
public void testMultipleCreators() throws Exception { [EOL]     MultiBean bean = MAPPER.readValue("123", MultiBean.class); [EOL]     assertEquals(Integer.valueOf(123), bean.value); [EOL]     bean = MAPPER.readValue(quote("abc"), MultiBean.class); [EOL]     assertEquals("abc", bean.value); [EOL]     bean = MAPPER.readValue("0.25", MultiBean.class); [EOL]     assertEquals(Double.valueOf(0.25), bean.value); [EOL] }
public void testMultipleCreators() throws Exception { [EOL]     MultiBean bean = MAPPER.readValue("123", MultiBean.class); [EOL]     assertEquals(Integer.valueOf(123), bean.value); [EOL]     bean = MAPPER.readValue(quote("abc"), MultiBean.class); [EOL]     assertEquals("abc", bean.value); [EOL]     bean = MAPPER.readValue("0.25", MultiBean.class); [EOL]     assertEquals(Double.valueOf(0.25), bean.value); [EOL] }
public void testMultipleCreators() throws Exception { [EOL]     MultiBean bean = MAPPER.readValue("123", MultiBean.class); [EOL]     assertEquals(Integer.valueOf(123), bean.value); [EOL]     bean = MAPPER.readValue(quote("abc"), MultiBean.class); [EOL]     assertEquals("abc", bean.value); [EOL]     bean = MAPPER.readValue("0.25", MultiBean.class); [EOL]     assertEquals(Double.valueOf(0.25), bean.value); [EOL] }
public void testMultipleCreators() throws Exception { [EOL]     MultiBean bean = MAPPER.readValue("123", MultiBean.class); [EOL]     assertEquals(Integer.valueOf(123), bean.value); [EOL]     bean = MAPPER.readValue(quote("abc"), MultiBean.class); [EOL]     assertEquals("abc", bean.value); [EOL]     bean = MAPPER.readValue("0.25", MultiBean.class); [EOL]     assertEquals(Double.valueOf(0.25), bean.value); [EOL] }
public void testBooleanDelegate() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     BooleanBean bb = m.readValue("true", BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL]     bb = m.readValue(quote("true"), BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL] }
public void testBooleanDelegate() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     BooleanBean bb = m.readValue("true", BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL]     bb = m.readValue(quote("true"), BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL] }
public void testBooleanDelegate() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     BooleanBean bb = m.readValue("true", BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL]     bb = m.readValue(quote("true"), BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL] }
public void testDoubleUnwrapping() throws Exception { [EOL]     TwoUnwrappedProperties bean = mapper.readValue("{\"first\":\"Joe\",\"y\":7,\"last\":\"Smith\",\"x\":-13}", TwoUnwrappedProperties.class); [EOL]     Location loc = bean.location; [EOL]     assertNotNull(loc); [EOL]     assertEquals(-13, loc.x); [EOL]     assertEquals(7, loc.y); [EOL]     Name name = bean.name; [EOL]     assertNotNull(name); [EOL]     assertEquals("Joe", name.first); [EOL]     assertEquals("Smith", name.last); [EOL] }
public void testDoubleUnwrapping() throws Exception { [EOL]     TwoUnwrappedProperties bean = mapper.readValue("{\"first\":\"Joe\",\"y\":7,\"last\":\"Smith\",\"x\":-13}", TwoUnwrappedProperties.class); [EOL]     Location loc = bean.location; [EOL]     assertNotNull(loc); [EOL]     assertEquals(-13, loc.x); [EOL]     assertEquals(7, loc.y); [EOL]     Name name = bean.name; [EOL]     assertNotNull(name); [EOL]     assertEquals("Joe", name.first); [EOL]     assertEquals("Smith", name.last); [EOL] }
public void testDoubleUnwrapping() throws Exception { [EOL]     TwoUnwrappedProperties bean = mapper.readValue("{\"first\":\"Joe\",\"y\":7,\"last\":\"Smith\",\"x\":-13}", TwoUnwrappedProperties.class); [EOL]     Location loc = bean.location; [EOL]     assertNotNull(loc); [EOL]     assertEquals(-13, loc.x); [EOL]     assertEquals(7, loc.y); [EOL]     Name name = bean.name; [EOL]     assertNotNull(name); [EOL]     assertEquals("Joe", name.first); [EOL]     assertEquals("Smith", name.last); [EOL] }
public void testDeserializeDecimalProperExceptionWhenIdSet() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = "{\"id\": 5, \"defaultValue\": { \"value\": \"123\" } }"; [EOL]     try { [EOL]         MyBeanHolder result = mapper.readValue(json, MyBeanHolder.class); [EOL]         fail("should have raised exception instead value was set to " + result.defaultValue.value.decimal.toString()); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "not numeric"); [EOL]     } [EOL] }
public void testDeserializeDecimalProperExceptionWhenIdSet() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = "{\"id\": 5, \"defaultValue\": { \"value\": \"123\" } }"; [EOL]     try { [EOL]         MyBeanHolder result = mapper.readValue(json, MyBeanHolder.class); [EOL]         fail("should have raised exception instead value was set to " + result.defaultValue.value.decimal.toString()); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "not numeric"); [EOL]     } [EOL] }
public void testDeserializeDecimalProperExceptionWhenIdSet() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = "{\"id\": 5, \"defaultValue\": { \"value\": \"123\" } }"; [EOL]     try { [EOL]         MyBeanHolder result = mapper.readValue(json, MyBeanHolder.class); [EOL]         fail("should have raised exception instead value was set to " + result.defaultValue.value.decimal.toString()); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "not numeric"); [EOL]     } [EOL] }
public void testDeserializeDecimalProperExceptionWhenIdSet() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = "{\"id\": 5, \"defaultValue\": { \"value\": \"123\" } }"; [EOL]     try { [EOL]         MyBeanHolder result = mapper.readValue(json, MyBeanHolder.class); [EOL]         fail("should have raised exception instead value was set to " + result.defaultValue.value.decimal.toString()); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "not numeric"); [EOL]     } [EOL] }
public void testDeserializeDecimalProperExceptionWhenIdSet() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = "{\"id\": 5, \"defaultValue\": { \"value\": \"123\" } }"; [EOL]     try { [EOL]         MyBeanHolder result = mapper.readValue(json, MyBeanHolder.class); [EOL]         fail("should have raised exception instead value was set to " + result.defaultValue.value.decimal.toString()); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "not numeric"); [EOL]     } [EOL] }
public void testDeserializeDecimalProperExceptionWhenIdSet() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = "{\"id\": 5, \"defaultValue\": { \"value\": \"123\" } }"; [EOL]     try { [EOL]         MyBeanHolder result = mapper.readValue(json, MyBeanHolder.class); [EOL]         fail("should have raised exception instead value was set to " + result.defaultValue.value.decimal.toString()); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "not numeric"); [EOL]     } [EOL] }
public void testSimple() throws Exception { [EOL]     String json = "{\"x\":1,\"y\":2}"; [EOL]     Object o = mapper.readValue(json, ValueClassXY.class); [EOL]     assertNotNull(o); [EOL]     assertSame(ValueClassXY.class, o.getClass()); [EOL]     ValueClassXY value = (ValueClassXY) o; [EOL]     assertEquals(value._x, 2); [EOL]     assertEquals(value._y, 3); [EOL] }
public void testSimple() throws Exception { [EOL]     String json = "{\"x\":1,\"y\":2}"; [EOL]     Object o = mapper.readValue(json, ValueClassXY.class); [EOL]     assertNotNull(o); [EOL]     assertSame(ValueClassXY.class, o.getClass()); [EOL]     ValueClassXY value = (ValueClassXY) o; [EOL]     assertEquals(value._x, 2); [EOL]     assertEquals(value._y, 3); [EOL] }
public void testSimple() throws Exception { [EOL]     String json = "{\"x\":1,\"y\":2}"; [EOL]     Object o = mapper.readValue(json, ValueClassXY.class); [EOL]     assertNotNull(o); [EOL]     assertSame(ValueClassXY.class, o.getClass()); [EOL]     ValueClassXY value = (ValueClassXY) o; [EOL]     assertEquals(value._x, 2); [EOL]     assertEquals(value._y, 3); [EOL] }
public void testSimple() throws Exception { [EOL]     String json = "{\"x\":1,\"y\":2}"; [EOL]     Object o = mapper.readValue(json, ValueClassXY.class); [EOL]     assertNotNull(o); [EOL]     assertSame(ValueClassXY.class, o.getClass()); [EOL]     ValueClassXY value = (ValueClassXY) o; [EOL]     assertEquals(value._x, 2); [EOL]     assertEquals(value._y, 3); [EOL] }
public void testSimple() throws Exception { [EOL]     String json = "{\"x\":1,\"y\":2}"; [EOL]     Object o = mapper.readValue(json, ValueClassXY.class); [EOL]     assertNotNull(o); [EOL]     assertSame(ValueClassXY.class, o.getClass()); [EOL]     ValueClassXY value = (ValueClassXY) o; [EOL]     assertEquals(value._x, 2); [EOL]     assertEquals(value._y, 3); [EOL] }
public void testSimple() throws Exception { [EOL]     String json = "{\"x\":1,\"y\":2}"; [EOL]     Object o = mapper.readValue(json, ValueClassXY.class); [EOL]     assertNotNull(o); [EOL]     assertSame(ValueClassXY.class, o.getClass()); [EOL]     ValueClassXY value = (ValueClassXY) o; [EOL]     assertEquals(value._x, 2); [EOL]     assertEquals(value._y, 3); [EOL] }
public void testSimple() throws Exception { [EOL]     String json = "{\"x\":1,\"y\":2}"; [EOL]     Object o = mapper.readValue(json, ValueClassXY.class); [EOL]     assertNotNull(o); [EOL]     assertSame(ValueClassXY.class, o.getClass()); [EOL]     ValueClassXY value = (ValueClassXY) o; [EOL]     assertEquals(value._x, 2); [EOL]     assertEquals(value._y, 3); [EOL] }
public void testSimple() throws Exception { [EOL]     String json = "{\"x\":1,\"y\":2}"; [EOL]     Object o = mapper.readValue(json, ValueClassXY.class); [EOL]     assertNotNull(o); [EOL]     assertSame(ValueClassXY.class, o.getClass()); [EOL]     ValueClassXY value = (ValueClassXY) o; [EOL]     assertEquals(value._x, 2); [EOL]     assertEquals(value._y, 3); [EOL] }
public void testSimple() throws Exception { [EOL]     String json = "{\"x\":1,\"y\":2}"; [EOL]     Object o = mapper.readValue(json, ValueClassXY.class); [EOL]     assertNotNull(o); [EOL]     assertSame(ValueClassXY.class, o.getClass()); [EOL]     ValueClassXY value = (ValueClassXY) o; [EOL]     assertEquals(value._x, 2); [EOL]     assertEquals(value._y, 3); [EOL] }
public void testSimple() throws Exception { [EOL]     String json = "{\"x\":1,\"y\":2}"; [EOL]     Object o = mapper.readValue(json, ValueClassXY.class); [EOL]     assertNotNull(o); [EOL]     assertSame(ValueClassXY.class, o.getClass()); [EOL]     ValueClassXY value = (ValueClassXY) o; [EOL]     assertEquals(value._x, 2); [EOL]     assertEquals(value._y, 3); [EOL] }
public void testSimple() throws Exception { [EOL]     String json = "{\"x\":1,\"y\":2}"; [EOL]     Object o = mapper.readValue(json, ValueClassXY.class); [EOL]     assertNotNull(o); [EOL]     assertSame(ValueClassXY.class, o.getClass()); [EOL]     ValueClassXY value = (ValueClassXY) o; [EOL]     assertEquals(value._x, 2); [EOL]     assertEquals(value._y, 3); [EOL] }
public void testSimple() throws Exception { [EOL]     String json = "{\"x\":1,\"y\":2}"; [EOL]     Object o = mapper.readValue(json, ValueClassXY.class); [EOL]     assertNotNull(o); [EOL]     assertSame(ValueClassXY.class, o.getClass()); [EOL]     ValueClassXY value = (ValueClassXY) o; [EOL]     assertEquals(value._x, 2); [EOL]     assertEquals(value._y, 3); [EOL] }
public void testSimple() throws Exception { [EOL]     String json = "{\"x\":1,\"y\":2}"; [EOL]     Object o = mapper.readValue(json, ValueClassXY.class); [EOL]     assertNotNull(o); [EOL]     assertSame(ValueClassXY.class, o.getClass()); [EOL]     ValueClassXY value = (ValueClassXY) o; [EOL]     assertEquals(value._x, 2); [EOL]     assertEquals(value._y, 3); [EOL] }
public void testSimple() throws Exception { [EOL]     String json = "{\"x\":1,\"y\":2}"; [EOL]     Object o = mapper.readValue(json, ValueClassXY.class); [EOL]     assertNotNull(o); [EOL]     assertSame(ValueClassXY.class, o.getClass()); [EOL]     ValueClassXY value = (ValueClassXY) o; [EOL]     assertEquals(value._x, 2); [EOL]     assertEquals(value._y, 3); [EOL] }
public void testSimple() throws Exception { [EOL]     String json = "{\"x\":1,\"y\":2}"; [EOL]     Object o = mapper.readValue(json, ValueClassXY.class); [EOL]     assertNotNull(o); [EOL]     assertSame(ValueClassXY.class, o.getClass()); [EOL]     ValueClassXY value = (ValueClassXY) o; [EOL]     assertEquals(value._x, 2); [EOL]     assertEquals(value._y, 3); [EOL] }
public void testSimple() throws Exception { [EOL]     String json = "{\"x\":1,\"y\":2}"; [EOL]     Object o = mapper.readValue(json, ValueClassXY.class); [EOL]     assertNotNull(o); [EOL]     assertSame(ValueClassXY.class, o.getClass()); [EOL]     ValueClassXY value = (ValueClassXY) o; [EOL]     assertEquals(value._x, 2); [EOL]     assertEquals(value._y, 3); [EOL] }
public void testSimple() throws Exception { [EOL]     String json = "{\"x\":1,\"y\":2}"; [EOL]     Object o = mapper.readValue(json, ValueClassXY.class); [EOL]     assertNotNull(o); [EOL]     assertSame(ValueClassXY.class, o.getClass()); [EOL]     ValueClassXY value = (ValueClassXY) o; [EOL]     assertEquals(value._x, 2); [EOL]     assertEquals(value._y, 3); [EOL] }
public void testNodeInArray() throws Exception { [EOL]     JsonNode node = new ObjectMapper().readTree("{\"a\":3}"); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT); [EOL]     Object[] obs = new Object[] { node }; [EOL]     String json = m.writeValueAsString(obs); [EOL]     Object[] result = m.readValue(json, Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     Object ob = result[0]; [EOL]     assertTrue(ob instanceof JsonNode); [EOL] }
public void testNodeInArray() throws Exception { [EOL]     JsonNode node = new ObjectMapper().readTree("{\"a\":3}"); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT); [EOL]     Object[] obs = new Object[] { node }; [EOL]     String json = m.writeValueAsString(obs); [EOL]     Object[] result = m.readValue(json, Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     Object ob = result[0]; [EOL]     assertTrue(ob instanceof JsonNode); [EOL] }
public void testNodeInArray() throws Exception { [EOL]     JsonNode node = new ObjectMapper().readTree("{\"a\":3}"); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT); [EOL]     Object[] obs = new Object[] { node }; [EOL]     String json = m.writeValueAsString(obs); [EOL]     Object[] result = m.readValue(json, Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     Object ob = result[0]; [EOL]     assertTrue(ob instanceof JsonNode); [EOL] }
public void testNull() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode result = mapper.readTree("   null "); [EOL]     assertNotNull(result); [EOL]     assertTrue(result.isNull()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertEquals("null", result.asText()); [EOL]     assertEquals(result, NullNode.instance); [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = "{ \"a\" : 123, \"list\" : [ 12.25, null, true, { }, [ ] ] }"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals("Expected START_OBJECT", JsonToken.START_OBJECT.asString(), jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals("a", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals(123, jp.getIntValue()); [EOL]     assertEquals("123", jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals("list", jp.getText()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals(JsonToken.START_ARRAY.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(12.25, jp.getDoubleValue(), 0); [EOL]     assertEquals("12.25", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NULL, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(JsonToken.VALUE_NULL.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_TRUE, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertTrue(jp.getBooleanValue()); [EOL]     assertEquals(JsonToken.VALUE_TRUE.asString(), jp.getText()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = "{ \"a\" : 123, \"list\" : [ 12.25, null, true, { }, [ ] ] }"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals("Expected START_OBJECT", JsonToken.START_OBJECT.asString(), jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals("a", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals(123, jp.getIntValue()); [EOL]     assertEquals("123", jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals("list", jp.getText()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals(JsonToken.START_ARRAY.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(12.25, jp.getDoubleValue(), 0); [EOL]     assertEquals("12.25", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NULL, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(JsonToken.VALUE_NULL.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_TRUE, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertTrue(jp.getBooleanValue()); [EOL]     assertEquals(JsonToken.VALUE_TRUE.asString(), jp.getText()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = "{ \"a\" : 123, \"list\" : [ 12.25, null, true, { }, [ ] ] }"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals("Expected START_OBJECT", JsonToken.START_OBJECT.asString(), jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals("a", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals(123, jp.getIntValue()); [EOL]     assertEquals("123", jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals("list", jp.getText()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals(JsonToken.START_ARRAY.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(12.25, jp.getDoubleValue(), 0); [EOL]     assertEquals("12.25", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NULL, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(JsonToken.VALUE_NULL.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_TRUE, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertTrue(jp.getBooleanValue()); [EOL]     assertEquals(JsonToken.VALUE_TRUE.asString(), jp.getText()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = "{ \"a\" : 123, \"list\" : [ 12.25, null, true, { }, [ ] ] }"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals("Expected START_OBJECT", JsonToken.START_OBJECT.asString(), jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals("a", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals(123, jp.getIntValue()); [EOL]     assertEquals("123", jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals("list", jp.getText()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals(JsonToken.START_ARRAY.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(12.25, jp.getDoubleValue(), 0); [EOL]     assertEquals("12.25", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NULL, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(JsonToken.VALUE_NULL.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_TRUE, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertTrue(jp.getBooleanValue()); [EOL]     assertEquals(JsonToken.VALUE_TRUE.asString(), jp.getText()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = "{ \"a\" : 123, \"list\" : [ 12.25, null, true, { }, [ ] ] }"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals("Expected START_OBJECT", JsonToken.START_OBJECT.asString(), jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals("a", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals(123, jp.getIntValue()); [EOL]     assertEquals("123", jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals("list", jp.getText()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals(JsonToken.START_ARRAY.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(12.25, jp.getDoubleValue(), 0); [EOL]     assertEquals("12.25", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NULL, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(JsonToken.VALUE_NULL.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_TRUE, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertTrue(jp.getBooleanValue()); [EOL]     assertEquals(JsonToken.VALUE_TRUE.asString(), jp.getText()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = "{ \"a\" : 123, \"list\" : [ 12.25, null, true, { }, [ ] ] }"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals("Expected START_OBJECT", JsonToken.START_OBJECT.asString(), jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals("a", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals(123, jp.getIntValue()); [EOL]     assertEquals("123", jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals("list", jp.getText()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals(JsonToken.START_ARRAY.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(12.25, jp.getDoubleValue(), 0); [EOL]     assertEquals("12.25", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NULL, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(JsonToken.VALUE_NULL.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_TRUE, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertTrue(jp.getBooleanValue()); [EOL]     assertEquals(JsonToken.VALUE_TRUE.asString(), jp.getText()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = "{ \"a\" : 123, \"list\" : [ 12.25, null, true, { }, [ ] ] }"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals("Expected START_OBJECT", JsonToken.START_OBJECT.asString(), jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals("a", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals(123, jp.getIntValue()); [EOL]     assertEquals("123", jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals("list", jp.getText()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals(JsonToken.START_ARRAY.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(12.25, jp.getDoubleValue(), 0); [EOL]     assertEquals("12.25", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NULL, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(JsonToken.VALUE_NULL.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_TRUE, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertTrue(jp.getBooleanValue()); [EOL]     assertEquals(JsonToken.VALUE_TRUE.asString(), jp.getText()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = "{ \"a\" : 123, \"list\" : [ 12.25, null, true, { }, [ ] ] }"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals("Expected START_OBJECT", JsonToken.START_OBJECT.asString(), jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals("a", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals(123, jp.getIntValue()); [EOL]     assertEquals("123", jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals("list", jp.getText()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals(JsonToken.START_ARRAY.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(12.25, jp.getDoubleValue(), 0); [EOL]     assertEquals("12.25", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NULL, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(JsonToken.VALUE_NULL.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_TRUE, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertTrue(jp.getBooleanValue()); [EOL]     assertEquals(JsonToken.VALUE_TRUE.asString(), jp.getText()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = "{ \"a\" : 123, \"list\" : [ 12.25, null, true, { }, [ ] ] }"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals("Expected START_OBJECT", JsonToken.START_OBJECT.asString(), jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals("a", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals(123, jp.getIntValue()); [EOL]     assertEquals("123", jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals("list", jp.getText()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals(JsonToken.START_ARRAY.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(12.25, jp.getDoubleValue(), 0); [EOL]     assertEquals("12.25", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NULL, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(JsonToken.VALUE_NULL.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_TRUE, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertTrue(jp.getBooleanValue()); [EOL]     assertEquals(JsonToken.VALUE_TRUE.asString(), jp.getText()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = "{ \"a\" : 123, \"list\" : [ 12.25, null, true, { }, [ ] ] }"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals("Expected START_OBJECT", JsonToken.START_OBJECT.asString(), jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals("a", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals(123, jp.getIntValue()); [EOL]     assertEquals("123", jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals("list", jp.getText()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals(JsonToken.START_ARRAY.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(12.25, jp.getDoubleValue(), 0); [EOL]     assertEquals("12.25", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NULL, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(JsonToken.VALUE_NULL.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_TRUE, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertTrue(jp.getBooleanValue()); [EOL]     assertEquals(JsonToken.VALUE_TRUE.asString(), jp.getText()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = "{ \"a\" : 123, \"list\" : [ 12.25, null, true, { }, [ ] ] }"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals("Expected START_OBJECT", JsonToken.START_OBJECT.asString(), jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals("a", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals(123, jp.getIntValue()); [EOL]     assertEquals("123", jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals("list", jp.getText()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals(JsonToken.START_ARRAY.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(12.25, jp.getDoubleValue(), 0); [EOL]     assertEquals("12.25", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NULL, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(JsonToken.VALUE_NULL.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_TRUE, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertTrue(jp.getBooleanValue()); [EOL]     assertEquals(JsonToken.VALUE_TRUE.asString(), jp.getText()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = "{ \"a\" : 123, \"list\" : [ 12.25, null, true, { }, [ ] ] }"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals("Expected START_OBJECT", JsonToken.START_OBJECT.asString(), jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals("a", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals(123, jp.getIntValue()); [EOL]     assertEquals("123", jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals("list", jp.getText()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals(JsonToken.START_ARRAY.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(12.25, jp.getDoubleValue(), 0); [EOL]     assertEquals("12.25", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NULL, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(JsonToken.VALUE_NULL.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_TRUE, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertTrue(jp.getBooleanValue()); [EOL]     assertEquals(JsonToken.VALUE_TRUE.asString(), jp.getText()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = "{ \"a\" : 123, \"list\" : [ 12.25, null, true, { }, [ ] ] }"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals("Expected START_OBJECT", JsonToken.START_OBJECT.asString(), jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals("a", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals(123, jp.getIntValue()); [EOL]     assertEquals("123", jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals("list", jp.getText()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals(JsonToken.START_ARRAY.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(12.25, jp.getDoubleValue(), 0); [EOL]     assertEquals("12.25", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NULL, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(JsonToken.VALUE_NULL.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_TRUE, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertTrue(jp.getBooleanValue()); [EOL]     assertEquals(JsonToken.VALUE_TRUE.asString(), jp.getText()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = "{ \"a\" : 123, \"list\" : [ 12.25, null, true, { }, [ ] ] }"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals("Expected START_OBJECT", JsonToken.START_OBJECT.asString(), jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals("a", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals(123, jp.getIntValue()); [EOL]     assertEquals("123", jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals("list", jp.getText()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals(JsonToken.START_ARRAY.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(12.25, jp.getDoubleValue(), 0); [EOL]     assertEquals("12.25", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NULL, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(JsonToken.VALUE_NULL.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_TRUE, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertTrue(jp.getBooleanValue()); [EOL]     assertEquals(JsonToken.VALUE_TRUE.asString(), jp.getText()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = "{ \"a\" : 123, \"list\" : [ 12.25, null, true, { }, [ ] ] }"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals("Expected START_OBJECT", JsonToken.START_OBJECT.asString(), jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals("a", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals(123, jp.getIntValue()); [EOL]     assertEquals("123", jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals("list", jp.getText()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals(JsonToken.START_ARRAY.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(12.25, jp.getDoubleValue(), 0); [EOL]     assertEquals("12.25", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NULL, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(JsonToken.VALUE_NULL.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_TRUE, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertTrue(jp.getBooleanValue()); [EOL]     assertEquals(JsonToken.VALUE_TRUE.asString(), jp.getText()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = "{ \"a\" : 123, \"list\" : [ 12.25, null, true, { }, [ ] ] }"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals("Expected START_OBJECT", JsonToken.START_OBJECT.asString(), jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals("a", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals(123, jp.getIntValue()); [EOL]     assertEquals("123", jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals("list", jp.getText()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals(JsonToken.START_ARRAY.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(12.25, jp.getDoubleValue(), 0); [EOL]     assertEquals("12.25", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NULL, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(JsonToken.VALUE_NULL.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_TRUE, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertTrue(jp.getBooleanValue()); [EOL]     assertEquals(JsonToken.VALUE_TRUE.asString(), jp.getText()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = "{ \"a\" : 123, \"list\" : [ 12.25, null, true, { }, [ ] ] }"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals("Expected START_OBJECT", JsonToken.START_OBJECT.asString(), jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals("a", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals(123, jp.getIntValue()); [EOL]     assertEquals("123", jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals("list", jp.getText()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals(JsonToken.START_ARRAY.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(12.25, jp.getDoubleValue(), 0); [EOL]     assertEquals("12.25", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NULL, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(JsonToken.VALUE_NULL.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_TRUE, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertTrue(jp.getBooleanValue()); [EOL]     assertEquals(JsonToken.VALUE_TRUE.asString(), jp.getText()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL] }
public void testSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addDeserializer(StringValue.class, new MyContextualDeserializer()); [EOL]     mapper.registerModule(module); [EOL]     ContextualBean bean = mapper.readValue("{\"a\":\"1\",\"b\":\"2\"}", ContextualBean.class); [EOL]     assertEquals("a=1", bean.a.value); [EOL]     assertEquals("b=2", bean.b.value); [EOL]     bean = mapper.readValue("{\"a\":\"3\",\"b\":\"4\"}", ContextualBean.class); [EOL]     assertEquals("a=3", bean.a.value); [EOL]     assertEquals("b=4", bean.b.value); [EOL] }
public void testSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addDeserializer(StringValue.class, new MyContextualDeserializer()); [EOL]     mapper.registerModule(module); [EOL]     ContextualBean bean = mapper.readValue("{\"a\":\"1\",\"b\":\"2\"}", ContextualBean.class); [EOL]     assertEquals("a=1", bean.a.value); [EOL]     assertEquals("b=2", bean.b.value); [EOL]     bean = mapper.readValue("{\"a\":\"3\",\"b\":\"4\"}", ContextualBean.class); [EOL]     assertEquals("a=3", bean.a.value); [EOL]     assertEquals("b=4", bean.b.value); [EOL] }
public void testSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addDeserializer(StringValue.class, new MyContextualDeserializer()); [EOL]     mapper.registerModule(module); [EOL]     ContextualBean bean = mapper.readValue("{\"a\":\"1\",\"b\":\"2\"}", ContextualBean.class); [EOL]     assertEquals("a=1", bean.a.value); [EOL]     assertEquals("b=2", bean.b.value); [EOL]     bean = mapper.readValue("{\"a\":\"3\",\"b\":\"4\"}", ContextualBean.class); [EOL]     assertEquals("a=3", bean.a.value); [EOL]     assertEquals("b=4", bean.b.value); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testImmutable() throws Exception { [EOL]     final String json = "{\"value\":13}"; [EOL]     ValueImmutable value = mapper.readValue(json, ValueImmutable.class); [EOL]     assertEquals(13, value.value); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testImmutable() throws Exception { [EOL]     final String json = "{\"value\":13}"; [EOL]     ValueImmutable value = mapper.readValue(json, ValueImmutable.class); [EOL]     assertEquals(13, value.value); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleGetterInterfaceImpl() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(m, new PojoImpl()); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals(Integer.valueOf(5), result.get("foobar")); [EOL]     assertEquals(Integer.valueOf(1), result.get("width")); [EOL]     assertEquals(Integer.valueOf(2), result.get("length")); [EOL] }
public void testMapNullSerialization() throws IOException { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, String> map = new HashMap<String, String>(); [EOL]     map.put("a", null); [EOL]     assertEquals("{\"a\":null}", m.writeValueAsString(map)); [EOL]     m.configure(SerializationFeature.WRITE_NULL_MAP_VALUES, false); [EOL]     assertEquals("{}", m.writeValueAsString(map)); [EOL] }
public void testMapNullSerialization() throws IOException { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, String> map = new HashMap<String, String>(); [EOL]     map.put("a", null); [EOL]     assertEquals("{\"a\":null}", m.writeValueAsString(map)); [EOL]     m.configure(SerializationFeature.WRITE_NULL_MAP_VALUES, false); [EOL]     assertEquals("{}", m.writeValueAsString(map)); [EOL] }
public void testMapNullSerialization() throws IOException { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, String> map = new HashMap<String, String>(); [EOL]     map.put("a", null); [EOL]     assertEquals("{\"a\":null}", m.writeValueAsString(map)); [EOL]     m.configure(SerializationFeature.WRITE_NULL_MAP_VALUES, false); [EOL]     assertEquals("{}", m.writeValueAsString(map)); [EOL] }
public void testMapNullSerialization() throws IOException { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, String> map = new HashMap<String, String>(); [EOL]     map.put("a", null); [EOL]     assertEquals("{\"a\":null}", m.writeValueAsString(map)); [EOL]     m.configure(SerializationFeature.WRITE_NULL_MAP_VALUES, false); [EOL]     assertEquals("{}", m.writeValueAsString(map)); [EOL] }
public void testMapNullSerialization() throws IOException { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, String> map = new HashMap<String, String>(); [EOL]     map.put("a", null); [EOL]     assertEquals("{\"a\":null}", m.writeValueAsString(map)); [EOL]     m.configure(SerializationFeature.WRITE_NULL_MAP_VALUES, false); [EOL]     assertEquals("{}", m.writeValueAsString(map)); [EOL] }
public void testMapNullSerialization() throws IOException { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, String> map = new HashMap<String, String>(); [EOL]     map.put("a", null); [EOL]     assertEquals("{\"a\":null}", m.writeValueAsString(map)); [EOL]     m.configure(SerializationFeature.WRITE_NULL_MAP_VALUES, false); [EOL]     assertEquals("{}", m.writeValueAsString(map)); [EOL] }
public void testPropertyAnnotationForMaps() throws Exception { [EOL]     String json = objectWriter().writeValueAsString(new PointListWrapperMap("a", 1, 2)); [EOL]     assertEquals("{\"values\":{\"a\":[1,2]}}", json); [EOL] }
public void testSimpleMapField() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FieldWrapperBeanMap map = new FieldWrapperBeanMap(); [EOL]     map.put("foop", new FieldWrapperBean(new IntWrapper(13))); [EOL]     String json = mapper.writeValueAsString(map); [EOL]     FieldWrapperBeanMap result = mapper.readValue(json, FieldWrapperBeanMap.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.size()); [EOL]     FieldWrapperBean bean = result.get("foop"); [EOL]     assertNotNull(bean); [EOL]     Object ob = bean.value; [EOL]     assertEquals(IntWrapper.class, ob.getClass()); [EOL]     assertEquals(((IntWrapper) ob).i, 13); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testMethodAnnotationInList() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(String.class, new AnnotatedContextualSerializer()); [EOL]     mapper.registerModule(module); [EOL]     ContextualListBean beans = new ContextualListBean("abc"); [EOL]     assertEquals("{\"beans\":[\"list->abc\"]}", mapper.writeValueAsString(beans)); [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testWithoutModule() { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.writeValueAsString(new CustomBean("foo", 3)); [EOL]         fail("Should have caused an exception"); [EOL]     } catch (IOException e) { [EOL]         verifyException(e, "No serializer found"); [EOL]     } [EOL]     try { [EOL]         mapper.readValue("{\"str\":\"ab\",\"num\":2}", CustomBean.class); [EOL]         fail("Should have caused an exception"); [EOL]     } catch (IOException e) { [EOL]         verifyException(e, "No suitable constructor found"); [EOL]     } [EOL] }
public void testWithoutModule() { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.writeValueAsString(new CustomBean("foo", 3)); [EOL]         fail("Should have caused an exception"); [EOL]     } catch (IOException e) { [EOL]         verifyException(e, "No serializer found"); [EOL]     } [EOL]     try { [EOL]         mapper.readValue("{\"str\":\"ab\",\"num\":2}", CustomBean.class); [EOL]         fail("Should have caused an exception"); [EOL]     } catch (IOException e) { [EOL]         verifyException(e, "No suitable constructor found"); [EOL]     } [EOL] }
public void testWithoutModule() { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.writeValueAsString(new CustomBean("foo", 3)); [EOL]         fail("Should have caused an exception"); [EOL]     } catch (IOException e) { [EOL]         verifyException(e, "No serializer found"); [EOL]     } [EOL]     try { [EOL]         mapper.readValue("{\"str\":\"ab\",\"num\":2}", CustomBean.class); [EOL]         fail("Should have caused an exception"); [EOL]     } catch (IOException e) { [EOL]         verifyException(e, "No suitable constructor found"); [EOL]     } [EOL] }
public void testWithoutModule() { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.writeValueAsString(new CustomBean("foo", 3)); [EOL]         fail("Should have caused an exception"); [EOL]     } catch (IOException e) { [EOL]         verifyException(e, "No serializer found"); [EOL]     } [EOL]     try { [EOL]         mapper.readValue("{\"str\":\"ab\",\"num\":2}", CustomBean.class); [EOL]         fail("Should have caused an exception"); [EOL]     } catch (IOException e) { [EOL]         verifyException(e, "No suitable constructor found"); [EOL]     } [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testMethodAnnotationInList() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(String.class, new AnnotatedContextualSerializer()); [EOL]     mapper.registerModule(module); [EOL]     ContextualListBean beans = new ContextualListBean("abc"); [EOL]     assertEquals("{\"beans\":[\"list->abc\"]}", mapper.writeValueAsString(beans)); [EOL] }
public void testMethodAnnotationInList() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(String.class, new AnnotatedContextualSerializer()); [EOL]     mapper.registerModule(module); [EOL]     ContextualListBean beans = new ContextualListBean("abc"); [EOL]     assertEquals("{\"beans\":[\"list->abc\"]}", mapper.writeValueAsString(beans)); [EOL] }
public void testMethodAnnotationInList() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(String.class, new AnnotatedContextualSerializer()); [EOL]     mapper.registerModule(module); [EOL]     ContextualListBean beans = new ContextualListBean("abc"); [EOL]     assertEquals("{\"beans\":[\"list->abc\"]}", mapper.writeValueAsString(beans)); [EOL] }
public void testMethodAnnotationInList() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(String.class, new AnnotatedContextualSerializer()); [EOL]     mapper.registerModule(module); [EOL]     ContextualListBean beans = new ContextualListBean("abc"); [EOL]     assertEquals("{\"beans\":[\"list->abc\"]}", mapper.writeValueAsString(beans)); [EOL] }
public void testMethodAnnotationInList() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(String.class, new AnnotatedContextualSerializer()); [EOL]     mapper.registerModule(module); [EOL]     ContextualListBean beans = new ContextualListBean("abc"); [EOL]     assertEquals("{\"beans\":[\"list->abc\"]}", mapper.writeValueAsString(beans)); [EOL] }
public void testMethodAnnotationInList() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(String.class, new AnnotatedContextualSerializer()); [EOL]     mapper.registerModule(module); [EOL]     ContextualListBean beans = new ContextualListBean("abc"); [EOL]     assertEquals("{\"beans\":[\"list->abc\"]}", mapper.writeValueAsString(beans)); [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testSerializedAsMapWithClassSerializer() throws IOException { [EOL]     SimpleValueMapWithSerializer map = new SimpleValueMapWithSerializer(); [EOL]     map.put(new SimpleKey("abc"), new ActualValue("123")); [EOL]     assertEquals("{\"key abc\":\"value 123\"}", MAPPER.writeValueAsString(map)); [EOL] }
public void testSerializedAsMapWithClassSerializer() throws IOException { [EOL]     SimpleValueMapWithSerializer map = new SimpleValueMapWithSerializer(); [EOL]     map.put(new SimpleKey("abc"), new ActualValue("123")); [EOL]     assertEquals("{\"key abc\":\"value 123\"}", MAPPER.writeValueAsString(map)); [EOL] }
public void testFactoryCreatorWithMixin() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.addMixInAnnotations(CreatorBean.class, MixIn.class); [EOL]     CreatorBean bean = m.readValue("{ \"a\" : \"xyz\", \"x\" : 12 }", CreatorBean.class); [EOL]     assertEquals(11, bean.x); [EOL]     assertEquals("factory:xyz", bean.a); [EOL] }
public void testFactoryCreatorWithMixin() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.addMixInAnnotations(CreatorBean.class, MixIn.class); [EOL]     CreatorBean bean = m.readValue("{ \"a\" : \"xyz\", \"x\" : 12 }", CreatorBean.class); [EOL]     assertEquals(11, bean.x); [EOL]     assertEquals("factory:xyz", bean.a); [EOL] }
public void testSimpleGetterInterfaceImpl() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(m, new PojoImpl()); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals(Integer.valueOf(5), result.get("foobar")); [EOL]     assertEquals(Integer.valueOf(1), result.get("width")); [EOL]     assertEquals(Integer.valueOf(2), result.get("length")); [EOL] }
public void testBooleanListAsProp() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\"" + TypedListAsProp.class.getName() + "\",[true, false]]"; [EOL]     JavaType type = TypeFactory.defaultInstance().constructCollectionType(TypedListAsProp.class, Boolean.class); [EOL]     TypedListAsProp<Object> result = m.readValue(JSON, type); [EOL]     assertNotNull(result); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(Boolean.TRUE, result.get(0)); [EOL]     assertEquals(Boolean.FALSE, result.get(1)); [EOL] }
public void testJackson703() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     BasicBeanDescription beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Jackson703.class)); [EOL]     assertNotNull(beanDesc); [EOL]     Jackson703 bean = new Jackson703(); [EOL]     String json = mapper.writeValueAsString(bean); [EOL]     assertNotNull(json); [EOL] }
public void testJackson703() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     BasicBeanDescription beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Jackson703.class)); [EOL]     assertNotNull(beanDesc); [EOL]     Jackson703 bean = new Jackson703(); [EOL]     String json = mapper.writeValueAsString(bean); [EOL]     assertNotNull(json); [EOL] }
public void testFactoryCreatorWithMixin() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.addMixInAnnotations(CreatorBean.class, MixIn.class); [EOL]     CreatorBean bean = m.readValue("{ \"a\" : \"xyz\", \"x\" : 12 }", CreatorBean.class); [EOL]     assertEquals(11, bean.x); [EOL]     assertEquals("factory:xyz", bean.a); [EOL] }
public void testClassMixInsForObjectClass() throws IOException { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.addMixInAnnotations(Object.class, MixIn.class); [EOL]     { [EOL]         BaseClass result = m.readValue("{\"a\":\"\"}", BaseClass.class); [EOL]         assertEquals("", result.a); [EOL]     } [EOL]     { [EOL]         LeafClass result = m.readValue("{\"a\":\"\"}", LeafClass.class); [EOL]         assertEquals("XXX", result.a); [EOL]     } [EOL] }
public void testClassMixInsForObjectClass() throws IOException { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.addMixInAnnotations(Object.class, MixIn.class); [EOL]     { [EOL]         BaseClass result = m.readValue("{\"a\":\"\"}", BaseClass.class); [EOL]         assertEquals("", result.a); [EOL]     } [EOL]     { [EOL]         LeafClass result = m.readValue("{\"a\":\"\"}", LeafClass.class); [EOL]         assertEquals("XXX", result.a); [EOL]     } [EOL] }
public void testClassMixInsForObjectClass() throws IOException { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.addMixInAnnotations(Object.class, MixIn.class); [EOL]     { [EOL]         BaseClass result = m.readValue("{\"a\":\"\"}", BaseClass.class); [EOL]         assertEquals("", result.a); [EOL]     } [EOL]     { [EOL]         LeafClass result = m.readValue("{\"a\":\"\"}", LeafClass.class); [EOL]         assertEquals("XXX", result.a); [EOL]     } [EOL] }
public void testClassMixInsForObjectClass() throws IOException { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.addMixInAnnotations(Object.class, MixIn.class); [EOL]     { [EOL]         BaseClass result = m.readValue("{\"a\":\"\"}", BaseClass.class); [EOL]         assertEquals("", result.a); [EOL]     } [EOL]     { [EOL]         LeafClass result = m.readValue("{\"a\":\"\"}", LeafClass.class); [EOL]         assertEquals("XXX", result.a); [EOL]     } [EOL] }
public void testClassMixInsForObjectClass() throws IOException { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.addMixInAnnotations(Object.class, MixIn.class); [EOL]     { [EOL]         BaseClass result = m.readValue("{\"a\":\"\"}", BaseClass.class); [EOL]         assertEquals("", result.a); [EOL]     } [EOL]     { [EOL]         LeafClass result = m.readValue("{\"a\":\"\"}", LeafClass.class); [EOL]         assertEquals("XXX", result.a); [EOL]     } [EOL] }
public void testFactoryCreatorWithMixin() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.addMixInAnnotations(CreatorBean.class, MixIn.class); [EOL]     CreatorBean bean = m.readValue("{ \"a\" : \"xyz\", \"x\" : 12 }", CreatorBean.class); [EOL]     assertEquals(11, bean.x); [EOL]     assertEquals("factory:xyz", bean.a); [EOL] }
public void testFactoryCreatorWithMixin() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.addMixInAnnotations(CreatorBean.class, MixIn.class); [EOL]     CreatorBean bean = m.readValue("{ \"a\" : \"xyz\", \"x\" : 12 }", CreatorBean.class); [EOL]     assertEquals(11, bean.x); [EOL]     assertEquals("factory:xyz", bean.a); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testForFactoryAndCtor() throws IOException { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     BaseClass result; [EOL]     result = m.readValue("\"string\"", BaseClass.class); [EOL]     assertEquals("string...", result._a); [EOL]     m = new ObjectMapper(); [EOL]     m.addMixInAnnotations(BaseClass.class, MixIn.class); [EOL]     result = m.readValue("\"string\"", BaseClass.class); [EOL]     assertEquals("stringX", result._a); [EOL] }
public void testForFactoryAndCtor() throws IOException { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     BaseClass result; [EOL]     result = m.readValue("\"string\"", BaseClass.class); [EOL]     assertEquals("string...", result._a); [EOL]     m = new ObjectMapper(); [EOL]     m.addMixInAnnotations(BaseClass.class, MixIn.class); [EOL]     result = m.readValue("\"string\"", BaseClass.class); [EOL]     assertEquals("stringX", result._a); [EOL] }
public void testForFactoryAndCtor() throws IOException { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     BaseClass result; [EOL]     result = m.readValue("\"string\"", BaseClass.class); [EOL]     assertEquals("string...", result._a); [EOL]     m = new ObjectMapper(); [EOL]     m.addMixInAnnotations(BaseClass.class, MixIn.class); [EOL]     result = m.readValue("\"string\"", BaseClass.class); [EOL]     assertEquals("stringX", result._a); [EOL] }
public void testForFactoryAndCtor() throws IOException { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     BaseClass result; [EOL]     result = m.readValue("\"string\"", BaseClass.class); [EOL]     assertEquals("string...", result._a); [EOL]     m = new ObjectMapper(); [EOL]     m.addMixInAnnotations(BaseClass.class, MixIn.class); [EOL]     result = m.readValue("\"string\"", BaseClass.class); [EOL]     assertEquals("stringX", result._a); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testFactoryCreatorWithMixin() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.addMixInAnnotations(CreatorBean.class, MixIn.class); [EOL]     CreatorBean bean = m.readValue("{ \"a\" : \"xyz\", \"x\" : 12 }", CreatorBean.class); [EOL]     assertEquals(11, bean.x); [EOL]     assertEquals("factory:xyz", bean.a); [EOL] }
public void testFactoryCreatorWithMixin() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.addMixInAnnotations(CreatorBean.class, MixIn.class); [EOL]     CreatorBean bean = m.readValue("{ \"a\" : \"xyz\", \"x\" : 12 }", CreatorBean.class); [EOL]     assertEquals(11, bean.x); [EOL]     assertEquals("factory:xyz", bean.a); [EOL] }
public void testFactoryCreatorWithMixin() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.addMixInAnnotations(CreatorBean.class, MixIn.class); [EOL]     CreatorBean bean = m.readValue("{ \"a\" : \"xyz\", \"x\" : 12 }", CreatorBean.class); [EOL]     assertEquals(11, bean.x); [EOL]     assertEquals("factory:xyz", bean.a); [EOL] }
public void testFactoryCreatorWithMixin() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.addMixInAnnotations(CreatorBean.class, MixIn.class); [EOL]     CreatorBean bean = m.readValue("{ \"a\" : \"xyz\", \"x\" : 12 }", CreatorBean.class); [EOL]     assertEquals(11, bean.x); [EOL]     assertEquals("factory:xyz", bean.a); [EOL] }
public void testFactoryCreatorWithMixin() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.addMixInAnnotations(CreatorBean.class, MixIn.class); [EOL]     CreatorBean bean = m.readValue("{ \"a\" : \"xyz\", \"x\" : 12 }", CreatorBean.class); [EOL]     assertEquals(11, bean.x); [EOL]     assertEquals("factory:xyz", bean.a); [EOL] }
public void testFactoryCreatorWithMixin() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.addMixInAnnotations(CreatorBean.class, MixIn.class); [EOL]     CreatorBean bean = m.readValue("{ \"a\" : \"xyz\", \"x\" : 12 }", CreatorBean.class); [EOL]     assertEquals(11, bean.x); [EOL]     assertEquals("factory:xyz", bean.a); [EOL] }
public void testFactoryCreatorWithMixin() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.addMixInAnnotations(CreatorBean.class, MixIn.class); [EOL]     CreatorBean bean = m.readValue("{ \"a\" : \"xyz\", \"x\" : 12 }", CreatorBean.class); [EOL]     assertEquals(11, bean.x); [EOL]     assertEquals("factory:xyz", bean.a); [EOL] }
public void testForFactoryAndCtor() throws IOException { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     BaseClass result; [EOL]     result = m.readValue("\"string\"", BaseClass.class); [EOL]     assertEquals("string...", result._a); [EOL]     m = new ObjectMapper(); [EOL]     m.addMixInAnnotations(BaseClass.class, MixIn.class); [EOL]     result = m.readValue("\"string\"", BaseClass.class); [EOL]     assertEquals("stringX", result._a); [EOL] }
public void testForFactoryAndCtor() throws IOException { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     BaseClass result; [EOL]     result = m.readValue("\"string\"", BaseClass.class); [EOL]     assertEquals("string...", result._a); [EOL]     m = new ObjectMapper(); [EOL]     m.addMixInAnnotations(BaseClass.class, MixIn.class); [EOL]     result = m.readValue("\"string\"", BaseClass.class); [EOL]     assertEquals("stringX", result._a); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testDefaultAsNoClass() throws Exception { [EOL]     Object ob = objectReader(DefaultWithNoClass.class).readValue("{ }"); [EOL]     assertNull(ob); [EOL]     ob = objectReader(DefaultWithNoClass.class).readValue("{ \"bogus\":3 }"); [EOL]     assertNull(ob); [EOL] }
public void testDefaultAsNoClass() throws Exception { [EOL]     Object ob = objectReader(DefaultWithNoClass.class).readValue("{ }"); [EOL]     assertNull(ob); [EOL]     ob = objectReader(DefaultWithNoClass.class).readValue("{ \"bogus\":3 }"); [EOL]     assertNull(ob); [EOL] }
public void testDefaultAsNoClass() throws Exception { [EOL]     Object ob = objectReader(DefaultWithNoClass.class).readValue("{ }"); [EOL]     assertNull(ob); [EOL]     ob = objectReader(DefaultWithNoClass.class).readValue("{ \"bogus\":3 }"); [EOL]     assertNull(ob); [EOL] }
public void testDefaultAsNoClass() throws Exception { [EOL]     Object ob = objectReader(DefaultWithNoClass.class).readValue("{ }"); [EOL]     assertNull(ob); [EOL]     ob = objectReader(DefaultWithNoClass.class).readValue("{ \"bogus\":3 }"); [EOL]     assertNull(ob); [EOL] }
public void testEnumsFromInts() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     TestEnumFor834 res = mapper.readValue("1 ", TestEnumFor834.class); [EOL]     assertSame(TestEnumFor834.ENUM_A, res); [EOL] }
public void testEnumsFromInts() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     TestEnumFor834 res = mapper.readValue("1 ", TestEnumFor834.class); [EOL]     assertSame(TestEnumFor834.ENUM_A, res); [EOL] }
public void testEnumsFromInts() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     TestEnumFor834 res = mapper.readValue("1 ", TestEnumFor834.class); [EOL]     assertSame(TestEnumFor834.ENUM_A, res); [EOL] }
public void testEnumsFromInts() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     TestEnumFor834 res = mapper.readValue("1 ", TestEnumFor834.class); [EOL]     assertSame(TestEnumFor834.ENUM_A, res); [EOL] }
public void testNumbersToEnums() throws Exception { [EOL]     assertFalse(MAPPER.getDeserializationConfig().isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS)); [EOL]     TestEnum value = MAPPER.readValue("1", TestEnum.class); [EOL]     assertSame(TestEnum.RULES, value); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS, true); [EOL]     try { [EOL]         value = m.readValue("1", TestEnum.class); [EOL]         fail("Expected an error"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Not allowed to deserialize Enum value out of JSON number"); [EOL]     } [EOL] }
public void testNumbersToEnums() throws Exception { [EOL]     assertFalse(MAPPER.getDeserializationConfig().isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS)); [EOL]     TestEnum value = MAPPER.readValue("1", TestEnum.class); [EOL]     assertSame(TestEnum.RULES, value); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS, true); [EOL]     try { [EOL]         value = m.readValue("1", TestEnum.class); [EOL]         fail("Expected an error"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Not allowed to deserialize Enum value out of JSON number"); [EOL]     } [EOL] }
public void testNumbersToEnums() throws Exception { [EOL]     assertFalse(MAPPER.getDeserializationConfig().isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS)); [EOL]     TestEnum value = MAPPER.readValue("1", TestEnum.class); [EOL]     assertSame(TestEnum.RULES, value); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS, true); [EOL]     try { [EOL]         value = m.readValue("1", TestEnum.class); [EOL]         fail("Expected an error"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Not allowed to deserialize Enum value out of JSON number"); [EOL]     } [EOL] }
public void testNumbersToEnums() throws Exception { [EOL]     assertFalse(MAPPER.getDeserializationConfig().isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS)); [EOL]     TestEnum value = MAPPER.readValue("1", TestEnum.class); [EOL]     assertSame(TestEnum.RULES, value); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS, true); [EOL]     try { [EOL]         value = m.readValue("1", TestEnum.class); [EOL]         fail("Expected an error"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Not allowed to deserialize Enum value out of JSON number"); [EOL]     } [EOL] }
public void testNumbersToEnums() throws Exception { [EOL]     assertFalse(MAPPER.getDeserializationConfig().isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS)); [EOL]     TestEnum value = MAPPER.readValue("1", TestEnum.class); [EOL]     assertSame(TestEnum.RULES, value); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS, true); [EOL]     try { [EOL]         value = m.readValue("1", TestEnum.class); [EOL]         fail("Expected an error"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Not allowed to deserialize Enum value out of JSON number"); [EOL]     } [EOL] }
public void testNumbersToEnums() throws Exception { [EOL]     assertFalse(MAPPER.getDeserializationConfig().isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS)); [EOL]     TestEnum value = MAPPER.readValue("1", TestEnum.class); [EOL]     assertSame(TestEnum.RULES, value); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS, true); [EOL]     try { [EOL]         value = m.readValue("1", TestEnum.class); [EOL]         fail("Expected an error"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Not allowed to deserialize Enum value out of JSON number"); [EOL]     } [EOL] }
public void testNumbersToEnums() throws Exception { [EOL]     assertFalse(MAPPER.getDeserializationConfig().isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS)); [EOL]     TestEnum value = MAPPER.readValue("1", TestEnum.class); [EOL]     assertSame(TestEnum.RULES, value); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS, true); [EOL]     try { [EOL]         value = m.readValue("1", TestEnum.class); [EOL]         fail("Expected an error"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Not allowed to deserialize Enum value out of JSON number"); [EOL]     } [EOL] }
public void testNumbersToEnums() throws Exception { [EOL]     assertFalse(MAPPER.getDeserializationConfig().isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS)); [EOL]     TestEnum value = MAPPER.readValue("1", TestEnum.class); [EOL]     assertSame(TestEnum.RULES, value); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS, true); [EOL]     try { [EOL]         value = m.readValue("1", TestEnum.class); [EOL]         fail("Expected an error"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Not allowed to deserialize Enum value out of JSON number"); [EOL]     } [EOL] }
public void testEnumsFromInts() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     TestEnumFor834 res = mapper.readValue("1 ", TestEnumFor834.class); [EOL]     assertSame(TestEnumFor834.ENUM_A, res); [EOL] }
public void testEnumsFromInts() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     TestEnumFor834 res = mapper.readValue("1 ", TestEnumFor834.class); [EOL]     assertSame(TestEnumFor834.ENUM_A, res); [EOL] }
public void testEnumsFromInts() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     TestEnumFor834 res = mapper.readValue("1 ", TestEnumFor834.class); [EOL]     assertSame(TestEnumFor834.ENUM_A, res); [EOL] }
public void testEnumsFromInts() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     TestEnumFor834 res = mapper.readValue("1 ", TestEnumFor834.class); [EOL]     assertSame(TestEnumFor834.ENUM_A, res); [EOL] }
public void testEnumsFromInts() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     TestEnumFor834 res = mapper.readValue("1 ", TestEnumFor834.class); [EOL]     assertSame(TestEnumFor834.ENUM_A, res); [EOL] }
public void testImmutable() throws Exception { [EOL]     final String json = "{\"value\":13}"; [EOL]     ValueImmutable value = mapper.readValue(json, ValueImmutable.class); [EOL]     assertEquals(13, value.value); [EOL] }
public void testImmutable() throws Exception { [EOL]     final String json = "{\"value\":13}"; [EOL]     ValueImmutable value = mapper.readValue(json, ValueImmutable.class); [EOL]     assertEquals(13, value.value); [EOL] }
public void testImmutable() throws Exception { [EOL]     final String json = "{\"value\":13}"; [EOL]     ValueImmutable value = mapper.readValue(json, ValueImmutable.class); [EOL]     assertEquals(13, value.value); [EOL] }
public void testImmutable() throws Exception { [EOL]     final String json = "{\"value\":13}"; [EOL]     ValueImmutable value = mapper.readValue(json, ValueImmutable.class); [EOL]     assertEquals(13, value.value); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testEnumSet() throws Exception { [EOL]     EnumSet<Choice> set = EnumSet.of(Choice.NO); [EOL]     Object[] input = new Object[] { set }; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String json = m.writeValueAsString(input); [EOL]     Object[] output = m.readValue(json, Object[].class); [EOL]     assertEquals(1, output.length); [EOL]     Object ob = output[0]; [EOL]     assertTrue(ob instanceof EnumSet<?>); [EOL]     EnumSet<Choice> set2 = (EnumSet<Choice>) ob; [EOL]     assertEquals(1, set2.size()); [EOL]     assertTrue(set2.contains(Choice.NO)); [EOL]     assertFalse(set2.contains(Choice.YES)); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testEnumSet() throws Exception { [EOL]     EnumSet<Choice> set = EnumSet.of(Choice.NO); [EOL]     Object[] input = new Object[] { set }; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String json = m.writeValueAsString(input); [EOL]     Object[] output = m.readValue(json, Object[].class); [EOL]     assertEquals(1, output.length); [EOL]     Object ob = output[0]; [EOL]     assertTrue(ob instanceof EnumSet<?>); [EOL]     EnumSet<Choice> set2 = (EnumSet<Choice>) ob; [EOL]     assertEquals(1, set2.size()); [EOL]     assertTrue(set2.contains(Choice.NO)); [EOL]     assertFalse(set2.contains(Choice.YES)); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testEnumSet() throws Exception { [EOL]     EnumSet<Choice> set = EnumSet.of(Choice.NO); [EOL]     Object[] input = new Object[] { set }; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String json = m.writeValueAsString(input); [EOL]     Object[] output = m.readValue(json, Object[].class); [EOL]     assertEquals(1, output.length); [EOL]     Object ob = output[0]; [EOL]     assertTrue(ob instanceof EnumSet<?>); [EOL]     EnumSet<Choice> set2 = (EnumSet<Choice>) ob; [EOL]     assertEquals(1, set2.size()); [EOL]     assertTrue(set2.contains(Choice.NO)); [EOL]     assertFalse(set2.contains(Choice.YES)); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testEnumSet() throws Exception { [EOL]     EnumSet<Choice> set = EnumSet.of(Choice.NO); [EOL]     Object[] input = new Object[] { set }; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String json = m.writeValueAsString(input); [EOL]     Object[] output = m.readValue(json, Object[].class); [EOL]     assertEquals(1, output.length); [EOL]     Object ob = output[0]; [EOL]     assertTrue(ob instanceof EnumSet<?>); [EOL]     EnumSet<Choice> set2 = (EnumSet<Choice>) ob; [EOL]     assertEquals(1, set2.size()); [EOL]     assertTrue(set2.contains(Choice.NO)); [EOL]     assertFalse(set2.contains(Choice.YES)); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testEnumSet() throws Exception { [EOL]     EnumSet<Choice> set = EnumSet.of(Choice.NO); [EOL]     Object[] input = new Object[] { set }; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String json = m.writeValueAsString(input); [EOL]     Object[] output = m.readValue(json, Object[].class); [EOL]     assertEquals(1, output.length); [EOL]     Object ob = output[0]; [EOL]     assertTrue(ob instanceof EnumSet<?>); [EOL]     EnumSet<Choice> set2 = (EnumSet<Choice>) ob; [EOL]     assertEquals(1, set2.size()); [EOL]     assertTrue(set2.contains(Choice.NO)); [EOL]     assertFalse(set2.contains(Choice.YES)); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testEnumSet() throws Exception { [EOL]     EnumSet<Choice> set = EnumSet.of(Choice.NO); [EOL]     Object[] input = new Object[] { set }; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String json = m.writeValueAsString(input); [EOL]     Object[] output = m.readValue(json, Object[].class); [EOL]     assertEquals(1, output.length); [EOL]     Object ob = output[0]; [EOL]     assertTrue(ob instanceof EnumSet<?>); [EOL]     EnumSet<Choice> set2 = (EnumSet<Choice>) ob; [EOL]     assertEquals(1, set2.size()); [EOL]     assertTrue(set2.contains(Choice.NO)); [EOL]     assertFalse(set2.contains(Choice.YES)); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testEnumSet() throws Exception { [EOL]     EnumSet<Choice> set = EnumSet.of(Choice.NO); [EOL]     Object[] input = new Object[] { set }; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String json = m.writeValueAsString(input); [EOL]     Object[] output = m.readValue(json, Object[].class); [EOL]     assertEquals(1, output.length); [EOL]     Object ob = output[0]; [EOL]     assertTrue(ob instanceof EnumSet<?>); [EOL]     EnumSet<Choice> set2 = (EnumSet<Choice>) ob; [EOL]     assertEquals(1, set2.size()); [EOL]     assertTrue(set2.contains(Choice.NO)); [EOL]     assertFalse(set2.contains(Choice.YES)); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testEnumSet() throws Exception { [EOL]     EnumSet<Choice> set = EnumSet.of(Choice.NO); [EOL]     Object[] input = new Object[] { set }; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String json = m.writeValueAsString(input); [EOL]     Object[] output = m.readValue(json, Object[].class); [EOL]     assertEquals(1, output.length); [EOL]     Object ob = output[0]; [EOL]     assertTrue(ob instanceof EnumSet<?>); [EOL]     EnumSet<Choice> set2 = (EnumSet<Choice>) ob; [EOL]     assertEquals(1, set2.size()); [EOL]     assertTrue(set2.contains(Choice.NO)); [EOL]     assertFalse(set2.contains(Choice.YES)); [EOL] }
public void testSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addDeserializer(StringValue.class, new MyContextualDeserializer()); [EOL]     mapper.registerModule(module); [EOL]     ContextualBean bean = mapper.readValue("{\"a\":\"1\",\"b\":\"2\"}", ContextualBean.class); [EOL]     assertEquals("a=1", bean.a.value); [EOL]     assertEquals("b=2", bean.b.value); [EOL]     bean = mapper.readValue("{\"a\":\"3\",\"b\":\"4\"}", ContextualBean.class); [EOL]     assertEquals("a=3", bean.a.value); [EOL]     assertEquals("b=4", bean.b.value); [EOL] }
public void testSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addDeserializer(StringValue.class, new MyContextualDeserializer()); [EOL]     mapper.registerModule(module); [EOL]     ContextualBean bean = mapper.readValue("{\"a\":\"1\",\"b\":\"2\"}", ContextualBean.class); [EOL]     assertEquals("a=1", bean.a.value); [EOL]     assertEquals("b=2", bean.b.value); [EOL]     bean = mapper.readValue("{\"a\":\"3\",\"b\":\"4\"}", ContextualBean.class); [EOL]     assertEquals("a=3", bean.a.value); [EOL]     assertEquals("b=4", bean.b.value); [EOL] }
public void testPropertyRemoval() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new ModuleImpl(new RemovingModifier("a"))); [EOL]     Bean bean = mapper.readValue("{\"b\":\"2\"}", Bean.class); [EOL]     assertEquals("2", bean.b); [EOL]     assertEquals("a", bean.a); [EOL] }
public void testPropertyRemoval() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new ModuleImpl(new RemovingModifier("a"))); [EOL]     Bean bean = mapper.readValue("{\"b\":\"2\"}", Bean.class); [EOL]     assertEquals("2", bean.b); [EOL]     assertEquals("a", bean.a); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testPropertyRemoval() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new ModuleImpl(new RemovingModifier("a"))); [EOL]     Bean bean = mapper.readValue("{\"b\":\"2\"}", Bean.class); [EOL]     assertEquals("2", bean.b); [EOL]     assertEquals("a", bean.a); [EOL] }
public void testPropertyRemoval() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new ModuleImpl(new RemovingModifier("a"))); [EOL]     Bean bean = mapper.readValue("{\"b\":\"2\"}", Bean.class); [EOL]     assertEquals("2", bean.b); [EOL]     assertEquals("a", bean.a); [EOL] }
public void testPropertyRemoval() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new ModuleImpl(new RemovingModifier("a"))); [EOL]     Bean bean = mapper.readValue("{\"b\":\"2\"}", Bean.class); [EOL]     assertEquals("2", bean.b); [EOL]     assertEquals("a", bean.a); [EOL] }
public void testInvalidFormat() throws Exception { [EOL]     try { [EOL]         MAPPER.readValue(quote("foobar"), Date.class); [EOL]         fail("Should have failed with an exception"); [EOL]     } catch (InvalidFormatException e) { [EOL]         verifyException(e, "Can not construct instance"); [EOL]         assertEquals("foobar", e.getValue()); [EOL]         assertEquals(Date.class, e.getTargetType()); [EOL]     } catch (Exception e) { [EOL]         fail("Wrong type of exception (" + e.getClass().getName() + "), should get " + InvalidFormatException.class.getName()); [EOL]     } [EOL] }
public void testInvalidFormat() throws Exception { [EOL]     try { [EOL]         MAPPER.readValue(quote("foobar"), Date.class); [EOL]         fail("Should have failed with an exception"); [EOL]     } catch (InvalidFormatException e) { [EOL]         verifyException(e, "Can not construct instance"); [EOL]         assertEquals("foobar", e.getValue()); [EOL]         assertEquals(Date.class, e.getTargetType()); [EOL]     } catch (Exception e) { [EOL]         fail("Wrong type of exception (" + e.getClass().getName() + "), should get " + InvalidFormatException.class.getName()); [EOL]     } [EOL] }
public void testInvalidFormat() throws Exception { [EOL]     try { [EOL]         MAPPER.readValue(quote("foobar"), Date.class); [EOL]         fail("Should have failed with an exception"); [EOL]     } catch (InvalidFormatException e) { [EOL]         verifyException(e, "Can not construct instance"); [EOL]         assertEquals("foobar", e.getValue()); [EOL]         assertEquals(Date.class, e.getTargetType()); [EOL]     } catch (Exception e) { [EOL]         fail("Wrong type of exception (" + e.getClass().getName() + "), should get " + InvalidFormatException.class.getName()); [EOL]     } [EOL] }
public void testInvalidFormat() throws Exception { [EOL]     try { [EOL]         MAPPER.readValue(quote("foobar"), Date.class); [EOL]         fail("Should have failed with an exception"); [EOL]     } catch (InvalidFormatException e) { [EOL]         verifyException(e, "Can not construct instance"); [EOL]         assertEquals("foobar", e.getValue()); [EOL]         assertEquals(Date.class, e.getTargetType()); [EOL]     } catch (Exception e) { [EOL]         fail("Wrong type of exception (" + e.getClass().getName() + "), should get " + InvalidFormatException.class.getName()); [EOL]     } [EOL] }
public void testInvalidFormat() throws Exception { [EOL]     try { [EOL]         MAPPER.readValue(quote("foobar"), Date.class); [EOL]         fail("Should have failed with an exception"); [EOL]     } catch (InvalidFormatException e) { [EOL]         verifyException(e, "Can not construct instance"); [EOL]         assertEquals("foobar", e.getValue()); [EOL]         assertEquals(Date.class, e.getTargetType()); [EOL]     } catch (Exception e) { [EOL]         fail("Wrong type of exception (" + e.getClass().getName() + "), should get " + InvalidFormatException.class.getName()); [EOL]     } [EOL] }
public void testInvalidFormat() throws Exception { [EOL]     try { [EOL]         MAPPER.readValue(quote("foobar"), Date.class); [EOL]         fail("Should have failed with an exception"); [EOL]     } catch (InvalidFormatException e) { [EOL]         verifyException(e, "Can not construct instance"); [EOL]         assertEquals("foobar", e.getValue()); [EOL]         assertEquals(Date.class, e.getTargetType()); [EOL]     } catch (Exception e) { [EOL]         fail("Wrong type of exception (" + e.getClass().getName() + "), should get " + InvalidFormatException.class.getName()); [EOL]     } [EOL] }
public void testInvalidFormat() throws Exception { [EOL]     try { [EOL]         MAPPER.readValue(quote("foobar"), Date.class); [EOL]         fail("Should have failed with an exception"); [EOL]     } catch (InvalidFormatException e) { [EOL]         verifyException(e, "Can not construct instance"); [EOL]         assertEquals("foobar", e.getValue()); [EOL]         assertEquals(Date.class, e.getTargetType()); [EOL]     } catch (Exception e) { [EOL]         fail("Wrong type of exception (" + e.getClass().getName() + "), should get " + InvalidFormatException.class.getName()); [EOL]     } [EOL] }
public void testPropertyAnnotationSimple() throws Exception { [EOL]     String json = objectWriter().writeValueAsString(new PointWrapper(3, 4)); [EOL]     assertEquals("{\"value\":[3,4]}", json); [EOL] }
public void testPropertyAnnotationSimple() throws Exception { [EOL]     String json = objectWriter().writeValueAsString(new PointWrapper(3, 4)); [EOL]     assertEquals("{\"value\":[3,4]}", json); [EOL] }
public void testPropertyAnnotationSimple() throws Exception { [EOL]     String json = objectWriter().writeValueAsString(new PointWrapper(3, 4)); [EOL]     assertEquals("{\"value\":[3,4]}", json); [EOL] }
public void testAlwaysIdForTree() throws Exception { [EOL]     TreeNode root = new TreeNode(null, 1, "root"); [EOL]     TreeNode leaf = new TreeNode(root, 2, "leaf"); [EOL]     root.child = leaf; [EOL]     String json = MAPPER.writeValueAsString(root); [EOL]     assertEquals("{\"id\":1,\"name\":\"root\",\"parent\":null,\"child\":" + "{\"id\":2,\"name\":\"leaf\",\"parent\":1,\"child\":null}}", json); [EOL] }
public void testAlwaysIdForTree() throws Exception { [EOL]     TreeNode root = new TreeNode(null, 1, "root"); [EOL]     TreeNode leaf = new TreeNode(root, 2, "leaf"); [EOL]     root.child = leaf; [EOL]     String json = MAPPER.writeValueAsString(root); [EOL]     assertEquals("{\"id\":1,\"name\":\"root\",\"parent\":null,\"child\":" + "{\"id\":2,\"name\":\"leaf\",\"parent\":1,\"child\":null}}", json); [EOL] }
public void testAlwaysIdForTree() throws Exception { [EOL]     TreeNode root = new TreeNode(null, 1, "root"); [EOL]     TreeNode leaf = new TreeNode(root, 2, "leaf"); [EOL]     root.child = leaf; [EOL]     String json = MAPPER.writeValueAsString(root); [EOL]     assertEquals("{\"id\":1,\"name\":\"root\",\"parent\":null,\"child\":" + "{\"id\":2,\"name\":\"leaf\",\"parent\":1,\"child\":null}}", json); [EOL] }
public void testAlwaysIdForTree() throws Exception { [EOL]     TreeNode root = new TreeNode(null, 1, "root"); [EOL]     TreeNode leaf = new TreeNode(root, 2, "leaf"); [EOL]     root.child = leaf; [EOL]     String json = MAPPER.writeValueAsString(root); [EOL]     assertEquals("{\"id\":1,\"name\":\"root\",\"parent\":null,\"child\":" + "{\"id\":2,\"name\":\"leaf\",\"parent\":1,\"child\":null}}", json); [EOL] }
public void testAlwaysIdForTree() throws Exception { [EOL]     TreeNode root = new TreeNode(null, 1, "root"); [EOL]     TreeNode leaf = new TreeNode(root, 2, "leaf"); [EOL]     root.child = leaf; [EOL]     String json = MAPPER.writeValueAsString(root); [EOL]     assertEquals("{\"id\":1,\"name\":\"root\",\"parent\":null,\"child\":" + "{\"id\":2,\"name\":\"leaf\",\"parent\":1,\"child\":null}}", json); [EOL] }
public void testAlwaysIdForTree() throws Exception { [EOL]     TreeNode root = new TreeNode(null, 1, "root"); [EOL]     TreeNode leaf = new TreeNode(root, 2, "leaf"); [EOL]     root.child = leaf; [EOL]     String json = MAPPER.writeValueAsString(root); [EOL]     assertEquals("{\"id\":1,\"name\":\"root\",\"parent\":null,\"child\":" + "{\"id\":2,\"name\":\"leaf\",\"parent\":1,\"child\":null}}", json); [EOL] }
public void testPolymorphicRoundtrip() throws Exception { [EOL]     Impl in1 = new Impl(123, 456); [EOL]     in1.next = new Impl(111, 222); [EOL]     in1.next.next = in1; [EOL]     String json = mapper.writeValueAsString(in1); [EOL]     Base result0 = mapper.readValue(json, Base.class); [EOL]     assertNotNull(result0); [EOL]     assertSame(Impl.class, result0.getClass()); [EOL]     Impl result = (Impl) result0; [EOL]     assertEquals(123, result.value); [EOL]     assertEquals(456, result.extra); [EOL]     Impl result2 = (Impl) result.next; [EOL]     assertEquals(111, result2.value); [EOL]     assertEquals(222, result2.extra); [EOL]     assertSame(result, result2.next); [EOL] }
public void testPolymorphicRoundtrip() throws Exception { [EOL]     Impl in1 = new Impl(123, 456); [EOL]     in1.next = new Impl(111, 222); [EOL]     in1.next.next = in1; [EOL]     String json = mapper.writeValueAsString(in1); [EOL]     Base result0 = mapper.readValue(json, Base.class); [EOL]     assertNotNull(result0); [EOL]     assertSame(Impl.class, result0.getClass()); [EOL]     Impl result = (Impl) result0; [EOL]     assertEquals(123, result.value); [EOL]     assertEquals(456, result.extra); [EOL]     Impl result2 = (Impl) result.next; [EOL]     assertEquals(111, result2.value); [EOL]     assertEquals(222, result2.extra); [EOL]     assertSame(result, result2.next); [EOL] }
public void testPolymorphicRoundtrip() throws Exception { [EOL]     Impl in1 = new Impl(123, 456); [EOL]     in1.next = new Impl(111, 222); [EOL]     in1.next.next = in1; [EOL]     String json = mapper.writeValueAsString(in1); [EOL]     Base result0 = mapper.readValue(json, Base.class); [EOL]     assertNotNull(result0); [EOL]     assertSame(Impl.class, result0.getClass()); [EOL]     Impl result = (Impl) result0; [EOL]     assertEquals(123, result.value); [EOL]     assertEquals(456, result.extra); [EOL]     Impl result2 = (Impl) result.next; [EOL]     assertEquals(111, result2.value); [EOL]     assertEquals(222, result2.extra); [EOL]     assertSame(result, result2.next); [EOL] }
public void testPolymorphicRoundtrip() throws Exception { [EOL]     Impl in1 = new Impl(123, 456); [EOL]     in1.next = new Impl(111, 222); [EOL]     in1.next.next = in1; [EOL]     String json = mapper.writeValueAsString(in1); [EOL]     Base result0 = mapper.readValue(json, Base.class); [EOL]     assertNotNull(result0); [EOL]     assertSame(Impl.class, result0.getClass()); [EOL]     Impl result = (Impl) result0; [EOL]     assertEquals(123, result.value); [EOL]     assertEquals(456, result.extra); [EOL]     Impl result2 = (Impl) result.next; [EOL]     assertEquals(111, result2.value); [EOL]     assertEquals(222, result2.extra); [EOL]     assertSame(result, result2.next); [EOL] }
public void testAlwaysIdForTree() throws Exception { [EOL]     TreeNode root = new TreeNode(null, 1, "root"); [EOL]     TreeNode leaf = new TreeNode(root, 2, "leaf"); [EOL]     root.child = leaf; [EOL]     String json = MAPPER.writeValueAsString(root); [EOL]     assertEquals("{\"id\":1,\"name\":\"root\",\"parent\":null,\"child\":" + "{\"id\":2,\"name\":\"leaf\",\"parent\":1,\"child\":null}}", json); [EOL] }
public void testAlwaysIdForTree() throws Exception { [EOL]     TreeNode root = new TreeNode(null, 1, "root"); [EOL]     TreeNode leaf = new TreeNode(root, 2, "leaf"); [EOL]     root.child = leaf; [EOL]     String json = MAPPER.writeValueAsString(root); [EOL]     assertEquals("{\"id\":1,\"name\":\"root\",\"parent\":null,\"child\":" + "{\"id\":2,\"name\":\"leaf\",\"parent\":1,\"child\":null}}", json); [EOL] }
public void testAlwaysIdForTree() throws Exception { [EOL]     TreeNode root = new TreeNode(null, 1, "root"); [EOL]     TreeNode leaf = new TreeNode(root, 2, "leaf"); [EOL]     root.child = leaf; [EOL]     String json = MAPPER.writeValueAsString(root); [EOL]     assertEquals("{\"id\":1,\"name\":\"root\",\"parent\":null,\"child\":" + "{\"id\":2,\"name\":\"leaf\",\"parent\":1,\"child\":null}}", json); [EOL] }
public void testAlwaysIdForTree() throws Exception { [EOL]     TreeNode root = new TreeNode(null, 1, "root"); [EOL]     TreeNode leaf = new TreeNode(root, 2, "leaf"); [EOL]     root.child = leaf; [EOL]     String json = MAPPER.writeValueAsString(root); [EOL]     assertEquals("{\"id\":1,\"name\":\"root\",\"parent\":null,\"child\":" + "{\"id\":2,\"name\":\"leaf\",\"parent\":1,\"child\":null}}", json); [EOL] }
public void testAlwaysIdForTree() throws Exception { [EOL]     TreeNode root = new TreeNode(null, 1, "root"); [EOL]     TreeNode leaf = new TreeNode(root, 2, "leaf"); [EOL]     root.child = leaf; [EOL]     String json = MAPPER.writeValueAsString(root); [EOL]     assertEquals("{\"id\":1,\"name\":\"root\",\"parent\":null,\"child\":" + "{\"id\":2,\"name\":\"leaf\",\"parent\":1,\"child\":null}}", json); [EOL] }
public void testAlwaysIdForTree() throws Exception { [EOL]     TreeNode root = new TreeNode(null, 1, "root"); [EOL]     TreeNode leaf = new TreeNode(root, 2, "leaf"); [EOL]     root.child = leaf; [EOL]     String json = MAPPER.writeValueAsString(root); [EOL]     assertEquals("{\"id\":1,\"name\":\"root\",\"parent\":null,\"child\":" + "{\"id\":2,\"name\":\"leaf\",\"parent\":1,\"child\":null}}", json); [EOL] }
public void testPolymorphicRoundtrip() throws Exception { [EOL]     Impl in1 = new Impl(123, 456); [EOL]     in1.next = new Impl(111, 222); [EOL]     in1.next.next = in1; [EOL]     String json = mapper.writeValueAsString(in1); [EOL]     Base result0 = mapper.readValue(json, Base.class); [EOL]     assertNotNull(result0); [EOL]     assertSame(Impl.class, result0.getClass()); [EOL]     Impl result = (Impl) result0; [EOL]     assertEquals(123, result.value); [EOL]     assertEquals(456, result.extra); [EOL]     Impl result2 = (Impl) result.next; [EOL]     assertEquals(111, result2.value); [EOL]     assertEquals(222, result2.extra); [EOL]     assertSame(result, result2.next); [EOL] }
public void testPolymorphicRoundtrip() throws Exception { [EOL]     Impl in1 = new Impl(123, 456); [EOL]     in1.next = new Impl(111, 222); [EOL]     in1.next.next = in1; [EOL]     String json = mapper.writeValueAsString(in1); [EOL]     Base result0 = mapper.readValue(json, Base.class); [EOL]     assertNotNull(result0); [EOL]     assertSame(Impl.class, result0.getClass()); [EOL]     Impl result = (Impl) result0; [EOL]     assertEquals(123, result.value); [EOL]     assertEquals(456, result.extra); [EOL]     Impl result2 = (Impl) result.next; [EOL]     assertEquals(111, result2.value); [EOL]     assertEquals(222, result2.extra); [EOL]     assertSame(result, result2.next); [EOL] }
public void testPolymorphicRoundtrip() throws Exception { [EOL]     Impl in1 = new Impl(123, 456); [EOL]     in1.next = new Impl(111, 222); [EOL]     in1.next.next = in1; [EOL]     String json = mapper.writeValueAsString(in1); [EOL]     Base result0 = mapper.readValue(json, Base.class); [EOL]     assertNotNull(result0); [EOL]     assertSame(Impl.class, result0.getClass()); [EOL]     Impl result = (Impl) result0; [EOL]     assertEquals(123, result.value); [EOL]     assertEquals(456, result.extra); [EOL]     Impl result2 = (Impl) result.next; [EOL]     assertEquals(111, result2.value); [EOL]     assertEquals(222, result2.extra); [EOL]     assertSame(result, result2.next); [EOL] }
public void testPolymorphicRoundtrip() throws Exception { [EOL]     Impl in1 = new Impl(123, 456); [EOL]     in1.next = new Impl(111, 222); [EOL]     in1.next.next = in1; [EOL]     String json = mapper.writeValueAsString(in1); [EOL]     Base result0 = mapper.readValue(json, Base.class); [EOL]     assertNotNull(result0); [EOL]     assertSame(Impl.class, result0.getClass()); [EOL]     Impl result = (Impl) result0; [EOL]     assertEquals(123, result.value); [EOL]     assertEquals(456, result.extra); [EOL]     Impl result2 = (Impl) result.next; [EOL]     assertEquals(111, result2.value); [EOL]     assertEquals(222, result2.extra); [EOL]     assertSame(result, result2.next); [EOL] }
public void testJackson703() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     BasicBeanDescription beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Jackson703.class)); [EOL]     assertNotNull(beanDesc); [EOL]     Jackson703 bean = new Jackson703(); [EOL]     String json = mapper.writeValueAsString(bean); [EOL]     assertNotNull(json); [EOL] }
public void testJackson703() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     BasicBeanDescription beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Jackson703.class)); [EOL]     assertNotNull(beanDesc); [EOL]     Jackson703 bean = new Jackson703(); [EOL]     String json = mapper.writeValueAsString(bean); [EOL]     assertNotNull(json); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testJackson703() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     BasicBeanDescription beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Jackson703.class)); [EOL]     assertNotNull(beanDesc); [EOL]     Jackson703 bean = new Jackson703(); [EOL]     String json = mapper.writeValueAsString(bean); [EOL]     assertNotNull(json); [EOL] }
public void testJackson703() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     BasicBeanDescription beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Jackson703.class)); [EOL]     assertNotNull(beanDesc); [EOL]     Jackson703 bean = new Jackson703(); [EOL]     String json = mapper.writeValueAsString(bean); [EOL]     assertNotNull(json); [EOL] }
public void testJackson703() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     BasicBeanDescription beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Jackson703.class)); [EOL]     assertNotNull(beanDesc); [EOL]     Jackson703 bean = new Jackson703(); [EOL]     String json = mapper.writeValueAsString(bean); [EOL]     assertNotNull(json); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testJackson703() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     BasicBeanDescription beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Jackson703.class)); [EOL]     assertNotNull(beanDesc); [EOL]     Jackson703 bean = new Jackson703(); [EOL]     String json = mapper.writeValueAsString(bean); [EOL]     assertNotNull(json); [EOL] }
public void testJackson703() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     BasicBeanDescription beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Jackson703.class)); [EOL]     assertNotNull(beanDesc); [EOL]     Jackson703 bean = new Jackson703(); [EOL]     String json = mapper.writeValueAsString(bean); [EOL]     assertNotNull(json); [EOL] }
public void testJackson703() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     BasicBeanDescription beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Jackson703.class)); [EOL]     assertNotNull(beanDesc); [EOL]     Jackson703 bean = new Jackson703(); [EOL]     String json = mapper.writeValueAsString(bean); [EOL]     assertNotNull(json); [EOL] }
public void testJackson703() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     BasicBeanDescription beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Jackson703.class)); [EOL]     assertNotNull(beanDesc); [EOL]     Jackson703 bean = new Jackson703(); [EOL]     String json = mapper.writeValueAsString(bean); [EOL]     assertNotNull(json); [EOL] }
public void testJackson703() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     BasicBeanDescription beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Jackson703.class)); [EOL]     assertNotNull(beanDesc); [EOL]     Jackson703 bean = new Jackson703(); [EOL]     String json = mapper.writeValueAsString(bean); [EOL]     assertNotNull(json); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testEnumsWithJsonValue() throws Exception { [EOL]     EnumWithJsonValue e = MAPPER.readValue(quote("foo"), EnumWithJsonValue.class); [EOL]     assertSame(EnumWithJsonValue.A, e); [EOL]     e = MAPPER.readValue(quote("bar"), EnumWithJsonValue.class); [EOL]     assertSame(EnumWithJsonValue.B, e); [EOL]     EnumSet<EnumWithJsonValue> set = MAPPER.readValue("[\"bar\"]", new TypeReference<EnumSet<EnumWithJsonValue>>() { [EOL]     }); [EOL]     assertNotNull(set); [EOL]     assertEquals(1, set.size()); [EOL]     assertTrue(set.contains(EnumWithJsonValue.B)); [EOL]     assertFalse(set.contains(EnumWithJsonValue.A)); [EOL]     EnumMap<EnumWithJsonValue, Integer> map = MAPPER.readValue("{\"foo\":13}", new TypeReference<EnumMap<EnumWithJsonValue, Integer>>() { [EOL]     }); [EOL]     assertNotNull(map); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals(Integer.valueOf(13), map.get(EnumWithJsonValue.A)); [EOL] }
public void testEnumsWithJsonValue() throws Exception { [EOL]     EnumWithJsonValue e = MAPPER.readValue(quote("foo"), EnumWithJsonValue.class); [EOL]     assertSame(EnumWithJsonValue.A, e); [EOL]     e = MAPPER.readValue(quote("bar"), EnumWithJsonValue.class); [EOL]     assertSame(EnumWithJsonValue.B, e); [EOL]     EnumSet<EnumWithJsonValue> set = MAPPER.readValue("[\"bar\"]", new TypeReference<EnumSet<EnumWithJsonValue>>() { [EOL]     }); [EOL]     assertNotNull(set); [EOL]     assertEquals(1, set.size()); [EOL]     assertTrue(set.contains(EnumWithJsonValue.B)); [EOL]     assertFalse(set.contains(EnumWithJsonValue.A)); [EOL]     EnumMap<EnumWithJsonValue, Integer> map = MAPPER.readValue("{\"foo\":13}", new TypeReference<EnumMap<EnumWithJsonValue, Integer>>() { [EOL]     }); [EOL]     assertNotNull(map); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals(Integer.valueOf(13), map.get(EnumWithJsonValue.A)); [EOL] }
public void testEnumsWithJsonValue() throws Exception { [EOL]     EnumWithJsonValue e = MAPPER.readValue(quote("foo"), EnumWithJsonValue.class); [EOL]     assertSame(EnumWithJsonValue.A, e); [EOL]     e = MAPPER.readValue(quote("bar"), EnumWithJsonValue.class); [EOL]     assertSame(EnumWithJsonValue.B, e); [EOL]     EnumSet<EnumWithJsonValue> set = MAPPER.readValue("[\"bar\"]", new TypeReference<EnumSet<EnumWithJsonValue>>() { [EOL]     }); [EOL]     assertNotNull(set); [EOL]     assertEquals(1, set.size()); [EOL]     assertTrue(set.contains(EnumWithJsonValue.B)); [EOL]     assertFalse(set.contains(EnumWithJsonValue.A)); [EOL]     EnumMap<EnumWithJsonValue, Integer> map = MAPPER.readValue("{\"foo\":13}", new TypeReference<EnumMap<EnumWithJsonValue, Integer>>() { [EOL]     }); [EOL]     assertNotNull(map); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals(Integer.valueOf(13), map.get(EnumWithJsonValue.A)); [EOL] }
public void testEnumsWithJsonValue() throws Exception { [EOL]     EnumWithJsonValue e = MAPPER.readValue(quote("foo"), EnumWithJsonValue.class); [EOL]     assertSame(EnumWithJsonValue.A, e); [EOL]     e = MAPPER.readValue(quote("bar"), EnumWithJsonValue.class); [EOL]     assertSame(EnumWithJsonValue.B, e); [EOL]     EnumSet<EnumWithJsonValue> set = MAPPER.readValue("[\"bar\"]", new TypeReference<EnumSet<EnumWithJsonValue>>() { [EOL]     }); [EOL]     assertNotNull(set); [EOL]     assertEquals(1, set.size()); [EOL]     assertTrue(set.contains(EnumWithJsonValue.B)); [EOL]     assertFalse(set.contains(EnumWithJsonValue.A)); [EOL]     EnumMap<EnumWithJsonValue, Integer> map = MAPPER.readValue("{\"foo\":13}", new TypeReference<EnumMap<EnumWithJsonValue, Integer>>() { [EOL]     }); [EOL]     assertNotNull(map); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals(Integer.valueOf(13), map.get(EnumWithJsonValue.A)); [EOL] }
public void testEnumsWithJsonValue() throws Exception { [EOL]     EnumWithJsonValue e = MAPPER.readValue(quote("foo"), EnumWithJsonValue.class); [EOL]     assertSame(EnumWithJsonValue.A, e); [EOL]     e = MAPPER.readValue(quote("bar"), EnumWithJsonValue.class); [EOL]     assertSame(EnumWithJsonValue.B, e); [EOL]     EnumSet<EnumWithJsonValue> set = MAPPER.readValue("[\"bar\"]", new TypeReference<EnumSet<EnumWithJsonValue>>() { [EOL]     }); [EOL]     assertNotNull(set); [EOL]     assertEquals(1, set.size()); [EOL]     assertTrue(set.contains(EnumWithJsonValue.B)); [EOL]     assertFalse(set.contains(EnumWithJsonValue.A)); [EOL]     EnumMap<EnumWithJsonValue, Integer> map = MAPPER.readValue("{\"foo\":13}", new TypeReference<EnumMap<EnumWithJsonValue, Integer>>() { [EOL]     }); [EOL]     assertNotNull(map); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals(Integer.valueOf(13), map.get(EnumWithJsonValue.A)); [EOL] }
public void testNumbersToEnums() throws Exception { [EOL]     assertFalse(MAPPER.getDeserializationConfig().isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS)); [EOL]     TestEnum value = MAPPER.readValue("1", TestEnum.class); [EOL]     assertSame(TestEnum.RULES, value); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS, true); [EOL]     try { [EOL]         value = m.readValue("1", TestEnum.class); [EOL]         fail("Expected an error"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Not allowed to deserialize Enum value out of JSON number"); [EOL]     } [EOL] }
public void testPolymorphicRoundtrip() throws Exception { [EOL]     Impl in1 = new Impl(123, 456); [EOL]     in1.next = new Impl(111, 222); [EOL]     in1.next.next = in1; [EOL]     String json = mapper.writeValueAsString(in1); [EOL]     Base result0 = mapper.readValue(json, Base.class); [EOL]     assertNotNull(result0); [EOL]     assertSame(Impl.class, result0.getClass()); [EOL]     Impl result = (Impl) result0; [EOL]     assertEquals(123, result.value); [EOL]     assertEquals(456, result.extra); [EOL]     Impl result2 = (Impl) result.next; [EOL]     assertEquals(111, result2.value); [EOL]     assertEquals(222, result2.extra); [EOL]     assertSame(result, result2.next); [EOL] }
public void testPolymorphicRoundtrip() throws Exception { [EOL]     Impl in1 = new Impl(123, 456); [EOL]     in1.next = new Impl(111, 222); [EOL]     in1.next.next = in1; [EOL]     String json = mapper.writeValueAsString(in1); [EOL]     Base result0 = mapper.readValue(json, Base.class); [EOL]     assertNotNull(result0); [EOL]     assertSame(Impl.class, result0.getClass()); [EOL]     Impl result = (Impl) result0; [EOL]     assertEquals(123, result.value); [EOL]     assertEquals(456, result.extra); [EOL]     Impl result2 = (Impl) result.next; [EOL]     assertEquals(111, result2.value); [EOL]     assertEquals(222, result2.extra); [EOL]     assertSame(result, result2.next); [EOL] }
public void testPolymorphicRoundtrip() throws Exception { [EOL]     Impl in1 = new Impl(123, 456); [EOL]     in1.next = new Impl(111, 222); [EOL]     in1.next.next = in1; [EOL]     String json = mapper.writeValueAsString(in1); [EOL]     Base result0 = mapper.readValue(json, Base.class); [EOL]     assertNotNull(result0); [EOL]     assertSame(Impl.class, result0.getClass()); [EOL]     Impl result = (Impl) result0; [EOL]     assertEquals(123, result.value); [EOL]     assertEquals(456, result.extra); [EOL]     Impl result2 = (Impl) result.next; [EOL]     assertEquals(111, result2.value); [EOL]     assertEquals(222, result2.extra); [EOL]     assertSame(result, result2.next); [EOL] }
public void testPolymorphicRoundtrip() throws Exception { [EOL]     Impl in1 = new Impl(123, 456); [EOL]     in1.next = new Impl(111, 222); [EOL]     in1.next.next = in1; [EOL]     String json = mapper.writeValueAsString(in1); [EOL]     Base result0 = mapper.readValue(json, Base.class); [EOL]     assertNotNull(result0); [EOL]     assertSame(Impl.class, result0.getClass()); [EOL]     Impl result = (Impl) result0; [EOL]     assertEquals(123, result.value); [EOL]     assertEquals(456, result.extra); [EOL]     Impl result2 = (Impl) result.next; [EOL]     assertEquals(111, result2.value); [EOL]     assertEquals(222, result2.extra); [EOL]     assertSame(result, result2.next); [EOL] }
public void testPolymorphicRoundtrip() throws Exception { [EOL]     Impl in1 = new Impl(123, 456); [EOL]     in1.next = new Impl(111, 222); [EOL]     in1.next.next = in1; [EOL]     String json = mapper.writeValueAsString(in1); [EOL]     Base result0 = mapper.readValue(json, Base.class); [EOL]     assertNotNull(result0); [EOL]     assertSame(Impl.class, result0.getClass()); [EOL]     Impl result = (Impl) result0; [EOL]     assertEquals(123, result.value); [EOL]     assertEquals(456, result.extra); [EOL]     Impl result2 = (Impl) result.next; [EOL]     assertEquals(111, result2.value); [EOL]     assertEquals(222, result2.extra); [EOL]     assertSame(result, result2.next); [EOL] }
public void testNonRootMapsWithObjectReader() throws Exception { [EOL]     String JSON = "[{ \"hi\": \"ho\", \"neighbor\": \"Joe\" },\n" + "{\"boy\": \"howdy\", \"huh\": \"what\"}]"; [EOL]     final MappingIterator<Map<String, Object>> iterator = MAPPER.reader().withType(new TypeReference<Map<String, Object>>() { [EOL]     }).readValues(JSON); [EOL]     Map<String, Object> map; [EOL]     assertTrue(iterator.hasNext()); [EOL]     map = iterator.nextValue(); [EOL]     assertEquals(2, map.size()); [EOL]     assertTrue(iterator.hasNext()); [EOL]     map = iterator.nextValue(); [EOL]     assertEquals(2, map.size()); [EOL]     assertFalse(iterator.hasNext()); [EOL] }
public void testNonRootMapsWithObjectReader() throws Exception { [EOL]     String JSON = "[{ \"hi\": \"ho\", \"neighbor\": \"Joe\" },\n" + "{\"boy\": \"howdy\", \"huh\": \"what\"}]"; [EOL]     final MappingIterator<Map<String, Object>> iterator = MAPPER.reader().withType(new TypeReference<Map<String, Object>>() { [EOL]     }).readValues(JSON); [EOL]     Map<String, Object> map; [EOL]     assertTrue(iterator.hasNext()); [EOL]     map = iterator.nextValue(); [EOL]     assertEquals(2, map.size()); [EOL]     assertTrue(iterator.hasNext()); [EOL]     map = iterator.nextValue(); [EOL]     assertEquals(2, map.size()); [EOL]     assertFalse(iterator.hasNext()); [EOL] }
public void testNonRootMapsWithObjectReader() throws Exception { [EOL]     String JSON = "[{ \"hi\": \"ho\", \"neighbor\": \"Joe\" },\n" + "{\"boy\": \"howdy\", \"huh\": \"what\"}]"; [EOL]     final MappingIterator<Map<String, Object>> iterator = MAPPER.reader().withType(new TypeReference<Map<String, Object>>() { [EOL]     }).readValues(JSON); [EOL]     Map<String, Object> map; [EOL]     assertTrue(iterator.hasNext()); [EOL]     map = iterator.nextValue(); [EOL]     assertEquals(2, map.size()); [EOL]     assertTrue(iterator.hasNext()); [EOL]     map = iterator.nextValue(); [EOL]     assertEquals(2, map.size()); [EOL]     assertFalse(iterator.hasNext()); [EOL] }
public void testNonRootMapsWithObjectReader() throws Exception { [EOL]     String JSON = "[{ \"hi\": \"ho\", \"neighbor\": \"Joe\" },\n" + "{\"boy\": \"howdy\", \"huh\": \"what\"}]"; [EOL]     final MappingIterator<Map<String, Object>> iterator = MAPPER.reader().withType(new TypeReference<Map<String, Object>>() { [EOL]     }).readValues(JSON); [EOL]     Map<String, Object> map; [EOL]     assertTrue(iterator.hasNext()); [EOL]     map = iterator.nextValue(); [EOL]     assertEquals(2, map.size()); [EOL]     assertTrue(iterator.hasNext()); [EOL]     map = iterator.nextValue(); [EOL]     assertEquals(2, map.size()); [EOL]     assertFalse(iterator.hasNext()); [EOL] }
public void testNonRootMapsWithObjectReader() throws Exception { [EOL]     String JSON = "[{ \"hi\": \"ho\", \"neighbor\": \"Joe\" },\n" + "{\"boy\": \"howdy\", \"huh\": \"what\"}]"; [EOL]     final MappingIterator<Map<String, Object>> iterator = MAPPER.reader().withType(new TypeReference<Map<String, Object>>() { [EOL]     }).readValues(JSON); [EOL]     Map<String, Object> map; [EOL]     assertTrue(iterator.hasNext()); [EOL]     map = iterator.nextValue(); [EOL]     assertEquals(2, map.size()); [EOL]     assertTrue(iterator.hasNext()); [EOL]     map = iterator.nextValue(); [EOL]     assertEquals(2, map.size()); [EOL]     assertFalse(iterator.hasNext()); [EOL] }
public void testNonRootMapsWithObjectReader() throws Exception { [EOL]     String JSON = "[{ \"hi\": \"ho\", \"neighbor\": \"Joe\" },\n" + "{\"boy\": \"howdy\", \"huh\": \"what\"}]"; [EOL]     final MappingIterator<Map<String, Object>> iterator = MAPPER.reader().withType(new TypeReference<Map<String, Object>>() { [EOL]     }).readValues(JSON); [EOL]     Map<String, Object> map; [EOL]     assertTrue(iterator.hasNext()); [EOL]     map = iterator.nextValue(); [EOL]     assertEquals(2, map.size()); [EOL]     assertTrue(iterator.hasNext()); [EOL]     map = iterator.nextValue(); [EOL]     assertEquals(2, map.size()); [EOL]     assertFalse(iterator.hasNext()); [EOL] }
public void testNonRootMapsWithObjectReader() throws Exception { [EOL]     String JSON = "[{ \"hi\": \"ho\", \"neighbor\": \"Joe\" },\n" + "{\"boy\": \"howdy\", \"huh\": \"what\"}]"; [EOL]     final MappingIterator<Map<String, Object>> iterator = MAPPER.reader().withType(new TypeReference<Map<String, Object>>() { [EOL]     }).readValues(JSON); [EOL]     Map<String, Object> map; [EOL]     assertTrue(iterator.hasNext()); [EOL]     map = iterator.nextValue(); [EOL]     assertEquals(2, map.size()); [EOL]     assertTrue(iterator.hasNext()); [EOL]     map = iterator.nextValue(); [EOL]     assertEquals(2, map.size()); [EOL]     assertFalse(iterator.hasNext()); [EOL] }
public void testNonRootMapsWithObjectReader() throws Exception { [EOL]     String JSON = "[{ \"hi\": \"ho\", \"neighbor\": \"Joe\" },\n" + "{\"boy\": \"howdy\", \"huh\": \"what\"}]"; [EOL]     final MappingIterator<Map<String, Object>> iterator = MAPPER.reader().withType(new TypeReference<Map<String, Object>>() { [EOL]     }).readValues(JSON); [EOL]     Map<String, Object> map; [EOL]     assertTrue(iterator.hasNext()); [EOL]     map = iterator.nextValue(); [EOL]     assertEquals(2, map.size()); [EOL]     assertTrue(iterator.hasNext()); [EOL]     map = iterator.nextValue(); [EOL]     assertEquals(2, map.size()); [EOL]     assertFalse(iterator.hasNext()); [EOL] }
public void testNonRootMapsWithObjectReader() throws Exception { [EOL]     String JSON = "[{ \"hi\": \"ho\", \"neighbor\": \"Joe\" },\n" + "{\"boy\": \"howdy\", \"huh\": \"what\"}]"; [EOL]     final MappingIterator<Map<String, Object>> iterator = MAPPER.reader().withType(new TypeReference<Map<String, Object>>() { [EOL]     }).readValues(JSON); [EOL]     Map<String, Object> map; [EOL]     assertTrue(iterator.hasNext()); [EOL]     map = iterator.nextValue(); [EOL]     assertEquals(2, map.size()); [EOL]     assertTrue(iterator.hasNext()); [EOL]     map = iterator.nextValue(); [EOL]     assertEquals(2, map.size()); [EOL]     assertFalse(iterator.hasNext()); [EOL] }
public void testNonRootMapsWithObjectReader() throws Exception { [EOL]     String JSON = "[{ \"hi\": \"ho\", \"neighbor\": \"Joe\" },\n" + "{\"boy\": \"howdy\", \"huh\": \"what\"}]"; [EOL]     final MappingIterator<Map<String, Object>> iterator = MAPPER.reader().withType(new TypeReference<Map<String, Object>>() { [EOL]     }).readValues(JSON); [EOL]     Map<String, Object> map; [EOL]     assertTrue(iterator.hasNext()); [EOL]     map = iterator.nextValue(); [EOL]     assertEquals(2, map.size()); [EOL]     assertTrue(iterator.hasNext()); [EOL]     map = iterator.nextValue(); [EOL]     assertEquals(2, map.size()); [EOL]     assertFalse(iterator.hasNext()); [EOL] }
public void testNonRootMapsWithObjectReader() throws Exception { [EOL]     String JSON = "[{ \"hi\": \"ho\", \"neighbor\": \"Joe\" },\n" + "{\"boy\": \"howdy\", \"huh\": \"what\"}]"; [EOL]     final MappingIterator<Map<String, Object>> iterator = MAPPER.reader().withType(new TypeReference<Map<String, Object>>() { [EOL]     }).readValues(JSON); [EOL]     Map<String, Object> map; [EOL]     assertTrue(iterator.hasNext()); [EOL]     map = iterator.nextValue(); [EOL]     assertEquals(2, map.size()); [EOL]     assertTrue(iterator.hasNext()); [EOL]     map = iterator.nextValue(); [EOL]     assertEquals(2, map.size()); [EOL]     assertFalse(iterator.hasNext()); [EOL] }
public void testNonRootMapsWithObjectReader() throws Exception { [EOL]     String JSON = "[{ \"hi\": \"ho\", \"neighbor\": \"Joe\" },\n" + "{\"boy\": \"howdy\", \"huh\": \"what\"}]"; [EOL]     final MappingIterator<Map<String, Object>> iterator = MAPPER.reader().withType(new TypeReference<Map<String, Object>>() { [EOL]     }).readValues(JSON); [EOL]     Map<String, Object> map; [EOL]     assertTrue(iterator.hasNext()); [EOL]     map = iterator.nextValue(); [EOL]     assertEquals(2, map.size()); [EOL]     assertTrue(iterator.hasNext()); [EOL]     map = iterator.nextValue(); [EOL]     assertEquals(2, map.size()); [EOL]     assertFalse(iterator.hasNext()); [EOL] }
public void testCustomRootNulls() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addDeserializer(String.class, new FunnyNullDeserializer()); [EOL]     mapper.registerModule(module); [EOL]     String str = mapper.readValue("null", String.class); [EOL]     assertNotNull(str); [EOL]     assertEquals("funny", str); [EOL]     ObjectReader reader = mapper.reader(String.class); [EOL]     str = reader.readValue("null"); [EOL]     assertNotNull(str); [EOL]     assertEquals("funny", str); [EOL] }
public void testCustomRootNulls() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addDeserializer(String.class, new FunnyNullDeserializer()); [EOL]     mapper.registerModule(module); [EOL]     String str = mapper.readValue("null", String.class); [EOL]     assertNotNull(str); [EOL]     assertEquals("funny", str); [EOL]     ObjectReader reader = mapper.reader(String.class); [EOL]     str = reader.readValue("null"); [EOL]     assertNotNull(str); [EOL]     assertEquals("funny", str); [EOL] }
public void testCustomRootNulls() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addDeserializer(String.class, new FunnyNullDeserializer()); [EOL]     mapper.registerModule(module); [EOL]     String str = mapper.readValue("null", String.class); [EOL]     assertNotNull(str); [EOL]     assertEquals("funny", str); [EOL]     ObjectReader reader = mapper.reader(String.class); [EOL]     str = reader.readValue("null"); [EOL]     assertNotNull(str); [EOL]     assertEquals("funny", str); [EOL] }
public void testCustomRootNulls() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addDeserializer(String.class, new FunnyNullDeserializer()); [EOL]     mapper.registerModule(module); [EOL]     String str = mapper.readValue("null", String.class); [EOL]     assertNotNull(str); [EOL]     assertEquals("funny", str); [EOL]     ObjectReader reader = mapper.reader(String.class); [EOL]     str = reader.readValue("null"); [EOL]     assertNotNull(str); [EOL]     assertEquals("funny", str); [EOL] }
public void testCustomRootNulls() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addDeserializer(String.class, new FunnyNullDeserializer()); [EOL]     mapper.registerModule(module); [EOL]     String str = mapper.readValue("null", String.class); [EOL]     assertNotNull(str); [EOL]     assertEquals("funny", str); [EOL]     ObjectReader reader = mapper.reader(String.class); [EOL]     str = reader.readValue("null"); [EOL]     assertNotNull(str); [EOL]     assertEquals("funny", str); [EOL] }
public void testCustomRootNulls() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addDeserializer(String.class, new FunnyNullDeserializer()); [EOL]     mapper.registerModule(module); [EOL]     String str = mapper.readValue("null", String.class); [EOL]     assertNotNull(str); [EOL]     assertEquals("funny", str); [EOL]     ObjectReader reader = mapper.reader(String.class); [EOL]     str = reader.readValue("null"); [EOL]     assertNotNull(str); [EOL]     assertEquals("funny", str); [EOL] }
public void testCustomRootNulls() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addDeserializer(String.class, new FunnyNullDeserializer()); [EOL]     mapper.registerModule(module); [EOL]     String str = mapper.readValue("null", String.class); [EOL]     assertNotNull(str); [EOL]     assertEquals("funny", str); [EOL]     ObjectReader reader = mapper.reader(String.class); [EOL]     str = reader.readValue("null"); [EOL]     assertNotNull(str); [EOL]     assertEquals("funny", str); [EOL] }
public void testCustomRootNulls() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addDeserializer(String.class, new FunnyNullDeserializer()); [EOL]     mapper.registerModule(module); [EOL]     String str = mapper.readValue("null", String.class); [EOL]     assertNotNull(str); [EOL]     assertEquals("funny", str); [EOL]     ObjectReader reader = mapper.reader(String.class); [EOL]     str = reader.readValue("null"); [EOL]     assertNotNull(str); [EOL]     assertEquals("funny", str); [EOL] }
public void testNonRootMapsWithObjectReader() throws Exception { [EOL]     String JSON = "[{ \"hi\": \"ho\", \"neighbor\": \"Joe\" },\n" + "{\"boy\": \"howdy\", \"huh\": \"what\"}]"; [EOL]     final MappingIterator<Map<String, Object>> iterator = MAPPER.reader().withType(new TypeReference<Map<String, Object>>() { [EOL]     }).readValues(JSON); [EOL]     Map<String, Object> map; [EOL]     assertTrue(iterator.hasNext()); [EOL]     map = iterator.nextValue(); [EOL]     assertEquals(2, map.size()); [EOL]     assertTrue(iterator.hasNext()); [EOL]     map = iterator.nextValue(); [EOL]     assertEquals(2, map.size()); [EOL]     assertFalse(iterator.hasNext()); [EOL] }
public void testSimpleWithJSON() throws Exception { [EOL]     ObjectReader detecting = READER.withType(POJO.class); [EOL]     detecting = detecting.withFormatDetection(detecting); [EOL]     POJO pojo = detecting.readValue(utf8Bytes("{\"x\":1}")); [EOL]     assertNotNull(pojo); [EOL]     assertEquals(1, pojo.x); [EOL] }
public void testSimpleWithJSON() throws Exception { [EOL]     ObjectReader detecting = READER.withType(POJO.class); [EOL]     detecting = detecting.withFormatDetection(detecting); [EOL]     POJO pojo = detecting.readValue(utf8Bytes("{\"x\":1}")); [EOL]     assertNotNull(pojo); [EOL]     assertEquals(1, pojo.x); [EOL] }
public void testEmptyCollection() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(SerializationFeature.INDENT_OUTPUT, true); [EOL]     List<User> friends = new ArrayList<User>(); [EOL]     friends.add(new DefaultUser("Joe Hildebrandt", null)); [EOL]     friends.add(new DefaultEmployee("Richard Nasr", null, "MDA")); [EOL]     User user = new DefaultEmployee("John Vanspronssen", friends, "MDA"); [EOL]     String json = mapper.writeValueAsString(user); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(DefaultEmployee.class); [EOL]     mapper.registerSubtypes(DefaultUser.class); [EOL]     User result = mapper.readValue(json, User.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(DefaultEmployee.class, result.getClass()); [EOL]     friends = result.getFriends(); [EOL]     assertEquals(2, friends.size()); [EOL]     assertEquals(DefaultUser.class, friends.get(0).getClass()); [EOL]     assertEquals(DefaultEmployee.class, friends.get(1).getClass()); [EOL] }
public void testEmptyCollection() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(SerializationFeature.INDENT_OUTPUT, true); [EOL]     List<User> friends = new ArrayList<User>(); [EOL]     friends.add(new DefaultUser("Joe Hildebrandt", null)); [EOL]     friends.add(new DefaultEmployee("Richard Nasr", null, "MDA")); [EOL]     User user = new DefaultEmployee("John Vanspronssen", friends, "MDA"); [EOL]     String json = mapper.writeValueAsString(user); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(DefaultEmployee.class); [EOL]     mapper.registerSubtypes(DefaultUser.class); [EOL]     User result = mapper.readValue(json, User.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(DefaultEmployee.class, result.getClass()); [EOL]     friends = result.getFriends(); [EOL]     assertEquals(2, friends.size()); [EOL]     assertEquals(DefaultUser.class, friends.get(0).getClass()); [EOL]     assertEquals(DefaultEmployee.class, friends.get(1).getClass()); [EOL] }
public void testEmptyCollection() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(SerializationFeature.INDENT_OUTPUT, true); [EOL]     List<User> friends = new ArrayList<User>(); [EOL]     friends.add(new DefaultUser("Joe Hildebrandt", null)); [EOL]     friends.add(new DefaultEmployee("Richard Nasr", null, "MDA")); [EOL]     User user = new DefaultEmployee("John Vanspronssen", friends, "MDA"); [EOL]     String json = mapper.writeValueAsString(user); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(DefaultEmployee.class); [EOL]     mapper.registerSubtypes(DefaultUser.class); [EOL]     User result = mapper.readValue(json, User.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(DefaultEmployee.class, result.getClass()); [EOL]     friends = result.getFriends(); [EOL]     assertEquals(2, friends.size()); [EOL]     assertEquals(DefaultUser.class, friends.get(0).getClass()); [EOL]     assertEquals(DefaultEmployee.class, friends.get(1).getClass()); [EOL] }
public void testEmptyCollection() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(SerializationFeature.INDENT_OUTPUT, true); [EOL]     List<User> friends = new ArrayList<User>(); [EOL]     friends.add(new DefaultUser("Joe Hildebrandt", null)); [EOL]     friends.add(new DefaultEmployee("Richard Nasr", null, "MDA")); [EOL]     User user = new DefaultEmployee("John Vanspronssen", friends, "MDA"); [EOL]     String json = mapper.writeValueAsString(user); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(DefaultEmployee.class); [EOL]     mapper.registerSubtypes(DefaultUser.class); [EOL]     User result = mapper.readValue(json, User.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(DefaultEmployee.class, result.getClass()); [EOL]     friends = result.getFriends(); [EOL]     assertEquals(2, friends.size()); [EOL]     assertEquals(DefaultUser.class, friends.get(0).getClass()); [EOL]     assertEquals(DefaultEmployee.class, friends.get(1).getClass()); [EOL] }
public void testEmptyCollection() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(SerializationFeature.INDENT_OUTPUT, true); [EOL]     List<User> friends = new ArrayList<User>(); [EOL]     friends.add(new DefaultUser("Joe Hildebrandt", null)); [EOL]     friends.add(new DefaultEmployee("Richard Nasr", null, "MDA")); [EOL]     User user = new DefaultEmployee("John Vanspronssen", friends, "MDA"); [EOL]     String json = mapper.writeValueAsString(user); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(DefaultEmployee.class); [EOL]     mapper.registerSubtypes(DefaultUser.class); [EOL]     User result = mapper.readValue(json, User.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(DefaultEmployee.class, result.getClass()); [EOL]     friends = result.getFriends(); [EOL]     assertEquals(2, friends.size()); [EOL]     assertEquals(DefaultUser.class, friends.get(0).getClass()); [EOL]     assertEquals(DefaultEmployee.class, friends.get(1).getClass()); [EOL] }
public void testEmptyCollection() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(SerializationFeature.INDENT_OUTPUT, true); [EOL]     List<User> friends = new ArrayList<User>(); [EOL]     friends.add(new DefaultUser("Joe Hildebrandt", null)); [EOL]     friends.add(new DefaultEmployee("Richard Nasr", null, "MDA")); [EOL]     User user = new DefaultEmployee("John Vanspronssen", friends, "MDA"); [EOL]     String json = mapper.writeValueAsString(user); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(DefaultEmployee.class); [EOL]     mapper.registerSubtypes(DefaultUser.class); [EOL]     User result = mapper.readValue(json, User.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(DefaultEmployee.class, result.getClass()); [EOL]     friends = result.getFriends(); [EOL]     assertEquals(2, friends.size()); [EOL]     assertEquals(DefaultUser.class, friends.get(0).getClass()); [EOL]     assertEquals(DefaultEmployee.class, friends.get(1).getClass()); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testSuperClass() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SubType bean = new SubType(); [EOL]     Map<String, Object> result = writeAndMap(mapper, bean); [EOL]     assertEquals(4, result.size()); [EOL]     assertEquals("a", result.get("a")); [EOL]     assertEquals(Integer.valueOf(3), result.get("b")); [EOL]     assertEquals("x", result.get("a2")); [EOL]     assertEquals(Boolean.TRUE, result.get("b2")); [EOL]     ObjectWriter w = mapper.writerWithType(BaseType.class); [EOL]     String json = w.writeValueAsString(bean); [EOL]     result = (Map<String, Object>) mapper.readValue(json, Map.class); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("a", result.get("a")); [EOL]     assertEquals(Integer.valueOf(3), result.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testSuperClass() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SubType bean = new SubType(); [EOL]     Map<String, Object> result = writeAndMap(mapper, bean); [EOL]     assertEquals(4, result.size()); [EOL]     assertEquals("a", result.get("a")); [EOL]     assertEquals(Integer.valueOf(3), result.get("b")); [EOL]     assertEquals("x", result.get("a2")); [EOL]     assertEquals(Boolean.TRUE, result.get("b2")); [EOL]     ObjectWriter w = mapper.writerWithType(BaseType.class); [EOL]     String json = w.writeValueAsString(bean); [EOL]     result = (Map<String, Object>) mapper.readValue(json, Map.class); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("a", result.get("a")); [EOL]     assertEquals(Integer.valueOf(3), result.get("b")); [EOL] }
public void testFlushingNotAutomatic() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(SerializationFeature.FLUSH_AFTER_WRITE_VALUE, false); [EOL]     StringWriter sw = new StringWriter(); [EOL]     JsonGenerator jgen = mapper.getFactory().createGenerator(sw); [EOL]     mapper.writeValue(jgen, Integer.valueOf(13)); [EOL]     assertEquals("", sw.toString()); [EOL]     jgen.flush(); [EOL]     assertEquals("13", sw.toString()); [EOL]     jgen.close(); [EOL]     sw = new StringWriter(); [EOL]     jgen = mapper.getFactory().createGenerator(sw); [EOL]     ObjectWriter ow = mapper.writer(); [EOL]     ow.writeValue(jgen, Integer.valueOf(99)); [EOL]     assertEquals("", sw.toString()); [EOL]     jgen.flush(); [EOL]     assertEquals("99", sw.toString()); [EOL]     jgen.close(); [EOL] }
public void testFlushingNotAutomatic() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(SerializationFeature.FLUSH_AFTER_WRITE_VALUE, false); [EOL]     StringWriter sw = new StringWriter(); [EOL]     JsonGenerator jgen = mapper.getFactory().createGenerator(sw); [EOL]     mapper.writeValue(jgen, Integer.valueOf(13)); [EOL]     assertEquals("", sw.toString()); [EOL]     jgen.flush(); [EOL]     assertEquals("13", sw.toString()); [EOL]     jgen.close(); [EOL]     sw = new StringWriter(); [EOL]     jgen = mapper.getFactory().createGenerator(sw); [EOL]     ObjectWriter ow = mapper.writer(); [EOL]     ow.writeValue(jgen, Integer.valueOf(99)); [EOL]     assertEquals("", sw.toString()); [EOL]     jgen.flush(); [EOL]     assertEquals("99", sw.toString()); [EOL]     jgen.close(); [EOL] }
public void testFlushingNotAutomatic() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(SerializationFeature.FLUSH_AFTER_WRITE_VALUE, false); [EOL]     StringWriter sw = new StringWriter(); [EOL]     JsonGenerator jgen = mapper.getFactory().createGenerator(sw); [EOL]     mapper.writeValue(jgen, Integer.valueOf(13)); [EOL]     assertEquals("", sw.toString()); [EOL]     jgen.flush(); [EOL]     assertEquals("13", sw.toString()); [EOL]     jgen.close(); [EOL]     sw = new StringWriter(); [EOL]     jgen = mapper.getFactory().createGenerator(sw); [EOL]     ObjectWriter ow = mapper.writer(); [EOL]     ow.writeValue(jgen, Integer.valueOf(99)); [EOL]     assertEquals("", sw.toString()); [EOL]     jgen.flush(); [EOL]     assertEquals("99", sw.toString()); [EOL]     jgen.close(); [EOL] }
public void testFlushingNotAutomatic() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(SerializationFeature.FLUSH_AFTER_WRITE_VALUE, false); [EOL]     StringWriter sw = new StringWriter(); [EOL]     JsonGenerator jgen = mapper.getFactory().createGenerator(sw); [EOL]     mapper.writeValue(jgen, Integer.valueOf(13)); [EOL]     assertEquals("", sw.toString()); [EOL]     jgen.flush(); [EOL]     assertEquals("13", sw.toString()); [EOL]     jgen.close(); [EOL]     sw = new StringWriter(); [EOL]     jgen = mapper.getFactory().createGenerator(sw); [EOL]     ObjectWriter ow = mapper.writer(); [EOL]     ow.writeValue(jgen, Integer.valueOf(99)); [EOL]     assertEquals("", sw.toString()); [EOL]     jgen.flush(); [EOL]     assertEquals("99", sw.toString()); [EOL]     jgen.close(); [EOL] }
public void testFlushingNotAutomatic() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(SerializationFeature.FLUSH_AFTER_WRITE_VALUE, false); [EOL]     StringWriter sw = new StringWriter(); [EOL]     JsonGenerator jgen = mapper.getFactory().createGenerator(sw); [EOL]     mapper.writeValue(jgen, Integer.valueOf(13)); [EOL]     assertEquals("", sw.toString()); [EOL]     jgen.flush(); [EOL]     assertEquals("13", sw.toString()); [EOL]     jgen.close(); [EOL]     sw = new StringWriter(); [EOL]     jgen = mapper.getFactory().createGenerator(sw); [EOL]     ObjectWriter ow = mapper.writer(); [EOL]     ow.writeValue(jgen, Integer.valueOf(99)); [EOL]     assertEquals("", sw.toString()); [EOL]     jgen.flush(); [EOL]     assertEquals("99", sw.toString()); [EOL]     jgen.close(); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testSuperClass() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SubType bean = new SubType(); [EOL]     Map<String, Object> result = writeAndMap(mapper, bean); [EOL]     assertEquals(4, result.size()); [EOL]     assertEquals("a", result.get("a")); [EOL]     assertEquals(Integer.valueOf(3), result.get("b")); [EOL]     assertEquals("x", result.get("a2")); [EOL]     assertEquals(Boolean.TRUE, result.get("b2")); [EOL]     ObjectWriter w = mapper.writerWithType(BaseType.class); [EOL]     String json = w.writeValueAsString(bean); [EOL]     result = (Map<String, Object>) mapper.readValue(json, Map.class); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("a", result.get("a")); [EOL]     assertEquals(Integer.valueOf(3), result.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testSuperClass() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SubType bean = new SubType(); [EOL]     Map<String, Object> result = writeAndMap(mapper, bean); [EOL]     assertEquals(4, result.size()); [EOL]     assertEquals("a", result.get("a")); [EOL]     assertEquals(Integer.valueOf(3), result.get("b")); [EOL]     assertEquals("x", result.get("a2")); [EOL]     assertEquals(Boolean.TRUE, result.get("b2")); [EOL]     ObjectWriter w = mapper.writerWithType(BaseType.class); [EOL]     String json = w.writeValueAsString(bean); [EOL]     result = (Map<String, Object>) mapper.readValue(json, Map.class); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("a", result.get("a")); [EOL]     assertEquals(Integer.valueOf(3), result.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testSuperClass() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SubType bean = new SubType(); [EOL]     Map<String, Object> result = writeAndMap(mapper, bean); [EOL]     assertEquals(4, result.size()); [EOL]     assertEquals("a", result.get("a")); [EOL]     assertEquals(Integer.valueOf(3), result.get("b")); [EOL]     assertEquals("x", result.get("a2")); [EOL]     assertEquals(Boolean.TRUE, result.get("b2")); [EOL]     ObjectWriter w = mapper.writerWithType(BaseType.class); [EOL]     String json = w.writeValueAsString(bean); [EOL]     result = (Map<String, Object>) mapper.readValue(json, Map.class); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("a", result.get("a")); [EOL]     assertEquals(Integer.valueOf(3), result.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testSuperClass() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SubType bean = new SubType(); [EOL]     Map<String, Object> result = writeAndMap(mapper, bean); [EOL]     assertEquals(4, result.size()); [EOL]     assertEquals("a", result.get("a")); [EOL]     assertEquals(Integer.valueOf(3), result.get("b")); [EOL]     assertEquals("x", result.get("a2")); [EOL]     assertEquals(Boolean.TRUE, result.get("b2")); [EOL]     ObjectWriter w = mapper.writerWithType(BaseType.class); [EOL]     String json = w.writeValueAsString(bean); [EOL]     result = (Map<String, Object>) mapper.readValue(json, Map.class); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("a", result.get("a")); [EOL]     assertEquals(Integer.valueOf(3), result.get("b")); [EOL] }
public void testParser() throws Exception { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     n.add(123); [EOL]     TreeTraversingParser p = new TreeTraversingParser(n, null); [EOL]     p.setCodec(null); [EOL]     assertNull(p.getCodec()); [EOL]     assertNotNull(p.getParsingContext()); [EOL]     assertNotNull(p.getTokenLocation()); [EOL]     assertNotNull(p.getCurrentLocation()); [EOL]     assertNull(p.getEmbeddedObject()); [EOL]     assertNull(p.currentNode()); [EOL]     assertToken(JsonToken.START_ARRAY, p.nextToken()); [EOL]     p.skipChildren(); [EOL]     assertToken(JsonToken.END_ARRAY, p.getCurrentToken()); [EOL]     p.close(); [EOL]     p = new TreeTraversingParser(n, null); [EOL]     p.nextToken(); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, p.getNumberType()); [EOL]     p.close(); [EOL] }
public void testParser() throws Exception { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     n.add(123); [EOL]     TreeTraversingParser p = new TreeTraversingParser(n, null); [EOL]     p.setCodec(null); [EOL]     assertNull(p.getCodec()); [EOL]     assertNotNull(p.getParsingContext()); [EOL]     assertNotNull(p.getTokenLocation()); [EOL]     assertNotNull(p.getCurrentLocation()); [EOL]     assertNull(p.getEmbeddedObject()); [EOL]     assertNull(p.currentNode()); [EOL]     assertToken(JsonToken.START_ARRAY, p.nextToken()); [EOL]     p.skipChildren(); [EOL]     assertToken(JsonToken.END_ARRAY, p.getCurrentToken()); [EOL]     p.close(); [EOL]     p = new TreeTraversingParser(n, null); [EOL]     p.nextToken(); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, p.getNumberType()); [EOL]     p.close(); [EOL] }
public void testWithArraySimple() { [EOL]     ArrayNode root = mapper.createArrayNode(); [EOL]     root.add("a"); [EOL]     assertEquals(1, root.size()); [EOL]     ArrayNode copy = root.deepCopy(); [EOL]     assertEquals(1, copy.size()); [EOL]     root.add(7); [EOL]     assertEquals(2, root.size()); [EOL]     assertEquals(1, copy.size()); [EOL]     copy.add(3); [EOL]     assertEquals(2, root.size()); [EOL]     assertEquals(2, copy.size()); [EOL] }
public void testWithArraySimple() { [EOL]     ArrayNode root = mapper.createArrayNode(); [EOL]     root.add("a"); [EOL]     assertEquals(1, root.size()); [EOL]     ArrayNode copy = root.deepCopy(); [EOL]     assertEquals(1, copy.size()); [EOL]     root.add(7); [EOL]     assertEquals(2, root.size()); [EOL]     assertEquals(1, copy.size()); [EOL]     copy.add(3); [EOL]     assertEquals(2, root.size()); [EOL]     assertEquals(2, copy.size()); [EOL] }
public void testParser() throws Exception { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     n.add(123); [EOL]     TreeTraversingParser p = new TreeTraversingParser(n, null); [EOL]     p.setCodec(null); [EOL]     assertNull(p.getCodec()); [EOL]     assertNotNull(p.getParsingContext()); [EOL]     assertNotNull(p.getTokenLocation()); [EOL]     assertNotNull(p.getCurrentLocation()); [EOL]     assertNull(p.getEmbeddedObject()); [EOL]     assertNull(p.currentNode()); [EOL]     assertToken(JsonToken.START_ARRAY, p.nextToken()); [EOL]     p.skipChildren(); [EOL]     assertToken(JsonToken.END_ARRAY, p.getCurrentToken()); [EOL]     p.close(); [EOL]     p = new TreeTraversingParser(n, null); [EOL]     p.nextToken(); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, p.getNumberType()); [EOL]     p.close(); [EOL] }
public void testNullChecking() { [EOL]     ArrayNode a1 = JsonNodeFactory.instance.arrayNode(); [EOL]     ArrayNode a2 = JsonNodeFactory.instance.arrayNode(); [EOL]     a1.addAll(a2); [EOL]     assertEquals(0, a1.size()); [EOL]     assertEquals(0, a2.size()); [EOL]     a2.addAll(a1); [EOL]     assertEquals(0, a1.size()); [EOL]     assertEquals(0, a2.size()); [EOL] }
public void testNullChecking() { [EOL]     ArrayNode a1 = JsonNodeFactory.instance.arrayNode(); [EOL]     ArrayNode a2 = JsonNodeFactory.instance.arrayNode(); [EOL]     a1.addAll(a2); [EOL]     assertEquals(0, a1.size()); [EOL]     assertEquals(0, a2.size()); [EOL]     a2.addAll(a1); [EOL]     assertEquals(0, a1.size()); [EOL]     assertEquals(0, a2.size()); [EOL] }
public void testParser() throws Exception { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     n.add(123); [EOL]     TreeTraversingParser p = new TreeTraversingParser(n, null); [EOL]     p.setCodec(null); [EOL]     assertNull(p.getCodec()); [EOL]     assertNotNull(p.getParsingContext()); [EOL]     assertNotNull(p.getTokenLocation()); [EOL]     assertNotNull(p.getCurrentLocation()); [EOL]     assertNull(p.getEmbeddedObject()); [EOL]     assertNull(p.currentNode()); [EOL]     assertToken(JsonToken.START_ARRAY, p.nextToken()); [EOL]     p.skipChildren(); [EOL]     assertToken(JsonToken.END_ARRAY, p.getCurrentToken()); [EOL]     p.close(); [EOL]     p = new TreeTraversingParser(n, null); [EOL]     p.nextToken(); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, p.getNumberType()); [EOL]     p.close(); [EOL] }
public void testParser() throws Exception { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     n.add(123); [EOL]     TreeTraversingParser p = new TreeTraversingParser(n, null); [EOL]     p.setCodec(null); [EOL]     assertNull(p.getCodec()); [EOL]     assertNotNull(p.getParsingContext()); [EOL]     assertNotNull(p.getTokenLocation()); [EOL]     assertNotNull(p.getCurrentLocation()); [EOL]     assertNull(p.getEmbeddedObject()); [EOL]     assertNull(p.currentNode()); [EOL]     assertToken(JsonToken.START_ARRAY, p.nextToken()); [EOL]     p.skipChildren(); [EOL]     assertToken(JsonToken.END_ARRAY, p.getCurrentToken()); [EOL]     p.close(); [EOL]     p = new TreeTraversingParser(n, null); [EOL]     p.nextToken(); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, p.getNumberType()); [EOL]     p.close(); [EOL] }
public void testBasics() throws IOException { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     assertStandardEquals(n); [EOL]     assertFalse(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     TextNode text = TextNode.valueOf("x"); [EOL]     n.add(text); [EOL]     assertEquals(1, n.size()); [EOL]     assertFalse(0 == n.hashCode()); [EOL]     assertTrue(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     assertNull(n.get("x")); [EOL]     assertTrue(n.path("x").isMissingNode()); [EOL]     assertSame(text, n.get(0)); [EOL]     assertFalse(n.has("field")); [EOL]     assertFalse(n.hasNonNull("field")); [EOL]     assertTrue(n.has(0)); [EOL]     assertTrue(n.hasNonNull(0)); [EOL]     assertFalse(n.has(1)); [EOL]     assertFalse(n.hasNonNull(1)); [EOL]     n.add((JsonNode) null); [EOL]     assertEquals(2, n.size()); [EOL]     assertTrue(n.get(1).isNull()); [EOL]     assertTrue(n.has(1)); [EOL]     assertFalse(n.hasNonNull(1)); [EOL]     n.set(1, text); [EOL]     assertSame(text, n.get(1)); [EOL]     n.set(0, null); [EOL]     assertTrue(n.get(0).isNull()); [EOL]     ArrayNode n2 = new ArrayNode(JsonNodeFactory.instance); [EOL]     n2.add("foobar"); [EOL]     assertFalse(n.equals(n2)); [EOL]     n.addAll(n2); [EOL]     assertEquals(3, n.size()); [EOL]     assertFalse(n.get(0).isTextual()); [EOL]     assertNotNull(n.remove(0)); [EOL]     assertEquals(2, n.size()); [EOL]     assertTrue(n.get(0).isTextual()); [EOL]     ArrayList<JsonNode> nodes = new ArrayList<JsonNode>(); [EOL]     nodes.add(text); [EOL]     n.addAll(nodes); [EOL]     assertEquals(3, n.size()); [EOL]     assertNull(n.get(10000)); [EOL]     assertNull(n.remove(-4)); [EOL]     TextNode text2 = TextNode.valueOf("b"); [EOL]     n.insert(0, text2); [EOL]     assertEquals(4, n.size()); [EOL]     assertSame(text2, n.get(0)); [EOL]     assertNotNull(n.addArray()); [EOL]     assertEquals(5, n.size()); [EOL]     n.addPOJO("foo"); [EOL]     assertEquals(6, n.size()); [EOL]     JsonGenerator jg = new MappingJsonFactory().createGenerator(new StringWriter()); [EOL]     n.serialize(jg, null); [EOL]     n.removeAll(); [EOL]     assertEquals(0, n.size()); [EOL] }
public void testBasics() throws IOException { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     assertStandardEquals(n); [EOL]     assertFalse(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     TextNode text = TextNode.valueOf("x"); [EOL]     n.add(text); [EOL]     assertEquals(1, n.size()); [EOL]     assertFalse(0 == n.hashCode()); [EOL]     assertTrue(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     assertNull(n.get("x")); [EOL]     assertTrue(n.path("x").isMissingNode()); [EOL]     assertSame(text, n.get(0)); [EOL]     assertFalse(n.has("field")); [EOL]     assertFalse(n.hasNonNull("field")); [EOL]     assertTrue(n.has(0)); [EOL]     assertTrue(n.hasNonNull(0)); [EOL]     assertFalse(n.has(1)); [EOL]     assertFalse(n.hasNonNull(1)); [EOL]     n.add((JsonNode) null); [EOL]     assertEquals(2, n.size()); [EOL]     assertTrue(n.get(1).isNull()); [EOL]     assertTrue(n.has(1)); [EOL]     assertFalse(n.hasNonNull(1)); [EOL]     n.set(1, text); [EOL]     assertSame(text, n.get(1)); [EOL]     n.set(0, null); [EOL]     assertTrue(n.get(0).isNull()); [EOL]     ArrayNode n2 = new ArrayNode(JsonNodeFactory.instance); [EOL]     n2.add("foobar"); [EOL]     assertFalse(n.equals(n2)); [EOL]     n.addAll(n2); [EOL]     assertEquals(3, n.size()); [EOL]     assertFalse(n.get(0).isTextual()); [EOL]     assertNotNull(n.remove(0)); [EOL]     assertEquals(2, n.size()); [EOL]     assertTrue(n.get(0).isTextual()); [EOL]     ArrayList<JsonNode> nodes = new ArrayList<JsonNode>(); [EOL]     nodes.add(text); [EOL]     n.addAll(nodes); [EOL]     assertEquals(3, n.size()); [EOL]     assertNull(n.get(10000)); [EOL]     assertNull(n.remove(-4)); [EOL]     TextNode text2 = TextNode.valueOf("b"); [EOL]     n.insert(0, text2); [EOL]     assertEquals(4, n.size()); [EOL]     assertSame(text2, n.get(0)); [EOL]     assertNotNull(n.addArray()); [EOL]     assertEquals(5, n.size()); [EOL]     n.addPOJO("foo"); [EOL]     assertEquals(6, n.size()); [EOL]     JsonGenerator jg = new MappingJsonFactory().createGenerator(new StringWriter()); [EOL]     n.serialize(jg, null); [EOL]     n.removeAll(); [EOL]     assertEquals(0, n.size()); [EOL] }
public void testBasics() throws IOException { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     assertStandardEquals(n); [EOL]     assertFalse(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     TextNode text = TextNode.valueOf("x"); [EOL]     n.add(text); [EOL]     assertEquals(1, n.size()); [EOL]     assertFalse(0 == n.hashCode()); [EOL]     assertTrue(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     assertNull(n.get("x")); [EOL]     assertTrue(n.path("x").isMissingNode()); [EOL]     assertSame(text, n.get(0)); [EOL]     assertFalse(n.has("field")); [EOL]     assertFalse(n.hasNonNull("field")); [EOL]     assertTrue(n.has(0)); [EOL]     assertTrue(n.hasNonNull(0)); [EOL]     assertFalse(n.has(1)); [EOL]     assertFalse(n.hasNonNull(1)); [EOL]     n.add((JsonNode) null); [EOL]     assertEquals(2, n.size()); [EOL]     assertTrue(n.get(1).isNull()); [EOL]     assertTrue(n.has(1)); [EOL]     assertFalse(n.hasNonNull(1)); [EOL]     n.set(1, text); [EOL]     assertSame(text, n.get(1)); [EOL]     n.set(0, null); [EOL]     assertTrue(n.get(0).isNull()); [EOL]     ArrayNode n2 = new ArrayNode(JsonNodeFactory.instance); [EOL]     n2.add("foobar"); [EOL]     assertFalse(n.equals(n2)); [EOL]     n.addAll(n2); [EOL]     assertEquals(3, n.size()); [EOL]     assertFalse(n.get(0).isTextual()); [EOL]     assertNotNull(n.remove(0)); [EOL]     assertEquals(2, n.size()); [EOL]     assertTrue(n.get(0).isTextual()); [EOL]     ArrayList<JsonNode> nodes = new ArrayList<JsonNode>(); [EOL]     nodes.add(text); [EOL]     n.addAll(nodes); [EOL]     assertEquals(3, n.size()); [EOL]     assertNull(n.get(10000)); [EOL]     assertNull(n.remove(-4)); [EOL]     TextNode text2 = TextNode.valueOf("b"); [EOL]     n.insert(0, text2); [EOL]     assertEquals(4, n.size()); [EOL]     assertSame(text2, n.get(0)); [EOL]     assertNotNull(n.addArray()); [EOL]     assertEquals(5, n.size()); [EOL]     n.addPOJO("foo"); [EOL]     assertEquals(6, n.size()); [EOL]     JsonGenerator jg = new MappingJsonFactory().createGenerator(new StringWriter()); [EOL]     n.serialize(jg, null); [EOL]     n.removeAll(); [EOL]     assertEquals(0, n.size()); [EOL] }
public void testBasics() throws IOException { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     assertStandardEquals(n); [EOL]     assertFalse(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     TextNode text = TextNode.valueOf("x"); [EOL]     n.add(text); [EOL]     assertEquals(1, n.size()); [EOL]     assertFalse(0 == n.hashCode()); [EOL]     assertTrue(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     assertNull(n.get("x")); [EOL]     assertTrue(n.path("x").isMissingNode()); [EOL]     assertSame(text, n.get(0)); [EOL]     assertFalse(n.has("field")); [EOL]     assertFalse(n.hasNonNull("field")); [EOL]     assertTrue(n.has(0)); [EOL]     assertTrue(n.hasNonNull(0)); [EOL]     assertFalse(n.has(1)); [EOL]     assertFalse(n.hasNonNull(1)); [EOL]     n.add((JsonNode) null); [EOL]     assertEquals(2, n.size()); [EOL]     assertTrue(n.get(1).isNull()); [EOL]     assertTrue(n.has(1)); [EOL]     assertFalse(n.hasNonNull(1)); [EOL]     n.set(1, text); [EOL]     assertSame(text, n.get(1)); [EOL]     n.set(0, null); [EOL]     assertTrue(n.get(0).isNull()); [EOL]     ArrayNode n2 = new ArrayNode(JsonNodeFactory.instance); [EOL]     n2.add("foobar"); [EOL]     assertFalse(n.equals(n2)); [EOL]     n.addAll(n2); [EOL]     assertEquals(3, n.size()); [EOL]     assertFalse(n.get(0).isTextual()); [EOL]     assertNotNull(n.remove(0)); [EOL]     assertEquals(2, n.size()); [EOL]     assertTrue(n.get(0).isTextual()); [EOL]     ArrayList<JsonNode> nodes = new ArrayList<JsonNode>(); [EOL]     nodes.add(text); [EOL]     n.addAll(nodes); [EOL]     assertEquals(3, n.size()); [EOL]     assertNull(n.get(10000)); [EOL]     assertNull(n.remove(-4)); [EOL]     TextNode text2 = TextNode.valueOf("b"); [EOL]     n.insert(0, text2); [EOL]     assertEquals(4, n.size()); [EOL]     assertSame(text2, n.get(0)); [EOL]     assertNotNull(n.addArray()); [EOL]     assertEquals(5, n.size()); [EOL]     n.addPOJO("foo"); [EOL]     assertEquals(6, n.size()); [EOL]     JsonGenerator jg = new MappingJsonFactory().createGenerator(new StringWriter()); [EOL]     n.serialize(jg, null); [EOL]     n.removeAll(); [EOL]     assertEquals(0, n.size()); [EOL] }
public void testBasics() throws IOException { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     assertStandardEquals(n); [EOL]     assertFalse(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     TextNode text = TextNode.valueOf("x"); [EOL]     n.add(text); [EOL]     assertEquals(1, n.size()); [EOL]     assertFalse(0 == n.hashCode()); [EOL]     assertTrue(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     assertNull(n.get("x")); [EOL]     assertTrue(n.path("x").isMissingNode()); [EOL]     assertSame(text, n.get(0)); [EOL]     assertFalse(n.has("field")); [EOL]     assertFalse(n.hasNonNull("field")); [EOL]     assertTrue(n.has(0)); [EOL]     assertTrue(n.hasNonNull(0)); [EOL]     assertFalse(n.has(1)); [EOL]     assertFalse(n.hasNonNull(1)); [EOL]     n.add((JsonNode) null); [EOL]     assertEquals(2, n.size()); [EOL]     assertTrue(n.get(1).isNull()); [EOL]     assertTrue(n.has(1)); [EOL]     assertFalse(n.hasNonNull(1)); [EOL]     n.set(1, text); [EOL]     assertSame(text, n.get(1)); [EOL]     n.set(0, null); [EOL]     assertTrue(n.get(0).isNull()); [EOL]     ArrayNode n2 = new ArrayNode(JsonNodeFactory.instance); [EOL]     n2.add("foobar"); [EOL]     assertFalse(n.equals(n2)); [EOL]     n.addAll(n2); [EOL]     assertEquals(3, n.size()); [EOL]     assertFalse(n.get(0).isTextual()); [EOL]     assertNotNull(n.remove(0)); [EOL]     assertEquals(2, n.size()); [EOL]     assertTrue(n.get(0).isTextual()); [EOL]     ArrayList<JsonNode> nodes = new ArrayList<JsonNode>(); [EOL]     nodes.add(text); [EOL]     n.addAll(nodes); [EOL]     assertEquals(3, n.size()); [EOL]     assertNull(n.get(10000)); [EOL]     assertNull(n.remove(-4)); [EOL]     TextNode text2 = TextNode.valueOf("b"); [EOL]     n.insert(0, text2); [EOL]     assertEquals(4, n.size()); [EOL]     assertSame(text2, n.get(0)); [EOL]     assertNotNull(n.addArray()); [EOL]     assertEquals(5, n.size()); [EOL]     n.addPOJO("foo"); [EOL]     assertEquals(6, n.size()); [EOL]     JsonGenerator jg = new MappingJsonFactory().createGenerator(new StringWriter()); [EOL]     n.serialize(jg, null); [EOL]     n.removeAll(); [EOL]     assertEquals(0, n.size()); [EOL] }
public void testBasics() throws IOException { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     assertStandardEquals(n); [EOL]     assertFalse(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     TextNode text = TextNode.valueOf("x"); [EOL]     n.add(text); [EOL]     assertEquals(1, n.size()); [EOL]     assertFalse(0 == n.hashCode()); [EOL]     assertTrue(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     assertNull(n.get("x")); [EOL]     assertTrue(n.path("x").isMissingNode()); [EOL]     assertSame(text, n.get(0)); [EOL]     assertFalse(n.has("field")); [EOL]     assertFalse(n.hasNonNull("field")); [EOL]     assertTrue(n.has(0)); [EOL]     assertTrue(n.hasNonNull(0)); [EOL]     assertFalse(n.has(1)); [EOL]     assertFalse(n.hasNonNull(1)); [EOL]     n.add((JsonNode) null); [EOL]     assertEquals(2, n.size()); [EOL]     assertTrue(n.get(1).isNull()); [EOL]     assertTrue(n.has(1)); [EOL]     assertFalse(n.hasNonNull(1)); [EOL]     n.set(1, text); [EOL]     assertSame(text, n.get(1)); [EOL]     n.set(0, null); [EOL]     assertTrue(n.get(0).isNull()); [EOL]     ArrayNode n2 = new ArrayNode(JsonNodeFactory.instance); [EOL]     n2.add("foobar"); [EOL]     assertFalse(n.equals(n2)); [EOL]     n.addAll(n2); [EOL]     assertEquals(3, n.size()); [EOL]     assertFalse(n.get(0).isTextual()); [EOL]     assertNotNull(n.remove(0)); [EOL]     assertEquals(2, n.size()); [EOL]     assertTrue(n.get(0).isTextual()); [EOL]     ArrayList<JsonNode> nodes = new ArrayList<JsonNode>(); [EOL]     nodes.add(text); [EOL]     n.addAll(nodes); [EOL]     assertEquals(3, n.size()); [EOL]     assertNull(n.get(10000)); [EOL]     assertNull(n.remove(-4)); [EOL]     TextNode text2 = TextNode.valueOf("b"); [EOL]     n.insert(0, text2); [EOL]     assertEquals(4, n.size()); [EOL]     assertSame(text2, n.get(0)); [EOL]     assertNotNull(n.addArray()); [EOL]     assertEquals(5, n.size()); [EOL]     n.addPOJO("foo"); [EOL]     assertEquals(6, n.size()); [EOL]     JsonGenerator jg = new MappingJsonFactory().createGenerator(new StringWriter()); [EOL]     n.serialize(jg, null); [EOL]     n.removeAll(); [EOL]     assertEquals(0, n.size()); [EOL] }
public void testBasics() throws IOException { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     assertStandardEquals(n); [EOL]     assertFalse(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     TextNode text = TextNode.valueOf("x"); [EOL]     n.add(text); [EOL]     assertEquals(1, n.size()); [EOL]     assertFalse(0 == n.hashCode()); [EOL]     assertTrue(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     assertNull(n.get("x")); [EOL]     assertTrue(n.path("x").isMissingNode()); [EOL]     assertSame(text, n.get(0)); [EOL]     assertFalse(n.has("field")); [EOL]     assertFalse(n.hasNonNull("field")); [EOL]     assertTrue(n.has(0)); [EOL]     assertTrue(n.hasNonNull(0)); [EOL]     assertFalse(n.has(1)); [EOL]     assertFalse(n.hasNonNull(1)); [EOL]     n.add((JsonNode) null); [EOL]     assertEquals(2, n.size()); [EOL]     assertTrue(n.get(1).isNull()); [EOL]     assertTrue(n.has(1)); [EOL]     assertFalse(n.hasNonNull(1)); [EOL]     n.set(1, text); [EOL]     assertSame(text, n.get(1)); [EOL]     n.set(0, null); [EOL]     assertTrue(n.get(0).isNull()); [EOL]     ArrayNode n2 = new ArrayNode(JsonNodeFactory.instance); [EOL]     n2.add("foobar"); [EOL]     assertFalse(n.equals(n2)); [EOL]     n.addAll(n2); [EOL]     assertEquals(3, n.size()); [EOL]     assertFalse(n.get(0).isTextual()); [EOL]     assertNotNull(n.remove(0)); [EOL]     assertEquals(2, n.size()); [EOL]     assertTrue(n.get(0).isTextual()); [EOL]     ArrayList<JsonNode> nodes = new ArrayList<JsonNode>(); [EOL]     nodes.add(text); [EOL]     n.addAll(nodes); [EOL]     assertEquals(3, n.size()); [EOL]     assertNull(n.get(10000)); [EOL]     assertNull(n.remove(-4)); [EOL]     TextNode text2 = TextNode.valueOf("b"); [EOL]     n.insert(0, text2); [EOL]     assertEquals(4, n.size()); [EOL]     assertSame(text2, n.get(0)); [EOL]     assertNotNull(n.addArray()); [EOL]     assertEquals(5, n.size()); [EOL]     n.addPOJO("foo"); [EOL]     assertEquals(6, n.size()); [EOL]     JsonGenerator jg = new MappingJsonFactory().createGenerator(new StringWriter()); [EOL]     n.serialize(jg, null); [EOL]     n.removeAll(); [EOL]     assertEquals(0, n.size()); [EOL] }
public void testMatchingMultiple() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     List<JsonNode> nodes = root.findValues("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertEquals(3, nodes.get(0).intValue()); [EOL]     assertEquals(42, nodes.get(1).intValue()); [EOL]     nodes = root.findParents("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertTrue(nodes.get(0).isObject()); [EOL]     assertTrue(nodes.get(1).isObject()); [EOL]     assertEquals(3, nodes.get(0).path("value").intValue()); [EOL]     assertEquals(42, nodes.get(1).path("value").intValue()); [EOL]     List<String> values = root.findValuesAsText("value"); [EOL]     assertEquals(2, values.size()); [EOL]     assertEquals("3", values.get(0)); [EOL]     assertEquals("42", values.get(1)); [EOL] }
public void testMatchingMultiple() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     List<JsonNode> nodes = root.findValues("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertEquals(3, nodes.get(0).intValue()); [EOL]     assertEquals(42, nodes.get(1).intValue()); [EOL]     nodes = root.findParents("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertTrue(nodes.get(0).isObject()); [EOL]     assertTrue(nodes.get(1).isObject()); [EOL]     assertEquals(3, nodes.get(0).path("value").intValue()); [EOL]     assertEquals(42, nodes.get(1).path("value").intValue()); [EOL]     List<String> values = root.findValuesAsText("value"); [EOL]     assertEquals(2, values.size()); [EOL]     assertEquals("3", values.get(0)); [EOL]     assertEquals("42", values.get(1)); [EOL] }
public void testMatchingMultiple() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     List<JsonNode> nodes = root.findValues("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertEquals(3, nodes.get(0).intValue()); [EOL]     assertEquals(42, nodes.get(1).intValue()); [EOL]     nodes = root.findParents("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertTrue(nodes.get(0).isObject()); [EOL]     assertTrue(nodes.get(1).isObject()); [EOL]     assertEquals(3, nodes.get(0).path("value").intValue()); [EOL]     assertEquals(42, nodes.get(1).path("value").intValue()); [EOL]     List<String> values = root.findValuesAsText("value"); [EOL]     assertEquals(2, values.size()); [EOL]     assertEquals("3", values.get(0)); [EOL]     assertEquals("42", values.get(1)); [EOL] }
public void testMatchingMultiple() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     List<JsonNode> nodes = root.findValues("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertEquals(3, nodes.get(0).intValue()); [EOL]     assertEquals(42, nodes.get(1).intValue()); [EOL]     nodes = root.findParents("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertTrue(nodes.get(0).isObject()); [EOL]     assertTrue(nodes.get(1).isObject()); [EOL]     assertEquals(3, nodes.get(0).path("value").intValue()); [EOL]     assertEquals(42, nodes.get(1).path("value").intValue()); [EOL]     List<String> values = root.findValuesAsText("value"); [EOL]     assertEquals(2, values.size()); [EOL]     assertEquals("3", values.get(0)); [EOL]     assertEquals("42", values.get(1)); [EOL] }
public void testMatchingMultiple() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     List<JsonNode> nodes = root.findValues("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertEquals(3, nodes.get(0).intValue()); [EOL]     assertEquals(42, nodes.get(1).intValue()); [EOL]     nodes = root.findParents("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertTrue(nodes.get(0).isObject()); [EOL]     assertTrue(nodes.get(1).isObject()); [EOL]     assertEquals(3, nodes.get(0).path("value").intValue()); [EOL]     assertEquals(42, nodes.get(1).path("value").intValue()); [EOL]     List<String> values = root.findValuesAsText("value"); [EOL]     assertEquals(2, values.size()); [EOL]     assertEquals("3", values.get(0)); [EOL]     assertEquals("42", values.get(1)); [EOL] }
public void testMatchingMultiple() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     List<JsonNode> nodes = root.findValues("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertEquals(3, nodes.get(0).intValue()); [EOL]     assertEquals(42, nodes.get(1).intValue()); [EOL]     nodes = root.findParents("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertTrue(nodes.get(0).isObject()); [EOL]     assertTrue(nodes.get(1).isObject()); [EOL]     assertEquals(3, nodes.get(0).path("value").intValue()); [EOL]     assertEquals(42, nodes.get(1).path("value").intValue()); [EOL]     List<String> values = root.findValuesAsText("value"); [EOL]     assertEquals(2, values.size()); [EOL]     assertEquals("3", values.get(0)); [EOL]     assertEquals("42", values.get(1)); [EOL] }
public void testMatchingMultiple() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     List<JsonNode> nodes = root.findValues("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertEquals(3, nodes.get(0).intValue()); [EOL]     assertEquals(42, nodes.get(1).intValue()); [EOL]     nodes = root.findParents("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertTrue(nodes.get(0).isObject()); [EOL]     assertTrue(nodes.get(1).isObject()); [EOL]     assertEquals(3, nodes.get(0).path("value").intValue()); [EOL]     assertEquals(42, nodes.get(1).path("value").intValue()); [EOL]     List<String> values = root.findValuesAsText("value"); [EOL]     assertEquals(2, values.size()); [EOL]     assertEquals("3", values.get(0)); [EOL]     assertEquals("42", values.get(1)); [EOL] }
public void testMatchingMultiple() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     List<JsonNode> nodes = root.findValues("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertEquals(3, nodes.get(0).intValue()); [EOL]     assertEquals(42, nodes.get(1).intValue()); [EOL]     nodes = root.findParents("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertTrue(nodes.get(0).isObject()); [EOL]     assertTrue(nodes.get(1).isObject()); [EOL]     assertEquals(3, nodes.get(0).path("value").intValue()); [EOL]     assertEquals(42, nodes.get(1).path("value").intValue()); [EOL]     List<String> values = root.findValuesAsText("value"); [EOL]     assertEquals(2, values.size()); [EOL]     assertEquals("3", values.get(0)); [EOL]     assertEquals("42", values.get(1)); [EOL] }
public void testMatchingMultiple() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     List<JsonNode> nodes = root.findValues("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertEquals(3, nodes.get(0).intValue()); [EOL]     assertEquals(42, nodes.get(1).intValue()); [EOL]     nodes = root.findParents("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertTrue(nodes.get(0).isObject()); [EOL]     assertTrue(nodes.get(1).isObject()); [EOL]     assertEquals(3, nodes.get(0).path("value").intValue()); [EOL]     assertEquals(42, nodes.get(1).path("value").intValue()); [EOL]     List<String> values = root.findValuesAsText("value"); [EOL]     assertEquals(2, values.size()); [EOL]     assertEquals("3", values.get(0)); [EOL]     assertEquals("42", values.get(1)); [EOL] }
public void testBasics() throws IOException { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     assertStandardEquals(n); [EOL]     assertFalse(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     TextNode text = TextNode.valueOf("x"); [EOL]     n.add(text); [EOL]     assertEquals(1, n.size()); [EOL]     assertFalse(0 == n.hashCode()); [EOL]     assertTrue(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     assertNull(n.get("x")); [EOL]     assertTrue(n.path("x").isMissingNode()); [EOL]     assertSame(text, n.get(0)); [EOL]     assertFalse(n.has("field")); [EOL]     assertFalse(n.hasNonNull("field")); [EOL]     assertTrue(n.has(0)); [EOL]     assertTrue(n.hasNonNull(0)); [EOL]     assertFalse(n.has(1)); [EOL]     assertFalse(n.hasNonNull(1)); [EOL]     n.add((JsonNode) null); [EOL]     assertEquals(2, n.size()); [EOL]     assertTrue(n.get(1).isNull()); [EOL]     assertTrue(n.has(1)); [EOL]     assertFalse(n.hasNonNull(1)); [EOL]     n.set(1, text); [EOL]     assertSame(text, n.get(1)); [EOL]     n.set(0, null); [EOL]     assertTrue(n.get(0).isNull()); [EOL]     ArrayNode n2 = new ArrayNode(JsonNodeFactory.instance); [EOL]     n2.add("foobar"); [EOL]     assertFalse(n.equals(n2)); [EOL]     n.addAll(n2); [EOL]     assertEquals(3, n.size()); [EOL]     assertFalse(n.get(0).isTextual()); [EOL]     assertNotNull(n.remove(0)); [EOL]     assertEquals(2, n.size()); [EOL]     assertTrue(n.get(0).isTextual()); [EOL]     ArrayList<JsonNode> nodes = new ArrayList<JsonNode>(); [EOL]     nodes.add(text); [EOL]     n.addAll(nodes); [EOL]     assertEquals(3, n.size()); [EOL]     assertNull(n.get(10000)); [EOL]     assertNull(n.remove(-4)); [EOL]     TextNode text2 = TextNode.valueOf("b"); [EOL]     n.insert(0, text2); [EOL]     assertEquals(4, n.size()); [EOL]     assertSame(text2, n.get(0)); [EOL]     assertNotNull(n.addArray()); [EOL]     assertEquals(5, n.size()); [EOL]     n.addPOJO("foo"); [EOL]     assertEquals(6, n.size()); [EOL]     JsonGenerator jg = new MappingJsonFactory().createGenerator(new StringWriter()); [EOL]     n.serialize(jg, null); [EOL]     n.removeAll(); [EOL]     assertEquals(0, n.size()); [EOL] }
public void testBasics() throws IOException { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     assertStandardEquals(n); [EOL]     assertFalse(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     TextNode text = TextNode.valueOf("x"); [EOL]     n.add(text); [EOL]     assertEquals(1, n.size()); [EOL]     assertFalse(0 == n.hashCode()); [EOL]     assertTrue(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     assertNull(n.get("x")); [EOL]     assertTrue(n.path("x").isMissingNode()); [EOL]     assertSame(text, n.get(0)); [EOL]     assertFalse(n.has("field")); [EOL]     assertFalse(n.hasNonNull("field")); [EOL]     assertTrue(n.has(0)); [EOL]     assertTrue(n.hasNonNull(0)); [EOL]     assertFalse(n.has(1)); [EOL]     assertFalse(n.hasNonNull(1)); [EOL]     n.add((JsonNode) null); [EOL]     assertEquals(2, n.size()); [EOL]     assertTrue(n.get(1).isNull()); [EOL]     assertTrue(n.has(1)); [EOL]     assertFalse(n.hasNonNull(1)); [EOL]     n.set(1, text); [EOL]     assertSame(text, n.get(1)); [EOL]     n.set(0, null); [EOL]     assertTrue(n.get(0).isNull()); [EOL]     ArrayNode n2 = new ArrayNode(JsonNodeFactory.instance); [EOL]     n2.add("foobar"); [EOL]     assertFalse(n.equals(n2)); [EOL]     n.addAll(n2); [EOL]     assertEquals(3, n.size()); [EOL]     assertFalse(n.get(0).isTextual()); [EOL]     assertNotNull(n.remove(0)); [EOL]     assertEquals(2, n.size()); [EOL]     assertTrue(n.get(0).isTextual()); [EOL]     ArrayList<JsonNode> nodes = new ArrayList<JsonNode>(); [EOL]     nodes.add(text); [EOL]     n.addAll(nodes); [EOL]     assertEquals(3, n.size()); [EOL]     assertNull(n.get(10000)); [EOL]     assertNull(n.remove(-4)); [EOL]     TextNode text2 = TextNode.valueOf("b"); [EOL]     n.insert(0, text2); [EOL]     assertEquals(4, n.size()); [EOL]     assertSame(text2, n.get(0)); [EOL]     assertNotNull(n.addArray()); [EOL]     assertEquals(5, n.size()); [EOL]     n.addPOJO("foo"); [EOL]     assertEquals(6, n.size()); [EOL]     JsonGenerator jg = new MappingJsonFactory().createGenerator(new StringWriter()); [EOL]     n.serialize(jg, null); [EOL]     n.removeAll(); [EOL]     assertEquals(0, n.size()); [EOL] }
public void testBasics() throws IOException { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     assertStandardEquals(n); [EOL]     assertFalse(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     TextNode text = TextNode.valueOf("x"); [EOL]     n.add(text); [EOL]     assertEquals(1, n.size()); [EOL]     assertFalse(0 == n.hashCode()); [EOL]     assertTrue(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     assertNull(n.get("x")); [EOL]     assertTrue(n.path("x").isMissingNode()); [EOL]     assertSame(text, n.get(0)); [EOL]     assertFalse(n.has("field")); [EOL]     assertFalse(n.hasNonNull("field")); [EOL]     assertTrue(n.has(0)); [EOL]     assertTrue(n.hasNonNull(0)); [EOL]     assertFalse(n.has(1)); [EOL]     assertFalse(n.hasNonNull(1)); [EOL]     n.add((JsonNode) null); [EOL]     assertEquals(2, n.size()); [EOL]     assertTrue(n.get(1).isNull()); [EOL]     assertTrue(n.has(1)); [EOL]     assertFalse(n.hasNonNull(1)); [EOL]     n.set(1, text); [EOL]     assertSame(text, n.get(1)); [EOL]     n.set(0, null); [EOL]     assertTrue(n.get(0).isNull()); [EOL]     ArrayNode n2 = new ArrayNode(JsonNodeFactory.instance); [EOL]     n2.add("foobar"); [EOL]     assertFalse(n.equals(n2)); [EOL]     n.addAll(n2); [EOL]     assertEquals(3, n.size()); [EOL]     assertFalse(n.get(0).isTextual()); [EOL]     assertNotNull(n.remove(0)); [EOL]     assertEquals(2, n.size()); [EOL]     assertTrue(n.get(0).isTextual()); [EOL]     ArrayList<JsonNode> nodes = new ArrayList<JsonNode>(); [EOL]     nodes.add(text); [EOL]     n.addAll(nodes); [EOL]     assertEquals(3, n.size()); [EOL]     assertNull(n.get(10000)); [EOL]     assertNull(n.remove(-4)); [EOL]     TextNode text2 = TextNode.valueOf("b"); [EOL]     n.insert(0, text2); [EOL]     assertEquals(4, n.size()); [EOL]     assertSame(text2, n.get(0)); [EOL]     assertNotNull(n.addArray()); [EOL]     assertEquals(5, n.size()); [EOL]     n.addPOJO("foo"); [EOL]     assertEquals(6, n.size()); [EOL]     JsonGenerator jg = new MappingJsonFactory().createGenerator(new StringWriter()); [EOL]     n.serialize(jg, null); [EOL]     n.removeAll(); [EOL]     assertEquals(0, n.size()); [EOL] }
public void testArrayNodeEquality() { [EOL]     ArrayNode n1 = new ArrayNode(null); [EOL]     ArrayNode n2 = new ArrayNode(null); [EOL]     assertTrue(n1.equals(n2)); [EOL]     assertTrue(n2.equals(n1)); [EOL]     n1.add(TextNode.valueOf("Test")); [EOL]     assertFalse(n1.equals(n2)); [EOL]     assertFalse(n2.equals(n1)); [EOL]     n2.add(TextNode.valueOf("Test")); [EOL]     assertTrue(n1.equals(n2)); [EOL]     assertTrue(n2.equals(n1)); [EOL] }
public void testArrayNodeEquality() { [EOL]     ArrayNode n1 = new ArrayNode(null); [EOL]     ArrayNode n2 = new ArrayNode(null); [EOL]     assertTrue(n1.equals(n2)); [EOL]     assertTrue(n2.equals(n1)); [EOL]     n1.add(TextNode.valueOf("Test")); [EOL]     assertFalse(n1.equals(n2)); [EOL]     assertFalse(n2.equals(n1)); [EOL]     n2.add(TextNode.valueOf("Test")); [EOL]     assertTrue(n1.equals(n2)); [EOL]     assertTrue(n2.equals(n1)); [EOL] }
public void testNullChecking() { [EOL]     ArrayNode a1 = JsonNodeFactory.instance.arrayNode(); [EOL]     ArrayNode a2 = JsonNodeFactory.instance.arrayNode(); [EOL]     a1.addAll(a2); [EOL]     assertEquals(0, a1.size()); [EOL]     assertEquals(0, a2.size()); [EOL]     a2.addAll(a1); [EOL]     assertEquals(0, a1.size()); [EOL]     assertEquals(0, a2.size()); [EOL] }
public void testNullChecking() { [EOL]     ArrayNode a1 = JsonNodeFactory.instance.arrayNode(); [EOL]     ArrayNode a2 = JsonNodeFactory.instance.arrayNode(); [EOL]     a1.addAll(a2); [EOL]     assertEquals(0, a1.size()); [EOL]     assertEquals(0, a2.size()); [EOL]     a2.addAll(a1); [EOL]     assertEquals(0, a1.size()); [EOL]     assertEquals(0, a2.size()); [EOL] }
public void testNullChecking() { [EOL]     ArrayNode a1 = JsonNodeFactory.instance.arrayNode(); [EOL]     ArrayNode a2 = JsonNodeFactory.instance.arrayNode(); [EOL]     a1.addAll(a2); [EOL]     assertEquals(0, a1.size()); [EOL]     assertEquals(0, a2.size()); [EOL]     a2.addAll(a1); [EOL]     assertEquals(0, a1.size()); [EOL]     assertEquals(0, a2.size()); [EOL] }
public void testBasics() throws IOException { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     assertStandardEquals(n); [EOL]     assertFalse(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     TextNode text = TextNode.valueOf("x"); [EOL]     n.add(text); [EOL]     assertEquals(1, n.size()); [EOL]     assertFalse(0 == n.hashCode()); [EOL]     assertTrue(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     assertNull(n.get("x")); [EOL]     assertTrue(n.path("x").isMissingNode()); [EOL]     assertSame(text, n.get(0)); [EOL]     assertFalse(n.has("field")); [EOL]     assertFalse(n.hasNonNull("field")); [EOL]     assertTrue(n.has(0)); [EOL]     assertTrue(n.hasNonNull(0)); [EOL]     assertFalse(n.has(1)); [EOL]     assertFalse(n.hasNonNull(1)); [EOL]     n.add((JsonNode) null); [EOL]     assertEquals(2, n.size()); [EOL]     assertTrue(n.get(1).isNull()); [EOL]     assertTrue(n.has(1)); [EOL]     assertFalse(n.hasNonNull(1)); [EOL]     n.set(1, text); [EOL]     assertSame(text, n.get(1)); [EOL]     n.set(0, null); [EOL]     assertTrue(n.get(0).isNull()); [EOL]     ArrayNode n2 = new ArrayNode(JsonNodeFactory.instance); [EOL]     n2.add("foobar"); [EOL]     assertFalse(n.equals(n2)); [EOL]     n.addAll(n2); [EOL]     assertEquals(3, n.size()); [EOL]     assertFalse(n.get(0).isTextual()); [EOL]     assertNotNull(n.remove(0)); [EOL]     assertEquals(2, n.size()); [EOL]     assertTrue(n.get(0).isTextual()); [EOL]     ArrayList<JsonNode> nodes = new ArrayList<JsonNode>(); [EOL]     nodes.add(text); [EOL]     n.addAll(nodes); [EOL]     assertEquals(3, n.size()); [EOL]     assertNull(n.get(10000)); [EOL]     assertNull(n.remove(-4)); [EOL]     TextNode text2 = TextNode.valueOf("b"); [EOL]     n.insert(0, text2); [EOL]     assertEquals(4, n.size()); [EOL]     assertSame(text2, n.get(0)); [EOL]     assertNotNull(n.addArray()); [EOL]     assertEquals(5, n.size()); [EOL]     n.addPOJO("foo"); [EOL]     assertEquals(6, n.size()); [EOL]     JsonGenerator jg = new MappingJsonFactory().createGenerator(new StringWriter()); [EOL]     n.serialize(jg, null); [EOL]     n.removeAll(); [EOL]     assertEquals(0, n.size()); [EOL] }
public void testBasics() throws IOException { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     assertStandardEquals(n); [EOL]     assertFalse(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     TextNode text = TextNode.valueOf("x"); [EOL]     n.add(text); [EOL]     assertEquals(1, n.size()); [EOL]     assertFalse(0 == n.hashCode()); [EOL]     assertTrue(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     assertNull(n.get("x")); [EOL]     assertTrue(n.path("x").isMissingNode()); [EOL]     assertSame(text, n.get(0)); [EOL]     assertFalse(n.has("field")); [EOL]     assertFalse(n.hasNonNull("field")); [EOL]     assertTrue(n.has(0)); [EOL]     assertTrue(n.hasNonNull(0)); [EOL]     assertFalse(n.has(1)); [EOL]     assertFalse(n.hasNonNull(1)); [EOL]     n.add((JsonNode) null); [EOL]     assertEquals(2, n.size()); [EOL]     assertTrue(n.get(1).isNull()); [EOL]     assertTrue(n.has(1)); [EOL]     assertFalse(n.hasNonNull(1)); [EOL]     n.set(1, text); [EOL]     assertSame(text, n.get(1)); [EOL]     n.set(0, null); [EOL]     assertTrue(n.get(0).isNull()); [EOL]     ArrayNode n2 = new ArrayNode(JsonNodeFactory.instance); [EOL]     n2.add("foobar"); [EOL]     assertFalse(n.equals(n2)); [EOL]     n.addAll(n2); [EOL]     assertEquals(3, n.size()); [EOL]     assertFalse(n.get(0).isTextual()); [EOL]     assertNotNull(n.remove(0)); [EOL]     assertEquals(2, n.size()); [EOL]     assertTrue(n.get(0).isTextual()); [EOL]     ArrayList<JsonNode> nodes = new ArrayList<JsonNode>(); [EOL]     nodes.add(text); [EOL]     n.addAll(nodes); [EOL]     assertEquals(3, n.size()); [EOL]     assertNull(n.get(10000)); [EOL]     assertNull(n.remove(-4)); [EOL]     TextNode text2 = TextNode.valueOf("b"); [EOL]     n.insert(0, text2); [EOL]     assertEquals(4, n.size()); [EOL]     assertSame(text2, n.get(0)); [EOL]     assertNotNull(n.addArray()); [EOL]     assertEquals(5, n.size()); [EOL]     n.addPOJO("foo"); [EOL]     assertEquals(6, n.size()); [EOL]     JsonGenerator jg = new MappingJsonFactory().createGenerator(new StringWriter()); [EOL]     n.serialize(jg, null); [EOL]     n.removeAll(); [EOL]     assertEquals(0, n.size()); [EOL] }
public void testBasics() throws IOException { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     assertStandardEquals(n); [EOL]     assertFalse(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     TextNode text = TextNode.valueOf("x"); [EOL]     n.add(text); [EOL]     assertEquals(1, n.size()); [EOL]     assertFalse(0 == n.hashCode()); [EOL]     assertTrue(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     assertNull(n.get("x")); [EOL]     assertTrue(n.path("x").isMissingNode()); [EOL]     assertSame(text, n.get(0)); [EOL]     assertFalse(n.has("field")); [EOL]     assertFalse(n.hasNonNull("field")); [EOL]     assertTrue(n.has(0)); [EOL]     assertTrue(n.hasNonNull(0)); [EOL]     assertFalse(n.has(1)); [EOL]     assertFalse(n.hasNonNull(1)); [EOL]     n.add((JsonNode) null); [EOL]     assertEquals(2, n.size()); [EOL]     assertTrue(n.get(1).isNull()); [EOL]     assertTrue(n.has(1)); [EOL]     assertFalse(n.hasNonNull(1)); [EOL]     n.set(1, text); [EOL]     assertSame(text, n.get(1)); [EOL]     n.set(0, null); [EOL]     assertTrue(n.get(0).isNull()); [EOL]     ArrayNode n2 = new ArrayNode(JsonNodeFactory.instance); [EOL]     n2.add("foobar"); [EOL]     assertFalse(n.equals(n2)); [EOL]     n.addAll(n2); [EOL]     assertEquals(3, n.size()); [EOL]     assertFalse(n.get(0).isTextual()); [EOL]     assertNotNull(n.remove(0)); [EOL]     assertEquals(2, n.size()); [EOL]     assertTrue(n.get(0).isTextual()); [EOL]     ArrayList<JsonNode> nodes = new ArrayList<JsonNode>(); [EOL]     nodes.add(text); [EOL]     n.addAll(nodes); [EOL]     assertEquals(3, n.size()); [EOL]     assertNull(n.get(10000)); [EOL]     assertNull(n.remove(-4)); [EOL]     TextNode text2 = TextNode.valueOf("b"); [EOL]     n.insert(0, text2); [EOL]     assertEquals(4, n.size()); [EOL]     assertSame(text2, n.get(0)); [EOL]     assertNotNull(n.addArray()); [EOL]     assertEquals(5, n.size()); [EOL]     n.addPOJO("foo"); [EOL]     assertEquals(6, n.size()); [EOL]     JsonGenerator jg = new MappingJsonFactory().createGenerator(new StringWriter()); [EOL]     n.serialize(jg, null); [EOL]     n.removeAll(); [EOL]     assertEquals(0, n.size()); [EOL] }
public void testBasics() throws IOException { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     assertStandardEquals(n); [EOL]     assertFalse(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     TextNode text = TextNode.valueOf("x"); [EOL]     n.add(text); [EOL]     assertEquals(1, n.size()); [EOL]     assertFalse(0 == n.hashCode()); [EOL]     assertTrue(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     assertNull(n.get("x")); [EOL]     assertTrue(n.path("x").isMissingNode()); [EOL]     assertSame(text, n.get(0)); [EOL]     assertFalse(n.has("field")); [EOL]     assertFalse(n.hasNonNull("field")); [EOL]     assertTrue(n.has(0)); [EOL]     assertTrue(n.hasNonNull(0)); [EOL]     assertFalse(n.has(1)); [EOL]     assertFalse(n.hasNonNull(1)); [EOL]     n.add((JsonNode) null); [EOL]     assertEquals(2, n.size()); [EOL]     assertTrue(n.get(1).isNull()); [EOL]     assertTrue(n.has(1)); [EOL]     assertFalse(n.hasNonNull(1)); [EOL]     n.set(1, text); [EOL]     assertSame(text, n.get(1)); [EOL]     n.set(0, null); [EOL]     assertTrue(n.get(0).isNull()); [EOL]     ArrayNode n2 = new ArrayNode(JsonNodeFactory.instance); [EOL]     n2.add("foobar"); [EOL]     assertFalse(n.equals(n2)); [EOL]     n.addAll(n2); [EOL]     assertEquals(3, n.size()); [EOL]     assertFalse(n.get(0).isTextual()); [EOL]     assertNotNull(n.remove(0)); [EOL]     assertEquals(2, n.size()); [EOL]     assertTrue(n.get(0).isTextual()); [EOL]     ArrayList<JsonNode> nodes = new ArrayList<JsonNode>(); [EOL]     nodes.add(text); [EOL]     n.addAll(nodes); [EOL]     assertEquals(3, n.size()); [EOL]     assertNull(n.get(10000)); [EOL]     assertNull(n.remove(-4)); [EOL]     TextNode text2 = TextNode.valueOf("b"); [EOL]     n.insert(0, text2); [EOL]     assertEquals(4, n.size()); [EOL]     assertSame(text2, n.get(0)); [EOL]     assertNotNull(n.addArray()); [EOL]     assertEquals(5, n.size()); [EOL]     n.addPOJO("foo"); [EOL]     assertEquals(6, n.size()); [EOL]     JsonGenerator jg = new MappingJsonFactory().createGenerator(new StringWriter()); [EOL]     n.serialize(jg, null); [EOL]     n.removeAll(); [EOL]     assertEquals(0, n.size()); [EOL] }
public void testBasics() throws IOException { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     assertStandardEquals(n); [EOL]     assertFalse(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     TextNode text = TextNode.valueOf("x"); [EOL]     n.add(text); [EOL]     assertEquals(1, n.size()); [EOL]     assertFalse(0 == n.hashCode()); [EOL]     assertTrue(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     assertNull(n.get("x")); [EOL]     assertTrue(n.path("x").isMissingNode()); [EOL]     assertSame(text, n.get(0)); [EOL]     assertFalse(n.has("field")); [EOL]     assertFalse(n.hasNonNull("field")); [EOL]     assertTrue(n.has(0)); [EOL]     assertTrue(n.hasNonNull(0)); [EOL]     assertFalse(n.has(1)); [EOL]     assertFalse(n.hasNonNull(1)); [EOL]     n.add((JsonNode) null); [EOL]     assertEquals(2, n.size()); [EOL]     assertTrue(n.get(1).isNull()); [EOL]     assertTrue(n.has(1)); [EOL]     assertFalse(n.hasNonNull(1)); [EOL]     n.set(1, text); [EOL]     assertSame(text, n.get(1)); [EOL]     n.set(0, null); [EOL]     assertTrue(n.get(0).isNull()); [EOL]     ArrayNode n2 = new ArrayNode(JsonNodeFactory.instance); [EOL]     n2.add("foobar"); [EOL]     assertFalse(n.equals(n2)); [EOL]     n.addAll(n2); [EOL]     assertEquals(3, n.size()); [EOL]     assertFalse(n.get(0).isTextual()); [EOL]     assertNotNull(n.remove(0)); [EOL]     assertEquals(2, n.size()); [EOL]     assertTrue(n.get(0).isTextual()); [EOL]     ArrayList<JsonNode> nodes = new ArrayList<JsonNode>(); [EOL]     nodes.add(text); [EOL]     n.addAll(nodes); [EOL]     assertEquals(3, n.size()); [EOL]     assertNull(n.get(10000)); [EOL]     assertNull(n.remove(-4)); [EOL]     TextNode text2 = TextNode.valueOf("b"); [EOL]     n.insert(0, text2); [EOL]     assertEquals(4, n.size()); [EOL]     assertSame(text2, n.get(0)); [EOL]     assertNotNull(n.addArray()); [EOL]     assertEquals(5, n.size()); [EOL]     n.addPOJO("foo"); [EOL]     assertEquals(6, n.size()); [EOL]     JsonGenerator jg = new MappingJsonFactory().createGenerator(new StringWriter()); [EOL]     n.serialize(jg, null); [EOL]     n.removeAll(); [EOL]     assertEquals(0, n.size()); [EOL] }
public void testBasics() throws IOException { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     assertStandardEquals(n); [EOL]     assertFalse(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     TextNode text = TextNode.valueOf("x"); [EOL]     n.add(text); [EOL]     assertEquals(1, n.size()); [EOL]     assertFalse(0 == n.hashCode()); [EOL]     assertTrue(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     assertNull(n.get("x")); [EOL]     assertTrue(n.path("x").isMissingNode()); [EOL]     assertSame(text, n.get(0)); [EOL]     assertFalse(n.has("field")); [EOL]     assertFalse(n.hasNonNull("field")); [EOL]     assertTrue(n.has(0)); [EOL]     assertTrue(n.hasNonNull(0)); [EOL]     assertFalse(n.has(1)); [EOL]     assertFalse(n.hasNonNull(1)); [EOL]     n.add((JsonNode) null); [EOL]     assertEquals(2, n.size()); [EOL]     assertTrue(n.get(1).isNull()); [EOL]     assertTrue(n.has(1)); [EOL]     assertFalse(n.hasNonNull(1)); [EOL]     n.set(1, text); [EOL]     assertSame(text, n.get(1)); [EOL]     n.set(0, null); [EOL]     assertTrue(n.get(0).isNull()); [EOL]     ArrayNode n2 = new ArrayNode(JsonNodeFactory.instance); [EOL]     n2.add("foobar"); [EOL]     assertFalse(n.equals(n2)); [EOL]     n.addAll(n2); [EOL]     assertEquals(3, n.size()); [EOL]     assertFalse(n.get(0).isTextual()); [EOL]     assertNotNull(n.remove(0)); [EOL]     assertEquals(2, n.size()); [EOL]     assertTrue(n.get(0).isTextual()); [EOL]     ArrayList<JsonNode> nodes = new ArrayList<JsonNode>(); [EOL]     nodes.add(text); [EOL]     n.addAll(nodes); [EOL]     assertEquals(3, n.size()); [EOL]     assertNull(n.get(10000)); [EOL]     assertNull(n.remove(-4)); [EOL]     TextNode text2 = TextNode.valueOf("b"); [EOL]     n.insert(0, text2); [EOL]     assertEquals(4, n.size()); [EOL]     assertSame(text2, n.get(0)); [EOL]     assertNotNull(n.addArray()); [EOL]     assertEquals(5, n.size()); [EOL]     n.addPOJO("foo"); [EOL]     assertEquals(6, n.size()); [EOL]     JsonGenerator jg = new MappingJsonFactory().createGenerator(new StringWriter()); [EOL]     n.serialize(jg, null); [EOL]     n.removeAll(); [EOL]     assertEquals(0, n.size()); [EOL] }
public void testBasics() throws IOException { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     assertStandardEquals(n); [EOL]     assertFalse(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     TextNode text = TextNode.valueOf("x"); [EOL]     n.add(text); [EOL]     assertEquals(1, n.size()); [EOL]     assertFalse(0 == n.hashCode()); [EOL]     assertTrue(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     assertNull(n.get("x")); [EOL]     assertTrue(n.path("x").isMissingNode()); [EOL]     assertSame(text, n.get(0)); [EOL]     assertFalse(n.has("field")); [EOL]     assertFalse(n.hasNonNull("field")); [EOL]     assertTrue(n.has(0)); [EOL]     assertTrue(n.hasNonNull(0)); [EOL]     assertFalse(n.has(1)); [EOL]     assertFalse(n.hasNonNull(1)); [EOL]     n.add((JsonNode) null); [EOL]     assertEquals(2, n.size()); [EOL]     assertTrue(n.get(1).isNull()); [EOL]     assertTrue(n.has(1)); [EOL]     assertFalse(n.hasNonNull(1)); [EOL]     n.set(1, text); [EOL]     assertSame(text, n.get(1)); [EOL]     n.set(0, null); [EOL]     assertTrue(n.get(0).isNull()); [EOL]     ArrayNode n2 = new ArrayNode(JsonNodeFactory.instance); [EOL]     n2.add("foobar"); [EOL]     assertFalse(n.equals(n2)); [EOL]     n.addAll(n2); [EOL]     assertEquals(3, n.size()); [EOL]     assertFalse(n.get(0).isTextual()); [EOL]     assertNotNull(n.remove(0)); [EOL]     assertEquals(2, n.size()); [EOL]     assertTrue(n.get(0).isTextual()); [EOL]     ArrayList<JsonNode> nodes = new ArrayList<JsonNode>(); [EOL]     nodes.add(text); [EOL]     n.addAll(nodes); [EOL]     assertEquals(3, n.size()); [EOL]     assertNull(n.get(10000)); [EOL]     assertNull(n.remove(-4)); [EOL]     TextNode text2 = TextNode.valueOf("b"); [EOL]     n.insert(0, text2); [EOL]     assertEquals(4, n.size()); [EOL]     assertSame(text2, n.get(0)); [EOL]     assertNotNull(n.addArray()); [EOL]     assertEquals(5, n.size()); [EOL]     n.addPOJO("foo"); [EOL]     assertEquals(6, n.size()); [EOL]     JsonGenerator jg = new MappingJsonFactory().createGenerator(new StringWriter()); [EOL]     n.serialize(jg, null); [EOL]     n.removeAll(); [EOL]     assertEquals(0, n.size()); [EOL] }
public void testBasics() throws IOException { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     assertStandardEquals(n); [EOL]     assertFalse(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     TextNode text = TextNode.valueOf("x"); [EOL]     n.add(text); [EOL]     assertEquals(1, n.size()); [EOL]     assertFalse(0 == n.hashCode()); [EOL]     assertTrue(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     assertNull(n.get("x")); [EOL]     assertTrue(n.path("x").isMissingNode()); [EOL]     assertSame(text, n.get(0)); [EOL]     assertFalse(n.has("field")); [EOL]     assertFalse(n.hasNonNull("field")); [EOL]     assertTrue(n.has(0)); [EOL]     assertTrue(n.hasNonNull(0)); [EOL]     assertFalse(n.has(1)); [EOL]     assertFalse(n.hasNonNull(1)); [EOL]     n.add((JsonNode) null); [EOL]     assertEquals(2, n.size()); [EOL]     assertTrue(n.get(1).isNull()); [EOL]     assertTrue(n.has(1)); [EOL]     assertFalse(n.hasNonNull(1)); [EOL]     n.set(1, text); [EOL]     assertSame(text, n.get(1)); [EOL]     n.set(0, null); [EOL]     assertTrue(n.get(0).isNull()); [EOL]     ArrayNode n2 = new ArrayNode(JsonNodeFactory.instance); [EOL]     n2.add("foobar"); [EOL]     assertFalse(n.equals(n2)); [EOL]     n.addAll(n2); [EOL]     assertEquals(3, n.size()); [EOL]     assertFalse(n.get(0).isTextual()); [EOL]     assertNotNull(n.remove(0)); [EOL]     assertEquals(2, n.size()); [EOL]     assertTrue(n.get(0).isTextual()); [EOL]     ArrayList<JsonNode> nodes = new ArrayList<JsonNode>(); [EOL]     nodes.add(text); [EOL]     n.addAll(nodes); [EOL]     assertEquals(3, n.size()); [EOL]     assertNull(n.get(10000)); [EOL]     assertNull(n.remove(-4)); [EOL]     TextNode text2 = TextNode.valueOf("b"); [EOL]     n.insert(0, text2); [EOL]     assertEquals(4, n.size()); [EOL]     assertSame(text2, n.get(0)); [EOL]     assertNotNull(n.addArray()); [EOL]     assertEquals(5, n.size()); [EOL]     n.addPOJO("foo"); [EOL]     assertEquals(6, n.size()); [EOL]     JsonGenerator jg = new MappingJsonFactory().createGenerator(new StringWriter()); [EOL]     n.serialize(jg, null); [EOL]     n.removeAll(); [EOL]     assertEquals(0, n.size()); [EOL] }
public void testBasics() throws IOException { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     assertStandardEquals(n); [EOL]     assertFalse(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     TextNode text = TextNode.valueOf("x"); [EOL]     n.add(text); [EOL]     assertEquals(1, n.size()); [EOL]     assertFalse(0 == n.hashCode()); [EOL]     assertTrue(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     assertNull(n.get("x")); [EOL]     assertTrue(n.path("x").isMissingNode()); [EOL]     assertSame(text, n.get(0)); [EOL]     assertFalse(n.has("field")); [EOL]     assertFalse(n.hasNonNull("field")); [EOL]     assertTrue(n.has(0)); [EOL]     assertTrue(n.hasNonNull(0)); [EOL]     assertFalse(n.has(1)); [EOL]     assertFalse(n.hasNonNull(1)); [EOL]     n.add((JsonNode) null); [EOL]     assertEquals(2, n.size()); [EOL]     assertTrue(n.get(1).isNull()); [EOL]     assertTrue(n.has(1)); [EOL]     assertFalse(n.hasNonNull(1)); [EOL]     n.set(1, text); [EOL]     assertSame(text, n.get(1)); [EOL]     n.set(0, null); [EOL]     assertTrue(n.get(0).isNull()); [EOL]     ArrayNode n2 = new ArrayNode(JsonNodeFactory.instance); [EOL]     n2.add("foobar"); [EOL]     assertFalse(n.equals(n2)); [EOL]     n.addAll(n2); [EOL]     assertEquals(3, n.size()); [EOL]     assertFalse(n.get(0).isTextual()); [EOL]     assertNotNull(n.remove(0)); [EOL]     assertEquals(2, n.size()); [EOL]     assertTrue(n.get(0).isTextual()); [EOL]     ArrayList<JsonNode> nodes = new ArrayList<JsonNode>(); [EOL]     nodes.add(text); [EOL]     n.addAll(nodes); [EOL]     assertEquals(3, n.size()); [EOL]     assertNull(n.get(10000)); [EOL]     assertNull(n.remove(-4)); [EOL]     TextNode text2 = TextNode.valueOf("b"); [EOL]     n.insert(0, text2); [EOL]     assertEquals(4, n.size()); [EOL]     assertSame(text2, n.get(0)); [EOL]     assertNotNull(n.addArray()); [EOL]     assertEquals(5, n.size()); [EOL]     n.addPOJO("foo"); [EOL]     assertEquals(6, n.size()); [EOL]     JsonGenerator jg = new MappingJsonFactory().createGenerator(new StringWriter()); [EOL]     n.serialize(jg, null); [EOL]     n.removeAll(); [EOL]     assertEquals(0, n.size()); [EOL] }
public void testParser() throws Exception { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     n.add(123); [EOL]     TreeTraversingParser p = new TreeTraversingParser(n, null); [EOL]     p.setCodec(null); [EOL]     assertNull(p.getCodec()); [EOL]     assertNotNull(p.getParsingContext()); [EOL]     assertNotNull(p.getTokenLocation()); [EOL]     assertNotNull(p.getCurrentLocation()); [EOL]     assertNull(p.getEmbeddedObject()); [EOL]     assertNull(p.currentNode()); [EOL]     assertToken(JsonToken.START_ARRAY, p.nextToken()); [EOL]     p.skipChildren(); [EOL]     assertToken(JsonToken.END_ARRAY, p.getCurrentToken()); [EOL]     p.close(); [EOL]     p = new TreeTraversingParser(n, null); [EOL]     p.nextToken(); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, p.getNumberType()); [EOL]     p.close(); [EOL] }
public void testParser() throws Exception { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     n.add(123); [EOL]     TreeTraversingParser p = new TreeTraversingParser(n, null); [EOL]     p.setCodec(null); [EOL]     assertNull(p.getCodec()); [EOL]     assertNotNull(p.getParsingContext()); [EOL]     assertNotNull(p.getTokenLocation()); [EOL]     assertNotNull(p.getCurrentLocation()); [EOL]     assertNull(p.getEmbeddedObject()); [EOL]     assertNull(p.currentNode()); [EOL]     assertToken(JsonToken.START_ARRAY, p.nextToken()); [EOL]     p.skipChildren(); [EOL]     assertToken(JsonToken.END_ARRAY, p.getCurrentToken()); [EOL]     p.close(); [EOL]     p = new TreeTraversingParser(n, null); [EOL]     p.nextToken(); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, p.getNumberType()); [EOL]     p.close(); [EOL] }
public void testBasics() throws IOException { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     assertStandardEquals(n); [EOL]     assertFalse(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     TextNode text = TextNode.valueOf("x"); [EOL]     n.add(text); [EOL]     assertEquals(1, n.size()); [EOL]     assertFalse(0 == n.hashCode()); [EOL]     assertTrue(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     assertNull(n.get("x")); [EOL]     assertTrue(n.path("x").isMissingNode()); [EOL]     assertSame(text, n.get(0)); [EOL]     assertFalse(n.has("field")); [EOL]     assertFalse(n.hasNonNull("field")); [EOL]     assertTrue(n.has(0)); [EOL]     assertTrue(n.hasNonNull(0)); [EOL]     assertFalse(n.has(1)); [EOL]     assertFalse(n.hasNonNull(1)); [EOL]     n.add((JsonNode) null); [EOL]     assertEquals(2, n.size()); [EOL]     assertTrue(n.get(1).isNull()); [EOL]     assertTrue(n.has(1)); [EOL]     assertFalse(n.hasNonNull(1)); [EOL]     n.set(1, text); [EOL]     assertSame(text, n.get(1)); [EOL]     n.set(0, null); [EOL]     assertTrue(n.get(0).isNull()); [EOL]     ArrayNode n2 = new ArrayNode(JsonNodeFactory.instance); [EOL]     n2.add("foobar"); [EOL]     assertFalse(n.equals(n2)); [EOL]     n.addAll(n2); [EOL]     assertEquals(3, n.size()); [EOL]     assertFalse(n.get(0).isTextual()); [EOL]     assertNotNull(n.remove(0)); [EOL]     assertEquals(2, n.size()); [EOL]     assertTrue(n.get(0).isTextual()); [EOL]     ArrayList<JsonNode> nodes = new ArrayList<JsonNode>(); [EOL]     nodes.add(text); [EOL]     n.addAll(nodes); [EOL]     assertEquals(3, n.size()); [EOL]     assertNull(n.get(10000)); [EOL]     assertNull(n.remove(-4)); [EOL]     TextNode text2 = TextNode.valueOf("b"); [EOL]     n.insert(0, text2); [EOL]     assertEquals(4, n.size()); [EOL]     assertSame(text2, n.get(0)); [EOL]     assertNotNull(n.addArray()); [EOL]     assertEquals(5, n.size()); [EOL]     n.addPOJO("foo"); [EOL]     assertEquals(6, n.size()); [EOL]     JsonGenerator jg = new MappingJsonFactory().createGenerator(new StringWriter()); [EOL]     n.serialize(jg, null); [EOL]     n.removeAll(); [EOL]     assertEquals(0, n.size()); [EOL] }
public void testBasics() throws IOException { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     assertStandardEquals(n); [EOL]     assertFalse(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     TextNode text = TextNode.valueOf("x"); [EOL]     n.add(text); [EOL]     assertEquals(1, n.size()); [EOL]     assertFalse(0 == n.hashCode()); [EOL]     assertTrue(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     assertNull(n.get("x")); [EOL]     assertTrue(n.path("x").isMissingNode()); [EOL]     assertSame(text, n.get(0)); [EOL]     assertFalse(n.has("field")); [EOL]     assertFalse(n.hasNonNull("field")); [EOL]     assertTrue(n.has(0)); [EOL]     assertTrue(n.hasNonNull(0)); [EOL]     assertFalse(n.has(1)); [EOL]     assertFalse(n.hasNonNull(1)); [EOL]     n.add((JsonNode) null); [EOL]     assertEquals(2, n.size()); [EOL]     assertTrue(n.get(1).isNull()); [EOL]     assertTrue(n.has(1)); [EOL]     assertFalse(n.hasNonNull(1)); [EOL]     n.set(1, text); [EOL]     assertSame(text, n.get(1)); [EOL]     n.set(0, null); [EOL]     assertTrue(n.get(0).isNull()); [EOL]     ArrayNode n2 = new ArrayNode(JsonNodeFactory.instance); [EOL]     n2.add("foobar"); [EOL]     assertFalse(n.equals(n2)); [EOL]     n.addAll(n2); [EOL]     assertEquals(3, n.size()); [EOL]     assertFalse(n.get(0).isTextual()); [EOL]     assertNotNull(n.remove(0)); [EOL]     assertEquals(2, n.size()); [EOL]     assertTrue(n.get(0).isTextual()); [EOL]     ArrayList<JsonNode> nodes = new ArrayList<JsonNode>(); [EOL]     nodes.add(text); [EOL]     n.addAll(nodes); [EOL]     assertEquals(3, n.size()); [EOL]     assertNull(n.get(10000)); [EOL]     assertNull(n.remove(-4)); [EOL]     TextNode text2 = TextNode.valueOf("b"); [EOL]     n.insert(0, text2); [EOL]     assertEquals(4, n.size()); [EOL]     assertSame(text2, n.get(0)); [EOL]     assertNotNull(n.addArray()); [EOL]     assertEquals(5, n.size()); [EOL]     n.addPOJO("foo"); [EOL]     assertEquals(6, n.size()); [EOL]     JsonGenerator jg = new MappingJsonFactory().createGenerator(new StringWriter()); [EOL]     n.serialize(jg, null); [EOL]     n.removeAll(); [EOL]     assertEquals(0, n.size()); [EOL] }
public void testArrayNodeEquality() { [EOL]     ArrayNode n1 = new ArrayNode(null); [EOL]     ArrayNode n2 = new ArrayNode(null); [EOL]     assertTrue(n1.equals(n2)); [EOL]     assertTrue(n2.equals(n1)); [EOL]     n1.add(TextNode.valueOf("Test")); [EOL]     assertFalse(n1.equals(n2)); [EOL]     assertFalse(n2.equals(n1)); [EOL]     n2.add(TextNode.valueOf("Test")); [EOL]     assertTrue(n1.equals(n2)); [EOL]     assertTrue(n2.equals(n1)); [EOL] }
public void testBasics() throws IOException { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     assertStandardEquals(n); [EOL]     assertFalse(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     TextNode text = TextNode.valueOf("x"); [EOL]     n.add(text); [EOL]     assertEquals(1, n.size()); [EOL]     assertFalse(0 == n.hashCode()); [EOL]     assertTrue(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     assertNull(n.get("x")); [EOL]     assertTrue(n.path("x").isMissingNode()); [EOL]     assertSame(text, n.get(0)); [EOL]     assertFalse(n.has("field")); [EOL]     assertFalse(n.hasNonNull("field")); [EOL]     assertTrue(n.has(0)); [EOL]     assertTrue(n.hasNonNull(0)); [EOL]     assertFalse(n.has(1)); [EOL]     assertFalse(n.hasNonNull(1)); [EOL]     n.add((JsonNode) null); [EOL]     assertEquals(2, n.size()); [EOL]     assertTrue(n.get(1).isNull()); [EOL]     assertTrue(n.has(1)); [EOL]     assertFalse(n.hasNonNull(1)); [EOL]     n.set(1, text); [EOL]     assertSame(text, n.get(1)); [EOL]     n.set(0, null); [EOL]     assertTrue(n.get(0).isNull()); [EOL]     ArrayNode n2 = new ArrayNode(JsonNodeFactory.instance); [EOL]     n2.add("foobar"); [EOL]     assertFalse(n.equals(n2)); [EOL]     n.addAll(n2); [EOL]     assertEquals(3, n.size()); [EOL]     assertFalse(n.get(0).isTextual()); [EOL]     assertNotNull(n.remove(0)); [EOL]     assertEquals(2, n.size()); [EOL]     assertTrue(n.get(0).isTextual()); [EOL]     ArrayList<JsonNode> nodes = new ArrayList<JsonNode>(); [EOL]     nodes.add(text); [EOL]     n.addAll(nodes); [EOL]     assertEquals(3, n.size()); [EOL]     assertNull(n.get(10000)); [EOL]     assertNull(n.remove(-4)); [EOL]     TextNode text2 = TextNode.valueOf("b"); [EOL]     n.insert(0, text2); [EOL]     assertEquals(4, n.size()); [EOL]     assertSame(text2, n.get(0)); [EOL]     assertNotNull(n.addArray()); [EOL]     assertEquals(5, n.size()); [EOL]     n.addPOJO("foo"); [EOL]     assertEquals(6, n.size()); [EOL]     JsonGenerator jg = new MappingJsonFactory().createGenerator(new StringWriter()); [EOL]     n.serialize(jg, null); [EOL]     n.removeAll(); [EOL]     assertEquals(0, n.size()); [EOL] }
public void testBasics() throws IOException { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     assertStandardEquals(n); [EOL]     assertFalse(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     TextNode text = TextNode.valueOf("x"); [EOL]     n.add(text); [EOL]     assertEquals(1, n.size()); [EOL]     assertFalse(0 == n.hashCode()); [EOL]     assertTrue(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     assertNull(n.get("x")); [EOL]     assertTrue(n.path("x").isMissingNode()); [EOL]     assertSame(text, n.get(0)); [EOL]     assertFalse(n.has("field")); [EOL]     assertFalse(n.hasNonNull("field")); [EOL]     assertTrue(n.has(0)); [EOL]     assertTrue(n.hasNonNull(0)); [EOL]     assertFalse(n.has(1)); [EOL]     assertFalse(n.hasNonNull(1)); [EOL]     n.add((JsonNode) null); [EOL]     assertEquals(2, n.size()); [EOL]     assertTrue(n.get(1).isNull()); [EOL]     assertTrue(n.has(1)); [EOL]     assertFalse(n.hasNonNull(1)); [EOL]     n.set(1, text); [EOL]     assertSame(text, n.get(1)); [EOL]     n.set(0, null); [EOL]     assertTrue(n.get(0).isNull()); [EOL]     ArrayNode n2 = new ArrayNode(JsonNodeFactory.instance); [EOL]     n2.add("foobar"); [EOL]     assertFalse(n.equals(n2)); [EOL]     n.addAll(n2); [EOL]     assertEquals(3, n.size()); [EOL]     assertFalse(n.get(0).isTextual()); [EOL]     assertNotNull(n.remove(0)); [EOL]     assertEquals(2, n.size()); [EOL]     assertTrue(n.get(0).isTextual()); [EOL]     ArrayList<JsonNode> nodes = new ArrayList<JsonNode>(); [EOL]     nodes.add(text); [EOL]     n.addAll(nodes); [EOL]     assertEquals(3, n.size()); [EOL]     assertNull(n.get(10000)); [EOL]     assertNull(n.remove(-4)); [EOL]     TextNode text2 = TextNode.valueOf("b"); [EOL]     n.insert(0, text2); [EOL]     assertEquals(4, n.size()); [EOL]     assertSame(text2, n.get(0)); [EOL]     assertNotNull(n.addArray()); [EOL]     assertEquals(5, n.size()); [EOL]     n.addPOJO("foo"); [EOL]     assertEquals(6, n.size()); [EOL]     JsonGenerator jg = new MappingJsonFactory().createGenerator(new StringWriter()); [EOL]     n.serialize(jg, null); [EOL]     n.removeAll(); [EOL]     assertEquals(0, n.size()); [EOL] }
public void testParser() throws Exception { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     n.add(123); [EOL]     TreeTraversingParser p = new TreeTraversingParser(n, null); [EOL]     p.setCodec(null); [EOL]     assertNull(p.getCodec()); [EOL]     assertNotNull(p.getParsingContext()); [EOL]     assertNotNull(p.getTokenLocation()); [EOL]     assertNotNull(p.getCurrentLocation()); [EOL]     assertNull(p.getEmbeddedObject()); [EOL]     assertNull(p.currentNode()); [EOL]     assertToken(JsonToken.START_ARRAY, p.nextToken()); [EOL]     p.skipChildren(); [EOL]     assertToken(JsonToken.END_ARRAY, p.getCurrentToken()); [EOL]     p.close(); [EOL]     p = new TreeTraversingParser(n, null); [EOL]     p.nextToken(); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, p.getNumberType()); [EOL]     p.close(); [EOL] }
public void testParser() throws Exception { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     n.add(123); [EOL]     TreeTraversingParser p = new TreeTraversingParser(n, null); [EOL]     p.setCodec(null); [EOL]     assertNull(p.getCodec()); [EOL]     assertNotNull(p.getParsingContext()); [EOL]     assertNotNull(p.getTokenLocation()); [EOL]     assertNotNull(p.getCurrentLocation()); [EOL]     assertNull(p.getEmbeddedObject()); [EOL]     assertNull(p.currentNode()); [EOL]     assertToken(JsonToken.START_ARRAY, p.nextToken()); [EOL]     p.skipChildren(); [EOL]     assertToken(JsonToken.END_ARRAY, p.getCurrentToken()); [EOL]     p.close(); [EOL]     p = new TreeTraversingParser(n, null); [EOL]     p.nextToken(); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, p.getNumberType()); [EOL]     p.close(); [EOL] }
public void testDeserializeDecimalProperExceptionWhenIdSet() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = "{\"id\": 5, \"defaultValue\": { \"value\": \"123\" } }"; [EOL]     try { [EOL]         MyBeanHolder result = mapper.readValue(json, MyBeanHolder.class); [EOL]         fail("should have raised exception instead value was set to " + result.defaultValue.value.decimal.toString()); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "not numeric"); [EOL]     } [EOL] }
public void testDeserializeDecimalProperExceptionWhenIdSet() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = "{\"id\": 5, \"defaultValue\": { \"value\": \"123\" } }"; [EOL]     try { [EOL]         MyBeanHolder result = mapper.readValue(json, MyBeanHolder.class); [EOL]         fail("should have raised exception instead value was set to " + result.defaultValue.value.decimal.toString()); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "not numeric"); [EOL]     } [EOL] }
public void testDeserializeDecimalProperExceptionWhenIdSet() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = "{\"id\": 5, \"defaultValue\": { \"value\": \"123\" } }"; [EOL]     try { [EOL]         MyBeanHolder result = mapper.readValue(json, MyBeanHolder.class); [EOL]         fail("should have raised exception instead value was set to " + result.defaultValue.value.decimal.toString()); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "not numeric"); [EOL]     } [EOL] }
public void testDeserializeDecimalProperExceptionWhenIdSet() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = "{\"id\": 5, \"defaultValue\": { \"value\": \"123\" } }"; [EOL]     try { [EOL]         MyBeanHolder result = mapper.readValue(json, MyBeanHolder.class); [EOL]         fail("should have raised exception instead value was set to " + result.defaultValue.value.decimal.toString()); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "not numeric"); [EOL]     } [EOL] }
public void testDeserializeDecimalProperExceptionWhenIdSet() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = "{\"id\": 5, \"defaultValue\": { \"value\": \"123\" } }"; [EOL]     try { [EOL]         MyBeanHolder result = mapper.readValue(json, MyBeanHolder.class); [EOL]         fail("should have raised exception instead value was set to " + result.defaultValue.value.decimal.toString()); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "not numeric"); [EOL]     } [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testDeserializeDecimalProperExceptionWhenIdSet() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = "{\"id\": 5, \"defaultValue\": { \"value\": \"123\" } }"; [EOL]     try { [EOL]         MyBeanHolder result = mapper.readValue(json, MyBeanHolder.class); [EOL]         fail("should have raised exception instead value was set to " + result.defaultValue.value.decimal.toString()); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "not numeric"); [EOL]     } [EOL] }
public void testDeserializeDecimalProperExceptionWhenIdSet() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = "{\"id\": 5, \"defaultValue\": { \"value\": \"123\" } }"; [EOL]     try { [EOL]         MyBeanHolder result = mapper.readValue(json, MyBeanHolder.class); [EOL]         fail("should have raised exception instead value was set to " + result.defaultValue.value.decimal.toString()); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "not numeric"); [EOL]     } [EOL] }
public void testDeserializeDecimalProperExceptionWhenIdSet() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = "{\"id\": 5, \"defaultValue\": { \"value\": \"123\" } }"; [EOL]     try { [EOL]         MyBeanHolder result = mapper.readValue(json, MyBeanHolder.class); [EOL]         fail("should have raised exception instead value was set to " + result.defaultValue.value.decimal.toString()); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "not numeric"); [EOL]     } [EOL] }
public void testDeserializeDecimalProperExceptionWhenIdSet() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = "{\"id\": 5, \"defaultValue\": { \"value\": \"123\" } }"; [EOL]     try { [EOL]         MyBeanHolder result = mapper.readValue(json, MyBeanHolder.class); [EOL]         fail("should have raised exception instead value was set to " + result.defaultValue.value.decimal.toString()); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "not numeric"); [EOL]     } [EOL] }
public void testDeserializeDecimalProperExceptionWhenIdSet() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = "{\"id\": 5, \"defaultValue\": { \"value\": \"123\" } }"; [EOL]     try { [EOL]         MyBeanHolder result = mapper.readValue(json, MyBeanHolder.class); [EOL]         fail("should have raised exception instead value was set to " + result.defaultValue.value.decimal.toString()); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "not numeric"); [EOL]     } [EOL] }
public void testDeserializeDecimalProperExceptionWhenIdSet() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = "{\"id\": 5, \"defaultValue\": { \"value\": \"123\" } }"; [EOL]     try { [EOL]         MyBeanHolder result = mapper.readValue(json, MyBeanHolder.class); [EOL]         fail("should have raised exception instead value was set to " + result.defaultValue.value.decimal.toString()); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "not numeric"); [EOL]     } [EOL] }
public void testKeyDeserializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setHandlerInstantiator(new MyInstantiator("abc:")); [EOL]     MyMap map = mapper.readValue("{\"a\":\"b\"}", MyMap.class); [EOL]     assertEquals("{\"KEY\":\"b\"}", mapper.writeValueAsString(map)); [EOL] }
public void testRootBeans() throws Exception { [EOL]     final String JSON = "{\"a\":3}{\"a\":27}  "; [EOL]     Iterator<Bean> it = MAPPER.reader(Bean.class).readValues(JSON); [EOL]     assertNotNull(((MappingIterator<?>) it).getCurrentLocation()); [EOL]     assertTrue(it.hasNext()); [EOL]     Bean b = it.next(); [EOL]     assertEquals(3, b.a); [EOL]     assertTrue(it.hasNext()); [EOL]     b = it.next(); [EOL]     assertEquals(27, b.a); [EOL]     assertFalse(it.hasNext()); [EOL] }
public void testRootBeans() throws Exception { [EOL]     final String JSON = "{\"a\":3}{\"a\":27}  "; [EOL]     Iterator<Bean> it = MAPPER.reader(Bean.class).readValues(JSON); [EOL]     assertNotNull(((MappingIterator<?>) it).getCurrentLocation()); [EOL]     assertTrue(it.hasNext()); [EOL]     Bean b = it.next(); [EOL]     assertEquals(3, b.a); [EOL]     assertTrue(it.hasNext()); [EOL]     b = it.next(); [EOL]     assertEquals(27, b.a); [EOL]     assertFalse(it.hasNext()); [EOL] }
public void testTagList() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     TagList list = new TagList(); [EOL]     list.add(Tag.A); [EOL]     list.add(Tag.B); [EOL]     String json = m.writeValueAsString(list); [EOL]     TagList result = m.readValue(json, TagList.class); [EOL]     assertEquals(2, result.size()); [EOL]     assertSame(Tag.A, result.get(0)); [EOL]     assertSame(Tag.B, result.get(1)); [EOL] }
public void testTagList() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     TagList list = new TagList(); [EOL]     list.add(Tag.A); [EOL]     list.add(Tag.B); [EOL]     String json = m.writeValueAsString(list); [EOL]     TagList result = m.readValue(json, TagList.class); [EOL]     assertEquals(2, result.size()); [EOL]     assertSame(Tag.A, result.get(0)); [EOL]     assertSame(Tag.B, result.get(1)); [EOL] }
public void testTagList() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     TagList list = new TagList(); [EOL]     list.add(Tag.A); [EOL]     list.add(Tag.B); [EOL]     String json = m.writeValueAsString(list); [EOL]     TagList result = m.readValue(json, TagList.class); [EOL]     assertEquals(2, result.size()); [EOL]     assertSame(Tag.A, result.get(0)); [EOL]     assertSame(Tag.B, result.get(1)); [EOL] }
public void testTagList() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     TagList list = new TagList(); [EOL]     list.add(Tag.A); [EOL]     list.add(Tag.B); [EOL]     String json = m.writeValueAsString(list); [EOL]     TagList result = m.readValue(json, TagList.class); [EOL]     assertEquals(2, result.size()); [EOL]     assertSame(Tag.A, result.get(0)); [EOL]     assertSame(Tag.B, result.get(1)); [EOL] }
public void testTagList() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     TagList list = new TagList(); [EOL]     list.add(Tag.A); [EOL]     list.add(Tag.B); [EOL]     String json = m.writeValueAsString(list); [EOL]     TagList result = m.readValue(json, TagList.class); [EOL]     assertEquals(2, result.size()); [EOL]     assertSame(Tag.A, result.get(0)); [EOL]     assertSame(Tag.B, result.get(1)); [EOL] }
public void testTagList() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     TagList list = new TagList(); [EOL]     list.add(Tag.A); [EOL]     list.add(Tag.B); [EOL]     String json = m.writeValueAsString(list); [EOL]     TagList result = m.readValue(json, TagList.class); [EOL]     assertEquals(2, result.size()); [EOL]     assertSame(Tag.A, result.get(0)); [EOL]     assertSame(Tag.B, result.get(1)); [EOL] }
public void testTagList() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     TagList list = new TagList(); [EOL]     list.add(Tag.A); [EOL]     list.add(Tag.B); [EOL]     String json = m.writeValueAsString(list); [EOL]     TagList result = m.readValue(json, TagList.class); [EOL]     assertEquals(2, result.size()); [EOL]     assertSame(Tag.A, result.get(0)); [EOL]     assertSame(Tag.B, result.get(1)); [EOL] }
public void testBinary() throws Exception { [EOL]     assertNull(BinaryNode.valueOf(null)); [EOL]     assertNull(BinaryNode.valueOf(null, 0, 0)); [EOL]     BinaryNode empty = BinaryNode.valueOf(new byte[1], 0, 0); [EOL]     assertSame(BinaryNode.EMPTY_BINARY_NODE, empty); [EOL]     assertStandardEquals(empty); [EOL]     byte[] data = new byte[3]; [EOL]     data[1] = (byte) 3; [EOL]     BinaryNode n = BinaryNode.valueOf(data, 1, 1); [EOL]     data[2] = (byte) 3; [EOL]     BinaryNode n2 = BinaryNode.valueOf(data, 2, 1); [EOL]     assertTrue(n.equals(n2)); [EOL]     assertEquals("\"Aw==\"", n.toString()); [EOL]     assertEquals("AAMD", new BinaryNode(data).asText()); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL] }
public void testBinary() throws Exception { [EOL]     assertNull(BinaryNode.valueOf(null)); [EOL]     assertNull(BinaryNode.valueOf(null, 0, 0)); [EOL]     BinaryNode empty = BinaryNode.valueOf(new byte[1], 0, 0); [EOL]     assertSame(BinaryNode.EMPTY_BINARY_NODE, empty); [EOL]     assertStandardEquals(empty); [EOL]     byte[] data = new byte[3]; [EOL]     data[1] = (byte) 3; [EOL]     BinaryNode n = BinaryNode.valueOf(data, 1, 1); [EOL]     data[2] = (byte) 3; [EOL]     BinaryNode n2 = BinaryNode.valueOf(data, 2, 1); [EOL]     assertTrue(n.equals(n2)); [EOL]     assertEquals("\"Aw==\"", n.toString()); [EOL]     assertEquals("AAMD", new BinaryNode(data).asText()); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL] }
public void testBinary() throws Exception { [EOL]     assertNull(BinaryNode.valueOf(null)); [EOL]     assertNull(BinaryNode.valueOf(null, 0, 0)); [EOL]     BinaryNode empty = BinaryNode.valueOf(new byte[1], 0, 0); [EOL]     assertSame(BinaryNode.EMPTY_BINARY_NODE, empty); [EOL]     assertStandardEquals(empty); [EOL]     byte[] data = new byte[3]; [EOL]     data[1] = (byte) 3; [EOL]     BinaryNode n = BinaryNode.valueOf(data, 1, 1); [EOL]     data[2] = (byte) 3; [EOL]     BinaryNode n2 = BinaryNode.valueOf(data, 2, 1); [EOL]     assertTrue(n.equals(n2)); [EOL]     assertEquals("\"Aw==\"", n.toString()); [EOL]     assertEquals("AAMD", new BinaryNode(data).asText()); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL] }
public void testBinary() throws Exception { [EOL]     assertNull(BinaryNode.valueOf(null)); [EOL]     assertNull(BinaryNode.valueOf(null, 0, 0)); [EOL]     BinaryNode empty = BinaryNode.valueOf(new byte[1], 0, 0); [EOL]     assertSame(BinaryNode.EMPTY_BINARY_NODE, empty); [EOL]     assertStandardEquals(empty); [EOL]     byte[] data = new byte[3]; [EOL]     data[1] = (byte) 3; [EOL]     BinaryNode n = BinaryNode.valueOf(data, 1, 1); [EOL]     data[2] = (byte) 3; [EOL]     BinaryNode n2 = BinaryNode.valueOf(data, 2, 1); [EOL]     assertTrue(n.equals(n2)); [EOL]     assertEquals("\"Aw==\"", n.toString()); [EOL]     assertEquals("AAMD", new BinaryNode(data).asText()); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL] }
public void testBinary() throws Exception { [EOL]     assertNull(BinaryNode.valueOf(null)); [EOL]     assertNull(BinaryNode.valueOf(null, 0, 0)); [EOL]     BinaryNode empty = BinaryNode.valueOf(new byte[1], 0, 0); [EOL]     assertSame(BinaryNode.EMPTY_BINARY_NODE, empty); [EOL]     assertStandardEquals(empty); [EOL]     byte[] data = new byte[3]; [EOL]     data[1] = (byte) 3; [EOL]     BinaryNode n = BinaryNode.valueOf(data, 1, 1); [EOL]     data[2] = (byte) 3; [EOL]     BinaryNode n2 = BinaryNode.valueOf(data, 2, 1); [EOL]     assertTrue(n.equals(n2)); [EOL]     assertEquals("\"Aw==\"", n.toString()); [EOL]     assertEquals("AAMD", new BinaryNode(data).asText()); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL] }
public void testBinary() throws Exception { [EOL]     assertNull(BinaryNode.valueOf(null)); [EOL]     assertNull(BinaryNode.valueOf(null, 0, 0)); [EOL]     BinaryNode empty = BinaryNode.valueOf(new byte[1], 0, 0); [EOL]     assertSame(BinaryNode.EMPTY_BINARY_NODE, empty); [EOL]     assertStandardEquals(empty); [EOL]     byte[] data = new byte[3]; [EOL]     data[1] = (byte) 3; [EOL]     BinaryNode n = BinaryNode.valueOf(data, 1, 1); [EOL]     data[2] = (byte) 3; [EOL]     BinaryNode n2 = BinaryNode.valueOf(data, 2, 1); [EOL]     assertTrue(n.equals(n2)); [EOL]     assertEquals("\"Aw==\"", n.toString()); [EOL]     assertEquals("AAMD", new BinaryNode(data).asText()); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL] }
public void testBinary() throws Exception { [EOL]     assertNull(BinaryNode.valueOf(null)); [EOL]     assertNull(BinaryNode.valueOf(null, 0, 0)); [EOL]     BinaryNode empty = BinaryNode.valueOf(new byte[1], 0, 0); [EOL]     assertSame(BinaryNode.EMPTY_BINARY_NODE, empty); [EOL]     assertStandardEquals(empty); [EOL]     byte[] data = new byte[3]; [EOL]     data[1] = (byte) 3; [EOL]     BinaryNode n = BinaryNode.valueOf(data, 1, 1); [EOL]     data[2] = (byte) 3; [EOL]     BinaryNode n2 = BinaryNode.valueOf(data, 2, 1); [EOL]     assertTrue(n.equals(n2)); [EOL]     assertEquals("\"Aw==\"", n.toString()); [EOL]     assertEquals("AAMD", new BinaryNode(data).asText()); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL] }
public void testBinary() throws Exception { [EOL]     assertNull(BinaryNode.valueOf(null)); [EOL]     assertNull(BinaryNode.valueOf(null, 0, 0)); [EOL]     BinaryNode empty = BinaryNode.valueOf(new byte[1], 0, 0); [EOL]     assertSame(BinaryNode.EMPTY_BINARY_NODE, empty); [EOL]     assertStandardEquals(empty); [EOL]     byte[] data = new byte[3]; [EOL]     data[1] = (byte) 3; [EOL]     BinaryNode n = BinaryNode.valueOf(data, 1, 1); [EOL]     data[2] = (byte) 3; [EOL]     BinaryNode n2 = BinaryNode.valueOf(data, 2, 1); [EOL]     assertTrue(n.equals(n2)); [EOL]     assertEquals("\"Aw==\"", n.toString()); [EOL]     assertEquals("AAMD", new BinaryNode(data).asText()); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL] }
public void testBinary() throws Exception { [EOL]     assertNull(BinaryNode.valueOf(null)); [EOL]     assertNull(BinaryNode.valueOf(null, 0, 0)); [EOL]     BinaryNode empty = BinaryNode.valueOf(new byte[1], 0, 0); [EOL]     assertSame(BinaryNode.EMPTY_BINARY_NODE, empty); [EOL]     assertStandardEquals(empty); [EOL]     byte[] data = new byte[3]; [EOL]     data[1] = (byte) 3; [EOL]     BinaryNode n = BinaryNode.valueOf(data, 1, 1); [EOL]     data[2] = (byte) 3; [EOL]     BinaryNode n2 = BinaryNode.valueOf(data, 2, 1); [EOL]     assertTrue(n.equals(n2)); [EOL]     assertEquals("\"Aw==\"", n.toString()); [EOL]     assertEquals("AAMD", new BinaryNode(data).asText()); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL] }
public void testBinary() throws Exception { [EOL]     assertNull(BinaryNode.valueOf(null)); [EOL]     assertNull(BinaryNode.valueOf(null, 0, 0)); [EOL]     BinaryNode empty = BinaryNode.valueOf(new byte[1], 0, 0); [EOL]     assertSame(BinaryNode.EMPTY_BINARY_NODE, empty); [EOL]     assertStandardEquals(empty); [EOL]     byte[] data = new byte[3]; [EOL]     data[1] = (byte) 3; [EOL]     BinaryNode n = BinaryNode.valueOf(data, 1, 1); [EOL]     data[2] = (byte) 3; [EOL]     BinaryNode n2 = BinaryNode.valueOf(data, 2, 1); [EOL]     assertTrue(n.equals(n2)); [EOL]     assertEquals("\"Aw==\"", n.toString()); [EOL]     assertEquals("AAMD", new BinaryNode(data).asText()); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL] }
public void testBinary() throws Exception { [EOL]     assertNull(BinaryNode.valueOf(null)); [EOL]     assertNull(BinaryNode.valueOf(null, 0, 0)); [EOL]     BinaryNode empty = BinaryNode.valueOf(new byte[1], 0, 0); [EOL]     assertSame(BinaryNode.EMPTY_BINARY_NODE, empty); [EOL]     assertStandardEquals(empty); [EOL]     byte[] data = new byte[3]; [EOL]     data[1] = (byte) 3; [EOL]     BinaryNode n = BinaryNode.valueOf(data, 1, 1); [EOL]     data[2] = (byte) 3; [EOL]     BinaryNode n2 = BinaryNode.valueOf(data, 2, 1); [EOL]     assertTrue(n.equals(n2)); [EOL]     assertEquals("\"Aw==\"", n.toString()); [EOL]     assertEquals("AAMD", new BinaryNode(data).asText()); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL] }
public void testBinary() throws Exception { [EOL]     assertNull(BinaryNode.valueOf(null)); [EOL]     assertNull(BinaryNode.valueOf(null, 0, 0)); [EOL]     BinaryNode empty = BinaryNode.valueOf(new byte[1], 0, 0); [EOL]     assertSame(BinaryNode.EMPTY_BINARY_NODE, empty); [EOL]     assertStandardEquals(empty); [EOL]     byte[] data = new byte[3]; [EOL]     data[1] = (byte) 3; [EOL]     BinaryNode n = BinaryNode.valueOf(data, 1, 1); [EOL]     data[2] = (byte) 3; [EOL]     BinaryNode n2 = BinaryNode.valueOf(data, 2, 1); [EOL]     assertTrue(n.equals(n2)); [EOL]     assertEquals("\"Aw==\"", n.toString()); [EOL]     assertEquals("AAMD", new BinaryNode(data).asText()); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL] }
public void testTyped() { [EOL]     _testObjectBuffer(Integer.class); [EOL] }
public void testTyped() { [EOL]     _testObjectBuffer(Integer.class); [EOL] }
public void testTyped() { [EOL]     _testObjectBuffer(Integer.class); [EOL] }
public void testTyped() { [EOL]     _testObjectBuffer(Integer.class); [EOL] }
public void testTyped() { [EOL]     _testObjectBuffer(Integer.class); [EOL] }
public void testTyped() { [EOL]     _testObjectBuffer(Integer.class); [EOL] }
public void testTyped() { [EOL]     _testObjectBuffer(Integer.class); [EOL] }
public void testTyped() { [EOL]     _testObjectBuffer(Integer.class); [EOL] }
public void testTyped() { [EOL]     _testObjectBuffer(Integer.class); [EOL] }
public void testTyped() { [EOL]     _testObjectBuffer(Integer.class); [EOL] }
public void testTyped() { [EOL]     _testObjectBuffer(Integer.class); [EOL] }
public void testTyped() { [EOL]     _testObjectBuffer(Integer.class); [EOL] }
public void testTyped() { [EOL]     _testObjectBuffer(Integer.class); [EOL] }
public void testTyped() { [EOL]     _testObjectBuffer(Integer.class); [EOL] }
public void testTyped() { [EOL]     _testObjectBuffer(Integer.class); [EOL] }
public void testTyped() { [EOL]     _testObjectBuffer(Integer.class); [EOL] }
public void testTyped() { [EOL]     _testObjectBuffer(Integer.class); [EOL] }
public void testTyped() { [EOL]     _testObjectBuffer(Integer.class); [EOL] }
public void testTyped() { [EOL]     _testObjectBuffer(Integer.class); [EOL] }
public void testTyped() { [EOL]     _testObjectBuffer(Integer.class); [EOL] }
public void testTyped() { [EOL]     _testObjectBuffer(Integer.class); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testSuperClass() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SubType bean = new SubType(); [EOL]     Map<String, Object> result = writeAndMap(mapper, bean); [EOL]     assertEquals(4, result.size()); [EOL]     assertEquals("a", result.get("a")); [EOL]     assertEquals(Integer.valueOf(3), result.get("b")); [EOL]     assertEquals("x", result.get("a2")); [EOL]     assertEquals(Boolean.TRUE, result.get("b2")); [EOL]     ObjectWriter w = mapper.writerWithType(BaseType.class); [EOL]     String json = w.writeValueAsString(bean); [EOL]     result = (Map<String, Object>) mapper.readValue(json, Map.class); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("a", result.get("a")); [EOL]     assertEquals(Integer.valueOf(3), result.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testSuperClass() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SubType bean = new SubType(); [EOL]     Map<String, Object> result = writeAndMap(mapper, bean); [EOL]     assertEquals(4, result.size()); [EOL]     assertEquals("a", result.get("a")); [EOL]     assertEquals(Integer.valueOf(3), result.get("b")); [EOL]     assertEquals("x", result.get("a2")); [EOL]     assertEquals(Boolean.TRUE, result.get("b2")); [EOL]     ObjectWriter w = mapper.writerWithType(BaseType.class); [EOL]     String json = w.writeValueAsString(bean); [EOL]     result = (Map<String, Object>) mapper.readValue(json, Map.class); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("a", result.get("a")); [EOL]     assertEquals(Integer.valueOf(3), result.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testSuperClass() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SubType bean = new SubType(); [EOL]     Map<String, Object> result = writeAndMap(mapper, bean); [EOL]     assertEquals(4, result.size()); [EOL]     assertEquals("a", result.get("a")); [EOL]     assertEquals(Integer.valueOf(3), result.get("b")); [EOL]     assertEquals("x", result.get("a2")); [EOL]     assertEquals(Boolean.TRUE, result.get("b2")); [EOL]     ObjectWriter w = mapper.writerWithType(BaseType.class); [EOL]     String json = w.writeValueAsString(bean); [EOL]     result = (Map<String, Object>) mapper.readValue(json, Map.class); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("a", result.get("a")); [EOL]     assertEquals(Integer.valueOf(3), result.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testSuperClass() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SubType bean = new SubType(); [EOL]     Map<String, Object> result = writeAndMap(mapper, bean); [EOL]     assertEquals(4, result.size()); [EOL]     assertEquals("a", result.get("a")); [EOL]     assertEquals(Integer.valueOf(3), result.get("b")); [EOL]     assertEquals("x", result.get("a2")); [EOL]     assertEquals(Boolean.TRUE, result.get("b2")); [EOL]     ObjectWriter w = mapper.writerWithType(BaseType.class); [EOL]     String json = w.writeValueAsString(bean); [EOL]     result = (Map<String, Object>) mapper.readValue(json, Map.class); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("a", result.get("a")); [EOL]     assertEquals(Integer.valueOf(3), result.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testSuperClass() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SubType bean = new SubType(); [EOL]     Map<String, Object> result = writeAndMap(mapper, bean); [EOL]     assertEquals(4, result.size()); [EOL]     assertEquals("a", result.get("a")); [EOL]     assertEquals(Integer.valueOf(3), result.get("b")); [EOL]     assertEquals("x", result.get("a2")); [EOL]     assertEquals(Boolean.TRUE, result.get("b2")); [EOL]     ObjectWriter w = mapper.writerWithType(BaseType.class); [EOL]     String json = w.writeValueAsString(bean); [EOL]     result = (Map<String, Object>) mapper.readValue(json, Map.class); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("a", result.get("a")); [EOL]     assertEquals(Integer.valueOf(3), result.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testSuperClass() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SubType bean = new SubType(); [EOL]     Map<String, Object> result = writeAndMap(mapper, bean); [EOL]     assertEquals(4, result.size()); [EOL]     assertEquals("a", result.get("a")); [EOL]     assertEquals(Integer.valueOf(3), result.get("b")); [EOL]     assertEquals("x", result.get("a2")); [EOL]     assertEquals(Boolean.TRUE, result.get("b2")); [EOL]     ObjectWriter w = mapper.writerWithType(BaseType.class); [EOL]     String json = w.writeValueAsString(bean); [EOL]     result = (Map<String, Object>) mapper.readValue(json, Map.class); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("a", result.get("a")); [EOL]     assertEquals(Integer.valueOf(3), result.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testSuperClass() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SubType bean = new SubType(); [EOL]     Map<String, Object> result = writeAndMap(mapper, bean); [EOL]     assertEquals(4, result.size()); [EOL]     assertEquals("a", result.get("a")); [EOL]     assertEquals(Integer.valueOf(3), result.get("b")); [EOL]     assertEquals("x", result.get("a2")); [EOL]     assertEquals(Boolean.TRUE, result.get("b2")); [EOL]     ObjectWriter w = mapper.writerWithType(BaseType.class); [EOL]     String json = w.writeValueAsString(bean); [EOL]     result = (Map<String, Object>) mapper.readValue(json, Map.class); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("a", result.get("a")); [EOL]     assertEquals(Integer.valueOf(3), result.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testSuperClass() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SubType bean = new SubType(); [EOL]     Map<String, Object> result = writeAndMap(mapper, bean); [EOL]     assertEquals(4, result.size()); [EOL]     assertEquals("a", result.get("a")); [EOL]     assertEquals(Integer.valueOf(3), result.get("b")); [EOL]     assertEquals("x", result.get("a2")); [EOL]     assertEquals(Boolean.TRUE, result.get("b2")); [EOL]     ObjectWriter w = mapper.writerWithType(BaseType.class); [EOL]     String json = w.writeValueAsString(bean); [EOL]     result = (Map<String, Object>) mapper.readValue(json, Map.class); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("a", result.get("a")); [EOL]     assertEquals(Integer.valueOf(3), result.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testSuperClass() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SubType bean = new SubType(); [EOL]     Map<String, Object> result = writeAndMap(mapper, bean); [EOL]     assertEquals(4, result.size()); [EOL]     assertEquals("a", result.get("a")); [EOL]     assertEquals(Integer.valueOf(3), result.get("b")); [EOL]     assertEquals("x", result.get("a2")); [EOL]     assertEquals(Boolean.TRUE, result.get("b2")); [EOL]     ObjectWriter w = mapper.writerWithType(BaseType.class); [EOL]     String json = w.writeValueAsString(bean); [EOL]     result = (Map<String, Object>) mapper.readValue(json, Map.class); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("a", result.get("a")); [EOL]     assertEquals(Integer.valueOf(3), result.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testSuperClass() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SubType bean = new SubType(); [EOL]     Map<String, Object> result = writeAndMap(mapper, bean); [EOL]     assertEquals(4, result.size()); [EOL]     assertEquals("a", result.get("a")); [EOL]     assertEquals(Integer.valueOf(3), result.get("b")); [EOL]     assertEquals("x", result.get("a2")); [EOL]     assertEquals(Boolean.TRUE, result.get("b2")); [EOL]     ObjectWriter w = mapper.writerWithType(BaseType.class); [EOL]     String json = w.writeValueAsString(bean); [EOL]     result = (Map<String, Object>) mapper.readValue(json, Map.class); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("a", result.get("a")); [EOL]     assertEquals(Integer.valueOf(3), result.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testSuperClass() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SubType bean = new SubType(); [EOL]     Map<String, Object> result = writeAndMap(mapper, bean); [EOL]     assertEquals(4, result.size()); [EOL]     assertEquals("a", result.get("a")); [EOL]     assertEquals(Integer.valueOf(3), result.get("b")); [EOL]     assertEquals("x", result.get("a2")); [EOL]     assertEquals(Boolean.TRUE, result.get("b2")); [EOL]     ObjectWriter w = mapper.writerWithType(BaseType.class); [EOL]     String json = w.writeValueAsString(bean); [EOL]     result = (Map<String, Object>) mapper.readValue(json, Map.class); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("a", result.get("a")); [EOL]     assertEquals(Integer.valueOf(3), result.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testSuperClass() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SubType bean = new SubType(); [EOL]     Map<String, Object> result = writeAndMap(mapper, bean); [EOL]     assertEquals(4, result.size()); [EOL]     assertEquals("a", result.get("a")); [EOL]     assertEquals(Integer.valueOf(3), result.get("b")); [EOL]     assertEquals("x", result.get("a2")); [EOL]     assertEquals(Boolean.TRUE, result.get("b2")); [EOL]     ObjectWriter w = mapper.writerWithType(BaseType.class); [EOL]     String json = w.writeValueAsString(bean); [EOL]     result = (Map<String, Object>) mapper.readValue(json, Map.class); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("a", result.get("a")); [EOL]     assertEquals(Integer.valueOf(3), result.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testSuperClass() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SubType bean = new SubType(); [EOL]     Map<String, Object> result = writeAndMap(mapper, bean); [EOL]     assertEquals(4, result.size()); [EOL]     assertEquals("a", result.get("a")); [EOL]     assertEquals(Integer.valueOf(3), result.get("b")); [EOL]     assertEquals("x", result.get("a2")); [EOL]     assertEquals(Boolean.TRUE, result.get("b2")); [EOL]     ObjectWriter w = mapper.writerWithType(BaseType.class); [EOL]     String json = w.writeValueAsString(bean); [EOL]     result = (Map<String, Object>) mapper.readValue(json, Map.class); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("a", result.get("a")); [EOL]     assertEquals(Integer.valueOf(3), result.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testSuperClass() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SubType bean = new SubType(); [EOL]     Map<String, Object> result = writeAndMap(mapper, bean); [EOL]     assertEquals(4, result.size()); [EOL]     assertEquals("a", result.get("a")); [EOL]     assertEquals(Integer.valueOf(3), result.get("b")); [EOL]     assertEquals("x", result.get("a2")); [EOL]     assertEquals(Boolean.TRUE, result.get("b2")); [EOL]     ObjectWriter w = mapper.writerWithType(BaseType.class); [EOL]     String json = w.writeValueAsString(bean); [EOL]     result = (Map<String, Object>) mapper.readValue(json, Map.class); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("a", result.get("a")); [EOL]     assertEquals(Integer.valueOf(3), result.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testSuperClass() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SubType bean = new SubType(); [EOL]     Map<String, Object> result = writeAndMap(mapper, bean); [EOL]     assertEquals(4, result.size()); [EOL]     assertEquals("a", result.get("a")); [EOL]     assertEquals(Integer.valueOf(3), result.get("b")); [EOL]     assertEquals("x", result.get("a2")); [EOL]     assertEquals(Boolean.TRUE, result.get("b2")); [EOL]     ObjectWriter w = mapper.writerWithType(BaseType.class); [EOL]     String json = w.writeValueAsString(bean); [EOL]     result = (Map<String, Object>) mapper.readValue(json, Map.class); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("a", result.get("a")); [EOL]     assertEquals(Integer.valueOf(3), result.get("b")); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testDateScalars() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     long ts = 12345678L; [EOL]     assertEquals("[[\"java.util.Date\"," + ts + "]]", m.writeValueAsString(new Object[] { new Date(ts) })); [EOL]     Calendar c = Calendar.getInstance(); [EOL]     c.setTimeInMillis(ts); [EOL]     String json = m.writeValueAsString(new Object[] { c }); [EOL]     assertEquals("[[\"" + c.getClass().getName() + "\"," + ts + "]]", json); [EOL]     Object[] result = m.readValue(json, Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     assertTrue(result[0] instanceof Calendar); [EOL]     assertEquals(ts, ((Calendar) result[0]).getTimeInMillis()); [EOL] }
public void testDateScalars() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     long ts = 12345678L; [EOL]     assertEquals("[[\"java.util.Date\"," + ts + "]]", m.writeValueAsString(new Object[] { new Date(ts) })); [EOL]     Calendar c = Calendar.getInstance(); [EOL]     c.setTimeInMillis(ts); [EOL]     String json = m.writeValueAsString(new Object[] { c }); [EOL]     assertEquals("[[\"" + c.getClass().getName() + "\"," + ts + "]]", json); [EOL]     Object[] result = m.readValue(json, Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     assertTrue(result[0] instanceof Calendar); [EOL]     assertEquals(ts, ((Calendar) result[0]).getTimeInMillis()); [EOL] }
public void testDateScalars() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     long ts = 12345678L; [EOL]     assertEquals("[[\"java.util.Date\"," + ts + "]]", m.writeValueAsString(new Object[] { new Date(ts) })); [EOL]     Calendar c = Calendar.getInstance(); [EOL]     c.setTimeInMillis(ts); [EOL]     String json = m.writeValueAsString(new Object[] { c }); [EOL]     assertEquals("[[\"" + c.getClass().getName() + "\"," + ts + "]]", json); [EOL]     Object[] result = m.readValue(json, Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     assertTrue(result[0] instanceof Calendar); [EOL]     assertEquals(ts, ((Calendar) result[0]).getTimeInMillis()); [EOL] }
public void testDateScalars() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     long ts = 12345678L; [EOL]     assertEquals("[[\"java.util.Date\"," + ts + "]]", m.writeValueAsString(new Object[] { new Date(ts) })); [EOL]     Calendar c = Calendar.getInstance(); [EOL]     c.setTimeInMillis(ts); [EOL]     String json = m.writeValueAsString(new Object[] { c }); [EOL]     assertEquals("[[\"" + c.getClass().getName() + "\"," + ts + "]]", json); [EOL]     Object[] result = m.readValue(json, Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     assertTrue(result[0] instanceof Calendar); [EOL]     assertEquals(ts, ((Calendar) result[0]).getTimeInMillis()); [EOL] }
public void testDateScalars() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     long ts = 12345678L; [EOL]     assertEquals("[[\"java.util.Date\"," + ts + "]]", m.writeValueAsString(new Object[] { new Date(ts) })); [EOL]     Calendar c = Calendar.getInstance(); [EOL]     c.setTimeInMillis(ts); [EOL]     String json = m.writeValueAsString(new Object[] { c }); [EOL]     assertEquals("[[\"" + c.getClass().getName() + "\"," + ts + "]]", json); [EOL]     Object[] result = m.readValue(json, Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     assertTrue(result[0] instanceof Calendar); [EOL]     assertEquals(ts, ((Calendar) result[0]).getTimeInMillis()); [EOL] }
public void testDateScalars() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     long ts = 12345678L; [EOL]     assertEquals("[[\"java.util.Date\"," + ts + "]]", m.writeValueAsString(new Object[] { new Date(ts) })); [EOL]     Calendar c = Calendar.getInstance(); [EOL]     c.setTimeInMillis(ts); [EOL]     String json = m.writeValueAsString(new Object[] { c }); [EOL]     assertEquals("[[\"" + c.getClass().getName() + "\"," + ts + "]]", json); [EOL]     Object[] result = m.readValue(json, Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     assertTrue(result[0] instanceof Calendar); [EOL]     assertEquals(ts, ((Calendar) result[0]).getTimeInMillis()); [EOL] }
public void testDateScalars() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     long ts = 12345678L; [EOL]     assertEquals("[[\"java.util.Date\"," + ts + "]]", m.writeValueAsString(new Object[] { new Date(ts) })); [EOL]     Calendar c = Calendar.getInstance(); [EOL]     c.setTimeInMillis(ts); [EOL]     String json = m.writeValueAsString(new Object[] { c }); [EOL]     assertEquals("[[\"" + c.getClass().getName() + "\"," + ts + "]]", json); [EOL]     Object[] result = m.readValue(json, Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     assertTrue(result[0] instanceof Calendar); [EOL]     assertEquals(ts, ((Calendar) result[0]).getTimeInMillis()); [EOL] }
public void testDateScalars() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     long ts = 12345678L; [EOL]     assertEquals("[[\"java.util.Date\"," + ts + "]]", m.writeValueAsString(new Object[] { new Date(ts) })); [EOL]     Calendar c = Calendar.getInstance(); [EOL]     c.setTimeInMillis(ts); [EOL]     String json = m.writeValueAsString(new Object[] { c }); [EOL]     assertEquals("[[\"" + c.getClass().getName() + "\"," + ts + "]]", json); [EOL]     Object[] result = m.readValue(json, Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     assertTrue(result[0] instanceof Calendar); [EOL]     assertEquals(ts, ((Calendar) result[0]).getTimeInMillis()); [EOL] }
public void testDatesWithEmptyStrings() throws Exception { [EOL]     assertNull(MAPPER.readValue(quote(""), java.util.Date.class)); [EOL]     assertNull(MAPPER.readValue(quote(""), java.util.Calendar.class)); [EOL]     assertNull(MAPPER.readValue(quote(""), java.sql.Date.class)); [EOL] }
public void testDatesWithEmptyStrings() throws Exception { [EOL]     assertNull(MAPPER.readValue(quote(""), java.util.Date.class)); [EOL]     assertNull(MAPPER.readValue(quote(""), java.util.Calendar.class)); [EOL]     assertNull(MAPPER.readValue(quote(""), java.sql.Date.class)); [EOL] }
public void testDatesWithEmptyStrings() throws Exception { [EOL]     assertNull(MAPPER.readValue(quote(""), java.util.Date.class)); [EOL]     assertNull(MAPPER.readValue(quote(""), java.util.Calendar.class)); [EOL]     assertNull(MAPPER.readValue(quote(""), java.sql.Date.class)); [EOL] }
public void testDatesWithEmptyStrings() throws Exception { [EOL]     assertNull(MAPPER.readValue(quote(""), java.util.Date.class)); [EOL]     assertNull(MAPPER.readValue(quote(""), java.util.Calendar.class)); [EOL]     assertNull(MAPPER.readValue(quote(""), java.sql.Date.class)); [EOL] }
public void testDatesWithEmptyStrings() throws Exception { [EOL]     assertNull(MAPPER.readValue(quote(""), java.util.Date.class)); [EOL]     assertNull(MAPPER.readValue(quote(""), java.util.Calendar.class)); [EOL]     assertNull(MAPPER.readValue(quote(""), java.sql.Date.class)); [EOL] }
public void testBasics() throws IOException { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     assertStandardEquals(n); [EOL]     assertFalse(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     TextNode text = TextNode.valueOf("x"); [EOL]     n.add(text); [EOL]     assertEquals(1, n.size()); [EOL]     assertFalse(0 == n.hashCode()); [EOL]     assertTrue(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     assertNull(n.get("x")); [EOL]     assertTrue(n.path("x").isMissingNode()); [EOL]     assertSame(text, n.get(0)); [EOL]     assertFalse(n.has("field")); [EOL]     assertFalse(n.hasNonNull("field")); [EOL]     assertTrue(n.has(0)); [EOL]     assertTrue(n.hasNonNull(0)); [EOL]     assertFalse(n.has(1)); [EOL]     assertFalse(n.hasNonNull(1)); [EOL]     n.add((JsonNode) null); [EOL]     assertEquals(2, n.size()); [EOL]     assertTrue(n.get(1).isNull()); [EOL]     assertTrue(n.has(1)); [EOL]     assertFalse(n.hasNonNull(1)); [EOL]     n.set(1, text); [EOL]     assertSame(text, n.get(1)); [EOL]     n.set(0, null); [EOL]     assertTrue(n.get(0).isNull()); [EOL]     ArrayNode n2 = new ArrayNode(JsonNodeFactory.instance); [EOL]     n2.add("foobar"); [EOL]     assertFalse(n.equals(n2)); [EOL]     n.addAll(n2); [EOL]     assertEquals(3, n.size()); [EOL]     assertFalse(n.get(0).isTextual()); [EOL]     assertNotNull(n.remove(0)); [EOL]     assertEquals(2, n.size()); [EOL]     assertTrue(n.get(0).isTextual()); [EOL]     ArrayList<JsonNode> nodes = new ArrayList<JsonNode>(); [EOL]     nodes.add(text); [EOL]     n.addAll(nodes); [EOL]     assertEquals(3, n.size()); [EOL]     assertNull(n.get(10000)); [EOL]     assertNull(n.remove(-4)); [EOL]     TextNode text2 = TextNode.valueOf("b"); [EOL]     n.insert(0, text2); [EOL]     assertEquals(4, n.size()); [EOL]     assertSame(text2, n.get(0)); [EOL]     assertNotNull(n.addArray()); [EOL]     assertEquals(5, n.size()); [EOL]     n.addPOJO("foo"); [EOL]     assertEquals(6, n.size()); [EOL]     JsonGenerator jg = new MappingJsonFactory().createGenerator(new StringWriter()); [EOL]     n.serialize(jg, null); [EOL]     n.removeAll(); [EOL]     assertEquals(0, n.size()); [EOL] }
public void testBasics() throws IOException { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     assertStandardEquals(n); [EOL]     assertFalse(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     TextNode text = TextNode.valueOf("x"); [EOL]     n.add(text); [EOL]     assertEquals(1, n.size()); [EOL]     assertFalse(0 == n.hashCode()); [EOL]     assertTrue(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     assertNull(n.get("x")); [EOL]     assertTrue(n.path("x").isMissingNode()); [EOL]     assertSame(text, n.get(0)); [EOL]     assertFalse(n.has("field")); [EOL]     assertFalse(n.hasNonNull("field")); [EOL]     assertTrue(n.has(0)); [EOL]     assertTrue(n.hasNonNull(0)); [EOL]     assertFalse(n.has(1)); [EOL]     assertFalse(n.hasNonNull(1)); [EOL]     n.add((JsonNode) null); [EOL]     assertEquals(2, n.size()); [EOL]     assertTrue(n.get(1).isNull()); [EOL]     assertTrue(n.has(1)); [EOL]     assertFalse(n.hasNonNull(1)); [EOL]     n.set(1, text); [EOL]     assertSame(text, n.get(1)); [EOL]     n.set(0, null); [EOL]     assertTrue(n.get(0).isNull()); [EOL]     ArrayNode n2 = new ArrayNode(JsonNodeFactory.instance); [EOL]     n2.add("foobar"); [EOL]     assertFalse(n.equals(n2)); [EOL]     n.addAll(n2); [EOL]     assertEquals(3, n.size()); [EOL]     assertFalse(n.get(0).isTextual()); [EOL]     assertNotNull(n.remove(0)); [EOL]     assertEquals(2, n.size()); [EOL]     assertTrue(n.get(0).isTextual()); [EOL]     ArrayList<JsonNode> nodes = new ArrayList<JsonNode>(); [EOL]     nodes.add(text); [EOL]     n.addAll(nodes); [EOL]     assertEquals(3, n.size()); [EOL]     assertNull(n.get(10000)); [EOL]     assertNull(n.remove(-4)); [EOL]     TextNode text2 = TextNode.valueOf("b"); [EOL]     n.insert(0, text2); [EOL]     assertEquals(4, n.size()); [EOL]     assertSame(text2, n.get(0)); [EOL]     assertNotNull(n.addArray()); [EOL]     assertEquals(5, n.size()); [EOL]     n.addPOJO("foo"); [EOL]     assertEquals(6, n.size()); [EOL]     JsonGenerator jg = new MappingJsonFactory().createGenerator(new StringWriter()); [EOL]     n.serialize(jg, null); [EOL]     n.removeAll(); [EOL]     assertEquals(0, n.size()); [EOL] }
public void testBasics() throws IOException { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     assertStandardEquals(n); [EOL]     assertFalse(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     TextNode text = TextNode.valueOf("x"); [EOL]     n.add(text); [EOL]     assertEquals(1, n.size()); [EOL]     assertFalse(0 == n.hashCode()); [EOL]     assertTrue(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     assertNull(n.get("x")); [EOL]     assertTrue(n.path("x").isMissingNode()); [EOL]     assertSame(text, n.get(0)); [EOL]     assertFalse(n.has("field")); [EOL]     assertFalse(n.hasNonNull("field")); [EOL]     assertTrue(n.has(0)); [EOL]     assertTrue(n.hasNonNull(0)); [EOL]     assertFalse(n.has(1)); [EOL]     assertFalse(n.hasNonNull(1)); [EOL]     n.add((JsonNode) null); [EOL]     assertEquals(2, n.size()); [EOL]     assertTrue(n.get(1).isNull()); [EOL]     assertTrue(n.has(1)); [EOL]     assertFalse(n.hasNonNull(1)); [EOL]     n.set(1, text); [EOL]     assertSame(text, n.get(1)); [EOL]     n.set(0, null); [EOL]     assertTrue(n.get(0).isNull()); [EOL]     ArrayNode n2 = new ArrayNode(JsonNodeFactory.instance); [EOL]     n2.add("foobar"); [EOL]     assertFalse(n.equals(n2)); [EOL]     n.addAll(n2); [EOL]     assertEquals(3, n.size()); [EOL]     assertFalse(n.get(0).isTextual()); [EOL]     assertNotNull(n.remove(0)); [EOL]     assertEquals(2, n.size()); [EOL]     assertTrue(n.get(0).isTextual()); [EOL]     ArrayList<JsonNode> nodes = new ArrayList<JsonNode>(); [EOL]     nodes.add(text); [EOL]     n.addAll(nodes); [EOL]     assertEquals(3, n.size()); [EOL]     assertNull(n.get(10000)); [EOL]     assertNull(n.remove(-4)); [EOL]     TextNode text2 = TextNode.valueOf("b"); [EOL]     n.insert(0, text2); [EOL]     assertEquals(4, n.size()); [EOL]     assertSame(text2, n.get(0)); [EOL]     assertNotNull(n.addArray()); [EOL]     assertEquals(5, n.size()); [EOL]     n.addPOJO("foo"); [EOL]     assertEquals(6, n.size()); [EOL]     JsonGenerator jg = new MappingJsonFactory().createGenerator(new StringWriter()); [EOL]     n.serialize(jg, null); [EOL]     n.removeAll(); [EOL]     assertEquals(0, n.size()); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testBooleanDelegate() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     BooleanBean bb = m.readValue("true", BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL]     bb = m.readValue(quote("true"), BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL] }
public void testBooleanDelegate() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     BooleanBean bb = m.readValue("true", BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL]     bb = m.readValue(quote("true"), BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL] }
public void testBooleanDelegate() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     BooleanBean bb = m.readValue("true", BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL]     bb = m.readValue(quote("true"), BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testBooleanDelegate() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     BooleanBean bb = m.readValue("true", BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL]     bb = m.readValue(quote("true"), BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL] }
public void testSimpleGetterInterfaceImpl() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(m, new PojoImpl()); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals(Integer.valueOf(5), result.get("foobar")); [EOL]     assertEquals(Integer.valueOf(1), result.get("width")); [EOL]     assertEquals(Integer.valueOf(2), result.get("length")); [EOL] }
public void testSimpleGetterInterfaceImpl() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(m, new PojoImpl()); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals(Integer.valueOf(5), result.get("foobar")); [EOL]     assertEquals(Integer.valueOf(1), result.get("width")); [EOL]     assertEquals(Integer.valueOf(2), result.get("length")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testSuperClass() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SubType bean = new SubType(); [EOL]     Map<String, Object> result = writeAndMap(mapper, bean); [EOL]     assertEquals(4, result.size()); [EOL]     assertEquals("a", result.get("a")); [EOL]     assertEquals(Integer.valueOf(3), result.get("b")); [EOL]     assertEquals("x", result.get("a2")); [EOL]     assertEquals(Boolean.TRUE, result.get("b2")); [EOL]     ObjectWriter w = mapper.writerWithType(BaseType.class); [EOL]     String json = w.writeValueAsString(bean); [EOL]     result = (Map<String, Object>) mapper.readValue(json, Map.class); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("a", result.get("a")); [EOL]     assertEquals(Integer.valueOf(3), result.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testSuperClass() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SubType bean = new SubType(); [EOL]     Map<String, Object> result = writeAndMap(mapper, bean); [EOL]     assertEquals(4, result.size()); [EOL]     assertEquals("a", result.get("a")); [EOL]     assertEquals(Integer.valueOf(3), result.get("b")); [EOL]     assertEquals("x", result.get("a2")); [EOL]     assertEquals(Boolean.TRUE, result.get("b2")); [EOL]     ObjectWriter w = mapper.writerWithType(BaseType.class); [EOL]     String json = w.writeValueAsString(bean); [EOL]     result = (Map<String, Object>) mapper.readValue(json, Map.class); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("a", result.get("a")); [EOL]     assertEquals(Integer.valueOf(3), result.get("b")); [EOL] }
public void testNested() throws Exception { [EOL]     final String JSON = "{\"coordinates\":[[[-3,\n1],[179.859681,51.175092]]]}"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL] }
public void testNested() throws Exception { [EOL]     final String JSON = "{\"coordinates\":[[[-3,\n1],[179.859681,51.175092]]]}"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL] }
public void testNested() throws Exception { [EOL]     final String JSON = "{\"coordinates\":[[[-3,\n1],[179.859681,51.175092]]]}"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL] }
public void testParser() throws Exception { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     n.add(123); [EOL]     TreeTraversingParser p = new TreeTraversingParser(n, null); [EOL]     p.setCodec(null); [EOL]     assertNull(p.getCodec()); [EOL]     assertNotNull(p.getParsingContext()); [EOL]     assertNotNull(p.getTokenLocation()); [EOL]     assertNotNull(p.getCurrentLocation()); [EOL]     assertNull(p.getEmbeddedObject()); [EOL]     assertNull(p.currentNode()); [EOL]     assertToken(JsonToken.START_ARRAY, p.nextToken()); [EOL]     p.skipChildren(); [EOL]     assertToken(JsonToken.END_ARRAY, p.getCurrentToken()); [EOL]     p.close(); [EOL]     p = new TreeTraversingParser(n, null); [EOL]     p.nextToken(); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, p.getNumberType()); [EOL]     p.close(); [EOL] }
public void testParser() throws Exception { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     n.add(123); [EOL]     TreeTraversingParser p = new TreeTraversingParser(n, null); [EOL]     p.setCodec(null); [EOL]     assertNull(p.getCodec()); [EOL]     assertNotNull(p.getParsingContext()); [EOL]     assertNotNull(p.getTokenLocation()); [EOL]     assertNotNull(p.getCurrentLocation()); [EOL]     assertNull(p.getEmbeddedObject()); [EOL]     assertNull(p.currentNode()); [EOL]     assertToken(JsonToken.START_ARRAY, p.nextToken()); [EOL]     p.skipChildren(); [EOL]     assertToken(JsonToken.END_ARRAY, p.getCurrentToken()); [EOL]     p.close(); [EOL]     p = new TreeTraversingParser(n, null); [EOL]     p.nextToken(); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, p.getNumberType()); [EOL]     p.close(); [EOL] }
public void testParser() throws Exception { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     n.add(123); [EOL]     TreeTraversingParser p = new TreeTraversingParser(n, null); [EOL]     p.setCodec(null); [EOL]     assertNull(p.getCodec()); [EOL]     assertNotNull(p.getParsingContext()); [EOL]     assertNotNull(p.getTokenLocation()); [EOL]     assertNotNull(p.getCurrentLocation()); [EOL]     assertNull(p.getEmbeddedObject()); [EOL]     assertNull(p.currentNode()); [EOL]     assertToken(JsonToken.START_ARRAY, p.nextToken()); [EOL]     p.skipChildren(); [EOL]     assertToken(JsonToken.END_ARRAY, p.getCurrentToken()); [EOL]     p.close(); [EOL]     p = new TreeTraversingParser(n, null); [EOL]     p.nextToken(); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, p.getNumberType()); [EOL]     p.close(); [EOL] }
public void testParser() throws Exception { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     n.add(123); [EOL]     TreeTraversingParser p = new TreeTraversingParser(n, null); [EOL]     p.setCodec(null); [EOL]     assertNull(p.getCodec()); [EOL]     assertNotNull(p.getParsingContext()); [EOL]     assertNotNull(p.getTokenLocation()); [EOL]     assertNotNull(p.getCurrentLocation()); [EOL]     assertNull(p.getEmbeddedObject()); [EOL]     assertNull(p.currentNode()); [EOL]     assertToken(JsonToken.START_ARRAY, p.nextToken()); [EOL]     p.skipChildren(); [EOL]     assertToken(JsonToken.END_ARRAY, p.getCurrentToken()); [EOL]     p.close(); [EOL]     p = new TreeTraversingParser(n, null); [EOL]     p.nextToken(); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, p.getNumberType()); [EOL]     p.close(); [EOL] }
public void testNested() throws Exception { [EOL]     final String JSON = "{\"coordinates\":[[[-3,\n1],[179.859681,51.175092]]]}"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL] }
public void testNested() throws Exception { [EOL]     final String JSON = "{\"coordinates\":[[[-3,\n1],[179.859681,51.175092]]]}"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL] }
public void testNested() throws Exception { [EOL]     final String JSON = "{\"coordinates\":[[[-3,\n1],[179.859681,51.175092]]]}"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL] }
public void testNested() throws Exception { [EOL]     final String JSON = "{\"coordinates\":[[[-3,\n1],[179.859681,51.175092]]]}"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL] }
public void testNested() throws Exception { [EOL]     final String JSON = "{\"coordinates\":[[[-3,\n1],[179.859681,51.175092]]]}"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL] }
public void testNested() throws Exception { [EOL]     final String JSON = "{\"coordinates\":[[[-3,\n1],[179.859681,51.175092]]]}"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL] }
public void testParser() throws Exception { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     n.add(123); [EOL]     TreeTraversingParser p = new TreeTraversingParser(n, null); [EOL]     p.setCodec(null); [EOL]     assertNull(p.getCodec()); [EOL]     assertNotNull(p.getParsingContext()); [EOL]     assertNotNull(p.getTokenLocation()); [EOL]     assertNotNull(p.getCurrentLocation()); [EOL]     assertNull(p.getEmbeddedObject()); [EOL]     assertNull(p.currentNode()); [EOL]     assertToken(JsonToken.START_ARRAY, p.nextToken()); [EOL]     p.skipChildren(); [EOL]     assertToken(JsonToken.END_ARRAY, p.getCurrentToken()); [EOL]     p.close(); [EOL]     p = new TreeTraversingParser(n, null); [EOL]     p.nextToken(); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, p.getNumberType()); [EOL]     p.close(); [EOL] }
public void testParser() throws Exception { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     n.add(123); [EOL]     TreeTraversingParser p = new TreeTraversingParser(n, null); [EOL]     p.setCodec(null); [EOL]     assertNull(p.getCodec()); [EOL]     assertNotNull(p.getParsingContext()); [EOL]     assertNotNull(p.getTokenLocation()); [EOL]     assertNotNull(p.getCurrentLocation()); [EOL]     assertNull(p.getEmbeddedObject()); [EOL]     assertNull(p.currentNode()); [EOL]     assertToken(JsonToken.START_ARRAY, p.nextToken()); [EOL]     p.skipChildren(); [EOL]     assertToken(JsonToken.END_ARRAY, p.getCurrentToken()); [EOL]     p.close(); [EOL]     p = new TreeTraversingParser(n, null); [EOL]     p.nextToken(); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, p.getNumberType()); [EOL]     p.close(); [EOL] }
public void testParser() throws Exception { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     n.add(123); [EOL]     TreeTraversingParser p = new TreeTraversingParser(n, null); [EOL]     p.setCodec(null); [EOL]     assertNull(p.getCodec()); [EOL]     assertNotNull(p.getParsingContext()); [EOL]     assertNotNull(p.getTokenLocation()); [EOL]     assertNotNull(p.getCurrentLocation()); [EOL]     assertNull(p.getEmbeddedObject()); [EOL]     assertNull(p.currentNode()); [EOL]     assertToken(JsonToken.START_ARRAY, p.nextToken()); [EOL]     p.skipChildren(); [EOL]     assertToken(JsonToken.END_ARRAY, p.getCurrentToken()); [EOL]     p.close(); [EOL]     p = new TreeTraversingParser(n, null); [EOL]     p.nextToken(); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, p.getNumberType()); [EOL]     p.close(); [EOL] }
public void testParser() throws Exception { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     n.add(123); [EOL]     TreeTraversingParser p = new TreeTraversingParser(n, null); [EOL]     p.setCodec(null); [EOL]     assertNull(p.getCodec()); [EOL]     assertNotNull(p.getParsingContext()); [EOL]     assertNotNull(p.getTokenLocation()); [EOL]     assertNotNull(p.getCurrentLocation()); [EOL]     assertNull(p.getEmbeddedObject()); [EOL]     assertNull(p.currentNode()); [EOL]     assertToken(JsonToken.START_ARRAY, p.nextToken()); [EOL]     p.skipChildren(); [EOL]     assertToken(JsonToken.END_ARRAY, p.getCurrentToken()); [EOL]     p.close(); [EOL]     p = new TreeTraversingParser(n, null); [EOL]     p.nextToken(); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, p.getNumberType()); [EOL]     p.close(); [EOL] }
public void testParser() throws Exception { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     n.add(123); [EOL]     TreeTraversingParser p = new TreeTraversingParser(n, null); [EOL]     p.setCodec(null); [EOL]     assertNull(p.getCodec()); [EOL]     assertNotNull(p.getParsingContext()); [EOL]     assertNotNull(p.getTokenLocation()); [EOL]     assertNotNull(p.getCurrentLocation()); [EOL]     assertNull(p.getEmbeddedObject()); [EOL]     assertNull(p.currentNode()); [EOL]     assertToken(JsonToken.START_ARRAY, p.nextToken()); [EOL]     p.skipChildren(); [EOL]     assertToken(JsonToken.END_ARRAY, p.getCurrentToken()); [EOL]     p.close(); [EOL]     p = new TreeTraversingParser(n, null); [EOL]     p.nextToken(); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, p.getNumberType()); [EOL]     p.close(); [EOL] }
public void testParser() throws Exception { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     n.add(123); [EOL]     TreeTraversingParser p = new TreeTraversingParser(n, null); [EOL]     p.setCodec(null); [EOL]     assertNull(p.getCodec()); [EOL]     assertNotNull(p.getParsingContext()); [EOL]     assertNotNull(p.getTokenLocation()); [EOL]     assertNotNull(p.getCurrentLocation()); [EOL]     assertNull(p.getEmbeddedObject()); [EOL]     assertNull(p.currentNode()); [EOL]     assertToken(JsonToken.START_ARRAY, p.nextToken()); [EOL]     p.skipChildren(); [EOL]     assertToken(JsonToken.END_ARRAY, p.getCurrentToken()); [EOL]     p.close(); [EOL]     p = new TreeTraversingParser(n, null); [EOL]     p.nextToken(); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, p.getNumberType()); [EOL]     p.close(); [EOL] }
public void testParser() throws Exception { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     n.add(123); [EOL]     TreeTraversingParser p = new TreeTraversingParser(n, null); [EOL]     p.setCodec(null); [EOL]     assertNull(p.getCodec()); [EOL]     assertNotNull(p.getParsingContext()); [EOL]     assertNotNull(p.getTokenLocation()); [EOL]     assertNotNull(p.getCurrentLocation()); [EOL]     assertNull(p.getEmbeddedObject()); [EOL]     assertNull(p.currentNode()); [EOL]     assertToken(JsonToken.START_ARRAY, p.nextToken()); [EOL]     p.skipChildren(); [EOL]     assertToken(JsonToken.END_ARRAY, p.getCurrentToken()); [EOL]     p.close(); [EOL]     p = new TreeTraversingParser(n, null); [EOL]     p.nextToken(); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, p.getNumberType()); [EOL]     p.close(); [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = "{ \"a\" : 123, \"list\" : [ 12.25, null, true, { }, [ ] ] }"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals("Expected START_OBJECT", JsonToken.START_OBJECT.asString(), jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals("a", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals(123, jp.getIntValue()); [EOL]     assertEquals("123", jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals("list", jp.getText()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals(JsonToken.START_ARRAY.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(12.25, jp.getDoubleValue(), 0); [EOL]     assertEquals("12.25", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NULL, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(JsonToken.VALUE_NULL.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_TRUE, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertTrue(jp.getBooleanValue()); [EOL]     assertEquals(JsonToken.VALUE_TRUE.asString(), jp.getText()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = "{ \"a\" : 123, \"list\" : [ 12.25, null, true, { }, [ ] ] }"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals("Expected START_OBJECT", JsonToken.START_OBJECT.asString(), jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals("a", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals(123, jp.getIntValue()); [EOL]     assertEquals("123", jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals("list", jp.getText()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals(JsonToken.START_ARRAY.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(12.25, jp.getDoubleValue(), 0); [EOL]     assertEquals("12.25", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NULL, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(JsonToken.VALUE_NULL.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_TRUE, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertTrue(jp.getBooleanValue()); [EOL]     assertEquals(JsonToken.VALUE_TRUE.asString(), jp.getText()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = "{ \"a\" : 123, \"list\" : [ 12.25, null, true, { }, [ ] ] }"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals("Expected START_OBJECT", JsonToken.START_OBJECT.asString(), jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals("a", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals(123, jp.getIntValue()); [EOL]     assertEquals("123", jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals("list", jp.getText()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals(JsonToken.START_ARRAY.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(12.25, jp.getDoubleValue(), 0); [EOL]     assertEquals("12.25", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NULL, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(JsonToken.VALUE_NULL.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_TRUE, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertTrue(jp.getBooleanValue()); [EOL]     assertEquals(JsonToken.VALUE_TRUE.asString(), jp.getText()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = "{ \"a\" : 123, \"list\" : [ 12.25, null, true, { }, [ ] ] }"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals("Expected START_OBJECT", JsonToken.START_OBJECT.asString(), jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals("a", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals(123, jp.getIntValue()); [EOL]     assertEquals("123", jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals("list", jp.getText()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals(JsonToken.START_ARRAY.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(12.25, jp.getDoubleValue(), 0); [EOL]     assertEquals("12.25", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NULL, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(JsonToken.VALUE_NULL.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_TRUE, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertTrue(jp.getBooleanValue()); [EOL]     assertEquals(JsonToken.VALUE_TRUE.asString(), jp.getText()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = "{ \"a\" : 123, \"list\" : [ 12.25, null, true, { }, [ ] ] }"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals("Expected START_OBJECT", JsonToken.START_OBJECT.asString(), jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals("a", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals(123, jp.getIntValue()); [EOL]     assertEquals("123", jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals("list", jp.getText()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals(JsonToken.START_ARRAY.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(12.25, jp.getDoubleValue(), 0); [EOL]     assertEquals("12.25", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NULL, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(JsonToken.VALUE_NULL.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_TRUE, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertTrue(jp.getBooleanValue()); [EOL]     assertEquals(JsonToken.VALUE_TRUE.asString(), jp.getText()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = "{ \"a\" : 123, \"list\" : [ 12.25, null, true, { }, [ ] ] }"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals("Expected START_OBJECT", JsonToken.START_OBJECT.asString(), jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals("a", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals(123, jp.getIntValue()); [EOL]     assertEquals("123", jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals("list", jp.getText()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals(JsonToken.START_ARRAY.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(12.25, jp.getDoubleValue(), 0); [EOL]     assertEquals("12.25", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NULL, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(JsonToken.VALUE_NULL.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_TRUE, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertTrue(jp.getBooleanValue()); [EOL]     assertEquals(JsonToken.VALUE_TRUE.asString(), jp.getText()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = "{ \"a\" : 123, \"list\" : [ 12.25, null, true, { }, [ ] ] }"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals("Expected START_OBJECT", JsonToken.START_OBJECT.asString(), jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals("a", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals(123, jp.getIntValue()); [EOL]     assertEquals("123", jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals("list", jp.getText()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals(JsonToken.START_ARRAY.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(12.25, jp.getDoubleValue(), 0); [EOL]     assertEquals("12.25", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NULL, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(JsonToken.VALUE_NULL.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_TRUE, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertTrue(jp.getBooleanValue()); [EOL]     assertEquals(JsonToken.VALUE_TRUE.asString(), jp.getText()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = "{ \"a\" : 123, \"list\" : [ 12.25, null, true, { }, [ ] ] }"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals("Expected START_OBJECT", JsonToken.START_OBJECT.asString(), jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals("a", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals(123, jp.getIntValue()); [EOL]     assertEquals("123", jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals("list", jp.getText()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals(JsonToken.START_ARRAY.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(12.25, jp.getDoubleValue(), 0); [EOL]     assertEquals("12.25", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NULL, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(JsonToken.VALUE_NULL.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_TRUE, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertTrue(jp.getBooleanValue()); [EOL]     assertEquals(JsonToken.VALUE_TRUE.asString(), jp.getText()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = "{ \"a\" : 123, \"list\" : [ 12.25, null, true, { }, [ ] ] }"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals("Expected START_OBJECT", JsonToken.START_OBJECT.asString(), jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals("a", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals(123, jp.getIntValue()); [EOL]     assertEquals("123", jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals("list", jp.getText()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals(JsonToken.START_ARRAY.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(12.25, jp.getDoubleValue(), 0); [EOL]     assertEquals("12.25", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NULL, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(JsonToken.VALUE_NULL.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_TRUE, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertTrue(jp.getBooleanValue()); [EOL]     assertEquals(JsonToken.VALUE_TRUE.asString(), jp.getText()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL] }
public void testParser() throws Exception { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     n.add(123); [EOL]     TreeTraversingParser p = new TreeTraversingParser(n, null); [EOL]     p.setCodec(null); [EOL]     assertNull(p.getCodec()); [EOL]     assertNotNull(p.getParsingContext()); [EOL]     assertNotNull(p.getTokenLocation()); [EOL]     assertNotNull(p.getCurrentLocation()); [EOL]     assertNull(p.getEmbeddedObject()); [EOL]     assertNull(p.currentNode()); [EOL]     assertToken(JsonToken.START_ARRAY, p.nextToken()); [EOL]     p.skipChildren(); [EOL]     assertToken(JsonToken.END_ARRAY, p.getCurrentToken()); [EOL]     p.close(); [EOL]     p = new TreeTraversingParser(n, null); [EOL]     p.nextToken(); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, p.getNumberType()); [EOL]     p.close(); [EOL] }
public void testParser() throws Exception { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     n.add(123); [EOL]     TreeTraversingParser p = new TreeTraversingParser(n, null); [EOL]     p.setCodec(null); [EOL]     assertNull(p.getCodec()); [EOL]     assertNotNull(p.getParsingContext()); [EOL]     assertNotNull(p.getTokenLocation()); [EOL]     assertNotNull(p.getCurrentLocation()); [EOL]     assertNull(p.getEmbeddedObject()); [EOL]     assertNull(p.currentNode()); [EOL]     assertToken(JsonToken.START_ARRAY, p.nextToken()); [EOL]     p.skipChildren(); [EOL]     assertToken(JsonToken.END_ARRAY, p.getCurrentToken()); [EOL]     p.close(); [EOL]     p = new TreeTraversingParser(n, null); [EOL]     p.nextToken(); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, p.getNumberType()); [EOL]     p.close(); [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = "{ \"a\" : 123, \"list\" : [ 12.25, null, true, { }, [ ] ] }"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals("Expected START_OBJECT", JsonToken.START_OBJECT.asString(), jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals("a", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals(123, jp.getIntValue()); [EOL]     assertEquals("123", jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals("list", jp.getText()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals(JsonToken.START_ARRAY.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(12.25, jp.getDoubleValue(), 0); [EOL]     assertEquals("12.25", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NULL, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(JsonToken.VALUE_NULL.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_TRUE, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertTrue(jp.getBooleanValue()); [EOL]     assertEquals(JsonToken.VALUE_TRUE.asString(), jp.getText()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = "{ \"a\" : 123, \"list\" : [ 12.25, null, true, { }, [ ] ] }"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals("Expected START_OBJECT", JsonToken.START_OBJECT.asString(), jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals("a", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals(123, jp.getIntValue()); [EOL]     assertEquals("123", jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals("list", jp.getText()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals(JsonToken.START_ARRAY.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(12.25, jp.getDoubleValue(), 0); [EOL]     assertEquals("12.25", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NULL, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(JsonToken.VALUE_NULL.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_TRUE, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertTrue(jp.getBooleanValue()); [EOL]     assertEquals(JsonToken.VALUE_TRUE.asString(), jp.getText()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = "{ \"a\" : 123, \"list\" : [ 12.25, null, true, { }, [ ] ] }"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals("Expected START_OBJECT", JsonToken.START_OBJECT.asString(), jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals("a", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals(123, jp.getIntValue()); [EOL]     assertEquals("123", jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals("list", jp.getText()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals(JsonToken.START_ARRAY.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(12.25, jp.getDoubleValue(), 0); [EOL]     assertEquals("12.25", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NULL, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(JsonToken.VALUE_NULL.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_TRUE, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertTrue(jp.getBooleanValue()); [EOL]     assertEquals(JsonToken.VALUE_TRUE.asString(), jp.getText()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = "{ \"a\" : 123, \"list\" : [ 12.25, null, true, { }, [ ] ] }"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals("Expected START_OBJECT", JsonToken.START_OBJECT.asString(), jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals("a", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals(123, jp.getIntValue()); [EOL]     assertEquals("123", jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals("list", jp.getText()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals(JsonToken.START_ARRAY.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(12.25, jp.getDoubleValue(), 0); [EOL]     assertEquals("12.25", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NULL, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(JsonToken.VALUE_NULL.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_TRUE, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertTrue(jp.getBooleanValue()); [EOL]     assertEquals(JsonToken.VALUE_TRUE.asString(), jp.getText()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = "{ \"a\" : 123, \"list\" : [ 12.25, null, true, { }, [ ] ] }"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals("Expected START_OBJECT", JsonToken.START_OBJECT.asString(), jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals("a", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals(123, jp.getIntValue()); [EOL]     assertEquals("123", jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals("list", jp.getText()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals(JsonToken.START_ARRAY.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(12.25, jp.getDoubleValue(), 0); [EOL]     assertEquals("12.25", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NULL, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(JsonToken.VALUE_NULL.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_TRUE, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertTrue(jp.getBooleanValue()); [EOL]     assertEquals(JsonToken.VALUE_TRUE.asString(), jp.getText()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = "{ \"a\" : 123, \"list\" : [ 12.25, null, true, { }, [ ] ] }"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals("Expected START_OBJECT", JsonToken.START_OBJECT.asString(), jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals("a", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals(123, jp.getIntValue()); [EOL]     assertEquals("123", jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals("list", jp.getText()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals(JsonToken.START_ARRAY.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(12.25, jp.getDoubleValue(), 0); [EOL]     assertEquals("12.25", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NULL, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(JsonToken.VALUE_NULL.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_TRUE, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertTrue(jp.getBooleanValue()); [EOL]     assertEquals(JsonToken.VALUE_TRUE.asString(), jp.getText()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL] }
public void testParser() throws Exception { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     n.add(123); [EOL]     TreeTraversingParser p = new TreeTraversingParser(n, null); [EOL]     p.setCodec(null); [EOL]     assertNull(p.getCodec()); [EOL]     assertNotNull(p.getParsingContext()); [EOL]     assertNotNull(p.getTokenLocation()); [EOL]     assertNotNull(p.getCurrentLocation()); [EOL]     assertNull(p.getEmbeddedObject()); [EOL]     assertNull(p.currentNode()); [EOL]     assertToken(JsonToken.START_ARRAY, p.nextToken()); [EOL]     p.skipChildren(); [EOL]     assertToken(JsonToken.END_ARRAY, p.getCurrentToken()); [EOL]     p.close(); [EOL]     p = new TreeTraversingParser(n, null); [EOL]     p.nextToken(); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, p.getNumberType()); [EOL]     p.close(); [EOL] }
public void testParser() throws Exception { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     n.add(123); [EOL]     TreeTraversingParser p = new TreeTraversingParser(n, null); [EOL]     p.setCodec(null); [EOL]     assertNull(p.getCodec()); [EOL]     assertNotNull(p.getParsingContext()); [EOL]     assertNotNull(p.getTokenLocation()); [EOL]     assertNotNull(p.getCurrentLocation()); [EOL]     assertNull(p.getEmbeddedObject()); [EOL]     assertNull(p.currentNode()); [EOL]     assertToken(JsonToken.START_ARRAY, p.nextToken()); [EOL]     p.skipChildren(); [EOL]     assertToken(JsonToken.END_ARRAY, p.getCurrentToken()); [EOL]     p.close(); [EOL]     p = new TreeTraversingParser(n, null); [EOL]     p.nextToken(); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, p.getNumberType()); [EOL]     p.close(); [EOL] }
public void testParser() throws Exception { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     n.add(123); [EOL]     TreeTraversingParser p = new TreeTraversingParser(n, null); [EOL]     p.setCodec(null); [EOL]     assertNull(p.getCodec()); [EOL]     assertNotNull(p.getParsingContext()); [EOL]     assertNotNull(p.getTokenLocation()); [EOL]     assertNotNull(p.getCurrentLocation()); [EOL]     assertNull(p.getEmbeddedObject()); [EOL]     assertNull(p.currentNode()); [EOL]     assertToken(JsonToken.START_ARRAY, p.nextToken()); [EOL]     p.skipChildren(); [EOL]     assertToken(JsonToken.END_ARRAY, p.getCurrentToken()); [EOL]     p.close(); [EOL]     p = new TreeTraversingParser(n, null); [EOL]     p.nextToken(); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, p.getNumberType()); [EOL]     p.close(); [EOL] }
public void testParser() throws Exception { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     n.add(123); [EOL]     TreeTraversingParser p = new TreeTraversingParser(n, null); [EOL]     p.setCodec(null); [EOL]     assertNull(p.getCodec()); [EOL]     assertNotNull(p.getParsingContext()); [EOL]     assertNotNull(p.getTokenLocation()); [EOL]     assertNotNull(p.getCurrentLocation()); [EOL]     assertNull(p.getEmbeddedObject()); [EOL]     assertNull(p.currentNode()); [EOL]     assertToken(JsonToken.START_ARRAY, p.nextToken()); [EOL]     p.skipChildren(); [EOL]     assertToken(JsonToken.END_ARRAY, p.getCurrentToken()); [EOL]     p.close(); [EOL]     p = new TreeTraversingParser(n, null); [EOL]     p.nextToken(); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, p.getNumberType()); [EOL]     p.close(); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testImplicitArrays() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true); [EOL]     List<Integer> ints = mapper.readValue("4", List.class); [EOL]     assertEquals(1, ints.size()); [EOL]     assertEquals(Integer.valueOf(4), ints.get(0)); [EOL]     List<String> strings = mapper.readValue(quote("abc"), new TypeReference<ArrayList<String>>() { [EOL]     }); [EOL]     assertEquals(1, strings.size()); [EOL]     assertEquals("abc", strings.get(0)); [EOL]     int[] intArray = mapper.readValue("-7", int[].class); [EOL]     assertEquals(1, intArray.length); [EOL]     assertEquals(-7, intArray[0]); [EOL]     String[] stringArray = mapper.readValue(quote("xyz"), String[].class); [EOL]     assertEquals(1, stringArray.length); [EOL]     assertEquals("xyz", stringArray[0]); [EOL]     List<XBean> xbeanList = mapper.readValue("{\"x\":4}", new TypeReference<List<XBean>>() { [EOL]     }); [EOL]     assertEquals(1, xbeanList.size()); [EOL]     assertEquals(XBean.class, xbeanList.get(0).getClass()); [EOL]     Object ob = mapper.readValue("{\"x\":29}", XBean[].class); [EOL]     XBean[] xbeanArray = (XBean[]) ob; [EOL]     assertEquals(1, xbeanArray.length); [EOL]     assertEquals(XBean.class, xbeanArray[0].getClass()); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testImplicitArrays() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true); [EOL]     List<Integer> ints = mapper.readValue("4", List.class); [EOL]     assertEquals(1, ints.size()); [EOL]     assertEquals(Integer.valueOf(4), ints.get(0)); [EOL]     List<String> strings = mapper.readValue(quote("abc"), new TypeReference<ArrayList<String>>() { [EOL]     }); [EOL]     assertEquals(1, strings.size()); [EOL]     assertEquals("abc", strings.get(0)); [EOL]     int[] intArray = mapper.readValue("-7", int[].class); [EOL]     assertEquals(1, intArray.length); [EOL]     assertEquals(-7, intArray[0]); [EOL]     String[] stringArray = mapper.readValue(quote("xyz"), String[].class); [EOL]     assertEquals(1, stringArray.length); [EOL]     assertEquals("xyz", stringArray[0]); [EOL]     List<XBean> xbeanList = mapper.readValue("{\"x\":4}", new TypeReference<List<XBean>>() { [EOL]     }); [EOL]     assertEquals(1, xbeanList.size()); [EOL]     assertEquals(XBean.class, xbeanList.get(0).getClass()); [EOL]     Object ob = mapper.readValue("{\"x\":29}", XBean[].class); [EOL]     XBean[] xbeanArray = (XBean[]) ob; [EOL]     assertEquals(1, xbeanArray.length); [EOL]     assertEquals(XBean.class, xbeanArray[0].getClass()); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testImplicitArrays() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true); [EOL]     List<Integer> ints = mapper.readValue("4", List.class); [EOL]     assertEquals(1, ints.size()); [EOL]     assertEquals(Integer.valueOf(4), ints.get(0)); [EOL]     List<String> strings = mapper.readValue(quote("abc"), new TypeReference<ArrayList<String>>() { [EOL]     }); [EOL]     assertEquals(1, strings.size()); [EOL]     assertEquals("abc", strings.get(0)); [EOL]     int[] intArray = mapper.readValue("-7", int[].class); [EOL]     assertEquals(1, intArray.length); [EOL]     assertEquals(-7, intArray[0]); [EOL]     String[] stringArray = mapper.readValue(quote("xyz"), String[].class); [EOL]     assertEquals(1, stringArray.length); [EOL]     assertEquals("xyz", stringArray[0]); [EOL]     List<XBean> xbeanList = mapper.readValue("{\"x\":4}", new TypeReference<List<XBean>>() { [EOL]     }); [EOL]     assertEquals(1, xbeanList.size()); [EOL]     assertEquals(XBean.class, xbeanList.get(0).getClass()); [EOL]     Object ob = mapper.readValue("{\"x\":29}", XBean[].class); [EOL]     XBean[] xbeanArray = (XBean[]) ob; [EOL]     assertEquals(1, xbeanArray.length); [EOL]     assertEquals(XBean.class, xbeanArray[0].getClass()); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testImplicitArrays() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true); [EOL]     List<Integer> ints = mapper.readValue("4", List.class); [EOL]     assertEquals(1, ints.size()); [EOL]     assertEquals(Integer.valueOf(4), ints.get(0)); [EOL]     List<String> strings = mapper.readValue(quote("abc"), new TypeReference<ArrayList<String>>() { [EOL]     }); [EOL]     assertEquals(1, strings.size()); [EOL]     assertEquals("abc", strings.get(0)); [EOL]     int[] intArray = mapper.readValue("-7", int[].class); [EOL]     assertEquals(1, intArray.length); [EOL]     assertEquals(-7, intArray[0]); [EOL]     String[] stringArray = mapper.readValue(quote("xyz"), String[].class); [EOL]     assertEquals(1, stringArray.length); [EOL]     assertEquals("xyz", stringArray[0]); [EOL]     List<XBean> xbeanList = mapper.readValue("{\"x\":4}", new TypeReference<List<XBean>>() { [EOL]     }); [EOL]     assertEquals(1, xbeanList.size()); [EOL]     assertEquals(XBean.class, xbeanList.get(0).getClass()); [EOL]     Object ob = mapper.readValue("{\"x\":29}", XBean[].class); [EOL]     XBean[] xbeanArray = (XBean[]) ob; [EOL]     assertEquals(1, xbeanArray.length); [EOL]     assertEquals(XBean.class, xbeanArray[0].getClass()); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testImplicitArrays() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true); [EOL]     List<Integer> ints = mapper.readValue("4", List.class); [EOL]     assertEquals(1, ints.size()); [EOL]     assertEquals(Integer.valueOf(4), ints.get(0)); [EOL]     List<String> strings = mapper.readValue(quote("abc"), new TypeReference<ArrayList<String>>() { [EOL]     }); [EOL]     assertEquals(1, strings.size()); [EOL]     assertEquals("abc", strings.get(0)); [EOL]     int[] intArray = mapper.readValue("-7", int[].class); [EOL]     assertEquals(1, intArray.length); [EOL]     assertEquals(-7, intArray[0]); [EOL]     String[] stringArray = mapper.readValue(quote("xyz"), String[].class); [EOL]     assertEquals(1, stringArray.length); [EOL]     assertEquals("xyz", stringArray[0]); [EOL]     List<XBean> xbeanList = mapper.readValue("{\"x\":4}", new TypeReference<List<XBean>>() { [EOL]     }); [EOL]     assertEquals(1, xbeanList.size()); [EOL]     assertEquals(XBean.class, xbeanList.get(0).getClass()); [EOL]     Object ob = mapper.readValue("{\"x\":29}", XBean[].class); [EOL]     XBean[] xbeanArray = (XBean[]) ob; [EOL]     assertEquals(1, xbeanArray.length); [EOL]     assertEquals(XBean.class, xbeanArray[0].getClass()); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testImplicitArrays() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true); [EOL]     List<Integer> ints = mapper.readValue("4", List.class); [EOL]     assertEquals(1, ints.size()); [EOL]     assertEquals(Integer.valueOf(4), ints.get(0)); [EOL]     List<String> strings = mapper.readValue(quote("abc"), new TypeReference<ArrayList<String>>() { [EOL]     }); [EOL]     assertEquals(1, strings.size()); [EOL]     assertEquals("abc", strings.get(0)); [EOL]     int[] intArray = mapper.readValue("-7", int[].class); [EOL]     assertEquals(1, intArray.length); [EOL]     assertEquals(-7, intArray[0]); [EOL]     String[] stringArray = mapper.readValue(quote("xyz"), String[].class); [EOL]     assertEquals(1, stringArray.length); [EOL]     assertEquals("xyz", stringArray[0]); [EOL]     List<XBean> xbeanList = mapper.readValue("{\"x\":4}", new TypeReference<List<XBean>>() { [EOL]     }); [EOL]     assertEquals(1, xbeanList.size()); [EOL]     assertEquals(XBean.class, xbeanList.get(0).getClass()); [EOL]     Object ob = mapper.readValue("{\"x\":29}", XBean[].class); [EOL]     XBean[] xbeanArray = (XBean[]) ob; [EOL]     assertEquals(1, xbeanArray.length); [EOL]     assertEquals(XBean.class, xbeanArray[0].getClass()); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testImplicitArrays() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true); [EOL]     List<Integer> ints = mapper.readValue("4", List.class); [EOL]     assertEquals(1, ints.size()); [EOL]     assertEquals(Integer.valueOf(4), ints.get(0)); [EOL]     List<String> strings = mapper.readValue(quote("abc"), new TypeReference<ArrayList<String>>() { [EOL]     }); [EOL]     assertEquals(1, strings.size()); [EOL]     assertEquals("abc", strings.get(0)); [EOL]     int[] intArray = mapper.readValue("-7", int[].class); [EOL]     assertEquals(1, intArray.length); [EOL]     assertEquals(-7, intArray[0]); [EOL]     String[] stringArray = mapper.readValue(quote("xyz"), String[].class); [EOL]     assertEquals(1, stringArray.length); [EOL]     assertEquals("xyz", stringArray[0]); [EOL]     List<XBean> xbeanList = mapper.readValue("{\"x\":4}", new TypeReference<List<XBean>>() { [EOL]     }); [EOL]     assertEquals(1, xbeanList.size()); [EOL]     assertEquals(XBean.class, xbeanList.get(0).getClass()); [EOL]     Object ob = mapper.readValue("{\"x\":29}", XBean[].class); [EOL]     XBean[] xbeanArray = (XBean[]) ob; [EOL]     assertEquals(1, xbeanArray.length); [EOL]     assertEquals(XBean.class, xbeanArray[0].getClass()); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testImplicitArrays() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true); [EOL]     List<Integer> ints = mapper.readValue("4", List.class); [EOL]     assertEquals(1, ints.size()); [EOL]     assertEquals(Integer.valueOf(4), ints.get(0)); [EOL]     List<String> strings = mapper.readValue(quote("abc"), new TypeReference<ArrayList<String>>() { [EOL]     }); [EOL]     assertEquals(1, strings.size()); [EOL]     assertEquals("abc", strings.get(0)); [EOL]     int[] intArray = mapper.readValue("-7", int[].class); [EOL]     assertEquals(1, intArray.length); [EOL]     assertEquals(-7, intArray[0]); [EOL]     String[] stringArray = mapper.readValue(quote("xyz"), String[].class); [EOL]     assertEquals(1, stringArray.length); [EOL]     assertEquals("xyz", stringArray[0]); [EOL]     List<XBean> xbeanList = mapper.readValue("{\"x\":4}", new TypeReference<List<XBean>>() { [EOL]     }); [EOL]     assertEquals(1, xbeanList.size()); [EOL]     assertEquals(XBean.class, xbeanList.get(0).getClass()); [EOL]     Object ob = mapper.readValue("{\"x\":29}", XBean[].class); [EOL]     XBean[] xbeanArray = (XBean[]) ob; [EOL]     assertEquals(1, xbeanArray.length); [EOL]     assertEquals(XBean.class, xbeanArray[0].getClass()); [EOL] }
public void testSimpleGetterInterfaceImpl() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(m, new PojoImpl()); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals(Integer.valueOf(5), result.get("foobar")); [EOL]     assertEquals(Integer.valueOf(1), result.get("width")); [EOL]     assertEquals(Integer.valueOf(2), result.get("length")); [EOL] }
public void testSimpleGetterInterfaceImpl() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(m, new PojoImpl()); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals(Integer.valueOf(5), result.get("foobar")); [EOL]     assertEquals(Integer.valueOf(1), result.get("width")); [EOL]     assertEquals(Integer.valueOf(2), result.get("length")); [EOL] }
public void testSimpleGetterInterfaceImpl() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(m, new PojoImpl()); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals(Integer.valueOf(5), result.get("foobar")); [EOL]     assertEquals(Integer.valueOf(1), result.get("width")); [EOL]     assertEquals(Integer.valueOf(2), result.get("length")); [EOL] }
public void testVisibleWithWrapperObject() throws Exception { [EOL]     String json = mapper.writeValueAsString(new WrapperObjectBean()); [EOL]     assertEquals("{\"ObjectType\":{\"a\":2}}", json); [EOL]     WrapperObjectBean result = mapper.readValue(json, WrapperObjectBean.class); [EOL]     assertEquals("ObjectType", result.type); [EOL] }
public void testVisibleWithWrapperObject() throws Exception { [EOL]     String json = mapper.writeValueAsString(new WrapperObjectBean()); [EOL]     assertEquals("{\"ObjectType\":{\"a\":2}}", json); [EOL]     WrapperObjectBean result = mapper.readValue(json, WrapperObjectBean.class); [EOL]     assertEquals("ObjectType", result.type); [EOL] }
public void testVisibleWithWrapperObject() throws Exception { [EOL]     String json = mapper.writeValueAsString(new WrapperObjectBean()); [EOL]     assertEquals("{\"ObjectType\":{\"a\":2}}", json); [EOL]     WrapperObjectBean result = mapper.readValue(json, WrapperObjectBean.class); [EOL]     assertEquals("ObjectType", result.type); [EOL] }
public void testVisibleWithWrapperObject() throws Exception { [EOL]     String json = mapper.writeValueAsString(new WrapperObjectBean()); [EOL]     assertEquals("{\"ObjectType\":{\"a\":2}}", json); [EOL]     WrapperObjectBean result = mapper.readValue(json, WrapperObjectBean.class); [EOL]     assertEquals("ObjectType", result.type); [EOL] }
public void testVisibleWithWrapperObject() throws Exception { [EOL]     String json = mapper.writeValueAsString(new WrapperObjectBean()); [EOL]     assertEquals("{\"ObjectType\":{\"a\":2}}", json); [EOL]     WrapperObjectBean result = mapper.readValue(json, WrapperObjectBean.class); [EOL]     assertEquals("ObjectType", result.type); [EOL] }
public void testVisibleWithWrapperObject() throws Exception { [EOL]     String json = mapper.writeValueAsString(new WrapperObjectBean()); [EOL]     assertEquals("{\"ObjectType\":{\"a\":2}}", json); [EOL]     WrapperObjectBean result = mapper.readValue(json, WrapperObjectBean.class); [EOL]     assertEquals("ObjectType", result.type); [EOL] }
public void testVisibleWithWrapperObject() throws Exception { [EOL]     String json = mapper.writeValueAsString(new WrapperObjectBean()); [EOL]     assertEquals("{\"ObjectType\":{\"a\":2}}", json); [EOL]     WrapperObjectBean result = mapper.readValue(json, WrapperObjectBean.class); [EOL]     assertEquals("ObjectType", result.type); [EOL] }
public void testVisibleWithWrapperObject() throws Exception { [EOL]     String json = mapper.writeValueAsString(new WrapperObjectBean()); [EOL]     assertEquals("{\"ObjectType\":{\"a\":2}}", json); [EOL]     WrapperObjectBean result = mapper.readValue(json, WrapperObjectBean.class); [EOL]     assertEquals("ObjectType", result.type); [EOL] }
public void testVisibleWithWrapperObject() throws Exception { [EOL]     String json = mapper.writeValueAsString(new WrapperObjectBean()); [EOL]     assertEquals("{\"ObjectType\":{\"a\":2}}", json); [EOL]     WrapperObjectBean result = mapper.readValue(json, WrapperObjectBean.class); [EOL]     assertEquals("ObjectType", result.type); [EOL] }
public void testVisibleWithWrapperObject() throws Exception { [EOL]     String json = mapper.writeValueAsString(new WrapperObjectBean()); [EOL]     assertEquals("{\"ObjectType\":{\"a\":2}}", json); [EOL]     WrapperObjectBean result = mapper.readValue(json, WrapperObjectBean.class); [EOL]     assertEquals("ObjectType", result.type); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testRootWrapping() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(SerializationFeature.WRAP_ROOT_VALUE, true); [EOL]     String json = mapper.writeValueAsString(new StringWrapper("abc")); [EOL]     assertEquals("{\"StringWrapper\":{\"str\":\"abc\"}}", json); [EOL] }
public void testRootWrapping() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(SerializationFeature.WRAP_ROOT_VALUE, true); [EOL]     String json = mapper.writeValueAsString(new StringWrapper("abc")); [EOL]     assertEquals("{\"StringWrapper\":{\"str\":\"abc\"}}", json); [EOL] }
public void testRootWrapping() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(SerializationFeature.WRAP_ROOT_VALUE, true); [EOL]     String json = mapper.writeValueAsString(new StringWrapper("abc")); [EOL]     assertEquals("{\"StringWrapper\":{\"str\":\"abc\"}}", json); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testEnumSet() throws Exception { [EOL]     StringWriter sw = new StringWriter(); [EOL]     EnumSet<TestEnum> value = EnumSet.of(TestEnum.B); [EOL]     mapper.writeValue(sw, value); [EOL]     assertEquals("[\"B\"]", sw.toString()); [EOL] }
public void testEnumSet() throws Exception { [EOL]     StringWriter sw = new StringWriter(); [EOL]     EnumSet<TestEnum> value = EnumSet.of(TestEnum.B); [EOL]     mapper.writeValue(sw, value); [EOL]     assertEquals("[\"B\"]", sw.toString()); [EOL] }
public void testEnumSet() throws Exception { [EOL]     StringWriter sw = new StringWriter(); [EOL]     EnumSet<TestEnum> value = EnumSet.of(TestEnum.B); [EOL]     mapper.writeValue(sw, value); [EOL]     assertEquals("[\"B\"]", sw.toString()); [EOL] }
public void testEnumSet() throws Exception { [EOL]     StringWriter sw = new StringWriter(); [EOL]     EnumSet<TestEnum> value = EnumSet.of(TestEnum.B); [EOL]     mapper.writeValue(sw, value); [EOL]     assertEquals("[\"B\"]", sw.toString()); [EOL] }
public void testEnumSet() throws Exception { [EOL]     StringWriter sw = new StringWriter(); [EOL]     EnumSet<TestEnum> value = EnumSet.of(TestEnum.B); [EOL]     mapper.writeValue(sw, value); [EOL]     assertEquals("[\"B\"]", sw.toString()); [EOL] }
public void testEnumSet() throws Exception { [EOL]     StringWriter sw = new StringWriter(); [EOL]     EnumSet<TestEnum> value = EnumSet.of(TestEnum.B); [EOL]     mapper.writeValue(sw, value); [EOL]     assertEquals("[\"B\"]", sw.toString()); [EOL] }
public void testSimpleBeanSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule mod = new SimpleModule("test", Version.unknownVersion()); [EOL]     mod.addSerializer(new CustomBeanSerializer()); [EOL]     mapper.registerModule(mod); [EOL]     assertEquals(quote("abcde|5"), mapper.writeValueAsString(new CustomBean("abcde", 5))); [EOL] }
public void testSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addDeserializer(StringValue.class, new MyContextualDeserializer()); [EOL]     mapper.registerModule(module); [EOL]     ContextualBean bean = mapper.readValue("{\"a\":\"1\",\"b\":\"2\"}", ContextualBean.class); [EOL]     assertEquals("a=1", bean.a.value); [EOL]     assertEquals("b=2", bean.b.value); [EOL]     bean = mapper.readValue("{\"a\":\"3\",\"b\":\"4\"}", ContextualBean.class); [EOL]     assertEquals("a=3", bean.a.value); [EOL]     assertEquals("b=4", bean.b.value); [EOL] }
public void testPropertyRemoval() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new ModuleImpl(new RemovingModifier("a"))); [EOL]     Bean bean = mapper.readValue("{\"b\":\"2\"}", Bean.class); [EOL]     assertEquals("2", bean.b); [EOL]     assertEquals("a", bean.a); [EOL] }
public void testPropertyRemoval() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new ModuleImpl(new RemovingModifier("a"))); [EOL]     Bean bean = mapper.readValue("{\"b\":\"2\"}", Bean.class); [EOL]     assertEquals("2", bean.b); [EOL]     assertEquals("a", bean.a); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testLongFactory() throws Exception { [EOL]     long VALUE = 123456789000L; [EOL]     LongFactoryBean bean = MAPPER.readValue(String.valueOf(VALUE), LongFactoryBean.class); [EOL]     assertEquals(VALUE, bean.value); [EOL] }
public void testLongFactory() throws Exception { [EOL]     long VALUE = 123456789000L; [EOL]     LongFactoryBean bean = MAPPER.readValue(String.valueOf(VALUE), LongFactoryBean.class); [EOL]     assertEquals(VALUE, bean.value); [EOL] }
public void testLongFactory() throws Exception { [EOL]     long VALUE = 123456789000L; [EOL]     LongFactoryBean bean = MAPPER.readValue(String.valueOf(VALUE), LongFactoryBean.class); [EOL]     assertEquals(VALUE, bean.value); [EOL] }
public void testLongFactory() throws Exception { [EOL]     long VALUE = 123456789000L; [EOL]     LongFactoryBean bean = MAPPER.readValue(String.valueOf(VALUE), LongFactoryBean.class); [EOL]     assertEquals(VALUE, bean.value); [EOL] }
public void testLongFactory() throws Exception { [EOL]     long VALUE = 123456789000L; [EOL]     LongFactoryBean bean = MAPPER.readValue(String.valueOf(VALUE), LongFactoryBean.class); [EOL]     assertEquals(VALUE, bean.value); [EOL] }
public void testLongFactory() throws Exception { [EOL]     long VALUE = 123456789000L; [EOL]     LongFactoryBean bean = MAPPER.readValue(String.valueOf(VALUE), LongFactoryBean.class); [EOL]     assertEquals(VALUE, bean.value); [EOL] }
public void testLongFactory() throws Exception { [EOL]     long VALUE = 123456789000L; [EOL]     LongFactoryBean bean = MAPPER.readValue(String.valueOf(VALUE), LongFactoryBean.class); [EOL]     assertEquals(VALUE, bean.value); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testBooleanDelegate() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     BooleanBean bb = m.readValue("true", BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL]     bb = m.readValue(quote("true"), BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL] }
public void testBooleanDelegate() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     BooleanBean bb = m.readValue("true", BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL]     bb = m.readValue(quote("true"), BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL] }
public void testBooleanDelegate() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     BooleanBean bb = m.readValue("true", BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL]     bb = m.readValue(quote("true"), BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL] }
public void testBooleanDelegate() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     BooleanBean bb = m.readValue("true", BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL]     bb = m.readValue(quote("true"), BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL] }
public void testBooleanDelegate() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     BooleanBean bb = m.readValue("true", BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL]     bb = m.readValue(quote("true"), BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL] }
public void testBooleanDelegate() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     BooleanBean bb = m.readValue("true", BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL]     bb = m.readValue(quote("true"), BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL] }
public void testBooleanDelegate() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     BooleanBean bb = m.readValue("true", BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL]     bb = m.readValue(quote("true"), BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL] }
public void testEmptyCollection() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(SerializationFeature.INDENT_OUTPUT, true); [EOL]     List<User> friends = new ArrayList<User>(); [EOL]     friends.add(new DefaultUser("Joe Hildebrandt", null)); [EOL]     friends.add(new DefaultEmployee("Richard Nasr", null, "MDA")); [EOL]     User user = new DefaultEmployee("John Vanspronssen", friends, "MDA"); [EOL]     String json = mapper.writeValueAsString(user); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(DefaultEmployee.class); [EOL]     mapper.registerSubtypes(DefaultUser.class); [EOL]     User result = mapper.readValue(json, User.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(DefaultEmployee.class, result.getClass()); [EOL]     friends = result.getFriends(); [EOL]     assertEquals(2, friends.size()); [EOL]     assertEquals(DefaultUser.class, friends.get(0).getClass()); [EOL]     assertEquals(DefaultEmployee.class, friends.get(1).getClass()); [EOL] }
public void testHashSet() throws Exception { [EOL]     String JSON = "[ \"KEY1\", \"KEY2\" ]"; [EOL]     EnumSet<Key> result = MAPPER.readValue(JSON, new TypeReference<EnumSet<Key>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertTrue(EnumSet.class.isAssignableFrom(result.getClass())); [EOL]     assertEquals(2, result.size()); [EOL]     assertTrue(result.contains(Key.KEY1)); [EOL]     assertTrue(result.contains(Key.KEY2)); [EOL]     assertFalse(result.contains(Key.WHATEVER)); [EOL] }
public void testHashSet() throws Exception { [EOL]     String JSON = "[ \"KEY1\", \"KEY2\" ]"; [EOL]     EnumSet<Key> result = MAPPER.readValue(JSON, new TypeReference<EnumSet<Key>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertTrue(EnumSet.class.isAssignableFrom(result.getClass())); [EOL]     assertEquals(2, result.size()); [EOL]     assertTrue(result.contains(Key.KEY1)); [EOL]     assertTrue(result.contains(Key.KEY2)); [EOL]     assertFalse(result.contains(Key.WHATEVER)); [EOL] }
public void testHashSet() throws Exception { [EOL]     String JSON = "[ \"KEY1\", \"KEY2\" ]"; [EOL]     EnumSet<Key> result = MAPPER.readValue(JSON, new TypeReference<EnumSet<Key>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertTrue(EnumSet.class.isAssignableFrom(result.getClass())); [EOL]     assertEquals(2, result.size()); [EOL]     assertTrue(result.contains(Key.KEY1)); [EOL]     assertTrue(result.contains(Key.KEY2)); [EOL]     assertFalse(result.contains(Key.WHATEVER)); [EOL] }
public void testHashSet() throws Exception { [EOL]     String JSON = "[ \"KEY1\", \"KEY2\" ]"; [EOL]     EnumSet<Key> result = MAPPER.readValue(JSON, new TypeReference<EnumSet<Key>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertTrue(EnumSet.class.isAssignableFrom(result.getClass())); [EOL]     assertEquals(2, result.size()); [EOL]     assertTrue(result.contains(Key.KEY1)); [EOL]     assertTrue(result.contains(Key.KEY2)); [EOL]     assertFalse(result.contains(Key.WHATEVER)); [EOL] }
public void testHashSet() throws Exception { [EOL]     String JSON = "[ \"KEY1\", \"KEY2\" ]"; [EOL]     EnumSet<Key> result = MAPPER.readValue(JSON, new TypeReference<EnumSet<Key>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertTrue(EnumSet.class.isAssignableFrom(result.getClass())); [EOL]     assertEquals(2, result.size()); [EOL]     assertTrue(result.contains(Key.KEY1)); [EOL]     assertTrue(result.contains(Key.KEY2)); [EOL]     assertFalse(result.contains(Key.WHATEVER)); [EOL] }
public void testHashSet() throws Exception { [EOL]     String JSON = "[ \"KEY1\", \"KEY2\" ]"; [EOL]     EnumSet<Key> result = MAPPER.readValue(JSON, new TypeReference<EnumSet<Key>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertTrue(EnumSet.class.isAssignableFrom(result.getClass())); [EOL]     assertEquals(2, result.size()); [EOL]     assertTrue(result.contains(Key.KEY1)); [EOL]     assertTrue(result.contains(Key.KEY2)); [EOL]     assertFalse(result.contains(Key.WHATEVER)); [EOL] }
public void testAnnotatedMap() throws Exception { [EOL]     ObjectMapper mapper = _mapperWithAnnotatedContextual(); [EOL]     ContextualMapBean bean = mapper.readValue("{\"beans\":{\"a\":\"b\"}}", ContextualMapBean.class); [EOL]     assertEquals(1, bean.beans.size()); [EOL]     Map.Entry<String, StringValue> entry = bean.beans.entrySet().iterator().next(); [EOL]     assertEquals("a", entry.getKey()); [EOL]     assertEquals("map=b", entry.getValue().value); [EOL]     bean = mapper.readValue("{\"beans\":{\"x\":\"y\",\"1\":\"2\"}}", ContextualMapBean.class); [EOL]     assertEquals(2, bean.beans.size()); [EOL]     Iterator<Map.Entry<String, StringValue>> it = bean.beans.entrySet().iterator(); [EOL]     entry = it.next(); [EOL]     assertEquals("x", entry.getKey()); [EOL]     assertEquals("map=y", entry.getValue().value); [EOL]     entry = it.next(); [EOL]     assertEquals("1", entry.getKey()); [EOL]     assertEquals("map=2", entry.getValue().value); [EOL] }
public void testAnnotatedMap() throws Exception { [EOL]     ObjectMapper mapper = _mapperWithAnnotatedContextual(); [EOL]     ContextualMapBean bean = mapper.readValue("{\"beans\":{\"a\":\"b\"}}", ContextualMapBean.class); [EOL]     assertEquals(1, bean.beans.size()); [EOL]     Map.Entry<String, StringValue> entry = bean.beans.entrySet().iterator().next(); [EOL]     assertEquals("a", entry.getKey()); [EOL]     assertEquals("map=b", entry.getValue().value); [EOL]     bean = mapper.readValue("{\"beans\":{\"x\":\"y\",\"1\":\"2\"}}", ContextualMapBean.class); [EOL]     assertEquals(2, bean.beans.size()); [EOL]     Iterator<Map.Entry<String, StringValue>> it = bean.beans.entrySet().iterator(); [EOL]     entry = it.next(); [EOL]     assertEquals("x", entry.getKey()); [EOL]     assertEquals("map=y", entry.getValue().value); [EOL]     entry = it.next(); [EOL]     assertEquals("1", entry.getKey()); [EOL]     assertEquals("map=2", entry.getValue().value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimple() throws Exception { [EOL]     assertEquals("null", new ObjectMapper().writeValueAsString(null)); [EOL] }
public void testSimple() throws Exception { [EOL]     assertEquals("null", new ObjectMapper().writeValueAsString(null)); [EOL] }
public void testSimple() throws Exception { [EOL]     assertEquals("null", new ObjectMapper().writeValueAsString(null)); [EOL] }
public void testSimple() throws Exception { [EOL]     assertEquals("null", new ObjectMapper().writeValueAsString(null)); [EOL] }
public void testSimple() throws Exception { [EOL]     assertEquals("null", new ObjectMapper().writeValueAsString(null)); [EOL] }
public void testSimple() throws Exception { [EOL]     assertEquals("null", new ObjectMapper().writeValueAsString(null)); [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testAlwaysIdForTree() throws Exception { [EOL]     TreeNode root = new TreeNode(null, 1, "root"); [EOL]     TreeNode leaf = new TreeNode(root, 2, "leaf"); [EOL]     root.child = leaf; [EOL]     String json = MAPPER.writeValueAsString(root); [EOL]     assertEquals("{\"id\":1,\"name\":\"root\",\"parent\":null,\"child\":" + "{\"id\":2,\"name\":\"leaf\",\"parent\":1,\"child\":null}}", json); [EOL] }
public void testAlwaysIdForTree() throws Exception { [EOL]     TreeNode root = new TreeNode(null, 1, "root"); [EOL]     TreeNode leaf = new TreeNode(root, 2, "leaf"); [EOL]     root.child = leaf; [EOL]     String json = MAPPER.writeValueAsString(root); [EOL]     assertEquals("{\"id\":1,\"name\":\"root\",\"parent\":null,\"child\":" + "{\"id\":2,\"name\":\"leaf\",\"parent\":1,\"child\":null}}", json); [EOL] }
public void testAlwaysIdForTree() throws Exception { [EOL]     TreeNode root = new TreeNode(null, 1, "root"); [EOL]     TreeNode leaf = new TreeNode(root, 2, "leaf"); [EOL]     root.child = leaf; [EOL]     String json = MAPPER.writeValueAsString(root); [EOL]     assertEquals("{\"id\":1,\"name\":\"root\",\"parent\":null,\"child\":" + "{\"id\":2,\"name\":\"leaf\",\"parent\":1,\"child\":null}}", json); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testFromIntCtor() throws Exception { [EOL]     CtorValueBean result = MAPPER.readValue("13", CtorValueBean.class); [EOL]     assertEquals("13", result.toString()); [EOL] }
public void testFromIntCtor() throws Exception { [EOL]     CtorValueBean result = MAPPER.readValue("13", CtorValueBean.class); [EOL]     assertEquals("13", result.toString()); [EOL] }
public void testFromIntCtor() throws Exception { [EOL]     CtorValueBean result = MAPPER.readValue("13", CtorValueBean.class); [EOL]     assertEquals("13", result.toString()); [EOL] }
public void testFromIntCtor() throws Exception { [EOL]     CtorValueBean result = MAPPER.readValue("13", CtorValueBean.class); [EOL]     assertEquals("13", result.toString()); [EOL] }
public void testFromIntCtor() throws Exception { [EOL]     CtorValueBean result = MAPPER.readValue("13", CtorValueBean.class); [EOL]     assertEquals("13", result.toString()); [EOL] }
public void testFromIntCtor() throws Exception { [EOL]     CtorValueBean result = MAPPER.readValue("13", CtorValueBean.class); [EOL]     assertEquals("13", result.toString()); [EOL] }
public void testFromIntCtor() throws Exception { [EOL]     CtorValueBean result = MAPPER.readValue("13", CtorValueBean.class); [EOL]     assertEquals("13", result.toString()); [EOL] }
public void testFromIntCtor() throws Exception { [EOL]     CtorValueBean result = MAPPER.readValue("13", CtorValueBean.class); [EOL]     assertEquals("13", result.toString()); [EOL] }
public void testFromIntCtor() throws Exception { [EOL]     CtorValueBean result = MAPPER.readValue("13", CtorValueBean.class); [EOL]     assertEquals("13", result.toString()); [EOL] }
public void testFromIntCtor() throws Exception { [EOL]     CtorValueBean result = MAPPER.readValue("13", CtorValueBean.class); [EOL]     assertEquals("13", result.toString()); [EOL] }
public void testFromIntCtor() throws Exception { [EOL]     CtorValueBean result = MAPPER.readValue("13", CtorValueBean.class); [EOL]     assertEquals("13", result.toString()); [EOL] }
public void testFromIntCtor() throws Exception { [EOL]     CtorValueBean result = MAPPER.readValue("13", CtorValueBean.class); [EOL]     assertEquals("13", result.toString()); [EOL] }
public void testFromIntCtor() throws Exception { [EOL]     CtorValueBean result = MAPPER.readValue("13", CtorValueBean.class); [EOL]     assertEquals("13", result.toString()); [EOL] }
public void testFromIntCtor() throws Exception { [EOL]     CtorValueBean result = MAPPER.readValue("13", CtorValueBean.class); [EOL]     assertEquals("13", result.toString()); [EOL] }
public void testPolymorphicRoundtrip() throws Exception { [EOL]     Impl in1 = new Impl(123, 456); [EOL]     in1.next = new Impl(111, 222); [EOL]     in1.next.next = in1; [EOL]     String json = mapper.writeValueAsString(in1); [EOL]     Base result0 = mapper.readValue(json, Base.class); [EOL]     assertNotNull(result0); [EOL]     assertSame(Impl.class, result0.getClass()); [EOL]     Impl result = (Impl) result0; [EOL]     assertEquals(123, result.value); [EOL]     assertEquals(456, result.extra); [EOL]     Impl result2 = (Impl) result.next; [EOL]     assertEquals(111, result2.value); [EOL]     assertEquals(222, result2.extra); [EOL]     assertSame(result, result2.next); [EOL] }
public void testPolymorphicRoundtrip() throws Exception { [EOL]     Impl in1 = new Impl(123, 456); [EOL]     in1.next = new Impl(111, 222); [EOL]     in1.next.next = in1; [EOL]     String json = mapper.writeValueAsString(in1); [EOL]     Base result0 = mapper.readValue(json, Base.class); [EOL]     assertNotNull(result0); [EOL]     assertSame(Impl.class, result0.getClass()); [EOL]     Impl result = (Impl) result0; [EOL]     assertEquals(123, result.value); [EOL]     assertEquals(456, result.extra); [EOL]     Impl result2 = (Impl) result.next; [EOL]     assertEquals(111, result2.value); [EOL]     assertEquals(222, result2.extra); [EOL]     assertSame(result, result2.next); [EOL] }
public void testPolymorphicRoundtrip() throws Exception { [EOL]     Impl in1 = new Impl(123, 456); [EOL]     in1.next = new Impl(111, 222); [EOL]     in1.next.next = in1; [EOL]     String json = mapper.writeValueAsString(in1); [EOL]     Base result0 = mapper.readValue(json, Base.class); [EOL]     assertNotNull(result0); [EOL]     assertSame(Impl.class, result0.getClass()); [EOL]     Impl result = (Impl) result0; [EOL]     assertEquals(123, result.value); [EOL]     assertEquals(456, result.extra); [EOL]     Impl result2 = (Impl) result.next; [EOL]     assertEquals(111, result2.value); [EOL]     assertEquals(222, result2.extra); [EOL]     assertSame(result, result2.next); [EOL] }
public void testPolymorphicRoundtrip() throws Exception { [EOL]     Impl in1 = new Impl(123, 456); [EOL]     in1.next = new Impl(111, 222); [EOL]     in1.next.next = in1; [EOL]     String json = mapper.writeValueAsString(in1); [EOL]     Base result0 = mapper.readValue(json, Base.class); [EOL]     assertNotNull(result0); [EOL]     assertSame(Impl.class, result0.getClass()); [EOL]     Impl result = (Impl) result0; [EOL]     assertEquals(123, result.value); [EOL]     assertEquals(456, result.extra); [EOL]     Impl result2 = (Impl) result.next; [EOL]     assertEquals(111, result2.value); [EOL]     assertEquals(222, result2.extra); [EOL]     assertSame(result, result2.next); [EOL] }
public void testDeserializeDecimalProperExceptionWhenIdSet() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = "{\"id\": 5, \"defaultValue\": { \"value\": \"123\" } }"; [EOL]     try { [EOL]         MyBeanHolder result = mapper.readValue(json, MyBeanHolder.class); [EOL]         fail("should have raised exception instead value was set to " + result.defaultValue.value.decimal.toString()); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "not numeric"); [EOL]     } [EOL] }
public void testDeserializeDecimalProperExceptionWhenIdSet() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = "{\"id\": 5, \"defaultValue\": { \"value\": \"123\" } }"; [EOL]     try { [EOL]         MyBeanHolder result = mapper.readValue(json, MyBeanHolder.class); [EOL]         fail("should have raised exception instead value was set to " + result.defaultValue.value.decimal.toString()); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "not numeric"); [EOL]     } [EOL] }
public void testDeserializeDecimalProperExceptionWhenIdSet() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = "{\"id\": 5, \"defaultValue\": { \"value\": \"123\" } }"; [EOL]     try { [EOL]         MyBeanHolder result = mapper.readValue(json, MyBeanHolder.class); [EOL]         fail("should have raised exception instead value was set to " + result.defaultValue.value.decimal.toString()); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "not numeric"); [EOL]     } [EOL] }
public void testDeserializeDecimalProperExceptionWhenIdSet() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = "{\"id\": 5, \"defaultValue\": { \"value\": \"123\" } }"; [EOL]     try { [EOL]         MyBeanHolder result = mapper.readValue(json, MyBeanHolder.class); [EOL]         fail("should have raised exception instead value was set to " + result.defaultValue.value.decimal.toString()); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "not numeric"); [EOL]     } [EOL] }
public void testDeserializeDecimalProperExceptionWhenIdSet() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = "{\"id\": 5, \"defaultValue\": { \"value\": \"123\" } }"; [EOL]     try { [EOL]         MyBeanHolder result = mapper.readValue(json, MyBeanHolder.class); [EOL]         fail("should have raised exception instead value was set to " + result.defaultValue.value.decimal.toString()); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "not numeric"); [EOL]     } [EOL] }
public void testDeserializeDecimalProperExceptionWhenIdSet() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = "{\"id\": 5, \"defaultValue\": { \"value\": \"123\" } }"; [EOL]     try { [EOL]         MyBeanHolder result = mapper.readValue(json, MyBeanHolder.class); [EOL]         fail("should have raised exception instead value was set to " + result.defaultValue.value.decimal.toString()); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "not numeric"); [EOL]     } [EOL] }
public void testDeserializeDecimalProperExceptionWhenIdSet() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = "{\"id\": 5, \"defaultValue\": { \"value\": \"123\" } }"; [EOL]     try { [EOL]         MyBeanHolder result = mapper.readValue(json, MyBeanHolder.class); [EOL]         fail("should have raised exception instead value was set to " + result.defaultValue.value.decimal.toString()); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "not numeric"); [EOL]     } [EOL] }
public void testDeserializeDecimalProperExceptionWhenIdSet() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = "{\"id\": 5, \"defaultValue\": { \"value\": \"123\" } }"; [EOL]     try { [EOL]         MyBeanHolder result = mapper.readValue(json, MyBeanHolder.class); [EOL]         fail("should have raised exception instead value was set to " + result.defaultValue.value.decimal.toString()); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "not numeric"); [EOL]     } [EOL] }
public void testUnwrappedDeserializeWithCreator() throws Exception { [EOL]     UnwrappingWithCreator bean = mapper.readValue("{\"x\":1,\"y\":2,\"name\":\"Tatu\"}", UnwrappingWithCreator.class); [EOL]     assertEquals("Tatu", bean.name); [EOL]     Location loc = bean.location; [EOL]     assertNotNull(loc); [EOL]     assertEquals(1, loc.x); [EOL]     assertEquals(2, loc.y); [EOL] }
public void testUnwrappedDeserializeWithCreator() throws Exception { [EOL]     UnwrappingWithCreator bean = mapper.readValue("{\"x\":1,\"y\":2,\"name\":\"Tatu\"}", UnwrappingWithCreator.class); [EOL]     assertEquals("Tatu", bean.name); [EOL]     Location loc = bean.location; [EOL]     assertNotNull(loc); [EOL]     assertEquals(1, loc.x); [EOL]     assertEquals(2, loc.y); [EOL] }
public void testUnwrappedDeserializeWithCreator() throws Exception { [EOL]     UnwrappingWithCreator bean = mapper.readValue("{\"x\":1,\"y\":2,\"name\":\"Tatu\"}", UnwrappingWithCreator.class); [EOL]     assertEquals("Tatu", bean.name); [EOL]     Location loc = bean.location; [EOL]     assertNotNull(loc); [EOL]     assertEquals(1, loc.x); [EOL]     assertEquals(2, loc.y); [EOL] }
public void testUnwrappedDeserializeWithCreator() throws Exception { [EOL]     UnwrappingWithCreator bean = mapper.readValue("{\"x\":1,\"y\":2,\"name\":\"Tatu\"}", UnwrappingWithCreator.class); [EOL]     assertEquals("Tatu", bean.name); [EOL]     Location loc = bean.location; [EOL]     assertNotNull(loc); [EOL]     assertEquals(1, loc.x); [EOL]     assertEquals(2, loc.y); [EOL] }
public void testUnwrappedDeserializeWithCreator() throws Exception { [EOL]     UnwrappingWithCreator bean = mapper.readValue("{\"x\":1,\"y\":2,\"name\":\"Tatu\"}", UnwrappingWithCreator.class); [EOL]     assertEquals("Tatu", bean.name); [EOL]     Location loc = bean.location; [EOL]     assertNotNull(loc); [EOL]     assertEquals(1, loc.x); [EOL]     assertEquals(2, loc.y); [EOL] }
public void testUnwrappedDeserializeWithCreator() throws Exception { [EOL]     UnwrappingWithCreator bean = mapper.readValue("{\"x\":1,\"y\":2,\"name\":\"Tatu\"}", UnwrappingWithCreator.class); [EOL]     assertEquals("Tatu", bean.name); [EOL]     Location loc = bean.location; [EOL]     assertNotNull(loc); [EOL]     assertEquals(1, loc.x); [EOL]     assertEquals(2, loc.y); [EOL] }
public void testUnwrappedDeserializeWithCreator() throws Exception { [EOL]     UnwrappingWithCreator bean = mapper.readValue("{\"x\":1,\"y\":2,\"name\":\"Tatu\"}", UnwrappingWithCreator.class); [EOL]     assertEquals("Tatu", bean.name); [EOL]     Location loc = bean.location; [EOL]     assertNotNull(loc); [EOL]     assertEquals(1, loc.x); [EOL]     assertEquals(2, loc.y); [EOL] }
public void testUnwrappedDeserializeWithCreator() throws Exception { [EOL]     UnwrappingWithCreator bean = mapper.readValue("{\"x\":1,\"y\":2,\"name\":\"Tatu\"}", UnwrappingWithCreator.class); [EOL]     assertEquals("Tatu", bean.name); [EOL]     Location loc = bean.location; [EOL]     assertNotNull(loc); [EOL]     assertEquals(1, loc.x); [EOL]     assertEquals(2, loc.y); [EOL] }
public void testUnwrappedDeserializeWithCreator() throws Exception { [EOL]     UnwrappingWithCreator bean = mapper.readValue("{\"x\":1,\"y\":2,\"name\":\"Tatu\"}", UnwrappingWithCreator.class); [EOL]     assertEquals("Tatu", bean.name); [EOL]     Location loc = bean.location; [EOL]     assertNotNull(loc); [EOL]     assertEquals(1, loc.x); [EOL]     assertEquals(2, loc.y); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testSerializeAsForSimpleProp() throws IOException { [EOL]     assertEquals("{\"foo\":{\"foo\":42}}", WRITER.writeValueAsString(new FooableWrapper())); [EOL] }
public void testSerializeAsForSimpleProp() throws IOException { [EOL]     assertEquals("{\"foo\":{\"foo\":42}}", WRITER.writeValueAsString(new FooableWrapper())); [EOL] }
public void testSerializeAsForSimpleProp() throws IOException { [EOL]     assertEquals("{\"foo\":{\"foo\":42}}", WRITER.writeValueAsString(new FooableWrapper())); [EOL] }
public void testSerializeAsForSimpleProp() throws IOException { [EOL]     assertEquals("{\"foo\":{\"foo\":42}}", WRITER.writeValueAsString(new FooableWrapper())); [EOL] }
public void testSerializeAsForSimpleProp() throws IOException { [EOL]     assertEquals("{\"foo\":{\"foo\":42}}", WRITER.writeValueAsString(new FooableWrapper())); [EOL] }
public void testSerializeAsForSimpleProp() throws IOException { [EOL]     assertEquals("{\"foo\":{\"foo\":42}}", WRITER.writeValueAsString(new FooableWrapper())); [EOL] }
public void testSerializeAsForSimpleProp() throws IOException { [EOL]     assertEquals("{\"foo\":{\"foo\":42}}", WRITER.writeValueAsString(new FooableWrapper())); [EOL] }
public void testSerializeAsForSimpleProp() throws IOException { [EOL]     assertEquals("{\"foo\":{\"foo\":42}}", WRITER.writeValueAsString(new FooableWrapper())); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testPolymorphicRoundtrip() throws Exception { [EOL]     Impl in1 = new Impl(123, 456); [EOL]     in1.next = new Impl(111, 222); [EOL]     in1.next.next = in1; [EOL]     String json = mapper.writeValueAsString(in1); [EOL]     Base result0 = mapper.readValue(json, Base.class); [EOL]     assertNotNull(result0); [EOL]     assertSame(Impl.class, result0.getClass()); [EOL]     Impl result = (Impl) result0; [EOL]     assertEquals(123, result.value); [EOL]     assertEquals(456, result.extra); [EOL]     Impl result2 = (Impl) result.next; [EOL]     assertEquals(111, result2.value); [EOL]     assertEquals(222, result2.extra); [EOL]     assertSame(result, result2.next); [EOL] }
public void testPolymorphicRoundtrip() throws Exception { [EOL]     Impl in1 = new Impl(123, 456); [EOL]     in1.next = new Impl(111, 222); [EOL]     in1.next.next = in1; [EOL]     String json = mapper.writeValueAsString(in1); [EOL]     Base result0 = mapper.readValue(json, Base.class); [EOL]     assertNotNull(result0); [EOL]     assertSame(Impl.class, result0.getClass()); [EOL]     Impl result = (Impl) result0; [EOL]     assertEquals(123, result.value); [EOL]     assertEquals(456, result.extra); [EOL]     Impl result2 = (Impl) result.next; [EOL]     assertEquals(111, result2.value); [EOL]     assertEquals(222, result2.extra); [EOL]     assertSame(result, result2.next); [EOL] }
public void testPolymorphicRoundtrip() throws Exception { [EOL]     Impl in1 = new Impl(123, 456); [EOL]     in1.next = new Impl(111, 222); [EOL]     in1.next.next = in1; [EOL]     String json = mapper.writeValueAsString(in1); [EOL]     Base result0 = mapper.readValue(json, Base.class); [EOL]     assertNotNull(result0); [EOL]     assertSame(Impl.class, result0.getClass()); [EOL]     Impl result = (Impl) result0; [EOL]     assertEquals(123, result.value); [EOL]     assertEquals(456, result.extra); [EOL]     Impl result2 = (Impl) result.next; [EOL]     assertEquals(111, result2.value); [EOL]     assertEquals(222, result2.extra); [EOL]     assertSame(result, result2.next); [EOL] }
public void testPolymorphicRoundtrip() throws Exception { [EOL]     Impl in1 = new Impl(123, 456); [EOL]     in1.next = new Impl(111, 222); [EOL]     in1.next.next = in1; [EOL]     String json = mapper.writeValueAsString(in1); [EOL]     Base result0 = mapper.readValue(json, Base.class); [EOL]     assertNotNull(result0); [EOL]     assertSame(Impl.class, result0.getClass()); [EOL]     Impl result = (Impl) result0; [EOL]     assertEquals(123, result.value); [EOL]     assertEquals(456, result.extra); [EOL]     Impl result2 = (Impl) result.next; [EOL]     assertEquals(111, result2.value); [EOL]     assertEquals(222, result2.extra); [EOL]     assertSame(result, result2.next); [EOL] }
public void testFloatArray() throws Exception { [EOL]     final int LEN = 7000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(i).append('.').append(i % 10); [EOL]     } [EOL]     sb.append(']'); [EOL]     float[] result = MAPPER.readValue(sb.toString(), float[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         String expStr = String.valueOf(i) + "." + String.valueOf(i % 10); [EOL]         assertEquals(expStr, String.valueOf(result[i])); [EOL]     } [EOL] }
public void testFloatArray() throws Exception { [EOL]     final int LEN = 7000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(i).append('.').append(i % 10); [EOL]     } [EOL]     sb.append(']'); [EOL]     float[] result = MAPPER.readValue(sb.toString(), float[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         String expStr = String.valueOf(i) + "." + String.valueOf(i % 10); [EOL]         assertEquals(expStr, String.valueOf(result[i])); [EOL]     } [EOL] }
public void testFloatArray() throws Exception { [EOL]     final int LEN = 7000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(i).append('.').append(i % 10); [EOL]     } [EOL]     sb.append(']'); [EOL]     float[] result = MAPPER.readValue(sb.toString(), float[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         String expStr = String.valueOf(i) + "." + String.valueOf(i % 10); [EOL]         assertEquals(expStr, String.valueOf(result[i])); [EOL]     } [EOL] }
public void testFloatArray() throws Exception { [EOL]     final int LEN = 7000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(i).append('.').append(i % 10); [EOL]     } [EOL]     sb.append(']'); [EOL]     float[] result = MAPPER.readValue(sb.toString(), float[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         String expStr = String.valueOf(i) + "." + String.valueOf(i % 10); [EOL]         assertEquals(expStr, String.valueOf(result[i])); [EOL]     } [EOL] }
public void testFloatArray() throws Exception { [EOL]     final int LEN = 7000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(i).append('.').append(i % 10); [EOL]     } [EOL]     sb.append(']'); [EOL]     float[] result = MAPPER.readValue(sb.toString(), float[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         String expStr = String.valueOf(i) + "." + String.valueOf(i % 10); [EOL]         assertEquals(expStr, String.valueOf(result[i])); [EOL]     } [EOL] }
public void testFloatArray() throws Exception { [EOL]     final int LEN = 7000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(i).append('.').append(i % 10); [EOL]     } [EOL]     sb.append(']'); [EOL]     float[] result = MAPPER.readValue(sb.toString(), float[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         String expStr = String.valueOf(i) + "." + String.valueOf(i % 10); [EOL]         assertEquals(expStr, String.valueOf(result[i])); [EOL]     } [EOL] }
public void testFloatArray() throws Exception { [EOL]     final int LEN = 7000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(i).append('.').append(i % 10); [EOL]     } [EOL]     sb.append(']'); [EOL]     float[] result = MAPPER.readValue(sb.toString(), float[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         String expStr = String.valueOf(i) + "." + String.valueOf(i % 10); [EOL]         assertEquals(expStr, String.valueOf(result[i])); [EOL]     } [EOL] }
public void testFloatArray() throws Exception { [EOL]     final int LEN = 7000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(i).append('.').append(i % 10); [EOL]     } [EOL]     sb.append(']'); [EOL]     float[] result = MAPPER.readValue(sb.toString(), float[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         String expStr = String.valueOf(i) + "." + String.valueOf(i % 10); [EOL]         assertEquals(expStr, String.valueOf(result[i])); [EOL]     } [EOL] }
public void testFloatArray() throws Exception { [EOL]     final int LEN = 7000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(i).append('.').append(i % 10); [EOL]     } [EOL]     sb.append(']'); [EOL]     float[] result = MAPPER.readValue(sb.toString(), float[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         String expStr = String.valueOf(i) + "." + String.valueOf(i % 10); [EOL]         assertEquals(expStr, String.valueOf(result[i])); [EOL]     } [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testImplicitArrays() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true); [EOL]     List<Integer> ints = mapper.readValue("4", List.class); [EOL]     assertEquals(1, ints.size()); [EOL]     assertEquals(Integer.valueOf(4), ints.get(0)); [EOL]     List<String> strings = mapper.readValue(quote("abc"), new TypeReference<ArrayList<String>>() { [EOL]     }); [EOL]     assertEquals(1, strings.size()); [EOL]     assertEquals("abc", strings.get(0)); [EOL]     int[] intArray = mapper.readValue("-7", int[].class); [EOL]     assertEquals(1, intArray.length); [EOL]     assertEquals(-7, intArray[0]); [EOL]     String[] stringArray = mapper.readValue(quote("xyz"), String[].class); [EOL]     assertEquals(1, stringArray.length); [EOL]     assertEquals("xyz", stringArray[0]); [EOL]     List<XBean> xbeanList = mapper.readValue("{\"x\":4}", new TypeReference<List<XBean>>() { [EOL]     }); [EOL]     assertEquals(1, xbeanList.size()); [EOL]     assertEquals(XBean.class, xbeanList.get(0).getClass()); [EOL]     Object ob = mapper.readValue("{\"x\":29}", XBean[].class); [EOL]     XBean[] xbeanArray = (XBean[]) ob; [EOL]     assertEquals(1, xbeanArray.length); [EOL]     assertEquals(XBean.class, xbeanArray[0].getClass()); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testImplicitArrays() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true); [EOL]     List<Integer> ints = mapper.readValue("4", List.class); [EOL]     assertEquals(1, ints.size()); [EOL]     assertEquals(Integer.valueOf(4), ints.get(0)); [EOL]     List<String> strings = mapper.readValue(quote("abc"), new TypeReference<ArrayList<String>>() { [EOL]     }); [EOL]     assertEquals(1, strings.size()); [EOL]     assertEquals("abc", strings.get(0)); [EOL]     int[] intArray = mapper.readValue("-7", int[].class); [EOL]     assertEquals(1, intArray.length); [EOL]     assertEquals(-7, intArray[0]); [EOL]     String[] stringArray = mapper.readValue(quote("xyz"), String[].class); [EOL]     assertEquals(1, stringArray.length); [EOL]     assertEquals("xyz", stringArray[0]); [EOL]     List<XBean> xbeanList = mapper.readValue("{\"x\":4}", new TypeReference<List<XBean>>() { [EOL]     }); [EOL]     assertEquals(1, xbeanList.size()); [EOL]     assertEquals(XBean.class, xbeanList.get(0).getClass()); [EOL]     Object ob = mapper.readValue("{\"x\":29}", XBean[].class); [EOL]     XBean[] xbeanArray = (XBean[]) ob; [EOL]     assertEquals(1, xbeanArray.length); [EOL]     assertEquals(XBean.class, xbeanArray[0].getClass()); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testImplicitArrays() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true); [EOL]     List<Integer> ints = mapper.readValue("4", List.class); [EOL]     assertEquals(1, ints.size()); [EOL]     assertEquals(Integer.valueOf(4), ints.get(0)); [EOL]     List<String> strings = mapper.readValue(quote("abc"), new TypeReference<ArrayList<String>>() { [EOL]     }); [EOL]     assertEquals(1, strings.size()); [EOL]     assertEquals("abc", strings.get(0)); [EOL]     int[] intArray = mapper.readValue("-7", int[].class); [EOL]     assertEquals(1, intArray.length); [EOL]     assertEquals(-7, intArray[0]); [EOL]     String[] stringArray = mapper.readValue(quote("xyz"), String[].class); [EOL]     assertEquals(1, stringArray.length); [EOL]     assertEquals("xyz", stringArray[0]); [EOL]     List<XBean> xbeanList = mapper.readValue("{\"x\":4}", new TypeReference<List<XBean>>() { [EOL]     }); [EOL]     assertEquals(1, xbeanList.size()); [EOL]     assertEquals(XBean.class, xbeanList.get(0).getClass()); [EOL]     Object ob = mapper.readValue("{\"x\":29}", XBean[].class); [EOL]     XBean[] xbeanArray = (XBean[]) ob; [EOL]     assertEquals(1, xbeanArray.length); [EOL]     assertEquals(XBean.class, xbeanArray[0].getClass()); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testImplicitArrays() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true); [EOL]     List<Integer> ints = mapper.readValue("4", List.class); [EOL]     assertEquals(1, ints.size()); [EOL]     assertEquals(Integer.valueOf(4), ints.get(0)); [EOL]     List<String> strings = mapper.readValue(quote("abc"), new TypeReference<ArrayList<String>>() { [EOL]     }); [EOL]     assertEquals(1, strings.size()); [EOL]     assertEquals("abc", strings.get(0)); [EOL]     int[] intArray = mapper.readValue("-7", int[].class); [EOL]     assertEquals(1, intArray.length); [EOL]     assertEquals(-7, intArray[0]); [EOL]     String[] stringArray = mapper.readValue(quote("xyz"), String[].class); [EOL]     assertEquals(1, stringArray.length); [EOL]     assertEquals("xyz", stringArray[0]); [EOL]     List<XBean> xbeanList = mapper.readValue("{\"x\":4}", new TypeReference<List<XBean>>() { [EOL]     }); [EOL]     assertEquals(1, xbeanList.size()); [EOL]     assertEquals(XBean.class, xbeanList.get(0).getClass()); [EOL]     Object ob = mapper.readValue("{\"x\":29}", XBean[].class); [EOL]     XBean[] xbeanArray = (XBean[]) ob; [EOL]     assertEquals(1, xbeanArray.length); [EOL]     assertEquals(XBean.class, xbeanArray[0].getClass()); [EOL] }
public void testFloatArray() throws Exception { [EOL]     final int LEN = 7000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(i).append('.').append(i % 10); [EOL]     } [EOL]     sb.append(']'); [EOL]     float[] result = MAPPER.readValue(sb.toString(), float[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         String expStr = String.valueOf(i) + "." + String.valueOf(i % 10); [EOL]         assertEquals(expStr, String.valueOf(result[i])); [EOL]     } [EOL] }
public void testFloatArray() throws Exception { [EOL]     final int LEN = 7000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(i).append('.').append(i % 10); [EOL]     } [EOL]     sb.append(']'); [EOL]     float[] result = MAPPER.readValue(sb.toString(), float[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         String expStr = String.valueOf(i) + "." + String.valueOf(i % 10); [EOL]         assertEquals(expStr, String.valueOf(result[i])); [EOL]     } [EOL] }
public void testFloatArray() throws Exception { [EOL]     final int LEN = 7000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(i).append('.').append(i % 10); [EOL]     } [EOL]     sb.append(']'); [EOL]     float[] result = MAPPER.readValue(sb.toString(), float[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         String expStr = String.valueOf(i) + "." + String.valueOf(i % 10); [EOL]         assertEquals(expStr, String.valueOf(result[i])); [EOL]     } [EOL] }
public void testFloatArray() throws Exception { [EOL]     final int LEN = 7000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(i).append('.').append(i % 10); [EOL]     } [EOL]     sb.append(']'); [EOL]     float[] result = MAPPER.readValue(sb.toString(), float[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         String expStr = String.valueOf(i) + "." + String.valueOf(i % 10); [EOL]         assertEquals(expStr, String.valueOf(result[i])); [EOL]     } [EOL] }
public void testFloatArray() throws Exception { [EOL]     final int LEN = 7000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(i).append('.').append(i % 10); [EOL]     } [EOL]     sb.append(']'); [EOL]     float[] result = MAPPER.readValue(sb.toString(), float[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         String expStr = String.valueOf(i) + "." + String.valueOf(i % 10); [EOL]         assertEquals(expStr, String.valueOf(result[i])); [EOL]     } [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testMixedRefsIssue188() throws Exception { [EOL]     Company comp = new Company(); [EOL]     Employee e1 = new Employee(1, "First", null); [EOL]     Employee e2 = new Employee(2, "Second", e1); [EOL]     e1.addReport(e2); [EOL]     comp.add(e1); [EOL]     comp.add(e2); [EOL]     String json = MAPPER.writeValueAsString(comp); [EOL]     assertEquals("{\"employees\":[" + "{\"id\":1,\"name\":\"First\",\"manager\":null,\"reports\":[2]}," + "{\"id\":2,\"name\":\"Second\",\"manager\":1,\"reports\":[]}" + "]}", json); [EOL] }
public void testMixedRefsIssue188() throws Exception { [EOL]     Company comp = new Company(); [EOL]     Employee e1 = new Employee(1, "First", null); [EOL]     Employee e2 = new Employee(2, "Second", e1); [EOL]     e1.addReport(e2); [EOL]     comp.add(e1); [EOL]     comp.add(e2); [EOL]     String json = MAPPER.writeValueAsString(comp); [EOL]     assertEquals("{\"employees\":[" + "{\"id\":1,\"name\":\"First\",\"manager\":null,\"reports\":[2]}," + "{\"id\":2,\"name\":\"Second\",\"manager\":1,\"reports\":[]}" + "]}", json); [EOL] }
public void testMixedRefsIssue188() throws Exception { [EOL]     Company comp = new Company(); [EOL]     Employee e1 = new Employee(1, "First", null); [EOL]     Employee e2 = new Employee(2, "Second", e1); [EOL]     e1.addReport(e2); [EOL]     comp.add(e1); [EOL]     comp.add(e2); [EOL]     String json = MAPPER.writeValueAsString(comp); [EOL]     assertEquals("{\"employees\":[" + "{\"id\":1,\"name\":\"First\",\"manager\":null,\"reports\":[2]}," + "{\"id\":2,\"name\":\"Second\",\"manager\":1,\"reports\":[]}" + "]}", json); [EOL] }
public void testMixedRefsIssue188() throws Exception { [EOL]     Company comp = new Company(); [EOL]     Employee e1 = new Employee(1, "First", null); [EOL]     Employee e2 = new Employee(2, "Second", e1); [EOL]     e1.addReport(e2); [EOL]     comp.add(e1); [EOL]     comp.add(e2); [EOL]     String json = MAPPER.writeValueAsString(comp); [EOL]     assertEquals("{\"employees\":[" + "{\"id\":1,\"name\":\"First\",\"manager\":null,\"reports\":[2]}," + "{\"id\":2,\"name\":\"Second\",\"manager\":1,\"reports\":[]}" + "]}", json); [EOL] }
public void testMixedRefsIssue188() throws Exception { [EOL]     Company comp = new Company(); [EOL]     Employee e1 = new Employee(1, "First", null); [EOL]     Employee e2 = new Employee(2, "Second", e1); [EOL]     e1.addReport(e2); [EOL]     comp.add(e1); [EOL]     comp.add(e2); [EOL]     String json = MAPPER.writeValueAsString(comp); [EOL]     assertEquals("{\"employees\":[" + "{\"id\":1,\"name\":\"First\",\"manager\":null,\"reports\":[2]}," + "{\"id\":2,\"name\":\"Second\",\"manager\":1,\"reports\":[]}" + "]}", json); [EOL] }
public void testTagList() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     TagList list = new TagList(); [EOL]     list.add(Tag.A); [EOL]     list.add(Tag.B); [EOL]     String json = m.writeValueAsString(list); [EOL]     TagList result = m.readValue(json, TagList.class); [EOL]     assertEquals(2, result.size()); [EOL]     assertSame(Tag.A, result.get(0)); [EOL]     assertSame(Tag.B, result.get(1)); [EOL] }
public void testTagList() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     TagList list = new TagList(); [EOL]     list.add(Tag.A); [EOL]     list.add(Tag.B); [EOL]     String json = m.writeValueAsString(list); [EOL]     TagList result = m.readValue(json, TagList.class); [EOL]     assertEquals(2, result.size()); [EOL]     assertSame(Tag.A, result.get(0)); [EOL]     assertSame(Tag.B, result.get(1)); [EOL] }
public void testTagList() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     TagList list = new TagList(); [EOL]     list.add(Tag.A); [EOL]     list.add(Tag.B); [EOL]     String json = m.writeValueAsString(list); [EOL]     TagList result = m.readValue(json, TagList.class); [EOL]     assertEquals(2, result.size()); [EOL]     assertSame(Tag.A, result.get(0)); [EOL]     assertSame(Tag.B, result.get(1)); [EOL] }
public void testTagList() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     TagList list = new TagList(); [EOL]     list.add(Tag.A); [EOL]     list.add(Tag.B); [EOL]     String json = m.writeValueAsString(list); [EOL]     TagList result = m.readValue(json, TagList.class); [EOL]     assertEquals(2, result.size()); [EOL]     assertSame(Tag.A, result.get(0)); [EOL]     assertSame(Tag.B, result.get(1)); [EOL] }
public void testTagList() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     TagList list = new TagList(); [EOL]     list.add(Tag.A); [EOL]     list.add(Tag.B); [EOL]     String json = m.writeValueAsString(list); [EOL]     TagList result = m.readValue(json, TagList.class); [EOL]     assertEquals(2, result.size()); [EOL]     assertSame(Tag.A, result.get(0)); [EOL]     assertSame(Tag.B, result.get(1)); [EOL] }
public void testRetain() { [EOL]     ObjectNode ob = MAPPER.createObjectNode(); [EOL]     ob.put("a", "a"); [EOL]     ob.put("b", "b"); [EOL]     ob.put("c", "c"); [EOL]     assertEquals(3, ob.size()); [EOL]     assertSame(ob, ob.retain("a", "c")); [EOL]     assertEquals(2, ob.size()); [EOL]     assertEquals("a", ob.get("a").textValue()); [EOL]     assertNull(ob.get("b")); [EOL]     assertEquals("c", ob.get("c").textValue()); [EOL] }
public void testRetain() { [EOL]     ObjectNode ob = MAPPER.createObjectNode(); [EOL]     ob.put("a", "a"); [EOL]     ob.put("b", "b"); [EOL]     ob.put("c", "c"); [EOL]     assertEquals(3, ob.size()); [EOL]     assertSame(ob, ob.retain("a", "c")); [EOL]     assertEquals(2, ob.size()); [EOL]     assertEquals("a", ob.get("a").textValue()); [EOL]     assertNull(ob.get("b")); [EOL]     assertEquals("c", ob.get("c").textValue()); [EOL] }
public void testRetain() { [EOL]     ObjectNode ob = MAPPER.createObjectNode(); [EOL]     ob.put("a", "a"); [EOL]     ob.put("b", "b"); [EOL]     ob.put("c", "c"); [EOL]     assertEquals(3, ob.size()); [EOL]     assertSame(ob, ob.retain("a", "c")); [EOL]     assertEquals(2, ob.size()); [EOL]     assertEquals("a", ob.get("a").textValue()); [EOL]     assertNull(ob.get("b")); [EOL]     assertEquals("c", ob.get("c").textValue()); [EOL] }
public void testPropertyAnnotationForLists() throws Exception { [EOL]     PointListWrapperList array = objectReader(PointListWrapperList.class).readValue("{\"values\":[[7,8],[8,7]]}"); [EOL]     assertNotNull(array); [EOL]     assertNotNull(array.values); [EOL]     assertEquals(2, array.values.size()); [EOL]     assertEquals(7, array.values.get(0).x); [EOL] }
public void testPropertyAnnotationForLists() throws Exception { [EOL]     PointListWrapperList array = objectReader(PointListWrapperList.class).readValue("{\"values\":[[7,8],[8,7]]}"); [EOL]     assertNotNull(array); [EOL]     assertNotNull(array.values); [EOL]     assertEquals(2, array.values.size()); [EOL]     assertEquals(7, array.values.get(0).x); [EOL] }
public void testPropertyAnnotationForLists() throws Exception { [EOL]     PointListWrapperList array = objectReader(PointListWrapperList.class).readValue("{\"values\":[[7,8],[8,7]]}"); [EOL]     assertNotNull(array); [EOL]     assertNotNull(array.values); [EOL]     assertEquals(2, array.values.size()); [EOL]     assertEquals(7, array.values.get(0).x); [EOL] }
public void testPropertyAnnotationForLists() throws Exception { [EOL]     PointListWrapperList array = objectReader(PointListWrapperList.class).readValue("{\"values\":[[7,8],[8,7]]}"); [EOL]     assertNotNull(array); [EOL]     assertNotNull(array.values); [EOL]     assertEquals(2, array.values.size()); [EOL]     assertEquals(7, array.values.get(0).x); [EOL] }
public void testListOfRefs() throws Exception { [EOL]     NodeList root = new NodeList(); [EOL]     NodeForList node1 = new NodeForList("a"); [EOL]     NodeForList node2 = new NodeForList("b"); [EOL]     root.nodes = Arrays.asList(node1, node2); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = mapper.writeValueAsString(root); [EOL]     NodeList result = mapper.readValue(json, NodeList.class); [EOL]     List<NodeForList> kids = result.nodes; [EOL]     assertNotNull(kids); [EOL]     assertEquals(2, kids.size()); [EOL]     assertEquals("a", kids.get(0).name); [EOL]     assertEquals("b", kids.get(1).name); [EOL]     assertSame(result, kids.get(0).parent); [EOL]     assertSame(result, kids.get(1).parent); [EOL] }
public void testListOfRefs() throws Exception { [EOL]     NodeList root = new NodeList(); [EOL]     NodeForList node1 = new NodeForList("a"); [EOL]     NodeForList node2 = new NodeForList("b"); [EOL]     root.nodes = Arrays.asList(node1, node2); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = mapper.writeValueAsString(root); [EOL]     NodeList result = mapper.readValue(json, NodeList.class); [EOL]     List<NodeForList> kids = result.nodes; [EOL]     assertNotNull(kids); [EOL]     assertEquals(2, kids.size()); [EOL]     assertEquals("a", kids.get(0).name); [EOL]     assertEquals("b", kids.get(1).name); [EOL]     assertSame(result, kids.get(0).parent); [EOL]     assertSame(result, kids.get(1).parent); [EOL] }
public void testFromEmptyString2() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true); [EOL]     m.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true); [EOL]     Product p = m.readValue("{\"thelist\":\"\"}", Product.class); [EOL]     assertNotNull(p); [EOL]     assertNull(p.thelist); [EOL] }
public void testFromEmptyString2() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true); [EOL]     m.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true); [EOL]     Product p = m.readValue("{\"thelist\":\"\"}", Product.class); [EOL]     assertNotNull(p); [EOL]     assertNull(p.thelist); [EOL] }
public void testFromEmptyString2() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true); [EOL]     m.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true); [EOL]     Product p = m.readValue("{\"thelist\":\"\"}", Product.class); [EOL]     assertNotNull(p); [EOL]     assertNull(p.thelist); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testImplicitArrays() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true); [EOL]     List<Integer> ints = mapper.readValue("4", List.class); [EOL]     assertEquals(1, ints.size()); [EOL]     assertEquals(Integer.valueOf(4), ints.get(0)); [EOL]     List<String> strings = mapper.readValue(quote("abc"), new TypeReference<ArrayList<String>>() { [EOL]     }); [EOL]     assertEquals(1, strings.size()); [EOL]     assertEquals("abc", strings.get(0)); [EOL]     int[] intArray = mapper.readValue("-7", int[].class); [EOL]     assertEquals(1, intArray.length); [EOL]     assertEquals(-7, intArray[0]); [EOL]     String[] stringArray = mapper.readValue(quote("xyz"), String[].class); [EOL]     assertEquals(1, stringArray.length); [EOL]     assertEquals("xyz", stringArray[0]); [EOL]     List<XBean> xbeanList = mapper.readValue("{\"x\":4}", new TypeReference<List<XBean>>() { [EOL]     }); [EOL]     assertEquals(1, xbeanList.size()); [EOL]     assertEquals(XBean.class, xbeanList.get(0).getClass()); [EOL]     Object ob = mapper.readValue("{\"x\":29}", XBean[].class); [EOL]     XBean[] xbeanArray = (XBean[]) ob; [EOL]     assertEquals(1, xbeanArray.length); [EOL]     assertEquals(XBean.class, xbeanArray[0].getClass()); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testImplicitArrays() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true); [EOL]     List<Integer> ints = mapper.readValue("4", List.class); [EOL]     assertEquals(1, ints.size()); [EOL]     assertEquals(Integer.valueOf(4), ints.get(0)); [EOL]     List<String> strings = mapper.readValue(quote("abc"), new TypeReference<ArrayList<String>>() { [EOL]     }); [EOL]     assertEquals(1, strings.size()); [EOL]     assertEquals("abc", strings.get(0)); [EOL]     int[] intArray = mapper.readValue("-7", int[].class); [EOL]     assertEquals(1, intArray.length); [EOL]     assertEquals(-7, intArray[0]); [EOL]     String[] stringArray = mapper.readValue(quote("xyz"), String[].class); [EOL]     assertEquals(1, stringArray.length); [EOL]     assertEquals("xyz", stringArray[0]); [EOL]     List<XBean> xbeanList = mapper.readValue("{\"x\":4}", new TypeReference<List<XBean>>() { [EOL]     }); [EOL]     assertEquals(1, xbeanList.size()); [EOL]     assertEquals(XBean.class, xbeanList.get(0).getClass()); [EOL]     Object ob = mapper.readValue("{\"x\":29}", XBean[].class); [EOL]     XBean[] xbeanArray = (XBean[]) ob; [EOL]     assertEquals(1, xbeanArray.length); [EOL]     assertEquals(XBean.class, xbeanArray[0].getClass()); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testImplicitArrays() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true); [EOL]     List<Integer> ints = mapper.readValue("4", List.class); [EOL]     assertEquals(1, ints.size()); [EOL]     assertEquals(Integer.valueOf(4), ints.get(0)); [EOL]     List<String> strings = mapper.readValue(quote("abc"), new TypeReference<ArrayList<String>>() { [EOL]     }); [EOL]     assertEquals(1, strings.size()); [EOL]     assertEquals("abc", strings.get(0)); [EOL]     int[] intArray = mapper.readValue("-7", int[].class); [EOL]     assertEquals(1, intArray.length); [EOL]     assertEquals(-7, intArray[0]); [EOL]     String[] stringArray = mapper.readValue(quote("xyz"), String[].class); [EOL]     assertEquals(1, stringArray.length); [EOL]     assertEquals("xyz", stringArray[0]); [EOL]     List<XBean> xbeanList = mapper.readValue("{\"x\":4}", new TypeReference<List<XBean>>() { [EOL]     }); [EOL]     assertEquals(1, xbeanList.size()); [EOL]     assertEquals(XBean.class, xbeanList.get(0).getClass()); [EOL]     Object ob = mapper.readValue("{\"x\":29}", XBean[].class); [EOL]     XBean[] xbeanArray = (XBean[]) ob; [EOL]     assertEquals(1, xbeanArray.length); [EOL]     assertEquals(XBean.class, xbeanArray[0].getClass()); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testImplicitArrays() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true); [EOL]     List<Integer> ints = mapper.readValue("4", List.class); [EOL]     assertEquals(1, ints.size()); [EOL]     assertEquals(Integer.valueOf(4), ints.get(0)); [EOL]     List<String> strings = mapper.readValue(quote("abc"), new TypeReference<ArrayList<String>>() { [EOL]     }); [EOL]     assertEquals(1, strings.size()); [EOL]     assertEquals("abc", strings.get(0)); [EOL]     int[] intArray = mapper.readValue("-7", int[].class); [EOL]     assertEquals(1, intArray.length); [EOL]     assertEquals(-7, intArray[0]); [EOL]     String[] stringArray = mapper.readValue(quote("xyz"), String[].class); [EOL]     assertEquals(1, stringArray.length); [EOL]     assertEquals("xyz", stringArray[0]); [EOL]     List<XBean> xbeanList = mapper.readValue("{\"x\":4}", new TypeReference<List<XBean>>() { [EOL]     }); [EOL]     assertEquals(1, xbeanList.size()); [EOL]     assertEquals(XBean.class, xbeanList.get(0).getClass()); [EOL]     Object ob = mapper.readValue("{\"x\":29}", XBean[].class); [EOL]     XBean[] xbeanArray = (XBean[]) ob; [EOL]     assertEquals(1, xbeanArray.length); [EOL]     assertEquals(XBean.class, xbeanArray[0].getClass()); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testImplicitArrays() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true); [EOL]     List<Integer> ints = mapper.readValue("4", List.class); [EOL]     assertEquals(1, ints.size()); [EOL]     assertEquals(Integer.valueOf(4), ints.get(0)); [EOL]     List<String> strings = mapper.readValue(quote("abc"), new TypeReference<ArrayList<String>>() { [EOL]     }); [EOL]     assertEquals(1, strings.size()); [EOL]     assertEquals("abc", strings.get(0)); [EOL]     int[] intArray = mapper.readValue("-7", int[].class); [EOL]     assertEquals(1, intArray.length); [EOL]     assertEquals(-7, intArray[0]); [EOL]     String[] stringArray = mapper.readValue(quote("xyz"), String[].class); [EOL]     assertEquals(1, stringArray.length); [EOL]     assertEquals("xyz", stringArray[0]); [EOL]     List<XBean> xbeanList = mapper.readValue("{\"x\":4}", new TypeReference<List<XBean>>() { [EOL]     }); [EOL]     assertEquals(1, xbeanList.size()); [EOL]     assertEquals(XBean.class, xbeanList.get(0).getClass()); [EOL]     Object ob = mapper.readValue("{\"x\":29}", XBean[].class); [EOL]     XBean[] xbeanArray = (XBean[]) ob; [EOL]     assertEquals(1, xbeanArray.length); [EOL]     assertEquals(XBean.class, xbeanArray[0].getClass()); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testImplicitArrays() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true); [EOL]     List<Integer> ints = mapper.readValue("4", List.class); [EOL]     assertEquals(1, ints.size()); [EOL]     assertEquals(Integer.valueOf(4), ints.get(0)); [EOL]     List<String> strings = mapper.readValue(quote("abc"), new TypeReference<ArrayList<String>>() { [EOL]     }); [EOL]     assertEquals(1, strings.size()); [EOL]     assertEquals("abc", strings.get(0)); [EOL]     int[] intArray = mapper.readValue("-7", int[].class); [EOL]     assertEquals(1, intArray.length); [EOL]     assertEquals(-7, intArray[0]); [EOL]     String[] stringArray = mapper.readValue(quote("xyz"), String[].class); [EOL]     assertEquals(1, stringArray.length); [EOL]     assertEquals("xyz", stringArray[0]); [EOL]     List<XBean> xbeanList = mapper.readValue("{\"x\":4}", new TypeReference<List<XBean>>() { [EOL]     }); [EOL]     assertEquals(1, xbeanList.size()); [EOL]     assertEquals(XBean.class, xbeanList.get(0).getClass()); [EOL]     Object ob = mapper.readValue("{\"x\":29}", XBean[].class); [EOL]     XBean[] xbeanArray = (XBean[]) ob; [EOL]     assertEquals(1, xbeanArray.length); [EOL]     assertEquals(XBean.class, xbeanArray[0].getClass()); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testImplicitArrays() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true); [EOL]     List<Integer> ints = mapper.readValue("4", List.class); [EOL]     assertEquals(1, ints.size()); [EOL]     assertEquals(Integer.valueOf(4), ints.get(0)); [EOL]     List<String> strings = mapper.readValue(quote("abc"), new TypeReference<ArrayList<String>>() { [EOL]     }); [EOL]     assertEquals(1, strings.size()); [EOL]     assertEquals("abc", strings.get(0)); [EOL]     int[] intArray = mapper.readValue("-7", int[].class); [EOL]     assertEquals(1, intArray.length); [EOL]     assertEquals(-7, intArray[0]); [EOL]     String[] stringArray = mapper.readValue(quote("xyz"), String[].class); [EOL]     assertEquals(1, stringArray.length); [EOL]     assertEquals("xyz", stringArray[0]); [EOL]     List<XBean> xbeanList = mapper.readValue("{\"x\":4}", new TypeReference<List<XBean>>() { [EOL]     }); [EOL]     assertEquals(1, xbeanList.size()); [EOL]     assertEquals(XBean.class, xbeanList.get(0).getClass()); [EOL]     Object ob = mapper.readValue("{\"x\":29}", XBean[].class); [EOL]     XBean[] xbeanArray = (XBean[]) ob; [EOL]     assertEquals(1, xbeanArray.length); [EOL]     assertEquals(XBean.class, xbeanArray[0].getClass()); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testImplicitArrays() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true); [EOL]     List<Integer> ints = mapper.readValue("4", List.class); [EOL]     assertEquals(1, ints.size()); [EOL]     assertEquals(Integer.valueOf(4), ints.get(0)); [EOL]     List<String> strings = mapper.readValue(quote("abc"), new TypeReference<ArrayList<String>>() { [EOL]     }); [EOL]     assertEquals(1, strings.size()); [EOL]     assertEquals("abc", strings.get(0)); [EOL]     int[] intArray = mapper.readValue("-7", int[].class); [EOL]     assertEquals(1, intArray.length); [EOL]     assertEquals(-7, intArray[0]); [EOL]     String[] stringArray = mapper.readValue(quote("xyz"), String[].class); [EOL]     assertEquals(1, stringArray.length); [EOL]     assertEquals("xyz", stringArray[0]); [EOL]     List<XBean> xbeanList = mapper.readValue("{\"x\":4}", new TypeReference<List<XBean>>() { [EOL]     }); [EOL]     assertEquals(1, xbeanList.size()); [EOL]     assertEquals(XBean.class, xbeanList.get(0).getClass()); [EOL]     Object ob = mapper.readValue("{\"x\":29}", XBean[].class); [EOL]     XBean[] xbeanArray = (XBean[]) ob; [EOL]     assertEquals(1, xbeanArray.length); [EOL]     assertEquals(XBean.class, xbeanArray[0].getClass()); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testImplicitArrays() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true); [EOL]     List<Integer> ints = mapper.readValue("4", List.class); [EOL]     assertEquals(1, ints.size()); [EOL]     assertEquals(Integer.valueOf(4), ints.get(0)); [EOL]     List<String> strings = mapper.readValue(quote("abc"), new TypeReference<ArrayList<String>>() { [EOL]     }); [EOL]     assertEquals(1, strings.size()); [EOL]     assertEquals("abc", strings.get(0)); [EOL]     int[] intArray = mapper.readValue("-7", int[].class); [EOL]     assertEquals(1, intArray.length); [EOL]     assertEquals(-7, intArray[0]); [EOL]     String[] stringArray = mapper.readValue(quote("xyz"), String[].class); [EOL]     assertEquals(1, stringArray.length); [EOL]     assertEquals("xyz", stringArray[0]); [EOL]     List<XBean> xbeanList = mapper.readValue("{\"x\":4}", new TypeReference<List<XBean>>() { [EOL]     }); [EOL]     assertEquals(1, xbeanList.size()); [EOL]     assertEquals(XBean.class, xbeanList.get(0).getClass()); [EOL]     Object ob = mapper.readValue("{\"x\":29}", XBean[].class); [EOL]     XBean[] xbeanArray = (XBean[]) ob; [EOL]     assertEquals(1, xbeanArray.length); [EOL]     assertEquals(XBean.class, xbeanArray[0].getClass()); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testNodeInArray() throws Exception { [EOL]     JsonNode node = new ObjectMapper().readTree("{\"a\":3}"); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT); [EOL]     Object[] obs = new Object[] { node }; [EOL]     String json = m.writeValueAsString(obs); [EOL]     Object[] result = m.readValue(json, Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     Object ob = result[0]; [EOL]     assertTrue(ob instanceof JsonNode); [EOL] }
public void testNodeInArray() throws Exception { [EOL]     JsonNode node = new ObjectMapper().readTree("{\"a\":3}"); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT); [EOL]     Object[] obs = new Object[] { node }; [EOL]     String json = m.writeValueAsString(obs); [EOL]     Object[] result = m.readValue(json, Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     Object ob = result[0]; [EOL]     assertTrue(ob instanceof JsonNode); [EOL] }
public void testIterator() throws IOException { [EOL]     StringWriter sw = new StringWriter(); [EOL]     ArrayList<Integer> l = new ArrayList<Integer>(); [EOL]     l.add(1); [EOL]     l.add(-9); [EOL]     l.add(0); [EOL]     MAPPER.writeValue(sw, l.iterator()); [EOL]     assertEquals("[1,-9,0]", sw.toString().trim()); [EOL] }
public void testIterator() throws IOException { [EOL]     StringWriter sw = new StringWriter(); [EOL]     ArrayList<Integer> l = new ArrayList<Integer>(); [EOL]     l.add(1); [EOL]     l.add(-9); [EOL]     l.add(0); [EOL]     MAPPER.writeValue(sw, l.iterator()); [EOL]     assertEquals("[1,-9,0]", sw.toString().trim()); [EOL] }
public void testIterator() throws IOException { [EOL]     StringWriter sw = new StringWriter(); [EOL]     ArrayList<Integer> l = new ArrayList<Integer>(); [EOL]     l.add(1); [EOL]     l.add(-9); [EOL]     l.add(0); [EOL]     MAPPER.writeValue(sw, l.iterator()); [EOL]     assertEquals("[1,-9,0]", sw.toString().trim()); [EOL] }
public void testIterator() throws IOException { [EOL]     StringWriter sw = new StringWriter(); [EOL]     ArrayList<Integer> l = new ArrayList<Integer>(); [EOL]     l.add(1); [EOL]     l.add(-9); [EOL]     l.add(0); [EOL]     MAPPER.writeValue(sw, l.iterator()); [EOL]     assertEquals("[1,-9,0]", sw.toString().trim()); [EOL] }
public void testIterator() throws IOException { [EOL]     StringWriter sw = new StringWriter(); [EOL]     ArrayList<Integer> l = new ArrayList<Integer>(); [EOL]     l.add(1); [EOL]     l.add(-9); [EOL]     l.add(0); [EOL]     MAPPER.writeValue(sw, l.iterator()); [EOL]     assertEquals("[1,-9,0]", sw.toString().trim()); [EOL] }
public void testIterator() throws IOException { [EOL]     StringWriter sw = new StringWriter(); [EOL]     ArrayList<Integer> l = new ArrayList<Integer>(); [EOL]     l.add(1); [EOL]     l.add(-9); [EOL]     l.add(0); [EOL]     MAPPER.writeValue(sw, l.iterator()); [EOL]     assertEquals("[1,-9,0]", sw.toString().trim()); [EOL] }
public void testIterator() throws IOException { [EOL]     StringWriter sw = new StringWriter(); [EOL]     ArrayList<Integer> l = new ArrayList<Integer>(); [EOL]     l.add(1); [EOL]     l.add(-9); [EOL]     l.add(0); [EOL]     MAPPER.writeValue(sw, l.iterator()); [EOL]     assertEquals("[1,-9,0]", sw.toString().trim()); [EOL] }
public void testIterator() throws IOException { [EOL]     StringWriter sw = new StringWriter(); [EOL]     ArrayList<Integer> l = new ArrayList<Integer>(); [EOL]     l.add(1); [EOL]     l.add(-9); [EOL]     l.add(0); [EOL]     MAPPER.writeValue(sw, l.iterator()); [EOL]     assertEquals("[1,-9,0]", sw.toString().trim()); [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testMethodAnnotationInList() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(String.class, new AnnotatedContextualSerializer()); [EOL]     mapper.registerModule(module); [EOL]     ContextualListBean beans = new ContextualListBean("abc"); [EOL]     assertEquals("{\"beans\":[\"list->abc\"]}", mapper.writeValueAsString(beans)); [EOL] }
public void testEmptyBean() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false); [EOL]     assertEquals("{\"@type\":\"empty\"}", m.writeValueAsString(new Empty())); [EOL] }
public void testEmptyBean() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false); [EOL]     assertEquals("{\"@type\":\"empty\"}", m.writeValueAsString(new Empty())); [EOL] }
public void testEmptyBean() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false); [EOL]     assertEquals("{\"@type\":\"empty\"}", m.writeValueAsString(new Empty())); [EOL] }
public void testEmptyBean() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false); [EOL]     assertEquals("{\"@type\":\"empty\"}", m.writeValueAsString(new Empty())); [EOL] }
public void testEmptyBean() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false); [EOL]     assertEquals("{\"@type\":\"empty\"}", m.writeValueAsString(new Empty())); [EOL] }
public void testAlwaysIdForTree() throws Exception { [EOL]     TreeNode root = new TreeNode(null, 1, "root"); [EOL]     TreeNode leaf = new TreeNode(root, 2, "leaf"); [EOL]     root.child = leaf; [EOL]     String json = MAPPER.writeValueAsString(root); [EOL]     assertEquals("{\"id\":1,\"name\":\"root\",\"parent\":null,\"child\":" + "{\"id\":2,\"name\":\"leaf\",\"parent\":1,\"child\":null}}", json); [EOL] }
public void testGettersWithoutSetters() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     GettersWithoutSetters bean = new GettersWithoutSetters(123); [EOL]     assertFalse(m.isEnabled(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)); [EOL]     assertEquals("{\"a\":3,\"b\":4,\"c\":5,\"d\":6}", m.writeValueAsString(bean)); [EOL]     m = new ObjectMapper(); [EOL]     m.enable(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS); [EOL]     assertEquals("{\"a\":3,\"c\":5,\"d\":6}", m.writeValueAsString(bean)); [EOL] }
public void testGettersWithoutSetters() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     GettersWithoutSetters bean = new GettersWithoutSetters(123); [EOL]     assertFalse(m.isEnabled(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)); [EOL]     assertEquals("{\"a\":3,\"b\":4,\"c\":5,\"d\":6}", m.writeValueAsString(bean)); [EOL]     m = new ObjectMapper(); [EOL]     m.enable(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS); [EOL]     assertEquals("{\"a\":3,\"c\":5,\"d\":6}", m.writeValueAsString(bean)); [EOL] }
public void testGettersWithoutSetters() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     GettersWithoutSetters bean = new GettersWithoutSetters(123); [EOL]     assertFalse(m.isEnabled(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)); [EOL]     assertEquals("{\"a\":3,\"b\":4,\"c\":5,\"d\":6}", m.writeValueAsString(bean)); [EOL]     m = new ObjectMapper(); [EOL]     m.enable(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS); [EOL]     assertEquals("{\"a\":3,\"c\":5,\"d\":6}", m.writeValueAsString(bean)); [EOL] }
public void testGettersWithoutSetters() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     GettersWithoutSetters bean = new GettersWithoutSetters(123); [EOL]     assertFalse(m.isEnabled(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)); [EOL]     assertEquals("{\"a\":3,\"b\":4,\"c\":5,\"d\":6}", m.writeValueAsString(bean)); [EOL]     m = new ObjectMapper(); [EOL]     m.enable(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS); [EOL]     assertEquals("{\"a\":3,\"c\":5,\"d\":6}", m.writeValueAsString(bean)); [EOL] }
public void testGettersWithoutSetters() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     GettersWithoutSetters bean = new GettersWithoutSetters(123); [EOL]     assertFalse(m.isEnabled(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)); [EOL]     assertEquals("{\"a\":3,\"b\":4,\"c\":5,\"d\":6}", m.writeValueAsString(bean)); [EOL]     m = new ObjectMapper(); [EOL]     m.enable(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS); [EOL]     assertEquals("{\"a\":3,\"c\":5,\"d\":6}", m.writeValueAsString(bean)); [EOL] }
public void testGettersWithoutSetters() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     GettersWithoutSetters bean = new GettersWithoutSetters(123); [EOL]     assertFalse(m.isEnabled(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)); [EOL]     assertEquals("{\"a\":3,\"b\":4,\"c\":5,\"d\":6}", m.writeValueAsString(bean)); [EOL]     m = new ObjectMapper(); [EOL]     m.enable(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS); [EOL]     assertEquals("{\"a\":3,\"c\":5,\"d\":6}", m.writeValueAsString(bean)); [EOL] }
public void testGettersWithoutSetters() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     GettersWithoutSetters bean = new GettersWithoutSetters(123); [EOL]     assertFalse(m.isEnabled(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)); [EOL]     assertEquals("{\"a\":3,\"b\":4,\"c\":5,\"d\":6}", m.writeValueAsString(bean)); [EOL]     m = new ObjectMapper(); [EOL]     m.enable(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS); [EOL]     assertEquals("{\"a\":3,\"c\":5,\"d\":6}", m.writeValueAsString(bean)); [EOL] }
public void testIgnoreOver() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(m, new BaseClassIgnore()); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals(Integer.valueOf(2), result.get("y")); [EOL]     result = writeAndMap(m, new SubClassNonIgnore()); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(Integer.valueOf(3), result.get("x")); [EOL]     assertEquals(Integer.valueOf(2), result.get("y")); [EOL] }
public void testIgnoreOver() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(m, new BaseClassIgnore()); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals(Integer.valueOf(2), result.get("y")); [EOL]     result = writeAndMap(m, new SubClassNonIgnore()); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(Integer.valueOf(3), result.get("x")); [EOL]     assertEquals(Integer.valueOf(2), result.get("y")); [EOL] }
public void testIgnoreOver() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(m, new BaseClassIgnore()); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals(Integer.valueOf(2), result.get("y")); [EOL]     result = writeAndMap(m, new SubClassNonIgnore()); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(Integer.valueOf(3), result.get("x")); [EOL]     assertEquals(Integer.valueOf(2), result.get("y")); [EOL] }
public void testIgnoreOver() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(m, new BaseClassIgnore()); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals(Integer.valueOf(2), result.get("y")); [EOL]     result = writeAndMap(m, new SubClassNonIgnore()); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(Integer.valueOf(3), result.get("x")); [EOL]     assertEquals(Integer.valueOf(2), result.get("y")); [EOL] }
public void testGettersWithoutSetters() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     GettersWithoutSetters bean = new GettersWithoutSetters(123); [EOL]     assertFalse(m.isEnabled(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)); [EOL]     assertEquals("{\"a\":3,\"b\":4,\"c\":5,\"d\":6}", m.writeValueAsString(bean)); [EOL]     m = new ObjectMapper(); [EOL]     m.enable(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS); [EOL]     assertEquals("{\"a\":3,\"c\":5,\"d\":6}", m.writeValueAsString(bean)); [EOL] }
public void testGettersWithoutSetters() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     GettersWithoutSetters bean = new GettersWithoutSetters(123); [EOL]     assertFalse(m.isEnabled(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)); [EOL]     assertEquals("{\"a\":3,\"b\":4,\"c\":5,\"d\":6}", m.writeValueAsString(bean)); [EOL]     m = new ObjectMapper(); [EOL]     m.enable(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS); [EOL]     assertEquals("{\"a\":3,\"c\":5,\"d\":6}", m.writeValueAsString(bean)); [EOL] }
public void testGettersWithoutSetters() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     GettersWithoutSetters bean = new GettersWithoutSetters(123); [EOL]     assertFalse(m.isEnabled(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)); [EOL]     assertEquals("{\"a\":3,\"b\":4,\"c\":5,\"d\":6}", m.writeValueAsString(bean)); [EOL]     m = new ObjectMapper(); [EOL]     m.enable(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS); [EOL]     assertEquals("{\"a\":3,\"c\":5,\"d\":6}", m.writeValueAsString(bean)); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testEnumsWithJsonValue() throws Exception { [EOL]     EnumWithJsonValue e = MAPPER.readValue(quote("foo"), EnumWithJsonValue.class); [EOL]     assertSame(EnumWithJsonValue.A, e); [EOL]     e = MAPPER.readValue(quote("bar"), EnumWithJsonValue.class); [EOL]     assertSame(EnumWithJsonValue.B, e); [EOL]     EnumSet<EnumWithJsonValue> set = MAPPER.readValue("[\"bar\"]", new TypeReference<EnumSet<EnumWithJsonValue>>() { [EOL]     }); [EOL]     assertNotNull(set); [EOL]     assertEquals(1, set.size()); [EOL]     assertTrue(set.contains(EnumWithJsonValue.B)); [EOL]     assertFalse(set.contains(EnumWithJsonValue.A)); [EOL]     EnumMap<EnumWithJsonValue, Integer> map = MAPPER.readValue("{\"foo\":13}", new TypeReference<EnumMap<EnumWithJsonValue, Integer>>() { [EOL]     }); [EOL]     assertNotNull(map); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals(Integer.valueOf(13), map.get(EnumWithJsonValue.A)); [EOL] }
public void testEnumsWithJsonValue() throws Exception { [EOL]     EnumWithJsonValue e = MAPPER.readValue(quote("foo"), EnumWithJsonValue.class); [EOL]     assertSame(EnumWithJsonValue.A, e); [EOL]     e = MAPPER.readValue(quote("bar"), EnumWithJsonValue.class); [EOL]     assertSame(EnumWithJsonValue.B, e); [EOL]     EnumSet<EnumWithJsonValue> set = MAPPER.readValue("[\"bar\"]", new TypeReference<EnumSet<EnumWithJsonValue>>() { [EOL]     }); [EOL]     assertNotNull(set); [EOL]     assertEquals(1, set.size()); [EOL]     assertTrue(set.contains(EnumWithJsonValue.B)); [EOL]     assertFalse(set.contains(EnumWithJsonValue.A)); [EOL]     EnumMap<EnumWithJsonValue, Integer> map = MAPPER.readValue("{\"foo\":13}", new TypeReference<EnumMap<EnumWithJsonValue, Integer>>() { [EOL]     }); [EOL]     assertNotNull(map); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals(Integer.valueOf(13), map.get(EnumWithJsonValue.A)); [EOL] }
public void testEnumsWithJsonValue() throws Exception { [EOL]     EnumWithJsonValue e = MAPPER.readValue(quote("foo"), EnumWithJsonValue.class); [EOL]     assertSame(EnumWithJsonValue.A, e); [EOL]     e = MAPPER.readValue(quote("bar"), EnumWithJsonValue.class); [EOL]     assertSame(EnumWithJsonValue.B, e); [EOL]     EnumSet<EnumWithJsonValue> set = MAPPER.readValue("[\"bar\"]", new TypeReference<EnumSet<EnumWithJsonValue>>() { [EOL]     }); [EOL]     assertNotNull(set); [EOL]     assertEquals(1, set.size()); [EOL]     assertTrue(set.contains(EnumWithJsonValue.B)); [EOL]     assertFalse(set.contains(EnumWithJsonValue.A)); [EOL]     EnumMap<EnumWithJsonValue, Integer> map = MAPPER.readValue("{\"foo\":13}", new TypeReference<EnumMap<EnumWithJsonValue, Integer>>() { [EOL]     }); [EOL]     assertNotNull(map); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals(Integer.valueOf(13), map.get(EnumWithJsonValue.A)); [EOL] }
public void testEnumsWithJsonValue() throws Exception { [EOL]     EnumWithJsonValue e = MAPPER.readValue(quote("foo"), EnumWithJsonValue.class); [EOL]     assertSame(EnumWithJsonValue.A, e); [EOL]     e = MAPPER.readValue(quote("bar"), EnumWithJsonValue.class); [EOL]     assertSame(EnumWithJsonValue.B, e); [EOL]     EnumSet<EnumWithJsonValue> set = MAPPER.readValue("[\"bar\"]", new TypeReference<EnumSet<EnumWithJsonValue>>() { [EOL]     }); [EOL]     assertNotNull(set); [EOL]     assertEquals(1, set.size()); [EOL]     assertTrue(set.contains(EnumWithJsonValue.B)); [EOL]     assertFalse(set.contains(EnumWithJsonValue.A)); [EOL]     EnumMap<EnumWithJsonValue, Integer> map = MAPPER.readValue("{\"foo\":13}", new TypeReference<EnumMap<EnumWithJsonValue, Integer>>() { [EOL]     }); [EOL]     assertNotNull(map); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals(Integer.valueOf(13), map.get(EnumWithJsonValue.A)); [EOL] }
public void testEnumsWithJsonValue() throws Exception { [EOL]     EnumWithJsonValue e = MAPPER.readValue(quote("foo"), EnumWithJsonValue.class); [EOL]     assertSame(EnumWithJsonValue.A, e); [EOL]     e = MAPPER.readValue(quote("bar"), EnumWithJsonValue.class); [EOL]     assertSame(EnumWithJsonValue.B, e); [EOL]     EnumSet<EnumWithJsonValue> set = MAPPER.readValue("[\"bar\"]", new TypeReference<EnumSet<EnumWithJsonValue>>() { [EOL]     }); [EOL]     assertNotNull(set); [EOL]     assertEquals(1, set.size()); [EOL]     assertTrue(set.contains(EnumWithJsonValue.B)); [EOL]     assertFalse(set.contains(EnumWithJsonValue.A)); [EOL]     EnumMap<EnumWithJsonValue, Integer> map = MAPPER.readValue("{\"foo\":13}", new TypeReference<EnumMap<EnumWithJsonValue, Integer>>() { [EOL]     }); [EOL]     assertNotNull(map); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals(Integer.valueOf(13), map.get(EnumWithJsonValue.A)); [EOL] }
public void testEnumsWithJsonValue() throws Exception { [EOL]     EnumWithJsonValue e = MAPPER.readValue(quote("foo"), EnumWithJsonValue.class); [EOL]     assertSame(EnumWithJsonValue.A, e); [EOL]     e = MAPPER.readValue(quote("bar"), EnumWithJsonValue.class); [EOL]     assertSame(EnumWithJsonValue.B, e); [EOL]     EnumSet<EnumWithJsonValue> set = MAPPER.readValue("[\"bar\"]", new TypeReference<EnumSet<EnumWithJsonValue>>() { [EOL]     }); [EOL]     assertNotNull(set); [EOL]     assertEquals(1, set.size()); [EOL]     assertTrue(set.contains(EnumWithJsonValue.B)); [EOL]     assertFalse(set.contains(EnumWithJsonValue.A)); [EOL]     EnumMap<EnumWithJsonValue, Integer> map = MAPPER.readValue("{\"foo\":13}", new TypeReference<EnumMap<EnumWithJsonValue, Integer>>() { [EOL]     }); [EOL]     assertNotNull(map); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals(Integer.valueOf(13), map.get(EnumWithJsonValue.A)); [EOL] }
public void testEnumsWithJsonValue() throws Exception { [EOL]     EnumWithJsonValue e = MAPPER.readValue(quote("foo"), EnumWithJsonValue.class); [EOL]     assertSame(EnumWithJsonValue.A, e); [EOL]     e = MAPPER.readValue(quote("bar"), EnumWithJsonValue.class); [EOL]     assertSame(EnumWithJsonValue.B, e); [EOL]     EnumSet<EnumWithJsonValue> set = MAPPER.readValue("[\"bar\"]", new TypeReference<EnumSet<EnumWithJsonValue>>() { [EOL]     }); [EOL]     assertNotNull(set); [EOL]     assertEquals(1, set.size()); [EOL]     assertTrue(set.contains(EnumWithJsonValue.B)); [EOL]     assertFalse(set.contains(EnumWithJsonValue.A)); [EOL]     EnumMap<EnumWithJsonValue, Integer> map = MAPPER.readValue("{\"foo\":13}", new TypeReference<EnumMap<EnumWithJsonValue, Integer>>() { [EOL]     }); [EOL]     assertNotNull(map); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals(Integer.valueOf(13), map.get(EnumWithJsonValue.A)); [EOL] }
public void testEnumsWithJsonValue() throws Exception { [EOL]     EnumWithJsonValue e = MAPPER.readValue(quote("foo"), EnumWithJsonValue.class); [EOL]     assertSame(EnumWithJsonValue.A, e); [EOL]     e = MAPPER.readValue(quote("bar"), EnumWithJsonValue.class); [EOL]     assertSame(EnumWithJsonValue.B, e); [EOL]     EnumSet<EnumWithJsonValue> set = MAPPER.readValue("[\"bar\"]", new TypeReference<EnumSet<EnumWithJsonValue>>() { [EOL]     }); [EOL]     assertNotNull(set); [EOL]     assertEquals(1, set.size()); [EOL]     assertTrue(set.contains(EnumWithJsonValue.B)); [EOL]     assertFalse(set.contains(EnumWithJsonValue.A)); [EOL]     EnumMap<EnumWithJsonValue, Integer> map = MAPPER.readValue("{\"foo\":13}", new TypeReference<EnumMap<EnumWithJsonValue, Integer>>() { [EOL]     }); [EOL]     assertNotNull(map); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals(Integer.valueOf(13), map.get(EnumWithJsonValue.A)); [EOL] }
public void testEnumsWithJsonValue() throws Exception { [EOL]     EnumWithJsonValue e = MAPPER.readValue(quote("foo"), EnumWithJsonValue.class); [EOL]     assertSame(EnumWithJsonValue.A, e); [EOL]     e = MAPPER.readValue(quote("bar"), EnumWithJsonValue.class); [EOL]     assertSame(EnumWithJsonValue.B, e); [EOL]     EnumSet<EnumWithJsonValue> set = MAPPER.readValue("[\"bar\"]", new TypeReference<EnumSet<EnumWithJsonValue>>() { [EOL]     }); [EOL]     assertNotNull(set); [EOL]     assertEquals(1, set.size()); [EOL]     assertTrue(set.contains(EnumWithJsonValue.B)); [EOL]     assertFalse(set.contains(EnumWithJsonValue.A)); [EOL]     EnumMap<EnumWithJsonValue, Integer> map = MAPPER.readValue("{\"foo\":13}", new TypeReference<EnumMap<EnumWithJsonValue, Integer>>() { [EOL]     }); [EOL]     assertNotNull(map); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals(Integer.valueOf(13), map.get(EnumWithJsonValue.A)); [EOL] }
public void testEnumsWithJsonValue() throws Exception { [EOL]     EnumWithJsonValue e = MAPPER.readValue(quote("foo"), EnumWithJsonValue.class); [EOL]     assertSame(EnumWithJsonValue.A, e); [EOL]     e = MAPPER.readValue(quote("bar"), EnumWithJsonValue.class); [EOL]     assertSame(EnumWithJsonValue.B, e); [EOL]     EnumSet<EnumWithJsonValue> set = MAPPER.readValue("[\"bar\"]", new TypeReference<EnumSet<EnumWithJsonValue>>() { [EOL]     }); [EOL]     assertNotNull(set); [EOL]     assertEquals(1, set.size()); [EOL]     assertTrue(set.contains(EnumWithJsonValue.B)); [EOL]     assertFalse(set.contains(EnumWithJsonValue.A)); [EOL]     EnumMap<EnumWithJsonValue, Integer> map = MAPPER.readValue("{\"foo\":13}", new TypeReference<EnumMap<EnumWithJsonValue, Integer>>() { [EOL]     }); [EOL]     assertNotNull(map); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals(Integer.valueOf(13), map.get(EnumWithJsonValue.A)); [EOL] }
public void testEnumsWithJsonValue() throws Exception { [EOL]     EnumWithJsonValue e = MAPPER.readValue(quote("foo"), EnumWithJsonValue.class); [EOL]     assertSame(EnumWithJsonValue.A, e); [EOL]     e = MAPPER.readValue(quote("bar"), EnumWithJsonValue.class); [EOL]     assertSame(EnumWithJsonValue.B, e); [EOL]     EnumSet<EnumWithJsonValue> set = MAPPER.readValue("[\"bar\"]", new TypeReference<EnumSet<EnumWithJsonValue>>() { [EOL]     }); [EOL]     assertNotNull(set); [EOL]     assertEquals(1, set.size()); [EOL]     assertTrue(set.contains(EnumWithJsonValue.B)); [EOL]     assertFalse(set.contains(EnumWithJsonValue.A)); [EOL]     EnumMap<EnumWithJsonValue, Integer> map = MAPPER.readValue("{\"foo\":13}", new TypeReference<EnumMap<EnumWithJsonValue, Integer>>() { [EOL]     }); [EOL]     assertNotNull(map); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals(Integer.valueOf(13), map.get(EnumWithJsonValue.A)); [EOL] }
public void testEnumsWithJsonValue() throws Exception { [EOL]     EnumWithJsonValue e = MAPPER.readValue(quote("foo"), EnumWithJsonValue.class); [EOL]     assertSame(EnumWithJsonValue.A, e); [EOL]     e = MAPPER.readValue(quote("bar"), EnumWithJsonValue.class); [EOL]     assertSame(EnumWithJsonValue.B, e); [EOL]     EnumSet<EnumWithJsonValue> set = MAPPER.readValue("[\"bar\"]", new TypeReference<EnumSet<EnumWithJsonValue>>() { [EOL]     }); [EOL]     assertNotNull(set); [EOL]     assertEquals(1, set.size()); [EOL]     assertTrue(set.contains(EnumWithJsonValue.B)); [EOL]     assertFalse(set.contains(EnumWithJsonValue.A)); [EOL]     EnumMap<EnumWithJsonValue, Integer> map = MAPPER.readValue("{\"foo\":13}", new TypeReference<EnumMap<EnumWithJsonValue, Integer>>() { [EOL]     }); [EOL]     assertNotNull(map); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals(Integer.valueOf(13), map.get(EnumWithJsonValue.A)); [EOL] }
public void testEnumsWithJsonValue() throws Exception { [EOL]     EnumWithJsonValue e = MAPPER.readValue(quote("foo"), EnumWithJsonValue.class); [EOL]     assertSame(EnumWithJsonValue.A, e); [EOL]     e = MAPPER.readValue(quote("bar"), EnumWithJsonValue.class); [EOL]     assertSame(EnumWithJsonValue.B, e); [EOL]     EnumSet<EnumWithJsonValue> set = MAPPER.readValue("[\"bar\"]", new TypeReference<EnumSet<EnumWithJsonValue>>() { [EOL]     }); [EOL]     assertNotNull(set); [EOL]     assertEquals(1, set.size()); [EOL]     assertTrue(set.contains(EnumWithJsonValue.B)); [EOL]     assertFalse(set.contains(EnumWithJsonValue.A)); [EOL]     EnumMap<EnumWithJsonValue, Integer> map = MAPPER.readValue("{\"foo\":13}", new TypeReference<EnumMap<EnumWithJsonValue, Integer>>() { [EOL]     }); [EOL]     assertNotNull(map); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals(Integer.valueOf(13), map.get(EnumWithJsonValue.A)); [EOL] }
public void testEnumsWithJsonValue() throws Exception { [EOL]     EnumWithJsonValue e = MAPPER.readValue(quote("foo"), EnumWithJsonValue.class); [EOL]     assertSame(EnumWithJsonValue.A, e); [EOL]     e = MAPPER.readValue(quote("bar"), EnumWithJsonValue.class); [EOL]     assertSame(EnumWithJsonValue.B, e); [EOL]     EnumSet<EnumWithJsonValue> set = MAPPER.readValue("[\"bar\"]", new TypeReference<EnumSet<EnumWithJsonValue>>() { [EOL]     }); [EOL]     assertNotNull(set); [EOL]     assertEquals(1, set.size()); [EOL]     assertTrue(set.contains(EnumWithJsonValue.B)); [EOL]     assertFalse(set.contains(EnumWithJsonValue.A)); [EOL]     EnumMap<EnumWithJsonValue, Integer> map = MAPPER.readValue("{\"foo\":13}", new TypeReference<EnumMap<EnumWithJsonValue, Integer>>() { [EOL]     }); [EOL]     assertNotNull(map); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals(Integer.valueOf(13), map.get(EnumWithJsonValue.A)); [EOL] }
public void testEnumsWithJsonValue() throws Exception { [EOL]     EnumWithJsonValue e = MAPPER.readValue(quote("foo"), EnumWithJsonValue.class); [EOL]     assertSame(EnumWithJsonValue.A, e); [EOL]     e = MAPPER.readValue(quote("bar"), EnumWithJsonValue.class); [EOL]     assertSame(EnumWithJsonValue.B, e); [EOL]     EnumSet<EnumWithJsonValue> set = MAPPER.readValue("[\"bar\"]", new TypeReference<EnumSet<EnumWithJsonValue>>() { [EOL]     }); [EOL]     assertNotNull(set); [EOL]     assertEquals(1, set.size()); [EOL]     assertTrue(set.contains(EnumWithJsonValue.B)); [EOL]     assertFalse(set.contains(EnumWithJsonValue.A)); [EOL]     EnumMap<EnumWithJsonValue, Integer> map = MAPPER.readValue("{\"foo\":13}", new TypeReference<EnumMap<EnumWithJsonValue, Integer>>() { [EOL]     }); [EOL]     assertNotNull(map); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals(Integer.valueOf(13), map.get(EnumWithJsonValue.A)); [EOL] }
public void testEnumsWithJsonValue() throws Exception { [EOL]     EnumWithJsonValue e = MAPPER.readValue(quote("foo"), EnumWithJsonValue.class); [EOL]     assertSame(EnumWithJsonValue.A, e); [EOL]     e = MAPPER.readValue(quote("bar"), EnumWithJsonValue.class); [EOL]     assertSame(EnumWithJsonValue.B, e); [EOL]     EnumSet<EnumWithJsonValue> set = MAPPER.readValue("[\"bar\"]", new TypeReference<EnumSet<EnumWithJsonValue>>() { [EOL]     }); [EOL]     assertNotNull(set); [EOL]     assertEquals(1, set.size()); [EOL]     assertTrue(set.contains(EnumWithJsonValue.B)); [EOL]     assertFalse(set.contains(EnumWithJsonValue.A)); [EOL]     EnumMap<EnumWithJsonValue, Integer> map = MAPPER.readValue("{\"foo\":13}", new TypeReference<EnumMap<EnumWithJsonValue, Integer>>() { [EOL]     }); [EOL]     assertNotNull(map); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals(Integer.valueOf(13), map.get(EnumWithJsonValue.A)); [EOL] }
public void testEnumsWithJsonValue() throws Exception { [EOL]     EnumWithJsonValue e = MAPPER.readValue(quote("foo"), EnumWithJsonValue.class); [EOL]     assertSame(EnumWithJsonValue.A, e); [EOL]     e = MAPPER.readValue(quote("bar"), EnumWithJsonValue.class); [EOL]     assertSame(EnumWithJsonValue.B, e); [EOL]     EnumSet<EnumWithJsonValue> set = MAPPER.readValue("[\"bar\"]", new TypeReference<EnumSet<EnumWithJsonValue>>() { [EOL]     }); [EOL]     assertNotNull(set); [EOL]     assertEquals(1, set.size()); [EOL]     assertTrue(set.contains(EnumWithJsonValue.B)); [EOL]     assertFalse(set.contains(EnumWithJsonValue.A)); [EOL]     EnumMap<EnumWithJsonValue, Integer> map = MAPPER.readValue("{\"foo\":13}", new TypeReference<EnumMap<EnumWithJsonValue, Integer>>() { [EOL]     }); [EOL]     assertNotNull(map); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals(Integer.valueOf(13), map.get(EnumWithJsonValue.A)); [EOL] }
public void testSimpleBean() throws Exception { [EOL]     ArrayList<Object> misc = new ArrayList<Object>(); [EOL]     misc.add("xyz"); [EOL]     misc.add(42); [EOL]     misc.add(null); [EOL]     misc.add(Boolean.TRUE); [EOL]     TestBean bean = new TestBean(13, -900L, "\"test\"", new URI("http://foobar.com"), misc); [EOL]     String json = MAPPER.writeValueAsString(bean); [EOL]     TestBean result = MAPPER.readValue(json, TestBean.class); [EOL]     assertEquals(bean, result); [EOL] }
public void testSimpleBean() throws Exception { [EOL]     ArrayList<Object> misc = new ArrayList<Object>(); [EOL]     misc.add("xyz"); [EOL]     misc.add(42); [EOL]     misc.add(null); [EOL]     misc.add(Boolean.TRUE); [EOL]     TestBean bean = new TestBean(13, -900L, "\"test\"", new URI("http://foobar.com"), misc); [EOL]     String json = MAPPER.writeValueAsString(bean); [EOL]     TestBean result = MAPPER.readValue(json, TestBean.class); [EOL]     assertEquals(bean, result); [EOL] }
public void testSimpleBean() throws Exception { [EOL]     ArrayList<Object> misc = new ArrayList<Object>(); [EOL]     misc.add("xyz"); [EOL]     misc.add(42); [EOL]     misc.add(null); [EOL]     misc.add(Boolean.TRUE); [EOL]     TestBean bean = new TestBean(13, -900L, "\"test\"", new URI("http://foobar.com"), misc); [EOL]     String json = MAPPER.writeValueAsString(bean); [EOL]     TestBean result = MAPPER.readValue(json, TestBean.class); [EOL]     assertEquals(bean, result); [EOL] }
public void testSimpleBean() throws Exception { [EOL]     ArrayList<Object> misc = new ArrayList<Object>(); [EOL]     misc.add("xyz"); [EOL]     misc.add(42); [EOL]     misc.add(null); [EOL]     misc.add(Boolean.TRUE); [EOL]     TestBean bean = new TestBean(13, -900L, "\"test\"", new URI("http://foobar.com"), misc); [EOL]     String json = MAPPER.writeValueAsString(bean); [EOL]     TestBean result = MAPPER.readValue(json, TestBean.class); [EOL]     assertEquals(bean, result); [EOL] }
public void testSimpleBean() throws Exception { [EOL]     ArrayList<Object> misc = new ArrayList<Object>(); [EOL]     misc.add("xyz"); [EOL]     misc.add(42); [EOL]     misc.add(null); [EOL]     misc.add(Boolean.TRUE); [EOL]     TestBean bean = new TestBean(13, -900L, "\"test\"", new URI("http://foobar.com"), misc); [EOL]     String json = MAPPER.writeValueAsString(bean); [EOL]     TestBean result = MAPPER.readValue(json, TestBean.class); [EOL]     assertEquals(bean, result); [EOL] }
public void testSimpleBean() throws Exception { [EOL]     ArrayList<Object> misc = new ArrayList<Object>(); [EOL]     misc.add("xyz"); [EOL]     misc.add(42); [EOL]     misc.add(null); [EOL]     misc.add(Boolean.TRUE); [EOL]     TestBean bean = new TestBean(13, -900L, "\"test\"", new URI("http://foobar.com"), misc); [EOL]     String json = MAPPER.writeValueAsString(bean); [EOL]     TestBean result = MAPPER.readValue(json, TestBean.class); [EOL]     assertEquals(bean, result); [EOL] }
public void testSimpleBean() throws Exception { [EOL]     ArrayList<Object> misc = new ArrayList<Object>(); [EOL]     misc.add("xyz"); [EOL]     misc.add(42); [EOL]     misc.add(null); [EOL]     misc.add(Boolean.TRUE); [EOL]     TestBean bean = new TestBean(13, -900L, "\"test\"", new URI("http://foobar.com"), misc); [EOL]     String json = MAPPER.writeValueAsString(bean); [EOL]     TestBean result = MAPPER.readValue(json, TestBean.class); [EOL]     assertEquals(bean, result); [EOL] }
public void testSimpleBean() throws Exception { [EOL]     ArrayList<Object> misc = new ArrayList<Object>(); [EOL]     misc.add("xyz"); [EOL]     misc.add(42); [EOL]     misc.add(null); [EOL]     misc.add(Boolean.TRUE); [EOL]     TestBean bean = new TestBean(13, -900L, "\"test\"", new URI("http://foobar.com"), misc); [EOL]     String json = MAPPER.writeValueAsString(bean); [EOL]     TestBean result = MAPPER.readValue(json, TestBean.class); [EOL]     assertEquals(bean, result); [EOL] }
public void testSimpleBean() throws Exception { [EOL]     ArrayList<Object> misc = new ArrayList<Object>(); [EOL]     misc.add("xyz"); [EOL]     misc.add(42); [EOL]     misc.add(null); [EOL]     misc.add(Boolean.TRUE); [EOL]     TestBean bean = new TestBean(13, -900L, "\"test\"", new URI("http://foobar.com"), misc); [EOL]     String json = MAPPER.writeValueAsString(bean); [EOL]     TestBean result = MAPPER.readValue(json, TestBean.class); [EOL]     assertEquals(bean, result); [EOL] }
public void testSimpleBean() throws Exception { [EOL]     ArrayList<Object> misc = new ArrayList<Object>(); [EOL]     misc.add("xyz"); [EOL]     misc.add(42); [EOL]     misc.add(null); [EOL]     misc.add(Boolean.TRUE); [EOL]     TestBean bean = new TestBean(13, -900L, "\"test\"", new URI("http://foobar.com"), misc); [EOL]     String json = MAPPER.writeValueAsString(bean); [EOL]     TestBean result = MAPPER.readValue(json, TestBean.class); [EOL]     assertEquals(bean, result); [EOL] }
public void testSimpleBean() throws Exception { [EOL]     ArrayList<Object> misc = new ArrayList<Object>(); [EOL]     misc.add("xyz"); [EOL]     misc.add(42); [EOL]     misc.add(null); [EOL]     misc.add(Boolean.TRUE); [EOL]     TestBean bean = new TestBean(13, -900L, "\"test\"", new URI("http://foobar.com"), misc); [EOL]     String json = MAPPER.writeValueAsString(bean); [EOL]     TestBean result = MAPPER.readValue(json, TestBean.class); [EOL]     assertEquals(bean, result); [EOL] }
public void testSimpleBean() throws Exception { [EOL]     ArrayList<Object> misc = new ArrayList<Object>(); [EOL]     misc.add("xyz"); [EOL]     misc.add(42); [EOL]     misc.add(null); [EOL]     misc.add(Boolean.TRUE); [EOL]     TestBean bean = new TestBean(13, -900L, "\"test\"", new URI("http://foobar.com"), misc); [EOL]     String json = MAPPER.writeValueAsString(bean); [EOL]     TestBean result = MAPPER.readValue(json, TestBean.class); [EOL]     assertEquals(bean, result); [EOL] }
public void testSimpleBean() throws Exception { [EOL]     ArrayList<Object> misc = new ArrayList<Object>(); [EOL]     misc.add("xyz"); [EOL]     misc.add(42); [EOL]     misc.add(null); [EOL]     misc.add(Boolean.TRUE); [EOL]     TestBean bean = new TestBean(13, -900L, "\"test\"", new URI("http://foobar.com"), misc); [EOL]     String json = MAPPER.writeValueAsString(bean); [EOL]     TestBean result = MAPPER.readValue(json, TestBean.class); [EOL]     assertEquals(bean, result); [EOL] }
public void testSimpleBean() throws Exception { [EOL]     ArrayList<Object> misc = new ArrayList<Object>(); [EOL]     misc.add("xyz"); [EOL]     misc.add(42); [EOL]     misc.add(null); [EOL]     misc.add(Boolean.TRUE); [EOL]     TestBean bean = new TestBean(13, -900L, "\"test\"", new URI("http://foobar.com"), misc); [EOL]     String json = MAPPER.writeValueAsString(bean); [EOL]     TestBean result = MAPPER.readValue(json, TestBean.class); [EOL]     assertEquals(bean, result); [EOL] }
public void testSimpleBean() throws Exception { [EOL]     ArrayList<Object> misc = new ArrayList<Object>(); [EOL]     misc.add("xyz"); [EOL]     misc.add(42); [EOL]     misc.add(null); [EOL]     misc.add(Boolean.TRUE); [EOL]     TestBean bean = new TestBean(13, -900L, "\"test\"", new URI("http://foobar.com"), misc); [EOL]     String json = MAPPER.writeValueAsString(bean); [EOL]     TestBean result = MAPPER.readValue(json, TestBean.class); [EOL]     assertEquals(bean, result); [EOL] }
public void testSimpleBean() throws Exception { [EOL]     ArrayList<Object> misc = new ArrayList<Object>(); [EOL]     misc.add("xyz"); [EOL]     misc.add(42); [EOL]     misc.add(null); [EOL]     misc.add(Boolean.TRUE); [EOL]     TestBean bean = new TestBean(13, -900L, "\"test\"", new URI("http://foobar.com"), misc); [EOL]     String json = MAPPER.writeValueAsString(bean); [EOL]     TestBean result = MAPPER.readValue(json, TestBean.class); [EOL]     assertEquals(bean, result); [EOL] }
public void testSimpleBean() throws Exception { [EOL]     ArrayList<Object> misc = new ArrayList<Object>(); [EOL]     misc.add("xyz"); [EOL]     misc.add(42); [EOL]     misc.add(null); [EOL]     misc.add(Boolean.TRUE); [EOL]     TestBean bean = new TestBean(13, -900L, "\"test\"", new URI("http://foobar.com"), misc); [EOL]     String json = MAPPER.writeValueAsString(bean); [EOL]     TestBean result = MAPPER.readValue(json, TestBean.class); [EOL]     assertEquals(bean, result); [EOL] }
public void testSimpleBean() throws Exception { [EOL]     ArrayList<Object> misc = new ArrayList<Object>(); [EOL]     misc.add("xyz"); [EOL]     misc.add(42); [EOL]     misc.add(null); [EOL]     misc.add(Boolean.TRUE); [EOL]     TestBean bean = new TestBean(13, -900L, "\"test\"", new URI("http://foobar.com"), misc); [EOL]     String json = MAPPER.writeValueAsString(bean); [EOL]     TestBean result = MAPPER.readValue(json, TestBean.class); [EOL]     assertEquals(bean, result); [EOL] }
public void testSimpleBean() throws Exception { [EOL]     ArrayList<Object> misc = new ArrayList<Object>(); [EOL]     misc.add("xyz"); [EOL]     misc.add(42); [EOL]     misc.add(null); [EOL]     misc.add(Boolean.TRUE); [EOL]     TestBean bean = new TestBean(13, -900L, "\"test\"", new URI("http://foobar.com"), misc); [EOL]     String json = MAPPER.writeValueAsString(bean); [EOL]     TestBean result = MAPPER.readValue(json, TestBean.class); [EOL]     assertEquals(bean, result); [EOL] }
public void testSimpleBean() throws Exception { [EOL]     ArrayList<Object> misc = new ArrayList<Object>(); [EOL]     misc.add("xyz"); [EOL]     misc.add(42); [EOL]     misc.add(null); [EOL]     misc.add(Boolean.TRUE); [EOL]     TestBean bean = new TestBean(13, -900L, "\"test\"", new URI("http://foobar.com"), misc); [EOL]     String json = MAPPER.writeValueAsString(bean); [EOL]     TestBean result = MAPPER.readValue(json, TestBean.class); [EOL]     assertEquals(bean, result); [EOL] }
public void testSimpleBean() throws Exception { [EOL]     ArrayList<Object> misc = new ArrayList<Object>(); [EOL]     misc.add("xyz"); [EOL]     misc.add(42); [EOL]     misc.add(null); [EOL]     misc.add(Boolean.TRUE); [EOL]     TestBean bean = new TestBean(13, -900L, "\"test\"", new URI("http://foobar.com"), misc); [EOL]     String json = MAPPER.writeValueAsString(bean); [EOL]     TestBean result = MAPPER.readValue(json, TestBean.class); [EOL]     assertEquals(bean, result); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testAllowUnknownEnumValuesAsMapKeysReadAsNull() throws Exception { [EOL]     ObjectReader reader = MAPPER.reader(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL); [EOL]     ClassWithEnumMapKey result = reader.withType(ClassWithEnumMapKey.class).readValue("{\"map\":{\"NO-SUCH-VALUE\":\"val\"}}"); [EOL]     assertTrue(result.map.containsKey(null)); [EOL] }
public void testAllowUnknownEnumValuesAsMapKeysReadAsNull() throws Exception { [EOL]     ObjectReader reader = MAPPER.reader(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL); [EOL]     ClassWithEnumMapKey result = reader.withType(ClassWithEnumMapKey.class).readValue("{\"map\":{\"NO-SUCH-VALUE\":\"val\"}}"); [EOL]     assertTrue(result.map.containsKey(null)); [EOL] }
public void testAllowUnknownEnumValuesAsMapKeysReadAsNull() throws Exception { [EOL]     ObjectReader reader = MAPPER.reader(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL); [EOL]     ClassWithEnumMapKey result = reader.withType(ClassWithEnumMapKey.class).readValue("{\"map\":{\"NO-SUCH-VALUE\":\"val\"}}"); [EOL]     assertTrue(result.map.containsKey(null)); [EOL] }
public void testAllowUnknownEnumValuesAsMapKeysReadAsNull() throws Exception { [EOL]     ObjectReader reader = MAPPER.reader(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL); [EOL]     ClassWithEnumMapKey result = reader.withType(ClassWithEnumMapKey.class).readValue("{\"map\":{\"NO-SUCH-VALUE\":\"val\"}}"); [EOL]     assertTrue(result.map.containsKey(null)); [EOL] }
public void testAllowUnknownEnumValuesAsMapKeysReadAsNull() throws Exception { [EOL]     ObjectReader reader = MAPPER.reader(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL); [EOL]     ClassWithEnumMapKey result = reader.withType(ClassWithEnumMapKey.class).readValue("{\"map\":{\"NO-SUCH-VALUE\":\"val\"}}"); [EOL]     assertTrue(result.map.containsKey(null)); [EOL] }
public void testLocaleKeyMap() throws Exception { [EOL]     Locale key = Locale.CHINA; [EOL]     String JSON = "{ \"" + key + "\":4}"; [EOL]     Map<Locale, Object> result = MAPPER.readValue(JSON, new TypeReference<Map<Locale, Object>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.size()); [EOL]     Object ob = result.keySet().iterator().next(); [EOL]     assertNotNull(ob); [EOL]     assertEquals(Locale.class, ob.getClass()); [EOL]     assertEquals(key, ob); [EOL] }
public void testLocaleKeyMap() throws Exception { [EOL]     Locale key = Locale.CHINA; [EOL]     String JSON = "{ \"" + key + "\":4}"; [EOL]     Map<Locale, Object> result = MAPPER.readValue(JSON, new TypeReference<Map<Locale, Object>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.size()); [EOL]     Object ob = result.keySet().iterator().next(); [EOL]     assertNotNull(ob); [EOL]     assertEquals(Locale.class, ob.getClass()); [EOL]     assertEquals(key, ob); [EOL] }
public void testAllowUnknownEnumValuesAsMapKeysReadAsNull() throws Exception { [EOL]     ObjectReader reader = MAPPER.reader(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL); [EOL]     ClassWithEnumMapKey result = reader.withType(ClassWithEnumMapKey.class).readValue("{\"map\":{\"NO-SUCH-VALUE\":\"val\"}}"); [EOL]     assertTrue(result.map.containsKey(null)); [EOL] }
public void testAllowUnknownEnumValuesAsMapKeysReadAsNull() throws Exception { [EOL]     ObjectReader reader = MAPPER.reader(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL); [EOL]     ClassWithEnumMapKey result = reader.withType(ClassWithEnumMapKey.class).readValue("{\"map\":{\"NO-SUCH-VALUE\":\"val\"}}"); [EOL]     assertTrue(result.map.containsKey(null)); [EOL] }
public void testAllowUnknownEnumValuesAsMapKeysReadAsNull() throws Exception { [EOL]     ObjectReader reader = MAPPER.reader(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL); [EOL]     ClassWithEnumMapKey result = reader.withType(ClassWithEnumMapKey.class).readValue("{\"map\":{\"NO-SUCH-VALUE\":\"val\"}}"); [EOL]     assertTrue(result.map.containsKey(null)); [EOL] }
public void testAllowUnknownEnumValuesAsMapKeysReadAsNull() throws Exception { [EOL]     ObjectReader reader = MAPPER.reader(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL); [EOL]     ClassWithEnumMapKey result = reader.withType(ClassWithEnumMapKey.class).readValue("{\"map\":{\"NO-SUCH-VALUE\":\"val\"}}"); [EOL]     assertTrue(result.map.containsKey(null)); [EOL] }
public void testAllowUnknownEnumValuesAsMapKeysReadAsNull() throws Exception { [EOL]     ObjectReader reader = MAPPER.reader(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL); [EOL]     ClassWithEnumMapKey result = reader.withType(ClassWithEnumMapKey.class).readValue("{\"map\":{\"NO-SUCH-VALUE\":\"val\"}}"); [EOL]     assertTrue(result.map.containsKey(null)); [EOL] }
public void testNested() throws Exception { [EOL]     final String JSON = "{\"coordinates\":[[[-3,\n1],[179.859681,51.175092]]]}"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL] }
public void testNested() throws Exception { [EOL]     final String JSON = "{\"coordinates\":[[[-3,\n1],[179.859681,51.175092]]]}"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL] }
public void testNested() throws Exception { [EOL]     final String JSON = "{\"coordinates\":[[[-3,\n1],[179.859681,51.175092]]]}"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL] }
public void testNested() throws Exception { [EOL]     final String JSON = "{\"coordinates\":[[[-3,\n1],[179.859681,51.175092]]]}"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL] }
public void testNested() throws Exception { [EOL]     final String JSON = "{\"coordinates\":[[[-3,\n1],[179.859681,51.175092]]]}"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL] }
public void testNested() throws Exception { [EOL]     final String JSON = "{\"coordinates\":[[[-3,\n1],[179.859681,51.175092]]]}"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL] }
public void testNested() throws Exception { [EOL]     final String JSON = "{\"coordinates\":[[[-3,\n1],[179.859681,51.175092]]]}"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL] }
public void testNested() throws Exception { [EOL]     final String JSON = "{\"coordinates\":[[[-3,\n1],[179.859681,51.175092]]]}"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL] }
public void testNested() throws Exception { [EOL]     final String JSON = "{\"coordinates\":[[[-3,\n1],[179.859681,51.175092]]]}"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL] }
public void testNested() throws Exception { [EOL]     final String JSON = "{\"coordinates\":[[[-3,\n1],[179.859681,51.175092]]]}"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testEnumsWithJsonValue() throws Exception { [EOL]     EnumWithJsonValue e = MAPPER.readValue(quote("foo"), EnumWithJsonValue.class); [EOL]     assertSame(EnumWithJsonValue.A, e); [EOL]     e = MAPPER.readValue(quote("bar"), EnumWithJsonValue.class); [EOL]     assertSame(EnumWithJsonValue.B, e); [EOL]     EnumSet<EnumWithJsonValue> set = MAPPER.readValue("[\"bar\"]", new TypeReference<EnumSet<EnumWithJsonValue>>() { [EOL]     }); [EOL]     assertNotNull(set); [EOL]     assertEquals(1, set.size()); [EOL]     assertTrue(set.contains(EnumWithJsonValue.B)); [EOL]     assertFalse(set.contains(EnumWithJsonValue.A)); [EOL]     EnumMap<EnumWithJsonValue, Integer> map = MAPPER.readValue("{\"foo\":13}", new TypeReference<EnumMap<EnumWithJsonValue, Integer>>() { [EOL]     }); [EOL]     assertNotNull(map); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals(Integer.valueOf(13), map.get(EnumWithJsonValue.A)); [EOL] }
public void testEnumsWithJsonValue() throws Exception { [EOL]     EnumWithJsonValue e = MAPPER.readValue(quote("foo"), EnumWithJsonValue.class); [EOL]     assertSame(EnumWithJsonValue.A, e); [EOL]     e = MAPPER.readValue(quote("bar"), EnumWithJsonValue.class); [EOL]     assertSame(EnumWithJsonValue.B, e); [EOL]     EnumSet<EnumWithJsonValue> set = MAPPER.readValue("[\"bar\"]", new TypeReference<EnumSet<EnumWithJsonValue>>() { [EOL]     }); [EOL]     assertNotNull(set); [EOL]     assertEquals(1, set.size()); [EOL]     assertTrue(set.contains(EnumWithJsonValue.B)); [EOL]     assertFalse(set.contains(EnumWithJsonValue.A)); [EOL]     EnumMap<EnumWithJsonValue, Integer> map = MAPPER.readValue("{\"foo\":13}", new TypeReference<EnumMap<EnumWithJsonValue, Integer>>() { [EOL]     }); [EOL]     assertNotNull(map); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals(Integer.valueOf(13), map.get(EnumWithJsonValue.A)); [EOL] }
public void testEnumsWithJsonValue() throws Exception { [EOL]     EnumWithJsonValue e = MAPPER.readValue(quote("foo"), EnumWithJsonValue.class); [EOL]     assertSame(EnumWithJsonValue.A, e); [EOL]     e = MAPPER.readValue(quote("bar"), EnumWithJsonValue.class); [EOL]     assertSame(EnumWithJsonValue.B, e); [EOL]     EnumSet<EnumWithJsonValue> set = MAPPER.readValue("[\"bar\"]", new TypeReference<EnumSet<EnumWithJsonValue>>() { [EOL]     }); [EOL]     assertNotNull(set); [EOL]     assertEquals(1, set.size()); [EOL]     assertTrue(set.contains(EnumWithJsonValue.B)); [EOL]     assertFalse(set.contains(EnumWithJsonValue.A)); [EOL]     EnumMap<EnumWithJsonValue, Integer> map = MAPPER.readValue("{\"foo\":13}", new TypeReference<EnumMap<EnumWithJsonValue, Integer>>() { [EOL]     }); [EOL]     assertNotNull(map); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals(Integer.valueOf(13), map.get(EnumWithJsonValue.A)); [EOL] }
public void testEnumsWithJsonValue() throws Exception { [EOL]     EnumWithJsonValue e = MAPPER.readValue(quote("foo"), EnumWithJsonValue.class); [EOL]     assertSame(EnumWithJsonValue.A, e); [EOL]     e = MAPPER.readValue(quote("bar"), EnumWithJsonValue.class); [EOL]     assertSame(EnumWithJsonValue.B, e); [EOL]     EnumSet<EnumWithJsonValue> set = MAPPER.readValue("[\"bar\"]", new TypeReference<EnumSet<EnumWithJsonValue>>() { [EOL]     }); [EOL]     assertNotNull(set); [EOL]     assertEquals(1, set.size()); [EOL]     assertTrue(set.contains(EnumWithJsonValue.B)); [EOL]     assertFalse(set.contains(EnumWithJsonValue.A)); [EOL]     EnumMap<EnumWithJsonValue, Integer> map = MAPPER.readValue("{\"foo\":13}", new TypeReference<EnumMap<EnumWithJsonValue, Integer>>() { [EOL]     }); [EOL]     assertNotNull(map); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals(Integer.valueOf(13), map.get(EnumWithJsonValue.A)); [EOL] }
public void testLocaleKeyMap() throws Exception { [EOL]     Locale key = Locale.CHINA; [EOL]     String JSON = "{ \"" + key + "\":4}"; [EOL]     Map<Locale, Object> result = MAPPER.readValue(JSON, new TypeReference<Map<Locale, Object>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.size()); [EOL]     Object ob = result.keySet().iterator().next(); [EOL]     assertNotNull(ob); [EOL]     assertEquals(Locale.class, ob.getClass()); [EOL]     assertEquals(key, ob); [EOL] }
public void testLocaleKeyMap() throws Exception { [EOL]     Locale key = Locale.CHINA; [EOL]     String JSON = "{ \"" + key + "\":4}"; [EOL]     Map<Locale, Object> result = MAPPER.readValue(JSON, new TypeReference<Map<Locale, Object>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.size()); [EOL]     Object ob = result.keySet().iterator().next(); [EOL]     assertNotNull(ob); [EOL]     assertEquals(Locale.class, ob.getClass()); [EOL]     assertEquals(key, ob); [EOL] }
public void testLocaleKeyMap() throws Exception { [EOL]     Locale key = Locale.CHINA; [EOL]     String JSON = "{ \"" + key + "\":4}"; [EOL]     Map<Locale, Object> result = MAPPER.readValue(JSON, new TypeReference<Map<Locale, Object>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.size()); [EOL]     Object ob = result.keySet().iterator().next(); [EOL]     assertNotNull(ob); [EOL]     assertEquals(Locale.class, ob.getClass()); [EOL]     assertEquals(key, ob); [EOL] }
public void testLocaleKeyMap() throws Exception { [EOL]     Locale key = Locale.CHINA; [EOL]     String JSON = "{ \"" + key + "\":4}"; [EOL]     Map<Locale, Object> result = MAPPER.readValue(JSON, new TypeReference<Map<Locale, Object>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.size()); [EOL]     Object ob = result.keySet().iterator().next(); [EOL]     assertNotNull(ob); [EOL]     assertEquals(Locale.class, ob.getClass()); [EOL]     assertEquals(key, ob); [EOL] }
public void testLocaleKeyMap() throws Exception { [EOL]     Locale key = Locale.CHINA; [EOL]     String JSON = "{ \"" + key + "\":4}"; [EOL]     Map<Locale, Object> result = MAPPER.readValue(JSON, new TypeReference<Map<Locale, Object>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.size()); [EOL]     Object ob = result.keySet().iterator().next(); [EOL]     assertNotNull(ob); [EOL]     assertEquals(Locale.class, ob.getClass()); [EOL]     assertEquals(key, ob); [EOL] }
public void testLocaleKeyMap() throws Exception { [EOL]     Locale key = Locale.CHINA; [EOL]     String JSON = "{ \"" + key + "\":4}"; [EOL]     Map<Locale, Object> result = MAPPER.readValue(JSON, new TypeReference<Map<Locale, Object>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.size()); [EOL]     Object ob = result.keySet().iterator().next(); [EOL]     assertNotNull(ob); [EOL]     assertEquals(Locale.class, ob.getClass()); [EOL]     assertEquals(key, ob); [EOL] }
public void testLocaleKeyMap() throws Exception { [EOL]     Locale key = Locale.CHINA; [EOL]     String JSON = "{ \"" + key + "\":4}"; [EOL]     Map<Locale, Object> result = MAPPER.readValue(JSON, new TypeReference<Map<Locale, Object>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.size()); [EOL]     Object ob = result.keySet().iterator().next(); [EOL]     assertNotNull(ob); [EOL]     assertEquals(Locale.class, ob.getClass()); [EOL]     assertEquals(key, ob); [EOL] }
public void testLocaleKeyMap() throws Exception { [EOL]     Locale key = Locale.CHINA; [EOL]     String JSON = "{ \"" + key + "\":4}"; [EOL]     Map<Locale, Object> result = MAPPER.readValue(JSON, new TypeReference<Map<Locale, Object>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.size()); [EOL]     Object ob = result.keySet().iterator().next(); [EOL]     assertNotNull(ob); [EOL]     assertEquals(Locale.class, ob.getClass()); [EOL]     assertEquals(key, ob); [EOL] }
public void testLocaleKeyMap() throws Exception { [EOL]     Locale key = Locale.CHINA; [EOL]     String JSON = "{ \"" + key + "\":4}"; [EOL]     Map<Locale, Object> result = MAPPER.readValue(JSON, new TypeReference<Map<Locale, Object>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.size()); [EOL]     Object ob = result.keySet().iterator().next(); [EOL]     assertNotNull(ob); [EOL]     assertEquals(Locale.class, ob.getClass()); [EOL]     assertEquals(key, ob); [EOL] }
public void testLocaleKeyMap() throws Exception { [EOL]     Locale key = Locale.CHINA; [EOL]     String JSON = "{ \"" + key + "\":4}"; [EOL]     Map<Locale, Object> result = MAPPER.readValue(JSON, new TypeReference<Map<Locale, Object>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.size()); [EOL]     Object ob = result.keySet().iterator().next(); [EOL]     assertNotNull(ob); [EOL]     assertEquals(Locale.class, ob.getClass()); [EOL]     assertEquals(key, ob); [EOL] }
public void testLocaleKeyMap() throws Exception { [EOL]     Locale key = Locale.CHINA; [EOL]     String JSON = "{ \"" + key + "\":4}"; [EOL]     Map<Locale, Object> result = MAPPER.readValue(JSON, new TypeReference<Map<Locale, Object>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.size()); [EOL]     Object ob = result.keySet().iterator().next(); [EOL]     assertNotNull(ob); [EOL]     assertEquals(Locale.class, ob.getClass()); [EOL]     assertEquals(key, ob); [EOL] }
public void testLocaleKeyMap() throws Exception { [EOL]     Locale key = Locale.CHINA; [EOL]     String JSON = "{ \"" + key + "\":4}"; [EOL]     Map<Locale, Object> result = MAPPER.readValue(JSON, new TypeReference<Map<Locale, Object>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.size()); [EOL]     Object ob = result.keySet().iterator().next(); [EOL]     assertNotNull(ob); [EOL]     assertEquals(Locale.class, ob.getClass()); [EOL]     assertEquals(key, ob); [EOL] }
public void testLocaleKeyMap() throws Exception { [EOL]     Locale key = Locale.CHINA; [EOL]     String JSON = "{ \"" + key + "\":4}"; [EOL]     Map<Locale, Object> result = MAPPER.readValue(JSON, new TypeReference<Map<Locale, Object>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.size()); [EOL]     Object ob = result.keySet().iterator().next(); [EOL]     assertNotNull(ob); [EOL]     assertEquals(Locale.class, ob.getClass()); [EOL]     assertEquals(key, ob); [EOL] }
public void testLocaleKeyMap() throws Exception { [EOL]     Locale key = Locale.CHINA; [EOL]     String JSON = "{ \"" + key + "\":4}"; [EOL]     Map<Locale, Object> result = MAPPER.readValue(JSON, new TypeReference<Map<Locale, Object>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.size()); [EOL]     Object ob = result.keySet().iterator().next(); [EOL]     assertNotNull(ob); [EOL]     assertEquals(Locale.class, ob.getClass()); [EOL]     assertEquals(key, ob); [EOL] }
public void testLocaleKeyMap() throws Exception { [EOL]     Locale key = Locale.CHINA; [EOL]     String JSON = "{ \"" + key + "\":4}"; [EOL]     Map<Locale, Object> result = MAPPER.readValue(JSON, new TypeReference<Map<Locale, Object>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.size()); [EOL]     Object ob = result.keySet().iterator().next(); [EOL]     assertNotNull(ob); [EOL]     assertEquals(Locale.class, ob.getClass()); [EOL]     assertEquals(key, ob); [EOL] }
public void testLocaleKeyMap() throws Exception { [EOL]     Locale key = Locale.CHINA; [EOL]     String JSON = "{ \"" + key + "\":4}"; [EOL]     Map<Locale, Object> result = MAPPER.readValue(JSON, new TypeReference<Map<Locale, Object>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.size()); [EOL]     Object ob = result.keySet().iterator().next(); [EOL]     assertNotNull(ob); [EOL]     assertEquals(Locale.class, ob.getClass()); [EOL]     assertEquals(key, ob); [EOL] }
public void testTypedLists() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     List<Issue822Interface> list = new ArrayList<Issue822Interface>(); [EOL]     list.add(new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<List<Issue822Interface>>() { [EOL]     }).writeValueAsString(list); [EOL]     assertEquals("[{\"a\":3}]", listJson); [EOL] }
public void testTypedLists() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     List<Issue822Interface> list = new ArrayList<Issue822Interface>(); [EOL]     list.add(new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<List<Issue822Interface>>() { [EOL]     }).writeValueAsString(list); [EOL]     assertEquals("[{\"a\":3}]", listJson); [EOL] }
public void testTypedLists() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     List<Issue822Interface> list = new ArrayList<Issue822Interface>(); [EOL]     list.add(new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<List<Issue822Interface>>() { [EOL]     }).writeValueAsString(list); [EOL]     assertEquals("[{\"a\":3}]", listJson); [EOL] }
public void testTypedLists() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     List<Issue822Interface> list = new ArrayList<Issue822Interface>(); [EOL]     list.add(new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<List<Issue822Interface>>() { [EOL]     }).writeValueAsString(list); [EOL]     assertEquals("[{\"a\":3}]", listJson); [EOL] }
public void testTypedLists() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     List<Issue822Interface> list = new ArrayList<Issue822Interface>(); [EOL]     list.add(new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<List<Issue822Interface>>() { [EOL]     }).writeValueAsString(list); [EOL]     assertEquals("[{\"a\":3}]", listJson); [EOL] }
public void testTypedLists() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     List<Issue822Interface> list = new ArrayList<Issue822Interface>(); [EOL]     list.add(new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<List<Issue822Interface>>() { [EOL]     }).writeValueAsString(list); [EOL]     assertEquals("[{\"a\":3}]", listJson); [EOL] }
public void testTypedLists() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     List<Issue822Interface> list = new ArrayList<Issue822Interface>(); [EOL]     list.add(new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<List<Issue822Interface>>() { [EOL]     }).writeValueAsString(list); [EOL]     assertEquals("[{\"a\":3}]", listJson); [EOL] }
public void testTypedLists() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     List<Issue822Interface> list = new ArrayList<Issue822Interface>(); [EOL]     list.add(new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<List<Issue822Interface>>() { [EOL]     }).writeValueAsString(list); [EOL]     assertEquals("[{\"a\":3}]", listJson); [EOL] }
public void testTypedLists() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     List<Issue822Interface> list = new ArrayList<Issue822Interface>(); [EOL]     list.add(new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<List<Issue822Interface>>() { [EOL]     }).writeValueAsString(list); [EOL]     assertEquals("[{\"a\":3}]", listJson); [EOL] }
public void testMethodAnnotationInList() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(String.class, new AnnotatedContextualSerializer()); [EOL]     mapper.registerModule(module); [EOL]     ContextualListBean beans = new ContextualListBean("abc"); [EOL]     assertEquals("{\"beans\":[\"list->abc\"]}", mapper.writeValueAsString(beans)); [EOL] }
public void testMethodAnnotationInList() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(String.class, new AnnotatedContextualSerializer()); [EOL]     mapper.registerModule(module); [EOL]     ContextualListBean beans = new ContextualListBean("abc"); [EOL]     assertEquals("{\"beans\":[\"list->abc\"]}", mapper.writeValueAsString(beans)); [EOL] }
public void testCustomContentSerializer() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     MyObject object = new MyObject(); [EOL]     object.list = Arrays.asList("foo"); [EOL]     String json = m.writeValueAsString(object); [EOL]     assertEquals("{\"list\":[\"bar\"]}", json); [EOL] }
public void testCustomContentSerializer() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     MyObject object = new MyObject(); [EOL]     object.list = Arrays.asList("foo"); [EOL]     String json = m.writeValueAsString(object); [EOL]     assertEquals("{\"list\":[\"bar\"]}", json); [EOL] }
public void testCustomContentSerializer() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     MyObject object = new MyObject(); [EOL]     object.list = Arrays.asList("foo"); [EOL]     String json = m.writeValueAsString(object); [EOL]     assertEquals("{\"list\":[\"bar\"]}", json); [EOL] }
public void testCustomContentSerializer() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     MyObject object = new MyObject(); [EOL]     object.list = Arrays.asList("foo"); [EOL]     String json = m.writeValueAsString(object); [EOL]     assertEquals("{\"list\":[\"bar\"]}", json); [EOL] }
public void testCustomContentSerializer() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     MyObject object = new MyObject(); [EOL]     object.list = Arrays.asList("foo"); [EOL]     String json = m.writeValueAsString(object); [EOL]     assertEquals("{\"list\":[\"bar\"]}", json); [EOL] }
public void testCustomContentSerializer() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     MyObject object = new MyObject(); [EOL]     object.list = Arrays.asList("foo"); [EOL]     String json = m.writeValueAsString(object); [EOL]     assertEquals("{\"list\":[\"bar\"]}", json); [EOL] }
public void testCustomContentSerializer() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     MyObject object = new MyObject(); [EOL]     object.list = Arrays.asList("foo"); [EOL]     String json = m.writeValueAsString(object); [EOL]     assertEquals("{\"list\":[\"bar\"]}", json); [EOL] }
public void testCustomContentSerializer() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     MyObject object = new MyObject(); [EOL]     object.list = Arrays.asList("foo"); [EOL]     String json = m.writeValueAsString(object); [EOL]     assertEquals("{\"list\":[\"bar\"]}", json); [EOL] }
public void testCustomContentSerializer() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     MyObject object = new MyObject(); [EOL]     object.list = Arrays.asList("foo"); [EOL]     String json = m.writeValueAsString(object); [EOL]     assertEquals("{\"list\":[\"bar\"]}", json); [EOL] }
public void testCustomContentSerializer() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     MyObject object = new MyObject(); [EOL]     object.list = Arrays.asList("foo"); [EOL]     String json = m.writeValueAsString(object); [EOL]     assertEquals("{\"list\":[\"bar\"]}", json); [EOL] }
public void testCustomContentSerializer() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     MyObject object = new MyObject(); [EOL]     object.list = Arrays.asList("foo"); [EOL]     String json = m.writeValueAsString(object); [EOL]     assertEquals("{\"list\":[\"bar\"]}", json); [EOL] }
public void testCustomContentSerializer() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     MyObject object = new MyObject(); [EOL]     object.list = Arrays.asList("foo"); [EOL]     String json = m.writeValueAsString(object); [EOL]     assertEquals("{\"list\":[\"bar\"]}", json); [EOL] }
public void testCustomContentSerializer() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     MyObject object = new MyObject(); [EOL]     object.list = Arrays.asList("foo"); [EOL]     String json = m.writeValueAsString(object); [EOL]     assertEquals("{\"list\":[\"bar\"]}", json); [EOL] }
public void testSimpleGetterInterfaceImpl() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(m, new PojoImpl()); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals(Integer.valueOf(5), result.get("foobar")); [EOL]     assertEquals(Integer.valueOf(1), result.get("width")); [EOL]     assertEquals(Integer.valueOf(2), result.get("length")); [EOL] }
public void testRetain() { [EOL]     ObjectNode ob = MAPPER.createObjectNode(); [EOL]     ob.put("a", "a"); [EOL]     ob.put("b", "b"); [EOL]     ob.put("c", "c"); [EOL]     assertEquals(3, ob.size()); [EOL]     assertSame(ob, ob.retain("a", "c")); [EOL]     assertEquals(2, ob.size()); [EOL]     assertEquals("a", ob.get("a").textValue()); [EOL]     assertNull(ob.get("b")); [EOL]     assertEquals("c", ob.get("c").textValue()); [EOL] }
public void testRetain() { [EOL]     ObjectNode ob = MAPPER.createObjectNode(); [EOL]     ob.put("a", "a"); [EOL]     ob.put("b", "b"); [EOL]     ob.put("c", "c"); [EOL]     assertEquals(3, ob.size()); [EOL]     assertSame(ob, ob.retain("a", "c")); [EOL]     assertEquals(2, ob.size()); [EOL]     assertEquals("a", ob.get("a").textValue()); [EOL]     assertNull(ob.get("b")); [EOL]     assertEquals("c", ob.get("c").textValue()); [EOL] }
public void testRetain() { [EOL]     ObjectNode ob = MAPPER.createObjectNode(); [EOL]     ob.put("a", "a"); [EOL]     ob.put("b", "b"); [EOL]     ob.put("c", "c"); [EOL]     assertEquals(3, ob.size()); [EOL]     assertSame(ob, ob.retain("a", "c")); [EOL]     assertEquals(2, ob.size()); [EOL]     assertEquals("a", ob.get("a").textValue()); [EOL]     assertNull(ob.get("b")); [EOL]     assertEquals("c", ob.get("c").textValue()); [EOL] }
public void testRetain() { [EOL]     ObjectNode ob = MAPPER.createObjectNode(); [EOL]     ob.put("a", "a"); [EOL]     ob.put("b", "b"); [EOL]     ob.put("c", "c"); [EOL]     assertEquals(3, ob.size()); [EOL]     assertSame(ob, ob.retain("a", "c")); [EOL]     assertEquals(2, ob.size()); [EOL]     assertEquals("a", ob.get("a").textValue()); [EOL]     assertNull(ob.get("b")); [EOL]     assertEquals("c", ob.get("c").textValue()); [EOL] }
public void testValidWith() throws Exception { [EOL]     ObjectNode root = MAPPER.createObjectNode(); [EOL]     assertEquals("{}", MAPPER.writeValueAsString(root)); [EOL]     JsonNode child = root.with("prop"); [EOL]     assertTrue(child instanceof ObjectNode); [EOL]     assertEquals("{\"prop\":{}}", MAPPER.writeValueAsString(root)); [EOL] }
public void testValidWith() throws Exception { [EOL]     ObjectNode root = MAPPER.createObjectNode(); [EOL]     assertEquals("{}", MAPPER.writeValueAsString(root)); [EOL]     JsonNode child = root.with("prop"); [EOL]     assertTrue(child instanceof ObjectNode); [EOL]     assertEquals("{\"prop\":{}}", MAPPER.writeValueAsString(root)); [EOL] }
public void testValidWith() throws Exception { [EOL]     ObjectNode root = MAPPER.createObjectNode(); [EOL]     assertEquals("{}", MAPPER.writeValueAsString(root)); [EOL]     JsonNode child = root.with("prop"); [EOL]     assertTrue(child instanceof ObjectNode); [EOL]     assertEquals("{\"prop\":{}}", MAPPER.writeValueAsString(root)); [EOL] }
public void testMatchingMultiple() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     List<JsonNode> nodes = root.findValues("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertEquals(3, nodes.get(0).intValue()); [EOL]     assertEquals(42, nodes.get(1).intValue()); [EOL]     nodes = root.findParents("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertTrue(nodes.get(0).isObject()); [EOL]     assertTrue(nodes.get(1).isObject()); [EOL]     assertEquals(3, nodes.get(0).path("value").intValue()); [EOL]     assertEquals(42, nodes.get(1).path("value").intValue()); [EOL]     List<String> values = root.findValuesAsText("value"); [EOL]     assertEquals(2, values.size()); [EOL]     assertEquals("3", values.get(0)); [EOL]     assertEquals("42", values.get(1)); [EOL] }
public void testMatchingMultiple() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     List<JsonNode> nodes = root.findValues("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertEquals(3, nodes.get(0).intValue()); [EOL]     assertEquals(42, nodes.get(1).intValue()); [EOL]     nodes = root.findParents("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertTrue(nodes.get(0).isObject()); [EOL]     assertTrue(nodes.get(1).isObject()); [EOL]     assertEquals(3, nodes.get(0).path("value").intValue()); [EOL]     assertEquals(42, nodes.get(1).path("value").intValue()); [EOL]     List<String> values = root.findValuesAsText("value"); [EOL]     assertEquals(2, values.size()); [EOL]     assertEquals("3", values.get(0)); [EOL]     assertEquals("42", values.get(1)); [EOL] }
public void testMatchingMultiple() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     List<JsonNode> nodes = root.findValues("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertEquals(3, nodes.get(0).intValue()); [EOL]     assertEquals(42, nodes.get(1).intValue()); [EOL]     nodes = root.findParents("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertTrue(nodes.get(0).isObject()); [EOL]     assertTrue(nodes.get(1).isObject()); [EOL]     assertEquals(3, nodes.get(0).path("value").intValue()); [EOL]     assertEquals(42, nodes.get(1).path("value").intValue()); [EOL]     List<String> values = root.findValuesAsText("value"); [EOL]     assertEquals(2, values.size()); [EOL]     assertEquals("3", values.get(0)); [EOL]     assertEquals("42", values.get(1)); [EOL] }
public void testMatchingMultiple() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     List<JsonNode> nodes = root.findValues("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertEquals(3, nodes.get(0).intValue()); [EOL]     assertEquals(42, nodes.get(1).intValue()); [EOL]     nodes = root.findParents("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertTrue(nodes.get(0).isObject()); [EOL]     assertTrue(nodes.get(1).isObject()); [EOL]     assertEquals(3, nodes.get(0).path("value").intValue()); [EOL]     assertEquals(42, nodes.get(1).path("value").intValue()); [EOL]     List<String> values = root.findValuesAsText("value"); [EOL]     assertEquals(2, values.size()); [EOL]     assertEquals("3", values.get(0)); [EOL]     assertEquals("42", values.get(1)); [EOL] }
public void testMatchingMultiple() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     List<JsonNode> nodes = root.findValues("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertEquals(3, nodes.get(0).intValue()); [EOL]     assertEquals(42, nodes.get(1).intValue()); [EOL]     nodes = root.findParents("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertTrue(nodes.get(0).isObject()); [EOL]     assertTrue(nodes.get(1).isObject()); [EOL]     assertEquals(3, nodes.get(0).path("value").intValue()); [EOL]     assertEquals(42, nodes.get(1).path("value").intValue()); [EOL]     List<String> values = root.findValuesAsText("value"); [EOL]     assertEquals(2, values.size()); [EOL]     assertEquals("3", values.get(0)); [EOL]     assertEquals("42", values.get(1)); [EOL] }
public void testMatchingMultiple() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     List<JsonNode> nodes = root.findValues("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertEquals(3, nodes.get(0).intValue()); [EOL]     assertEquals(42, nodes.get(1).intValue()); [EOL]     nodes = root.findParents("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertTrue(nodes.get(0).isObject()); [EOL]     assertTrue(nodes.get(1).isObject()); [EOL]     assertEquals(3, nodes.get(0).path("value").intValue()); [EOL]     assertEquals(42, nodes.get(1).path("value").intValue()); [EOL]     List<String> values = root.findValuesAsText("value"); [EOL]     assertEquals(2, values.size()); [EOL]     assertEquals("3", values.get(0)); [EOL]     assertEquals("42", values.get(1)); [EOL] }
public void testMatchingMultiple() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     List<JsonNode> nodes = root.findValues("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertEquals(3, nodes.get(0).intValue()); [EOL]     assertEquals(42, nodes.get(1).intValue()); [EOL]     nodes = root.findParents("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertTrue(nodes.get(0).isObject()); [EOL]     assertTrue(nodes.get(1).isObject()); [EOL]     assertEquals(3, nodes.get(0).path("value").intValue()); [EOL]     assertEquals(42, nodes.get(1).path("value").intValue()); [EOL]     List<String> values = root.findValuesAsText("value"); [EOL]     assertEquals(2, values.size()); [EOL]     assertEquals("3", values.get(0)); [EOL]     assertEquals("42", values.get(1)); [EOL] }
public void testMatchingMultiple() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     List<JsonNode> nodes = root.findValues("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertEquals(3, nodes.get(0).intValue()); [EOL]     assertEquals(42, nodes.get(1).intValue()); [EOL]     nodes = root.findParents("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertTrue(nodes.get(0).isObject()); [EOL]     assertTrue(nodes.get(1).isObject()); [EOL]     assertEquals(3, nodes.get(0).path("value").intValue()); [EOL]     assertEquals(42, nodes.get(1).path("value").intValue()); [EOL]     List<String> values = root.findValuesAsText("value"); [EOL]     assertEquals(2, values.size()); [EOL]     assertEquals("3", values.get(0)); [EOL]     assertEquals("42", values.get(1)); [EOL] }
public void testMatchingMultiple() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     List<JsonNode> nodes = root.findValues("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertEquals(3, nodes.get(0).intValue()); [EOL]     assertEquals(42, nodes.get(1).intValue()); [EOL]     nodes = root.findParents("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertTrue(nodes.get(0).isObject()); [EOL]     assertTrue(nodes.get(1).isObject()); [EOL]     assertEquals(3, nodes.get(0).path("value").intValue()); [EOL]     assertEquals(42, nodes.get(1).path("value").intValue()); [EOL]     List<String> values = root.findValuesAsText("value"); [EOL]     assertEquals(2, values.size()); [EOL]     assertEquals("3", values.get(0)); [EOL]     assertEquals("42", values.get(1)); [EOL] }
public void testMatchingMultiple() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     List<JsonNode> nodes = root.findValues("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertEquals(3, nodes.get(0).intValue()); [EOL]     assertEquals(42, nodes.get(1).intValue()); [EOL]     nodes = root.findParents("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertTrue(nodes.get(0).isObject()); [EOL]     assertTrue(nodes.get(1).isObject()); [EOL]     assertEquals(3, nodes.get(0).path("value").intValue()); [EOL]     assertEquals(42, nodes.get(1).path("value").intValue()); [EOL]     List<String> values = root.findValuesAsText("value"); [EOL]     assertEquals(2, values.size()); [EOL]     assertEquals("3", values.get(0)); [EOL]     assertEquals("42", values.get(1)); [EOL] }
public void testValidWith() throws Exception { [EOL]     ObjectNode root = MAPPER.createObjectNode(); [EOL]     assertEquals("{}", MAPPER.writeValueAsString(root)); [EOL]     JsonNode child = root.with("prop"); [EOL]     assertTrue(child instanceof ObjectNode); [EOL]     assertEquals("{\"prop\":{}}", MAPPER.writeValueAsString(root)); [EOL] }
public void testValidWith() throws Exception { [EOL]     ObjectNode root = MAPPER.createObjectNode(); [EOL]     assertEquals("{}", MAPPER.writeValueAsString(root)); [EOL]     JsonNode child = root.with("prop"); [EOL]     assertTrue(child instanceof ObjectNode); [EOL]     assertEquals("{\"prop\":{}}", MAPPER.writeValueAsString(root)); [EOL] }
public void testNodeInArray() throws Exception { [EOL]     JsonNode node = new ObjectMapper().readTree("{\"a\":3}"); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT); [EOL]     Object[] obs = new Object[] { node }; [EOL]     String json = m.writeValueAsString(obs); [EOL]     Object[] result = m.readValue(json, Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     Object ob = result[0]; [EOL]     assertTrue(ob instanceof JsonNode); [EOL] }
public void testNodeInArray() throws Exception { [EOL]     JsonNode node = new ObjectMapper().readTree("{\"a\":3}"); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT); [EOL]     Object[] obs = new Object[] { node }; [EOL]     String json = m.writeValueAsString(obs); [EOL]     Object[] result = m.readValue(json, Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     Object ob = result[0]; [EOL]     assertTrue(ob instanceof JsonNode); [EOL] }
public void testNullChecking() { [EOL]     ObjectNode o1 = JsonNodeFactory.instance.objectNode(); [EOL]     ObjectNode o2 = JsonNodeFactory.instance.objectNode(); [EOL]     o1.setAll(o2); [EOL]     assertEquals(0, o1.size()); [EOL]     assertEquals(0, o2.size()); [EOL]     o1.set("x", null); [EOL]     JsonNode n = o1.get("x"); [EOL]     assertNotNull(n); [EOL]     assertSame(n, NullNode.instance); [EOL]     o1.put("str", (String) null); [EOL]     n = o1.get("str"); [EOL]     assertNotNull(n); [EOL]     assertSame(n, NullNode.instance); [EOL]     o1.put("d", (BigDecimal) null); [EOL]     n = o1.get("d"); [EOL]     assertNotNull(n); [EOL]     assertSame(n, NullNode.instance); [EOL] }
public void testNullChecking() { [EOL]     ObjectNode o1 = JsonNodeFactory.instance.objectNode(); [EOL]     ObjectNode o2 = JsonNodeFactory.instance.objectNode(); [EOL]     o1.setAll(o2); [EOL]     assertEquals(0, o1.size()); [EOL]     assertEquals(0, o2.size()); [EOL]     o1.set("x", null); [EOL]     JsonNode n = o1.get("x"); [EOL]     assertNotNull(n); [EOL]     assertSame(n, NullNode.instance); [EOL]     o1.put("str", (String) null); [EOL]     n = o1.get("str"); [EOL]     assertNotNull(n); [EOL]     assertSame(n, NullNode.instance); [EOL]     o1.put("d", (BigDecimal) null); [EOL]     n = o1.get("d"); [EOL]     assertNotNull(n); [EOL]     assertSame(n, NullNode.instance); [EOL] }
public void testRetain() { [EOL]     ObjectNode ob = MAPPER.createObjectNode(); [EOL]     ob.put("a", "a"); [EOL]     ob.put("b", "b"); [EOL]     ob.put("c", "c"); [EOL]     assertEquals(3, ob.size()); [EOL]     assertSame(ob, ob.retain("a", "c")); [EOL]     assertEquals(2, ob.size()); [EOL]     assertEquals("a", ob.get("a").textValue()); [EOL]     assertNull(ob.get("b")); [EOL]     assertEquals("c", ob.get("c").textValue()); [EOL] }
public void testRetain() { [EOL]     ObjectNode ob = MAPPER.createObjectNode(); [EOL]     ob.put("a", "a"); [EOL]     ob.put("b", "b"); [EOL]     ob.put("c", "c"); [EOL]     assertEquals(3, ob.size()); [EOL]     assertSame(ob, ob.retain("a", "c")); [EOL]     assertEquals(2, ob.size()); [EOL]     assertEquals("a", ob.get("a").textValue()); [EOL]     assertNull(ob.get("b")); [EOL]     assertEquals("c", ob.get("c").textValue()); [EOL] }
public void testRetain() { [EOL]     ObjectNode ob = MAPPER.createObjectNode(); [EOL]     ob.put("a", "a"); [EOL]     ob.put("b", "b"); [EOL]     ob.put("c", "c"); [EOL]     assertEquals(3, ob.size()); [EOL]     assertSame(ob, ob.retain("a", "c")); [EOL]     assertEquals(2, ob.size()); [EOL]     assertEquals("a", ob.get("a").textValue()); [EOL]     assertNull(ob.get("b")); [EOL]     assertEquals("c", ob.get("c").textValue()); [EOL] }
public void testRetain() { [EOL]     ObjectNode ob = MAPPER.createObjectNode(); [EOL]     ob.put("a", "a"); [EOL]     ob.put("b", "b"); [EOL]     ob.put("c", "c"); [EOL]     assertEquals(3, ob.size()); [EOL]     assertSame(ob, ob.retain("a", "c")); [EOL]     assertEquals(2, ob.size()); [EOL]     assertEquals("a", ob.get("a").textValue()); [EOL]     assertNull(ob.get("b")); [EOL]     assertEquals("c", ob.get("c").textValue()); [EOL] }
public void testRetain() { [EOL]     ObjectNode ob = MAPPER.createObjectNode(); [EOL]     ob.put("a", "a"); [EOL]     ob.put("b", "b"); [EOL]     ob.put("c", "c"); [EOL]     assertEquals(3, ob.size()); [EOL]     assertSame(ob, ob.retain("a", "c")); [EOL]     assertEquals(2, ob.size()); [EOL]     assertEquals("a", ob.get("a").textValue()); [EOL]     assertNull(ob.get("b")); [EOL]     assertEquals("c", ob.get("c").textValue()); [EOL] }
public void testRetain() { [EOL]     ObjectNode ob = MAPPER.createObjectNode(); [EOL]     ob.put("a", "a"); [EOL]     ob.put("b", "b"); [EOL]     ob.put("c", "c"); [EOL]     assertEquals(3, ob.size()); [EOL]     assertSame(ob, ob.retain("a", "c")); [EOL]     assertEquals(2, ob.size()); [EOL]     assertEquals("a", ob.get("a").textValue()); [EOL]     assertNull(ob.get("b")); [EOL]     assertEquals("c", ob.get("c").textValue()); [EOL] }
public void testNullChecking() { [EOL]     ObjectNode o1 = JsonNodeFactory.instance.objectNode(); [EOL]     ObjectNode o2 = JsonNodeFactory.instance.objectNode(); [EOL]     o1.setAll(o2); [EOL]     assertEquals(0, o1.size()); [EOL]     assertEquals(0, o2.size()); [EOL]     o1.set("x", null); [EOL]     JsonNode n = o1.get("x"); [EOL]     assertNotNull(n); [EOL]     assertSame(n, NullNode.instance); [EOL]     o1.put("str", (String) null); [EOL]     n = o1.get("str"); [EOL]     assertNotNull(n); [EOL]     assertSame(n, NullNode.instance); [EOL]     o1.put("d", (BigDecimal) null); [EOL]     n = o1.get("d"); [EOL]     assertNotNull(n); [EOL]     assertSame(n, NullNode.instance); [EOL] }
public void testNullChecking() { [EOL]     ObjectNode o1 = JsonNodeFactory.instance.objectNode(); [EOL]     ObjectNode o2 = JsonNodeFactory.instance.objectNode(); [EOL]     o1.setAll(o2); [EOL]     assertEquals(0, o1.size()); [EOL]     assertEquals(0, o2.size()); [EOL]     o1.set("x", null); [EOL]     JsonNode n = o1.get("x"); [EOL]     assertNotNull(n); [EOL]     assertSame(n, NullNode.instance); [EOL]     o1.put("str", (String) null); [EOL]     n = o1.get("str"); [EOL]     assertNotNull(n); [EOL]     assertSame(n, NullNode.instance); [EOL]     o1.put("d", (BigDecimal) null); [EOL]     n = o1.get("d"); [EOL]     assertNotNull(n); [EOL]     assertSame(n, NullNode.instance); [EOL] }
public void testNullChecking() { [EOL]     ObjectNode o1 = JsonNodeFactory.instance.objectNode(); [EOL]     ObjectNode o2 = JsonNodeFactory.instance.objectNode(); [EOL]     o1.setAll(o2); [EOL]     assertEquals(0, o1.size()); [EOL]     assertEquals(0, o2.size()); [EOL]     o1.set("x", null); [EOL]     JsonNode n = o1.get("x"); [EOL]     assertNotNull(n); [EOL]     assertSame(n, NullNode.instance); [EOL]     o1.put("str", (String) null); [EOL]     n = o1.get("str"); [EOL]     assertNotNull(n); [EOL]     assertSame(n, NullNode.instance); [EOL]     o1.put("d", (BigDecimal) null); [EOL]     n = o1.get("d"); [EOL]     assertNotNull(n); [EOL]     assertSame(n, NullNode.instance); [EOL] }
public void testNullChecking() { [EOL]     ObjectNode o1 = JsonNodeFactory.instance.objectNode(); [EOL]     ObjectNode o2 = JsonNodeFactory.instance.objectNode(); [EOL]     o1.setAll(o2); [EOL]     assertEquals(0, o1.size()); [EOL]     assertEquals(0, o2.size()); [EOL]     o1.set("x", null); [EOL]     JsonNode n = o1.get("x"); [EOL]     assertNotNull(n); [EOL]     assertSame(n, NullNode.instance); [EOL]     o1.put("str", (String) null); [EOL]     n = o1.get("str"); [EOL]     assertNotNull(n); [EOL]     assertSame(n, NullNode.instance); [EOL]     o1.put("d", (BigDecimal) null); [EOL]     n = o1.get("d"); [EOL]     assertNotNull(n); [EOL]     assertSame(n, NullNode.instance); [EOL] }
public void testRetain() { [EOL]     ObjectNode ob = MAPPER.createObjectNode(); [EOL]     ob.put("a", "a"); [EOL]     ob.put("b", "b"); [EOL]     ob.put("c", "c"); [EOL]     assertEquals(3, ob.size()); [EOL]     assertSame(ob, ob.retain("a", "c")); [EOL]     assertEquals(2, ob.size()); [EOL]     assertEquals("a", ob.get("a").textValue()); [EOL]     assertNull(ob.get("b")); [EOL]     assertEquals("c", ob.get("c").textValue()); [EOL] }
public void testRetain() { [EOL]     ObjectNode ob = MAPPER.createObjectNode(); [EOL]     ob.put("a", "a"); [EOL]     ob.put("b", "b"); [EOL]     ob.put("c", "c"); [EOL]     assertEquals(3, ob.size()); [EOL]     assertSame(ob, ob.retain("a", "c")); [EOL]     assertEquals(2, ob.size()); [EOL]     assertEquals("a", ob.get("a").textValue()); [EOL]     assertNull(ob.get("b")); [EOL]     assertEquals("c", ob.get("c").textValue()); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleWithJSON() throws Exception { [EOL]     ObjectReader detecting = READER.withType(POJO.class); [EOL]     detecting = detecting.withFormatDetection(detecting); [EOL]     POJO pojo = detecting.readValue(utf8Bytes("{\"x\":1}")); [EOL]     assertNotNull(pojo); [EOL]     assertEquals(1, pojo.x); [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = "{ \"a\" : 123, \"list\" : [ 12.25, null, true, { }, [ ] ] }"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals("Expected START_OBJECT", JsonToken.START_OBJECT.asString(), jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals("a", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals(123, jp.getIntValue()); [EOL]     assertEquals("123", jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals("list", jp.getText()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals(JsonToken.START_ARRAY.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(12.25, jp.getDoubleValue(), 0); [EOL]     assertEquals("12.25", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NULL, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(JsonToken.VALUE_NULL.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_TRUE, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertTrue(jp.getBooleanValue()); [EOL]     assertEquals(JsonToken.VALUE_TRUE.asString(), jp.getText()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = "{ \"a\" : 123, \"list\" : [ 12.25, null, true, { }, [ ] ] }"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals("Expected START_OBJECT", JsonToken.START_OBJECT.asString(), jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals("a", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals(123, jp.getIntValue()); [EOL]     assertEquals("123", jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals("list", jp.getText()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals(JsonToken.START_ARRAY.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(12.25, jp.getDoubleValue(), 0); [EOL]     assertEquals("12.25", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NULL, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(JsonToken.VALUE_NULL.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_TRUE, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertTrue(jp.getBooleanValue()); [EOL]     assertEquals(JsonToken.VALUE_TRUE.asString(), jp.getText()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testMultipleCreators() throws Exception { [EOL]     MultiBean bean = MAPPER.readValue("123", MultiBean.class); [EOL]     assertEquals(Integer.valueOf(123), bean.value); [EOL]     bean = MAPPER.readValue(quote("abc"), MultiBean.class); [EOL]     assertEquals("abc", bean.value); [EOL]     bean = MAPPER.readValue("0.25", MultiBean.class); [EOL]     assertEquals(Double.valueOf(0.25), bean.value); [EOL] }
public void testMultipleCreators() throws Exception { [EOL]     MultiBean bean = MAPPER.readValue("123", MultiBean.class); [EOL]     assertEquals(Integer.valueOf(123), bean.value); [EOL]     bean = MAPPER.readValue(quote("abc"), MultiBean.class); [EOL]     assertEquals("abc", bean.value); [EOL]     bean = MAPPER.readValue("0.25", MultiBean.class); [EOL]     assertEquals(Double.valueOf(0.25), bean.value); [EOL] }
public void testMultipleCreators() throws Exception { [EOL]     MultiBean bean = MAPPER.readValue("123", MultiBean.class); [EOL]     assertEquals(Integer.valueOf(123), bean.value); [EOL]     bean = MAPPER.readValue(quote("abc"), MultiBean.class); [EOL]     assertEquals("abc", bean.value); [EOL]     bean = MAPPER.readValue("0.25", MultiBean.class); [EOL]     assertEquals(Double.valueOf(0.25), bean.value); [EOL] }
public void testBooleanDelegate() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     BooleanBean bb = m.readValue("true", BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL]     bb = m.readValue(quote("true"), BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL] }
public void testBooleanDelegate() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     BooleanBean bb = m.readValue("true", BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL]     bb = m.readValue(quote("true"), BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL] }
public void testBooleanDelegate() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     BooleanBean bb = m.readValue("true", BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL]     bb = m.readValue(quote("true"), BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testLongFactory() throws Exception { [EOL]     long VALUE = 123456789000L; [EOL]     LongFactoryBean bean = MAPPER.readValue(String.valueOf(VALUE), LongFactoryBean.class); [EOL]     assertEquals(VALUE, bean.value); [EOL] }
public void testLongFactory() throws Exception { [EOL]     long VALUE = 123456789000L; [EOL]     LongFactoryBean bean = MAPPER.readValue(String.valueOf(VALUE), LongFactoryBean.class); [EOL]     assertEquals(VALUE, bean.value); [EOL] }
public void testLongFactory() throws Exception { [EOL]     long VALUE = 123456789000L; [EOL]     LongFactoryBean bean = MAPPER.readValue(String.valueOf(VALUE), LongFactoryBean.class); [EOL]     assertEquals(VALUE, bean.value); [EOL] }
public void testDeepUnwrapping() throws Exception { [EOL]     DeepUnwrapping bean = mapper.readValue("{\"x\":3,\"name\":\"Bob\",\"y\":27}", DeepUnwrapping.class); [EOL]     Unwrapping uw = bean.unwrapped; [EOL]     assertNotNull(uw); [EOL]     assertEquals("Bob", uw.name); [EOL]     Location loc = uw.location; [EOL]     assertNotNull(loc); [EOL]     assertEquals(3, loc.x); [EOL]     assertEquals(27, loc.y); [EOL] }
public void testDeepUnwrapping() throws Exception { [EOL]     DeepUnwrapping bean = mapper.readValue("{\"x\":3,\"name\":\"Bob\",\"y\":27}", DeepUnwrapping.class); [EOL]     Unwrapping uw = bean.unwrapped; [EOL]     assertNotNull(uw); [EOL]     assertEquals("Bob", uw.name); [EOL]     Location loc = uw.location; [EOL]     assertNotNull(loc); [EOL]     assertEquals(3, loc.x); [EOL]     assertEquals(27, loc.y); [EOL] }
public void testDeepUnwrapping() throws Exception { [EOL]     DeepUnwrapping bean = mapper.readValue("{\"x\":3,\"name\":\"Bob\",\"y\":27}", DeepUnwrapping.class); [EOL]     Unwrapping uw = bean.unwrapped; [EOL]     assertNotNull(uw); [EOL]     assertEquals("Bob", uw.name); [EOL]     Location loc = uw.location; [EOL]     assertNotNull(loc); [EOL]     assertEquals(3, loc.x); [EOL]     assertEquals(27, loc.y); [EOL] }
public void testAnnotatedMap() throws Exception { [EOL]     ObjectMapper mapper = _mapperWithAnnotatedContextual(); [EOL]     ContextualMapBean bean = mapper.readValue("{\"beans\":{\"a\":\"b\"}}", ContextualMapBean.class); [EOL]     assertEquals(1, bean.beans.size()); [EOL]     Map.Entry<String, StringValue> entry = bean.beans.entrySet().iterator().next(); [EOL]     assertEquals("a", entry.getKey()); [EOL]     assertEquals("map=b", entry.getValue().value); [EOL]     bean = mapper.readValue("{\"beans\":{\"x\":\"y\",\"1\":\"2\"}}", ContextualMapBean.class); [EOL]     assertEquals(2, bean.beans.size()); [EOL]     Iterator<Map.Entry<String, StringValue>> it = bean.beans.entrySet().iterator(); [EOL]     entry = it.next(); [EOL]     assertEquals("x", entry.getKey()); [EOL]     assertEquals("map=y", entry.getValue().value); [EOL]     entry = it.next(); [EOL]     assertEquals("1", entry.getKey()); [EOL]     assertEquals("map=2", entry.getValue().value); [EOL] }
public void testAnnotatedMap() throws Exception { [EOL]     ObjectMapper mapper = _mapperWithAnnotatedContextual(); [EOL]     ContextualMapBean bean = mapper.readValue("{\"beans\":{\"a\":\"b\"}}", ContextualMapBean.class); [EOL]     assertEquals(1, bean.beans.size()); [EOL]     Map.Entry<String, StringValue> entry = bean.beans.entrySet().iterator().next(); [EOL]     assertEquals("a", entry.getKey()); [EOL]     assertEquals("map=b", entry.getValue().value); [EOL]     bean = mapper.readValue("{\"beans\":{\"x\":\"y\",\"1\":\"2\"}}", ContextualMapBean.class); [EOL]     assertEquals(2, bean.beans.size()); [EOL]     Iterator<Map.Entry<String, StringValue>> it = bean.beans.entrySet().iterator(); [EOL]     entry = it.next(); [EOL]     assertEquals("x", entry.getKey()); [EOL]     assertEquals("map=y", entry.getValue().value); [EOL]     entry = it.next(); [EOL]     assertEquals("1", entry.getKey()); [EOL]     assertEquals("map=2", entry.getValue().value); [EOL] }
public void testSimpleWithJSON() throws Exception { [EOL]     ObjectReader detecting = READER.withType(POJO.class); [EOL]     detecting = detecting.withFormatDetection(detecting); [EOL]     POJO pojo = detecting.readValue(utf8Bytes("{\"x\":1}")); [EOL]     assertNotNull(pojo); [EOL]     assertEquals(1, pojo.x); [EOL] }
public void testSimpleWithJSON() throws Exception { [EOL]     ObjectReader detecting = READER.withType(POJO.class); [EOL]     detecting = detecting.withFormatDetection(detecting); [EOL]     POJO pojo = detecting.readValue(utf8Bytes("{\"x\":1}")); [EOL]     assertNotNull(pojo); [EOL]     assertEquals(1, pojo.x); [EOL] }
public void testSimpleWithJSON() throws Exception { [EOL]     ObjectReader detecting = READER.withType(POJO.class); [EOL]     detecting = detecting.withFormatDetection(detecting); [EOL]     POJO pojo = detecting.readValue(utf8Bytes("{\"x\":1}")); [EOL]     assertNotNull(pojo); [EOL]     assertEquals(1, pojo.x); [EOL] }
public void testSimpleWithJSON() throws Exception { [EOL]     ObjectReader detecting = READER.withType(POJO.class); [EOL]     detecting = detecting.withFormatDetection(detecting); [EOL]     POJO pojo = detecting.readValue(utf8Bytes("{\"x\":1}")); [EOL]     assertNotNull(pojo); [EOL]     assertEquals(1, pojo.x); [EOL] }
public void testSimpleWithJSON() throws Exception { [EOL]     ObjectReader detecting = READER.withType(POJO.class); [EOL]     detecting = detecting.withFormatDetection(detecting); [EOL]     POJO pojo = detecting.readValue(utf8Bytes("{\"x\":1}")); [EOL]     assertNotNull(pojo); [EOL]     assertEquals(1, pojo.x); [EOL] }
public void testSimpleWithJSON() throws Exception { [EOL]     ObjectReader detecting = READER.withType(POJO.class); [EOL]     detecting = detecting.withFormatDetection(detecting); [EOL]     POJO pojo = detecting.readValue(utf8Bytes("{\"x\":1}")); [EOL]     assertNotNull(pojo); [EOL]     assertEquals(1, pojo.x); [EOL] }
public void testSimpleWithJSON() throws Exception { [EOL]     ObjectReader detecting = READER.withType(POJO.class); [EOL]     detecting = detecting.withFormatDetection(detecting); [EOL]     POJO pojo = detecting.readValue(utf8Bytes("{\"x\":1}")); [EOL]     assertNotNull(pojo); [EOL]     assertEquals(1, pojo.x); [EOL] }
public void testSimpleWithJSON() throws Exception { [EOL]     ObjectReader detecting = READER.withType(POJO.class); [EOL]     detecting = detecting.withFormatDetection(detecting); [EOL]     POJO pojo = detecting.readValue(utf8Bytes("{\"x\":1}")); [EOL]     assertNotNull(pojo); [EOL]     assertEquals(1, pojo.x); [EOL] }
public void testSimpleWithJSON() throws Exception { [EOL]     ObjectReader detecting = READER.withType(POJO.class); [EOL]     detecting = detecting.withFormatDetection(detecting); [EOL]     POJO pojo = detecting.readValue(utf8Bytes("{\"x\":1}")); [EOL]     assertNotNull(pojo); [EOL]     assertEquals(1, pojo.x); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testIssue468b() throws Exception { [EOL]     Person2 p2 = new Person2("John"); [EOL]     List<Key<Account>> accounts = new ArrayList<Key<Account>>(); [EOL]     accounts.add(new Key<Account>(new Account("a", 42L))); [EOL]     accounts.add(new Key<Account>(new Account("b", 43L))); [EOL]     accounts.add(new Key<Account>(new Account("c", 44L))); [EOL]     p2.setAccounts(accounts); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = mapper.writeValueAsString(p2); [EOL]     Map<String, Object> map = mapper.readValue(json, Map.class); [EOL]     assertEquals("John", map.get("name")); [EOL]     Object ob = map.get("accounts"); [EOL]     assertNotNull(ob); [EOL]     List<?> acctList = (List<?>) ob; [EOL]     assertEquals(3, acctList.size()); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testIssue468b() throws Exception { [EOL]     Person2 p2 = new Person2("John"); [EOL]     List<Key<Account>> accounts = new ArrayList<Key<Account>>(); [EOL]     accounts.add(new Key<Account>(new Account("a", 42L))); [EOL]     accounts.add(new Key<Account>(new Account("b", 43L))); [EOL]     accounts.add(new Key<Account>(new Account("c", 44L))); [EOL]     p2.setAccounts(accounts); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = mapper.writeValueAsString(p2); [EOL]     Map<String, Object> map = mapper.readValue(json, Map.class); [EOL]     assertEquals("John", map.get("name")); [EOL]     Object ob = map.get("accounts"); [EOL]     assertNotNull(ob); [EOL]     List<?> acctList = (List<?>) ob; [EOL]     assertEquals(3, acctList.size()); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testImmutable() throws Exception { [EOL]     final String json = "{\"value\":13}"; [EOL]     ValueImmutable value = mapper.readValue(json, ValueImmutable.class); [EOL]     assertEquals(13, value.value); [EOL] }
public void testImmutable() throws Exception { [EOL]     final String json = "{\"value\":13}"; [EOL]     ValueImmutable value = mapper.readValue(json, ValueImmutable.class); [EOL]     assertEquals(13, value.value); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testBooleanDelegate() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     BooleanBean bb = m.readValue("true", BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL]     bb = m.readValue(quote("true"), BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL] }
public void testBooleanDelegate() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     BooleanBean bb = m.readValue("true", BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL]     bb = m.readValue(quote("true"), BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL] }
public void testBooleanDelegate() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     BooleanBean bb = m.readValue("true", BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL]     bb = m.readValue(quote("true"), BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL] }
public void testBooleanDelegate() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     BooleanBean bb = m.readValue("true", BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL]     bb = m.readValue(quote("true"), BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL] }
public void testLongFactory() throws Exception { [EOL]     long VALUE = 123456789000L; [EOL]     LongFactoryBean bean = MAPPER.readValue(String.valueOf(VALUE), LongFactoryBean.class); [EOL]     assertEquals(VALUE, bean.value); [EOL] }
public void testLongFactory() throws Exception { [EOL]     long VALUE = 123456789000L; [EOL]     LongFactoryBean bean = MAPPER.readValue(String.valueOf(VALUE), LongFactoryBean.class); [EOL]     assertEquals(VALUE, bean.value); [EOL] }
public void testLongFactory() throws Exception { [EOL]     long VALUE = 123456789000L; [EOL]     LongFactoryBean bean = MAPPER.readValue(String.valueOf(VALUE), LongFactoryBean.class); [EOL]     assertEquals(VALUE, bean.value); [EOL] }
public void testLongFactory() throws Exception { [EOL]     long VALUE = 123456789000L; [EOL]     LongFactoryBean bean = MAPPER.readValue(String.valueOf(VALUE), LongFactoryBean.class); [EOL]     assertEquals(VALUE, bean.value); [EOL] }
public void testMultipleCreators() throws Exception { [EOL]     MultiBean bean = MAPPER.readValue("123", MultiBean.class); [EOL]     assertEquals(Integer.valueOf(123), bean.value); [EOL]     bean = MAPPER.readValue(quote("abc"), MultiBean.class); [EOL]     assertEquals("abc", bean.value); [EOL]     bean = MAPPER.readValue("0.25", MultiBean.class); [EOL]     assertEquals(Double.valueOf(0.25), bean.value); [EOL] }
public void testMultipleCreators() throws Exception { [EOL]     MultiBean bean = MAPPER.readValue("123", MultiBean.class); [EOL]     assertEquals(Integer.valueOf(123), bean.value); [EOL]     bean = MAPPER.readValue(quote("abc"), MultiBean.class); [EOL]     assertEquals("abc", bean.value); [EOL]     bean = MAPPER.readValue("0.25", MultiBean.class); [EOL]     assertEquals(Double.valueOf(0.25), bean.value); [EOL] }
public void testMultipleCreators() throws Exception { [EOL]     MultiBean bean = MAPPER.readValue("123", MultiBean.class); [EOL]     assertEquals(Integer.valueOf(123), bean.value); [EOL]     bean = MAPPER.readValue(quote("abc"), MultiBean.class); [EOL]     assertEquals("abc", bean.value); [EOL]     bean = MAPPER.readValue("0.25", MultiBean.class); [EOL]     assertEquals(Double.valueOf(0.25), bean.value); [EOL] }
public void testMultipleCreators() throws Exception { [EOL]     MultiBean bean = MAPPER.readValue("123", MultiBean.class); [EOL]     assertEquals(Integer.valueOf(123), bean.value); [EOL]     bean = MAPPER.readValue(quote("abc"), MultiBean.class); [EOL]     assertEquals("abc", bean.value); [EOL]     bean = MAPPER.readValue("0.25", MultiBean.class); [EOL]     assertEquals(Double.valueOf(0.25), bean.value); [EOL] }
public void testBooleanDelegate() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     BooleanBean bb = m.readValue("true", BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL]     bb = m.readValue(quote("true"), BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL] }
public void testBooleanDelegate() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     BooleanBean bb = m.readValue("true", BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL]     bb = m.readValue(quote("true"), BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL] }
public void testBooleanDelegate() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     BooleanBean bb = m.readValue("true", BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL]     bb = m.readValue(quote("true"), BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL] }
public void testBooleanDelegate() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     BooleanBean bb = m.readValue("true", BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL]     bb = m.readValue(quote("true"), BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testBooleanDelegate() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     BooleanBean bb = m.readValue("true", BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL]     bb = m.readValue(quote("true"), BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL] }
public void testBooleanDelegate() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     BooleanBean bb = m.readValue("true", BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL]     bb = m.readValue(quote("true"), BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL] }
public void testBooleanDelegate() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     BooleanBean bb = m.readValue("true", BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL]     bb = m.readValue(quote("true"), BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL] }
public void testBooleanDelegate() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     BooleanBean bb = m.readValue("true", BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL]     bb = m.readValue(quote("true"), BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL] }
public void testArrayIdentityTransforms() throws Exception { [EOL]     verifyByteArrayConversion(bytes(), byte[].class); [EOL]     verifyShortArrayConversion(shorts(), short[].class); [EOL]     verifyIntArrayConversion(ints(), int[].class); [EOL]     verifyLongArrayConversion(longs(), long[].class); [EOL]     verifyFloatArrayConversion(floats(), float[].class); [EOL]     verifyDoubleArrayConversion(doubles(), float[].class); [EOL] }
public void testArrayIdentityTransforms() throws Exception { [EOL]     verifyByteArrayConversion(bytes(), byte[].class); [EOL]     verifyShortArrayConversion(shorts(), short[].class); [EOL]     verifyIntArrayConversion(ints(), int[].class); [EOL]     verifyLongArrayConversion(longs(), long[].class); [EOL]     verifyFloatArrayConversion(floats(), float[].class); [EOL]     verifyDoubleArrayConversion(doubles(), float[].class); [EOL] }
public void testJackson428() throws Exception { [EOL]     ObjectMapper serMapper = new ObjectMapper(); [EOL]     TypeResolverBuilder<?> serializerTyper = new ObjectMapper.DefaultTypeResolverBuilder(ObjectMapper.DefaultTyping.NON_FINAL); [EOL]     serializerTyper = serializerTyper.init(JsonTypeInfo.Id.NAME, createTypeNameIdResolver(true)); [EOL]     serializerTyper = serializerTyper.inclusion(JsonTypeInfo.As.PROPERTY); [EOL]     serMapper.setDefaultTyping(serializerTyper); [EOL]     MapHolder holder = new MapHolder(); [EOL]     holder.map = new HashMap<MapKey, List<Object>>(); [EOL]     List<Object> ints = new ArrayList<Object>(); [EOL]     ints.add(Integer.valueOf(3)); [EOL]     holder.map.put(new MapKey("key"), ints); [EOL]     String json = serMapper.writeValueAsString(holder); [EOL]     ObjectMapper deserMapper = new ObjectMapper(); [EOL]     TypeResolverBuilder<?> deserializerTyper = new ObjectMapper.DefaultTypeResolverBuilder(ObjectMapper.DefaultTyping.NON_FINAL); [EOL]     deserializerTyper = deserializerTyper.init(JsonTypeInfo.Id.NAME, createTypeNameIdResolver(false)); [EOL]     deserializerTyper = deserializerTyper.inclusion(JsonTypeInfo.As.PROPERTY); [EOL]     deserMapper.setDefaultTyping(deserializerTyper); [EOL]     MapHolder result = deserMapper.readValue(json, MapHolder.class); [EOL]     assertNotNull(result); [EOL]     Map<?, ?> map = result.map; [EOL]     assertEquals(1, map.size()); [EOL]     Map.Entry<?, ?> entry = map.entrySet().iterator().next(); [EOL]     Object key = entry.getKey(); [EOL]     assertEquals(MapKey.class, key.getClass()); [EOL]     Object value = entry.getValue(); [EOL]     assertTrue(value instanceof List<?>); [EOL]     List<?> list = (List<?>) value; [EOL]     assertEquals(1, list.size()); [EOL]     assertEquals(Integer.class, list.get(0).getClass()); [EOL]     assertEquals(Integer.valueOf(3), list.get(0)); [EOL] }
public void testJackson428() throws Exception { [EOL]     ObjectMapper serMapper = new ObjectMapper(); [EOL]     TypeResolverBuilder<?> serializerTyper = new ObjectMapper.DefaultTypeResolverBuilder(ObjectMapper.DefaultTyping.NON_FINAL); [EOL]     serializerTyper = serializerTyper.init(JsonTypeInfo.Id.NAME, createTypeNameIdResolver(true)); [EOL]     serializerTyper = serializerTyper.inclusion(JsonTypeInfo.As.PROPERTY); [EOL]     serMapper.setDefaultTyping(serializerTyper); [EOL]     MapHolder holder = new MapHolder(); [EOL]     holder.map = new HashMap<MapKey, List<Object>>(); [EOL]     List<Object> ints = new ArrayList<Object>(); [EOL]     ints.add(Integer.valueOf(3)); [EOL]     holder.map.put(new MapKey("key"), ints); [EOL]     String json = serMapper.writeValueAsString(holder); [EOL]     ObjectMapper deserMapper = new ObjectMapper(); [EOL]     TypeResolverBuilder<?> deserializerTyper = new ObjectMapper.DefaultTypeResolverBuilder(ObjectMapper.DefaultTyping.NON_FINAL); [EOL]     deserializerTyper = deserializerTyper.init(JsonTypeInfo.Id.NAME, createTypeNameIdResolver(false)); [EOL]     deserializerTyper = deserializerTyper.inclusion(JsonTypeInfo.As.PROPERTY); [EOL]     deserMapper.setDefaultTyping(deserializerTyper); [EOL]     MapHolder result = deserMapper.readValue(json, MapHolder.class); [EOL]     assertNotNull(result); [EOL]     Map<?, ?> map = result.map; [EOL]     assertEquals(1, map.size()); [EOL]     Map.Entry<?, ?> entry = map.entrySet().iterator().next(); [EOL]     Object key = entry.getKey(); [EOL]     assertEquals(MapKey.class, key.getClass()); [EOL]     Object value = entry.getValue(); [EOL]     assertTrue(value instanceof List<?>); [EOL]     List<?> list = (List<?>) value; [EOL]     assertEquals(1, list.size()); [EOL]     assertEquals(Integer.class, list.get(0).getClass()); [EOL]     assertEquals(Integer.valueOf(3), list.get(0)); [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testDurationDeser() throws Exception { [EOL]     DatatypeFactory dtf = DatatypeFactory.newInstance(); [EOL]     Duration dur = dtf.newDurationDayTime(true, 27, 5, 15, 59); [EOL]     String exp = dur.toString(); [EOL]     assertEquals("Should deserialize to equal Duration ('" + exp + "')", dur, new ObjectMapper().readValue(quote(exp), Duration.class)); [EOL] }
public void testDurationDeser() throws Exception { [EOL]     DatatypeFactory dtf = DatatypeFactory.newInstance(); [EOL]     Duration dur = dtf.newDurationDayTime(true, 27, 5, 15, 59); [EOL]     String exp = dur.toString(); [EOL]     assertEquals("Should deserialize to equal Duration ('" + exp + "')", dur, new ObjectMapper().readValue(quote(exp), Duration.class)); [EOL] }
public void testDurationDeser() throws Exception { [EOL]     DatatypeFactory dtf = DatatypeFactory.newInstance(); [EOL]     Duration dur = dtf.newDurationDayTime(true, 27, 5, 15, 59); [EOL]     String exp = dur.toString(); [EOL]     assertEquals("Should deserialize to equal Duration ('" + exp + "')", dur, new ObjectMapper().readValue(quote(exp), Duration.class)); [EOL] }
public void testDurationDeser() throws Exception { [EOL]     DatatypeFactory dtf = DatatypeFactory.newInstance(); [EOL]     Duration dur = dtf.newDurationDayTime(true, 27, 5, 15, 59); [EOL]     String exp = dur.toString(); [EOL]     assertEquals("Should deserialize to equal Duration ('" + exp + "')", dur, new ObjectMapper().readValue(quote(exp), Duration.class)); [EOL] }
public void testDurationDeser() throws Exception { [EOL]     DatatypeFactory dtf = DatatypeFactory.newInstance(); [EOL]     Duration dur = dtf.newDurationDayTime(true, 27, 5, 15, 59); [EOL]     String exp = dur.toString(); [EOL]     assertEquals("Should deserialize to equal Duration ('" + exp + "')", dur, new ObjectMapper().readValue(quote(exp), Duration.class)); [EOL] }
public void testDurationDeser() throws Exception { [EOL]     DatatypeFactory dtf = DatatypeFactory.newInstance(); [EOL]     Duration dur = dtf.newDurationDayTime(true, 27, 5, 15, 59); [EOL]     String exp = dur.toString(); [EOL]     assertEquals("Should deserialize to equal Duration ('" + exp + "')", dur, new ObjectMapper().readValue(quote(exp), Duration.class)); [EOL] }
public void testMethodAnnotationInList() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(String.class, new AnnotatedContextualSerializer()); [EOL]     mapper.registerModule(module); [EOL]     ContextualListBean beans = new ContextualListBean("abc"); [EOL]     assertEquals("{\"beans\":[\"list->abc\"]}", mapper.writeValueAsString(beans)); [EOL] }
public void testMethodAnnotationInList() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(String.class, new AnnotatedContextualSerializer()); [EOL]     mapper.registerModule(module); [EOL]     ContextualListBean beans = new ContextualListBean("abc"); [EOL]     assertEquals("{\"beans\":[\"list->abc\"]}", mapper.writeValueAsString(beans)); [EOL] }
public void testClassMixInsTopLevel() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Object> result; [EOL]     result = writeAndMap(mapper, new LeafClass("abc")); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("abc", result.get("a")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.addMixInAnnotations(LeafClass.class, MixIn.class); [EOL]     result = writeAndMap(mapper, new LeafClass("abc")); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("abc", result.get("a")); [EOL]     assertEquals("c", result.get("c")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.addMixInAnnotations(BaseClass.class, MixIn.class); [EOL]     result = writeAndMap(mapper, new LeafClass("abc")); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("abc", result.get("a")); [EOL] }
public void testClassMixInsTopLevel() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Object> result; [EOL]     result = writeAndMap(mapper, new LeafClass("abc")); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("abc", result.get("a")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.addMixInAnnotations(LeafClass.class, MixIn.class); [EOL]     result = writeAndMap(mapper, new LeafClass("abc")); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("abc", result.get("a")); [EOL]     assertEquals("c", result.get("c")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.addMixInAnnotations(BaseClass.class, MixIn.class); [EOL]     result = writeAndMap(mapper, new LeafClass("abc")); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("abc", result.get("a")); [EOL] }
public void testClassMixInsTopLevel() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Object> result; [EOL]     result = writeAndMap(mapper, new LeafClass("abc")); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("abc", result.get("a")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.addMixInAnnotations(LeafClass.class, MixIn.class); [EOL]     result = writeAndMap(mapper, new LeafClass("abc")); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("abc", result.get("a")); [EOL]     assertEquals("c", result.get("c")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.addMixInAnnotations(BaseClass.class, MixIn.class); [EOL]     result = writeAndMap(mapper, new LeafClass("abc")); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("abc", result.get("a")); [EOL] }
public void testClassMixInsTopLevel() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Object> result; [EOL]     result = writeAndMap(mapper, new LeafClass("abc")); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("abc", result.get("a")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.addMixInAnnotations(LeafClass.class, MixIn.class); [EOL]     result = writeAndMap(mapper, new LeafClass("abc")); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("abc", result.get("a")); [EOL]     assertEquals("c", result.get("c")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.addMixInAnnotations(BaseClass.class, MixIn.class); [EOL]     result = writeAndMap(mapper, new LeafClass("abc")); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("abc", result.get("a")); [EOL] }
public void testClassMixInsTopLevel() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Object> result; [EOL]     result = writeAndMap(mapper, new LeafClass("abc")); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("abc", result.get("a")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.addMixInAnnotations(LeafClass.class, MixIn.class); [EOL]     result = writeAndMap(mapper, new LeafClass("abc")); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("abc", result.get("a")); [EOL]     assertEquals("c", result.get("c")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.addMixInAnnotations(BaseClass.class, MixIn.class); [EOL]     result = writeAndMap(mapper, new LeafClass("abc")); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("abc", result.get("a")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testImplicitArrays() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true); [EOL]     List<Integer> ints = mapper.readValue("4", List.class); [EOL]     assertEquals(1, ints.size()); [EOL]     assertEquals(Integer.valueOf(4), ints.get(0)); [EOL]     List<String> strings = mapper.readValue(quote("abc"), new TypeReference<ArrayList<String>>() { [EOL]     }); [EOL]     assertEquals(1, strings.size()); [EOL]     assertEquals("abc", strings.get(0)); [EOL]     int[] intArray = mapper.readValue("-7", int[].class); [EOL]     assertEquals(1, intArray.length); [EOL]     assertEquals(-7, intArray[0]); [EOL]     String[] stringArray = mapper.readValue(quote("xyz"), String[].class); [EOL]     assertEquals(1, stringArray.length); [EOL]     assertEquals("xyz", stringArray[0]); [EOL]     List<XBean> xbeanList = mapper.readValue("{\"x\":4}", new TypeReference<List<XBean>>() { [EOL]     }); [EOL]     assertEquals(1, xbeanList.size()); [EOL]     assertEquals(XBean.class, xbeanList.get(0).getClass()); [EOL]     Object ob = mapper.readValue("{\"x\":29}", XBean[].class); [EOL]     XBean[] xbeanArray = (XBean[]) ob; [EOL]     assertEquals(1, xbeanArray.length); [EOL]     assertEquals(XBean.class, xbeanArray[0].getClass()); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testImplicitArrays() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true); [EOL]     List<Integer> ints = mapper.readValue("4", List.class); [EOL]     assertEquals(1, ints.size()); [EOL]     assertEquals(Integer.valueOf(4), ints.get(0)); [EOL]     List<String> strings = mapper.readValue(quote("abc"), new TypeReference<ArrayList<String>>() { [EOL]     }); [EOL]     assertEquals(1, strings.size()); [EOL]     assertEquals("abc", strings.get(0)); [EOL]     int[] intArray = mapper.readValue("-7", int[].class); [EOL]     assertEquals(1, intArray.length); [EOL]     assertEquals(-7, intArray[0]); [EOL]     String[] stringArray = mapper.readValue(quote("xyz"), String[].class); [EOL]     assertEquals(1, stringArray.length); [EOL]     assertEquals("xyz", stringArray[0]); [EOL]     List<XBean> xbeanList = mapper.readValue("{\"x\":4}", new TypeReference<List<XBean>>() { [EOL]     }); [EOL]     assertEquals(1, xbeanList.size()); [EOL]     assertEquals(XBean.class, xbeanList.get(0).getClass()); [EOL]     Object ob = mapper.readValue("{\"x\":29}", XBean[].class); [EOL]     XBean[] xbeanArray = (XBean[]) ob; [EOL]     assertEquals(1, xbeanArray.length); [EOL]     assertEquals(XBean.class, xbeanArray[0].getClass()); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testImplicitArrays() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true); [EOL]     List<Integer> ints = mapper.readValue("4", List.class); [EOL]     assertEquals(1, ints.size()); [EOL]     assertEquals(Integer.valueOf(4), ints.get(0)); [EOL]     List<String> strings = mapper.readValue(quote("abc"), new TypeReference<ArrayList<String>>() { [EOL]     }); [EOL]     assertEquals(1, strings.size()); [EOL]     assertEquals("abc", strings.get(0)); [EOL]     int[] intArray = mapper.readValue("-7", int[].class); [EOL]     assertEquals(1, intArray.length); [EOL]     assertEquals(-7, intArray[0]); [EOL]     String[] stringArray = mapper.readValue(quote("xyz"), String[].class); [EOL]     assertEquals(1, stringArray.length); [EOL]     assertEquals("xyz", stringArray[0]); [EOL]     List<XBean> xbeanList = mapper.readValue("{\"x\":4}", new TypeReference<List<XBean>>() { [EOL]     }); [EOL]     assertEquals(1, xbeanList.size()); [EOL]     assertEquals(XBean.class, xbeanList.get(0).getClass()); [EOL]     Object ob = mapper.readValue("{\"x\":29}", XBean[].class); [EOL]     XBean[] xbeanArray = (XBean[]) ob; [EOL]     assertEquals(1, xbeanArray.length); [EOL]     assertEquals(XBean.class, xbeanArray[0].getClass()); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testImplicitArrays() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true); [EOL]     List<Integer> ints = mapper.readValue("4", List.class); [EOL]     assertEquals(1, ints.size()); [EOL]     assertEquals(Integer.valueOf(4), ints.get(0)); [EOL]     List<String> strings = mapper.readValue(quote("abc"), new TypeReference<ArrayList<String>>() { [EOL]     }); [EOL]     assertEquals(1, strings.size()); [EOL]     assertEquals("abc", strings.get(0)); [EOL]     int[] intArray = mapper.readValue("-7", int[].class); [EOL]     assertEquals(1, intArray.length); [EOL]     assertEquals(-7, intArray[0]); [EOL]     String[] stringArray = mapper.readValue(quote("xyz"), String[].class); [EOL]     assertEquals(1, stringArray.length); [EOL]     assertEquals("xyz", stringArray[0]); [EOL]     List<XBean> xbeanList = mapper.readValue("{\"x\":4}", new TypeReference<List<XBean>>() { [EOL]     }); [EOL]     assertEquals(1, xbeanList.size()); [EOL]     assertEquals(XBean.class, xbeanList.get(0).getClass()); [EOL]     Object ob = mapper.readValue("{\"x\":29}", XBean[].class); [EOL]     XBean[] xbeanArray = (XBean[]) ob; [EOL]     assertEquals(1, xbeanArray.length); [EOL]     assertEquals(XBean.class, xbeanArray[0].getClass()); [EOL] }
public void testJackson703() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     BasicBeanDescription beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Jackson703.class)); [EOL]     assertNotNull(beanDesc); [EOL]     Jackson703 bean = new Jackson703(); [EOL]     String json = mapper.writeValueAsString(bean); [EOL]     assertNotNull(json); [EOL] }
public void testJackson703() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     BasicBeanDescription beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Jackson703.class)); [EOL]     assertNotNull(beanDesc); [EOL]     Jackson703 bean = new Jackson703(); [EOL]     String json = mapper.writeValueAsString(bean); [EOL]     assertNotNull(json); [EOL] }
public void testJackson703() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     BasicBeanDescription beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Jackson703.class)); [EOL]     assertNotNull(beanDesc); [EOL]     Jackson703 bean = new Jackson703(); [EOL]     String json = mapper.writeValueAsString(bean); [EOL]     assertNotNull(json); [EOL] }
public void testJackson703() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     BasicBeanDescription beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Jackson703.class)); [EOL]     assertNotNull(beanDesc); [EOL]     Jackson703 bean = new Jackson703(); [EOL]     String json = mapper.writeValueAsString(bean); [EOL]     assertNotNull(json); [EOL] }
public void testJackson703() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     BasicBeanDescription beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Jackson703.class)); [EOL]     assertNotNull(beanDesc); [EOL]     Jackson703 bean = new Jackson703(); [EOL]     String json = mapper.writeValueAsString(bean); [EOL]     assertNotNull(json); [EOL] }
public void testJackson703() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     BasicBeanDescription beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Jackson703.class)); [EOL]     assertNotNull(beanDesc); [EOL]     Jackson703 bean = new Jackson703(); [EOL]     String json = mapper.writeValueAsString(bean); [EOL]     assertNotNull(json); [EOL] }
public void testJackson703() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     BasicBeanDescription beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Jackson703.class)); [EOL]     assertNotNull(beanDesc); [EOL]     Jackson703 bean = new Jackson703(); [EOL]     String json = mapper.writeValueAsString(bean); [EOL]     assertNotNull(json); [EOL] }
public void testJackson703() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     BasicBeanDescription beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Jackson703.class)); [EOL]     assertNotNull(beanDesc); [EOL]     Jackson703 bean = new Jackson703(); [EOL]     String json = mapper.writeValueAsString(bean); [EOL]     assertNotNull(json); [EOL] }
public void testJackson703() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     BasicBeanDescription beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Jackson703.class)); [EOL]     assertNotNull(beanDesc); [EOL]     Jackson703 bean = new Jackson703(); [EOL]     String json = mapper.writeValueAsString(bean); [EOL]     assertNotNull(json); [EOL] }
public void testJackson703() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     BasicBeanDescription beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Jackson703.class)); [EOL]     assertNotNull(beanDesc); [EOL]     Jackson703 bean = new Jackson703(); [EOL]     String json = mapper.writeValueAsString(bean); [EOL]     assertNotNull(json); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testJackson428() throws Exception { [EOL]     ObjectMapper serMapper = new ObjectMapper(); [EOL]     TypeResolverBuilder<?> serializerTyper = new ObjectMapper.DefaultTypeResolverBuilder(ObjectMapper.DefaultTyping.NON_FINAL); [EOL]     serializerTyper = serializerTyper.init(JsonTypeInfo.Id.NAME, createTypeNameIdResolver(true)); [EOL]     serializerTyper = serializerTyper.inclusion(JsonTypeInfo.As.PROPERTY); [EOL]     serMapper.setDefaultTyping(serializerTyper); [EOL]     MapHolder holder = new MapHolder(); [EOL]     holder.map = new HashMap<MapKey, List<Object>>(); [EOL]     List<Object> ints = new ArrayList<Object>(); [EOL]     ints.add(Integer.valueOf(3)); [EOL]     holder.map.put(new MapKey("key"), ints); [EOL]     String json = serMapper.writeValueAsString(holder); [EOL]     ObjectMapper deserMapper = new ObjectMapper(); [EOL]     TypeResolverBuilder<?> deserializerTyper = new ObjectMapper.DefaultTypeResolverBuilder(ObjectMapper.DefaultTyping.NON_FINAL); [EOL]     deserializerTyper = deserializerTyper.init(JsonTypeInfo.Id.NAME, createTypeNameIdResolver(false)); [EOL]     deserializerTyper = deserializerTyper.inclusion(JsonTypeInfo.As.PROPERTY); [EOL]     deserMapper.setDefaultTyping(deserializerTyper); [EOL]     MapHolder result = deserMapper.readValue(json, MapHolder.class); [EOL]     assertNotNull(result); [EOL]     Map<?, ?> map = result.map; [EOL]     assertEquals(1, map.size()); [EOL]     Map.Entry<?, ?> entry = map.entrySet().iterator().next(); [EOL]     Object key = entry.getKey(); [EOL]     assertEquals(MapKey.class, key.getClass()); [EOL]     Object value = entry.getValue(); [EOL]     assertTrue(value instanceof List<?>); [EOL]     List<?> list = (List<?>) value; [EOL]     assertEquals(1, list.size()); [EOL]     assertEquals(Integer.class, list.get(0).getClass()); [EOL]     assertEquals(Integer.valueOf(3), list.get(0)); [EOL] }
public void testJackson428() throws Exception { [EOL]     ObjectMapper serMapper = new ObjectMapper(); [EOL]     TypeResolverBuilder<?> serializerTyper = new ObjectMapper.DefaultTypeResolverBuilder(ObjectMapper.DefaultTyping.NON_FINAL); [EOL]     serializerTyper = serializerTyper.init(JsonTypeInfo.Id.NAME, createTypeNameIdResolver(true)); [EOL]     serializerTyper = serializerTyper.inclusion(JsonTypeInfo.As.PROPERTY); [EOL]     serMapper.setDefaultTyping(serializerTyper); [EOL]     MapHolder holder = new MapHolder(); [EOL]     holder.map = new HashMap<MapKey, List<Object>>(); [EOL]     List<Object> ints = new ArrayList<Object>(); [EOL]     ints.add(Integer.valueOf(3)); [EOL]     holder.map.put(new MapKey("key"), ints); [EOL]     String json = serMapper.writeValueAsString(holder); [EOL]     ObjectMapper deserMapper = new ObjectMapper(); [EOL]     TypeResolverBuilder<?> deserializerTyper = new ObjectMapper.DefaultTypeResolverBuilder(ObjectMapper.DefaultTyping.NON_FINAL); [EOL]     deserializerTyper = deserializerTyper.init(JsonTypeInfo.Id.NAME, createTypeNameIdResolver(false)); [EOL]     deserializerTyper = deserializerTyper.inclusion(JsonTypeInfo.As.PROPERTY); [EOL]     deserMapper.setDefaultTyping(deserializerTyper); [EOL]     MapHolder result = deserMapper.readValue(json, MapHolder.class); [EOL]     assertNotNull(result); [EOL]     Map<?, ?> map = result.map; [EOL]     assertEquals(1, map.size()); [EOL]     Map.Entry<?, ?> entry = map.entrySet().iterator().next(); [EOL]     Object key = entry.getKey(); [EOL]     assertEquals(MapKey.class, key.getClass()); [EOL]     Object value = entry.getValue(); [EOL]     assertTrue(value instanceof List<?>); [EOL]     List<?> list = (List<?>) value; [EOL]     assertEquals(1, list.size()); [EOL]     assertEquals(Integer.class, list.get(0).getClass()); [EOL]     assertEquals(Integer.valueOf(3), list.get(0)); [EOL] }
public void testJackson428() throws Exception { [EOL]     ObjectMapper serMapper = new ObjectMapper(); [EOL]     TypeResolverBuilder<?> serializerTyper = new ObjectMapper.DefaultTypeResolverBuilder(ObjectMapper.DefaultTyping.NON_FINAL); [EOL]     serializerTyper = serializerTyper.init(JsonTypeInfo.Id.NAME, createTypeNameIdResolver(true)); [EOL]     serializerTyper = serializerTyper.inclusion(JsonTypeInfo.As.PROPERTY); [EOL]     serMapper.setDefaultTyping(serializerTyper); [EOL]     MapHolder holder = new MapHolder(); [EOL]     holder.map = new HashMap<MapKey, List<Object>>(); [EOL]     List<Object> ints = new ArrayList<Object>(); [EOL]     ints.add(Integer.valueOf(3)); [EOL]     holder.map.put(new MapKey("key"), ints); [EOL]     String json = serMapper.writeValueAsString(holder); [EOL]     ObjectMapper deserMapper = new ObjectMapper(); [EOL]     TypeResolverBuilder<?> deserializerTyper = new ObjectMapper.DefaultTypeResolverBuilder(ObjectMapper.DefaultTyping.NON_FINAL); [EOL]     deserializerTyper = deserializerTyper.init(JsonTypeInfo.Id.NAME, createTypeNameIdResolver(false)); [EOL]     deserializerTyper = deserializerTyper.inclusion(JsonTypeInfo.As.PROPERTY); [EOL]     deserMapper.setDefaultTyping(deserializerTyper); [EOL]     MapHolder result = deserMapper.readValue(json, MapHolder.class); [EOL]     assertNotNull(result); [EOL]     Map<?, ?> map = result.map; [EOL]     assertEquals(1, map.size()); [EOL]     Map.Entry<?, ?> entry = map.entrySet().iterator().next(); [EOL]     Object key = entry.getKey(); [EOL]     assertEquals(MapKey.class, key.getClass()); [EOL]     Object value = entry.getValue(); [EOL]     assertTrue(value instanceof List<?>); [EOL]     List<?> list = (List<?>) value; [EOL]     assertEquals(1, list.size()); [EOL]     assertEquals(Integer.class, list.get(0).getClass()); [EOL]     assertEquals(Integer.valueOf(3), list.get(0)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testJackson428() throws Exception { [EOL]     ObjectMapper serMapper = new ObjectMapper(); [EOL]     TypeResolverBuilder<?> serializerTyper = new ObjectMapper.DefaultTypeResolverBuilder(ObjectMapper.DefaultTyping.NON_FINAL); [EOL]     serializerTyper = serializerTyper.init(JsonTypeInfo.Id.NAME, createTypeNameIdResolver(true)); [EOL]     serializerTyper = serializerTyper.inclusion(JsonTypeInfo.As.PROPERTY); [EOL]     serMapper.setDefaultTyping(serializerTyper); [EOL]     MapHolder holder = new MapHolder(); [EOL]     holder.map = new HashMap<MapKey, List<Object>>(); [EOL]     List<Object> ints = new ArrayList<Object>(); [EOL]     ints.add(Integer.valueOf(3)); [EOL]     holder.map.put(new MapKey("key"), ints); [EOL]     String json = serMapper.writeValueAsString(holder); [EOL]     ObjectMapper deserMapper = new ObjectMapper(); [EOL]     TypeResolverBuilder<?> deserializerTyper = new ObjectMapper.DefaultTypeResolverBuilder(ObjectMapper.DefaultTyping.NON_FINAL); [EOL]     deserializerTyper = deserializerTyper.init(JsonTypeInfo.Id.NAME, createTypeNameIdResolver(false)); [EOL]     deserializerTyper = deserializerTyper.inclusion(JsonTypeInfo.As.PROPERTY); [EOL]     deserMapper.setDefaultTyping(deserializerTyper); [EOL]     MapHolder result = deserMapper.readValue(json, MapHolder.class); [EOL]     assertNotNull(result); [EOL]     Map<?, ?> map = result.map; [EOL]     assertEquals(1, map.size()); [EOL]     Map.Entry<?, ?> entry = map.entrySet().iterator().next(); [EOL]     Object key = entry.getKey(); [EOL]     assertEquals(MapKey.class, key.getClass()); [EOL]     Object value = entry.getValue(); [EOL]     assertTrue(value instanceof List<?>); [EOL]     List<?> list = (List<?>) value; [EOL]     assertEquals(1, list.size()); [EOL]     assertEquals(Integer.class, list.get(0).getClass()); [EOL]     assertEquals(Integer.valueOf(3), list.get(0)); [EOL] }
public void testJackson428() throws Exception { [EOL]     ObjectMapper serMapper = new ObjectMapper(); [EOL]     TypeResolverBuilder<?> serializerTyper = new ObjectMapper.DefaultTypeResolverBuilder(ObjectMapper.DefaultTyping.NON_FINAL); [EOL]     serializerTyper = serializerTyper.init(JsonTypeInfo.Id.NAME, createTypeNameIdResolver(true)); [EOL]     serializerTyper = serializerTyper.inclusion(JsonTypeInfo.As.PROPERTY); [EOL]     serMapper.setDefaultTyping(serializerTyper); [EOL]     MapHolder holder = new MapHolder(); [EOL]     holder.map = new HashMap<MapKey, List<Object>>(); [EOL]     List<Object> ints = new ArrayList<Object>(); [EOL]     ints.add(Integer.valueOf(3)); [EOL]     holder.map.put(new MapKey("key"), ints); [EOL]     String json = serMapper.writeValueAsString(holder); [EOL]     ObjectMapper deserMapper = new ObjectMapper(); [EOL]     TypeResolverBuilder<?> deserializerTyper = new ObjectMapper.DefaultTypeResolverBuilder(ObjectMapper.DefaultTyping.NON_FINAL); [EOL]     deserializerTyper = deserializerTyper.init(JsonTypeInfo.Id.NAME, createTypeNameIdResolver(false)); [EOL]     deserializerTyper = deserializerTyper.inclusion(JsonTypeInfo.As.PROPERTY); [EOL]     deserMapper.setDefaultTyping(deserializerTyper); [EOL]     MapHolder result = deserMapper.readValue(json, MapHolder.class); [EOL]     assertNotNull(result); [EOL]     Map<?, ?> map = result.map; [EOL]     assertEquals(1, map.size()); [EOL]     Map.Entry<?, ?> entry = map.entrySet().iterator().next(); [EOL]     Object key = entry.getKey(); [EOL]     assertEquals(MapKey.class, key.getClass()); [EOL]     Object value = entry.getValue(); [EOL]     assertTrue(value instanceof List<?>); [EOL]     List<?> list = (List<?>) value; [EOL]     assertEquals(1, list.size()); [EOL]     assertEquals(Integer.class, list.get(0).getClass()); [EOL]     assertEquals(Integer.valueOf(3), list.get(0)); [EOL] }
public void testJackson428() throws Exception { [EOL]     ObjectMapper serMapper = new ObjectMapper(); [EOL]     TypeResolverBuilder<?> serializerTyper = new ObjectMapper.DefaultTypeResolverBuilder(ObjectMapper.DefaultTyping.NON_FINAL); [EOL]     serializerTyper = serializerTyper.init(JsonTypeInfo.Id.NAME, createTypeNameIdResolver(true)); [EOL]     serializerTyper = serializerTyper.inclusion(JsonTypeInfo.As.PROPERTY); [EOL]     serMapper.setDefaultTyping(serializerTyper); [EOL]     MapHolder holder = new MapHolder(); [EOL]     holder.map = new HashMap<MapKey, List<Object>>(); [EOL]     List<Object> ints = new ArrayList<Object>(); [EOL]     ints.add(Integer.valueOf(3)); [EOL]     holder.map.put(new MapKey("key"), ints); [EOL]     String json = serMapper.writeValueAsString(holder); [EOL]     ObjectMapper deserMapper = new ObjectMapper(); [EOL]     TypeResolverBuilder<?> deserializerTyper = new ObjectMapper.DefaultTypeResolverBuilder(ObjectMapper.DefaultTyping.NON_FINAL); [EOL]     deserializerTyper = deserializerTyper.init(JsonTypeInfo.Id.NAME, createTypeNameIdResolver(false)); [EOL]     deserializerTyper = deserializerTyper.inclusion(JsonTypeInfo.As.PROPERTY); [EOL]     deserMapper.setDefaultTyping(deserializerTyper); [EOL]     MapHolder result = deserMapper.readValue(json, MapHolder.class); [EOL]     assertNotNull(result); [EOL]     Map<?, ?> map = result.map; [EOL]     assertEquals(1, map.size()); [EOL]     Map.Entry<?, ?> entry = map.entrySet().iterator().next(); [EOL]     Object key = entry.getKey(); [EOL]     assertEquals(MapKey.class, key.getClass()); [EOL]     Object value = entry.getValue(); [EOL]     assertTrue(value instanceof List<?>); [EOL]     List<?> list = (List<?>) value; [EOL]     assertEquals(1, list.size()); [EOL]     assertEquals(Integer.class, list.get(0).getClass()); [EOL]     assertEquals(Integer.valueOf(3), list.get(0)); [EOL] }
public void testJackson428() throws Exception { [EOL]     ObjectMapper serMapper = new ObjectMapper(); [EOL]     TypeResolverBuilder<?> serializerTyper = new ObjectMapper.DefaultTypeResolverBuilder(ObjectMapper.DefaultTyping.NON_FINAL); [EOL]     serializerTyper = serializerTyper.init(JsonTypeInfo.Id.NAME, createTypeNameIdResolver(true)); [EOL]     serializerTyper = serializerTyper.inclusion(JsonTypeInfo.As.PROPERTY); [EOL]     serMapper.setDefaultTyping(serializerTyper); [EOL]     MapHolder holder = new MapHolder(); [EOL]     holder.map = new HashMap<MapKey, List<Object>>(); [EOL]     List<Object> ints = new ArrayList<Object>(); [EOL]     ints.add(Integer.valueOf(3)); [EOL]     holder.map.put(new MapKey("key"), ints); [EOL]     String json = serMapper.writeValueAsString(holder); [EOL]     ObjectMapper deserMapper = new ObjectMapper(); [EOL]     TypeResolverBuilder<?> deserializerTyper = new ObjectMapper.DefaultTypeResolverBuilder(ObjectMapper.DefaultTyping.NON_FINAL); [EOL]     deserializerTyper = deserializerTyper.init(JsonTypeInfo.Id.NAME, createTypeNameIdResolver(false)); [EOL]     deserializerTyper = deserializerTyper.inclusion(JsonTypeInfo.As.PROPERTY); [EOL]     deserMapper.setDefaultTyping(deserializerTyper); [EOL]     MapHolder result = deserMapper.readValue(json, MapHolder.class); [EOL]     assertNotNull(result); [EOL]     Map<?, ?> map = result.map; [EOL]     assertEquals(1, map.size()); [EOL]     Map.Entry<?, ?> entry = map.entrySet().iterator().next(); [EOL]     Object key = entry.getKey(); [EOL]     assertEquals(MapKey.class, key.getClass()); [EOL]     Object value = entry.getValue(); [EOL]     assertTrue(value instanceof List<?>); [EOL]     List<?> list = (List<?>) value; [EOL]     assertEquals(1, list.size()); [EOL]     assertEquals(Integer.class, list.get(0).getClass()); [EOL]     assertEquals(Integer.valueOf(3), list.get(0)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testSerializedAsMapWithClassSerializer() throws IOException { [EOL]     SimpleValueMapWithSerializer map = new SimpleValueMapWithSerializer(); [EOL]     map.put(new SimpleKey("abc"), new ActualValue("123")); [EOL]     assertEquals("{\"key abc\":\"value 123\"}", MAPPER.writeValueAsString(map)); [EOL] }
public void testSerializedAsMapWithClassSerializer() throws IOException { [EOL]     SimpleValueMapWithSerializer map = new SimpleValueMapWithSerializer(); [EOL]     map.put(new SimpleKey("abc"), new ActualValue("123")); [EOL]     assertEquals("{\"key abc\":\"value 123\"}", MAPPER.writeValueAsString(map)); [EOL] }
public void testSerializedAsMapWithClassSerializer() throws IOException { [EOL]     SimpleValueMapWithSerializer map = new SimpleValueMapWithSerializer(); [EOL]     map.put(new SimpleKey("abc"), new ActualValue("123")); [EOL]     assertEquals("{\"key abc\":\"value 123\"}", MAPPER.writeValueAsString(map)); [EOL] }
public void testSerializedAsMapWithClassSerializer() throws IOException { [EOL]     SimpleValueMapWithSerializer map = new SimpleValueMapWithSerializer(); [EOL]     map.put(new SimpleKey("abc"), new ActualValue("123")); [EOL]     assertEquals("{\"key abc\":\"value 123\"}", MAPPER.writeValueAsString(map)); [EOL] }
public void testSerializedAsMapWithClassSerializer() throws IOException { [EOL]     SimpleValueMapWithSerializer map = new SimpleValueMapWithSerializer(); [EOL]     map.put(new SimpleKey("abc"), new ActualValue("123")); [EOL]     assertEquals("{\"key abc\":\"value 123\"}", MAPPER.writeValueAsString(map)); [EOL] }
public void testSerializedAsMapWithClassSerializer() throws IOException { [EOL]     SimpleValueMapWithSerializer map = new SimpleValueMapWithSerializer(); [EOL]     map.put(new SimpleKey("abc"), new ActualValue("123")); [EOL]     assertEquals("{\"key abc\":\"value 123\"}", MAPPER.writeValueAsString(map)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testJackson428() throws Exception { [EOL]     ObjectMapper serMapper = new ObjectMapper(); [EOL]     TypeResolverBuilder<?> serializerTyper = new ObjectMapper.DefaultTypeResolverBuilder(ObjectMapper.DefaultTyping.NON_FINAL); [EOL]     serializerTyper = serializerTyper.init(JsonTypeInfo.Id.NAME, createTypeNameIdResolver(true)); [EOL]     serializerTyper = serializerTyper.inclusion(JsonTypeInfo.As.PROPERTY); [EOL]     serMapper.setDefaultTyping(serializerTyper); [EOL]     MapHolder holder = new MapHolder(); [EOL]     holder.map = new HashMap<MapKey, List<Object>>(); [EOL]     List<Object> ints = new ArrayList<Object>(); [EOL]     ints.add(Integer.valueOf(3)); [EOL]     holder.map.put(new MapKey("key"), ints); [EOL]     String json = serMapper.writeValueAsString(holder); [EOL]     ObjectMapper deserMapper = new ObjectMapper(); [EOL]     TypeResolverBuilder<?> deserializerTyper = new ObjectMapper.DefaultTypeResolverBuilder(ObjectMapper.DefaultTyping.NON_FINAL); [EOL]     deserializerTyper = deserializerTyper.init(JsonTypeInfo.Id.NAME, createTypeNameIdResolver(false)); [EOL]     deserializerTyper = deserializerTyper.inclusion(JsonTypeInfo.As.PROPERTY); [EOL]     deserMapper.setDefaultTyping(deserializerTyper); [EOL]     MapHolder result = deserMapper.readValue(json, MapHolder.class); [EOL]     assertNotNull(result); [EOL]     Map<?, ?> map = result.map; [EOL]     assertEquals(1, map.size()); [EOL]     Map.Entry<?, ?> entry = map.entrySet().iterator().next(); [EOL]     Object key = entry.getKey(); [EOL]     assertEquals(MapKey.class, key.getClass()); [EOL]     Object value = entry.getValue(); [EOL]     assertTrue(value instanceof List<?>); [EOL]     List<?> list = (List<?>) value; [EOL]     assertEquals(1, list.size()); [EOL]     assertEquals(Integer.class, list.get(0).getClass()); [EOL]     assertEquals(Integer.valueOf(3), list.get(0)); [EOL] }
public void testJackson428() throws Exception { [EOL]     ObjectMapper serMapper = new ObjectMapper(); [EOL]     TypeResolverBuilder<?> serializerTyper = new ObjectMapper.DefaultTypeResolverBuilder(ObjectMapper.DefaultTyping.NON_FINAL); [EOL]     serializerTyper = serializerTyper.init(JsonTypeInfo.Id.NAME, createTypeNameIdResolver(true)); [EOL]     serializerTyper = serializerTyper.inclusion(JsonTypeInfo.As.PROPERTY); [EOL]     serMapper.setDefaultTyping(serializerTyper); [EOL]     MapHolder holder = new MapHolder(); [EOL]     holder.map = new HashMap<MapKey, List<Object>>(); [EOL]     List<Object> ints = new ArrayList<Object>(); [EOL]     ints.add(Integer.valueOf(3)); [EOL]     holder.map.put(new MapKey("key"), ints); [EOL]     String json = serMapper.writeValueAsString(holder); [EOL]     ObjectMapper deserMapper = new ObjectMapper(); [EOL]     TypeResolverBuilder<?> deserializerTyper = new ObjectMapper.DefaultTypeResolverBuilder(ObjectMapper.DefaultTyping.NON_FINAL); [EOL]     deserializerTyper = deserializerTyper.init(JsonTypeInfo.Id.NAME, createTypeNameIdResolver(false)); [EOL]     deserializerTyper = deserializerTyper.inclusion(JsonTypeInfo.As.PROPERTY); [EOL]     deserMapper.setDefaultTyping(deserializerTyper); [EOL]     MapHolder result = deserMapper.readValue(json, MapHolder.class); [EOL]     assertNotNull(result); [EOL]     Map<?, ?> map = result.map; [EOL]     assertEquals(1, map.size()); [EOL]     Map.Entry<?, ?> entry = map.entrySet().iterator().next(); [EOL]     Object key = entry.getKey(); [EOL]     assertEquals(MapKey.class, key.getClass()); [EOL]     Object value = entry.getValue(); [EOL]     assertTrue(value instanceof List<?>); [EOL]     List<?> list = (List<?>) value; [EOL]     assertEquals(1, list.size()); [EOL]     assertEquals(Integer.class, list.get(0).getClass()); [EOL]     assertEquals(Integer.valueOf(3), list.get(0)); [EOL] }
public void testJackson428() throws Exception { [EOL]     ObjectMapper serMapper = new ObjectMapper(); [EOL]     TypeResolverBuilder<?> serializerTyper = new ObjectMapper.DefaultTypeResolverBuilder(ObjectMapper.DefaultTyping.NON_FINAL); [EOL]     serializerTyper = serializerTyper.init(JsonTypeInfo.Id.NAME, createTypeNameIdResolver(true)); [EOL]     serializerTyper = serializerTyper.inclusion(JsonTypeInfo.As.PROPERTY); [EOL]     serMapper.setDefaultTyping(serializerTyper); [EOL]     MapHolder holder = new MapHolder(); [EOL]     holder.map = new HashMap<MapKey, List<Object>>(); [EOL]     List<Object> ints = new ArrayList<Object>(); [EOL]     ints.add(Integer.valueOf(3)); [EOL]     holder.map.put(new MapKey("key"), ints); [EOL]     String json = serMapper.writeValueAsString(holder); [EOL]     ObjectMapper deserMapper = new ObjectMapper(); [EOL]     TypeResolverBuilder<?> deserializerTyper = new ObjectMapper.DefaultTypeResolverBuilder(ObjectMapper.DefaultTyping.NON_FINAL); [EOL]     deserializerTyper = deserializerTyper.init(JsonTypeInfo.Id.NAME, createTypeNameIdResolver(false)); [EOL]     deserializerTyper = deserializerTyper.inclusion(JsonTypeInfo.As.PROPERTY); [EOL]     deserMapper.setDefaultTyping(deserializerTyper); [EOL]     MapHolder result = deserMapper.readValue(json, MapHolder.class); [EOL]     assertNotNull(result); [EOL]     Map<?, ?> map = result.map; [EOL]     assertEquals(1, map.size()); [EOL]     Map.Entry<?, ?> entry = map.entrySet().iterator().next(); [EOL]     Object key = entry.getKey(); [EOL]     assertEquals(MapKey.class, key.getClass()); [EOL]     Object value = entry.getValue(); [EOL]     assertTrue(value instanceof List<?>); [EOL]     List<?> list = (List<?>) value; [EOL]     assertEquals(1, list.size()); [EOL]     assertEquals(Integer.class, list.get(0).getClass()); [EOL]     assertEquals(Integer.valueOf(3), list.get(0)); [EOL] }
public void testJackson428() throws Exception { [EOL]     ObjectMapper serMapper = new ObjectMapper(); [EOL]     TypeResolverBuilder<?> serializerTyper = new ObjectMapper.DefaultTypeResolverBuilder(ObjectMapper.DefaultTyping.NON_FINAL); [EOL]     serializerTyper = serializerTyper.init(JsonTypeInfo.Id.NAME, createTypeNameIdResolver(true)); [EOL]     serializerTyper = serializerTyper.inclusion(JsonTypeInfo.As.PROPERTY); [EOL]     serMapper.setDefaultTyping(serializerTyper); [EOL]     MapHolder holder = new MapHolder(); [EOL]     holder.map = new HashMap<MapKey, List<Object>>(); [EOL]     List<Object> ints = new ArrayList<Object>(); [EOL]     ints.add(Integer.valueOf(3)); [EOL]     holder.map.put(new MapKey("key"), ints); [EOL]     String json = serMapper.writeValueAsString(holder); [EOL]     ObjectMapper deserMapper = new ObjectMapper(); [EOL]     TypeResolverBuilder<?> deserializerTyper = new ObjectMapper.DefaultTypeResolverBuilder(ObjectMapper.DefaultTyping.NON_FINAL); [EOL]     deserializerTyper = deserializerTyper.init(JsonTypeInfo.Id.NAME, createTypeNameIdResolver(false)); [EOL]     deserializerTyper = deserializerTyper.inclusion(JsonTypeInfo.As.PROPERTY); [EOL]     deserMapper.setDefaultTyping(deserializerTyper); [EOL]     MapHolder result = deserMapper.readValue(json, MapHolder.class); [EOL]     assertNotNull(result); [EOL]     Map<?, ?> map = result.map; [EOL]     assertEquals(1, map.size()); [EOL]     Map.Entry<?, ?> entry = map.entrySet().iterator().next(); [EOL]     Object key = entry.getKey(); [EOL]     assertEquals(MapKey.class, key.getClass()); [EOL]     Object value = entry.getValue(); [EOL]     assertTrue(value instanceof List<?>); [EOL]     List<?> list = (List<?>) value; [EOL]     assertEquals(1, list.size()); [EOL]     assertEquals(Integer.class, list.get(0).getClass()); [EOL]     assertEquals(Integer.valueOf(3), list.get(0)); [EOL] }
public void testJackson428() throws Exception { [EOL]     ObjectMapper serMapper = new ObjectMapper(); [EOL]     TypeResolverBuilder<?> serializerTyper = new ObjectMapper.DefaultTypeResolverBuilder(ObjectMapper.DefaultTyping.NON_FINAL); [EOL]     serializerTyper = serializerTyper.init(JsonTypeInfo.Id.NAME, createTypeNameIdResolver(true)); [EOL]     serializerTyper = serializerTyper.inclusion(JsonTypeInfo.As.PROPERTY); [EOL]     serMapper.setDefaultTyping(serializerTyper); [EOL]     MapHolder holder = new MapHolder(); [EOL]     holder.map = new HashMap<MapKey, List<Object>>(); [EOL]     List<Object> ints = new ArrayList<Object>(); [EOL]     ints.add(Integer.valueOf(3)); [EOL]     holder.map.put(new MapKey("key"), ints); [EOL]     String json = serMapper.writeValueAsString(holder); [EOL]     ObjectMapper deserMapper = new ObjectMapper(); [EOL]     TypeResolverBuilder<?> deserializerTyper = new ObjectMapper.DefaultTypeResolverBuilder(ObjectMapper.DefaultTyping.NON_FINAL); [EOL]     deserializerTyper = deserializerTyper.init(JsonTypeInfo.Id.NAME, createTypeNameIdResolver(false)); [EOL]     deserializerTyper = deserializerTyper.inclusion(JsonTypeInfo.As.PROPERTY); [EOL]     deserMapper.setDefaultTyping(deserializerTyper); [EOL]     MapHolder result = deserMapper.readValue(json, MapHolder.class); [EOL]     assertNotNull(result); [EOL]     Map<?, ?> map = result.map; [EOL]     assertEquals(1, map.size()); [EOL]     Map.Entry<?, ?> entry = map.entrySet().iterator().next(); [EOL]     Object key = entry.getKey(); [EOL]     assertEquals(MapKey.class, key.getClass()); [EOL]     Object value = entry.getValue(); [EOL]     assertTrue(value instanceof List<?>); [EOL]     List<?> list = (List<?>) value; [EOL]     assertEquals(1, list.size()); [EOL]     assertEquals(Integer.class, list.get(0).getClass()); [EOL]     assertEquals(Integer.valueOf(3), list.get(0)); [EOL] }
public void testClassIgnoreWithMap() throws Exception { [EOL]     IgnoreMap result = MAPPER.readValue("{ \"a\":[ 1],\n" + "\"b\":2,\n" + "\"c\": \"x\",\n" + "\"d\":false }", IgnoreMap.class); [EOL]     assertEquals(2, result.size()); [EOL]     Object ob = result.get("b"); [EOL]     assertEquals(Integer.class, ob.getClass()); [EOL]     assertEquals(Integer.valueOf(2), ob); [EOL]     assertEquals("x", result.get("c")); [EOL]     assertFalse(result.containsKey("a")); [EOL]     assertFalse(result.containsKey("d")); [EOL] }
public void testClassIgnoreWithMap() throws Exception { [EOL]     IgnoreMap result = MAPPER.readValue("{ \"a\":[ 1],\n" + "\"b\":2,\n" + "\"c\": \"x\",\n" + "\"d\":false }", IgnoreMap.class); [EOL]     assertEquals(2, result.size()); [EOL]     Object ob = result.get("b"); [EOL]     assertEquals(Integer.class, ob.getClass()); [EOL]     assertEquals(Integer.valueOf(2), ob); [EOL]     assertEquals("x", result.get("c")); [EOL]     assertFalse(result.containsKey("a")); [EOL]     assertFalse(result.containsKey("d")); [EOL] }
public void testClassIgnoreWithMap() throws Exception { [EOL]     IgnoreMap result = MAPPER.readValue("{ \"a\":[ 1],\n" + "\"b\":2,\n" + "\"c\": \"x\",\n" + "\"d\":false }", IgnoreMap.class); [EOL]     assertEquals(2, result.size()); [EOL]     Object ob = result.get("b"); [EOL]     assertEquals(Integer.class, ob.getClass()); [EOL]     assertEquals(Integer.valueOf(2), ob); [EOL]     assertEquals("x", result.get("c")); [EOL]     assertFalse(result.containsKey("a")); [EOL]     assertFalse(result.containsKey("d")); [EOL] }
public void testClassIgnoreWithMap() throws Exception { [EOL]     IgnoreMap result = MAPPER.readValue("{ \"a\":[ 1],\n" + "\"b\":2,\n" + "\"c\": \"x\",\n" + "\"d\":false }", IgnoreMap.class); [EOL]     assertEquals(2, result.size()); [EOL]     Object ob = result.get("b"); [EOL]     assertEquals(Integer.class, ob.getClass()); [EOL]     assertEquals(Integer.valueOf(2), ob); [EOL]     assertEquals("x", result.get("c")); [EOL]     assertFalse(result.containsKey("a")); [EOL]     assertFalse(result.containsKey("d")); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testParse() { [EOL]     Date d = ISO8601Utils.parse("2007-08-13T19:51:23.789Z"); [EOL]     assertEquals(date, d); [EOL]     d = ISO8601Utils.parse("2007-08-13T19:51:23Z"); [EOL]     assertEquals(dateZeroMillis, d); [EOL]     d = ISO8601Utils.parse("2007-08-13T21:51:23.789+02:00"); [EOL]     assertEquals(date, d); [EOL] }
public void testParse() { [EOL]     Date d = ISO8601Utils.parse("2007-08-13T19:51:23.789Z"); [EOL]     assertEquals(date, d); [EOL]     d = ISO8601Utils.parse("2007-08-13T19:51:23Z"); [EOL]     assertEquals(dateZeroMillis, d); [EOL]     d = ISO8601Utils.parse("2007-08-13T21:51:23.789+02:00"); [EOL]     assertEquals(date, d); [EOL] }
public void testParse() { [EOL]     Date d = ISO8601Utils.parse("2007-08-13T19:51:23.789Z"); [EOL]     assertEquals(date, d); [EOL]     d = ISO8601Utils.parse("2007-08-13T19:51:23Z"); [EOL]     assertEquals(dateZeroMillis, d); [EOL]     d = ISO8601Utils.parse("2007-08-13T21:51:23.789+02:00"); [EOL]     assertEquals(date, d); [EOL] }
public void testParse() { [EOL]     Date d = ISO8601Utils.parse("2007-08-13T19:51:23.789Z"); [EOL]     assertEquals(date, d); [EOL]     d = ISO8601Utils.parse("2007-08-13T19:51:23Z"); [EOL]     assertEquals(dateZeroMillis, d); [EOL]     d = ISO8601Utils.parse("2007-08-13T21:51:23.789+02:00"); [EOL]     assertEquals(date, d); [EOL] }
public void testParse() { [EOL]     Date d = ISO8601Utils.parse("2007-08-13T19:51:23.789Z"); [EOL]     assertEquals(date, d); [EOL]     d = ISO8601Utils.parse("2007-08-13T19:51:23Z"); [EOL]     assertEquals(dateZeroMillis, d); [EOL]     d = ISO8601Utils.parse("2007-08-13T21:51:23.789+02:00"); [EOL]     assertEquals(date, d); [EOL] }
public void testParse() { [EOL]     Date d = ISO8601Utils.parse("2007-08-13T19:51:23.789Z"); [EOL]     assertEquals(date, d); [EOL]     d = ISO8601Utils.parse("2007-08-13T19:51:23Z"); [EOL]     assertEquals(dateZeroMillis, d); [EOL]     d = ISO8601Utils.parse("2007-08-13T21:51:23.789+02:00"); [EOL]     assertEquals(date, d); [EOL] }
public void testParse() { [EOL]     Date d = ISO8601Utils.parse("2007-08-13T19:51:23.789Z"); [EOL]     assertEquals(date, d); [EOL]     d = ISO8601Utils.parse("2007-08-13T19:51:23Z"); [EOL]     assertEquals(dateZeroMillis, d); [EOL]     d = ISO8601Utils.parse("2007-08-13T21:51:23.789+02:00"); [EOL]     assertEquals(date, d); [EOL] }
public void testParse() { [EOL]     Date d = ISO8601Utils.parse("2007-08-13T19:51:23.789Z"); [EOL]     assertEquals(date, d); [EOL]     d = ISO8601Utils.parse("2007-08-13T19:51:23Z"); [EOL]     assertEquals(dateZeroMillis, d); [EOL]     d = ISO8601Utils.parse("2007-08-13T21:51:23.789+02:00"); [EOL]     assertEquals(date, d); [EOL] }
public void testParse() { [EOL]     Date d = ISO8601Utils.parse("2007-08-13T19:51:23.789Z"); [EOL]     assertEquals(date, d); [EOL]     d = ISO8601Utils.parse("2007-08-13T19:51:23Z"); [EOL]     assertEquals(dateZeroMillis, d); [EOL]     d = ISO8601Utils.parse("2007-08-13T21:51:23.789+02:00"); [EOL]     assertEquals(date, d); [EOL] }
public void testParse() { [EOL]     Date d = ISO8601Utils.parse("2007-08-13T19:51:23.789Z"); [EOL]     assertEquals(date, d); [EOL]     d = ISO8601Utils.parse("2007-08-13T19:51:23Z"); [EOL]     assertEquals(dateZeroMillis, d); [EOL]     d = ISO8601Utils.parse("2007-08-13T21:51:23.789+02:00"); [EOL]     assertEquals(date, d); [EOL] }
public void testParse() { [EOL]     Date d = ISO8601Utils.parse("2007-08-13T19:51:23.789Z"); [EOL]     assertEquals(date, d); [EOL]     d = ISO8601Utils.parse("2007-08-13T19:51:23Z"); [EOL]     assertEquals(dateZeroMillis, d); [EOL]     d = ISO8601Utils.parse("2007-08-13T21:51:23.789+02:00"); [EOL]     assertEquals(date, d); [EOL] }
public void testParse() { [EOL]     Date d = ISO8601Utils.parse("2007-08-13T19:51:23.789Z"); [EOL]     assertEquals(date, d); [EOL]     d = ISO8601Utils.parse("2007-08-13T19:51:23Z"); [EOL]     assertEquals(dateZeroMillis, d); [EOL]     d = ISO8601Utils.parse("2007-08-13T21:51:23.789+02:00"); [EOL]     assertEquals(date, d); [EOL] }
public void testParse() { [EOL]     Date d = ISO8601Utils.parse("2007-08-13T19:51:23.789Z"); [EOL]     assertEquals(date, d); [EOL]     d = ISO8601Utils.parse("2007-08-13T19:51:23Z"); [EOL]     assertEquals(dateZeroMillis, d); [EOL]     d = ISO8601Utils.parse("2007-08-13T21:51:23.789+02:00"); [EOL]     assertEquals(date, d); [EOL] }
public void testParse() { [EOL]     Date d = ISO8601Utils.parse("2007-08-13T19:51:23.789Z"); [EOL]     assertEquals(date, d); [EOL]     d = ISO8601Utils.parse("2007-08-13T19:51:23Z"); [EOL]     assertEquals(dateZeroMillis, d); [EOL]     d = ISO8601Utils.parse("2007-08-13T21:51:23.789+02:00"); [EOL]     assertEquals(date, d); [EOL] }
public void testParse() { [EOL]     Date d = ISO8601Utils.parse("2007-08-13T19:51:23.789Z"); [EOL]     assertEquals(date, d); [EOL]     d = ISO8601Utils.parse("2007-08-13T19:51:23Z"); [EOL]     assertEquals(dateZeroMillis, d); [EOL]     d = ISO8601Utils.parse("2007-08-13T21:51:23.789+02:00"); [EOL]     assertEquals(date, d); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSetterConflict() throws Exception { [EOL]     try { [EOL]         MAPPER.readValue("{ }", ConflictBean.class); [EOL]     } catch (Exception e) { [EOL]         verifyException(e, "Conflicting setter definitions"); [EOL]     } [EOL] }
public void testNumbersToEnums() throws Exception { [EOL]     assertFalse(MAPPER.getDeserializationConfig().isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS)); [EOL]     TestEnum value = MAPPER.readValue("1", TestEnum.class); [EOL]     assertSame(TestEnum.RULES, value); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS, true); [EOL]     try { [EOL]         value = m.readValue("1", TestEnum.class); [EOL]         fail("Expected an error"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Not allowed to deserialize Enum value out of JSON number"); [EOL]     } [EOL] }
public void testSetterConflict() throws Exception { [EOL]     try { [EOL]         MAPPER.readValue("{ }", ConflictBean.class); [EOL]     } catch (Exception e) { [EOL]         verifyException(e, "Conflicting setter definitions"); [EOL]     } [EOL] }
public void testSetterConflict() throws Exception { [EOL]     try { [EOL]         MAPPER.readValue("{ }", ConflictBean.class); [EOL]     } catch (Exception e) { [EOL]         verifyException(e, "Conflicting setter definitions"); [EOL]     } [EOL] }
public void testSetterConflict() throws Exception { [EOL]     try { [EOL]         MAPPER.readValue("{ }", ConflictBean.class); [EOL]     } catch (Exception e) { [EOL]         verifyException(e, "Conflicting setter definitions"); [EOL]     } [EOL] }
public void testWithoutModule() { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.writeValueAsString(new CustomBean("foo", 3)); [EOL]         fail("Should have caused an exception"); [EOL]     } catch (IOException e) { [EOL]         verifyException(e, "No serializer found"); [EOL]     } [EOL]     try { [EOL]         mapper.readValue("{\"str\":\"ab\",\"num\":2}", CustomBean.class); [EOL]         fail("Should have caused an exception"); [EOL]     } catch (IOException e) { [EOL]         verifyException(e, "No suitable constructor found"); [EOL]     } [EOL] }
public void testWithoutModule() { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.writeValueAsString(new CustomBean("foo", 3)); [EOL]         fail("Should have caused an exception"); [EOL]     } catch (IOException e) { [EOL]         verifyException(e, "No serializer found"); [EOL]     } [EOL]     try { [EOL]         mapper.readValue("{\"str\":\"ab\",\"num\":2}", CustomBean.class); [EOL]         fail("Should have caused an exception"); [EOL]     } catch (IOException e) { [EOL]         verifyException(e, "No suitable constructor found"); [EOL]     } [EOL] }
public void testWithoutModule() { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.writeValueAsString(new CustomBean("foo", 3)); [EOL]         fail("Should have caused an exception"); [EOL]     } catch (IOException e) { [EOL]         verifyException(e, "No serializer found"); [EOL]     } [EOL]     try { [EOL]         mapper.readValue("{\"str\":\"ab\",\"num\":2}", CustomBean.class); [EOL]         fail("Should have caused an exception"); [EOL]     } catch (IOException e) { [EOL]         verifyException(e, "No suitable constructor found"); [EOL]     } [EOL] }
public void testWithoutModule() { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.writeValueAsString(new CustomBean("foo", 3)); [EOL]         fail("Should have caused an exception"); [EOL]     } catch (IOException e) { [EOL]         verifyException(e, "No serializer found"); [EOL]     } [EOL]     try { [EOL]         mapper.readValue("{\"str\":\"ab\",\"num\":2}", CustomBean.class); [EOL]         fail("Should have caused an exception"); [EOL]     } catch (IOException e) { [EOL]         verifyException(e, "No suitable constructor found"); [EOL]     } [EOL] }
public void testWithoutModule() { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.writeValueAsString(new CustomBean("foo", 3)); [EOL]         fail("Should have caused an exception"); [EOL]     } catch (IOException e) { [EOL]         verifyException(e, "No serializer found"); [EOL]     } [EOL]     try { [EOL]         mapper.readValue("{\"str\":\"ab\",\"num\":2}", CustomBean.class); [EOL]         fail("Should have caused an exception"); [EOL]     } catch (IOException e) { [EOL]         verifyException(e, "No suitable constructor found"); [EOL]     } [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
