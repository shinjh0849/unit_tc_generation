public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testRelativeContextAbsolutePath() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "/integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testRelativeContextAbsolutePath() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "/integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePath() { [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]/address/street", "", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[2]/@manager", "", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[1]/@name", "local", "/vendor[1]/location[1]/@name"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "", "/vendor[1]/location[4]/@manager"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/price:foo/price:bar", "", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testNodeTypeText() { [EOL]     assertXPathValue(context, "//product/text()[. != '']", "We love this product."); [EOL]     assertXPathPointer(context, "//product/text()", "/vendor[1]/product[1]/text()[1]"); [EOL] }
public void testNodeTypeText() { [EOL]     assertXPathValue(context, "//product/text()[. != '']", "We love this product."); [EOL]     assertXPathPointer(context, "//product/text()", "/vendor[1]/product[1]/text()[1]"); [EOL] }
public void testNodeTypeText() { [EOL]     assertXPathValue(context, "//product/text()[. != '']", "We love this product."); [EOL]     assertXPathPointer(context, "//product/text()", "/vendor[1]/product[1]/text()[1]"); [EOL] }
public void testNodeTypeText() { [EOL]     assertXPathValue(context, "//product/text()[. != '']", "We love this product."); [EOL]     assertXPathPointer(context, "//product/text()", "/vendor[1]/product[1]/text()[1]"); [EOL] }
public void testNodeTypeText() { [EOL]     assertXPathValue(context, "//product/text()[. != '']", "We love this product."); [EOL]     assertXPathPointer(context, "//product/text()", "/vendor[1]/product[1]/text()[1]"); [EOL] }
public void testNodeTypeText() { [EOL]     assertXPathValue(context, "//product/text()[. != '']", "We love this product."); [EOL]     assertXPathPointer(context, "//product/text()", "/vendor[1]/product[1]/text()[1]"); [EOL] }
public void testNodeTypeText() { [EOL]     assertXPathValue(context, "//product/text()[. != '']", "We love this product."); [EOL]     assertXPathPointer(context, "//product/text()", "/vendor[1]/product[1]/text()[1]"); [EOL] }
public void testNodeTypeText() { [EOL]     assertXPathValue(context, "//product/text()[. != '']", "We love this product."); [EOL]     assertXPathPointer(context, "//product/text()", "/vendor[1]/product[1]/text()[1]"); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testRemovePath() { [EOL]     context.removePath("vendor/location[@id = '101']//street/text()"); [EOL]     assertEquals("Remove DOM text", "", context.getValue("vendor/location[@id = '101']//street")); [EOL]     context.removePath("vendor/location[@id = '101']//street"); [EOL]     assertEquals("Remove DOM element", new Double(0), context.getValue("count(vendor/location[@id = '101']//street)")); [EOL]     context.removePath("vendor/location[@id = '100']/@name"); [EOL]     assertEquals("Remove DOM attribute", new Double(0), context.getValue("count(vendor/location[@id = '100']/@name)")); [EOL] }
public void testRemovePath() { [EOL]     context.removePath("vendor/location[@id = '101']//street/text()"); [EOL]     assertEquals("Remove DOM text", "", context.getValue("vendor/location[@id = '101']//street")); [EOL]     context.removePath("vendor/location[@id = '101']//street"); [EOL]     assertEquals("Remove DOM element", new Double(0), context.getValue("count(vendor/location[@id = '101']//street)")); [EOL]     context.removePath("vendor/location[@id = '100']/@name"); [EOL]     assertEquals("Remove DOM attribute", new Double(0), context.getValue("count(vendor/location[@id = '100']/@name)")); [EOL] }
public void testRemovePath() { [EOL]     context.removePath("vendor/location[@id = '101']//street/text()"); [EOL]     assertEquals("Remove DOM text", "", context.getValue("vendor/location[@id = '101']//street")); [EOL]     context.removePath("vendor/location[@id = '101']//street"); [EOL]     assertEquals("Remove DOM element", new Double(0), context.getValue("count(vendor/location[@id = '101']//street)")); [EOL]     context.removePath("vendor/location[@id = '100']/@name"); [EOL]     assertEquals("Remove DOM attribute", new Double(0), context.getValue("count(vendor/location[@id = '100']/@name)")); [EOL] }
public void testRemovePath() { [EOL]     context.removePath("vendor/location[@id = '101']//street/text()"); [EOL]     assertEquals("Remove DOM text", "", context.getValue("vendor/location[@id = '101']//street")); [EOL]     context.removePath("vendor/location[@id = '101']//street"); [EOL]     assertEquals("Remove DOM element", new Double(0), context.getValue("count(vendor/location[@id = '101']//street)")); [EOL]     context.removePath("vendor/location[@id = '100']/@name"); [EOL]     assertEquals("Remove DOM attribute", new Double(0), context.getValue("count(vendor/location[@id = '100']/@name)")); [EOL] }
public void testRemovePath() { [EOL]     context.removePath("vendor/location[@id = '101']//street/text()"); [EOL]     assertEquals("Remove DOM text", "", context.getValue("vendor/location[@id = '101']//street")); [EOL]     context.removePath("vendor/location[@id = '101']//street"); [EOL]     assertEquals("Remove DOM element", new Double(0), context.getValue("count(vendor/location[@id = '101']//street)")); [EOL]     context.removePath("vendor/location[@id = '100']/@name"); [EOL]     assertEquals("Remove DOM attribute", new Double(0), context.getValue("count(vendor/location[@id = '100']/@name)")); [EOL] }
public void testRemovePath() { [EOL]     context.removePath("vendor/location[@id = '101']//street/text()"); [EOL]     assertEquals("Remove DOM text", "", context.getValue("vendor/location[@id = '101']//street")); [EOL]     context.removePath("vendor/location[@id = '101']//street"); [EOL]     assertEquals("Remove DOM element", new Double(0), context.getValue("count(vendor/location[@id = '101']//street)")); [EOL]     context.removePath("vendor/location[@id = '100']/@name"); [EOL]     assertEquals("Remove DOM attribute", new Double(0), context.getValue("count(vendor/location[@id = '100']/@name)")); [EOL] }
public void testRemovePath() { [EOL]     context.removePath("vendor/location[@id = '101']//street/text()"); [EOL]     assertEquals("Remove DOM text", "", context.getValue("vendor/location[@id = '101']//street")); [EOL]     context.removePath("vendor/location[@id = '101']//street"); [EOL]     assertEquals("Remove DOM element", new Double(0), context.getValue("count(vendor/location[@id = '101']//street)")); [EOL]     context.removePath("vendor/location[@id = '100']/@name"); [EOL]     assertEquals("Remove DOM attribute", new Double(0), context.getValue("count(vendor/location[@id = '100']/@name)")); [EOL] }
public void testRemovePath() { [EOL]     context.removePath("vendor/location[@id = '101']//street/text()"); [EOL]     assertEquals("Remove DOM text", "", context.getValue("vendor/location[@id = '101']//street")); [EOL]     context.removePath("vendor/location[@id = '101']//street"); [EOL]     assertEquals("Remove DOM element", new Double(0), context.getValue("count(vendor/location[@id = '101']//street)")); [EOL]     context.removePath("vendor/location[@id = '100']/@name"); [EOL]     assertEquals("Remove DOM attribute", new Double(0), context.getValue("count(vendor/location[@id = '100']/@name)")); [EOL] }
public void testRemovePath() { [EOL]     context.removePath("vendor/location[@id = '101']//street/text()"); [EOL]     assertEquals("Remove DOM text", "", context.getValue("vendor/location[@id = '101']//street")); [EOL]     context.removePath("vendor/location[@id = '101']//street"); [EOL]     assertEquals("Remove DOM element", new Double(0), context.getValue("count(vendor/location[@id = '101']//street)")); [EOL]     context.removePath("vendor/location[@id = '100']/@name"); [EOL]     assertEquals("Remove DOM attribute", new Double(0), context.getValue("count(vendor/location[@id = '100']/@name)")); [EOL] }
public void testCreatePath() { [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]/address/street", "", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[2]/@manager", "", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[1]/@name", "local", "/vendor[1]/location[1]/@name"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "", "/vendor[1]/location[4]/@manager"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/price:foo/price:bar", "", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePath() { [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]/address/street", "", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[2]/@manager", "", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[1]/@name", "local", "/vendor[1]/location[1]/@name"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "", "/vendor[1]/location[4]/@manager"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/price:foo/price:bar", "", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePath() { [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]/address/street", "", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[2]/@manager", "", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[1]/@name", "local", "/vendor[1]/location[1]/@name"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "", "/vendor[1]/location[4]/@manager"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/price:foo/price:bar", "", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePath() { [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]/address/street", "", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[2]/@manager", "", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[1]/@name", "local", "/vendor[1]/location[1]/@name"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "", "/vendor[1]/location[4]/@manager"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/price:foo/price:bar", "", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePath() { [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]/address/street", "", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[2]/@manager", "", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[1]/@name", "local", "/vendor[1]/location[1]/@name"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "", "/vendor[1]/location[4]/@manager"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/price:foo/price:bar", "", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePath() { [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]/address/street", "", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[2]/@manager", "", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[1]/@name", "local", "/vendor[1]/location[1]/@name"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "", "/vendor[1]/location[4]/@manager"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/price:foo/price:bar", "", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testRemovePath() { [EOL]     context.removePath("vendor/location[@id = '101']//street/text()"); [EOL]     assertEquals("Remove DOM text", "", context.getValue("vendor/location[@id = '101']//street")); [EOL]     context.removePath("vendor/location[@id = '101']//street"); [EOL]     assertEquals("Remove DOM element", new Double(0), context.getValue("count(vendor/location[@id = '101']//street)")); [EOL]     context.removePath("vendor/location[@id = '100']/@name"); [EOL]     assertEquals("Remove DOM attribute", new Double(0), context.getValue("count(vendor/location[@id = '100']/@name)")); [EOL] }
public void testRemovePath() { [EOL]     context.removePath("vendor/location[@id = '101']//street/text()"); [EOL]     assertEquals("Remove DOM text", "", context.getValue("vendor/location[@id = '101']//street")); [EOL]     context.removePath("vendor/location[@id = '101']//street"); [EOL]     assertEquals("Remove DOM element", new Double(0), context.getValue("count(vendor/location[@id = '101']//street)")); [EOL]     context.removePath("vendor/location[@id = '100']/@name"); [EOL]     assertEquals("Remove DOM attribute", new Double(0), context.getValue("count(vendor/location[@id = '100']/@name)")); [EOL] }
public void testRemovePath() { [EOL]     context.removePath("vendor/location[@id = '101']//street/text()"); [EOL]     assertEquals("Remove DOM text", "", context.getValue("vendor/location[@id = '101']//street")); [EOL]     context.removePath("vendor/location[@id = '101']//street"); [EOL]     assertEquals("Remove DOM element", new Double(0), context.getValue("count(vendor/location[@id = '101']//street)")); [EOL]     context.removePath("vendor/location[@id = '100']/@name"); [EOL]     assertEquals("Remove DOM attribute", new Double(0), context.getValue("count(vendor/location[@id = '100']/@name)")); [EOL] }
public void testRemovePath() { [EOL]     context.removePath("vendor/location[@id = '101']//street/text()"); [EOL]     assertEquals("Remove DOM text", "", context.getValue("vendor/location[@id = '101']//street")); [EOL]     context.removePath("vendor/location[@id = '101']//street"); [EOL]     assertEquals("Remove DOM element", new Double(0), context.getValue("count(vendor/location[@id = '101']//street)")); [EOL]     context.removePath("vendor/location[@id = '100']/@name"); [EOL]     assertEquals("Remove DOM attribute", new Double(0), context.getValue("count(vendor/location[@id = '100']/@name)")); [EOL] }
public void testRemovePath() { [EOL]     context.removePath("vendor/location[@id = '101']//street/text()"); [EOL]     assertEquals("Remove DOM text", "", context.getValue("vendor/location[@id = '101']//street")); [EOL]     context.removePath("vendor/location[@id = '101']//street"); [EOL]     assertEquals("Remove DOM element", new Double(0), context.getValue("count(vendor/location[@id = '101']//street)")); [EOL]     context.removePath("vendor/location[@id = '100']/@name"); [EOL]     assertEquals("Remove DOM attribute", new Double(0), context.getValue("count(vendor/location[@id = '100']/@name)")); [EOL] }
public void testRemovePath() { [EOL]     context.removePath("vendor/location[@id = '101']//street/text()"); [EOL]     assertEquals("Remove DOM text", "", context.getValue("vendor/location[@id = '101']//street")); [EOL]     context.removePath("vendor/location[@id = '101']//street"); [EOL]     assertEquals("Remove DOM element", new Double(0), context.getValue("count(vendor/location[@id = '101']//street)")); [EOL]     context.removePath("vendor/location[@id = '100']/@name"); [EOL]     assertEquals("Remove DOM attribute", new Double(0), context.getValue("count(vendor/location[@id = '100']/@name)")); [EOL] }
public void testRemovePath() { [EOL]     context.removePath("vendor/location[@id = '101']//street/text()"); [EOL]     assertEquals("Remove DOM text", "", context.getValue("vendor/location[@id = '101']//street")); [EOL]     context.removePath("vendor/location[@id = '101']//street"); [EOL]     assertEquals("Remove DOM element", new Double(0), context.getValue("count(vendor/location[@id = '101']//street)")); [EOL]     context.removePath("vendor/location[@id = '100']/@name"); [EOL]     assertEquals("Remove DOM attribute", new Double(0), context.getValue("count(vendor/location[@id = '100']/@name)")); [EOL] }
public void testCreatePath() { [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]/address/street", "", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[2]/@manager", "", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[1]/@name", "local", "/vendor[1]/location[1]/@name"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "", "/vendor[1]/location[4]/@manager"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/price:foo/price:bar", "", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePath() { [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]/address/street", "", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[2]/@manager", "", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[1]/@name", "local", "/vendor[1]/location[1]/@name"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "", "/vendor[1]/location[4]/@manager"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/price:foo/price:bar", "", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePath() { [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]/address/street", "", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[2]/@manager", "", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[1]/@name", "local", "/vendor[1]/location[1]/@name"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "", "/vendor[1]/location[4]/@manager"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/price:foo/price:bar", "", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePath() { [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]/address/street", "", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[2]/@manager", "", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[1]/@name", "local", "/vendor[1]/location[1]/@name"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "", "/vendor[1]/location[4]/@manager"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/price:foo/price:bar", "", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePath() { [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]/address/street", "", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[2]/@manager", "", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[1]/@name", "local", "/vendor[1]/location[1]/@name"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "", "/vendor[1]/location[4]/@manager"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/price:foo/price:bar", "", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePath() { [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]/address/street", "", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[2]/@manager", "", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[1]/@name", "local", "/vendor[1]/location[1]/@name"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "", "/vendor[1]/location[4]/@manager"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/price:foo/price:bar", "", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePath() { [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]/address/street", "", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[2]/@manager", "", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[1]/@name", "local", "/vendor[1]/location[1]/@name"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "", "/vendor[1]/location[4]/@manager"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/price:foo/price:bar", "", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testRemovePath() { [EOL]     context.removePath("vendor/location[@id = '101']//street/text()"); [EOL]     assertEquals("Remove DOM text", "", context.getValue("vendor/location[@id = '101']//street")); [EOL]     context.removePath("vendor/location[@id = '101']//street"); [EOL]     assertEquals("Remove DOM element", new Double(0), context.getValue("count(vendor/location[@id = '101']//street)")); [EOL]     context.removePath("vendor/location[@id = '100']/@name"); [EOL]     assertEquals("Remove DOM attribute", new Double(0), context.getValue("count(vendor/location[@id = '100']/@name)")); [EOL] }
public void testRemovePath() { [EOL]     context.removePath("vendor/location[@id = '101']//street/text()"); [EOL]     assertEquals("Remove DOM text", "", context.getValue("vendor/location[@id = '101']//street")); [EOL]     context.removePath("vendor/location[@id = '101']//street"); [EOL]     assertEquals("Remove DOM element", new Double(0), context.getValue("count(vendor/location[@id = '101']//street)")); [EOL]     context.removePath("vendor/location[@id = '100']/@name"); [EOL]     assertEquals("Remove DOM attribute", new Double(0), context.getValue("count(vendor/location[@id = '100']/@name)")); [EOL] }
public void testCreatePath() { [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]/address/street", "", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[2]/@manager", "", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[1]/@name", "local", "/vendor[1]/location[1]/@name"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "", "/vendor[1]/location[4]/@manager"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/price:foo/price:bar", "", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePath() { [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]/address/street", "", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[2]/@manager", "", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[1]/@name", "local", "/vendor[1]/location[1]/@name"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "", "/vendor[1]/location[4]/@manager"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/price:foo/price:bar", "", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePath() { [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]/address/street", "", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[2]/@manager", "", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[1]/@name", "local", "/vendor[1]/location[1]/@name"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "", "/vendor[1]/location[4]/@manager"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/price:foo/price:bar", "", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePath() { [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]/address/street", "", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[2]/@manager", "", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[1]/@name", "local", "/vendor[1]/location[1]/@name"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "", "/vendor[1]/location[4]/@manager"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/price:foo/price:bar", "", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePath() { [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]/address/street", "", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[2]/@manager", "", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[1]/@name", "local", "/vendor[1]/location[1]/@name"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "", "/vendor[1]/location[4]/@manager"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/price:foo/price:bar", "", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePath() { [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]/address/street", "", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[2]/@manager", "", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[1]/@name", "local", "/vendor[1]/location[1]/@name"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "", "/vendor[1]/location[4]/@manager"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/price:foo/price:bar", "", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testNodeTypeText() { [EOL]     assertXPathValue(context, "//product/text()[. != '']", "We love this product."); [EOL]     assertXPathPointer(context, "//product/text()", "/vendor[1]/product[1]/text()[1]"); [EOL] }
public void testNodeTypeText() { [EOL]     assertXPathValue(context, "//product/text()[. != '']", "We love this product."); [EOL]     assertXPathPointer(context, "//product/text()", "/vendor[1]/product[1]/text()[1]"); [EOL] }
public void testNodeTypeText() { [EOL]     assertXPathValue(context, "//product/text()[. != '']", "We love this product."); [EOL]     assertXPathPointer(context, "//product/text()", "/vendor[1]/product[1]/text()[1]"); [EOL] }
public void testNodeTypeText() { [EOL]     assertXPathValue(context, "//product/text()[. != '']", "We love this product."); [EOL]     assertXPathPointer(context, "//product/text()", "/vendor[1]/product[1]/text()[1]"); [EOL] }
public void testCreatePath() { [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]/address/street", "", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[2]/@manager", "", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[1]/@name", "local", "/vendor[1]/location[1]/@name"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "", "/vendor[1]/location[4]/@manager"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/price:foo/price:bar", "", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePath() { [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]/address/street", "", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[2]/@manager", "", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[1]/@name", "local", "/vendor[1]/location[1]/@name"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "", "/vendor[1]/location[4]/@manager"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/price:foo/price:bar", "", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testBeanPrimitive() { [EOL]     assertXPathValueAndPointer(context, "string", "string", "/string"); [EOL] }
public void testBeanPrimitive() { [EOL]     assertXPathValueAndPointer(context, "string", "string", "/string"); [EOL] }
public void testBeanPrimitive() { [EOL]     assertXPathValueAndPointer(context, "string", "string", "/string"); [EOL] }
public void testBeanPrimitive() { [EOL]     assertXPathValueAndPointer(context, "string", "string", "/string"); [EOL] }
public void testBeanPrimitive() { [EOL]     assertXPathValueAndPointer(context, "string", "string", "/string"); [EOL] }
public void testBeanPrimitive() { [EOL]     assertXPathValueAndPointer(context, "string", "string", "/string"); [EOL] }
public void testBeanPrimitive() { [EOL]     assertXPathValueAndPointer(context, "string", "string", "/string"); [EOL] }
public void testBeanPrimitive() { [EOL]     assertXPathValueAndPointer(context, "string", "string", "/string"); [EOL] }
public void testBeanPrimitive() { [EOL]     assertXPathValueAndPointer(context, "string", "string", "/string"); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testLocationPathAxisOther() { [EOL]     assertXPathExpression("ancestor::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("ancestor-or-self::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("namespace::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("preceding::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("preceding-sibling::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("following::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("following-sibling::foo:bar", LocationPath.class); [EOL] }
public void testLocationPathAxisOther() { [EOL]     assertXPathExpression("ancestor::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("ancestor-or-self::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("namespace::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("preceding::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("preceding-sibling::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("following::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("following-sibling::foo:bar", LocationPath.class); [EOL] }
public void testLocationPathAxisOther() { [EOL]     assertXPathExpression("ancestor::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("ancestor-or-self::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("namespace::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("preceding::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("preceding-sibling::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("following::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("following-sibling::foo:bar", LocationPath.class); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testBeanPrimitive() { [EOL]     assertXPathValueAndPointer(context, "string", "string", "/string"); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testCreatePathAndSetValueCollectionElement() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map/TestKey3[2]", "Test1", "/map[@name='TestKey3'][2]"); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey3'][3]", "Test2", "/map[@name='TestKey3'][3]"); [EOL] }
public void testCreatePathAndSetValueCollectionElement() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map/TestKey3[2]", "Test1", "/map[@name='TestKey3'][2]"); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey3'][3]", "Test2", "/map[@name='TestKey3'][3]"); [EOL] }
public void testCreatePathAndSetValueCollectionElement() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map/TestKey3[2]", "Test1", "/map[@name='TestKey3'][2]"); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey3'][3]", "Test2", "/map[@name='TestKey3'][3]"); [EOL] }
public void testCreatePathAndSetValueCollectionElement() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map/TestKey3[2]", "Test1", "/map[@name='TestKey3'][2]"); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey3'][3]", "Test2", "/map[@name='TestKey3'][3]"); [EOL] }
public void testCreatePathAndSetValueCollectionElement() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map/TestKey3[2]", "Test1", "/map[@name='TestKey3'][2]"); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey3'][3]", "Test2", "/map[@name='TestKey3'][3]"); [EOL] }
public void testCreatePathAndSetValueCollectionElement() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map/TestKey3[2]", "Test1", "/map[@name='TestKey3'][2]"); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey3'][3]", "Test2", "/map[@name='TestKey3'][3]"); [EOL] }
public void testRelativeContextAbsolutePath() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "/integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testRelativeContextAbsolutePath() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "/integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testRelativeContextAbsolutePath() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "/integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testRelativeContextAbsolutePath() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "/integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testRelativeContextAbsolutePath() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "/integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testBeanPrimitive() { [EOL]     assertXPathValueAndPointer(context, "string", "string", "/string"); [EOL] }
public void testBeanPrimitive() { [EOL]     assertXPathValueAndPointer(context, "string", "string", "/string"); [EOL] }
public void testBeanPrimitive() { [EOL]     assertXPathValueAndPointer(context, "string", "string", "/string"); [EOL] }
public void testCreatePathAndSetValueCollectionElement() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map/TestKey3[2]", "Test1", "/map[@name='TestKey3'][2]"); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey3'][3]", "Test2", "/map[@name='TestKey3'][3]"); [EOL] }
public void testCreatePathAndSetValueCollectionElement() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map/TestKey3[2]", "Test1", "/map[@name='TestKey3'][2]"); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey3'][3]", "Test2", "/map[@name='TestKey3'][3]"); [EOL] }
public void testCreatePathAndSetValueCollectionElement() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map/TestKey3[2]", "Test1", "/map[@name='TestKey3'][2]"); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey3'][3]", "Test2", "/map[@name='TestKey3'][3]"); [EOL] }
public void testRemovePath() { [EOL]     context.removePath("vendor/location[@id = '101']//street/text()"); [EOL]     assertEquals("Remove DOM text", "", context.getValue("vendor/location[@id = '101']//street")); [EOL]     context.removePath("vendor/location[@id = '101']//street"); [EOL]     assertEquals("Remove DOM element", new Double(0), context.getValue("count(vendor/location[@id = '101']//street)")); [EOL]     context.removePath("vendor/location[@id = '100']/@name"); [EOL]     assertEquals("Remove DOM attribute", new Double(0), context.getValue("count(vendor/location[@id = '100']/@name)")); [EOL] }
public void testRemovePath() { [EOL]     context.removePath("vendor/location[@id = '101']//street/text()"); [EOL]     assertEquals("Remove DOM text", "", context.getValue("vendor/location[@id = '101']//street")); [EOL]     context.removePath("vendor/location[@id = '101']//street"); [EOL]     assertEquals("Remove DOM element", new Double(0), context.getValue("count(vendor/location[@id = '101']//street)")); [EOL]     context.removePath("vendor/location[@id = '100']/@name"); [EOL]     assertEquals("Remove DOM attribute", new Double(0), context.getValue("count(vendor/location[@id = '100']/@name)")); [EOL] }
public void testRemovePath() { [EOL]     context.removePath("vendor/location[@id = '101']//street/text()"); [EOL]     assertEquals("Remove DOM text", "", context.getValue("vendor/location[@id = '101']//street")); [EOL]     context.removePath("vendor/location[@id = '101']//street"); [EOL]     assertEquals("Remove DOM element", new Double(0), context.getValue("count(vendor/location[@id = '101']//street)")); [EOL]     context.removePath("vendor/location[@id = '100']/@name"); [EOL]     assertEquals("Remove DOM attribute", new Double(0), context.getValue("count(vendor/location[@id = '100']/@name)")); [EOL] }
public void testAxisFollowing() { [EOL]     assertXPathValue(context, "count(nestedBean/strings[2]/following::node())", new Double(21)); [EOL]     assertXPathValue(context, "count(nestedBean/strings[2]/following::strings)", new Double(7)); [EOL] }
public void testAxisFollowing() { [EOL]     assertXPathValue(context, "count(nestedBean/strings[2]/following::node())", new Double(21)); [EOL]     assertXPathValue(context, "count(nestedBean/strings[2]/following::strings)", new Double(7)); [EOL] }
public void testAxisFollowing() { [EOL]     assertXPathValue(context, "count(nestedBean/strings[2]/following::node())", new Double(21)); [EOL]     assertXPathValue(context, "count(nestedBean/strings[2]/following::strings)", new Double(7)); [EOL] }
public void testBeanPrimitive() { [EOL]     assertXPathValueAndPointer(context, "string", "string", "/string"); [EOL] }
public void testBeanPrimitive() { [EOL]     assertXPathValueAndPointer(context, "string", "string", "/string"); [EOL] }
public void testBeanPrimitive() { [EOL]     assertXPathValueAndPointer(context, "string", "string", "/string"); [EOL] }
public void testBeanPrimitive() { [EOL]     assertXPathValueAndPointer(context, "string", "string", "/string"); [EOL] }
public void testAxisFollowing() { [EOL]     assertXPathValue(context, "count(nestedBean/strings[2]/following::node())", new Double(21)); [EOL]     assertXPathValue(context, "count(nestedBean/strings[2]/following::strings)", new Double(7)); [EOL] }
public void testAxisFollowing() { [EOL]     assertXPathValue(context, "count(nestedBean/strings[2]/following::node())", new Double(21)); [EOL]     assertXPathValue(context, "count(nestedBean/strings[2]/following::strings)", new Double(7)); [EOL] }
public void testAxisFollowing() { [EOL]     assertXPathValue(context, "count(nestedBean/strings[2]/following::node())", new Double(21)); [EOL]     assertXPathValue(context, "count(nestedBean/strings[2]/following::strings)", new Double(7)); [EOL] }
public void testCoreOperationGreaterThan() { [EOL]     assertXPathExpression("3>4", CoreOperationGreaterThan.class, "3 > 4"); [EOL]     assertXPathExpression("3>(2>=1)", CoreOperationGreaterThan.class, "3 > (2 >= 1)"); [EOL]     assertXPathExpression("1 > (1 and 2 <= (2 or 3) = 4)", CoreOperationGreaterThan.class); [EOL] }
public void testCoreOperationGreaterThan() { [EOL]     assertXPathExpression("3>4", CoreOperationGreaterThan.class, "3 > 4"); [EOL]     assertXPathExpression("3>(2>=1)", CoreOperationGreaterThan.class, "3 > (2 >= 1)"); [EOL]     assertXPathExpression("1 > (1 and 2 <= (2 or 3) = 4)", CoreOperationGreaterThan.class); [EOL] }
public void testCoreOperationGreaterThan() { [EOL]     assertXPathExpression("3>4", CoreOperationGreaterThan.class, "3 > 4"); [EOL]     assertXPathExpression("3>(2>=1)", CoreOperationGreaterThan.class, "3 > (2 >= 1)"); [EOL]     assertXPathExpression("1 > (1 and 2 <= (2 or 3) = 4)", CoreOperationGreaterThan.class); [EOL] }
public void testCoreOperationGreaterThan() { [EOL]     assertXPathExpression("3>4", CoreOperationGreaterThan.class, "3 > 4"); [EOL]     assertXPathExpression("3>(2>=1)", CoreOperationGreaterThan.class, "3 > (2 >= 1)"); [EOL]     assertXPathExpression("1 > (1 and 2 <= (2 or 3) = 4)", CoreOperationGreaterThan.class); [EOL] }
public void testCoreOperationGreaterThan() { [EOL]     assertXPathExpression("3>4", CoreOperationGreaterThan.class, "3 > 4"); [EOL]     assertXPathExpression("3>(2>=1)", CoreOperationGreaterThan.class, "3 > (2 >= 1)"); [EOL]     assertXPathExpression("1 > (1 and 2 <= (2 or 3) = 4)", CoreOperationGreaterThan.class); [EOL] }
public void testCreatePathAndSetValueCollectionElement() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map/TestKey3[2]", "Test1", "/map[@name='TestKey3'][2]"); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey3'][3]", "Test2", "/map[@name='TestKey3'][3]"); [EOL] }
public void testCreatePathAndSetValueCollectionElement() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map/TestKey3[2]", "Test1", "/map[@name='TestKey3'][2]"); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey3'][3]", "Test2", "/map[@name='TestKey3'][3]"); [EOL] }
public void testCreatePathAndSetValueCollectionElement() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map/TestKey3[2]", "Test1", "/map[@name='TestKey3'][2]"); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey3'][3]", "Test2", "/map[@name='TestKey3'][3]"); [EOL] }
public void testCreatePathAndSetValueCollectionElement() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map/TestKey3[2]", "Test1", "/map[@name='TestKey3'][2]"); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey3'][3]", "Test2", "/map[@name='TestKey3'][3]"); [EOL] }
public void testCreatePathAndSetValueCollectionElement() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map/TestKey3[2]", "Test1", "/map[@name='TestKey3'][2]"); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey3'][3]", "Test2", "/map[@name='TestKey3'][3]"); [EOL] }
public void testCreatePathAndSetValueCollectionElement() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map/TestKey3[2]", "Test1", "/map[@name='TestKey3'][2]"); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey3'][3]", "Test2", "/map[@name='TestKey3'][3]"); [EOL] }
public void testCreatePathAndSetValueCollectionElement() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map/TestKey3[2]", "Test1", "/map[@name='TestKey3'][2]"); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey3'][3]", "Test2", "/map[@name='TestKey3'][3]"); [EOL] }
public void testCreatePathAndSetValueCollectionElement() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map/TestKey3[2]", "Test1", "/map[@name='TestKey3'][2]"); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey3'][3]", "Test2", "/map[@name='TestKey3'][3]"); [EOL] }
public void testRelativeContextAbsolutePath() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "/integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testCreatePathAndSetValueCollectionElement() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map/TestKey3[2]", "Test1", "/map[@name='TestKey3'][2]"); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey3'][3]", "Test2", "/map[@name='TestKey3'][3]"); [EOL] }
public void testCreatePathAndSetValueCollectionElement() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map/TestKey3[2]", "Test1", "/map[@name='TestKey3'][2]"); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey3'][3]", "Test2", "/map[@name='TestKey3'][3]"); [EOL] }
public void testCreatePathAndSetValueCollectionElement() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map/TestKey3[2]", "Test1", "/map[@name='TestKey3'][2]"); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey3'][3]", "Test2", "/map[@name='TestKey3'][3]"); [EOL] }
public void testCreatePathAndSetValueCollectionElement() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map/TestKey3[2]", "Test1", "/map[@name='TestKey3'][2]"); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey3'][3]", "Test2", "/map[@name='TestKey3'][3]"); [EOL] }
public void testCoreOperationGreaterThan() { [EOL]     assertXPathExpression("3>4", CoreOperationGreaterThan.class, "3 > 4"); [EOL]     assertXPathExpression("3>(2>=1)", CoreOperationGreaterThan.class, "3 > (2 >= 1)"); [EOL]     assertXPathExpression("1 > (1 and 2 <= (2 or 3) = 4)", CoreOperationGreaterThan.class); [EOL] }
public void testCoreOperationGreaterThan() { [EOL]     assertXPathExpression("3>4", CoreOperationGreaterThan.class, "3 > 4"); [EOL]     assertXPathExpression("3>(2>=1)", CoreOperationGreaterThan.class, "3 > (2 >= 1)"); [EOL]     assertXPathExpression("1 > (1 and 2 <= (2 or 3) = 4)", CoreOperationGreaterThan.class); [EOL] }
public void testCoreOperationGreaterThan() { [EOL]     assertXPathExpression("3>4", CoreOperationGreaterThan.class, "3 > 4"); [EOL]     assertXPathExpression("3>(2>=1)", CoreOperationGreaterThan.class, "3 > (2 >= 1)"); [EOL]     assertXPathExpression("1 > (1 and 2 <= (2 or 3) = 4)", CoreOperationGreaterThan.class); [EOL] }
public void testCoreOperationGreaterThan() { [EOL]     assertXPathExpression("3>4", CoreOperationGreaterThan.class, "3 > 4"); [EOL]     assertXPathExpression("3>(2>=1)", CoreOperationGreaterThan.class, "3 > (2 >= 1)"); [EOL]     assertXPathExpression("1 > (1 and 2 <= (2 or 3) = 4)", CoreOperationGreaterThan.class); [EOL] }
public void testRelativeContextAbsolutePath() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "/integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testRelativeContextAbsolutePath() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "/integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testRelativeContextAbsolutePath() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "/integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testRelativeContextAbsolutePath() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "/integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testRelativeContextAbsolutePath() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "/integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testCoreOperationGreaterThan() { [EOL]     assertXPathExpression("3>4", CoreOperationGreaterThan.class, "3 > 4"); [EOL]     assertXPathExpression("3>(2>=1)", CoreOperationGreaterThan.class, "3 > (2 >= 1)"); [EOL]     assertXPathExpression("1 > (1 and 2 <= (2 or 3) = 4)", CoreOperationGreaterThan.class); [EOL] }
public void testCoreOperationGreaterThan() { [EOL]     assertXPathExpression("3>4", CoreOperationGreaterThan.class, "3 > 4"); [EOL]     assertXPathExpression("3>(2>=1)", CoreOperationGreaterThan.class, "3 > (2 >= 1)"); [EOL]     assertXPathExpression("1 > (1 and 2 <= (2 or 3) = 4)", CoreOperationGreaterThan.class); [EOL] }
public void testCoreOperationGreaterThan() { [EOL]     assertXPathExpression("3>4", CoreOperationGreaterThan.class, "3 > 4"); [EOL]     assertXPathExpression("3>(2>=1)", CoreOperationGreaterThan.class, "3 > (2 >= 1)"); [EOL]     assertXPathExpression("1 > (1 and 2 <= (2 or 3) = 4)", CoreOperationGreaterThan.class); [EOL] }
public void testCoreOperationGreaterThan() { [EOL]     assertXPathExpression("3>4", CoreOperationGreaterThan.class, "3 > 4"); [EOL]     assertXPathExpression("3>(2>=1)", CoreOperationGreaterThan.class, "3 > (2 >= 1)"); [EOL]     assertXPathExpression("1 > (1 and 2 <= (2 or 3) = 4)", CoreOperationGreaterThan.class); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCoreOperationGreaterThan() { [EOL]     assertXPathExpression("3>4", CoreOperationGreaterThan.class, "3 > 4"); [EOL]     assertXPathExpression("3>(2>=1)", CoreOperationGreaterThan.class, "3 > (2 >= 1)"); [EOL]     assertXPathExpression("1 > (1 and 2 <= (2 or 3) = 4)", CoreOperationGreaterThan.class); [EOL] }
public void testCoreOperationGreaterThan() { [EOL]     assertXPathExpression("3>4", CoreOperationGreaterThan.class, "3 > 4"); [EOL]     assertXPathExpression("3>(2>=1)", CoreOperationGreaterThan.class, "3 > (2 >= 1)"); [EOL]     assertXPathExpression("1 > (1 and 2 <= (2 or 3) = 4)", CoreOperationGreaterThan.class); [EOL] }
public void testCoreOperationGreaterThan() { [EOL]     assertXPathExpression("3>4", CoreOperationGreaterThan.class, "3 > 4"); [EOL]     assertXPathExpression("3>(2>=1)", CoreOperationGreaterThan.class, "3 > (2 >= 1)"); [EOL]     assertXPathExpression("1 > (1 and 2 <= (2 or 3) = 4)", CoreOperationGreaterThan.class); [EOL] }
public void testCoreOperationGreaterThan() { [EOL]     assertXPathExpression("3>4", CoreOperationGreaterThan.class, "3 > 4"); [EOL]     assertXPathExpression("3>(2>=1)", CoreOperationGreaterThan.class, "3 > (2 >= 1)"); [EOL]     assertXPathExpression("1 > (1 and 2 <= (2 or 3) = 4)", CoreOperationGreaterThan.class); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCoreOperationGreaterThan() { [EOL]     assertXPathExpression("3>4", CoreOperationGreaterThan.class, "3 > 4"); [EOL]     assertXPathExpression("3>(2>=1)", CoreOperationGreaterThan.class, "3 > (2 >= 1)"); [EOL]     assertXPathExpression("1 > (1 and 2 <= (2 or 3) = 4)", CoreOperationGreaterThan.class); [EOL] }
public void testCoreOperationGreaterThan() { [EOL]     assertXPathExpression("3>4", CoreOperationGreaterThan.class, "3 > 4"); [EOL]     assertXPathExpression("3>(2>=1)", CoreOperationGreaterThan.class, "3 > (2 >= 1)"); [EOL]     assertXPathExpression("1 > (1 and 2 <= (2 or 3) = 4)", CoreOperationGreaterThan.class); [EOL] }
public void testCoreOperationGreaterThan() { [EOL]     assertXPathExpression("3>4", CoreOperationGreaterThan.class, "3 > 4"); [EOL]     assertXPathExpression("3>(2>=1)", CoreOperationGreaterThan.class, "3 > (2 >= 1)"); [EOL]     assertXPathExpression("1 > (1 and 2 <= (2 or 3) = 4)", CoreOperationGreaterThan.class); [EOL] }
public void testCoreOperationGreaterThan() { [EOL]     assertXPathExpression("3>4", CoreOperationGreaterThan.class, "3 > 4"); [EOL]     assertXPathExpression("3>(2>=1)", CoreOperationGreaterThan.class, "3 > (2 >= 1)"); [EOL]     assertXPathExpression("1 > (1 and 2 <= (2 or 3) = 4)", CoreOperationGreaterThan.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testBeanPrimitive() { [EOL]     assertXPathValueAndPointer(context, "string", "string", "/string"); [EOL] }
public void testBeanPrimitive() { [EOL]     assertXPathValueAndPointer(context, "string", "string", "/string"); [EOL] }
public void testBeanPrimitive() { [EOL]     assertXPathValueAndPointer(context, "string", "string", "/string"); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCreatePathAndSetValueCollectionElement() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map/TestKey3[2]", "Test1", "/map[@name='TestKey3'][2]"); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey3'][3]", "Test2", "/map[@name='TestKey3'][3]"); [EOL] }
public void testCreatePathAndSetValueCollectionElement() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map/TestKey3[2]", "Test1", "/map[@name='TestKey3'][2]"); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey3'][3]", "Test2", "/map[@name='TestKey3'][3]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testInterpretExpressionPath() { [EOL]     context.getVariables().declareVariable("array", new String[] { "Value1" }); [EOL]     context.getVariables().declareVariable("testnull", new TestNull()); [EOL]     assertNullPointer("$testnull/nothing[2]", "$testnull/nothing[2]", "VBbE"); [EOL] }
public void testInterpretExpressionPath() { [EOL]     context.getVariables().declareVariable("array", new String[] { "Value1" }); [EOL]     context.getVariables().declareVariable("testnull", new TestNull()); [EOL]     assertNullPointer("$testnull/nothing[2]", "$testnull/nothing[2]", "VBbE"); [EOL] }
public void testInterpretExpressionPath() { [EOL]     context.getVariables().declareVariable("array", new String[] { "Value1" }); [EOL]     context.getVariables().declareVariable("testnull", new TestNull()); [EOL]     assertNullPointer("$testnull/nothing[2]", "$testnull/nothing[2]", "VBbE"); [EOL] }
public void testAttributeLang() { [EOL]     assertXPathValue(context, "@xml:lang", "en-US"); [EOL]     assertXPathValue(context, "count(@xml:*)", new Double(1)); [EOL]     assertXPathValue(context, "lang('en')", Boolean.TRUE); [EOL]     assertXPathValue(context, "lang('fr')", Boolean.FALSE); [EOL] }
public void testAttributeLang() { [EOL]     assertXPathValue(context, "@xml:lang", "en-US"); [EOL]     assertXPathValue(context, "count(@xml:*)", new Double(1)); [EOL]     assertXPathValue(context, "lang('en')", Boolean.TRUE); [EOL]     assertXPathValue(context, "lang('fr')", Boolean.FALSE); [EOL] }
public void testAttributeLang() { [EOL]     assertXPathValue(context, "@xml:lang", "en-US"); [EOL]     assertXPathValue(context, "count(@xml:*)", new Double(1)); [EOL]     assertXPathValue(context, "lang('en')", Boolean.TRUE); [EOL]     assertXPathValue(context, "lang('fr')", Boolean.FALSE); [EOL] }
public void testAttributeLang() { [EOL]     assertXPathValue(context, "@xml:lang", "en-US"); [EOL]     assertXPathValue(context, "count(@xml:*)", new Double(1)); [EOL]     assertXPathValue(context, "lang('en')", Boolean.TRUE); [EOL]     assertXPathValue(context, "lang('fr')", Boolean.FALSE); [EOL] }
public void testInterpretExpressionPath() { [EOL]     context.getVariables().declareVariable("array", new String[] { "Value1" }); [EOL]     context.getVariables().declareVariable("testnull", new TestNull()); [EOL]     assertNullPointer("$testnull/nothing[2]", "$testnull/nothing[2]", "VBbE"); [EOL] }
public void testInterpretExpressionPath() { [EOL]     context.getVariables().declareVariable("array", new String[] { "Value1" }); [EOL]     context.getVariables().declareVariable("testnull", new TestNull()); [EOL]     assertNullPointer("$testnull/nothing[2]", "$testnull/nothing[2]", "VBbE"); [EOL] }
public void testInterpretExpressionPath() { [EOL]     context.getVariables().declareVariable("array", new String[] { "Value1" }); [EOL]     context.getVariables().declareVariable("testnull", new TestNull()); [EOL]     assertNullPointer("$testnull/nothing[2]", "$testnull/nothing[2]", "VBbE"); [EOL] }
public void testInterpretExpressionPath() { [EOL]     context.getVariables().declareVariable("array", new String[] { "Value1" }); [EOL]     context.getVariables().declareVariable("testnull", new TestNull()); [EOL]     assertNullPointer("$testnull/nothing[2]", "$testnull/nothing[2]", "VBbE"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testCreatePath() { [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]/address/street", "", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[2]/@manager", "", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[1]/@name", "local", "/vendor[1]/location[1]/@name"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "", "/vendor[1]/location[4]/@manager"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/price:foo/price:bar", "", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePath() { [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]/address/street", "", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[2]/@manager", "", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[1]/@name", "local", "/vendor[1]/location[1]/@name"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "", "/vendor[1]/location[4]/@manager"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/price:foo/price:bar", "", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePath() { [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]/address/street", "", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[2]/@manager", "", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[1]/@name", "local", "/vendor[1]/location[1]/@name"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "", "/vendor[1]/location[4]/@manager"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/price:foo/price:bar", "", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePath() { [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]/address/street", "", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[2]/@manager", "", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[1]/@name", "local", "/vendor[1]/location[1]/@name"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "", "/vendor[1]/location[4]/@manager"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/price:foo/price:bar", "", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePath() { [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]/address/street", "", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[2]/@manager", "", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[1]/@name", "local", "/vendor[1]/location[1]/@name"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "", "/vendor[1]/location[4]/@manager"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/price:foo/price:bar", "", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePath() { [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]/address/street", "", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[2]/@manager", "", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[1]/@name", "local", "/vendor[1]/location[1]/@name"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "", "/vendor[1]/location[4]/@manager"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/price:foo/price:bar", "", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "Tangerine Drive"); [EOL]     assertXPathPointer(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "/vendor[1]/location[2]/address[1]/street[1]"); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "Tangerine Drive"); [EOL]     assertXPathPointer(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "/vendor[1]/location[2]/address[1]/street[1]"); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "Tangerine Drive"); [EOL]     assertXPathPointer(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "/vendor[1]/location[2]/address[1]/street[1]"); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "Tangerine Drive"); [EOL]     assertXPathPointer(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "/vendor[1]/location[2]/address[1]/street[1]"); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "Tangerine Drive"); [EOL]     assertXPathPointer(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "/vendor[1]/location[2]/address[1]/street[1]"); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "Tangerine Drive"); [EOL]     assertXPathPointer(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "/vendor[1]/location[2]/address[1]/street[1]"); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "Tangerine Drive"); [EOL]     assertXPathPointer(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "/vendor[1]/location[2]/address[1]/street[1]"); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "Tangerine Drive"); [EOL]     assertXPathPointer(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "/vendor[1]/location[2]/address[1]/street[1]"); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "Tangerine Drive"); [EOL]     assertXPathPointer(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "/vendor[1]/location[2]/address[1]/street[1]"); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "Tangerine Drive"); [EOL]     assertXPathPointer(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "/vendor[1]/location[2]/address[1]/street[1]"); [EOL] }
public void testRelativeContextAbsolutePath() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "/integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCollectionElement() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map/TestKey3[2]", "Test1", "/map[@name='TestKey3'][2]"); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey3'][3]", "Test2", "/map[@name='TestKey3'][3]"); [EOL] }
public void testCreatePathAndSetValueCollectionElement() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map/TestKey3[2]", "Test1", "/map[@name='TestKey3'][2]"); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey3'][3]", "Test2", "/map[@name='TestKey3'][3]"); [EOL] }
public void testCreatePathAndSetValueCollectionElement() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map/TestKey3[2]", "Test1", "/map[@name='TestKey3'][2]"); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey3'][3]", "Test2", "/map[@name='TestKey3'][3]"); [EOL] }
public void testCreatePathAndSetValueCollectionElement() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map/TestKey3[2]", "Test1", "/map[@name='TestKey3'][2]"); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey3'][3]", "Test2", "/map[@name='TestKey3'][3]"); [EOL] }
public void testCreatePathAndSetValueCollectionElement() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map/TestKey3[2]", "Test1", "/map[@name='TestKey3'][2]"); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey3'][3]", "Test2", "/map[@name='TestKey3'][3]"); [EOL] }
public void testCreatePathAndSetValueCollectionElement() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map/TestKey3[2]", "Test1", "/map[@name='TestKey3'][2]"); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey3'][3]", "Test2", "/map[@name='TestKey3'][3]"); [EOL] }
public void testCreatePathAndSetValueCollectionElement() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map/TestKey3[2]", "Test1", "/map[@name='TestKey3'][2]"); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey3'][3]", "Test2", "/map[@name='TestKey3'][3]"); [EOL] }
public void testRemovePath() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.getMap().put("TestKey1", "test"); [EOL]     context.removePath("map[@name = 'TestKey1']"); [EOL]     assertEquals("Remove dynamic property value", null, context.getValue("map[@name = 'TestKey1']")); [EOL] }
public void testRemovePath() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.getMap().put("TestKey1", "test"); [EOL]     context.removePath("map[@name = 'TestKey1']"); [EOL]     assertEquals("Remove dynamic property value", null, context.getValue("map[@name = 'TestKey1']")); [EOL] }
public void testRemovePath() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.getMap().put("TestKey1", "test"); [EOL]     context.removePath("map[@name = 'TestKey1']"); [EOL]     assertEquals("Remove dynamic property value", null, context.getValue("map[@name = 'TestKey1']")); [EOL] }
public void testRemovePath() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.getMap().put("TestKey1", "test"); [EOL]     context.removePath("map[@name = 'TestKey1']"); [EOL]     assertEquals("Remove dynamic property value", null, context.getValue("map[@name = 'TestKey1']")); [EOL] }
public void testRemovePath() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.getMap().put("TestKey1", "test"); [EOL]     context.removePath("map[@name = 'TestKey1']"); [EOL]     assertEquals("Remove dynamic property value", null, context.getValue("map[@name = 'TestKey1']")); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "Tangerine Drive"); [EOL]     assertXPathPointer(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "/vendor[1]/location[2]/address[1]/street[1]"); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "Tangerine Drive"); [EOL]     assertXPathPointer(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "/vendor[1]/location[2]/address[1]/street[1]"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testCreatePathExpandExistingCollectionAndSetProperty() { [EOL]     assertXPathCreatePath(context, "/beans[3]/int", new Integer(1), "/beans[3]/int"); [EOL] }
public void testCreatePathExpandExistingCollectionAndSetProperty() { [EOL]     assertXPathCreatePath(context, "/beans[3]/int", new Integer(1), "/beans[3]/int"); [EOL] }
public void testCreatePathExpandExistingCollectionAndSetProperty() { [EOL]     assertXPathCreatePath(context, "/beans[3]/int", new Integer(1), "/beans[3]/int"); [EOL] }
public void testCreatePathExpandExistingCollectionAndSetProperty() { [EOL]     assertXPathCreatePath(context, "/beans[3]/int", new Integer(1), "/beans[3]/int"); [EOL] }
public void testCreatePathExpandExistingCollectionAndSetProperty() { [EOL]     assertXPathCreatePath(context, "/beans[3]/int", new Integer(1), "/beans[3]/int"); [EOL] }
public void testCreatePathExpandExistingCollectionAndSetProperty() { [EOL]     assertXPathCreatePath(context, "/beans[3]/int", new Integer(1), "/beans[3]/int"); [EOL] }
public void testCreatePathExpandExistingCollectionAndSetProperty() { [EOL]     assertXPathCreatePath(context, "/beans[3]/int", new Integer(1), "/beans[3]/int"); [EOL] }
public void testCreatePathExpandExistingCollectionAndSetProperty() { [EOL]     assertXPathCreatePath(context, "/beans[3]/int", new Integer(1), "/beans[3]/int"); [EOL] }
public void testCreatePathExpandExistingCollectionAndSetProperty() { [EOL]     assertXPathCreatePath(context, "/beans[3]/int", new Integer(1), "/beans[3]/int"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testCreatePathExpandExistingCollectionAndSetProperty() { [EOL]     assertXPathCreatePath(context, "/beans[3]/int", new Integer(1), "/beans[3]/int"); [EOL] }
public void testCreatePathExpandExistingCollectionAndSetProperty() { [EOL]     assertXPathCreatePath(context, "/beans[3]/int", new Integer(1), "/beans[3]/int"); [EOL] }
public void testCreatePathExpandExistingCollectionAndSetProperty() { [EOL]     assertXPathCreatePath(context, "/beans[3]/int", new Integer(1), "/beans[3]/int"); [EOL] }
public void testCreatePathExpandExistingCollectionAndSetProperty() { [EOL]     assertXPathCreatePath(context, "/beans[3]/int", new Integer(1), "/beans[3]/int"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testThreads() throws Throwable { [EOL]     context = JXPathContext.newContext(null, new Double(100)); [EOL]     Thread[] threadArray = new Thread[THREAD_COUNT]; [EOL]     for (int i = 0; i < THREAD_COUNT; i++) { [EOL]         threadArray[i] = new Thread(new StressRunnable()); [EOL]     } [EOL]     for (int i = 0; i < threadArray.length; i++) { [EOL]         threadArray[i].start(); [EOL]     } [EOL]     for (int i = 0; i < threadArray.length; i++) { [EOL]         try { [EOL]             threadArray[i].join(); [EOL]         } catch (InterruptedException e) { [EOL]             assertTrue("Interrupted", false); [EOL]         } [EOL]     } [EOL]     if (exception != null) { [EOL]         throw exception; [EOL]     } [EOL]     assertEquals("Test count", THREAD_COUNT * THREAD_DURATION, count); [EOL] }
public void testThreads() throws Throwable { [EOL]     context = JXPathContext.newContext(null, new Double(100)); [EOL]     Thread[] threadArray = new Thread[THREAD_COUNT]; [EOL]     for (int i = 0; i < THREAD_COUNT; i++) { [EOL]         threadArray[i] = new Thread(new StressRunnable()); [EOL]     } [EOL]     for (int i = 0; i < threadArray.length; i++) { [EOL]         threadArray[i].start(); [EOL]     } [EOL]     for (int i = 0; i < threadArray.length; i++) { [EOL]         try { [EOL]             threadArray[i].join(); [EOL]         } catch (InterruptedException e) { [EOL]             assertTrue("Interrupted", false); [EOL]         } [EOL]     } [EOL]     if (exception != null) { [EOL]         throw exception; [EOL]     } [EOL]     assertEquals("Test count", THREAD_COUNT * THREAD_DURATION, count); [EOL] }
public void testCoreOperationGreaterThan() { [EOL]     assertXPathExpression("3>4", CoreOperationGreaterThan.class, "3 > 4"); [EOL]     assertXPathExpression("3>(2>=1)", CoreOperationGreaterThan.class, "3 > (2 >= 1)"); [EOL]     assertXPathExpression("1 > (1 and 2 <= (2 or 3) = 4)", CoreOperationGreaterThan.class); [EOL] }
public void testCoreOperationGreaterThan() { [EOL]     assertXPathExpression("3>4", CoreOperationGreaterThan.class, "3 > 4"); [EOL]     assertXPathExpression("3>(2>=1)", CoreOperationGreaterThan.class, "3 > (2 >= 1)"); [EOL]     assertXPathExpression("1 > (1 and 2 <= (2 or 3) = 4)", CoreOperationGreaterThan.class); [EOL] }
public void testCoreOperationGreaterThan() { [EOL]     assertXPathExpression("3>4", CoreOperationGreaterThan.class, "3 > 4"); [EOL]     assertXPathExpression("3>(2>=1)", CoreOperationGreaterThan.class, "3 > (2 >= 1)"); [EOL]     assertXPathExpression("1 > (1 and 2 <= (2 or 3) = 4)", CoreOperationGreaterThan.class); [EOL] }
public void testCoreOperationGreaterThan() { [EOL]     assertXPathExpression("3>4", CoreOperationGreaterThan.class, "3 > 4"); [EOL]     assertXPathExpression("3>(2>=1)", CoreOperationGreaterThan.class, "3 > (2 >= 1)"); [EOL]     assertXPathExpression("1 > (1 and 2 <= (2 or 3) = 4)", CoreOperationGreaterThan.class); [EOL] }
public void testCoreOperationGreaterThan() { [EOL]     assertXPathExpression("3>4", CoreOperationGreaterThan.class, "3 > 4"); [EOL]     assertXPathExpression("3>(2>=1)", CoreOperationGreaterThan.class, "3 > (2 >= 1)"); [EOL]     assertXPathExpression("1 > (1 and 2 <= (2 or 3) = 4)", CoreOperationGreaterThan.class); [EOL] }
public void testRelativeContextAbsolutePath() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "/integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testRelativeContextAbsolutePath() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "/integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testNodeSetToString() { [EOL]     assertConversion(new NodeSet() { [EOL]  [EOL]         public List getNodes() { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public List getPointers() { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public List getValues() { [EOL]             List list = new ArrayList(); [EOL]             list.add("hello"); [EOL]             list.add("goodbye"); [EOL]             return Collections.singletonList(list); [EOL]         } [EOL]     }, String.class, "hello"); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "Tangerine Drive"); [EOL]     assertXPathPointer(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "/vendor[1]/location[2]/address[1]/street[1]"); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "Tangerine Drive"); [EOL]     assertXPathPointer(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "/vendor[1]/location[2]/address[1]/street[1]"); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "Tangerine Drive"); [EOL]     assertXPathPointer(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "/vendor[1]/location[2]/address[1]/street[1]"); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "Tangerine Drive"); [EOL]     assertXPathPointer(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "/vendor[1]/location[2]/address[1]/street[1]"); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "Tangerine Drive"); [EOL]     assertXPathPointer(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "/vendor[1]/location[2]/address[1]/street[1]"); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "Tangerine Drive"); [EOL]     assertXPathPointer(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "/vendor[1]/location[2]/address[1]/street[1]"); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "Tangerine Drive"); [EOL]     assertXPathPointer(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "/vendor[1]/location[2]/address[1]/street[1]"); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "Tangerine Drive"); [EOL]     assertXPathPointer(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "/vendor[1]/location[2]/address[1]/street[1]"); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "Tangerine Drive"); [EOL]     assertXPathPointer(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "/vendor[1]/location[2]/address[1]/street[1]"); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "Tangerine Drive"); [EOL]     assertXPathPointer(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "/vendor[1]/location[2]/address[1]/street[1]"); [EOL] }
public void testInterpretExpressionPath() { [EOL]     context.getVariables().declareVariable("array", new String[] { "Value1" }); [EOL]     context.getVariables().declareVariable("testnull", new TestNull()); [EOL]     assertNullPointer("$testnull/nothing[2]", "$testnull/nothing[2]", "VBbE"); [EOL] }
public void testInterpretExpressionPath() { [EOL]     context.getVariables().declareVariable("array", new String[] { "Value1" }); [EOL]     context.getVariables().declareVariable("testnull", new TestNull()); [EOL]     assertNullPointer("$testnull/nothing[2]", "$testnull/nothing[2]", "VBbE"); [EOL] }
public void testInterpretExpressionPath() { [EOL]     context.getVariables().declareVariable("array", new String[] { "Value1" }); [EOL]     context.getVariables().declareVariable("testnull", new TestNull()); [EOL]     assertNullPointer("$testnull/nothing[2]", "$testnull/nothing[2]", "VBbE"); [EOL] }
public void testInterpretExpressionPath() { [EOL]     context.getVariables().declareVariable("array", new String[] { "Value1" }); [EOL]     context.getVariables().declareVariable("testnull", new TestNull()); [EOL]     assertNullPointer("$testnull/nothing[2]", "$testnull/nothing[2]", "VBbE"); [EOL] }
public void testInterpretExpressionPath() { [EOL]     context.getVariables().declareVariable("array", new String[] { "Value1" }); [EOL]     context.getVariables().declareVariable("testnull", new TestNull()); [EOL]     assertNullPointer("$testnull/nothing[2]", "$testnull/nothing[2]", "VBbE"); [EOL] }
public void testCreatePathAndSetValueExpandNewCollection() { [EOL]     context.setValue("beans", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/beans[2]/int", new Integer(2), "/beans[2]/int"); [EOL] }
public void testCreatePathAndSetValueExpandNewCollection() { [EOL]     context.setValue("beans", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/beans[2]/int", new Integer(2), "/beans[2]/int"); [EOL] }
public void testCreatePathAndSetValueExpandNewCollection() { [EOL]     context.setValue("beans", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/beans[2]/int", new Integer(2), "/beans[2]/int"); [EOL] }
public void testCreatePathAndSetValueExpandNewCollection() { [EOL]     context.setValue("beans", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/beans[2]/int", new Integer(2), "/beans[2]/int"); [EOL] }
public void testCreatePathAndSetValueExpandNewCollection() { [EOL]     context.setValue("beans", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/beans[2]/int", new Integer(2), "/beans[2]/int"); [EOL] }
public void testCreatePathAndSetValueExpandNewCollection() { [EOL]     context.setValue("beans", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/beans[2]/int", new Integer(2), "/beans[2]/int"); [EOL] }
public void testCreatePathAndSetValueExpandNewCollection() { [EOL]     context.setValue("beans", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/beans[2]/int", new Integer(2), "/beans[2]/int"); [EOL] }
public void testCreatePathAndSetValueExpandNewCollection() { [EOL]     context.setValue("beans", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/beans[2]/int", new Integer(2), "/beans[2]/int"); [EOL] }
public void testCreatePathAndSetValueExpandNewCollection() { [EOL]     context.setValue("beans", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/beans[2]/int", new Integer(2), "/beans[2]/int"); [EOL] }
public void testCreatePathAndSetValueExpandNewCollection() { [EOL]     context.setValue("beans", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/beans[2]/int", new Integer(2), "/beans[2]/int"); [EOL] }
public void testLocationPathAxisOther() { [EOL]     assertXPathExpression("ancestor::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("ancestor-or-self::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("namespace::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("preceding::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("preceding-sibling::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("following::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("following-sibling::foo:bar", LocationPath.class); [EOL] }
public void testLocationPathAxisOther() { [EOL]     assertXPathExpression("ancestor::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("ancestor-or-self::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("namespace::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("preceding::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("preceding-sibling::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("following::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("following-sibling::foo:bar", LocationPath.class); [EOL] }
public void testLocationPathAxisOther() { [EOL]     assertXPathExpression("ancestor::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("ancestor-or-self::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("namespace::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("preceding::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("preceding-sibling::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("following::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("following-sibling::foo:bar", LocationPath.class); [EOL] }
public void testLocationPathAxisOther() { [EOL]     assertXPathExpression("ancestor::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("ancestor-or-self::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("namespace::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("preceding::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("preceding-sibling::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("following::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("following-sibling::foo:bar", LocationPath.class); [EOL] }
public void testLocationPathAxisOther() { [EOL]     assertXPathExpression("ancestor::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("ancestor-or-self::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("namespace::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("preceding::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("preceding-sibling::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("following::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("following-sibling::foo:bar", LocationPath.class); [EOL] }
public void testLocationPathAxisOther() { [EOL]     assertXPathExpression("ancestor::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("ancestor-or-self::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("namespace::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("preceding::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("preceding-sibling::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("following::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("following-sibling::foo:bar", LocationPath.class); [EOL] }
public void testLocationPathAxisOther() { [EOL]     assertXPathExpression("ancestor::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("ancestor-or-self::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("namespace::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("preceding::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("preceding-sibling::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("following::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("following-sibling::foo:bar", LocationPath.class); [EOL] }
public void testLocationPathAxisOther() { [EOL]     assertXPathExpression("ancestor::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("ancestor-or-self::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("namespace::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("preceding::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("preceding-sibling::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("following::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("following-sibling::foo:bar", LocationPath.class); [EOL] }
public void testRelativeContextAbsolutePath() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "/integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testRelativeContextAbsolutePath() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "/integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testRelativeContextAbsolutePath() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "/integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testRelativeContextAbsolutePath() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "/integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testRelativeContextAbsolutePath() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "/integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testRelativeContextAbsolutePath() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "/integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testCreateAndSetValuePathDeclareVariableSetCollectionElement() { [EOL]     assertXPathCreatePathAndSetValue(context, "$stringArray[2]", "Value2", "$stringArray[2]"); [EOL]     assertEquals("Created <" + "$stringArray[1]" + ">", "Value1", context.getValue("$stringArray[1]")); [EOL] }
public void testCreateAndSetValuePathDeclareVariableSetCollectionElement() { [EOL]     assertXPathCreatePathAndSetValue(context, "$stringArray[2]", "Value2", "$stringArray[2]"); [EOL]     assertEquals("Created <" + "$stringArray[1]" + ">", "Value1", context.getValue("$stringArray[1]")); [EOL] }
public void testRelativeContextInheritance() { [EOL]     context.setFunctions(new ClassFunctions(TestFunctions.class, "test")); [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValue(relative, "test:countPointers(strings)", new Integer(3)); [EOL] }
public void testRelativeContextInheritance() { [EOL]     context.setFunctions(new ClassFunctions(TestFunctions.class, "test")); [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValue(relative, "test:countPointers(strings)", new Integer(3)); [EOL] }
public void testRelativeContextInheritance() { [EOL]     context.setFunctions(new ClassFunctions(TestFunctions.class, "test")); [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValue(relative, "test:countPointers(strings)", new Integer(3)); [EOL] }
public void testRelativeContextInheritance() { [EOL]     context.setFunctions(new ClassFunctions(TestFunctions.class, "test")); [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValue(relative, "test:countPointers(strings)", new Integer(3)); [EOL] }
public void testRelativeContextInheritance() { [EOL]     context.setFunctions(new ClassFunctions(TestFunctions.class, "test")); [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValue(relative, "test:countPointers(strings)", new Integer(3)); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testRelativeContextAbsolutePath() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "/integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testRelativeContextAbsolutePath() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "/integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testRelativeContextAbsolutePath() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "/integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testRelativeContextAbsolutePath() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "/integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testAttributeLang() { [EOL]     assertXPathValue(context, "@xml:lang", "en-US"); [EOL]     assertXPathValue(context, "count(@xml:*)", new Double(1)); [EOL]     assertXPathValue(context, "lang('en')", Boolean.TRUE); [EOL]     assertXPathValue(context, "lang('fr')", Boolean.FALSE); [EOL] }
public void testAttributeLang() { [EOL]     assertXPathValue(context, "@xml:lang", "en-US"); [EOL]     assertXPathValue(context, "count(@xml:*)", new Double(1)); [EOL]     assertXPathValue(context, "lang('en')", Boolean.TRUE); [EOL]     assertXPathValue(context, "lang('fr')", Boolean.FALSE); [EOL] }
public void testAttributeLang() { [EOL]     assertXPathValue(context, "@xml:lang", "en-US"); [EOL]     assertXPathValue(context, "count(@xml:*)", new Double(1)); [EOL]     assertXPathValue(context, "lang('en')", Boolean.TRUE); [EOL]     assertXPathValue(context, "lang('fr')", Boolean.FALSE); [EOL] }
public void testAttributeLang() { [EOL]     assertXPathValue(context, "@xml:lang", "en-US"); [EOL]     assertXPathValue(context, "count(@xml:*)", new Double(1)); [EOL]     assertXPathValue(context, "lang('en')", Boolean.TRUE); [EOL]     assertXPathValue(context, "lang('fr')", Boolean.FALSE); [EOL] }
public void testAttributeLang() { [EOL]     assertXPathValue(context, "@xml:lang", "en-US"); [EOL]     assertXPathValue(context, "count(@xml:*)", new Double(1)); [EOL]     assertXPathValue(context, "lang('en')", Boolean.TRUE); [EOL]     assertXPathValue(context, "lang('fr')", Boolean.FALSE); [EOL] }
public void testAttributeLang() { [EOL]     assertXPathValue(context, "@xml:lang", "en-US"); [EOL]     assertXPathValue(context, "count(@xml:*)", new Double(1)); [EOL]     assertXPathValue(context, "lang('en')", Boolean.TRUE); [EOL]     assertXPathValue(context, "lang('fr')", Boolean.FALSE); [EOL] }
public void testAttributeLang() { [EOL]     assertXPathValue(context, "@xml:lang", "en-US"); [EOL]     assertXPathValue(context, "count(@xml:*)", new Double(1)); [EOL]     assertXPathValue(context, "lang('en')", Boolean.TRUE); [EOL]     assertXPathValue(context, "lang('fr')", Boolean.FALSE); [EOL] }
public void testAttributeLang() { [EOL]     assertXPathValue(context, "@xml:lang", "en-US"); [EOL]     assertXPathValue(context, "count(@xml:*)", new Double(1)); [EOL]     assertXPathValue(context, "lang('en')", Boolean.TRUE); [EOL]     assertXPathValue(context, "lang('fr')", Boolean.FALSE); [EOL] }
public void testAttributeLang() { [EOL]     assertXPathValue(context, "@xml:lang", "en-US"); [EOL]     assertXPathValue(context, "count(@xml:*)", new Double(1)); [EOL]     assertXPathValue(context, "lang('en')", Boolean.TRUE); [EOL]     assertXPathValue(context, "lang('fr')", Boolean.FALSE); [EOL] }
public void testAttributeLang() { [EOL]     assertXPathValue(context, "@xml:lang", "en-US"); [EOL]     assertXPathValue(context, "count(@xml:*)", new Double(1)); [EOL]     assertXPathValue(context, "lang('en')", Boolean.TRUE); [EOL]     assertXPathValue(context, "lang('fr')", Boolean.FALSE); [EOL] }
public void testAttributeLang() { [EOL]     assertXPathValue(context, "@xml:lang", "en-US"); [EOL]     assertXPathValue(context, "count(@xml:*)", new Double(1)); [EOL]     assertXPathValue(context, "lang('en')", Boolean.TRUE); [EOL]     assertXPathValue(context, "lang('fr')", Boolean.FALSE); [EOL] }
public void testAttributeLang() { [EOL]     assertXPathValue(context, "@xml:lang", "en-US"); [EOL]     assertXPathValue(context, "count(@xml:*)", new Double(1)); [EOL]     assertXPathValue(context, "lang('en')", Boolean.TRUE); [EOL]     assertXPathValue(context, "lang('fr')", Boolean.FALSE); [EOL] }
public void testRemovePath() { [EOL]     context.removePath("vendor/location[@id = '101']//street/text()"); [EOL]     assertEquals("Remove DOM text", "", context.getValue("vendor/location[@id = '101']//street")); [EOL]     context.removePath("vendor/location[@id = '101']//street"); [EOL]     assertEquals("Remove DOM element", new Double(0), context.getValue("count(vendor/location[@id = '101']//street)")); [EOL]     context.removePath("vendor/location[@id = '100']/@name"); [EOL]     assertEquals("Remove DOM attribute", new Double(0), context.getValue("count(vendor/location[@id = '100']/@name)")); [EOL] }
public void testRemovePath() { [EOL]     context.removePath("vendor/location[@id = '101']//street/text()"); [EOL]     assertEquals("Remove DOM text", "", context.getValue("vendor/location[@id = '101']//street")); [EOL]     context.removePath("vendor/location[@id = '101']//street"); [EOL]     assertEquals("Remove DOM element", new Double(0), context.getValue("count(vendor/location[@id = '101']//street)")); [EOL]     context.removePath("vendor/location[@id = '100']/@name"); [EOL]     assertEquals("Remove DOM attribute", new Double(0), context.getValue("count(vendor/location[@id = '100']/@name)")); [EOL] }
public void testRemovePath() { [EOL]     context.removePath("vendor/location[@id = '101']//street/text()"); [EOL]     assertEquals("Remove DOM text", "", context.getValue("vendor/location[@id = '101']//street")); [EOL]     context.removePath("vendor/location[@id = '101']//street"); [EOL]     assertEquals("Remove DOM element", new Double(0), context.getValue("count(vendor/location[@id = '101']//street)")); [EOL]     context.removePath("vendor/location[@id = '100']/@name"); [EOL]     assertEquals("Remove DOM attribute", new Double(0), context.getValue("count(vendor/location[@id = '100']/@name)")); [EOL] }
public void testRemovePath() { [EOL]     context.removePath("vendor/location[@id = '101']//street/text()"); [EOL]     assertEquals("Remove DOM text", "", context.getValue("vendor/location[@id = '101']//street")); [EOL]     context.removePath("vendor/location[@id = '101']//street"); [EOL]     assertEquals("Remove DOM element", new Double(0), context.getValue("count(vendor/location[@id = '101']//street)")); [EOL]     context.removePath("vendor/location[@id = '100']/@name"); [EOL]     assertEquals("Remove DOM attribute", new Double(0), context.getValue("count(vendor/location[@id = '100']/@name)")); [EOL] }
public void testRemovePath() { [EOL]     context.removePath("vendor/location[@id = '101']//street/text()"); [EOL]     assertEquals("Remove DOM text", "", context.getValue("vendor/location[@id = '101']//street")); [EOL]     context.removePath("vendor/location[@id = '101']//street"); [EOL]     assertEquals("Remove DOM element", new Double(0), context.getValue("count(vendor/location[@id = '101']//street)")); [EOL]     context.removePath("vendor/location[@id = '100']/@name"); [EOL]     assertEquals("Remove DOM attribute", new Double(0), context.getValue("count(vendor/location[@id = '100']/@name)")); [EOL] }
public void testRemovePath() { [EOL]     context.removePath("vendor/location[@id = '101']//street/text()"); [EOL]     assertEquals("Remove DOM text", "", context.getValue("vendor/location[@id = '101']//street")); [EOL]     context.removePath("vendor/location[@id = '101']//street"); [EOL]     assertEquals("Remove DOM element", new Double(0), context.getValue("count(vendor/location[@id = '101']//street)")); [EOL]     context.removePath("vendor/location[@id = '100']/@name"); [EOL]     assertEquals("Remove DOM attribute", new Double(0), context.getValue("count(vendor/location[@id = '100']/@name)")); [EOL] }
public void testRemovePath() { [EOL]     context.removePath("vendor/location[@id = '101']//street/text()"); [EOL]     assertEquals("Remove DOM text", "", context.getValue("vendor/location[@id = '101']//street")); [EOL]     context.removePath("vendor/location[@id = '101']//street"); [EOL]     assertEquals("Remove DOM element", new Double(0), context.getValue("count(vendor/location[@id = '101']//street)")); [EOL]     context.removePath("vendor/location[@id = '100']/@name"); [EOL]     assertEquals("Remove DOM attribute", new Double(0), context.getValue("count(vendor/location[@id = '100']/@name)")); [EOL] }
public void testRemovePath() { [EOL]     context.removePath("vendor/location[@id = '101']//street/text()"); [EOL]     assertEquals("Remove DOM text", "", context.getValue("vendor/location[@id = '101']//street")); [EOL]     context.removePath("vendor/location[@id = '101']//street"); [EOL]     assertEquals("Remove DOM element", new Double(0), context.getValue("count(vendor/location[@id = '101']//street)")); [EOL]     context.removePath("vendor/location[@id = '100']/@name"); [EOL]     assertEquals("Remove DOM attribute", new Double(0), context.getValue("count(vendor/location[@id = '100']/@name)")); [EOL] }
public void testRemovePath() { [EOL]     context.removePath("vendor/location[@id = '101']//street/text()"); [EOL]     assertEquals("Remove DOM text", "", context.getValue("vendor/location[@id = '101']//street")); [EOL]     context.removePath("vendor/location[@id = '101']//street"); [EOL]     assertEquals("Remove DOM element", new Double(0), context.getValue("count(vendor/location[@id = '101']//street)")); [EOL]     context.removePath("vendor/location[@id = '100']/@name"); [EOL]     assertEquals("Remove DOM attribute", new Double(0), context.getValue("count(vendor/location[@id = '100']/@name)")); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testRemovePath() { [EOL]     context.removePath("vendor/location[@id = '101']//street/text()"); [EOL]     assertEquals("Remove DOM text", "", context.getValue("vendor/location[@id = '101']//street")); [EOL]     context.removePath("vendor/location[@id = '101']//street"); [EOL]     assertEquals("Remove DOM element", new Double(0), context.getValue("count(vendor/location[@id = '101']//street)")); [EOL]     context.removePath("vendor/location[@id = '100']/@name"); [EOL]     assertEquals("Remove DOM attribute", new Double(0), context.getValue("count(vendor/location[@id = '100']/@name)")); [EOL] }
public void testRemovePath() { [EOL]     context.removePath("vendor/location[@id = '101']//street/text()"); [EOL]     assertEquals("Remove DOM text", "", context.getValue("vendor/location[@id = '101']//street")); [EOL]     context.removePath("vendor/location[@id = '101']//street"); [EOL]     assertEquals("Remove DOM element", new Double(0), context.getValue("count(vendor/location[@id = '101']//street)")); [EOL]     context.removePath("vendor/location[@id = '100']/@name"); [EOL]     assertEquals("Remove DOM attribute", new Double(0), context.getValue("count(vendor/location[@id = '100']/@name)")); [EOL] }
public void testRemovePath() { [EOL]     context.removePath("vendor/location[@id = '101']//street/text()"); [EOL]     assertEquals("Remove DOM text", "", context.getValue("vendor/location[@id = '101']//street")); [EOL]     context.removePath("vendor/location[@id = '101']//street"); [EOL]     assertEquals("Remove DOM element", new Double(0), context.getValue("count(vendor/location[@id = '101']//street)")); [EOL]     context.removePath("vendor/location[@id = '100']/@name"); [EOL]     assertEquals("Remove DOM attribute", new Double(0), context.getValue("count(vendor/location[@id = '100']/@name)")); [EOL] }
public void testRemovePath() { [EOL]     context.removePath("vendor/location[@id = '101']//street/text()"); [EOL]     assertEquals("Remove DOM text", "", context.getValue("vendor/location[@id = '101']//street")); [EOL]     context.removePath("vendor/location[@id = '101']//street"); [EOL]     assertEquals("Remove DOM element", new Double(0), context.getValue("count(vendor/location[@id = '101']//street)")); [EOL]     context.removePath("vendor/location[@id = '100']/@name"); [EOL]     assertEquals("Remove DOM attribute", new Double(0), context.getValue("count(vendor/location[@id = '100']/@name)")); [EOL] }
public void testRemovePath() { [EOL]     context.removePath("vendor/location[@id = '101']//street/text()"); [EOL]     assertEquals("Remove DOM text", "", context.getValue("vendor/location[@id = '101']//street")); [EOL]     context.removePath("vendor/location[@id = '101']//street"); [EOL]     assertEquals("Remove DOM element", new Double(0), context.getValue("count(vendor/location[@id = '101']//street)")); [EOL]     context.removePath("vendor/location[@id = '100']/@name"); [EOL]     assertEquals("Remove DOM attribute", new Double(0), context.getValue("count(vendor/location[@id = '100']/@name)")); [EOL] }
public void testRemovePath() { [EOL]     context.removePath("vendor/location[@id = '101']//street/text()"); [EOL]     assertEquals("Remove DOM text", "", context.getValue("vendor/location[@id = '101']//street")); [EOL]     context.removePath("vendor/location[@id = '101']//street"); [EOL]     assertEquals("Remove DOM element", new Double(0), context.getValue("count(vendor/location[@id = '101']//street)")); [EOL]     context.removePath("vendor/location[@id = '100']/@name"); [EOL]     assertEquals("Remove DOM attribute", new Double(0), context.getValue("count(vendor/location[@id = '100']/@name)")); [EOL] }
public void testRemovePath() { [EOL]     context.removePath("vendor/location[@id = '101']//street/text()"); [EOL]     assertEquals("Remove DOM text", "", context.getValue("vendor/location[@id = '101']//street")); [EOL]     context.removePath("vendor/location[@id = '101']//street"); [EOL]     assertEquals("Remove DOM element", new Double(0), context.getValue("count(vendor/location[@id = '101']//street)")); [EOL]     context.removePath("vendor/location[@id = '100']/@name"); [EOL]     assertEquals("Remove DOM attribute", new Double(0), context.getValue("count(vendor/location[@id = '100']/@name)")); [EOL] }
public void testVarMap() { [EOL]     assertXPathValueAndPointer(context, "$map/string", "string", "$map[@name='string']"); [EOL] }
public void testContainerVariableWithCollection() { [EOL]     ArrayContainer container = new ArrayContainer(); [EOL]     String[] array = (String[]) container.getValue(); [EOL]     JXPathContext context = JXPathContext.newContext(null); [EOL]     context.getVariables().declareVariable("list", container); [EOL]     assertXPathValueAndPointer(context, "$list", array, "$list"); [EOL]     assertXPathValueAndPointer(context, "$list[1]", "foo", "$list[1]"); [EOL]     assertXPathValueAndPointer(context, "$list[2]", "bar", "$list[2]"); [EOL]     assertXPathSetValue(context, "$list[1]", "baz"); [EOL]     assertEquals("Checking setValue(index)", "baz", array[0]); [EOL] }
public void testCreateAndSetValuePathDeclareVariableSetCollectionElement() { [EOL]     assertXPathCreatePathAndSetValue(context, "$stringArray[2]", "Value2", "$stringArray[2]"); [EOL]     assertEquals("Created <" + "$stringArray[1]" + ">", "Value1", context.getValue("$stringArray[1]")); [EOL] }
public void testCreateAndSetValuePathDeclareVariableSetCollectionElement() { [EOL]     assertXPathCreatePathAndSetValue(context, "$stringArray[2]", "Value2", "$stringArray[2]"); [EOL]     assertEquals("Created <" + "$stringArray[1]" + ">", "Value1", context.getValue("$stringArray[1]")); [EOL] }
public void testCreateAndSetValuePathDeclareVariableSetCollectionElement() { [EOL]     assertXPathCreatePathAndSetValue(context, "$stringArray[2]", "Value2", "$stringArray[2]"); [EOL]     assertEquals("Created <" + "$stringArray[1]" + ">", "Value1", context.getValue("$stringArray[1]")); [EOL] }
public void testCreateAndSetValuePathDeclareVariableSetCollectionElement() { [EOL]     assertXPathCreatePathAndSetValue(context, "$stringArray[2]", "Value2", "$stringArray[2]"); [EOL]     assertEquals("Created <" + "$stringArray[1]" + ">", "Value1", context.getValue("$stringArray[1]")); [EOL] }
public void testVariablesInExpressions() { [EOL]     assertXPathValue(context, "$a = $b", Boolean.TRUE); [EOL]     assertXPathValue(context, "$a = $nan", Boolean.FALSE); [EOL]     assertXPathValue(context, "$a + 1", new Double(2)); [EOL]     assertXPathValue(context, "$c", null); [EOL]     assertXPathValue(context, "$d[2]", "b"); [EOL] }
public void testVariablesInExpressions() { [EOL]     assertXPathValue(context, "$a = $b", Boolean.TRUE); [EOL]     assertXPathValue(context, "$a = $nan", Boolean.FALSE); [EOL]     assertXPathValue(context, "$a + 1", new Double(2)); [EOL]     assertXPathValue(context, "$c", null); [EOL]     assertXPathValue(context, "$d[2]", "b"); [EOL] }
public void testVariablesInExpressions() { [EOL]     assertXPathValue(context, "$a = $b", Boolean.TRUE); [EOL]     assertXPathValue(context, "$a = $nan", Boolean.FALSE); [EOL]     assertXPathValue(context, "$a + 1", new Double(2)); [EOL]     assertXPathValue(context, "$c", null); [EOL]     assertXPathValue(context, "$d[2]", "b"); [EOL] }
public void testVariablesInExpressions() { [EOL]     assertXPathValue(context, "$a = $b", Boolean.TRUE); [EOL]     assertXPathValue(context, "$a = $nan", Boolean.FALSE); [EOL]     assertXPathValue(context, "$a + 1", new Double(2)); [EOL]     assertXPathValue(context, "$c", null); [EOL]     assertXPathValue(context, "$d[2]", "b"); [EOL] }
public void testRelativeContextAbsolutePath() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "/integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testRelativeContextAbsolutePath() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "/integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testRelativeContextAbsolutePath() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "/integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testRelativeContextAbsolutePath() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "/integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testRelativeContextAbsolutePath() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "/integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "Tangerine Drive"); [EOL]     assertXPathPointer(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "/vendor[1]/location[2]/address[1]/street[1]"); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "Tangerine Drive"); [EOL]     assertXPathPointer(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "/vendor[1]/location[2]/address[1]/street[1]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testAxisFollowing() { [EOL]     assertXPathValue(context, "count(nestedBean/strings[2]/following::node())", new Double(21)); [EOL]     assertXPathValue(context, "count(nestedBean/strings[2]/following::strings)", new Double(7)); [EOL] }
public void testAxisFollowing() { [EOL]     assertXPathValue(context, "count(nestedBean/strings[2]/following::node())", new Double(21)); [EOL]     assertXPathValue(context, "count(nestedBean/strings[2]/following::strings)", new Double(7)); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testRelativeContextAbsolutePath() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "/integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testRelativeContextAbsolutePath() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "/integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testRelativeContextAbsolutePath() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "/integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testRelativeContextAbsolutePath() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "/integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testRelativeContextAbsolutePath() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "/integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testRelativeContextAbsolutePath() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "/integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testRelativeContextAbsolutePath() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "/integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePath() { [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]/address/street", "", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[2]/@manager", "", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[1]/@name", "local", "/vendor[1]/location[1]/@name"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "", "/vendor[1]/location[4]/@manager"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/price:foo/price:bar", "", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePath() { [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]/address/street", "", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[2]/@manager", "", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[1]/@name", "local", "/vendor[1]/location[1]/@name"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "", "/vendor[1]/location[4]/@manager"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/price:foo/price:bar", "", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePath() { [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]/address/street", "", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[2]/@manager", "", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[1]/@name", "local", "/vendor[1]/location[1]/@name"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "", "/vendor[1]/location[4]/@manager"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/price:foo/price:bar", "", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testRemovePath() { [EOL]     context.removePath("vendor/location[@id = '101']//street/text()"); [EOL]     assertEquals("Remove DOM text", "", context.getValue("vendor/location[@id = '101']//street")); [EOL]     context.removePath("vendor/location[@id = '101']//street"); [EOL]     assertEquals("Remove DOM element", new Double(0), context.getValue("count(vendor/location[@id = '101']//street)")); [EOL]     context.removePath("vendor/location[@id = '100']/@name"); [EOL]     assertEquals("Remove DOM attribute", new Double(0), context.getValue("count(vendor/location[@id = '100']/@name)")); [EOL] }
public void testRemovePath() { [EOL]     context.removePath("vendor/location[@id = '101']//street/text()"); [EOL]     assertEquals("Remove DOM text", "", context.getValue("vendor/location[@id = '101']//street")); [EOL]     context.removePath("vendor/location[@id = '101']//street"); [EOL]     assertEquals("Remove DOM element", new Double(0), context.getValue("count(vendor/location[@id = '101']//street)")); [EOL]     context.removePath("vendor/location[@id = '100']/@name"); [EOL]     assertEquals("Remove DOM attribute", new Double(0), context.getValue("count(vendor/location[@id = '100']/@name)")); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCollectionElement() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map/TestKey3[2]", "Test1", "/map[@name='TestKey3'][2]"); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey3'][3]", "Test2", "/map[@name='TestKey3'][3]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testRelativeContextAbsolutePath() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "/integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testRelativeContextAbsolutePath() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "/integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testRelativeContextAbsolutePath() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "/integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testCreatePath() { [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]/address/street", "", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[2]/@manager", "", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[1]/@name", "local", "/vendor[1]/location[1]/@name"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "", "/vendor[1]/location[4]/@manager"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/price:foo/price:bar", "", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePath() { [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]/address/street", "", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[2]/@manager", "", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[1]/@name", "local", "/vendor[1]/location[1]/@name"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "", "/vendor[1]/location[4]/@manager"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/price:foo/price:bar", "", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePath() { [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]/address/street", "", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[2]/@manager", "", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[1]/@name", "local", "/vendor[1]/location[1]/@name"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "", "/vendor[1]/location[4]/@manager"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/price:foo/price:bar", "", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "Tangerine Drive"); [EOL]     assertXPathPointer(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "/vendor[1]/location[2]/address[1]/street[1]"); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testLocationPathAxisOther() { [EOL]     assertXPathExpression("ancestor::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("ancestor-or-self::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("namespace::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("preceding::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("preceding-sibling::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("following::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("following-sibling::foo:bar", LocationPath.class); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testLocationPathAxisOther() { [EOL]     assertXPathExpression("ancestor::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("ancestor-or-self::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("namespace::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("preceding::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("preceding-sibling::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("following::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("following-sibling::foo:bar", LocationPath.class); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "Tangerine Drive"); [EOL]     assertXPathPointer(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "/vendor[1]/location[2]/address[1]/street[1]"); [EOL] }
public void testLocationPathAxisOther() { [EOL]     assertXPathExpression("ancestor::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("ancestor-or-self::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("namespace::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("preceding::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("preceding-sibling::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("following::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("following-sibling::foo:bar", LocationPath.class); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "Tangerine Drive"); [EOL]     assertXPathPointer(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "/vendor[1]/location[2]/address[1]/street[1]"); [EOL] }
public void testLocationPathAxisOther() { [EOL]     assertXPathExpression("ancestor::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("ancestor-or-self::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("namespace::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("preceding::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("preceding-sibling::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("following::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("following-sibling::foo:bar", LocationPath.class); [EOL] }
public void testLocationPathAxisOther() { [EOL]     assertXPathExpression("ancestor::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("ancestor-or-self::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("namespace::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("preceding::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("preceding-sibling::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("following::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("following-sibling::foo:bar", LocationPath.class); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "Tangerine Drive"); [EOL]     assertXPathPointer(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "/vendor[1]/location[2]/address[1]/street[1]"); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "Tangerine Drive"); [EOL]     assertXPathPointer(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "/vendor[1]/location[2]/address[1]/street[1]"); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testRemovePath() { [EOL]     context.removePath("vendor/location[@id = '101']//street/text()"); [EOL]     assertEquals("Remove DOM text", "", context.getValue("vendor/location[@id = '101']//street")); [EOL]     context.removePath("vendor/location[@id = '101']//street"); [EOL]     assertEquals("Remove DOM element", new Double(0), context.getValue("count(vendor/location[@id = '101']//street)")); [EOL]     context.removePath("vendor/location[@id = '100']/@name"); [EOL]     assertEquals("Remove DOM attribute", new Double(0), context.getValue("count(vendor/location[@id = '100']/@name)")); [EOL] }
public void testRemovePath() { [EOL]     context.removePath("vendor/location[@id = '101']//street/text()"); [EOL]     assertEquals("Remove DOM text", "", context.getValue("vendor/location[@id = '101']//street")); [EOL]     context.removePath("vendor/location[@id = '101']//street"); [EOL]     assertEquals("Remove DOM element", new Double(0), context.getValue("count(vendor/location[@id = '101']//street)")); [EOL]     context.removePath("vendor/location[@id = '100']/@name"); [EOL]     assertEquals("Remove DOM attribute", new Double(0), context.getValue("count(vendor/location[@id = '100']/@name)")); [EOL] }
public void testRemovePath() { [EOL]     context.removePath("vendor/location[@id = '101']//street/text()"); [EOL]     assertEquals("Remove DOM text", "", context.getValue("vendor/location[@id = '101']//street")); [EOL]     context.removePath("vendor/location[@id = '101']//street"); [EOL]     assertEquals("Remove DOM element", new Double(0), context.getValue("count(vendor/location[@id = '101']//street)")); [EOL]     context.removePath("vendor/location[@id = '100']/@name"); [EOL]     assertEquals("Remove DOM attribute", new Double(0), context.getValue("count(vendor/location[@id = '100']/@name)")); [EOL] }
public void testRemovePath() { [EOL]     context.removePath("vendor/location[@id = '101']//street/text()"); [EOL]     assertEquals("Remove DOM text", "", context.getValue("vendor/location[@id = '101']//street")); [EOL]     context.removePath("vendor/location[@id = '101']//street"); [EOL]     assertEquals("Remove DOM element", new Double(0), context.getValue("count(vendor/location[@id = '101']//street)")); [EOL]     context.removePath("vendor/location[@id = '100']/@name"); [EOL]     assertEquals("Remove DOM attribute", new Double(0), context.getValue("count(vendor/location[@id = '100']/@name)")); [EOL] }
public void testRemovePath() { [EOL]     context.removePath("vendor/location[@id = '101']//street/text()"); [EOL]     assertEquals("Remove DOM text", "", context.getValue("vendor/location[@id = '101']//street")); [EOL]     context.removePath("vendor/location[@id = '101']//street"); [EOL]     assertEquals("Remove DOM element", new Double(0), context.getValue("count(vendor/location[@id = '101']//street)")); [EOL]     context.removePath("vendor/location[@id = '100']/@name"); [EOL]     assertEquals("Remove DOM attribute", new Double(0), context.getValue("count(vendor/location[@id = '100']/@name)")); [EOL] }
public void testRemovePath() { [EOL]     context.removePath("vendor/location[@id = '101']//street/text()"); [EOL]     assertEquals("Remove DOM text", "", context.getValue("vendor/location[@id = '101']//street")); [EOL]     context.removePath("vendor/location[@id = '101']//street"); [EOL]     assertEquals("Remove DOM element", new Double(0), context.getValue("count(vendor/location[@id = '101']//street)")); [EOL]     context.removePath("vendor/location[@id = '100']/@name"); [EOL]     assertEquals("Remove DOM attribute", new Double(0), context.getValue("count(vendor/location[@id = '100']/@name)")); [EOL] }
public void testRemovePath() { [EOL]     context.removePath("vendor/location[@id = '101']//street/text()"); [EOL]     assertEquals("Remove DOM text", "", context.getValue("vendor/location[@id = '101']//street")); [EOL]     context.removePath("vendor/location[@id = '101']//street"); [EOL]     assertEquals("Remove DOM element", new Double(0), context.getValue("count(vendor/location[@id = '101']//street)")); [EOL]     context.removePath("vendor/location[@id = '100']/@name"); [EOL]     assertEquals("Remove DOM attribute", new Double(0), context.getValue("count(vendor/location[@id = '100']/@name)")); [EOL] }
public void testRemovePath() { [EOL]     context.removePath("vendor/location[@id = '101']//street/text()"); [EOL]     assertEquals("Remove DOM text", "", context.getValue("vendor/location[@id = '101']//street")); [EOL]     context.removePath("vendor/location[@id = '101']//street"); [EOL]     assertEquals("Remove DOM element", new Double(0), context.getValue("count(vendor/location[@id = '101']//street)")); [EOL]     context.removePath("vendor/location[@id = '100']/@name"); [EOL]     assertEquals("Remove DOM attribute", new Double(0), context.getValue("count(vendor/location[@id = '100']/@name)")); [EOL] }
public void testRemovePath() { [EOL]     context.removePath("vendor/location[@id = '101']//street/text()"); [EOL]     assertEquals("Remove DOM text", "", context.getValue("vendor/location[@id = '101']//street")); [EOL]     context.removePath("vendor/location[@id = '101']//street"); [EOL]     assertEquals("Remove DOM element", new Double(0), context.getValue("count(vendor/location[@id = '101']//street)")); [EOL]     context.removePath("vendor/location[@id = '100']/@name"); [EOL]     assertEquals("Remove DOM attribute", new Double(0), context.getValue("count(vendor/location[@id = '100']/@name)")); [EOL] }
public void testRemovePath() { [EOL]     context.removePath("vendor/location[@id = '101']//street/text()"); [EOL]     assertEquals("Remove DOM text", "", context.getValue("vendor/location[@id = '101']//street")); [EOL]     context.removePath("vendor/location[@id = '101']//street"); [EOL]     assertEquals("Remove DOM element", new Double(0), context.getValue("count(vendor/location[@id = '101']//street)")); [EOL]     context.removePath("vendor/location[@id = '100']/@name"); [EOL]     assertEquals("Remove DOM attribute", new Double(0), context.getValue("count(vendor/location[@id = '100']/@name)")); [EOL] }
public void testCreatePath() { [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]/address/street", "", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[2]/@manager", "", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[1]/@name", "local", "/vendor[1]/location[1]/@name"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "", "/vendor[1]/location[4]/@manager"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/price:foo/price:bar", "", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePath() { [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]/address/street", "", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[2]/@manager", "", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[1]/@name", "local", "/vendor[1]/location[1]/@name"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "", "/vendor[1]/location[4]/@manager"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/price:foo/price:bar", "", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePath() { [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]/address/street", "", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[2]/@manager", "", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[1]/@name", "local", "/vendor[1]/location[1]/@name"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "", "/vendor[1]/location[4]/@manager"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/price:foo/price:bar", "", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePath() { [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]/address/street", "", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[2]/@manager", "", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[1]/@name", "local", "/vendor[1]/location[1]/@name"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "", "/vendor[1]/location[4]/@manager"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/price:foo/price:bar", "", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePath() { [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]/address/street", "", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[2]/@manager", "", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[1]/@name", "local", "/vendor[1]/location[1]/@name"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "", "/vendor[1]/location[4]/@manager"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/price:foo/price:bar", "", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePath() { [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]/address/street", "", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[2]/@manager", "", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[1]/@name", "local", "/vendor[1]/location[1]/@name"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "", "/vendor[1]/location[4]/@manager"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/price:foo/price:bar", "", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePath() { [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]/address/street", "", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[2]/@manager", "", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[1]/@name", "local", "/vendor[1]/location[1]/@name"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "", "/vendor[1]/location[4]/@manager"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/price:foo/price:bar", "", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePath() { [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]/address/street", "", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[2]/@manager", "", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[1]/@name", "local", "/vendor[1]/location[1]/@name"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "", "/vendor[1]/location[4]/@manager"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/price:foo/price:bar", "", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePath() { [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]/address/street", "", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[2]/@manager", "", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[1]/@name", "local", "/vendor[1]/location[1]/@name"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "", "/vendor[1]/location[4]/@manager"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/price:foo/price:bar", "", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testRemovePath() { [EOL]     context.removePath("vendor/location[@id = '101']//street/text()"); [EOL]     assertEquals("Remove DOM text", "", context.getValue("vendor/location[@id = '101']//street")); [EOL]     context.removePath("vendor/location[@id = '101']//street"); [EOL]     assertEquals("Remove DOM element", new Double(0), context.getValue("count(vendor/location[@id = '101']//street)")); [EOL]     context.removePath("vendor/location[@id = '100']/@name"); [EOL]     assertEquals("Remove DOM attribute", new Double(0), context.getValue("count(vendor/location[@id = '100']/@name)")); [EOL] }
public void testRemovePath() { [EOL]     context.removePath("vendor/location[@id = '101']//street/text()"); [EOL]     assertEquals("Remove DOM text", "", context.getValue("vendor/location[@id = '101']//street")); [EOL]     context.removePath("vendor/location[@id = '101']//street"); [EOL]     assertEquals("Remove DOM element", new Double(0), context.getValue("count(vendor/location[@id = '101']//street)")); [EOL]     context.removePath("vendor/location[@id = '100']/@name"); [EOL]     assertEquals("Remove DOM attribute", new Double(0), context.getValue("count(vendor/location[@id = '100']/@name)")); [EOL] }
public void testCreatePath() { [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]/address/street", "", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[2]/@manager", "", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[1]/@name", "local", "/vendor[1]/location[1]/@name"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "", "/vendor[1]/location[4]/@manager"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/price:foo/price:bar", "", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePath() { [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]/address/street", "", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[2]/@manager", "", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[1]/@name", "local", "/vendor[1]/location[1]/@name"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "", "/vendor[1]/location[4]/@manager"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/price:foo/price:bar", "", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePath() { [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]/address/street", "", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[2]/@manager", "", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[1]/@name", "local", "/vendor[1]/location[1]/@name"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "", "/vendor[1]/location[4]/@manager"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/price:foo/price:bar", "", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePath() { [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]/address/street", "", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[2]/@manager", "", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[1]/@name", "local", "/vendor[1]/location[1]/@name"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "", "/vendor[1]/location[4]/@manager"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/price:foo/price:bar", "", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePath() { [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]/address/street", "", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[2]/@manager", "", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[1]/@name", "local", "/vendor[1]/location[1]/@name"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "", "/vendor[1]/location[4]/@manager"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/price:foo/price:bar", "", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePath() { [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]/address/street", "", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[2]/@manager", "", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[1]/@name", "local", "/vendor[1]/location[1]/@name"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "", "/vendor[1]/location[4]/@manager"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/price:foo/price:bar", "", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePath() { [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]/address/street", "", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[2]/@manager", "", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[1]/@name", "local", "/vendor[1]/location[1]/@name"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "", "/vendor[1]/location[4]/@manager"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/price:foo/price:bar", "", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testNodeTypeText() { [EOL]     assertXPathValue(context, "//product/text()[. != '']", "We love this product."); [EOL]     assertXPathPointer(context, "//product/text()", "/vendor[1]/product[1]/text()[1]"); [EOL] }
public void testNodeTypeText() { [EOL]     assertXPathValue(context, "//product/text()[. != '']", "We love this product."); [EOL]     assertXPathPointer(context, "//product/text()", "/vendor[1]/product[1]/text()[1]"); [EOL] }
public void testNodeTypeText() { [EOL]     assertXPathValue(context, "//product/text()[. != '']", "We love this product."); [EOL]     assertXPathPointer(context, "//product/text()", "/vendor[1]/product[1]/text()[1]"); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "Tangerine Drive"); [EOL]     assertXPathPointer(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "/vendor[1]/location[2]/address[1]/street[1]"); [EOL] }
public void testCreatePath() { [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]/address/street", "", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[2]/@manager", "", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[1]/@name", "local", "/vendor[1]/location[1]/@name"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "", "/vendor[1]/location[4]/@manager"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/price:foo/price:bar", "", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePath() { [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]/address/street", "", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[2]/@manager", "", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[1]/@name", "local", "/vendor[1]/location[1]/@name"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "", "/vendor[1]/location[4]/@manager"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/price:foo/price:bar", "", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePath() { [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]/address/street", "", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[2]/@manager", "", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[1]/@name", "local", "/vendor[1]/location[1]/@name"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "", "/vendor[1]/location[4]/@manager"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/price:foo/price:bar", "", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testNodeTypeText() { [EOL]     assertXPathValue(context, "//product/text()[. != '']", "We love this product."); [EOL]     assertXPathPointer(context, "//product/text()", "/vendor[1]/product[1]/text()[1]"); [EOL] }
public void testNodeTypeText() { [EOL]     assertXPathValue(context, "//product/text()[. != '']", "We love this product."); [EOL]     assertXPathPointer(context, "//product/text()", "/vendor[1]/product[1]/text()[1]"); [EOL] }
public void testNodeTypeText() { [EOL]     assertXPathValue(context, "//product/text()[. != '']", "We love this product."); [EOL]     assertXPathPointer(context, "//product/text()", "/vendor[1]/product[1]/text()[1]"); [EOL] }
public void testNodeTypeText() { [EOL]     assertXPathValue(context, "//product/text()[. != '']", "We love this product."); [EOL]     assertXPathPointer(context, "//product/text()", "/vendor[1]/product[1]/text()[1]"); [EOL] }
public void testNodeTypeText() { [EOL]     assertXPathValue(context, "//product/text()[. != '']", "We love this product."); [EOL]     assertXPathPointer(context, "//product/text()", "/vendor[1]/product[1]/text()[1]"); [EOL] }
public void testNodeTypeText() { [EOL]     assertXPathValue(context, "//product/text()[. != '']", "We love this product."); [EOL]     assertXPathPointer(context, "//product/text()", "/vendor[1]/product[1]/text()[1]"); [EOL] }
public void testCreatePath() { [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]/address/street", "", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[2]/@manager", "", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[1]/@name", "local", "/vendor[1]/location[1]/@name"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "", "/vendor[1]/location[4]/@manager"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/price:foo/price:bar", "", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testRelativeContextInheritance() { [EOL]     context.setFunctions(new ClassFunctions(TestFunctions.class, "test")); [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValue(relative, "test:countPointers(strings)", new Integer(3)); [EOL] }
public void testConstructorLookup() { [EOL]     Object[] args = new Object[] { new Integer(1), "x" }; [EOL]     Function func = functions.getFunction("test", "new", args); [EOL]     assertEquals("test:new(1, x)", func.invoke(new Context(null), args).toString(), "foo=1; bar=x"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "Tangerine Drive"); [EOL]     assertXPathPointer(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "/vendor[1]/location[2]/address[1]/street[1]"); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "Tangerine Drive"); [EOL]     assertXPathPointer(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "/vendor[1]/location[2]/address[1]/street[1]"); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "Tangerine Drive"); [EOL]     assertXPathPointer(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "/vendor[1]/location[2]/address[1]/street[1]"); [EOL] }
public void testConstructorLookup() { [EOL]     Object[] args = new Object[] { new Integer(1), "x" }; [EOL]     Function func = functions.getFunction("test", "new", args); [EOL]     assertEquals("test:new(1, x)", func.invoke(new Context(null), args).toString(), "foo=1; bar=x"); [EOL] }
public void testConstructorLookup() { [EOL]     Object[] args = new Object[] { new Integer(1), "x" }; [EOL]     Function func = functions.getFunction("test", "new", args); [EOL]     assertEquals("test:new(1, x)", func.invoke(new Context(null), args).toString(), "foo=1; bar=x"); [EOL] }
public void testConstructorLookup() { [EOL]     Object[] args = new Object[] { new Integer(1), "x" }; [EOL]     Function func = functions.getFunction("test", "new", args); [EOL]     assertEquals("test:new(1, x)", func.invoke(new Context(null), args).toString(), "foo=1; bar=x"); [EOL] }
public void testConstructorLookup() { [EOL]     Object[] args = new Object[] { new Integer(1), "x" }; [EOL]     Function func = functions.getFunction("test", "new", args); [EOL]     assertEquals("test:new(1, x)", func.invoke(new Context(null), args).toString(), "foo=1; bar=x"); [EOL] }
public void testConstructorLookup() { [EOL]     Object[] args = new Object[] { new Integer(1), "x" }; [EOL]     Function func = functions.getFunction("test", "new", args); [EOL]     assertEquals("test:new(1, x)", func.invoke(new Context(null), args).toString(), "foo=1; bar=x"); [EOL] }
public void testConstructorLookup() { [EOL]     Object[] args = new Object[] { new Integer(1), "x" }; [EOL]     Function func = functions.getFunction("test", "new", args); [EOL]     assertEquals("test:new(1, x)", func.invoke(new Context(null), args).toString(), "foo=1; bar=x"); [EOL] }
public void testConstructorLookup() { [EOL]     Object[] args = new Object[] { new Integer(1), "x" }; [EOL]     Function func = functions.getFunction("test", "new", args); [EOL]     assertEquals("test:new(1, x)", func.invoke(new Context(null), args).toString(), "foo=1; bar=x"); [EOL] }
public void testConstructorLookup() { [EOL]     Object[] args = new Object[] { new Integer(1), "x" }; [EOL]     Function func = functions.getFunction("test", "new", args); [EOL]     assertEquals("test:new(1, x)", func.invoke(new Context(null), args).toString(), "foo=1; bar=x"); [EOL] }
public void testConstructorLookup() { [EOL]     Object[] args = new Object[] { new Integer(1), "x" }; [EOL]     Function func = functions.getFunction("test", "new", args); [EOL]     assertEquals("test:new(1, x)", func.invoke(new Context(null), args).toString(), "foo=1; bar=x"); [EOL] }
public void testConstructorLookup() { [EOL]     Object[] args = new Object[] { new Integer(1), "x" }; [EOL]     Function func = functions.getFunction("test", "new", args); [EOL]     assertEquals("test:new(1, x)", func.invoke(new Context(null), args).toString(), "foo=1; bar=x"); [EOL] }
public void testCreatePath() { [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]/address/street", "", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[2]/@manager", "", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[1]/@name", "local", "/vendor[1]/location[1]/@name"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "", "/vendor[1]/location[4]/@manager"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/price:foo/price:bar", "", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePath() { [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]/address/street", "", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[2]/@manager", "", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[1]/@name", "local", "/vendor[1]/location[1]/@name"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "", "/vendor[1]/location[4]/@manager"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/price:foo/price:bar", "", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testRemovePath() { [EOL]     context.removePath("vendor/location[@id = '101']//street/text()"); [EOL]     assertEquals("Remove DOM text", "", context.getValue("vendor/location[@id = '101']//street")); [EOL]     context.removePath("vendor/location[@id = '101']//street"); [EOL]     assertEquals("Remove DOM element", new Double(0), context.getValue("count(vendor/location[@id = '101']//street)")); [EOL]     context.removePath("vendor/location[@id = '100']/@name"); [EOL]     assertEquals("Remove DOM attribute", new Double(0), context.getValue("count(vendor/location[@id = '100']/@name)")); [EOL] }
public void testRemovePath() { [EOL]     context.removePath("vendor/location[@id = '101']//street/text()"); [EOL]     assertEquals("Remove DOM text", "", context.getValue("vendor/location[@id = '101']//street")); [EOL]     context.removePath("vendor/location[@id = '101']//street"); [EOL]     assertEquals("Remove DOM element", new Double(0), context.getValue("count(vendor/location[@id = '101']//street)")); [EOL]     context.removePath("vendor/location[@id = '100']/@name"); [EOL]     assertEquals("Remove DOM attribute", new Double(0), context.getValue("count(vendor/location[@id = '100']/@name)")); [EOL] }
public void testCreatePath() { [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]/address/street", "", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[2]/@manager", "", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[1]/@name", "local", "/vendor[1]/location[1]/@name"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "", "/vendor[1]/location[4]/@manager"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/price:foo/price:bar", "", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePath() { [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]/address/street", "", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[2]/@manager", "", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[1]/@name", "local", "/vendor[1]/location[1]/@name"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "", "/vendor[1]/location[4]/@manager"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/price:foo/price:bar", "", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePath() { [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[3]/address/street", "", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[2]/@manager", "", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/location[1]/@name", "local", "/vendor[1]/location[1]/@name"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "", "/vendor[1]/location[4]/@manager"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePath(context, "/vendor[1]/price:foo/price:bar", "", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "Tangerine Drive"); [EOL]     assertXPathPointer(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "/vendor[1]/location[2]/address[1]/street[1]"); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "Tangerine Drive"); [EOL]     assertXPathPointer(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "/vendor[1]/location[2]/address[1]/street[1]"); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "Tangerine Drive"); [EOL]     assertXPathPointer(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "/vendor[1]/location[2]/address[1]/street[1]"); [EOL] }
public void testRelativeContextAbsolutePath() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "/integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testRelativeContextAbsolutePath() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "/integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]", "", "/vendor[1]/location[3]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[3]/address/street", "Lemon Circle", "/vendor[1]/location[3]/address[1]/street[1]"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[2]/@manager", "John Doe", "/vendor[1]/location[2]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/location[1]/@manager", "John Doe", "/vendor[1]/location[1]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/location[4]/@manager", "James Dow", "/vendor[1]/location[4]/@manager"); [EOL]     assertXPathCreatePathAndSetValue(context, "vendor/product/product:name/attribute::price:language", "English", "/vendor[1]/product[1]/product:name[1]/@price:language"); [EOL]     context.registerNamespace("price", "priceNS"); [EOL]     assertXPathCreatePathAndSetValue(context, "/vendor[1]/price:foo/price:bar", "123.20", "/vendor[1]/price:foo[1]/price:bar[1]"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] }
public void testCreatePathAndSetValueExpandNewCollection() { [EOL]     context.setValue("beans", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/beans[2]/int", new Integer(2), "/beans[2]/int"); [EOL] }
public void testCreatePathAndSetValueExpandNewCollection() { [EOL]     context.setValue("beans", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/beans[2]/int", new Integer(2), "/beans[2]/int"); [EOL] }
public void testCreatePathAndSetValueExpandNewCollection() { [EOL]     context.setValue("beans", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/beans[2]/int", new Integer(2), "/beans[2]/int"); [EOL] }
public void testCreatePathAndSetValueExpandNewCollection() { [EOL]     context.setValue("beans", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/beans[2]/int", new Integer(2), "/beans[2]/int"); [EOL] }
public void testCreatePathAndSetValueExpandNewCollection() { [EOL]     context.setValue("beans", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/beans[2]/int", new Integer(2), "/beans[2]/int"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueExpandNewCollection() { [EOL]     context.setValue("beans", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/beans[2]/int", new Integer(2), "/beans[2]/int"); [EOL] }
public void testCreatePathAndSetValueExpandNewCollection() { [EOL]     context.setValue("beans", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/beans[2]/int", new Integer(2), "/beans[2]/int"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testThreads() throws Throwable { [EOL]     context = JXPathContext.newContext(null, new Double(100)); [EOL]     Thread[] threadArray = new Thread[THREAD_COUNT]; [EOL]     for (int i = 0; i < THREAD_COUNT; i++) { [EOL]         threadArray[i] = new Thread(new StressRunnable()); [EOL]     } [EOL]     for (int i = 0; i < threadArray.length; i++) { [EOL]         threadArray[i].start(); [EOL]     } [EOL]     for (int i = 0; i < threadArray.length; i++) { [EOL]         try { [EOL]             threadArray[i].join(); [EOL]         } catch (InterruptedException e) { [EOL]             assertTrue("Interrupted", false); [EOL]         } [EOL]     } [EOL]     if (exception != null) { [EOL]         throw exception; [EOL]     } [EOL]     assertEquals("Test count", THREAD_COUNT * THREAD_DURATION, count); [EOL] }
public void testThreads() throws Throwable { [EOL]     context = JXPathContext.newContext(null, new Double(100)); [EOL]     Thread[] threadArray = new Thread[THREAD_COUNT]; [EOL]     for (int i = 0; i < THREAD_COUNT; i++) { [EOL]         threadArray[i] = new Thread(new StressRunnable()); [EOL]     } [EOL]     for (int i = 0; i < threadArray.length; i++) { [EOL]         threadArray[i].start(); [EOL]     } [EOL]     for (int i = 0; i < threadArray.length; i++) { [EOL]         try { [EOL]             threadArray[i].join(); [EOL]         } catch (InterruptedException e) { [EOL]             assertTrue("Interrupted", false); [EOL]         } [EOL]     } [EOL]     if (exception != null) { [EOL]         throw exception; [EOL]     } [EOL]     assertEquals("Test count", THREAD_COUNT * THREAD_DURATION, count); [EOL] }
public void testThreads() throws Throwable { [EOL]     context = JXPathContext.newContext(null, new Double(100)); [EOL]     Thread[] threadArray = new Thread[THREAD_COUNT]; [EOL]     for (int i = 0; i < THREAD_COUNT; i++) { [EOL]         threadArray[i] = new Thread(new StressRunnable()); [EOL]     } [EOL]     for (int i = 0; i < threadArray.length; i++) { [EOL]         threadArray[i].start(); [EOL]     } [EOL]     for (int i = 0; i < threadArray.length; i++) { [EOL]         try { [EOL]             threadArray[i].join(); [EOL]         } catch (InterruptedException e) { [EOL]             assertTrue("Interrupted", false); [EOL]         } [EOL]     } [EOL]     if (exception != null) { [EOL]         throw exception; [EOL]     } [EOL]     assertEquals("Test count", THREAD_COUNT * THREAD_DURATION, count); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testRelativeContextAbsolutePath() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "/integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testRelativeContextAbsolutePath() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "/integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testAttributeLang() { [EOL]     assertXPathValue(context, "@xml:lang", "en-US"); [EOL]     assertXPathValue(context, "count(@xml:*)", new Double(1)); [EOL]     assertXPathValue(context, "lang('en')", Boolean.TRUE); [EOL]     assertXPathValue(context, "lang('fr')", Boolean.FALSE); [EOL] }
public void testAttributeLang() { [EOL]     assertXPathValue(context, "@xml:lang", "en-US"); [EOL]     assertXPathValue(context, "count(@xml:*)", new Double(1)); [EOL]     assertXPathValue(context, "lang('en')", Boolean.TRUE); [EOL]     assertXPathValue(context, "lang('fr')", Boolean.FALSE); [EOL] }
public void testAttributeLang() { [EOL]     assertXPathValue(context, "@xml:lang", "en-US"); [EOL]     assertXPathValue(context, "count(@xml:*)", new Double(1)); [EOL]     assertXPathValue(context, "lang('en')", Boolean.TRUE); [EOL]     assertXPathValue(context, "lang('fr')", Boolean.FALSE); [EOL] }
public void testAttributeLang() { [EOL]     assertXPathValue(context, "@xml:lang", "en-US"); [EOL]     assertXPathValue(context, "count(@xml:*)", new Double(1)); [EOL]     assertXPathValue(context, "lang('en')", Boolean.TRUE); [EOL]     assertXPathValue(context, "lang('fr')", Boolean.FALSE); [EOL] }
public void testRelativeContextAbsolutePath() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "/integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testRelativeContextAbsolutePath() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "/integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testRelativeContextAbsolutePath() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "/integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testRelativeContextAbsolutePath() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "/integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testRelativeContextAbsolutePath() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "/integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testRelativeContextAbsolutePath() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "/integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testRelativeContextAbsolutePath() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "/integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testRelativeContextAbsolutePath() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "/integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testRelativeContextAbsolutePath() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "/integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] }
public void testRelativeContextAbsolutePath() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "/integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testRelativeContextAbsolutePath() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "/integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testCreateAndSetValuePathDeclareVariableSetCollectionElement() { [EOL]     assertXPathCreatePathAndSetValue(context, "$stringArray[2]", "Value2", "$stringArray[2]"); [EOL]     assertEquals("Created <" + "$stringArray[1]" + ">", "Value1", context.getValue("$stringArray[1]")); [EOL] }
public void testCreateAndSetValuePathDeclareVariableSetCollectionElement() { [EOL]     assertXPathCreatePathAndSetValue(context, "$stringArray[2]", "Value2", "$stringArray[2]"); [EOL]     assertEquals("Created <" + "$stringArray[1]" + ">", "Value1", context.getValue("$stringArray[1]")); [EOL] }
public void testCreateAndSetValuePathDeclareVariableSetCollectionElement() { [EOL]     assertXPathCreatePathAndSetValue(context, "$stringArray[2]", "Value2", "$stringArray[2]"); [EOL]     assertEquals("Created <" + "$stringArray[1]" + ">", "Value1", context.getValue("$stringArray[1]")); [EOL] }
public void testCreateAndSetValuePathDeclareVariableSetCollectionElement() { [EOL]     assertXPathCreatePathAndSetValue(context, "$stringArray[2]", "Value2", "$stringArray[2]"); [EOL]     assertEquals("Created <" + "$stringArray[1]" + ">", "Value1", context.getValue("$stringArray[1]")); [EOL] }
public void testRelativeContextInheritance() { [EOL]     context.setFunctions(new ClassFunctions(TestFunctions.class, "test")); [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValue(relative, "test:countPointers(strings)", new Integer(3)); [EOL] }
public void testRelativeContextInheritance() { [EOL]     context.setFunctions(new ClassFunctions(TestFunctions.class, "test")); [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValue(relative, "test:countPointers(strings)", new Integer(3)); [EOL] }
public void testRelativeContextInheritance() { [EOL]     context.setFunctions(new ClassFunctions(TestFunctions.class, "test")); [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValue(relative, "test:countPointers(strings)", new Integer(3)); [EOL] }
public void testRelativeContextAbsolutePath() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "/integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testSetValue() { [EOL]     assertXPathSetValue(context, "vendor/location[@id = '100']", "New Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '100']", "<E>New Text</E>", false, false, true, false); [EOL]     assertXPathSetValue(context, "vendor/location[@id = '101']", "Replacement Text"); [EOL]     assertXMLSignature(context, "vendor/location[@id = '101']", "<E>Replacement Text</E>", false, false, true, false); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "Tangerine Drive"); [EOL]     assertXPathPointer(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "/vendor[1]/location[2]/address[1]/street[1]"); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "Tangerine Drive"); [EOL]     assertXPathPointer(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "/vendor[1]/location[2]/address[1]/street[1]"); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "Tangerine Drive"); [EOL]     assertXPathPointer(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "/vendor[1]/location[2]/address[1]/street[1]"); [EOL] }
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "Tangerine Drive"); [EOL]     assertXPathPointer(context, "vendor/location[.//employeeCount = 10]/" + "following-sibling::location//street", "/vendor[1]/location[2]/address[1]/street[1]"); [EOL] }
public void testAxisPrecedingSibling() { [EOL]     assertXPathPointer(context, "//location[2]/preceding-sibling::location//street", "/vendor[1]/location[1]/address[1]/street[1]"); [EOL] }
public void testAxisPrecedingSibling() { [EOL]     assertXPathPointer(context, "//location[2]/preceding-sibling::location//street", "/vendor[1]/location[1]/address[1]/street[1]"); [EOL] }
public void testAxisPrecedingSibling() { [EOL]     assertXPathPointer(context, "//location[2]/preceding-sibling::location//street", "/vendor[1]/location[1]/address[1]/street[1]"); [EOL] }
public void testAxisPrecedingSibling() { [EOL]     assertXPathPointer(context, "//location[2]/preceding-sibling::location//street", "/vendor[1]/location[1]/address[1]/street[1]"); [EOL] }
public void testAxisPrecedingSibling() { [EOL]     assertXPathPointer(context, "//location[2]/preceding-sibling::location//street", "/vendor[1]/location[1]/address[1]/street[1]"); [EOL] }
public void testAxisPrecedingSibling() { [EOL]     assertXPathPointer(context, "//location[2]/preceding-sibling::location//street", "/vendor[1]/location[1]/address[1]/street[1]"); [EOL] }
