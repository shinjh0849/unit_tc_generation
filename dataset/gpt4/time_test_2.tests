public void testGetPropertyEquals() throws Throwable { [EOL]     MockProperty0 prop0 = new MockProperty0(); [EOL]     assertEquals(true, prop0.equals(prop0)); [EOL]     assertEquals(true, prop0.equals(new MockProperty0())); [EOL]     assertEquals(false, prop0.equals(new MockProperty1())); [EOL]     assertEquals(false, prop0.equals(new MockProperty0Val())); [EOL]     assertEquals(false, prop0.equals(new MockProperty0Field())); [EOL]     assertEquals(false, prop0.equals(new MockProperty0Chrono())); [EOL]     assertEquals(false, prop0.equals("")); [EOL]     assertEquals(false, prop0.equals(null)); [EOL] }
public void testGetFieldTypes() throws Throwable { [EOL]     MockPartial mock = new MockPartial(); [EOL]     DateTimeFieldType[] vals = mock.getFieldTypes(); [EOL]     assertEquals(2, vals.length); [EOL]     assertEquals(DateTimeFieldType.year(), vals[0]); [EOL]     assertEquals(DateTimeFieldType.monthOfYear(), vals[1]); [EOL] }
public void testGetFieldTypes() throws Throwable { [EOL]     MockPartial mock = new MockPartial(); [EOL]     DateTimeFieldType[] vals = mock.getFieldTypes(); [EOL]     assertEquals(2, vals.length); [EOL]     assertEquals(DateTimeFieldType.year(), vals[0]); [EOL]     assertEquals(DateTimeFieldType.monthOfYear(), vals[1]); [EOL] }
public void testGetPropertyEquals() throws Throwable { [EOL]     MockProperty0 prop0 = new MockProperty0(); [EOL]     assertEquals(true, prop0.equals(prop0)); [EOL]     assertEquals(true, prop0.equals(new MockProperty0())); [EOL]     assertEquals(false, prop0.equals(new MockProperty1())); [EOL]     assertEquals(false, prop0.equals(new MockProperty0Val())); [EOL]     assertEquals(false, prop0.equals(new MockProperty0Field())); [EOL]     assertEquals(false, prop0.equals(new MockProperty0Chrono())); [EOL]     assertEquals(false, prop0.equals("")); [EOL]     assertEquals(false, prop0.equals(null)); [EOL] }
public void testSerialization() throws Exception { [EOL]     Partial test = createHourMinPartial(COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     Partial result = (Partial) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] }
public void testPropertyCompareToMonth() { [EOL]     YearMonth test1 = new YearMonth(TEST_TIME1); [EOL]     YearMonth test2 = new YearMonth(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWith1() { [EOL]     Partial test = createHourMinPartial(); [EOL]     Partial result = test.with(DateTimeFieldType.hourOfDay(), 15); [EOL]     check(test, 10, 20); [EOL]     check(result, 15, 20); [EOL] }
public void testWith1() { [EOL]     Partial test = createHourMinPartial(); [EOL]     Partial result = test.with(DateTimeFieldType.hourOfDay(), 15); [EOL]     check(test, 10, 20); [EOL]     check(result, 15, 20); [EOL] }
public void testPropertyCompareToMonth() { [EOL]     YearMonth test1 = new YearMonth(TEST_TIME1); [EOL]     YearMonth test2 = new YearMonth(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonth() { [EOL]     YearMonth test1 = new YearMonth(TEST_TIME1); [EOL]     YearMonth test2 = new YearMonth(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonth() { [EOL]     YearMonth test1 = new YearMonth(TEST_TIME1); [EOL]     YearMonth test2 = new YearMonth(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonth() { [EOL]     YearMonth test1 = new YearMonth(TEST_TIME1); [EOL]     YearMonth test2 = new YearMonth(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testToDateTime_RI() { [EOL]     TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); [EOL]     DateTime dt = new DateTime(0L); [EOL]     assertEquals("1970-01-01T01:00:00.000+01:00", dt.toString()); [EOL]     DateTime test = base.toDateTime(dt); [EOL]     check(base, 10, 20, 30, 40); [EOL]     assertEquals("1970-01-01T01:00:00.000+01:00", dt.toString()); [EOL]     assertEquals("1970-01-01T10:20:30.040+01:00", test.toString()); [EOL] }
public void testToDateTime_RI() { [EOL]     TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); [EOL]     DateTime dt = new DateTime(0L); [EOL]     assertEquals("1970-01-01T01:00:00.000+01:00", dt.toString()); [EOL]     DateTime test = base.toDateTime(dt); [EOL]     check(base, 10, 20, 30, 40); [EOL]     assertEquals("1970-01-01T01:00:00.000+01:00", dt.toString()); [EOL]     assertEquals("1970-01-01T10:20:30.040+01:00", test.toString()); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testSerializedYearMonthDay() throws Exception { [EOL]     YearMonthDay test = new YearMonthDay(); [EOL]     loadAndCompare(test, "YearMonthDay", false); [EOL]     inlineCompare(test, false); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testSerializedYearMonthDay() throws Exception { [EOL]     YearMonthDay test = new YearMonthDay(); [EOL]     loadAndCompare(test, "YearMonthDay", false); [EOL]     inlineCompare(test, false); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testSerializedYearMonthDay() throws Exception { [EOL]     YearMonthDay test = new YearMonthDay(); [EOL]     loadAndCompare(test, "YearMonthDay", false); [EOL]     inlineCompare(test, false); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testSerializedYearMonthDay() throws Exception { [EOL]     YearMonthDay test = new YearMonthDay(); [EOL]     loadAndCompare(test, "YearMonthDay", false); [EOL]     inlineCompare(test, false); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testSerializedYearMonthDay() throws Exception { [EOL]     YearMonthDay test = new YearMonthDay(); [EOL]     loadAndCompare(test, "YearMonthDay", false); [EOL]     inlineCompare(test, false); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testSerializedYearMonthDay() throws Exception { [EOL]     YearMonthDay test = new YearMonthDay(); [EOL]     loadAndCompare(test, "YearMonthDay", false); [EOL]     inlineCompare(test, false); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testSerializedYearMonthDay() throws Exception { [EOL]     YearMonthDay test = new YearMonthDay(); [EOL]     loadAndCompare(test, "YearMonthDay", false); [EOL]     inlineCompare(test, false); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testSerializedYearMonthDay() throws Exception { [EOL]     YearMonthDay test = new YearMonthDay(); [EOL]     loadAndCompare(test, "YearMonthDay", false); [EOL]     inlineCompare(test, false); [EOL] }
public void testConstructor_DateTimeZone() throws Throwable { [EOL]     DateTime dt = new DateTime(2005, 6, 8, 23, 59, 0, 0, LONDON); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     YearMonthDay test = new YearMonthDay(LONDON); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2005, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(8, test.getDayOfMonth()); [EOL]     test = new YearMonthDay(PARIS); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2005, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL] }
public void testConstructor_DateTimeZone() throws Throwable { [EOL]     DateTime dt = new DateTime(2005, 6, 8, 23, 59, 0, 0, LONDON); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     YearMonthDay test = new YearMonthDay(LONDON); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2005, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(8, test.getDayOfMonth()); [EOL]     test = new YearMonthDay(PARIS); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2005, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL] }
public void testConstructor_DateTimeZone() throws Throwable { [EOL]     DateTime dt = new DateTime(2005, 6, 8, 23, 59, 0, 0, LONDON); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     YearMonthDay test = new YearMonthDay(LONDON); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2005, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(8, test.getDayOfMonth()); [EOL]     test = new YearMonthDay(PARIS); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2005, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL] }
public void testConstructor_DateTimeZone() throws Throwable { [EOL]     DateTime dt = new DateTime(2005, 6, 8, 23, 59, 0, 0, LONDON); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     YearMonthDay test = new YearMonthDay(LONDON); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2005, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(8, test.getDayOfMonth()); [EOL]     test = new YearMonthDay(PARIS); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2005, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL] }
public void testConstructor_DateTimeZone() throws Throwable { [EOL]     DateTime dt = new DateTime(2005, 6, 8, 23, 59, 0, 0, LONDON); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     YearMonthDay test = new YearMonthDay(LONDON); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2005, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(8, test.getDayOfMonth()); [EOL]     test = new YearMonthDay(PARIS); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2005, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL] }
public void testConstructor_DateTimeZone() throws Throwable { [EOL]     DateTime dt = new DateTime(2005, 6, 8, 23, 59, 0, 0, LONDON); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     YearMonthDay test = new YearMonthDay(LONDON); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2005, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(8, test.getDayOfMonth()); [EOL]     test = new YearMonthDay(PARIS); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2005, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL] }
public void testConstructor_DateTimeZone() throws Throwable { [EOL]     DateTime dt = new DateTime(2005, 6, 8, 23, 59, 0, 0, LONDON); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     YearMonthDay test = new YearMonthDay(LONDON); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2005, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(8, test.getDayOfMonth()); [EOL]     test = new YearMonthDay(PARIS); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2005, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL] }
public void testConstructor_DateTimeZone() throws Throwable { [EOL]     DateTime dt = new DateTime(2005, 6, 8, 23, 59, 0, 0, LONDON); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     YearMonthDay test = new YearMonthDay(LONDON); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2005, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(8, test.getDayOfMonth()); [EOL]     test = new YearMonthDay(PARIS); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2005, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL] }
public void testConstructor_DateTimeZone() throws Throwable { [EOL]     DateTime dt = new DateTime(2005, 6, 8, 23, 59, 0, 0, LONDON); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     YearMonthDay test = new YearMonthDay(LONDON); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2005, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(8, test.getDayOfMonth()); [EOL]     test = new YearMonthDay(PARIS); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2005, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL] }
public void testConstructor_DateTimeZone() throws Throwable { [EOL]     DateTime dt = new DateTime(2005, 6, 8, 23, 59, 0, 0, LONDON); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     YearMonthDay test = new YearMonthDay(LONDON); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2005, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(8, test.getDayOfMonth()); [EOL]     test = new YearMonthDay(PARIS); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2005, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL] }
public void testPropertyCompareToYear() { [EOL]     YearMonthDay test1 = new YearMonthDay(TEST_TIME1); [EOL]     YearMonthDay test2 = new YearMonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToYear() { [EOL]     YearMonthDay test1 = new YearMonthDay(TEST_TIME1); [EOL]     YearMonthDay test2 = new YearMonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToYear() { [EOL]     YearMonthDay test1 = new YearMonthDay(TEST_TIME1); [EOL]     YearMonthDay test2 = new YearMonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToYear() { [EOL]     YearMonthDay test1 = new YearMonthDay(TEST_TIME1); [EOL]     YearMonthDay test2 = new YearMonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToYear() { [EOL]     YearMonthDay test1 = new YearMonthDay(TEST_TIME1); [EOL]     YearMonthDay test2 = new YearMonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToYear() { [EOL]     YearMonthDay test1 = new YearMonthDay(TEST_TIME1); [EOL]     YearMonthDay test2 = new YearMonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToYear() { [EOL]     YearMonthDay test1 = new YearMonthDay(TEST_TIME1); [EOL]     YearMonthDay test2 = new YearMonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToYear() { [EOL]     YearMonthDay test1 = new YearMonthDay(TEST_TIME1); [EOL]     YearMonthDay test2 = new YearMonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToYear() { [EOL]     YearMonthDay test1 = new YearMonthDay(TEST_TIME1); [EOL]     YearMonthDay test2 = new YearMonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithChronologyRetainFields_nullChrono() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     YearMonthDay test = base.withChronologyRetainFields(null); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(COPTIC_UTC, base.getChronology()); [EOL]     check(test, 2005, 6, 9); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL] }
public void testWithChronologyRetainFields_nullChrono() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     YearMonthDay test = base.withChronologyRetainFields(null); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(COPTIC_UTC, base.getChronology()); [EOL]     check(test, 2005, 6, 9); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL] }
public void testWithChronologyRetainFields_nullChrono() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     YearMonthDay test = base.withChronologyRetainFields(null); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(COPTIC_UTC, base.getChronology()); [EOL]     check(test, 2005, 6, 9); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL] }
public void testWithChronologyRetainFields_nullChrono() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     YearMonthDay test = base.withChronologyRetainFields(null); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(COPTIC_UTC, base.getChronology()); [EOL]     check(test, 2005, 6, 9); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL] }
public void testWithChronologyRetainFields_nullChrono() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     YearMonthDay test = base.withChronologyRetainFields(null); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(COPTIC_UTC, base.getChronology()); [EOL]     check(test, 2005, 6, 9); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL] }
public void testWithChronologyRetainFields_nullChrono() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     YearMonthDay test = base.withChronologyRetainFields(null); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(COPTIC_UTC, base.getChronology()); [EOL]     check(test, 2005, 6, 9); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL] }
public void testWithChronologyRetainFields_nullChrono() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     YearMonthDay test = base.withChronologyRetainFields(null); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(COPTIC_UTC, base.getChronology()); [EOL]     check(test, 2005, 6, 9); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL] }
public void testWithChronologyRetainFields_nullChrono() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     YearMonthDay test = base.withChronologyRetainFields(null); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(COPTIC_UTC, base.getChronology()); [EOL]     check(test, 2005, 6, 9); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL] }
public void testWithChronologyRetainFields_nullChrono() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     YearMonthDay test = base.withChronologyRetainFields(null); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(COPTIC_UTC, base.getChronology()); [EOL]     check(test, 2005, 6, 9); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL] }
public void testWithChronologyRetainFields_nullChrono() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     YearMonthDay test = base.withChronologyRetainFields(null); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(COPTIC_UTC, base.getChronology()); [EOL]     check(test, 2005, 6, 9); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL] }
public void testPropertyCompareToYear() { [EOL]     YearMonthDay test1 = new YearMonthDay(TEST_TIME1); [EOL]     YearMonthDay test2 = new YearMonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToYear() { [EOL]     YearMonthDay test1 = new YearMonthDay(TEST_TIME1); [EOL]     YearMonthDay test2 = new YearMonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToYear() { [EOL]     YearMonthDay test1 = new YearMonthDay(TEST_TIME1); [EOL]     YearMonthDay test2 = new YearMonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithChronologyRetainFields_nullChrono() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     YearMonthDay test = base.withChronologyRetainFields(null); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(COPTIC_UTC, base.getChronology()); [EOL]     check(test, 2005, 6, 9); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL] }
public void testWithChronologyRetainFields_nullChrono() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     YearMonthDay test = base.withChronologyRetainFields(null); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(COPTIC_UTC, base.getChronology()); [EOL]     check(test, 2005, 6, 9); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL] }
public void testWithChronologyRetainFields_nullChrono() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     YearMonthDay test = base.withChronologyRetainFields(null); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(COPTIC_UTC, base.getChronology()); [EOL]     check(test, 2005, 6, 9); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL] }
public void testMinus_RP() { [EOL]     YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance()); [EOL]     YearMonthDay result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1)); [EOL]     YearMonthDay expected = new YearMonthDay(2001, 4, 2, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.minus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testMinus_RP() { [EOL]     YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance()); [EOL]     YearMonthDay result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1)); [EOL]     YearMonthDay expected = new YearMonthDay(2001, 4, 2, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.minus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testMinus_RP() { [EOL]     YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance()); [EOL]     YearMonthDay result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1)); [EOL]     YearMonthDay expected = new YearMonthDay(2001, 4, 2, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.minus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testMinus_RP() { [EOL]     YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance()); [EOL]     YearMonthDay result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1)); [EOL]     YearMonthDay expected = new YearMonthDay(2001, 4, 2, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.minus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlusYears_int() { [EOL]     YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance()); [EOL]     YearMonthDay result = test.plusYears(1); [EOL]     YearMonthDay expected = new YearMonthDay(2003, 5, 3, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusYears(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusYears_int() { [EOL]     YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance()); [EOL]     YearMonthDay result = test.plusYears(1); [EOL]     YearMonthDay expected = new YearMonthDay(2003, 5, 3, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusYears(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusYears_int() { [EOL]     YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance()); [EOL]     YearMonthDay result = test.plusYears(1); [EOL]     YearMonthDay expected = new YearMonthDay(2003, 5, 3, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusYears(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusMonths_int() { [EOL]     YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance()); [EOL]     YearMonthDay result = test.plusMonths(1); [EOL]     YearMonthDay expected = new YearMonthDay(2002, 6, 3, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusMonths(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusMonths_int() { [EOL]     YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance()); [EOL]     YearMonthDay result = test.plusMonths(1); [EOL]     YearMonthDay expected = new YearMonthDay(2002, 6, 3, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusMonths(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusMonths_int() { [EOL]     YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance()); [EOL]     YearMonthDay result = test.plusMonths(1); [EOL]     YearMonthDay expected = new YearMonthDay(2002, 6, 3, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusMonths(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusMonths_int() { [EOL]     YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance()); [EOL]     YearMonthDay result = test.plusMonths(1); [EOL]     YearMonthDay expected = new YearMonthDay(2002, 6, 3, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusMonths(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusMonths_int() { [EOL]     YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance()); [EOL]     YearMonthDay result = test.plusMonths(1); [EOL]     YearMonthDay expected = new YearMonthDay(2002, 6, 3, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusMonths(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusMonths_int() { [EOL]     YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance()); [EOL]     YearMonthDay result = test.plusMonths(1); [EOL]     YearMonthDay expected = new YearMonthDay(2002, 6, 3, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusMonths(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusMonths_int() { [EOL]     YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance()); [EOL]     YearMonthDay result = test.plusMonths(1); [EOL]     YearMonthDay expected = new YearMonthDay(2002, 6, 3, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusMonths(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinus_RP() { [EOL]     YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance()); [EOL]     YearMonthDay result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1)); [EOL]     YearMonthDay expected = new YearMonthDay(2001, 4, 2, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.minus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testMinus_RP() { [EOL]     YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance()); [EOL]     YearMonthDay result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1)); [EOL]     YearMonthDay expected = new YearMonthDay(2001, 4, 2, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.minus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testMinusDays_int() { [EOL]     YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance()); [EOL]     YearMonthDay result = test.minusDays(1); [EOL]     YearMonthDay expected = new YearMonthDay(2002, 5, 2, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusDays(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusDays_int() { [EOL]     YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance()); [EOL]     YearMonthDay result = test.minusDays(1); [EOL]     YearMonthDay expected = new YearMonthDay(2002, 5, 2, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusDays(0); [EOL]     assertSame(test, result); [EOL] }
public void testToLocalDate() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_UTC); [EOL]     LocalDate test = base.toLocalDate(); [EOL]     assertEquals(new LocalDate(2005, 6, 9, COPTIC_UTC), test); [EOL] }
public void testToInterval() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime start = base.toDateTime(TimeOfDay.MIDNIGHT); [EOL]     DateTime end = start.plus(Period.days(1)); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testToInterval() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime start = base.toDateTime(TimeOfDay.MIDNIGHT); [EOL]     DateTime end = start.plus(Period.days(1)); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testToInterval() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime start = base.toDateTime(TimeOfDay.MIDNIGHT); [EOL]     DateTime end = start.plus(Period.days(1)); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testToInterval() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime start = base.toDateTime(TimeOfDay.MIDNIGHT); [EOL]     DateTime end = start.plus(Period.days(1)); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testToInterval() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime start = base.toDateTime(TimeOfDay.MIDNIGHT); [EOL]     DateTime end = start.plus(Period.days(1)); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testPropertyCompareToYear() { [EOL]     YearMonthDay test1 = new YearMonthDay(TEST_TIME1); [EOL]     YearMonthDay test2 = new YearMonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testToString() { [EOL]     YearMonthDay test = new YearMonthDay(2002, 6, 9); [EOL]     assertEquals("2002-06-09", test.toString()); [EOL] }
public void testPropertyCompareToYear() { [EOL]     YearMonthDay test1 = new YearMonthDay(TEST_TIME1); [EOL]     YearMonthDay test2 = new YearMonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToYear() { [EOL]     YearMonthDay test1 = new YearMonthDay(TEST_TIME1); [EOL]     YearMonthDay test2 = new YearMonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToYear() { [EOL]     YearMonthDay test1 = new YearMonthDay(TEST_TIME1); [EOL]     YearMonthDay test2 = new YearMonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToYear() { [EOL]     YearMonthDay test1 = new YearMonthDay(TEST_TIME1); [EOL]     YearMonthDay test2 = new YearMonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToYear() { [EOL]     YearMonthDay test1 = new YearMonthDay(TEST_TIME1); [EOL]     YearMonthDay test2 = new YearMonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToYear() { [EOL]     YearMonthDay test1 = new YearMonthDay(TEST_TIME1); [EOL]     YearMonthDay test2 = new YearMonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToYear() { [EOL]     YearMonthDay test1 = new YearMonthDay(TEST_TIME1); [EOL]     YearMonthDay test2 = new YearMonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToYear() { [EOL]     YearMonthDay test1 = new YearMonthDay(TEST_TIME1); [EOL]     YearMonthDay test2 = new YearMonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToYear() { [EOL]     YearMonthDay test1 = new YearMonthDay(TEST_TIME1); [EOL]     YearMonthDay test2 = new YearMonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToYear() { [EOL]     YearMonthDay test1 = new YearMonthDay(TEST_TIME1); [EOL]     YearMonthDay test2 = new YearMonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToYear() { [EOL]     YearMonthDay test1 = new YearMonthDay(TEST_TIME1); [EOL]     YearMonthDay test2 = new YearMonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToYear() { [EOL]     YearMonthDay test1 = new YearMonthDay(TEST_TIME1); [EOL]     YearMonthDay test2 = new YearMonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToYear() { [EOL]     YearMonthDay test1 = new YearMonthDay(TEST_TIME1); [EOL]     YearMonthDay test2 = new YearMonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToYear() { [EOL]     YearMonthDay test1 = new YearMonthDay(TEST_TIME1); [EOL]     YearMonthDay test2 = new YearMonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToYear() { [EOL]     YearMonthDay test1 = new YearMonthDay(TEST_TIME1); [EOL]     YearMonthDay test2 = new YearMonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToYear() { [EOL]     YearMonthDay test1 = new YearMonthDay(TEST_TIME1); [EOL]     YearMonthDay test2 = new YearMonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToYear() { [EOL]     YearMonthDay test1 = new YearMonthDay(TEST_TIME1); [EOL]     YearMonthDay test2 = new YearMonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToYear() { [EOL]     YearMonthDay test1 = new YearMonthDay(TEST_TIME1); [EOL]     YearMonthDay test2 = new YearMonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToYear() { [EOL]     YearMonthDay test1 = new YearMonthDay(TEST_TIME1); [EOL]     YearMonthDay test2 = new YearMonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToYear() { [EOL]     YearMonthDay test1 = new YearMonthDay(TEST_TIME1); [EOL]     YearMonthDay test2 = new YearMonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToYear() { [EOL]     YearMonthDay test1 = new YearMonthDay(TEST_TIME1); [EOL]     YearMonthDay test2 = new YearMonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToYear() { [EOL]     YearMonthDay test1 = new YearMonthDay(TEST_TIME1); [EOL]     YearMonthDay test2 = new YearMonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToYear() { [EOL]     YearMonthDay test1 = new YearMonthDay(TEST_TIME1); [EOL]     YearMonthDay test2 = new YearMonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToYear() { [EOL]     YearMonthDay test1 = new YearMonthDay(TEST_TIME1); [EOL]     YearMonthDay test2 = new YearMonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToYear() { [EOL]     YearMonthDay test1 = new YearMonthDay(TEST_TIME1); [EOL]     YearMonthDay test2 = new YearMonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToYear() { [EOL]     YearMonthDay test1 = new YearMonthDay(TEST_TIME1); [EOL]     YearMonthDay test2 = new YearMonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToYear() { [EOL]     YearMonthDay test1 = new YearMonthDay(TEST_TIME1); [EOL]     YearMonthDay test2 = new YearMonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToYear() { [EOL]     YearMonthDay test1 = new YearMonthDay(TEST_TIME1); [EOL]     YearMonthDay test2 = new YearMonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToYear() { [EOL]     YearMonthDay test1 = new YearMonthDay(TEST_TIME1); [EOL]     YearMonthDay test2 = new YearMonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyWithMaximumValueDayOfMonth() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.dayOfMonth().withMaximumValue(); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 6, 30); [EOL] }
public void testSupportedType() throws Exception { [EOL]     assertEquals(ReadablePartial.class, ReadablePartialConverter.INSTANCE.getSupportedType()); [EOL] }
public void testGetDurationMillis_Object() throws Exception { [EOL]     assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L))); [EOL] }
public void testGetDurationMillis_Object() throws Exception { [EOL]     assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L))); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testFactoryFieldDifference4() throws Throwable { [EOL]     DateTimeFieldType[] types = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfWeek() }; [EOL]     YearMonthDay start = new YearMonthDay(2005, 4, 9); [EOL]     Partial end = new Partial(types, new int[] { 1, 2, 3 }); [EOL]     try { [EOL]         Period.fieldDifference(start, end); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testFactoryFieldDifference4() throws Throwable { [EOL]     DateTimeFieldType[] types = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfWeek() }; [EOL]     YearMonthDay start = new YearMonthDay(2005, 4, 9); [EOL]     Partial end = new Partial(types, new int[] { 1, 2, 3 }); [EOL]     try { [EOL]         Period.fieldDifference(start, end); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testFactoryFieldDifference4() throws Throwable { [EOL]     DateTimeFieldType[] types = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfWeek() }; [EOL]     YearMonthDay start = new YearMonthDay(2005, 4, 9); [EOL]     Partial end = new Partial(types, new int[] { 1, 2, 3 }); [EOL]     try { [EOL]         Period.fieldDifference(start, end); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testFactoryFieldDifference4() throws Throwable { [EOL]     DateTimeFieldType[] types = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfWeek() }; [EOL]     YearMonthDay start = new YearMonthDay(2005, 4, 9); [EOL]     Partial end = new Partial(types, new int[] { 1, 2, 3 }); [EOL]     try { [EOL]         Period.fieldDifference(start, end); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testFactoryFieldDifference4() throws Throwable { [EOL]     DateTimeFieldType[] types = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfWeek() }; [EOL]     YearMonthDay start = new YearMonthDay(2005, 4, 9); [EOL]     Partial end = new Partial(types, new int[] { 1, 2, 3 }); [EOL]     try { [EOL]         Period.fieldDifference(start, end); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testFactoryFieldDifference4() throws Throwable { [EOL]     DateTimeFieldType[] types = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfWeek() }; [EOL]     YearMonthDay start = new YearMonthDay(2005, 4, 9); [EOL]     Partial end = new Partial(types, new int[] { 1, 2, 3 }); [EOL]     try { [EOL]         Period.fieldDifference(start, end); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testConstructor1() throws Throwable { [EOL]     Period test = new Period(); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] }
public void testGetPeriodType() { [EOL]     Period test = new Period(0L); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL] }
public void testGetPeriodType() { [EOL]     Period test = new Period(0L); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL] }
public void testGetPeriodType() { [EOL]     Period test = new Period(0L); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL] }
public void testConstructor_long_PeriodType_Chronology4() throws Throwable { [EOL]     long length = 4 * DateTimeConstants.MILLIS_PER_DAY + 5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE + 7 * DateTimeConstants.MILLIS_PER_SECOND + 8; [EOL]     Period test = new Period(length, (PeriodType) null, (Chronology) null); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals((4 * 24) + 5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] }
public void testConstructor_long_PeriodType_Chronology4() throws Throwable { [EOL]     long length = 4 * DateTimeConstants.MILLIS_PER_DAY + 5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE + 7 * DateTimeConstants.MILLIS_PER_SECOND + 8; [EOL]     Period test = new Period(length, (PeriodType) null, (Chronology) null); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals((4 * 24) + 5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] }
public void testConstructor_long_PeriodType_Chronology4() throws Throwable { [EOL]     long length = 4 * DateTimeConstants.MILLIS_PER_DAY + 5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE + 7 * DateTimeConstants.MILLIS_PER_SECOND + 8; [EOL]     Period test = new Period(length, (PeriodType) null, (Chronology) null); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals((4 * 24) + 5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] }
public void testToPeriod() { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 7, 8, 9, 10, COPTIC_PARIS); [EOL]     DateTime dt2 = new DateTime(2005, 8, 13, 12, 14, 16, 18, COPTIC_PARIS); [EOL]     Interval base = new Interval(dt1, dt2); [EOL]     Period test = base.toPeriod(); [EOL]     Period expected = new Period(dt1, dt2, PeriodType.standard()); [EOL]     assertEquals(expected, test); [EOL] }
public void testToPeriod() { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 7, 8, 9, 10, COPTIC_PARIS); [EOL]     DateTime dt2 = new DateTime(2005, 8, 13, 12, 14, 16, 18, COPTIC_PARIS); [EOL]     Interval base = new Interval(dt1, dt2); [EOL]     Period test = base.toPeriod(); [EOL]     Period expected = new Period(dt1, dt2, PeriodType.standard()); [EOL]     assertEquals(expected, test); [EOL] }
public void testToPeriod_PeriodType1() { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 7, 8, 9, 10, COPTIC_PARIS); [EOL]     DateTime dt2 = new DateTime(2005, 8, 13, 12, 14, 16, 18, COPTIC_PARIS); [EOL]     Interval base = new Interval(dt1, dt2); [EOL]     Period test = base.toPeriod(null); [EOL]     Period expected = new Period(dt1, dt2, PeriodType.standard()); [EOL]     assertEquals(expected, test); [EOL] }
public void testToPeriod_PeriodType1() { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 7, 8, 9, 10, COPTIC_PARIS); [EOL]     DateTime dt2 = new DateTime(2005, 8, 13, 12, 14, 16, 18, COPTIC_PARIS); [EOL]     Interval base = new Interval(dt1, dt2); [EOL]     Period test = base.toPeriod(null); [EOL]     Period expected = new Period(dt1, dt2, PeriodType.standard()); [EOL]     assertEquals(expected, test); [EOL] }
public void testToPeriod_PeriodType1() { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 7, 8, 9, 10, COPTIC_PARIS); [EOL]     DateTime dt2 = new DateTime(2005, 8, 13, 12, 14, 16, 18, COPTIC_PARIS); [EOL]     Interval base = new Interval(dt1, dt2); [EOL]     Period test = base.toPeriod(null); [EOL]     Period expected = new Period(dt1, dt2, PeriodType.standard()); [EOL]     assertEquals(expected, test); [EOL] }
public void testToPeriod_PeriodType1() { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 7, 8, 9, 10, COPTIC_PARIS); [EOL]     DateTime dt2 = new DateTime(2005, 8, 13, 12, 14, 16, 18, COPTIC_PARIS); [EOL]     Interval base = new Interval(dt1, dt2); [EOL]     Period test = base.toPeriod(null); [EOL]     Period expected = new Period(dt1, dt2, PeriodType.standard()); [EOL]     assertEquals(expected, test); [EOL] }
public void testToPeriodFrom_PeriodType() { [EOL]     long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L; [EOL]     Duration test = new Duration(length); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     Period result = test.toPeriodFrom(dt, PeriodType.standard().withMillisRemoved()); [EOL]     assertEquals(new Period(dt, test, PeriodType.standard().withMillisRemoved()), result); [EOL] }
public void testConstructor_RD_RI_PeriodType1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     Duration dur = new Interval(dt1, dt2).toDuration(); [EOL]     Period test = new Period(dur, dt2, PeriodType.yearDayTime()); [EOL]     assertEquals(PeriodType.yearDayTime(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(31, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testToPeriod_Chronology() { [EOL]     long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L; [EOL]     Duration test = new Duration(length); [EOL]     Period result = test.toPeriod(ISOChronology.getInstanceUTC()); [EOL]     assertEquals(new Period(test, ISOChronology.getInstanceUTC()), result); [EOL]     assertEquals(new Period(test.getMillis(), ISOChronology.getInstanceUTC()), result); [EOL] }
public void testToPeriod_Chronology() { [EOL]     long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L; [EOL]     Duration test = new Duration(length); [EOL]     Period result = test.toPeriod(ISOChronology.getInstanceUTC()); [EOL]     assertEquals(new Period(test, ISOChronology.getInstanceUTC()), result); [EOL]     assertEquals(new Period(test.getMillis(), ISOChronology.getInstanceUTC()), result); [EOL] }
public void testToPeriod_PeriodType_Chronology() { [EOL]     long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L; [EOL]     Duration test = new Duration(length); [EOL]     Period result = test.toPeriod(PeriodType.standard().withMillisRemoved(), ISOChronology.getInstanceUTC()); [EOL]     assertEquals(new Period(test, PeriodType.standard().withMillisRemoved(), ISOChronology.getInstanceUTC()), result); [EOL]     assertEquals(new Period(test.getMillis(), PeriodType.standard().withMillisRemoved(), ISOChronology.getInstanceUTC()), result); [EOL] }
public void testConstructor_long_PeriodType_Chronology4() throws Throwable { [EOL]     long length = 4 * DateTimeConstants.MILLIS_PER_DAY + 5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE + 7 * DateTimeConstants.MILLIS_PER_SECOND + 8; [EOL]     Period test = new Period(length, (PeriodType) null, (Chronology) null); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals((4 * 24) + 5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] }
public void testConstructor_long_PeriodType_Chronology4() throws Throwable { [EOL]     long length = 4 * DateTimeConstants.MILLIS_PER_DAY + 5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE + 7 * DateTimeConstants.MILLIS_PER_SECOND + 8; [EOL]     Period test = new Period(length, (PeriodType) null, (Chronology) null); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals((4 * 24) + 5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] }
public void testConstructor_long_PeriodType_Chronology4() throws Throwable { [EOL]     long length = 4 * DateTimeConstants.MILLIS_PER_DAY + 5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE + 7 * DateTimeConstants.MILLIS_PER_SECOND + 8; [EOL]     Period test = new Period(length, (PeriodType) null, (Chronology) null); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals((4 * 24) + 5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] }
public void testConstructor_long_PeriodType_Chronology4() throws Throwable { [EOL]     long length = 4 * DateTimeConstants.MILLIS_PER_DAY + 5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE + 7 * DateTimeConstants.MILLIS_PER_SECOND + 8; [EOL]     Period test = new Period(length, (PeriodType) null, (Chronology) null); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals((4 * 24) + 5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] }
public void testConstructor_long_PeriodType_Chronology4() throws Throwable { [EOL]     long length = 4 * DateTimeConstants.MILLIS_PER_DAY + 5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE + 7 * DateTimeConstants.MILLIS_PER_SECOND + 8; [EOL]     Period test = new Period(length, (PeriodType) null, (Chronology) null); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals((4 * 24) + 5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] }
public void testConstructor_long_PeriodType_Chronology4() throws Throwable { [EOL]     long length = 4 * DateTimeConstants.MILLIS_PER_DAY + 5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE + 7 * DateTimeConstants.MILLIS_PER_SECOND + 8; [EOL]     Period test = new Period(length, (PeriodType) null, (Chronology) null); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals((4 * 24) + 5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] }
public void testConstructor_long_PeriodType_Chronology4() throws Throwable { [EOL]     long length = 4 * DateTimeConstants.MILLIS_PER_DAY + 5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE + 7 * DateTimeConstants.MILLIS_PER_SECOND + 8; [EOL]     Period test = new Period(length, (PeriodType) null, (Chronology) null); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals((4 * 24) + 5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] }
public void testConstructor_long_PeriodType_Chronology4() throws Throwable { [EOL]     long length = 4 * DateTimeConstants.MILLIS_PER_DAY + 5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE + 7 * DateTimeConstants.MILLIS_PER_SECOND + 8; [EOL]     Period test = new Period(length, (PeriodType) null, (Chronology) null); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals((4 * 24) + 5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] }
public void testWithFields1() { [EOL]     Period test1 = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     Period test2 = new Period(0, 0, 0, 0, 0, 0, 0, 9, PeriodType.millis()); [EOL]     Period result = test1.withFields(test2); [EOL]     assertEquals(new Period(1, 2, 3, 4, 5, 6, 7, 8), test1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 9, PeriodType.millis()), test2); [EOL]     assertEquals(new Period(1, 2, 3, 4, 5, 6, 7, 9), result); [EOL] }
public void testWithFields1() { [EOL]     Period test1 = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     Period test2 = new Period(0, 0, 0, 0, 0, 0, 0, 9, PeriodType.millis()); [EOL]     Period result = test1.withFields(test2); [EOL]     assertEquals(new Period(1, 2, 3, 4, 5, 6, 7, 8), test1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 9, PeriodType.millis()), test2); [EOL]     assertEquals(new Period(1, 2, 3, 4, 5, 6, 7, 9), result); [EOL] }
public void testWithFieldAdded2() { [EOL]     Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     try { [EOL]         test.withFieldAdded(null, 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithFieldAdded2() { [EOL]     Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     try { [EOL]         test.withFieldAdded(null, 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithFieldAdded2() { [EOL]     Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     try { [EOL]         test.withFieldAdded(null, 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWith() { [EOL]     Period test; [EOL]     test = Period.years(5).withYears(1); [EOL]     assertEquals(test, new Period(1, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard())); [EOL]     test = Period.months(5).withMonths(1); [EOL]     assertEquals(test, new Period(0, 1, 0, 0, 0, 0, 0, 0, PeriodType.standard())); [EOL]     test = Period.weeks(5).withWeeks(1); [EOL]     assertEquals(test, new Period(0, 0, 1, 0, 0, 0, 0, 0, PeriodType.standard())); [EOL]     test = Period.days(5).withDays(1); [EOL]     assertEquals(test, new Period(0, 0, 0, 1, 0, 0, 0, 0, PeriodType.standard())); [EOL]     test = Period.hours(5).withHours(1); [EOL]     assertEquals(test, new Period(0, 0, 0, 0, 1, 0, 0, 0, PeriodType.standard())); [EOL]     test = Period.minutes(5).withMinutes(1); [EOL]     assertEquals(test, new Period(0, 0, 0, 0, 0, 1, 0, 0, PeriodType.standard())); [EOL]     test = Period.seconds(5).withSeconds(1); [EOL]     assertEquals(test, new Period(0, 0, 0, 0, 0, 0, 1, 0, PeriodType.standard())); [EOL]     test = Period.millis(5).withMillis(1); [EOL]     assertEquals(test, new Period(0, 0, 0, 0, 0, 0, 0, 1, PeriodType.standard())); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.withYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testWith() { [EOL]     Period test; [EOL]     test = Period.years(5).withYears(1); [EOL]     assertEquals(test, new Period(1, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard())); [EOL]     test = Period.months(5).withMonths(1); [EOL]     assertEquals(test, new Period(0, 1, 0, 0, 0, 0, 0, 0, PeriodType.standard())); [EOL]     test = Period.weeks(5).withWeeks(1); [EOL]     assertEquals(test, new Period(0, 0, 1, 0, 0, 0, 0, 0, PeriodType.standard())); [EOL]     test = Period.days(5).withDays(1); [EOL]     assertEquals(test, new Period(0, 0, 0, 1, 0, 0, 0, 0, PeriodType.standard())); [EOL]     test = Period.hours(5).withHours(1); [EOL]     assertEquals(test, new Period(0, 0, 0, 0, 1, 0, 0, 0, PeriodType.standard())); [EOL]     test = Period.minutes(5).withMinutes(1); [EOL]     assertEquals(test, new Period(0, 0, 0, 0, 0, 1, 0, 0, PeriodType.standard())); [EOL]     test = Period.seconds(5).withSeconds(1); [EOL]     assertEquals(test, new Period(0, 0, 0, 0, 0, 0, 1, 0, PeriodType.standard())); [EOL]     test = Period.millis(5).withMillis(1); [EOL]     assertEquals(test, new Period(0, 0, 0, 0, 0, 0, 0, 1, PeriodType.standard())); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.withYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testWith() { [EOL]     Period test; [EOL]     test = Period.years(5).withYears(1); [EOL]     assertEquals(test, new Period(1, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard())); [EOL]     test = Period.months(5).withMonths(1); [EOL]     assertEquals(test, new Period(0, 1, 0, 0, 0, 0, 0, 0, PeriodType.standard())); [EOL]     test = Period.weeks(5).withWeeks(1); [EOL]     assertEquals(test, new Period(0, 0, 1, 0, 0, 0, 0, 0, PeriodType.standard())); [EOL]     test = Period.days(5).withDays(1); [EOL]     assertEquals(test, new Period(0, 0, 0, 1, 0, 0, 0, 0, PeriodType.standard())); [EOL]     test = Period.hours(5).withHours(1); [EOL]     assertEquals(test, new Period(0, 0, 0, 0, 1, 0, 0, 0, PeriodType.standard())); [EOL]     test = Period.minutes(5).withMinutes(1); [EOL]     assertEquals(test, new Period(0, 0, 0, 0, 0, 1, 0, 0, PeriodType.standard())); [EOL]     test = Period.seconds(5).withSeconds(1); [EOL]     assertEquals(test, new Period(0, 0, 0, 0, 0, 0, 1, 0, PeriodType.standard())); [EOL]     test = Period.millis(5).withMillis(1); [EOL]     assertEquals(test, new Period(0, 0, 0, 0, 0, 0, 0, 1, PeriodType.standard())); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.withYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testWith() { [EOL]     Period test; [EOL]     test = Period.years(5).withYears(1); [EOL]     assertEquals(test, new Period(1, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard())); [EOL]     test = Period.months(5).withMonths(1); [EOL]     assertEquals(test, new Period(0, 1, 0, 0, 0, 0, 0, 0, PeriodType.standard())); [EOL]     test = Period.weeks(5).withWeeks(1); [EOL]     assertEquals(test, new Period(0, 0, 1, 0, 0, 0, 0, 0, PeriodType.standard())); [EOL]     test = Period.days(5).withDays(1); [EOL]     assertEquals(test, new Period(0, 0, 0, 1, 0, 0, 0, 0, PeriodType.standard())); [EOL]     test = Period.hours(5).withHours(1); [EOL]     assertEquals(test, new Period(0, 0, 0, 0, 1, 0, 0, 0, PeriodType.standard())); [EOL]     test = Period.minutes(5).withMinutes(1); [EOL]     assertEquals(test, new Period(0, 0, 0, 0, 0, 1, 0, 0, PeriodType.standard())); [EOL]     test = Period.seconds(5).withSeconds(1); [EOL]     assertEquals(test, new Period(0, 0, 0, 0, 0, 0, 1, 0, PeriodType.standard())); [EOL]     test = Period.millis(5).withMillis(1); [EOL]     assertEquals(test, new Period(0, 0, 0, 0, 0, 0, 0, 1, PeriodType.standard())); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.withYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testWith() { [EOL]     Period test; [EOL]     test = Period.years(5).withYears(1); [EOL]     assertEquals(test, new Period(1, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard())); [EOL]     test = Period.months(5).withMonths(1); [EOL]     assertEquals(test, new Period(0, 1, 0, 0, 0, 0, 0, 0, PeriodType.standard())); [EOL]     test = Period.weeks(5).withWeeks(1); [EOL]     assertEquals(test, new Period(0, 0, 1, 0, 0, 0, 0, 0, PeriodType.standard())); [EOL]     test = Period.days(5).withDays(1); [EOL]     assertEquals(test, new Period(0, 0, 0, 1, 0, 0, 0, 0, PeriodType.standard())); [EOL]     test = Period.hours(5).withHours(1); [EOL]     assertEquals(test, new Period(0, 0, 0, 0, 1, 0, 0, 0, PeriodType.standard())); [EOL]     test = Period.minutes(5).withMinutes(1); [EOL]     assertEquals(test, new Period(0, 0, 0, 0, 0, 1, 0, 0, PeriodType.standard())); [EOL]     test = Period.seconds(5).withSeconds(1); [EOL]     assertEquals(test, new Period(0, 0, 0, 0, 0, 0, 1, 0, PeriodType.standard())); [EOL]     test = Period.millis(5).withMillis(1); [EOL]     assertEquals(test, new Period(0, 0, 0, 0, 0, 0, 0, 1, PeriodType.standard())); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.withYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testWith() { [EOL]     Period test; [EOL]     test = Period.years(5).withYears(1); [EOL]     assertEquals(test, new Period(1, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard())); [EOL]     test = Period.months(5).withMonths(1); [EOL]     assertEquals(test, new Period(0, 1, 0, 0, 0, 0, 0, 0, PeriodType.standard())); [EOL]     test = Period.weeks(5).withWeeks(1); [EOL]     assertEquals(test, new Period(0, 0, 1, 0, 0, 0, 0, 0, PeriodType.standard())); [EOL]     test = Period.days(5).withDays(1); [EOL]     assertEquals(test, new Period(0, 0, 0, 1, 0, 0, 0, 0, PeriodType.standard())); [EOL]     test = Period.hours(5).withHours(1); [EOL]     assertEquals(test, new Period(0, 0, 0, 0, 1, 0, 0, 0, PeriodType.standard())); [EOL]     test = Period.minutes(5).withMinutes(1); [EOL]     assertEquals(test, new Period(0, 0, 0, 0, 0, 1, 0, 0, PeriodType.standard())); [EOL]     test = Period.seconds(5).withSeconds(1); [EOL]     assertEquals(test, new Period(0, 0, 0, 0, 0, 0, 1, 0, PeriodType.standard())); [EOL]     test = Period.millis(5).withMillis(1); [EOL]     assertEquals(test, new Period(0, 0, 0, 0, 0, 0, 0, 1, PeriodType.standard())); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.withYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testWith() { [EOL]     Period test; [EOL]     test = Period.years(5).withYears(1); [EOL]     assertEquals(test, new Period(1, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard())); [EOL]     test = Period.months(5).withMonths(1); [EOL]     assertEquals(test, new Period(0, 1, 0, 0, 0, 0, 0, 0, PeriodType.standard())); [EOL]     test = Period.weeks(5).withWeeks(1); [EOL]     assertEquals(test, new Period(0, 0, 1, 0, 0, 0, 0, 0, PeriodType.standard())); [EOL]     test = Period.days(5).withDays(1); [EOL]     assertEquals(test, new Period(0, 0, 0, 1, 0, 0, 0, 0, PeriodType.standard())); [EOL]     test = Period.hours(5).withHours(1); [EOL]     assertEquals(test, new Period(0, 0, 0, 0, 1, 0, 0, 0, PeriodType.standard())); [EOL]     test = Period.minutes(5).withMinutes(1); [EOL]     assertEquals(test, new Period(0, 0, 0, 0, 0, 1, 0, 0, PeriodType.standard())); [EOL]     test = Period.seconds(5).withSeconds(1); [EOL]     assertEquals(test, new Period(0, 0, 0, 0, 0, 0, 1, 0, PeriodType.standard())); [EOL]     test = Period.millis(5).withMillis(1); [EOL]     assertEquals(test, new Period(0, 0, 0, 0, 0, 0, 0, 1, PeriodType.standard())); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.withYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testWith() { [EOL]     Period test; [EOL]     test = Period.years(5).withYears(1); [EOL]     assertEquals(test, new Period(1, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard())); [EOL]     test = Period.months(5).withMonths(1); [EOL]     assertEquals(test, new Period(0, 1, 0, 0, 0, 0, 0, 0, PeriodType.standard())); [EOL]     test = Period.weeks(5).withWeeks(1); [EOL]     assertEquals(test, new Period(0, 0, 1, 0, 0, 0, 0, 0, PeriodType.standard())); [EOL]     test = Period.days(5).withDays(1); [EOL]     assertEquals(test, new Period(0, 0, 0, 1, 0, 0, 0, 0, PeriodType.standard())); [EOL]     test = Period.hours(5).withHours(1); [EOL]     assertEquals(test, new Period(0, 0, 0, 0, 1, 0, 0, 0, PeriodType.standard())); [EOL]     test = Period.minutes(5).withMinutes(1); [EOL]     assertEquals(test, new Period(0, 0, 0, 0, 0, 1, 0, 0, PeriodType.standard())); [EOL]     test = Period.seconds(5).withSeconds(1); [EOL]     assertEquals(test, new Period(0, 0, 0, 0, 0, 0, 1, 0, PeriodType.standard())); [EOL]     test = Period.millis(5).withMillis(1); [EOL]     assertEquals(test, new Period(0, 0, 0, 0, 0, 0, 0, 1, PeriodType.standard())); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.withYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testWith() { [EOL]     Period test; [EOL]     test = Period.years(5).withYears(1); [EOL]     assertEquals(test, new Period(1, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard())); [EOL]     test = Period.months(5).withMonths(1); [EOL]     assertEquals(test, new Period(0, 1, 0, 0, 0, 0, 0, 0, PeriodType.standard())); [EOL]     test = Period.weeks(5).withWeeks(1); [EOL]     assertEquals(test, new Period(0, 0, 1, 0, 0, 0, 0, 0, PeriodType.standard())); [EOL]     test = Period.days(5).withDays(1); [EOL]     assertEquals(test, new Period(0, 0, 0, 1, 0, 0, 0, 0, PeriodType.standard())); [EOL]     test = Period.hours(5).withHours(1); [EOL]     assertEquals(test, new Period(0, 0, 0, 0, 1, 0, 0, 0, PeriodType.standard())); [EOL]     test = Period.minutes(5).withMinutes(1); [EOL]     assertEquals(test, new Period(0, 0, 0, 0, 0, 1, 0, 0, PeriodType.standard())); [EOL]     test = Period.seconds(5).withSeconds(1); [EOL]     assertEquals(test, new Period(0, 0, 0, 0, 0, 0, 1, 0, PeriodType.standard())); [EOL]     test = Period.millis(5).withMillis(1); [EOL]     assertEquals(test, new Period(0, 0, 0, 0, 0, 0, 0, 1, PeriodType.standard())); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.withYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testToStandardWeeks_years() { [EOL]     Period test = Period.years(1); [EOL]     try { [EOL]         test.toStandardWeeks(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.years(-1); [EOL]     try { [EOL]         test.toStandardWeeks(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.years(0); [EOL]     assertEquals(0, test.toStandardWeeks().getWeeks()); [EOL] }
public void testToStandardWeeks_years() { [EOL]     Period test = Period.years(1); [EOL]     try { [EOL]         test.toStandardWeeks(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.years(-1); [EOL]     try { [EOL]         test.toStandardWeeks(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.years(0); [EOL]     assertEquals(0, test.toStandardWeeks().getWeeks()); [EOL] }
public void testToStandardWeeks_years() { [EOL]     Period test = Period.years(1); [EOL]     try { [EOL]         test.toStandardWeeks(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.years(-1); [EOL]     try { [EOL]         test.toStandardWeeks(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.years(0); [EOL]     assertEquals(0, test.toStandardWeeks().getWeeks()); [EOL] }
public void testToStandardWeeks_years() { [EOL]     Period test = Period.years(1); [EOL]     try { [EOL]         test.toStandardWeeks(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.years(-1); [EOL]     try { [EOL]         test.toStandardWeeks(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.years(0); [EOL]     assertEquals(0, test.toStandardWeeks().getWeeks()); [EOL] }
public void testToStandardWeeks_years() { [EOL]     Period test = Period.years(1); [EOL]     try { [EOL]         test.toStandardWeeks(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.years(-1); [EOL]     try { [EOL]         test.toStandardWeeks(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.years(0); [EOL]     assertEquals(0, test.toStandardWeeks().getWeeks()); [EOL] }
public void testToStandardWeeks_years() { [EOL]     Period test = Period.years(1); [EOL]     try { [EOL]         test.toStandardWeeks(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.years(-1); [EOL]     try { [EOL]         test.toStandardWeeks(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.years(0); [EOL]     assertEquals(0, test.toStandardWeeks().getWeeks()); [EOL] }
public void testToStandardWeeks_years() { [EOL]     Period test = Period.years(1); [EOL]     try { [EOL]         test.toStandardWeeks(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.years(-1); [EOL]     try { [EOL]         test.toStandardWeeks(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.years(0); [EOL]     assertEquals(0, test.toStandardWeeks().getWeeks()); [EOL] }
public void testToStandardMinutes_years() { [EOL]     Period test = Period.years(1); [EOL]     try { [EOL]         test.toStandardMinutes(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.years(-1); [EOL]     try { [EOL]         test.toStandardMinutes(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.years(0); [EOL]     assertEquals(0, test.toStandardMinutes().getMinutes()); [EOL] }
public void testToStandardMinutes_years() { [EOL]     Period test = Period.years(1); [EOL]     try { [EOL]         test.toStandardMinutes(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.years(-1); [EOL]     try { [EOL]         test.toStandardMinutes(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.years(0); [EOL]     assertEquals(0, test.toStandardMinutes().getMinutes()); [EOL] }
public void testToStandardMinutes_years() { [EOL]     Period test = Period.years(1); [EOL]     try { [EOL]         test.toStandardMinutes(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.years(-1); [EOL]     try { [EOL]         test.toStandardMinutes(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.years(0); [EOL]     assertEquals(0, test.toStandardMinutes().getMinutes()); [EOL] }
public void testToStandardMinutes_years() { [EOL]     Period test = Period.years(1); [EOL]     try { [EOL]         test.toStandardMinutes(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.years(-1); [EOL]     try { [EOL]         test.toStandardMinutes(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.years(0); [EOL]     assertEquals(0, test.toStandardMinutes().getMinutes()); [EOL] }
public void testToStandardMinutes_years() { [EOL]     Period test = Period.years(1); [EOL]     try { [EOL]         test.toStandardMinutes(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.years(-1); [EOL]     try { [EOL]         test.toStandardMinutes(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.years(0); [EOL]     assertEquals(0, test.toStandardMinutes().getMinutes()); [EOL] }
public void testToStandardMinutes_years() { [EOL]     Period test = Period.years(1); [EOL]     try { [EOL]         test.toStandardMinutes(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.years(-1); [EOL]     try { [EOL]         test.toStandardMinutes(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.years(0); [EOL]     assertEquals(0, test.toStandardMinutes().getMinutes()); [EOL] }
public void testToStandardMinutes_years() { [EOL]     Period test = Period.years(1); [EOL]     try { [EOL]         test.toStandardMinutes(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.years(-1); [EOL]     try { [EOL]         test.toStandardMinutes(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.years(0); [EOL]     assertEquals(0, test.toStandardMinutes().getMinutes()); [EOL] }
public void testToStandardMinutes_years() { [EOL]     Period test = Period.years(1); [EOL]     try { [EOL]         test.toStandardMinutes(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.years(-1); [EOL]     try { [EOL]         test.toStandardMinutes(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.years(0); [EOL]     assertEquals(0, test.toStandardMinutes().getMinutes()); [EOL] }
public void testToStandardMinutes_years() { [EOL]     Period test = Period.years(1); [EOL]     try { [EOL]         test.toStandardMinutes(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.years(-1); [EOL]     try { [EOL]         test.toStandardMinutes(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.years(0); [EOL]     assertEquals(0, test.toStandardMinutes().getMinutes()); [EOL] }
public void testToStandardMinutes_years() { [EOL]     Period test = Period.years(1); [EOL]     try { [EOL]         test.toStandardMinutes(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.years(-1); [EOL]     try { [EOL]         test.toStandardMinutes(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.years(0); [EOL]     assertEquals(0, test.toStandardMinutes().getMinutes()); [EOL] }
public void testToStandardMinutes_years() { [EOL]     Period test = Period.years(1); [EOL]     try { [EOL]         test.toStandardMinutes(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.years(-1); [EOL]     try { [EOL]         test.toStandardMinutes(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.years(0); [EOL]     assertEquals(0, test.toStandardMinutes().getMinutes()); [EOL] }
public void testFactory() { [EOL]     assertEquals(LONDON, IslamicChronology.getInstance().getZone()); [EOL]     assertSame(IslamicChronology.class, IslamicChronology.getInstance().getClass()); [EOL] }
public void testFactory() { [EOL]     assertEquals(LONDON, IslamicChronology.getInstance().getZone()); [EOL]     assertSame(IslamicChronology.class, IslamicChronology.getInstance().getClass()); [EOL] }
public void testFactory() { [EOL]     assertEquals(LONDON, IslamicChronology.getInstance().getZone()); [EOL]     assertSame(IslamicChronology.class, IslamicChronology.getInstance().getClass()); [EOL] }
public void testFactory() { [EOL]     assertEquals(LONDON, IslamicChronology.getInstance().getZone()); [EOL]     assertSame(IslamicChronology.class, IslamicChronology.getInstance().getClass()); [EOL] }
public void testSampleDate1() { [EOL]     DateTime dt = new DateTime(1945, 11, 12, 0, 0, 0, 0, ISO_UTC); [EOL]     dt = dt.withChronology(ISLAMIC_UTC); [EOL]     assertEquals(IslamicChronology.AH, dt.getEra()); [EOL]     assertEquals(14, dt.getCenturyOfEra()); [EOL]     assertEquals(64, dt.getYearOfCentury()); [EOL]     assertEquals(1364, dt.getYearOfEra()); [EOL]     assertEquals(1364, dt.getYear()); [EOL]     Property fld = dt.year(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(new DateTime(1365, 12, 6, 0, 0, 0, 0, ISLAMIC_UTC), fld.addToCopy(1)); [EOL]     assertEquals(12, dt.getMonthOfYear()); [EOL]     fld = dt.monthOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(12, fld.getMaximumValue()); [EOL]     assertEquals(12, fld.getMaximumValueOverall()); [EOL]     assertEquals(new DateTime(1365, 1, 6, 0, 0, 0, 0, ISLAMIC_UTC), fld.addToCopy(1)); [EOL]     assertEquals(new DateTime(1364, 1, 6, 0, 0, 0, 0, ISLAMIC_UTC), fld.addWrapFieldToCopy(1)); [EOL]     assertEquals(6, dt.getDayOfMonth()); [EOL]     fld = dt.dayOfMonth(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(29, fld.getMaximumValue()); [EOL]     assertEquals(30, fld.getMaximumValueOverall()); [EOL]     assertEquals(new DateTime(1364, 12, 7, 0, 0, 0, 0, ISLAMIC_UTC), fld.addToCopy(1)); [EOL]     assertEquals(DateTimeConstants.MONDAY, dt.getDayOfWeek()); [EOL]     fld = dt.dayOfWeek(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(7, fld.getMaximumValue()); [EOL]     assertEquals(7, fld.getMaximumValueOverall()); [EOL]     assertEquals(new DateTime(1364, 12, 7, 0, 0, 0, 0, ISLAMIC_UTC), fld.addToCopy(1)); [EOL]     assertEquals(6 * 30 + 5 * 29 + 6, dt.getDayOfYear()); [EOL]     fld = dt.dayOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(354, fld.getMaximumValue()); [EOL]     assertEquals(355, fld.getMaximumValueOverall()); [EOL]     assertEquals(new DateTime(1364, 12, 7, 0, 0, 0, 0, ISLAMIC_UTC), fld.addToCopy(1)); [EOL]     assertEquals(0, dt.getHourOfDay()); [EOL]     assertEquals(0, dt.getMinuteOfHour()); [EOL]     assertEquals(0, dt.getSecondOfMinute()); [EOL]     assertEquals(0, dt.getMillisOfSecond()); [EOL] }
public void testSampleDate1() { [EOL]     DateTime dt = new DateTime(1945, 11, 12, 0, 0, 0, 0, ISO_UTC); [EOL]     dt = dt.withChronology(ISLAMIC_UTC); [EOL]     assertEquals(IslamicChronology.AH, dt.getEra()); [EOL]     assertEquals(14, dt.getCenturyOfEra()); [EOL]     assertEquals(64, dt.getYearOfCentury()); [EOL]     assertEquals(1364, dt.getYearOfEra()); [EOL]     assertEquals(1364, dt.getYear()); [EOL]     Property fld = dt.year(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(new DateTime(1365, 12, 6, 0, 0, 0, 0, ISLAMIC_UTC), fld.addToCopy(1)); [EOL]     assertEquals(12, dt.getMonthOfYear()); [EOL]     fld = dt.monthOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(12, fld.getMaximumValue()); [EOL]     assertEquals(12, fld.getMaximumValueOverall()); [EOL]     assertEquals(new DateTime(1365, 1, 6, 0, 0, 0, 0, ISLAMIC_UTC), fld.addToCopy(1)); [EOL]     assertEquals(new DateTime(1364, 1, 6, 0, 0, 0, 0, ISLAMIC_UTC), fld.addWrapFieldToCopy(1)); [EOL]     assertEquals(6, dt.getDayOfMonth()); [EOL]     fld = dt.dayOfMonth(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(29, fld.getMaximumValue()); [EOL]     assertEquals(30, fld.getMaximumValueOverall()); [EOL]     assertEquals(new DateTime(1364, 12, 7, 0, 0, 0, 0, ISLAMIC_UTC), fld.addToCopy(1)); [EOL]     assertEquals(DateTimeConstants.MONDAY, dt.getDayOfWeek()); [EOL]     fld = dt.dayOfWeek(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(7, fld.getMaximumValue()); [EOL]     assertEquals(7, fld.getMaximumValueOverall()); [EOL]     assertEquals(new DateTime(1364, 12, 7, 0, 0, 0, 0, ISLAMIC_UTC), fld.addToCopy(1)); [EOL]     assertEquals(6 * 30 + 5 * 29 + 6, dt.getDayOfYear()); [EOL]     fld = dt.dayOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(354, fld.getMaximumValue()); [EOL]     assertEquals(355, fld.getMaximumValueOverall()); [EOL]     assertEquals(new DateTime(1364, 12, 7, 0, 0, 0, 0, ISLAMIC_UTC), fld.addToCopy(1)); [EOL]     assertEquals(0, dt.getHourOfDay()); [EOL]     assertEquals(0, dt.getMinuteOfHour()); [EOL]     assertEquals(0, dt.getSecondOfMinute()); [EOL]     assertEquals(0, dt.getMillisOfSecond()); [EOL] }
public void testSampleDate1() { [EOL]     DateTime dt = new DateTime(1945, 11, 12, 0, 0, 0, 0, ISO_UTC); [EOL]     dt = dt.withChronology(ISLAMIC_UTC); [EOL]     assertEquals(IslamicChronology.AH, dt.getEra()); [EOL]     assertEquals(14, dt.getCenturyOfEra()); [EOL]     assertEquals(64, dt.getYearOfCentury()); [EOL]     assertEquals(1364, dt.getYearOfEra()); [EOL]     assertEquals(1364, dt.getYear()); [EOL]     Property fld = dt.year(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(new DateTime(1365, 12, 6, 0, 0, 0, 0, ISLAMIC_UTC), fld.addToCopy(1)); [EOL]     assertEquals(12, dt.getMonthOfYear()); [EOL]     fld = dt.monthOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(12, fld.getMaximumValue()); [EOL]     assertEquals(12, fld.getMaximumValueOverall()); [EOL]     assertEquals(new DateTime(1365, 1, 6, 0, 0, 0, 0, ISLAMIC_UTC), fld.addToCopy(1)); [EOL]     assertEquals(new DateTime(1364, 1, 6, 0, 0, 0, 0, ISLAMIC_UTC), fld.addWrapFieldToCopy(1)); [EOL]     assertEquals(6, dt.getDayOfMonth()); [EOL]     fld = dt.dayOfMonth(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(29, fld.getMaximumValue()); [EOL]     assertEquals(30, fld.getMaximumValueOverall()); [EOL]     assertEquals(new DateTime(1364, 12, 7, 0, 0, 0, 0, ISLAMIC_UTC), fld.addToCopy(1)); [EOL]     assertEquals(DateTimeConstants.MONDAY, dt.getDayOfWeek()); [EOL]     fld = dt.dayOfWeek(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(7, fld.getMaximumValue()); [EOL]     assertEquals(7, fld.getMaximumValueOverall()); [EOL]     assertEquals(new DateTime(1364, 12, 7, 0, 0, 0, 0, ISLAMIC_UTC), fld.addToCopy(1)); [EOL]     assertEquals(6 * 30 + 5 * 29 + 6, dt.getDayOfYear()); [EOL]     fld = dt.dayOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(354, fld.getMaximumValue()); [EOL]     assertEquals(355, fld.getMaximumValueOverall()); [EOL]     assertEquals(new DateTime(1364, 12, 7, 0, 0, 0, 0, ISLAMIC_UTC), fld.addToCopy(1)); [EOL]     assertEquals(0, dt.getHourOfDay()); [EOL]     assertEquals(0, dt.getMinuteOfHour()); [EOL]     assertEquals(0, dt.getSecondOfMinute()); [EOL]     assertEquals(0, dt.getMillisOfSecond()); [EOL] }
public void testFieldConstructor() { [EOL]     DateTime date = new DateTime(1364, 12, 6, 0, 0, 0, 0, ISLAMIC_UTC); [EOL]     DateTime expectedDate = new DateTime(1945, 11, 12, 0, 0, 0, 0, ISO_UTC); [EOL]     assertEquals(expectedDate.getMillis(), date.getMillis()); [EOL] }
public void testFieldConstructor() { [EOL]     DateTime date = new DateTime(1364, 12, 6, 0, 0, 0, 0, ISLAMIC_UTC); [EOL]     DateTime expectedDate = new DateTime(1945, 11, 12, 0, 0, 0, 0, ISO_UTC); [EOL]     assertEquals(expectedDate.getMillis(), date.getMillis()); [EOL] }
public void testFieldConstructor() { [EOL]     DateTime date = new DateTime(1364, 12, 6, 0, 0, 0, 0, ISLAMIC_UTC); [EOL]     DateTime expectedDate = new DateTime(1945, 11, 12, 0, 0, 0, 0, ISO_UTC); [EOL]     assertEquals(expectedDate.getMillis(), date.getMillis()); [EOL] }
public void testFieldConstructor() { [EOL]     DateTime date = new DateTime(1364, 12, 6, 0, 0, 0, 0, ISLAMIC_UTC); [EOL]     DateTime expectedDate = new DateTime(1945, 11, 12, 0, 0, 0, 0, ISO_UTC); [EOL]     assertEquals(expectedDate.getMillis(), date.getMillis()); [EOL] }
public void testFieldConstructor() { [EOL]     DateTime date = new DateTime(1364, 12, 6, 0, 0, 0, 0, ISLAMIC_UTC); [EOL]     DateTime expectedDate = new DateTime(1945, 11, 12, 0, 0, 0, 0, ISO_UTC); [EOL]     assertEquals(expectedDate.getMillis(), date.getMillis()); [EOL] }
public void testFieldConstructor() { [EOL]     DateTime date = new DateTime(1364, 12, 6, 0, 0, 0, 0, ISLAMIC_UTC); [EOL]     DateTime expectedDate = new DateTime(1945, 11, 12, 0, 0, 0, 0, ISO_UTC); [EOL]     assertEquals(expectedDate.getMillis(), date.getMillis()); [EOL] }
public void testFieldConstructor() { [EOL]     DateTime date = new DateTime(1364, 12, 6, 0, 0, 0, 0, ISLAMIC_UTC); [EOL]     DateTime expectedDate = new DateTime(1945, 11, 12, 0, 0, 0, 0, ISO_UTC); [EOL]     assertEquals(expectedDate.getMillis(), date.getMillis()); [EOL] }
public void testFieldConstructor() { [EOL]     DateTime date = new DateTime(1364, 12, 6, 0, 0, 0, 0, ISLAMIC_UTC); [EOL]     DateTime expectedDate = new DateTime(1945, 11, 12, 0, 0, 0, 0, ISO_UTC); [EOL]     assertEquals(expectedDate.getMillis(), date.getMillis()); [EOL] }
public void testSerializedGJChronologyChangedInternals() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(PARIS, 123L, 2); [EOL]     loadAndCompare(test, "GJChronologyChangedInternals", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronologyChangedInternals() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(PARIS, 123L, 2); [EOL]     loadAndCompare(test, "GJChronologyChangedInternals", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testCutoverAddWeeks() { [EOL]     testAdd("1582-01-01", DurationFieldType.weeks(), 1, "1582-01-08"); [EOL]     testAdd("1583-01-01", DurationFieldType.weeks(), 1, "1583-01-08"); [EOL]     testAdd("1582-10-01", DurationFieldType.weeks(), 2, "1582-10-25"); [EOL]     testAdd("1582-W01-1", DurationFieldType.weeks(), 51, "1583-W01-1"); [EOL] }
public void testCutoverAddWeeks() { [EOL]     testAdd("1582-01-01", DurationFieldType.weeks(), 1, "1582-01-08"); [EOL]     testAdd("1583-01-01", DurationFieldType.weeks(), 1, "1583-01-08"); [EOL]     testAdd("1582-10-01", DurationFieldType.weeks(), 2, "1582-10-25"); [EOL]     testAdd("1582-W01-1", DurationFieldType.weeks(), 51, "1583-W01-1"); [EOL] }
public void testEquality() { [EOL]     assertSame(GJChronology.getInstance(TOKYO), GJChronology.getInstance(TOKYO)); [EOL]     assertSame(GJChronology.getInstance(LONDON), GJChronology.getInstance(LONDON)); [EOL]     assertSame(GJChronology.getInstance(PARIS), GJChronology.getInstance(PARIS)); [EOL]     assertSame(GJChronology.getInstanceUTC(), GJChronology.getInstanceUTC()); [EOL]     assertSame(GJChronology.getInstance(), GJChronology.getInstance(LONDON)); [EOL] }
public void testEquality() { [EOL]     assertSame(GJChronology.getInstance(TOKYO), GJChronology.getInstance(TOKYO)); [EOL]     assertSame(GJChronology.getInstance(LONDON), GJChronology.getInstance(LONDON)); [EOL]     assertSame(GJChronology.getInstance(PARIS), GJChronology.getInstance(PARIS)); [EOL]     assertSame(GJChronology.getInstanceUTC(), GJChronology.getInstanceUTC()); [EOL]     assertSame(GJChronology.getInstance(), GJChronology.getInstance(LONDON)); [EOL] }
public void testSubtractDays() { [EOL]     DateTime dt = new DateTime(1112306400000L, GJChronology.getInstance(DateTimeZone.forID("Europe/Berlin"))); [EOL]     YearMonthDay ymd = dt.toYearMonthDay(); [EOL]     while (ymd.toDateTimeAtMidnight().getDayOfWeek() != DateTimeConstants.MONDAY) { [EOL]         ymd = ymd.minus(Period.days(1)); [EOL]     } [EOL] }
public void testSubtractDays() { [EOL]     DateTime dt = new DateTime(1112306400000L, GJChronology.getInstance(DateTimeZone.forID("Europe/Berlin"))); [EOL]     YearMonthDay ymd = dt.toYearMonthDay(); [EOL]     while (ymd.toDateTimeAtMidnight().getDayOfWeek() != DateTimeConstants.MONDAY) { [EOL]         ymd = ymd.minus(Period.days(1)); [EOL]     } [EOL] }
public void testSubtractDays() { [EOL]     DateTime dt = new DateTime(1112306400000L, GJChronology.getInstance(DateTimeZone.forID("Europe/Berlin"))); [EOL]     YearMonthDay ymd = dt.toYearMonthDay(); [EOL]     while (ymd.toDateTimeAtMidnight().getDayOfWeek() != DateTimeConstants.MONDAY) { [EOL]         ymd = ymd.minus(Period.days(1)); [EOL]     } [EOL] }
public void testSubtractDays() { [EOL]     DateTime dt = new DateTime(1112306400000L, GJChronology.getInstance(DateTimeZone.forID("Europe/Berlin"))); [EOL]     YearMonthDay ymd = dt.toYearMonthDay(); [EOL]     while (ymd.toDateTimeAtMidnight().getDayOfWeek() != DateTimeConstants.MONDAY) { [EOL]         ymd = ymd.minus(Period.days(1)); [EOL]     } [EOL] }
public void testSubtractDays() { [EOL]     DateTime dt = new DateTime(1112306400000L, GJChronology.getInstance(DateTimeZone.forID("Europe/Berlin"))); [EOL]     YearMonthDay ymd = dt.toYearMonthDay(); [EOL]     while (ymd.toDateTimeAtMidnight().getDayOfWeek() != DateTimeConstants.MONDAY) { [EOL]         ymd = ymd.minus(Period.days(1)); [EOL]     } [EOL] }
public void testSubtractDays() { [EOL]     DateTime dt = new DateTime(1112306400000L, GJChronology.getInstance(DateTimeZone.forID("Europe/Berlin"))); [EOL]     YearMonthDay ymd = dt.toYearMonthDay(); [EOL]     while (ymd.toDateTimeAtMidnight().getDayOfWeek() != DateTimeConstants.MONDAY) { [EOL]         ymd = ymd.minus(Period.days(1)); [EOL]     } [EOL] }
public void testSubtractDays() { [EOL]     DateTime dt = new DateTime(1112306400000L, GJChronology.getInstance(DateTimeZone.forID("Europe/Berlin"))); [EOL]     YearMonthDay ymd = dt.toYearMonthDay(); [EOL]     while (ymd.toDateTimeAtMidnight().getDayOfWeek() != DateTimeConstants.MONDAY) { [EOL]         ymd = ymd.minus(Period.days(1)); [EOL]     } [EOL] }
public void testSubtractDays() { [EOL]     DateTime dt = new DateTime(1112306400000L, GJChronology.getInstance(DateTimeZone.forID("Europe/Berlin"))); [EOL]     YearMonthDay ymd = dt.toYearMonthDay(); [EOL]     while (ymd.toDateTimeAtMidnight().getDayOfWeek() != DateTimeConstants.MONDAY) { [EOL]         ymd = ymd.minus(Period.days(1)); [EOL]     } [EOL] }
public void testSubtractDays() { [EOL]     DateTime dt = new DateTime(1112306400000L, GJChronology.getInstance(DateTimeZone.forID("Europe/Berlin"))); [EOL]     YearMonthDay ymd = dt.toYearMonthDay(); [EOL]     while (ymd.toDateTimeAtMidnight().getDayOfWeek() != DateTimeConstants.MONDAY) { [EOL]         ymd = ymd.minus(Period.days(1)); [EOL]     } [EOL] }
public void testSerializedGJChronologyChangedInternals() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(PARIS, 123L, 2); [EOL]     loadAndCompare(test, "GJChronologyChangedInternals", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronologyChangedInternals() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(PARIS, 123L, 2); [EOL]     loadAndCompare(test, "GJChronologyChangedInternals", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronologyChangedInternals() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(PARIS, 123L, 2); [EOL]     loadAndCompare(test, "GJChronologyChangedInternals", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronologyChangedInternals() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(PARIS, 123L, 2); [EOL]     loadAndCompare(test, "GJChronologyChangedInternals", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSubtractDays() { [EOL]     DateTime dt = new DateTime(1112306400000L, GJChronology.getInstance(DateTimeZone.forID("Europe/Berlin"))); [EOL]     YearMonthDay ymd = dt.toYearMonthDay(); [EOL]     while (ymd.toDateTimeAtMidnight().getDayOfWeek() != DateTimeConstants.MONDAY) { [EOL]         ymd = ymd.minus(Period.days(1)); [EOL]     } [EOL] }
public void testSerializedGJChronologyChangedInternals() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(PARIS, 123L, 2); [EOL]     loadAndCompare(test, "GJChronologyChangedInternals", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSubtractDays() { [EOL]     DateTime dt = new DateTime(1112306400000L, GJChronology.getInstance(DateTimeZone.forID("Europe/Berlin"))); [EOL]     YearMonthDay ymd = dt.toYearMonthDay(); [EOL]     while (ymd.toDateTimeAtMidnight().getDayOfWeek() != DateTimeConstants.MONDAY) { [EOL]         ymd = ymd.minus(Period.days(1)); [EOL]     } [EOL] }
public void testSubtractDays() { [EOL]     DateTime dt = new DateTime(1112306400000L, GJChronology.getInstance(DateTimeZone.forID("Europe/Berlin"))); [EOL]     YearMonthDay ymd = dt.toYearMonthDay(); [EOL]     while (ymd.toDateTimeAtMidnight().getDayOfWeek() != DateTimeConstants.MONDAY) { [EOL]         ymd = ymd.minus(Period.days(1)); [EOL]     } [EOL] }
public void testSubtractDays() { [EOL]     DateTime dt = new DateTime(1112306400000L, GJChronology.getInstance(DateTimeZone.forID("Europe/Berlin"))); [EOL]     YearMonthDay ymd = dt.toYearMonthDay(); [EOL]     while (ymd.toDateTimeAtMidnight().getDayOfWeek() != DateTimeConstants.MONDAY) { [EOL]         ymd = ymd.minus(Period.days(1)); [EOL]     } [EOL] }
public void testSubtractDays() { [EOL]     DateTime dt = new DateTime(1112306400000L, GJChronology.getInstance(DateTimeZone.forID("Europe/Berlin"))); [EOL]     YearMonthDay ymd = dt.toYearMonthDay(); [EOL]     while (ymd.toDateTimeAtMidnight().getDayOfWeek() != DateTimeConstants.MONDAY) { [EOL]         ymd = ymd.minus(Period.days(1)); [EOL]     } [EOL] }
public void testSubtractDays() { [EOL]     DateTime dt = new DateTime(1112306400000L, GJChronology.getInstance(DateTimeZone.forID("Europe/Berlin"))); [EOL]     YearMonthDay ymd = dt.toYearMonthDay(); [EOL]     while (ymd.toDateTimeAtMidnight().getDayOfWeek() != DateTimeConstants.MONDAY) { [EOL]         ymd = ymd.minus(Period.days(1)); [EOL]     } [EOL] }
public void testSubtractDays() { [EOL]     DateTime dt = new DateTime(1112306400000L, GJChronology.getInstance(DateTimeZone.forID("Europe/Berlin"))); [EOL]     YearMonthDay ymd = dt.toYearMonthDay(); [EOL]     while (ymd.toDateTimeAtMidnight().getDayOfWeek() != DateTimeConstants.MONDAY) { [EOL]         ymd = ymd.minus(Period.days(1)); [EOL]     } [EOL] }
public void test_plusYears_negativeToPositive() { [EOL]     LocalDate date = new LocalDate(-3, 6, 30, GJ_CHRONOLOGY); [EOL]     LocalDate expected = new LocalDate(2, 6, 30, GJ_CHRONOLOGY); [EOL]     assertEquals(expected, date.plusYears(4)); [EOL] }
public void test_plusYears_negativeToPositive() { [EOL]     LocalDate date = new LocalDate(-3, 6, 30, GJ_CHRONOLOGY); [EOL]     LocalDate expected = new LocalDate(2, 6, 30, GJ_CHRONOLOGY); [EOL]     assertEquals(expected, date.plusYears(4)); [EOL] }
public void test_plusYears_negativeToPositive() { [EOL]     LocalDate date = new LocalDate(-3, 6, 30, GJ_CHRONOLOGY); [EOL]     LocalDate expected = new LocalDate(2, 6, 30, GJ_CHRONOLOGY); [EOL]     assertEquals(expected, date.plusYears(4)); [EOL] }
public void testSubtractDays() { [EOL]     DateTime dt = new DateTime(1112306400000L, GJChronology.getInstance(DateTimeZone.forID("Europe/Berlin"))); [EOL]     YearMonthDay ymd = dt.toYearMonthDay(); [EOL]     while (ymd.toDateTimeAtMidnight().getDayOfWeek() != DateTimeConstants.MONDAY) { [EOL]         ymd = ymd.minus(Period.days(1)); [EOL]     } [EOL] }
public void testSubtractDays() { [EOL]     DateTime dt = new DateTime(1112306400000L, GJChronology.getInstance(DateTimeZone.forID("Europe/Berlin"))); [EOL]     YearMonthDay ymd = dt.toYearMonthDay(); [EOL]     while (ymd.toDateTimeAtMidnight().getDayOfWeek() != DateTimeConstants.MONDAY) { [EOL]         ymd = ymd.minus(Period.days(1)); [EOL]     } [EOL] }
public void testSubtractDays() { [EOL]     DateTime dt = new DateTime(1112306400000L, GJChronology.getInstance(DateTimeZone.forID("Europe/Berlin"))); [EOL]     YearMonthDay ymd = dt.toYearMonthDay(); [EOL]     while (ymd.toDateTimeAtMidnight().getDayOfWeek() != DateTimeConstants.MONDAY) { [EOL]         ymd = ymd.minus(Period.days(1)); [EOL]     } [EOL] }
public void testSubtractDays() { [EOL]     DateTime dt = new DateTime(1112306400000L, GJChronology.getInstance(DateTimeZone.forID("Europe/Berlin"))); [EOL]     YearMonthDay ymd = dt.toYearMonthDay(); [EOL]     while (ymd.toDateTimeAtMidnight().getDayOfWeek() != DateTimeConstants.MONDAY) { [EOL]         ymd = ymd.minus(Period.days(1)); [EOL]     } [EOL] }
public void testSubtractDays() { [EOL]     DateTime dt = new DateTime(1112306400000L, GJChronology.getInstance(DateTimeZone.forID("Europe/Berlin"))); [EOL]     YearMonthDay ymd = dt.toYearMonthDay(); [EOL]     while (ymd.toDateTimeAtMidnight().getDayOfWeek() != DateTimeConstants.MONDAY) { [EOL]         ymd = ymd.minus(Period.days(1)); [EOL]     } [EOL] }
public void testSubtractDays() { [EOL]     DateTime dt = new DateTime(1112306400000L, GJChronology.getInstance(DateTimeZone.forID("Europe/Berlin"))); [EOL]     YearMonthDay ymd = dt.toYearMonthDay(); [EOL]     while (ymd.toDateTimeAtMidnight().getDayOfWeek() != DateTimeConstants.MONDAY) { [EOL]         ymd = ymd.minus(Period.days(1)); [EOL]     } [EOL] }
public void testSubtractDays() { [EOL]     DateTime dt = new DateTime(1112306400000L, GJChronology.getInstance(DateTimeZone.forID("Europe/Berlin"))); [EOL]     YearMonthDay ymd = dt.toYearMonthDay(); [EOL]     while (ymd.toDateTimeAtMidnight().getDayOfWeek() != DateTimeConstants.MONDAY) { [EOL]         ymd = ymd.minus(Period.days(1)); [EOL]     } [EOL] }
public void testSubtractDays() { [EOL]     DateTime dt = new DateTime(1112306400000L, GJChronology.getInstance(DateTimeZone.forID("Europe/Berlin"))); [EOL]     YearMonthDay ymd = dt.toYearMonthDay(); [EOL]     while (ymd.toDateTimeAtMidnight().getDayOfWeek() != DateTimeConstants.MONDAY) { [EOL]         ymd = ymd.minus(Period.days(1)); [EOL]     } [EOL] }
public void testSubtractDays() { [EOL]     DateTime dt = new DateTime(1112306400000L, GJChronology.getInstance(DateTimeZone.forID("Europe/Berlin"))); [EOL]     YearMonthDay ymd = dt.toYearMonthDay(); [EOL]     while (ymd.toDateTimeAtMidnight().getDayOfWeek() != DateTimeConstants.MONDAY) { [EOL]         ymd = ymd.minus(Period.days(1)); [EOL]     } [EOL] }
public void testSerializedGJChronologyChangedInternals() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(PARIS, 123L, 2); [EOL]     loadAndCompare(test, "GJChronologyChangedInternals", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronologyChangedInternals() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(PARIS, 123L, 2); [EOL]     loadAndCompare(test, "GJChronologyChangedInternals", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testCutoverAddWeeks() { [EOL]     testAdd("1582-01-01", DurationFieldType.weeks(), 1, "1582-01-08"); [EOL]     testAdd("1583-01-01", DurationFieldType.weeks(), 1, "1583-01-08"); [EOL]     testAdd("1582-10-01", DurationFieldType.weeks(), 2, "1582-10-25"); [EOL]     testAdd("1582-W01-1", DurationFieldType.weeks(), 51, "1583-W01-1"); [EOL] }
public void testCutoverAddWeeks() { [EOL]     testAdd("1582-01-01", DurationFieldType.weeks(), 1, "1582-01-08"); [EOL]     testAdd("1583-01-01", DurationFieldType.weeks(), 1, "1583-01-08"); [EOL]     testAdd("1582-10-01", DurationFieldType.weeks(), 2, "1582-10-25"); [EOL]     testAdd("1582-W01-1", DurationFieldType.weeks(), 51, "1583-W01-1"); [EOL] }
public void testSerializedGJChronologyChangedInternals() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(PARIS, 123L, 2); [EOL]     loadAndCompare(test, "GJChronologyChangedInternals", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronologyChangedInternals() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(PARIS, 123L, 2); [EOL]     loadAndCompare(test, "GJChronologyChangedInternals", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronologyChangedInternals() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(PARIS, 123L, 2); [EOL]     loadAndCompare(test, "GJChronologyChangedInternals", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronologyChangedInternals() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(PARIS, 123L, 2); [EOL]     loadAndCompare(test, "GJChronologyChangedInternals", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronologyChangedInternals() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(PARIS, 123L, 2); [EOL]     loadAndCompare(test, "GJChronologyChangedInternals", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronologyChangedInternals() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(PARIS, 123L, 2); [EOL]     loadAndCompare(test, "GJChronologyChangedInternals", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSubtractDays() { [EOL]     DateTime dt = new DateTime(1112306400000L, GJChronology.getInstance(DateTimeZone.forID("Europe/Berlin"))); [EOL]     YearMonthDay ymd = dt.toYearMonthDay(); [EOL]     while (ymd.toDateTimeAtMidnight().getDayOfWeek() != DateTimeConstants.MONDAY) { [EOL]         ymd = ymd.minus(Period.days(1)); [EOL]     } [EOL] }
public void testSubtractDays() { [EOL]     DateTime dt = new DateTime(1112306400000L, GJChronology.getInstance(DateTimeZone.forID("Europe/Berlin"))); [EOL]     YearMonthDay ymd = dt.toYearMonthDay(); [EOL]     while (ymd.toDateTimeAtMidnight().getDayOfWeek() != DateTimeConstants.MONDAY) { [EOL]         ymd = ymd.minus(Period.days(1)); [EOL]     } [EOL] }
public void testSubtractDays() { [EOL]     DateTime dt = new DateTime(1112306400000L, GJChronology.getInstance(DateTimeZone.forID("Europe/Berlin"))); [EOL]     YearMonthDay ymd = dt.toYearMonthDay(); [EOL]     while (ymd.toDateTimeAtMidnight().getDayOfWeek() != DateTimeConstants.MONDAY) { [EOL]         ymd = ymd.minus(Period.days(1)); [EOL]     } [EOL] }
public void testSubtractDays() { [EOL]     DateTime dt = new DateTime(1112306400000L, GJChronology.getInstance(DateTimeZone.forID("Europe/Berlin"))); [EOL]     YearMonthDay ymd = dt.toYearMonthDay(); [EOL]     while (ymd.toDateTimeAtMidnight().getDayOfWeek() != DateTimeConstants.MONDAY) { [EOL]         ymd = ymd.minus(Period.days(1)); [EOL]     } [EOL] }
public void testSubtractDays() { [EOL]     DateTime dt = new DateTime(1112306400000L, GJChronology.getInstance(DateTimeZone.forID("Europe/Berlin"))); [EOL]     YearMonthDay ymd = dt.toYearMonthDay(); [EOL]     while (ymd.toDateTimeAtMidnight().getDayOfWeek() != DateTimeConstants.MONDAY) { [EOL]         ymd = ymd.minus(Period.days(1)); [EOL]     } [EOL] }
public void testSubtractDays() { [EOL]     DateTime dt = new DateTime(1112306400000L, GJChronology.getInstance(DateTimeZone.forID("Europe/Berlin"))); [EOL]     YearMonthDay ymd = dt.toYearMonthDay(); [EOL]     while (ymd.toDateTimeAtMidnight().getDayOfWeek() != DateTimeConstants.MONDAY) { [EOL]         ymd = ymd.minus(Period.days(1)); [EOL]     } [EOL] }
public void testSubtractDays() { [EOL]     DateTime dt = new DateTime(1112306400000L, GJChronology.getInstance(DateTimeZone.forID("Europe/Berlin"))); [EOL]     YearMonthDay ymd = dt.toYearMonthDay(); [EOL]     while (ymd.toDateTimeAtMidnight().getDayOfWeek() != DateTimeConstants.MONDAY) { [EOL]         ymd = ymd.minus(Period.days(1)); [EOL]     } [EOL] }
public void testSubtractDays() { [EOL]     DateTime dt = new DateTime(1112306400000L, GJChronology.getInstance(DateTimeZone.forID("Europe/Berlin"))); [EOL]     YearMonthDay ymd = dt.toYearMonthDay(); [EOL]     while (ymd.toDateTimeAtMidnight().getDayOfWeek() != DateTimeConstants.MONDAY) { [EOL]         ymd = ymd.minus(Period.days(1)); [EOL]     } [EOL] }
public void testSubtractDays() { [EOL]     DateTime dt = new DateTime(1112306400000L, GJChronology.getInstance(DateTimeZone.forID("Europe/Berlin"))); [EOL]     YearMonthDay ymd = dt.toYearMonthDay(); [EOL]     while (ymd.toDateTimeAtMidnight().getDayOfWeek() != DateTimeConstants.MONDAY) { [EOL]         ymd = ymd.minus(Period.days(1)); [EOL]     } [EOL] }
public void testSubtractDays() { [EOL]     DateTime dt = new DateTime(1112306400000L, GJChronology.getInstance(DateTimeZone.forID("Europe/Berlin"))); [EOL]     YearMonthDay ymd = dt.toYearMonthDay(); [EOL]     while (ymd.toDateTimeAtMidnight().getDayOfWeek() != DateTimeConstants.MONDAY) { [EOL]         ymd = ymd.minus(Period.days(1)); [EOL]     } [EOL] }
public void testSubtractDays() { [EOL]     DateTime dt = new DateTime(1112306400000L, GJChronology.getInstance(DateTimeZone.forID("Europe/Berlin"))); [EOL]     YearMonthDay ymd = dt.toYearMonthDay(); [EOL]     while (ymd.toDateTimeAtMidnight().getDayOfWeek() != DateTimeConstants.MONDAY) { [EOL]         ymd = ymd.minus(Period.days(1)); [EOL]     } [EOL] }
public void testSubtractDays() { [EOL]     DateTime dt = new DateTime(1112306400000L, GJChronology.getInstance(DateTimeZone.forID("Europe/Berlin"))); [EOL]     YearMonthDay ymd = dt.toYearMonthDay(); [EOL]     while (ymd.toDateTimeAtMidnight().getDayOfWeek() != DateTimeConstants.MONDAY) { [EOL]         ymd = ymd.minus(Period.days(1)); [EOL]     } [EOL] }
public void testSubtractDays() { [EOL]     DateTime dt = new DateTime(1112306400000L, GJChronology.getInstance(DateTimeZone.forID("Europe/Berlin"))); [EOL]     YearMonthDay ymd = dt.toYearMonthDay(); [EOL]     while (ymd.toDateTimeAtMidnight().getDayOfWeek() != DateTimeConstants.MONDAY) { [EOL]         ymd = ymd.minus(Period.days(1)); [EOL]     } [EOL] }
public void testSubtractDays() { [EOL]     DateTime dt = new DateTime(1112306400000L, GJChronology.getInstance(DateTimeZone.forID("Europe/Berlin"))); [EOL]     YearMonthDay ymd = dt.toYearMonthDay(); [EOL]     while (ymd.toDateTimeAtMidnight().getDayOfWeek() != DateTimeConstants.MONDAY) { [EOL]         ymd = ymd.minus(Period.days(1)); [EOL]     } [EOL] }
public void testSubtractDays() { [EOL]     DateTime dt = new DateTime(1112306400000L, GJChronology.getInstance(DateTimeZone.forID("Europe/Berlin"))); [EOL]     YearMonthDay ymd = dt.toYearMonthDay(); [EOL]     while (ymd.toDateTimeAtMidnight().getDayOfWeek() != DateTimeConstants.MONDAY) { [EOL]         ymd = ymd.minus(Period.days(1)); [EOL]     } [EOL] }
public void testMaximumValue() { [EOL]     DateMidnight dt = new DateMidnight(1570, 1, 1, GJChronology.getInstance()); [EOL]     while (dt.getYear() < 1590) { [EOL]         dt = dt.plusDays(1); [EOL]         YearMonthDay ymd = dt.toYearMonthDay(); [EOL]         assertEquals(dt.year().getMaximumValue(), ymd.year().getMaximumValue()); [EOL]         assertEquals(dt.monthOfYear().getMaximumValue(), ymd.monthOfYear().getMaximumValue()); [EOL]         assertEquals(dt.dayOfMonth().getMaximumValue(), ymd.dayOfMonth().getMaximumValue()); [EOL]     } [EOL] }
public void testMaximumValue() { [EOL]     DateMidnight dt = new DateMidnight(1570, 1, 1, GJChronology.getInstance()); [EOL]     while (dt.getYear() < 1590) { [EOL]         dt = dt.plusDays(1); [EOL]         YearMonthDay ymd = dt.toYearMonthDay(); [EOL]         assertEquals(dt.year().getMaximumValue(), ymd.year().getMaximumValue()); [EOL]         assertEquals(dt.monthOfYear().getMaximumValue(), ymd.monthOfYear().getMaximumValue()); [EOL]         assertEquals(dt.dayOfMonth().getMaximumValue(), ymd.dayOfMonth().getMaximumValue()); [EOL]     } [EOL] }
public void testMaximumValue() { [EOL]     DateMidnight dt = new DateMidnight(1570, 1, 1, GJChronology.getInstance()); [EOL]     while (dt.getYear() < 1590) { [EOL]         dt = dt.plusDays(1); [EOL]         YearMonthDay ymd = dt.toYearMonthDay(); [EOL]         assertEquals(dt.year().getMaximumValue(), ymd.year().getMaximumValue()); [EOL]         assertEquals(dt.monthOfYear().getMaximumValue(), ymd.monthOfYear().getMaximumValue()); [EOL]         assertEquals(dt.dayOfMonth().getMaximumValue(), ymd.dayOfMonth().getMaximumValue()); [EOL]     } [EOL] }
public void testMaximumValue() { [EOL]     DateMidnight dt = new DateMidnight(1570, 1, 1, GJChronology.getInstance()); [EOL]     while (dt.getYear() < 1590) { [EOL]         dt = dt.plusDays(1); [EOL]         YearMonthDay ymd = dt.toYearMonthDay(); [EOL]         assertEquals(dt.year().getMaximumValue(), ymd.year().getMaximumValue()); [EOL]         assertEquals(dt.monthOfYear().getMaximumValue(), ymd.monthOfYear().getMaximumValue()); [EOL]         assertEquals(dt.dayOfMonth().getMaximumValue(), ymd.dayOfMonth().getMaximumValue()); [EOL]     } [EOL] }
public void testMaximumValue() { [EOL]     DateMidnight dt = new DateMidnight(1570, 1, 1, GJChronology.getInstance()); [EOL]     while (dt.getYear() < 1590) { [EOL]         dt = dt.plusDays(1); [EOL]         YearMonthDay ymd = dt.toYearMonthDay(); [EOL]         assertEquals(dt.year().getMaximumValue(), ymd.year().getMaximumValue()); [EOL]         assertEquals(dt.monthOfYear().getMaximumValue(), ymd.monthOfYear().getMaximumValue()); [EOL]         assertEquals(dt.dayOfMonth().getMaximumValue(), ymd.dayOfMonth().getMaximumValue()); [EOL]     } [EOL] }
public void testMaximumValue() { [EOL]     DateMidnight dt = new DateMidnight(1570, 1, 1, GJChronology.getInstance()); [EOL]     while (dt.getYear() < 1590) { [EOL]         dt = dt.plusDays(1); [EOL]         YearMonthDay ymd = dt.toYearMonthDay(); [EOL]         assertEquals(dt.year().getMaximumValue(), ymd.year().getMaximumValue()); [EOL]         assertEquals(dt.monthOfYear().getMaximumValue(), ymd.monthOfYear().getMaximumValue()); [EOL]         assertEquals(dt.dayOfMonth().getMaximumValue(), ymd.dayOfMonth().getMaximumValue()); [EOL]     } [EOL] }
public void testCutoverAddWeeks() { [EOL]     testAdd("1582-01-01", DurationFieldType.weeks(), 1, "1582-01-08"); [EOL]     testAdd("1583-01-01", DurationFieldType.weeks(), 1, "1583-01-08"); [EOL]     testAdd("1582-10-01", DurationFieldType.weeks(), 2, "1582-10-25"); [EOL]     testAdd("1582-W01-1", DurationFieldType.weeks(), 51, "1583-W01-1"); [EOL] }
public void testCutoverAddWeeks() { [EOL]     testAdd("1582-01-01", DurationFieldType.weeks(), 1, "1582-01-08"); [EOL]     testAdd("1583-01-01", DurationFieldType.weeks(), 1, "1583-01-08"); [EOL]     testAdd("1582-10-01", DurationFieldType.weeks(), 2, "1582-10-25"); [EOL]     testAdd("1582-W01-1", DurationFieldType.weeks(), 51, "1583-W01-1"); [EOL] }
public void testCutoverAddWeeks() { [EOL]     testAdd("1582-01-01", DurationFieldType.weeks(), 1, "1582-01-08"); [EOL]     testAdd("1583-01-01", DurationFieldType.weeks(), 1, "1583-01-08"); [EOL]     testAdd("1582-10-01", DurationFieldType.weeks(), 2, "1582-10-25"); [EOL]     testAdd("1582-W01-1", DurationFieldType.weeks(), 51, "1583-W01-1"); [EOL] }
public void testCutoverAddWeeks() { [EOL]     testAdd("1582-01-01", DurationFieldType.weeks(), 1, "1582-01-08"); [EOL]     testAdd("1583-01-01", DurationFieldType.weeks(), 1, "1583-01-08"); [EOL]     testAdd("1582-10-01", DurationFieldType.weeks(), 2, "1582-10-25"); [EOL]     testAdd("1582-W01-1", DurationFieldType.weeks(), 51, "1583-W01-1"); [EOL] }
public void testCutoverAddWeeks() { [EOL]     testAdd("1582-01-01", DurationFieldType.weeks(), 1, "1582-01-08"); [EOL]     testAdd("1583-01-01", DurationFieldType.weeks(), 1, "1583-01-08"); [EOL]     testAdd("1582-10-01", DurationFieldType.weeks(), 2, "1582-10-25"); [EOL]     testAdd("1582-W01-1", DurationFieldType.weeks(), 51, "1583-W01-1"); [EOL] }
public void testCutoverAddWeeks() { [EOL]     testAdd("1582-01-01", DurationFieldType.weeks(), 1, "1582-01-08"); [EOL]     testAdd("1583-01-01", DurationFieldType.weeks(), 1, "1583-01-08"); [EOL]     testAdd("1582-10-01", DurationFieldType.weeks(), 2, "1582-10-25"); [EOL]     testAdd("1582-W01-1", DurationFieldType.weeks(), 51, "1583-W01-1"); [EOL] }
public void testCutoverAddWeeks() { [EOL]     testAdd("1582-01-01", DurationFieldType.weeks(), 1, "1582-01-08"); [EOL]     testAdd("1583-01-01", DurationFieldType.weeks(), 1, "1583-01-08"); [EOL]     testAdd("1582-10-01", DurationFieldType.weeks(), 2, "1582-10-25"); [EOL]     testAdd("1582-W01-1", DurationFieldType.weeks(), 51, "1583-W01-1"); [EOL] }
public void testCutoverAddWeeks() { [EOL]     testAdd("1582-01-01", DurationFieldType.weeks(), 1, "1582-01-08"); [EOL]     testAdd("1583-01-01", DurationFieldType.weeks(), 1, "1583-01-08"); [EOL]     testAdd("1582-10-01", DurationFieldType.weeks(), 2, "1582-10-25"); [EOL]     testAdd("1582-W01-1", DurationFieldType.weeks(), 51, "1583-W01-1"); [EOL] }
public void testSerializedGJChronologyChangedInternals() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(PARIS, 123L, 2); [EOL]     loadAndCompare(test, "GJChronologyChangedInternals", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronologyChangedInternals() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(PARIS, 123L, 2); [EOL]     loadAndCompare(test, "GJChronologyChangedInternals", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronologyChangedInternals() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(PARIS, 123L, 2); [EOL]     loadAndCompare(test, "GJChronologyChangedInternals", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronologyChangedInternals() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(PARIS, 123L, 2); [EOL]     loadAndCompare(test, "GJChronologyChangedInternals", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronologyChangedInternals() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(PARIS, 123L, 2); [EOL]     loadAndCompare(test, "GJChronologyChangedInternals", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronologyChangedInternals() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(PARIS, 123L, 2); [EOL]     loadAndCompare(test, "GJChronologyChangedInternals", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronologyChangedInternals() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(PARIS, 123L, 2); [EOL]     loadAndCompare(test, "GJChronologyChangedInternals", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testMaximumValue() { [EOL]     DateMidnight dt = new DateMidnight(1570, 1, 1, GJChronology.getInstance()); [EOL]     while (dt.getYear() < 1590) { [EOL]         dt = dt.plusDays(1); [EOL]         YearMonthDay ymd = dt.toYearMonthDay(); [EOL]         assertEquals(dt.year().getMaximumValue(), ymd.year().getMaximumValue()); [EOL]         assertEquals(dt.monthOfYear().getMaximumValue(), ymd.monthOfYear().getMaximumValue()); [EOL]         assertEquals(dt.dayOfMonth().getMaximumValue(), ymd.dayOfMonth().getMaximumValue()); [EOL]     } [EOL] }
public void testMaximumValue() { [EOL]     DateMidnight dt = new DateMidnight(1570, 1, 1, GJChronology.getInstance()); [EOL]     while (dt.getYear() < 1590) { [EOL]         dt = dt.plusDays(1); [EOL]         YearMonthDay ymd = dt.toYearMonthDay(); [EOL]         assertEquals(dt.year().getMaximumValue(), ymd.year().getMaximumValue()); [EOL]         assertEquals(dt.monthOfYear().getMaximumValue(), ymd.monthOfYear().getMaximumValue()); [EOL]         assertEquals(dt.dayOfMonth().getMaximumValue(), ymd.dayOfMonth().getMaximumValue()); [EOL]     } [EOL] }
public void testMaximumValue() { [EOL]     DateMidnight dt = new DateMidnight(1570, 1, 1, GJChronology.getInstance()); [EOL]     while (dt.getYear() < 1590) { [EOL]         dt = dt.plusDays(1); [EOL]         YearMonthDay ymd = dt.toYearMonthDay(); [EOL]         assertEquals(dt.year().getMaximumValue(), ymd.year().getMaximumValue()); [EOL]         assertEquals(dt.monthOfYear().getMaximumValue(), ymd.monthOfYear().getMaximumValue()); [EOL]         assertEquals(dt.dayOfMonth().getMaximumValue(), ymd.dayOfMonth().getMaximumValue()); [EOL]     } [EOL] }
public void testSerializedGJChronologyChangedInternals() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(PARIS, 123L, 2); [EOL]     loadAndCompare(test, "GJChronologyChangedInternals", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testConstructor_nullObject_nullDateTimeZone() throws Throwable { [EOL]     MutableDateTime test = new MutableDateTime((Object) null, (DateTimeZone) null); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] }
public void testConstructor_ObjectString_DateTimeZoneNewYork() throws Throwable { [EOL]     LocalTime test = new LocalTime("04:20", NEW_YORK); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(4, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL] }
public void testConstructor_ObjectString_DateTimeZoneNewYork() throws Throwable { [EOL]     LocalTime test = new LocalTime("04:20", NEW_YORK); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(4, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL] }
public void testGetPeriodType_Object() throws Exception { [EOL]     Interval i = new Interval(100L, 223L); [EOL]     assertEquals(PeriodType.standard(), ReadableIntervalConverter.INSTANCE.getPeriodType(i)); [EOL] }
public void testConstructor_ObjectStringEx2() throws Throwable { [EOL]     try { [EOL]         new YearMonthDay("T10:20:30.040+14:00"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testConstructor_ObjectStringEx2() throws Throwable { [EOL]     try { [EOL]         new YearMonthDay("T10:20:30.040+14:00"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testSetIntoIntervalEx_Object_Chronology1() throws Exception { [EOL]     MutableInterval m = new MutableInterval(-1000L, 1000L); [EOL]     try { [EOL]         StringConverter.INSTANCE.setInto(m, "", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testSetIntoIntervalEx_Object_Chronology1() throws Exception { [EOL]     MutableInterval m = new MutableInterval(-1000L, 1000L); [EOL]     try { [EOL]         StringConverter.INSTANCE.setInto(m, "", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testSetIntoIntervalEx_Object_Chronology1() throws Exception { [EOL]     MutableInterval m = new MutableInterval(-1000L, 1000L); [EOL]     try { [EOL]         StringConverter.INSTANCE.setInto(m, "", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testSetIntoIntervalEx_Object_Chronology1() throws Exception { [EOL]     MutableInterval m = new MutableInterval(-1000L, 1000L); [EOL]     try { [EOL]         StringConverter.INSTANCE.setInto(m, "", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testSetIntoIntervalEx_Object_Chronology1() throws Exception { [EOL]     MutableInterval m = new MutableInterval(-1000L, 1000L); [EOL]     try { [EOL]         StringConverter.INSTANCE.setInto(m, "", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testSetIntoIntervalEx_Object_Chronology1() throws Exception { [EOL]     MutableInterval m = new MutableInterval(-1000L, 1000L); [EOL]     try { [EOL]         StringConverter.INSTANCE.setInto(m, "", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testSetIntoIntervalEx_Object_Chronology1() throws Exception { [EOL]     MutableInterval m = new MutableInterval(-1000L, 1000L); [EOL]     try { [EOL]         StringConverter.INSTANCE.setInto(m, "", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testSetInto_Object() throws Exception { [EOL]     MutablePeriod m = new MutablePeriod(PeriodType.yearMonthDayTime()); [EOL]     ReadablePeriodConverter.INSTANCE.setInto(m, new Period(0, 0, 0, 3, 0, 4, 0, 5), null); [EOL]     assertEquals(0, m.getYears()); [EOL]     assertEquals(0, m.getMonths()); [EOL]     assertEquals(0, m.getWeeks()); [EOL]     assertEquals(3, m.getDays()); [EOL]     assertEquals(0, m.getHours()); [EOL]     assertEquals(4, m.getMinutes()); [EOL]     assertEquals(0, m.getSeconds()); [EOL]     assertEquals(5, m.getMillis()); [EOL] }
public void testSetInto_Object() throws Exception { [EOL]     MutablePeriod m = new MutablePeriod(PeriodType.yearMonthDayTime()); [EOL]     ReadablePeriodConverter.INSTANCE.setInto(m, new Period(0, 0, 0, 3, 0, 4, 0, 5), null); [EOL]     assertEquals(0, m.getYears()); [EOL]     assertEquals(0, m.getMonths()); [EOL]     assertEquals(0, m.getWeeks()); [EOL]     assertEquals(3, m.getDays()); [EOL]     assertEquals(0, m.getHours()); [EOL]     assertEquals(4, m.getMinutes()); [EOL]     assertEquals(0, m.getSeconds()); [EOL]     assertEquals(5, m.getMillis()); [EOL] }
public void testSetInto_Object() throws Exception { [EOL]     MutablePeriod m = new MutablePeriod(PeriodType.yearMonthDayTime()); [EOL]     ReadablePeriodConverter.INSTANCE.setInto(m, new Period(0, 0, 0, 3, 0, 4, 0, 5), null); [EOL]     assertEquals(0, m.getYears()); [EOL]     assertEquals(0, m.getMonths()); [EOL]     assertEquals(0, m.getWeeks()); [EOL]     assertEquals(3, m.getDays()); [EOL]     assertEquals(0, m.getHours()); [EOL]     assertEquals(4, m.getMinutes()); [EOL]     assertEquals(0, m.getSeconds()); [EOL]     assertEquals(5, m.getMillis()); [EOL] }
public void testGetChronology_Object_nullChronology() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Paris")); [EOL]     assertEquals(GJChronology.getInstance(PARIS), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(0L)); [EOL]     assertEquals(GJChronology.getInstance(MOSCOW, 0L, 4), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MAX_VALUE)); [EOL]     assertEquals(JulianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MIN_VALUE)); [EOL]     assertEquals(GregorianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(new MockUnknownTimeZone()); [EOL]     assertEquals(GJChronology.getInstance(), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     Calendar uc = new MockUnknownCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     assertEquals(ISOChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(uc, (Chronology) null)); [EOL]     try { [EOL]         Calendar bc = (Calendar) Class.forName("sun.util.BuddhistCalendar").newInstance(); [EOL]         bc.setTimeZone(TimeZone.getTimeZone("Europe/Moscow")); [EOL]         assertEquals(BuddhistChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(bc, (Chronology) null)); [EOL]     } catch (ClassNotFoundException ex) { [EOL]     } [EOL] }
public void testGetChronology_Object_nullChronology() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Paris")); [EOL]     assertEquals(GJChronology.getInstance(PARIS), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(0L)); [EOL]     assertEquals(GJChronology.getInstance(MOSCOW, 0L, 4), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MAX_VALUE)); [EOL]     assertEquals(JulianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MIN_VALUE)); [EOL]     assertEquals(GregorianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(new MockUnknownTimeZone()); [EOL]     assertEquals(GJChronology.getInstance(), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     Calendar uc = new MockUnknownCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     assertEquals(ISOChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(uc, (Chronology) null)); [EOL]     try { [EOL]         Calendar bc = (Calendar) Class.forName("sun.util.BuddhistCalendar").newInstance(); [EOL]         bc.setTimeZone(TimeZone.getTimeZone("Europe/Moscow")); [EOL]         assertEquals(BuddhistChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(bc, (Chronology) null)); [EOL]     } catch (ClassNotFoundException ex) { [EOL]     } [EOL] }
public void testGetChronology_Object_nullChronology() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Paris")); [EOL]     assertEquals(GJChronology.getInstance(PARIS), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(0L)); [EOL]     assertEquals(GJChronology.getInstance(MOSCOW, 0L, 4), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MAX_VALUE)); [EOL]     assertEquals(JulianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MIN_VALUE)); [EOL]     assertEquals(GregorianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(new MockUnknownTimeZone()); [EOL]     assertEquals(GJChronology.getInstance(), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     Calendar uc = new MockUnknownCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     assertEquals(ISOChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(uc, (Chronology) null)); [EOL]     try { [EOL]         Calendar bc = (Calendar) Class.forName("sun.util.BuddhistCalendar").newInstance(); [EOL]         bc.setTimeZone(TimeZone.getTimeZone("Europe/Moscow")); [EOL]         assertEquals(BuddhistChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(bc, (Chronology) null)); [EOL]     } catch (ClassNotFoundException ex) { [EOL]     } [EOL] }
public void testGetChronology_Object_nullChronology() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Paris")); [EOL]     assertEquals(GJChronology.getInstance(PARIS), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(0L)); [EOL]     assertEquals(GJChronology.getInstance(MOSCOW, 0L, 4), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MAX_VALUE)); [EOL]     assertEquals(JulianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MIN_VALUE)); [EOL]     assertEquals(GregorianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(new MockUnknownTimeZone()); [EOL]     assertEquals(GJChronology.getInstance(), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     Calendar uc = new MockUnknownCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     assertEquals(ISOChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(uc, (Chronology) null)); [EOL]     try { [EOL]         Calendar bc = (Calendar) Class.forName("sun.util.BuddhistCalendar").newInstance(); [EOL]         bc.setTimeZone(TimeZone.getTimeZone("Europe/Moscow")); [EOL]         assertEquals(BuddhistChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(bc, (Chronology) null)); [EOL]     } catch (ClassNotFoundException ex) { [EOL]     } [EOL] }
public void testGetChronology_Object_nullChronology() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Paris")); [EOL]     assertEquals(GJChronology.getInstance(PARIS), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(0L)); [EOL]     assertEquals(GJChronology.getInstance(MOSCOW, 0L, 4), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MAX_VALUE)); [EOL]     assertEquals(JulianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MIN_VALUE)); [EOL]     assertEquals(GregorianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(new MockUnknownTimeZone()); [EOL]     assertEquals(GJChronology.getInstance(), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     Calendar uc = new MockUnknownCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     assertEquals(ISOChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(uc, (Chronology) null)); [EOL]     try { [EOL]         Calendar bc = (Calendar) Class.forName("sun.util.BuddhistCalendar").newInstance(); [EOL]         bc.setTimeZone(TimeZone.getTimeZone("Europe/Moscow")); [EOL]         assertEquals(BuddhistChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(bc, (Chronology) null)); [EOL]     } catch (ClassNotFoundException ex) { [EOL]     } [EOL] }
public void testGetChronology_Object_nullChronology() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Paris")); [EOL]     assertEquals(GJChronology.getInstance(PARIS), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(0L)); [EOL]     assertEquals(GJChronology.getInstance(MOSCOW, 0L, 4), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MAX_VALUE)); [EOL]     assertEquals(JulianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MIN_VALUE)); [EOL]     assertEquals(GregorianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(new MockUnknownTimeZone()); [EOL]     assertEquals(GJChronology.getInstance(), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     Calendar uc = new MockUnknownCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     assertEquals(ISOChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(uc, (Chronology) null)); [EOL]     try { [EOL]         Calendar bc = (Calendar) Class.forName("sun.util.BuddhistCalendar").newInstance(); [EOL]         bc.setTimeZone(TimeZone.getTimeZone("Europe/Moscow")); [EOL]         assertEquals(BuddhistChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(bc, (Chronology) null)); [EOL]     } catch (ClassNotFoundException ex) { [EOL]     } [EOL] }
public void testGetChronology_Object_nullChronology() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Paris")); [EOL]     assertEquals(GJChronology.getInstance(PARIS), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(0L)); [EOL]     assertEquals(GJChronology.getInstance(MOSCOW, 0L, 4), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MAX_VALUE)); [EOL]     assertEquals(JulianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MIN_VALUE)); [EOL]     assertEquals(GregorianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(new MockUnknownTimeZone()); [EOL]     assertEquals(GJChronology.getInstance(), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     Calendar uc = new MockUnknownCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     assertEquals(ISOChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(uc, (Chronology) null)); [EOL]     try { [EOL]         Calendar bc = (Calendar) Class.forName("sun.util.BuddhistCalendar").newInstance(); [EOL]         bc.setTimeZone(TimeZone.getTimeZone("Europe/Moscow")); [EOL]         assertEquals(BuddhistChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(bc, (Chronology) null)); [EOL]     } catch (ClassNotFoundException ex) { [EOL]     } [EOL] }
public void testGetChronology_Object_nullChronology() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Paris")); [EOL]     assertEquals(GJChronology.getInstance(PARIS), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(0L)); [EOL]     assertEquals(GJChronology.getInstance(MOSCOW, 0L, 4), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MAX_VALUE)); [EOL]     assertEquals(JulianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MIN_VALUE)); [EOL]     assertEquals(GregorianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(new MockUnknownTimeZone()); [EOL]     assertEquals(GJChronology.getInstance(), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     Calendar uc = new MockUnknownCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     assertEquals(ISOChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(uc, (Chronology) null)); [EOL]     try { [EOL]         Calendar bc = (Calendar) Class.forName("sun.util.BuddhistCalendar").newInstance(); [EOL]         bc.setTimeZone(TimeZone.getTimeZone("Europe/Moscow")); [EOL]         assertEquals(BuddhistChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(bc, (Chronology) null)); [EOL]     } catch (ClassNotFoundException ex) { [EOL]     } [EOL] }
public void testGetChronology_Object_nullChronology() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Paris")); [EOL]     assertEquals(GJChronology.getInstance(PARIS), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(0L)); [EOL]     assertEquals(GJChronology.getInstance(MOSCOW, 0L, 4), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MAX_VALUE)); [EOL]     assertEquals(JulianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MIN_VALUE)); [EOL]     assertEquals(GregorianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(new MockUnknownTimeZone()); [EOL]     assertEquals(GJChronology.getInstance(), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     Calendar uc = new MockUnknownCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     assertEquals(ISOChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(uc, (Chronology) null)); [EOL]     try { [EOL]         Calendar bc = (Calendar) Class.forName("sun.util.BuddhistCalendar").newInstance(); [EOL]         bc.setTimeZone(TimeZone.getTimeZone("Europe/Moscow")); [EOL]         assertEquals(BuddhistChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(bc, (Chronology) null)); [EOL]     } catch (ClassNotFoundException ex) { [EOL]     } [EOL] }
public void testGetChronology_Object_nullChronology() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Paris")); [EOL]     assertEquals(GJChronology.getInstance(PARIS), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(0L)); [EOL]     assertEquals(GJChronology.getInstance(MOSCOW, 0L, 4), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MAX_VALUE)); [EOL]     assertEquals(JulianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MIN_VALUE)); [EOL]     assertEquals(GregorianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(new MockUnknownTimeZone()); [EOL]     assertEquals(GJChronology.getInstance(), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     Calendar uc = new MockUnknownCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     assertEquals(ISOChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(uc, (Chronology) null)); [EOL]     try { [EOL]         Calendar bc = (Calendar) Class.forName("sun.util.BuddhistCalendar").newInstance(); [EOL]         bc.setTimeZone(TimeZone.getTimeZone("Europe/Moscow")); [EOL]         assertEquals(BuddhistChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(bc, (Chronology) null)); [EOL]     } catch (ClassNotFoundException ex) { [EOL]     } [EOL] }
public void testGetChronology_Object_nullChronology() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Paris")); [EOL]     assertEquals(GJChronology.getInstance(PARIS), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(0L)); [EOL]     assertEquals(GJChronology.getInstance(MOSCOW, 0L, 4), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MAX_VALUE)); [EOL]     assertEquals(JulianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MIN_VALUE)); [EOL]     assertEquals(GregorianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(new MockUnknownTimeZone()); [EOL]     assertEquals(GJChronology.getInstance(), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     Calendar uc = new MockUnknownCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     assertEquals(ISOChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(uc, (Chronology) null)); [EOL]     try { [EOL]         Calendar bc = (Calendar) Class.forName("sun.util.BuddhistCalendar").newInstance(); [EOL]         bc.setTimeZone(TimeZone.getTimeZone("Europe/Moscow")); [EOL]         assertEquals(BuddhistChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(bc, (Chronology) null)); [EOL]     } catch (ClassNotFoundException ex) { [EOL]     } [EOL] }
public void testFormatAppend_PrinterParser_null_null() { [EOL]     try { [EOL]         new PeriodFormatterBuilder().append(null, null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFormatAppend_PrinterParser_null_null() { [EOL]     try { [EOL]         new PeriodFormatterBuilder().append(null, null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFormatAppend_PrinterParser_null_null() { [EOL]     try { [EOL]         new PeriodFormatterBuilder().append(null, null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFormatAppend_PrinterParser_null_null() { [EOL]     try { [EOL]         new PeriodFormatterBuilder().append(null, null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFormatPrintZeroRarelyLast() { [EOL]     PeriodFormatter f = new PeriodFormatterBuilder().printZeroRarelyLast().appendYears().appendLiteral("-").appendMonths().appendLiteral("-").appendWeeks().appendLiteral("-").appendDays().toFormatter(); [EOL]     assertEquals("1-2-3-4", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("---0", f.print(EMPTY_YEAR_DAY_PERIOD)); [EOL]     assertEquals(4, f.getPrinter().calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1---4", f.print(YEAR_DAY_PERIOD)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(YEAR_DAY_PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(YEAR_DAY_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("---0", f.print(EMPTY_PERIOD)); [EOL]     assertEquals(4, f.getPrinter().calculatePrintedLength(EMPTY_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(EMPTY_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatPrintZeroRarelyFirstSeconds() { [EOL]     PeriodFormatter f = new PeriodFormatterBuilder().printZeroRarelyFirst().appendSeconds().toFormatter(); [EOL]     assertEquals("0", f.print(EMPTY_PERIOD)); [EOL] }
public void testFormatSuffixPlural4() { [EOL]     try { [EOL]         builder.appendSuffix(" hour", " hours"); [EOL]         fail(); [EOL]     } catch (IllegalStateException ex) { [EOL]     } [EOL] }
public void testFormatSuffixPlural4() { [EOL]     try { [EOL]         builder.appendSuffix(" hour", " hours"); [EOL]         fail(); [EOL]     } catch (IllegalStateException ex) { [EOL]     } [EOL] }
public void testFormatSuffixPlural4() { [EOL]     try { [EOL]         builder.appendSuffix(" hour", " hours"); [EOL]         fail(); [EOL]     } catch (IllegalStateException ex) { [EOL]     } [EOL] }
public void testFormatSeparatorIfFieldsAfter() { [EOL]     PeriodFormatter f = builder.appendYears().appendSeparatorIfFieldsAfter("T").appendHours().toFormatter(); [EOL]     assertEquals("1T5", f.print(PERIOD)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("T5", f.print(TIME_PERIOD)); [EOL]     assertEquals(2, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1", f.print(DATE_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSeparatorComplex() { [EOL]     PeriodFormatter f = builder.appendYears().appendSeparator(", ", " and ").appendHours().appendSeparator(", ", " and ").appendMinutes().appendSeparator(", ", " and ").toFormatter(); [EOL]     assertEquals("1, 5 and 6", f.print(PERIOD)); [EOL]     assertEquals(10, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(3, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("5 and 6", f.print(TIME_PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1", f.print(DATE_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSeparatorIfFieldsAfter() { [EOL]     PeriodFormatter f = builder.appendYears().appendSeparatorIfFieldsAfter("T").appendHours().toFormatter(); [EOL]     assertEquals("1T5", f.print(PERIOD)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("T5", f.print(TIME_PERIOD)); [EOL]     assertEquals(2, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1", f.print(DATE_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSeparatorIfFieldsAfter() { [EOL]     PeriodFormatter f = builder.appendYears().appendSeparatorIfFieldsAfter("T").appendHours().toFormatter(); [EOL]     assertEquals("1T5", f.print(PERIOD)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("T5", f.print(TIME_PERIOD)); [EOL]     assertEquals(2, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1", f.print(DATE_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSeparatorIfFieldsAfter() { [EOL]     PeriodFormatter f = builder.appendYears().appendSeparatorIfFieldsAfter("T").appendHours().toFormatter(); [EOL]     assertEquals("1T5", f.print(PERIOD)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("T5", f.print(TIME_PERIOD)); [EOL]     assertEquals(2, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1", f.print(DATE_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSeparatorIfFieldsAfter() { [EOL]     PeriodFormatter f = builder.appendYears().appendSeparatorIfFieldsAfter("T").appendHours().toFormatter(); [EOL]     assertEquals("1T5", f.print(PERIOD)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("T5", f.print(TIME_PERIOD)); [EOL]     assertEquals(2, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1", f.print(DATE_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSeparatorIfFieldsAfter() { [EOL]     PeriodFormatter f = builder.appendYears().appendSeparatorIfFieldsAfter("T").appendHours().toFormatter(); [EOL]     assertEquals("1T5", f.print(PERIOD)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("T5", f.print(TIME_PERIOD)); [EOL]     assertEquals(2, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1", f.print(DATE_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSeparatorIfFieldsAfter() { [EOL]     PeriodFormatter f = builder.appendYears().appendSeparatorIfFieldsAfter("T").appendHours().toFormatter(); [EOL]     assertEquals("1T5", f.print(PERIOD)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("T5", f.print(TIME_PERIOD)); [EOL]     assertEquals(2, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1", f.print(DATE_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSeparatorComplex() { [EOL]     PeriodFormatter f = builder.appendYears().appendSeparator(", ", " and ").appendHours().appendSeparator(", ", " and ").appendMinutes().appendSeparator(", ", " and ").toFormatter(); [EOL]     assertEquals("1, 5 and 6", f.print(PERIOD)); [EOL]     assertEquals(10, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(3, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("5 and 6", f.print(TIME_PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1", f.print(DATE_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSeparatorComplex() { [EOL]     PeriodFormatter f = builder.appendYears().appendSeparator(", ", " and ").appendHours().appendSeparator(", ", " and ").appendMinutes().appendSeparator(", ", " and ").toFormatter(); [EOL]     assertEquals("1, 5 and 6", f.print(PERIOD)); [EOL]     assertEquals(10, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(3, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("5 and 6", f.print(TIME_PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1", f.print(DATE_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSeparatorComplex() { [EOL]     PeriodFormatter f = builder.appendYears().appendSeparator(", ", " and ").appendHours().appendSeparator(", ", " and ").appendMinutes().appendSeparator(", ", " and ").toFormatter(); [EOL]     assertEquals("1, 5 and 6", f.print(PERIOD)); [EOL]     assertEquals(10, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(3, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("5 and 6", f.print(TIME_PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1", f.print(DATE_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSeparatorIfFieldsAfter() { [EOL]     PeriodFormatter f = builder.appendYears().appendSeparatorIfFieldsAfter("T").appendHours().toFormatter(); [EOL]     assertEquals("1T5", f.print(PERIOD)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("T5", f.print(TIME_PERIOD)); [EOL]     assertEquals(2, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1", f.print(DATE_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSeparatorIfFieldsAfter() { [EOL]     PeriodFormatter f = builder.appendYears().appendSeparatorIfFieldsAfter("T").appendHours().toFormatter(); [EOL]     assertEquals("1T5", f.print(PERIOD)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("T5", f.print(TIME_PERIOD)); [EOL]     assertEquals(2, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1", f.print(DATE_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSeparatorIfFieldsAfter() { [EOL]     PeriodFormatter f = builder.appendYears().appendSeparatorIfFieldsAfter("T").appendHours().toFormatter(); [EOL]     assertEquals("1T5", f.print(PERIOD)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("T5", f.print(TIME_PERIOD)); [EOL]     assertEquals(2, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1", f.print(DATE_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSeparatorIfFieldsAfter() { [EOL]     PeriodFormatter f = builder.appendYears().appendSeparatorIfFieldsAfter("T").appendHours().toFormatter(); [EOL]     assertEquals("1T5", f.print(PERIOD)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("T5", f.print(TIME_PERIOD)); [EOL]     assertEquals(2, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1", f.print(DATE_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSeparatorIfFieldsAfter() { [EOL]     PeriodFormatter f = builder.appendYears().appendSeparatorIfFieldsAfter("T").appendHours().toFormatter(); [EOL]     assertEquals("1T5", f.print(PERIOD)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("T5", f.print(TIME_PERIOD)); [EOL]     assertEquals(2, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1", f.print(DATE_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSeparatorIfFieldsAfter() { [EOL]     PeriodFormatter f = builder.appendYears().appendSeparatorIfFieldsAfter("T").appendHours().toFormatter(); [EOL]     assertEquals("1T5", f.print(PERIOD)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("T5", f.print(TIME_PERIOD)); [EOL]     assertEquals(2, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1", f.print(DATE_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatAppend_PrinterParser_PrinterParser() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, parser).appendMonths(); [EOL]     assertNotNull(bld.toPrinter()); [EOL]     assertNotNull(bld.toParser()); [EOL]     PeriodFormatter f = bld.toFormatter(); [EOL]     assertEquals("1-2", f.print(PERIOD)); [EOL]     assertEquals(new Period(0, 2, 1, 0, 0, 0, 0, 0), f.parsePeriod("1-2")); [EOL] }
public void testFormatAppend_PrinterParser_PrinterParser() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, parser).appendMonths(); [EOL]     assertNotNull(bld.toPrinter()); [EOL]     assertNotNull(bld.toParser()); [EOL]     PeriodFormatter f = bld.toFormatter(); [EOL]     assertEquals("1-2", f.print(PERIOD)); [EOL]     assertEquals(new Period(0, 2, 1, 0, 0, 0, 0, 0), f.parsePeriod("1-2")); [EOL] }
public void testFormatAppend_PrinterParser_PrinterParser() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, parser).appendMonths(); [EOL]     assertNotNull(bld.toPrinter()); [EOL]     assertNotNull(bld.toParser()); [EOL]     PeriodFormatter f = bld.toFormatter(); [EOL]     assertEquals("1-2", f.print(PERIOD)); [EOL]     assertEquals(new Period(0, 2, 1, 0, 0, 0, 0, 0), f.parsePeriod("1-2")); [EOL] }
public void testFormatAppend_PrinterParser_PrinterParser() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, parser).appendMonths(); [EOL]     assertNotNull(bld.toPrinter()); [EOL]     assertNotNull(bld.toParser()); [EOL]     PeriodFormatter f = bld.toFormatter(); [EOL]     assertEquals("1-2", f.print(PERIOD)); [EOL]     assertEquals(new Period(0, 2, 1, 0, 0, 0, 0, 0), f.parsePeriod("1-2")); [EOL] }
public void testFormatAppend_PrinterParser_PrinterParser() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, parser).appendMonths(); [EOL]     assertNotNull(bld.toPrinter()); [EOL]     assertNotNull(bld.toParser()); [EOL]     PeriodFormatter f = bld.toFormatter(); [EOL]     assertEquals("1-2", f.print(PERIOD)); [EOL]     assertEquals(new Period(0, 2, 1, 0, 0, 0, 0, 0), f.parsePeriod("1-2")); [EOL] }
public void testFormatAppend_PrinterParser_PrinterParser() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, parser).appendMonths(); [EOL]     assertNotNull(bld.toPrinter()); [EOL]     assertNotNull(bld.toParser()); [EOL]     PeriodFormatter f = bld.toFormatter(); [EOL]     assertEquals("1-2", f.print(PERIOD)); [EOL]     assertEquals(new Period(0, 2, 1, 0, 0, 0, 0, 0), f.parsePeriod("1-2")); [EOL] }
public void testFormatAppend_PrinterParser_PrinterParser() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, parser).appendMonths(); [EOL]     assertNotNull(bld.toPrinter()); [EOL]     assertNotNull(bld.toParser()); [EOL]     PeriodFormatter f = bld.toFormatter(); [EOL]     assertEquals("1-2", f.print(PERIOD)); [EOL]     assertEquals(new Period(0, 2, 1, 0, 0, 0, 0, 0), f.parsePeriod("1-2")); [EOL] }
public void testFormatPrintZeroRarelyFirstSeconds() { [EOL]     PeriodFormatter f = new PeriodFormatterBuilder().printZeroRarelyFirst().appendSeconds().toFormatter(); [EOL]     assertEquals("0", f.print(EMPTY_PERIOD)); [EOL] }
public void testFormatSeparatorIfFieldsAfter() { [EOL]     PeriodFormatter f = builder.appendYears().appendSeparatorIfFieldsAfter("T").appendHours().toFormatter(); [EOL]     assertEquals("1T5", f.print(PERIOD)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("T5", f.print(TIME_PERIOD)); [EOL]     assertEquals(2, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1", f.print(DATE_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSeparatorIfFieldsAfter() { [EOL]     PeriodFormatter f = builder.appendYears().appendSeparatorIfFieldsAfter("T").appendHours().toFormatter(); [EOL]     assertEquals("1T5", f.print(PERIOD)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("T5", f.print(TIME_PERIOD)); [EOL]     assertEquals(2, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1", f.print(DATE_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSeparatorIfFieldsAfter() { [EOL]     PeriodFormatter f = builder.appendYears().appendSeparatorIfFieldsAfter("T").appendHours().toFormatter(); [EOL]     assertEquals("1T5", f.print(PERIOD)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("T5", f.print(TIME_PERIOD)); [EOL]     assertEquals(2, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1", f.print(DATE_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatAppend_PrinterParser_PrinterParser() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, parser).appendMonths(); [EOL]     assertNotNull(bld.toPrinter()); [EOL]     assertNotNull(bld.toParser()); [EOL]     PeriodFormatter f = bld.toFormatter(); [EOL]     assertEquals("1-2", f.print(PERIOD)); [EOL]     assertEquals(new Period(0, 2, 1, 0, 0, 0, 0, 0), f.parsePeriod("1-2")); [EOL] }
public void testFormatAppend_PrinterParser_PrinterParser() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, parser).appendMonths(); [EOL]     assertNotNull(bld.toPrinter()); [EOL]     assertNotNull(bld.toParser()); [EOL]     PeriodFormatter f = bld.toFormatter(); [EOL]     assertEquals("1-2", f.print(PERIOD)); [EOL]     assertEquals(new Period(0, 2, 1, 0, 0, 0, 0, 0), f.parsePeriod("1-2")); [EOL] }
public void testFormatAppend_PrinterParser_PrinterParser() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, parser).appendMonths(); [EOL]     assertNotNull(bld.toPrinter()); [EOL]     assertNotNull(bld.toParser()); [EOL]     PeriodFormatter f = bld.toFormatter(); [EOL]     assertEquals("1-2", f.print(PERIOD)); [EOL]     assertEquals(new Period(0, 2, 1, 0, 0, 0, 0, 0), f.parsePeriod("1-2")); [EOL] }
public void testFormatAppend_PrinterParser_PrinterParser() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, parser).appendMonths(); [EOL]     assertNotNull(bld.toPrinter()); [EOL]     assertNotNull(bld.toParser()); [EOL]     PeriodFormatter f = bld.toFormatter(); [EOL]     assertEquals("1-2", f.print(PERIOD)); [EOL]     assertEquals(new Period(0, 2, 1, 0, 0, 0, 0, 0), f.parsePeriod("1-2")); [EOL] }
public void testFormatAppend_PrinterParser_PrinterParser() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, parser).appendMonths(); [EOL]     assertNotNull(bld.toPrinter()); [EOL]     assertNotNull(bld.toParser()); [EOL]     PeriodFormatter f = bld.toFormatter(); [EOL]     assertEquals("1-2", f.print(PERIOD)); [EOL]     assertEquals(new Period(0, 2, 1, 0, 0, 0, 0, 0), f.parsePeriod("1-2")); [EOL] }
public void testFormatAppend_PrinterParser_PrinterParser() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, parser).appendMonths(); [EOL]     assertNotNull(bld.toPrinter()); [EOL]     assertNotNull(bld.toParser()); [EOL]     PeriodFormatter f = bld.toFormatter(); [EOL]     assertEquals("1-2", f.print(PERIOD)); [EOL]     assertEquals(new Period(0, 2, 1, 0, 0, 0, 0, 0), f.parsePeriod("1-2")); [EOL] }
public void testFormatAppend_PrinterParser_PrinterParser() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, parser).appendMonths(); [EOL]     assertNotNull(bld.toPrinter()); [EOL]     assertNotNull(bld.toParser()); [EOL]     PeriodFormatter f = bld.toFormatter(); [EOL]     assertEquals("1-2", f.print(PERIOD)); [EOL]     assertEquals(new Period(0, 2, 1, 0, 0, 0, 0, 0), f.parsePeriod("1-2")); [EOL] }
public void testFormatAppend_PrinterParser_PrinterParser() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, parser).appendMonths(); [EOL]     assertNotNull(bld.toPrinter()); [EOL]     assertNotNull(bld.toParser()); [EOL]     PeriodFormatter f = bld.toFormatter(); [EOL]     assertEquals("1-2", f.print(PERIOD)); [EOL]     assertEquals(new Period(0, 2, 1, 0, 0, 0, 0, 0), f.parsePeriod("1-2")); [EOL] }
public void testFormatAppend_PrinterParser_PrinterParser() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, parser).appendMonths(); [EOL]     assertNotNull(bld.toPrinter()); [EOL]     assertNotNull(bld.toParser()); [EOL]     PeriodFormatter f = bld.toFormatter(); [EOL]     assertEquals("1-2", f.print(PERIOD)); [EOL]     assertEquals(new Period(0, 2, 1, 0, 0, 0, 0, 0), f.parsePeriod("1-2")); [EOL] }
public void testFormatAppend_PrinterParser_PrinterParser() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, parser).appendMonths(); [EOL]     assertNotNull(bld.toPrinter()); [EOL]     assertNotNull(bld.toParser()); [EOL]     PeriodFormatter f = bld.toFormatter(); [EOL]     assertEquals("1-2", f.print(PERIOD)); [EOL]     assertEquals(new Period(0, 2, 1, 0, 0, 0, 0, 0), f.parsePeriod("1-2")); [EOL] }
public void testFormatAppend_PrinterParser_PrinterParser() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, parser).appendMonths(); [EOL]     assertNotNull(bld.toPrinter()); [EOL]     assertNotNull(bld.toParser()); [EOL]     PeriodFormatter f = bld.toFormatter(); [EOL]     assertEquals("1-2", f.print(PERIOD)); [EOL]     assertEquals(new Period(0, 2, 1, 0, 0, 0, 0, 0), f.parsePeriod("1-2")); [EOL] }
public void testFormatSeparatorIfFieldsAfter() { [EOL]     PeriodFormatter f = builder.appendYears().appendSeparatorIfFieldsAfter("T").appendHours().toFormatter(); [EOL]     assertEquals("1T5", f.print(PERIOD)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("T5", f.print(TIME_PERIOD)); [EOL]     assertEquals(2, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1", f.print(DATE_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSeparatorIfFieldsAfter() { [EOL]     PeriodFormatter f = builder.appendYears().appendSeparatorIfFieldsAfter("T").appendHours().toFormatter(); [EOL]     assertEquals("1T5", f.print(PERIOD)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("T5", f.print(TIME_PERIOD)); [EOL]     assertEquals(2, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1", f.print(DATE_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSeparatorIfFieldsAfter() { [EOL]     PeriodFormatter f = builder.appendYears().appendSeparatorIfFieldsAfter("T").appendHours().toFormatter(); [EOL]     assertEquals("1T5", f.print(PERIOD)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("T5", f.print(TIME_PERIOD)); [EOL]     assertEquals(2, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1", f.print(DATE_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSeparatorIfFieldsAfter() { [EOL]     PeriodFormatter f = builder.appendYears().appendSeparatorIfFieldsAfter("T").appendHours().toFormatter(); [EOL]     assertEquals("1T5", f.print(PERIOD)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("T5", f.print(TIME_PERIOD)); [EOL]     assertEquals(2, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1", f.print(DATE_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSeparatorIfFieldsAfter() { [EOL]     PeriodFormatter f = builder.appendYears().appendSeparatorIfFieldsAfter("T").appendHours().toFormatter(); [EOL]     assertEquals("1T5", f.print(PERIOD)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("T5", f.print(TIME_PERIOD)); [EOL]     assertEquals(2, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1", f.print(DATE_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSeparatorIfFieldsAfter() { [EOL]     PeriodFormatter f = builder.appendYears().appendSeparatorIfFieldsAfter("T").appendHours().toFormatter(); [EOL]     assertEquals("1T5", f.print(PERIOD)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("T5", f.print(TIME_PERIOD)); [EOL]     assertEquals(2, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1", f.print(DATE_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSeparatorIfFieldsAfter() { [EOL]     PeriodFormatter f = builder.appendYears().appendSeparatorIfFieldsAfter("T").appendHours().toFormatter(); [EOL]     assertEquals("1T5", f.print(PERIOD)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("T5", f.print(TIME_PERIOD)); [EOL]     assertEquals(2, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1", f.print(DATE_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSeparatorIfFieldsAfter() { [EOL]     PeriodFormatter f = builder.appendYears().appendSeparatorIfFieldsAfter("T").appendHours().toFormatter(); [EOL]     assertEquals("1T5", f.print(PERIOD)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("T5", f.print(TIME_PERIOD)); [EOL]     assertEquals(2, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1", f.print(DATE_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSeparatorIfFieldsAfter() { [EOL]     PeriodFormatter f = builder.appendYears().appendSeparatorIfFieldsAfter("T").appendHours().toFormatter(); [EOL]     assertEquals("1T5", f.print(PERIOD)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("T5", f.print(TIME_PERIOD)); [EOL]     assertEquals(2, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1", f.print(DATE_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSeparatorIfFieldsAfter() { [EOL]     PeriodFormatter f = builder.appendYears().appendSeparatorIfFieldsAfter("T").appendHours().toFormatter(); [EOL]     assertEquals("1T5", f.print(PERIOD)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("T5", f.print(TIME_PERIOD)); [EOL]     assertEquals(2, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1", f.print(DATE_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSeparatorIfFieldsAfter() { [EOL]     PeriodFormatter f = builder.appendYears().appendSeparatorIfFieldsAfter("T").appendHours().toFormatter(); [EOL]     assertEquals("1T5", f.print(PERIOD)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("T5", f.print(TIME_PERIOD)); [EOL]     assertEquals(2, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1", f.print(DATE_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSeparatorIfFieldsAfter() { [EOL]     PeriodFormatter f = builder.appendYears().appendSeparatorIfFieldsAfter("T").appendHours().toFormatter(); [EOL]     assertEquals("1T5", f.print(PERIOD)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("T5", f.print(TIME_PERIOD)); [EOL]     assertEquals(2, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1", f.print(DATE_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSeparatorIfFieldsAfter() { [EOL]     PeriodFormatter f = builder.appendYears().appendSeparatorIfFieldsAfter("T").appendHours().toFormatter(); [EOL]     assertEquals("1T5", f.print(PERIOD)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("T5", f.print(TIME_PERIOD)); [EOL]     assertEquals(2, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1", f.print(DATE_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testParseStandardFail1() { [EOL]     PeriodFormatter parser = ISOPeriodFormat.standard(); [EOL]     try { [EOL]         parser.parsePeriod("P1Y2S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFormatSeparatorIfFieldsAfter() { [EOL]     PeriodFormatter f = builder.appendYears().appendSeparatorIfFieldsAfter("T").appendHours().toFormatter(); [EOL]     assertEquals("1T5", f.print(PERIOD)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("T5", f.print(TIME_PERIOD)); [EOL]     assertEquals(2, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1", f.print(DATE_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatSeparatorIfFieldsAfter() { [EOL]     PeriodFormatter f = builder.appendYears().appendSeparatorIfFieldsAfter("T").appendHours().toFormatter(); [EOL]     assertEquals("1T5", f.print(PERIOD)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("T5", f.print(TIME_PERIOD)); [EOL]     assertEquals(2, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1", f.print(DATE_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatAppend_PrinterParser_PrinterParser() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, parser).appendMonths(); [EOL]     assertNotNull(bld.toPrinter()); [EOL]     assertNotNull(bld.toParser()); [EOL]     PeriodFormatter f = bld.toFormatter(); [EOL]     assertEquals("1-2", f.print(PERIOD)); [EOL]     assertEquals(new Period(0, 2, 1, 0, 0, 0, 0, 0), f.parsePeriod("1-2")); [EOL] }
public void testFormatAppend_PrinterParser_PrinterParser() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, parser).appendMonths(); [EOL]     assertNotNull(bld.toPrinter()); [EOL]     assertNotNull(bld.toParser()); [EOL]     PeriodFormatter f = bld.toFormatter(); [EOL]     assertEquals("1-2", f.print(PERIOD)); [EOL]     assertEquals(new Period(0, 2, 1, 0, 0, 0, 0, 0), f.parsePeriod("1-2")); [EOL] }
public void testFormatAppend_PrinterParser_PrinterParser() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, parser).appendMonths(); [EOL]     assertNotNull(bld.toPrinter()); [EOL]     assertNotNull(bld.toParser()); [EOL]     PeriodFormatter f = bld.toFormatter(); [EOL]     assertEquals("1-2", f.print(PERIOD)); [EOL]     assertEquals(new Period(0, 2, 1, 0, 0, 0, 0, 0), f.parsePeriod("1-2")); [EOL] }
public void testFormatAppend_PrinterParser_PrinterParser() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, parser).appendMonths(); [EOL]     assertNotNull(bld.toPrinter()); [EOL]     assertNotNull(bld.toParser()); [EOL]     PeriodFormatter f = bld.toFormatter(); [EOL]     assertEquals("1-2", f.print(PERIOD)); [EOL]     assertEquals(new Period(0, 2, 1, 0, 0, 0, 0, 0), f.parsePeriod("1-2")); [EOL] }
public void testFormatAppend_PrinterParser_PrinterParser() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, parser).appendMonths(); [EOL]     assertNotNull(bld.toPrinter()); [EOL]     assertNotNull(bld.toParser()); [EOL]     PeriodFormatter f = bld.toFormatter(); [EOL]     assertEquals("1-2", f.print(PERIOD)); [EOL]     assertEquals(new Period(0, 2, 1, 0, 0, 0, 0, 0), f.parsePeriod("1-2")); [EOL] }
public void testFormatAppend_PrinterParser_PrinterParser() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, parser).appendMonths(); [EOL]     assertNotNull(bld.toPrinter()); [EOL]     assertNotNull(bld.toParser()); [EOL]     PeriodFormatter f = bld.toFormatter(); [EOL]     assertEquals("1-2", f.print(PERIOD)); [EOL]     assertEquals(new Period(0, 2, 1, 0, 0, 0, 0, 0), f.parsePeriod("1-2")); [EOL] }
public void testFormatAppend_PrinterParser_PrinterParser() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, parser).appendMonths(); [EOL]     assertNotNull(bld.toPrinter()); [EOL]     assertNotNull(bld.toParser()); [EOL]     PeriodFormatter f = bld.toFormatter(); [EOL]     assertEquals("1-2", f.print(PERIOD)); [EOL]     assertEquals(new Period(0, 2, 1, 0, 0, 0, 0, 0), f.parsePeriod("1-2")); [EOL] }
public void testFormatAppend_PrinterParser_PrinterParser() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, parser).appendMonths(); [EOL]     assertNotNull(bld.toPrinter()); [EOL]     assertNotNull(bld.toParser()); [EOL]     PeriodFormatter f = bld.toFormatter(); [EOL]     assertEquals("1-2", f.print(PERIOD)); [EOL]     assertEquals(new Period(0, 2, 1, 0, 0, 0, 0, 0), f.parsePeriod("1-2")); [EOL] }
public void testFormatAppend_PrinterParser_PrinterParser() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, parser).appendMonths(); [EOL]     assertNotNull(bld.toPrinter()); [EOL]     assertNotNull(bld.toParser()); [EOL]     PeriodFormatter f = bld.toFormatter(); [EOL]     assertEquals("1-2", f.print(PERIOD)); [EOL]     assertEquals(new Period(0, 2, 1, 0, 0, 0, 0, 0), f.parsePeriod("1-2")); [EOL] }
public void testGet_DateTimeFieldType() { [EOL]     LocalDate test = new LocalDate(); [EOL]     assertEquals(1970, test.get(DateTimeFieldType.year())); [EOL]     assertEquals(6, test.get(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(9, test.get(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(2, test.get(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(160, test.get(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(24, test.get(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(1970, test.get(DateTimeFieldType.weekyear())); [EOL]     try { [EOL]         test.get(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.get(DateTimeFieldType.hourOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testBug2182444_usCentral() { [EOL]     Chronology chronUSCentral = GregorianChronology.getInstance(DateTimeZone.forID("US/Central")); [EOL]     Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC); [EOL]     DateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0, 0, chronUTC); [EOL]     DateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0, 0, chronUTC); [EOL]     assertTrue("Should be standard time", chronUSCentral.getZone().isStandardOffset(usCentralStandardInUTC.getMillis())); [EOL]     assertFalse("Should be daylight time", chronUSCentral.getZone().isStandardOffset(usCentralDaylightInUTC.getMillis())); [EOL]     DateTime usCentralStandardInUSCentral = usCentralStandardInUTC.toDateTime(chronUSCentral); [EOL]     DateTime usCentralDaylightInUSCentral = usCentralDaylightInUTC.toDateTime(chronUSCentral); [EOL]     assertEquals(1, usCentralStandardInUSCentral.getHourOfDay()); [EOL]     assertEquals(usCentralStandardInUSCentral.getHourOfDay(), usCentralDaylightInUSCentral.getHourOfDay()); [EOL]     assertTrue(usCentralStandardInUSCentral.getMillis() != usCentralDaylightInUSCentral.getMillis()); [EOL]     assertEquals(usCentralStandardInUSCentral, usCentralStandardInUSCentral.withHourOfDay(1)); [EOL]     assertEquals(usCentralStandardInUSCentral.getMillis() + 3, usCentralStandardInUSCentral.withMillisOfSecond(3).getMillis()); [EOL]     assertEquals(usCentralDaylightInUSCentral, usCentralDaylightInUSCentral.withHourOfDay(1)); [EOL]     assertEquals(usCentralDaylightInUSCentral.getMillis() + 3, usCentralDaylightInUSCentral.withMillisOfSecond(3).getMillis()); [EOL] }
public void testBug2182444_usCentral() { [EOL]     Chronology chronUSCentral = GregorianChronology.getInstance(DateTimeZone.forID("US/Central")); [EOL]     Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC); [EOL]     DateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0, 0, chronUTC); [EOL]     DateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0, 0, chronUTC); [EOL]     assertTrue("Should be standard time", chronUSCentral.getZone().isStandardOffset(usCentralStandardInUTC.getMillis())); [EOL]     assertFalse("Should be daylight time", chronUSCentral.getZone().isStandardOffset(usCentralDaylightInUTC.getMillis())); [EOL]     DateTime usCentralStandardInUSCentral = usCentralStandardInUTC.toDateTime(chronUSCentral); [EOL]     DateTime usCentralDaylightInUSCentral = usCentralDaylightInUTC.toDateTime(chronUSCentral); [EOL]     assertEquals(1, usCentralStandardInUSCentral.getHourOfDay()); [EOL]     assertEquals(usCentralStandardInUSCentral.getHourOfDay(), usCentralDaylightInUSCentral.getHourOfDay()); [EOL]     assertTrue(usCentralStandardInUSCentral.getMillis() != usCentralDaylightInUSCentral.getMillis()); [EOL]     assertEquals(usCentralStandardInUSCentral, usCentralStandardInUSCentral.withHourOfDay(1)); [EOL]     assertEquals(usCentralStandardInUSCentral.getMillis() + 3, usCentralStandardInUSCentral.withMillisOfSecond(3).getMillis()); [EOL]     assertEquals(usCentralDaylightInUSCentral, usCentralDaylightInUSCentral.withHourOfDay(1)); [EOL]     assertEquals(usCentralDaylightInUSCentral.getMillis() + 3, usCentralDaylightInUSCentral.withMillisOfSecond(3).getMillis()); [EOL] }
public void testForStyle_shortDate() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.shortDate(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("S-"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateInstance(DateFormat.SHORT, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.SHORT, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.SHORT, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL]     DateTime date = new DateTime(DateFormat.getDateInstance(DateFormat.SHORT, FRANCE).parse(expect)); [EOL]     assertEquals(date, f.withLocale(FRANCE).parseDateTime(expect)); [EOL] }
public void testForStyle_fullDate() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.fullDate(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("F-"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateInstance(DateFormat.FULL, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.FULL, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.FULL, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL] }
public void test_parseWrongOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime expected = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forOffsetHours(7)); [EOL]     assertEquals(expected.withZone(TOKYO), f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected, f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +07:00")); [EOL] }
public void test_parseWrongOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime expected = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forOffsetHours(7)); [EOL]     assertEquals(expected.withZone(TOKYO), f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected, f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +07:00")); [EOL] }
public void test_parseWrongOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime expected = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forOffsetHours(7)); [EOL]     assertEquals(expected.withZone(TOKYO), f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected, f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +07:00")); [EOL] }
public void test_parseWrongOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime expected = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forOffsetHours(7)); [EOL]     assertEquals(expected.withZone(TOKYO), f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected, f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +07:00")); [EOL] }
public void test_parseWrongOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime expected = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forOffsetHours(7)); [EOL]     assertEquals(expected.withZone(TOKYO), f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected, f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +07:00")); [EOL] }
public void testFormat_invalid() { [EOL]     try { [EOL]         DateTimeFormat.forPattern(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateTimeFormat.forPattern(""); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateTimeFormat.forPattern("A"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateTimeFormat.forPattern("dd/mm/AA"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFormat_invalid() { [EOL]     try { [EOL]         DateTimeFormat.forPattern(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateTimeFormat.forPattern(""); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateTimeFormat.forPattern("A"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateTimeFormat.forPattern("dd/mm/AA"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForStyle_fullDate() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.fullDate(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("F-"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateInstance(DateFormat.FULL, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.FULL, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.FULL, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL] }
public void testForStyle_fullDate() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.fullDate(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("F-"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateInstance(DateFormat.FULL, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.FULL, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.FULL, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL] }
public void testForStyle_fullDate() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.fullDate(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("F-"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateInstance(DateFormat.FULL, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.FULL, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.FULL, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL] }
public void testForStyle_fullDate() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.fullDate(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("F-"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateInstance(DateFormat.FULL, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.FULL, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.FULL, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL] }
public void testForStyle_fullDate() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.fullDate(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("F-"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateInstance(DateFormat.FULL, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.FULL, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.FULL, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL] }
public void testForStyle_fullDate() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.fullDate(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("F-"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateInstance(DateFormat.FULL, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.FULL, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.FULL, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL] }
public void testFactory_standardSeconds_long() throws Throwable { [EOL]     Duration test = Duration.standardSeconds(1); [EOL]     assertEquals(1000L, test.getMillis()); [EOL]     test = Duration.standardSeconds(2); [EOL]     assertEquals(2L * 1000L, test.getMillis()); [EOL]     test = Duration.standardSeconds(0); [EOL]     assertSame(Duration.ZERO, test); [EOL] }
public void testFactory_standardSeconds_long() throws Throwable { [EOL]     Duration test = Duration.standardSeconds(1); [EOL]     assertEquals(1000L, test.getMillis()); [EOL]     test = Duration.standardSeconds(2); [EOL]     assertEquals(2L * 1000L, test.getMillis()); [EOL]     test = Duration.standardSeconds(0); [EOL]     assertSame(Duration.ZERO, test); [EOL] }
public void testFactory_standardSeconds_long() throws Throwable { [EOL]     Duration test = Duration.standardSeconds(1); [EOL]     assertEquals(1000L, test.getMillis()); [EOL]     test = Duration.standardSeconds(2); [EOL]     assertEquals(2L * 1000L, test.getMillis()); [EOL]     test = Duration.standardSeconds(0); [EOL]     assertSame(Duration.ZERO, test); [EOL] }
public void testDuration() throws Exception { [EOL]     Duration test = Duration.millis(12345); [EOL]     loadAndCompare(test, "Duration", false); [EOL]     inlineCompare(test, false); [EOL] }
public void testDuration() throws Exception { [EOL]     Duration test = Duration.millis(12345); [EOL]     loadAndCompare(test, "Duration", false); [EOL]     inlineCompare(test, false); [EOL] }
public void testDuration() throws Exception { [EOL]     Duration test = Duration.millis(12345); [EOL]     loadAndCompare(test, "Duration", false); [EOL]     inlineCompare(test, false); [EOL] }
public void testToDuration1() { [EOL]     Duration test = new Duration(123L); [EOL]     Duration result = test.toDuration(); [EOL]     assertSame(test, result); [EOL] }
public void testMinus_RD2() { [EOL]     Duration test = new Duration(123L); [EOL]     Duration result = test.minus(new Duration(0L)); [EOL]     assertSame(test, result); [EOL] }
public void testMinus_RD2() { [EOL]     Duration test = new Duration(123L); [EOL]     Duration result = test.minus(new Duration(0L)); [EOL]     assertSame(test, result); [EOL] }
public void testPlus_RD1() { [EOL]     Duration test = new Duration(123L); [EOL]     Duration result = test.plus(new Duration(8000L)); [EOL]     assertEquals(8123L, result.getMillis()); [EOL] }
public void testPlus_RD1() { [EOL]     Duration test = new Duration(123L); [EOL]     Duration result = test.plus(new Duration(8000L)); [EOL]     assertEquals(8123L, result.getMillis()); [EOL] }
public void testMultipliedBy_long1() { [EOL]     Duration test = new Duration(123L); [EOL]     Duration result = test.multipliedBy(2L); [EOL]     assertEquals(246L, result.getMillis()); [EOL] }
public void testMultipliedBy_long1() { [EOL]     Duration test = new Duration(123L); [EOL]     Duration result = test.multipliedBy(2L); [EOL]     assertEquals(246L, result.getMillis()); [EOL] }
public void testMultipliedBy_long1() { [EOL]     Duration test = new Duration(123L); [EOL]     Duration result = test.multipliedBy(2L); [EOL]     assertEquals(246L, result.getMillis()); [EOL] }
public void testMultipliedBy_long1() { [EOL]     Duration test = new Duration(123L); [EOL]     Duration result = test.multipliedBy(2L); [EOL]     assertEquals(246L, result.getMillis()); [EOL] }
public void testFormatAlternateExtended() { [EOL]     Period p = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     assertEquals("P0001-02-04T05:06:07.008", ISOPeriodFormat.alternateExtended().print(p)); [EOL]     p = new Period(1, 2, 3, 4, 5, 6, 7, 0); [EOL]     assertEquals("P0001-02-04T05:06:07", ISOPeriodFormat.alternateExtended().print(p)); [EOL]     p = new Period(0); [EOL]     assertEquals("P0000-00-00T00:00:00", ISOPeriodFormat.alternateExtended().print(p)); [EOL]     p = new Period(0, PeriodType.standard().withMillisRemoved().withSecondsRemoved()); [EOL]     assertEquals("P0000-00-00T00:00:00", ISOPeriodFormat.alternateExtended().print(p)); [EOL]     assertEquals("P0001-00-04T05:06:07.008", ISOPeriodFormat.alternateExtended().print(YEAR_DAY_PERIOD)); [EOL]     assertEquals("P0000-00-00T00:00:00", ISOPeriodFormat.alternateExtended().print(EMPTY_YEAR_DAY_PERIOD)); [EOL]     assertEquals("P0001-02-04T00:00:00", ISOPeriodFormat.alternateExtended().print(DATE_PERIOD)); [EOL]     assertEquals("P0000-00-00T05:06:07.008", ISOPeriodFormat.alternateExtended().print(TIME_PERIOD)); [EOL] }
public void testFormatAlternateExtended() { [EOL]     Period p = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     assertEquals("P0001-02-04T05:06:07.008", ISOPeriodFormat.alternateExtended().print(p)); [EOL]     p = new Period(1, 2, 3, 4, 5, 6, 7, 0); [EOL]     assertEquals("P0001-02-04T05:06:07", ISOPeriodFormat.alternateExtended().print(p)); [EOL]     p = new Period(0); [EOL]     assertEquals("P0000-00-00T00:00:00", ISOPeriodFormat.alternateExtended().print(p)); [EOL]     p = new Period(0, PeriodType.standard().withMillisRemoved().withSecondsRemoved()); [EOL]     assertEquals("P0000-00-00T00:00:00", ISOPeriodFormat.alternateExtended().print(p)); [EOL]     assertEquals("P0001-00-04T05:06:07.008", ISOPeriodFormat.alternateExtended().print(YEAR_DAY_PERIOD)); [EOL]     assertEquals("P0000-00-00T00:00:00", ISOPeriodFormat.alternateExtended().print(EMPTY_YEAR_DAY_PERIOD)); [EOL]     assertEquals("P0001-02-04T00:00:00", ISOPeriodFormat.alternateExtended().print(DATE_PERIOD)); [EOL]     assertEquals("P0000-00-00T05:06:07.008", ISOPeriodFormat.alternateExtended().print(TIME_PERIOD)); [EOL] }
public void testGet_DateTimeFieldType() { [EOL]     DateMidnight test = new DateMidnight(); [EOL]     assertEquals(1, test.get(DateTimeFieldType.era())); [EOL]     assertEquals(20, test.get(DateTimeFieldType.centuryOfEra())); [EOL]     assertEquals(2, test.get(DateTimeFieldType.yearOfCentury())); [EOL]     assertEquals(2002, test.get(DateTimeFieldType.yearOfEra())); [EOL]     assertEquals(2002, test.get(DateTimeFieldType.year())); [EOL]     assertEquals(6, test.get(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(9, test.get(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(2002, test.get(DateTimeFieldType.weekyear())); [EOL]     assertEquals(23, test.get(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(7, test.get(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(160, test.get(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(24, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.minuteOfDay())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.secondOfDay())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.millisOfDay())); [EOL]     try { [EOL]         test.get((DateTimeFieldType) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGet_DateTimeFieldType() { [EOL]     DateMidnight test = new DateMidnight(); [EOL]     assertEquals(1, test.get(DateTimeFieldType.era())); [EOL]     assertEquals(20, test.get(DateTimeFieldType.centuryOfEra())); [EOL]     assertEquals(2, test.get(DateTimeFieldType.yearOfCentury())); [EOL]     assertEquals(2002, test.get(DateTimeFieldType.yearOfEra())); [EOL]     assertEquals(2002, test.get(DateTimeFieldType.year())); [EOL]     assertEquals(6, test.get(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(9, test.get(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(2002, test.get(DateTimeFieldType.weekyear())); [EOL]     assertEquals(23, test.get(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(7, test.get(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(160, test.get(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(24, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.minuteOfDay())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.secondOfDay())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.millisOfDay())); [EOL]     try { [EOL]         test.get((DateTimeFieldType) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGet_DateTimeFieldType() { [EOL]     DateMidnight test = new DateMidnight(); [EOL]     assertEquals(1, test.get(DateTimeFieldType.era())); [EOL]     assertEquals(20, test.get(DateTimeFieldType.centuryOfEra())); [EOL]     assertEquals(2, test.get(DateTimeFieldType.yearOfCentury())); [EOL]     assertEquals(2002, test.get(DateTimeFieldType.yearOfEra())); [EOL]     assertEquals(2002, test.get(DateTimeFieldType.year())); [EOL]     assertEquals(6, test.get(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(9, test.get(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(2002, test.get(DateTimeFieldType.weekyear())); [EOL]     assertEquals(23, test.get(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(7, test.get(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(160, test.get(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(24, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.minuteOfDay())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.secondOfDay())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.millisOfDay())); [EOL]     try { [EOL]         test.get((DateTimeFieldType) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFixed() throws IOException { [EOL]     DateTimeZoneBuilder builder = new DateTimeZoneBuilder().setStandardOffset(3600000).setFixedSavings("LMT", 0); [EOL]     DateTimeZone tz = builder.toDateTimeZone("Test", true); [EOL]     for (int i = 0; i < 2; i++) { [EOL]         assertEquals("Test", tz.getID()); [EOL]         assertEquals(true, tz.isFixed()); [EOL]         assertEquals(3600000, tz.getOffset(0)); [EOL]         assertEquals(3600000, tz.getStandardOffset(0)); [EOL]         assertEquals(0, tz.nextTransition(0)); [EOL]         assertEquals(0, tz.previousTransition(0)); [EOL]         tz = testSerialization(builder, "Test"); [EOL]     } [EOL] }
public void testFixed() throws IOException { [EOL]     DateTimeZoneBuilder builder = new DateTimeZoneBuilder().setStandardOffset(3600000).setFixedSavings("LMT", 0); [EOL]     DateTimeZone tz = builder.toDateTimeZone("Test", true); [EOL]     for (int i = 0; i < 2; i++) { [EOL]         assertEquals("Test", tz.getID()); [EOL]         assertEquals(true, tz.isFixed()); [EOL]         assertEquals(3600000, tz.getOffset(0)); [EOL]         assertEquals(3600000, tz.getStandardOffset(0)); [EOL]         assertEquals(0, tz.nextTransition(0)); [EOL]         assertEquals(0, tz.previousTransition(0)); [EOL]         tz = testSerialization(builder, "Test"); [EOL]     } [EOL] }
public void testFixed() throws IOException { [EOL]     DateTimeZoneBuilder builder = new DateTimeZoneBuilder().setStandardOffset(3600000).setFixedSavings("LMT", 0); [EOL]     DateTimeZone tz = builder.toDateTimeZone("Test", true); [EOL]     for (int i = 0; i < 2; i++) { [EOL]         assertEquals("Test", tz.getID()); [EOL]         assertEquals(true, tz.isFixed()); [EOL]         assertEquals(3600000, tz.getOffset(0)); [EOL]         assertEquals(3600000, tz.getStandardOffset(0)); [EOL]         assertEquals(0, tz.nextTransition(0)); [EOL]         assertEquals(0, tz.previousTransition(0)); [EOL]         tz = testSerialization(builder, "Test"); [EOL]     } [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testFixed() throws IOException { [EOL]     DateTimeZoneBuilder builder = new DateTimeZoneBuilder().setStandardOffset(3600000).setFixedSavings("LMT", 0); [EOL]     DateTimeZone tz = builder.toDateTimeZone("Test", true); [EOL]     for (int i = 0; i < 2; i++) { [EOL]         assertEquals("Test", tz.getID()); [EOL]         assertEquals(true, tz.isFixed()); [EOL]         assertEquals(3600000, tz.getOffset(0)); [EOL]         assertEquals(3600000, tz.getStandardOffset(0)); [EOL]         assertEquals(0, tz.nextTransition(0)); [EOL]         assertEquals(0, tz.previousTransition(0)); [EOL]         tz = testSerialization(builder, "Test"); [EOL]     } [EOL] }
public void testFixed() throws IOException { [EOL]     DateTimeZoneBuilder builder = new DateTimeZoneBuilder().setStandardOffset(3600000).setFixedSavings("LMT", 0); [EOL]     DateTimeZone tz = builder.toDateTimeZone("Test", true); [EOL]     for (int i = 0; i < 2; i++) { [EOL]         assertEquals("Test", tz.getID()); [EOL]         assertEquals(true, tz.isFixed()); [EOL]         assertEquals(3600000, tz.getOffset(0)); [EOL]         assertEquals(3600000, tz.getStandardOffset(0)); [EOL]         assertEquals(0, tz.nextTransition(0)); [EOL]         assertEquals(0, tz.previousTransition(0)); [EOL]         tz = testSerialization(builder, "Test"); [EOL]     } [EOL] }
public void testFixed() throws IOException { [EOL]     DateTimeZoneBuilder builder = new DateTimeZoneBuilder().setStandardOffset(3600000).setFixedSavings("LMT", 0); [EOL]     DateTimeZone tz = builder.toDateTimeZone("Test", true); [EOL]     for (int i = 0; i < 2; i++) { [EOL]         assertEquals("Test", tz.getID()); [EOL]         assertEquals(true, tz.isFixed()); [EOL]         assertEquals(3600000, tz.getOffset(0)); [EOL]         assertEquals(3600000, tz.getStandardOffset(0)); [EOL]         assertEquals(0, tz.nextTransition(0)); [EOL]         assertEquals(0, tz.previousTransition(0)); [EOL]         tz = testSerialization(builder, "Test"); [EOL]     } [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testSerializedGJChronologyChangedInternals() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(PARIS, 123L, 2); [EOL]     loadAndCompare(test, "GJChronologyChangedInternals", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronologyChangedInternals() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(PARIS, 123L, 2); [EOL]     loadAndCompare(test, "GJChronologyChangedInternals", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronologyChangedInternals() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(PARIS, 123L, 2); [EOL]     loadAndCompare(test, "GJChronologyChangedInternals", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronologyChangedInternals() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(PARIS, 123L, 2); [EOL]     loadAndCompare(test, "GJChronologyChangedInternals", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronologyChangedInternals() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(PARIS, 123L, 2); [EOL]     loadAndCompare(test, "GJChronologyChangedInternals", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronologyChangedInternals() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(PARIS, 123L, 2); [EOL]     loadAndCompare(test, "GJChronologyChangedInternals", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testSerializedGJChronologyChangedInternals() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(PARIS, 123L, 2); [EOL]     loadAndCompare(test, "GJChronologyChangedInternals", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronologyChangedInternals() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(PARIS, 123L, 2); [EOL]     loadAndCompare(test, "GJChronologyChangedInternals", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronologyChangedInternals() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(PARIS, 123L, 2); [EOL]     loadAndCompare(test, "GJChronologyChangedInternals", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronologyChangedInternals() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(PARIS, 123L, 2); [EOL]     loadAndCompare(test, "GJChronologyChangedInternals", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronologyChangedInternals() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(PARIS, 123L, 2); [EOL]     loadAndCompare(test, "GJChronologyChangedInternals", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronologyChangedInternals() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(PARIS, 123L, 2); [EOL]     loadAndCompare(test, "GJChronologyChangedInternals", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronologyChangedInternals() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(PARIS, 123L, 2); [EOL]     loadAndCompare(test, "GJChronologyChangedInternals", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testSerializedGJChronologyChangedInternals() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(PARIS, 123L, 2); [EOL]     loadAndCompare(test, "GJChronologyChangedInternals", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronologyChangedInternals() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(PARIS, 123L, 2); [EOL]     loadAndCompare(test, "GJChronologyChangedInternals", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronologyChangedInternals() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(PARIS, 123L, 2); [EOL]     loadAndCompare(test, "GJChronologyChangedInternals", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronologyChangedInternals() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(PARIS, 123L, 2); [EOL]     loadAndCompare(test, "GJChronologyChangedInternals", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronologyChangedInternals() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(PARIS, 123L, 2); [EOL]     loadAndCompare(test, "GJChronologyChangedInternals", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronologyChangedInternals() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(PARIS, 123L, 2); [EOL]     loadAndCompare(test, "GJChronologyChangedInternals", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronologyChangedInternals() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(PARIS, 123L, 2); [EOL]     loadAndCompare(test, "GJChronologyChangedInternals", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronologyChangedInternals() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(PARIS, 123L, 2); [EOL]     loadAndCompare(test, "GJChronologyChangedInternals", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testBug3476684_adjustOffset_springGap() { [EOL]     final DateTimeZone zone = DateTimeZone.forID("America/Sao_Paulo"); [EOL]     DateTime base = new DateTime(2011, 10, 15, 22, 15, zone); [EOL]     DateTime baseBefore = base.plusHours(1); [EOL]     DateTime baseAfter = base.plusHours(2); [EOL]     assertSame(base, base.withEarlierOffsetAtOverlap()); [EOL]     assertSame(base, base.withLaterOffsetAtOverlap()); [EOL]     assertSame(baseBefore, baseBefore.withEarlierOffsetAtOverlap()); [EOL]     assertEquals(baseBefore, baseBefore.withLaterOffsetAtOverlap()); [EOL]     assertSame(baseAfter, baseAfter.withLaterOffsetAtOverlap()); [EOL]     assertEquals(baseAfter, baseAfter.withEarlierOffsetAtOverlap()); [EOL] }
public void testToInterval_Zone() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(TOKYO); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime start = base.toDateTimeAtStartOfDay(TOKYO); [EOL]     DateTime end = start.plus(Period.days(1)); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testSerializedGJChronologyChangedInternals() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(PARIS, 123L, 2); [EOL]     loadAndCompare(test, "GJChronologyChangedInternals", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testSerializedGJChronologyChangedInternals() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(PARIS, 123L, 2); [EOL]     loadAndCompare(test, "GJChronologyChangedInternals", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronologyChangedInternals() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(PARIS, 123L, 2); [EOL]     loadAndCompare(test, "GJChronologyChangedInternals", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronologyChangedInternals() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(PARIS, 123L, 2); [EOL]     loadAndCompare(test, "GJChronologyChangedInternals", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronologyChangedInternals() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(PARIS, 123L, 2); [EOL]     loadAndCompare(test, "GJChronologyChangedInternals", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronologyChangedInternals() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(PARIS, 123L, 2); [EOL]     loadAndCompare(test, "GJChronologyChangedInternals", true); [EOL]     inlineCompare(test, true); [EOL] }
public void test_add_long_long() { [EOL]     assertEquals(567L, iField.add(567L, 0L)); [EOL]     assertEquals(567L + 1234L * 90L, iField.add(567L, 1234L)); [EOL]     assertEquals(567L - 1234L * 90L, iField.add(567L, -1234L)); [EOL]     try { [EOL]         iField.add(LONG_MAX, 1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         iField.add(1L, LONG_MAX); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void test_getDifference_long_int() { [EOL]     assertEquals(0, iField.getDifference(1L, 0L)); [EOL]     assertEquals(567, iField.getDifference(567L * 90L, 0L)); [EOL]     assertEquals(567 - 1234, iField.getDifference(567L * 90L, 1234L * 90L)); [EOL]     assertEquals(567 + 1234, iField.getDifference(567L * 90L, -1234L * 90L)); [EOL]     try { [EOL]         iField.getDifference(LONG_MAX, -1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void test_getDifference_long_int() { [EOL]     assertEquals(0, iField.getDifference(1L, 0L)); [EOL]     assertEquals(567, iField.getDifference(567L * 90L, 0L)); [EOL]     assertEquals(567 - 1234, iField.getDifference(567L * 90L, 1234L * 90L)); [EOL]     assertEquals(567 + 1234, iField.getDifference(567L * 90L, -1234L * 90L)); [EOL]     try { [EOL]         iField.getDifference(LONG_MAX, -1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void test_getDifference_long_int() { [EOL]     assertEquals(0, iField.getDifference(1L, 0L)); [EOL]     assertEquals(567, iField.getDifference(567L * 90L, 0L)); [EOL]     assertEquals(567 - 1234, iField.getDifference(567L * 90L, 1234L * 90L)); [EOL]     assertEquals(567 + 1234, iField.getDifference(567L * 90L, -1234L * 90L)); [EOL]     try { [EOL]         iField.getDifference(LONG_MAX, -1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testWithZone() { [EOL]     assertSame(ISOChronology.getInstance(TOKYO), ISOChronology.getInstance(TOKYO).withZone(TOKYO)); [EOL]     assertSame(ISOChronology.getInstance(LONDON), ISOChronology.getInstance(TOKYO).withZone(LONDON)); [EOL]     assertSame(ISOChronology.getInstance(PARIS), ISOChronology.getInstance(TOKYO).withZone(PARIS)); [EOL]     assertSame(ISOChronology.getInstance(LONDON), ISOChronology.getInstance(TOKYO).withZone(null)); [EOL]     assertSame(ISOChronology.getInstance(PARIS), ISOChronology.getInstance().withZone(PARIS)); [EOL]     assertSame(ISOChronology.getInstance(PARIS), ISOChronology.getInstanceUTC().withZone(PARIS)); [EOL] }
public void testWithZone() { [EOL]     assertSame(ISOChronology.getInstance(TOKYO), ISOChronology.getInstance(TOKYO).withZone(TOKYO)); [EOL]     assertSame(ISOChronology.getInstance(LONDON), ISOChronology.getInstance(TOKYO).withZone(LONDON)); [EOL]     assertSame(ISOChronology.getInstance(PARIS), ISOChronology.getInstance(TOKYO).withZone(PARIS)); [EOL]     assertSame(ISOChronology.getInstance(LONDON), ISOChronology.getInstance(TOKYO).withZone(null)); [EOL]     assertSame(ISOChronology.getInstance(PARIS), ISOChronology.getInstance().withZone(PARIS)); [EOL]     assertSame(ISOChronology.getInstance(PARIS), ISOChronology.getInstanceUTC().withZone(PARIS)); [EOL] }
public void testWithZone() { [EOL]     assertSame(ISOChronology.getInstance(TOKYO), ISOChronology.getInstance(TOKYO).withZone(TOKYO)); [EOL]     assertSame(ISOChronology.getInstance(LONDON), ISOChronology.getInstance(TOKYO).withZone(LONDON)); [EOL]     assertSame(ISOChronology.getInstance(PARIS), ISOChronology.getInstance(TOKYO).withZone(PARIS)); [EOL]     assertSame(ISOChronology.getInstance(LONDON), ISOChronology.getInstance(TOKYO).withZone(null)); [EOL]     assertSame(ISOChronology.getInstance(PARIS), ISOChronology.getInstance().withZone(PARIS)); [EOL]     assertSame(ISOChronology.getInstance(PARIS), ISOChronology.getInstanceUTC().withZone(PARIS)); [EOL] }
public void testEqualsHashCode() { [EOL]     DateMidnight test1 = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateMidnight test2 = new DateMidnight(TEST_TIME1_UTC); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     DateMidnight test3 = new DateMidnight(TEST_TIME2_UTC); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockInstant())); [EOL]     assertEquals(false, test1.equals(new DateMidnight(TEST_TIME1_UTC, GREGORIAN_DEFAULT))); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testIsContiguous_RP() { [EOL]     YearMonthDay ymd = new YearMonthDay(2005, 6, 9); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(ymd)); [EOL]     TimeOfDay tod = new TimeOfDay(12, 20, 30, 0); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(tod)); [EOL]     Partial year = new Partial(DateTimeFieldType.year(), 2005); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(year)); [EOL]     Partial hourOfDay = new Partial(DateTimeFieldType.hourOfDay(), 12); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(hourOfDay)); [EOL]     Partial yearHour = year.with(DateTimeFieldType.hourOfDay(), 12); [EOL]     assertEquals(false, DateTimeUtils.isContiguous(yearHour)); [EOL]     Partial ymdd = new Partial(ymd).with(DateTimeFieldType.dayOfWeek(), 2); [EOL]     assertEquals(false, DateTimeUtils.isContiguous(ymdd)); [EOL]     Partial dd = new Partial(DateTimeFieldType.dayOfMonth(), 13).with(DateTimeFieldType.dayOfWeek(), 5); [EOL]     assertEquals(false, DateTimeUtils.isContiguous(dd)); [EOL]     try { [EOL]         DateTimeUtils.isContiguous((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWith1() { [EOL]     Partial test = createHourMinPartial(); [EOL]     Partial result = test.with(DateTimeFieldType.hourOfDay(), 15); [EOL]     check(test, 10, 20); [EOL]     check(result, 15, 20); [EOL] }
public void test_getValue_long() { [EOL]     assertEquals(0, iField.getValue(0L)); [EOL]     assertEquals(12345, iField.getValue(12345678L)); [EOL]     assertEquals(-1, iField.getValue(-1234L)); [EOL]     assertEquals(INTEGER_MAX, iField.getValue(LONG_INTEGER_MAX * 1000L + 999L)); [EOL]     try { [EOL]         iField.getValue(LONG_INTEGER_MAX * 1000L + 1000L); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testConstructor_long_long_Chronology1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance()); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, CopticChronology.getInstance()); [EOL]     MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), CopticChronology.getInstance()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testWith1() { [EOL]     Partial test = createHourMinPartial(); [EOL]     Partial result = test.with(DateTimeFieldType.hourOfDay(), 15); [EOL]     check(test, 10, 20); [EOL]     check(result, 15, 20); [EOL] }
public void testWith1() { [EOL]     Partial test = createHourMinPartial(); [EOL]     Partial result = test.with(DateTimeFieldType.hourOfDay(), 15); [EOL]     check(test, 10, 20); [EOL]     check(result, 15, 20); [EOL] }
public void testWith1() { [EOL]     Partial test = createHourMinPartial(); [EOL]     Partial result = test.with(DateTimeFieldType.hourOfDay(), 15); [EOL]     check(test, 10, 20); [EOL]     check(result, 15, 20); [EOL] }
public void testEra() { [EOL]     assertEquals(1, CopticChronology.AM); [EOL]     try { [EOL]         new DateTime(-1, 13, 5, 0, 0, 0, 0, COPTIC_UTC); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testEra() { [EOL]     assertEquals(1, CopticChronology.AM); [EOL]     try { [EOL]         new DateTime(-1, 13, 5, 0, 0, 0, 0, COPTIC_UTC); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testEra() { [EOL]     assertEquals(1, CopticChronology.AM); [EOL]     try { [EOL]         new DateTime(-1, 13, 5, 0, 0, 0, 0, COPTIC_UTC); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testEra() { [EOL]     assertEquals(1, CopticChronology.AM); [EOL]     try { [EOL]         new DateTime(-1, 13, 5, 0, 0, 0, 0, COPTIC_UTC); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testSerialization() throws Exception { [EOL]     Months test = Months.THREE; [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     Months result = (Months) ois.readObject(); [EOL]     ois.close(); [EOL]     assertSame(test, result); [EOL] }
public void testDividedBy_int() { [EOL]     Months test = Months.months(12); [EOL]     assertEquals(6, test.dividedBy(2).getMonths()); [EOL]     assertEquals(12, test.getMonths()); [EOL]     assertEquals(4, test.dividedBy(3).getMonths()); [EOL]     assertEquals(3, test.dividedBy(4).getMonths()); [EOL]     assertEquals(2, test.dividedBy(5).getMonths()); [EOL]     assertEquals(2, test.dividedBy(6).getMonths()); [EOL]     assertSame(test, test.dividedBy(1)); [EOL]     try { [EOL]         Months.ONE.dividedBy(0); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testDividedBy_int() { [EOL]     Months test = Months.months(12); [EOL]     assertEquals(6, test.dividedBy(2).getMonths()); [EOL]     assertEquals(12, test.getMonths()); [EOL]     assertEquals(4, test.dividedBy(3).getMonths()); [EOL]     assertEquals(3, test.dividedBy(4).getMonths()); [EOL]     assertEquals(2, test.dividedBy(5).getMonths()); [EOL]     assertEquals(2, test.dividedBy(6).getMonths()); [EOL]     assertSame(test, test.dividedBy(1)); [EOL]     try { [EOL]         Months.ONE.dividedBy(0); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testDividedBy_int() { [EOL]     Months test = Months.months(12); [EOL]     assertEquals(6, test.dividedBy(2).getMonths()); [EOL]     assertEquals(12, test.getMonths()); [EOL]     assertEquals(4, test.dividedBy(3).getMonths()); [EOL]     assertEquals(3, test.dividedBy(4).getMonths()); [EOL]     assertEquals(2, test.dividedBy(5).getMonths()); [EOL]     assertEquals(2, test.dividedBy(6).getMonths()); [EOL]     assertSame(test, test.dividedBy(1)); [EOL]     try { [EOL]         Months.ONE.dividedBy(0); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testIsLessThan() { [EOL]     assertEquals(false, Months.THREE.isLessThan(Months.TWO)); [EOL]     assertEquals(false, Months.THREE.isLessThan(Months.THREE)); [EOL]     assertEquals(true, Months.TWO.isLessThan(Months.THREE)); [EOL]     assertEquals(false, Months.ONE.isLessThan(null)); [EOL]     assertEquals(true, Months.months(-1).isLessThan(null)); [EOL] }
public void testIsLessThan() { [EOL]     assertEquals(false, Months.THREE.isLessThan(Months.TWO)); [EOL]     assertEquals(false, Months.THREE.isLessThan(Months.THREE)); [EOL]     assertEquals(true, Months.TWO.isLessThan(Months.THREE)); [EOL]     assertEquals(false, Months.ONE.isLessThan(null)); [EOL]     assertEquals(true, Months.months(-1).isLessThan(null)); [EOL] }
public void testIsLessThan() { [EOL]     assertEquals(false, Months.THREE.isLessThan(Months.TWO)); [EOL]     assertEquals(false, Months.THREE.isLessThan(Months.THREE)); [EOL]     assertEquals(true, Months.TWO.isLessThan(Months.THREE)); [EOL]     assertEquals(false, Months.ONE.isLessThan(null)); [EOL]     assertEquals(true, Months.months(-1).isLessThan(null)); [EOL] }
public void testIsLessThan() { [EOL]     assertEquals(false, Months.THREE.isLessThan(Months.TWO)); [EOL]     assertEquals(false, Months.THREE.isLessThan(Months.THREE)); [EOL]     assertEquals(true, Months.TWO.isLessThan(Months.THREE)); [EOL]     assertEquals(false, Months.ONE.isLessThan(null)); [EOL]     assertEquals(true, Months.months(-1).isLessThan(null)); [EOL] }
public void testConstructor_Object4() throws Throwable { [EOL]     MockInterval base = new MockInterval(); [EOL]     Interval test = new Interval(base); [EOL]     assertEquals(base.getStartMillis(), test.getStartMillis()); [EOL]     assertEquals(base.getEndMillis(), test.getEndMillis()); [EOL] }
public void testGap_RInterval_null() { [EOL]     DateTimeUtils.setCurrentMillisFixed(2); [EOL]     assertEquals(new Interval(2, 3), interval37.gap((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(null, interval37.gap((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(4); [EOL]     assertEquals(null, interval37.gap((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(6); [EOL]     assertEquals(null, interval37.gap((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(7); [EOL]     assertEquals(null, interval37.gap((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(8); [EOL]     assertEquals(new Interval(7, 8), interval37.gap((ReadableInterval) null)); [EOL] }
public void testGap_RInterval_null() { [EOL]     DateTimeUtils.setCurrentMillisFixed(2); [EOL]     assertEquals(new Interval(2, 3), interval37.gap((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(null, interval37.gap((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(4); [EOL]     assertEquals(null, interval37.gap((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(6); [EOL]     assertEquals(null, interval37.gap((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(7); [EOL]     assertEquals(null, interval37.gap((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(8); [EOL]     assertEquals(new Interval(7, 8), interval37.gap((ReadableInterval) null)); [EOL] }
public void testGap_RInterval_null() { [EOL]     DateTimeUtils.setCurrentMillisFixed(2); [EOL]     assertEquals(new Interval(2, 3), interval37.gap((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(null, interval37.gap((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(4); [EOL]     assertEquals(null, interval37.gap((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(6); [EOL]     assertEquals(null, interval37.gap((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(7); [EOL]     assertEquals(null, interval37.gap((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(8); [EOL]     assertEquals(new Interval(7, 8), interval37.gap((ReadableInterval) null)); [EOL] }
public void testAbuts_RInterval() { [EOL]     assertEquals(false, interval37.abuts(new Interval(1, 2))); [EOL]     assertEquals(false, interval37.abuts(new Interval(2, 2))); [EOL]     assertEquals(true, interval37.abuts(new Interval(2, 3))); [EOL]     assertEquals(true, interval37.abuts(new Interval(3, 3))); [EOL]     assertEquals(false, interval37.abuts(new Interval(2, 4))); [EOL]     assertEquals(false, interval37.abuts(new Interval(3, 4))); [EOL]     assertEquals(false, interval37.abuts(new Interval(4, 4))); [EOL]     assertEquals(false, interval37.abuts(new Interval(2, 6))); [EOL]     assertEquals(false, interval37.abuts(new Interval(3, 6))); [EOL]     assertEquals(false, interval37.abuts(new Interval(4, 6))); [EOL]     assertEquals(false, interval37.abuts(new Interval(5, 6))); [EOL]     assertEquals(false, interval37.abuts(new Interval(6, 6))); [EOL]     assertEquals(false, interval37.abuts(new Interval(2, 7))); [EOL]     assertEquals(false, interval37.abuts(new Interval(3, 7))); [EOL]     assertEquals(false, interval37.abuts(new Interval(4, 7))); [EOL]     assertEquals(false, interval37.abuts(new Interval(5, 7))); [EOL]     assertEquals(false, interval37.abuts(new Interval(6, 7))); [EOL]     assertEquals(true, interval37.abuts(new Interval(7, 7))); [EOL]     assertEquals(false, interval37.abuts(new Interval(2, 8))); [EOL]     assertEquals(false, interval37.abuts(new Interval(3, 8))); [EOL]     assertEquals(false, interval37.abuts(new Interval(4, 8))); [EOL]     assertEquals(false, interval37.abuts(new Interval(5, 8))); [EOL]     assertEquals(false, interval37.abuts(new Interval(6, 8))); [EOL]     assertEquals(true, interval37.abuts(new Interval(7, 8))); [EOL]     assertEquals(false, interval37.abuts(new Interval(8, 8))); [EOL]     assertEquals(false, interval37.abuts(new Interval(8, 9))); [EOL]     assertEquals(false, interval37.abuts(new Interval(9, 9))); [EOL] }
public void testAbuts_RInterval() { [EOL]     assertEquals(false, interval37.abuts(new Interval(1, 2))); [EOL]     assertEquals(false, interval37.abuts(new Interval(2, 2))); [EOL]     assertEquals(true, interval37.abuts(new Interval(2, 3))); [EOL]     assertEquals(true, interval37.abuts(new Interval(3, 3))); [EOL]     assertEquals(false, interval37.abuts(new Interval(2, 4))); [EOL]     assertEquals(false, interval37.abuts(new Interval(3, 4))); [EOL]     assertEquals(false, interval37.abuts(new Interval(4, 4))); [EOL]     assertEquals(false, interval37.abuts(new Interval(2, 6))); [EOL]     assertEquals(false, interval37.abuts(new Interval(3, 6))); [EOL]     assertEquals(false, interval37.abuts(new Interval(4, 6))); [EOL]     assertEquals(false, interval37.abuts(new Interval(5, 6))); [EOL]     assertEquals(false, interval37.abuts(new Interval(6, 6))); [EOL]     assertEquals(false, interval37.abuts(new Interval(2, 7))); [EOL]     assertEquals(false, interval37.abuts(new Interval(3, 7))); [EOL]     assertEquals(false, interval37.abuts(new Interval(4, 7))); [EOL]     assertEquals(false, interval37.abuts(new Interval(5, 7))); [EOL]     assertEquals(false, interval37.abuts(new Interval(6, 7))); [EOL]     assertEquals(true, interval37.abuts(new Interval(7, 7))); [EOL]     assertEquals(false, interval37.abuts(new Interval(2, 8))); [EOL]     assertEquals(false, interval37.abuts(new Interval(3, 8))); [EOL]     assertEquals(false, interval37.abuts(new Interval(4, 8))); [EOL]     assertEquals(false, interval37.abuts(new Interval(5, 8))); [EOL]     assertEquals(false, interval37.abuts(new Interval(6, 8))); [EOL]     assertEquals(true, interval37.abuts(new Interval(7, 8))); [EOL]     assertEquals(false, interval37.abuts(new Interval(8, 8))); [EOL]     assertEquals(false, interval37.abuts(new Interval(8, 9))); [EOL]     assertEquals(false, interval37.abuts(new Interval(9, 9))); [EOL] }
public void testAbuts_RInterval() { [EOL]     assertEquals(false, interval37.abuts(new Interval(1, 2))); [EOL]     assertEquals(false, interval37.abuts(new Interval(2, 2))); [EOL]     assertEquals(true, interval37.abuts(new Interval(2, 3))); [EOL]     assertEquals(true, interval37.abuts(new Interval(3, 3))); [EOL]     assertEquals(false, interval37.abuts(new Interval(2, 4))); [EOL]     assertEquals(false, interval37.abuts(new Interval(3, 4))); [EOL]     assertEquals(false, interval37.abuts(new Interval(4, 4))); [EOL]     assertEquals(false, interval37.abuts(new Interval(2, 6))); [EOL]     assertEquals(false, interval37.abuts(new Interval(3, 6))); [EOL]     assertEquals(false, interval37.abuts(new Interval(4, 6))); [EOL]     assertEquals(false, interval37.abuts(new Interval(5, 6))); [EOL]     assertEquals(false, interval37.abuts(new Interval(6, 6))); [EOL]     assertEquals(false, interval37.abuts(new Interval(2, 7))); [EOL]     assertEquals(false, interval37.abuts(new Interval(3, 7))); [EOL]     assertEquals(false, interval37.abuts(new Interval(4, 7))); [EOL]     assertEquals(false, interval37.abuts(new Interval(5, 7))); [EOL]     assertEquals(false, interval37.abuts(new Interval(6, 7))); [EOL]     assertEquals(true, interval37.abuts(new Interval(7, 7))); [EOL]     assertEquals(false, interval37.abuts(new Interval(2, 8))); [EOL]     assertEquals(false, interval37.abuts(new Interval(3, 8))); [EOL]     assertEquals(false, interval37.abuts(new Interval(4, 8))); [EOL]     assertEquals(false, interval37.abuts(new Interval(5, 8))); [EOL]     assertEquals(false, interval37.abuts(new Interval(6, 8))); [EOL]     assertEquals(true, interval37.abuts(new Interval(7, 8))); [EOL]     assertEquals(false, interval37.abuts(new Interval(8, 8))); [EOL]     assertEquals(false, interval37.abuts(new Interval(8, 9))); [EOL]     assertEquals(false, interval37.abuts(new Interval(9, 9))); [EOL] }
public void testAbuts_RInterval() { [EOL]     assertEquals(false, interval37.abuts(new Interval(1, 2))); [EOL]     assertEquals(false, interval37.abuts(new Interval(2, 2))); [EOL]     assertEquals(true, interval37.abuts(new Interval(2, 3))); [EOL]     assertEquals(true, interval37.abuts(new Interval(3, 3))); [EOL]     assertEquals(false, interval37.abuts(new Interval(2, 4))); [EOL]     assertEquals(false, interval37.abuts(new Interval(3, 4))); [EOL]     assertEquals(false, interval37.abuts(new Interval(4, 4))); [EOL]     assertEquals(false, interval37.abuts(new Interval(2, 6))); [EOL]     assertEquals(false, interval37.abuts(new Interval(3, 6))); [EOL]     assertEquals(false, interval37.abuts(new Interval(4, 6))); [EOL]     assertEquals(false, interval37.abuts(new Interval(5, 6))); [EOL]     assertEquals(false, interval37.abuts(new Interval(6, 6))); [EOL]     assertEquals(false, interval37.abuts(new Interval(2, 7))); [EOL]     assertEquals(false, interval37.abuts(new Interval(3, 7))); [EOL]     assertEquals(false, interval37.abuts(new Interval(4, 7))); [EOL]     assertEquals(false, interval37.abuts(new Interval(5, 7))); [EOL]     assertEquals(false, interval37.abuts(new Interval(6, 7))); [EOL]     assertEquals(true, interval37.abuts(new Interval(7, 7))); [EOL]     assertEquals(false, interval37.abuts(new Interval(2, 8))); [EOL]     assertEquals(false, interval37.abuts(new Interval(3, 8))); [EOL]     assertEquals(false, interval37.abuts(new Interval(4, 8))); [EOL]     assertEquals(false, interval37.abuts(new Interval(5, 8))); [EOL]     assertEquals(false, interval37.abuts(new Interval(6, 8))); [EOL]     assertEquals(true, interval37.abuts(new Interval(7, 8))); [EOL]     assertEquals(false, interval37.abuts(new Interval(8, 8))); [EOL]     assertEquals(false, interval37.abuts(new Interval(8, 9))); [EOL]     assertEquals(false, interval37.abuts(new Interval(9, 9))); [EOL] }
public void testWithDurationAfterStart2() throws Throwable { [EOL]     Interval base = new Interval(TEST_TIME_NOW, TEST_TIME2, COPTIC_PARIS); [EOL]     Interval test = base.withDurationAfterStart(null); [EOL]     assertEquals(new Interval(TEST_TIME_NOW, TEST_TIME_NOW, COPTIC_PARIS), test); [EOL] }
public void testWithDurationAfterStart2() throws Throwable { [EOL]     Interval base = new Interval(TEST_TIME_NOW, TEST_TIME2, COPTIC_PARIS); [EOL]     Interval test = base.withDurationAfterStart(null); [EOL]     assertEquals(new Interval(TEST_TIME_NOW, TEST_TIME_NOW, COPTIC_PARIS), test); [EOL] }
public void testWithDurationBeforeEnd1() throws Throwable { [EOL]     Duration dur = new Duration(TEST_TIME_NOW - TEST_TIME1); [EOL]     Interval base = new Interval(TEST_TIME_NOW, TEST_TIME_NOW, COPTIC_PARIS); [EOL]     Interval test = base.withDurationBeforeEnd(dur); [EOL]     assertEquals(new Interval(TEST_TIME1, TEST_TIME_NOW, COPTIC_PARIS), test); [EOL] }
public void testWithDurationBeforeEnd1() throws Throwable { [EOL]     Duration dur = new Duration(TEST_TIME_NOW - TEST_TIME1); [EOL]     Interval base = new Interval(TEST_TIME_NOW, TEST_TIME_NOW, COPTIC_PARIS); [EOL]     Interval test = base.withDurationBeforeEnd(dur); [EOL]     assertEquals(new Interval(TEST_TIME1, TEST_TIME_NOW, COPTIC_PARIS), test); [EOL] }
public void testWithDurationBeforeEnd1() throws Throwable { [EOL]     Duration dur = new Duration(TEST_TIME_NOW - TEST_TIME1); [EOL]     Interval base = new Interval(TEST_TIME_NOW, TEST_TIME_NOW, COPTIC_PARIS); [EOL]     Interval test = base.withDurationBeforeEnd(dur); [EOL]     assertEquals(new Interval(TEST_TIME1, TEST_TIME_NOW, COPTIC_PARIS), test); [EOL] }
public void testWithPeriodAfterStart2() throws Throwable { [EOL]     Interval base = new Interval(TEST_TIME_NOW, TEST_TIME2, COPTIC_PARIS); [EOL]     Interval test = base.withPeriodAfterStart(null); [EOL]     assertEquals(new Interval(TEST_TIME_NOW, TEST_TIME_NOW, COPTIC_PARIS), test); [EOL] }
public void testWithPeriodAfterStart2() throws Throwable { [EOL]     Interval base = new Interval(TEST_TIME_NOW, TEST_TIME2, COPTIC_PARIS); [EOL]     Interval test = base.withPeriodAfterStart(null); [EOL]     assertEquals(new Interval(TEST_TIME_NOW, TEST_TIME_NOW, COPTIC_PARIS), test); [EOL] }
public void testPropertyCompareToMonth() { [EOL]     YearMonth test1 = new YearMonth(TEST_TIME1); [EOL]     YearMonth test2 = new YearMonth(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonth() { [EOL]     YearMonth test1 = new YearMonth(TEST_TIME1); [EOL]     YearMonth test2 = new YearMonth(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonth() { [EOL]     YearMonth test1 = new YearMonth(TEST_TIME1); [EOL]     YearMonth test2 = new YearMonth(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonth() { [EOL]     YearMonth test1 = new YearMonth(TEST_TIME1); [EOL]     YearMonth test2 = new YearMonth(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonth() { [EOL]     YearMonth test1 = new YearMonth(TEST_TIME1); [EOL]     YearMonth test2 = new YearMonth(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonth() { [EOL]     YearMonth test1 = new YearMonth(TEST_TIME1); [EOL]     YearMonth test2 = new YearMonth(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonth() { [EOL]     YearMonth test1 = new YearMonth(TEST_TIME1); [EOL]     YearMonth test2 = new YearMonth(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonth() { [EOL]     YearMonth test1 = new YearMonth(TEST_TIME1); [EOL]     YearMonth test2 = new YearMonth(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonth() { [EOL]     YearMonth test1 = new YearMonth(TEST_TIME1); [EOL]     YearMonth test2 = new YearMonth(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonth() { [EOL]     YearMonth test1 = new YearMonth(TEST_TIME1); [EOL]     YearMonth test2 = new YearMonth(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonth() { [EOL]     YearMonth test1 = new YearMonth(TEST_TIME1); [EOL]     YearMonth test2 = new YearMonth(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonth() { [EOL]     YearMonth test1 = new YearMonth(TEST_TIME1); [EOL]     YearMonth test2 = new YearMonth(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonth() { [EOL]     YearMonth test1 = new YearMonth(TEST_TIME1); [EOL]     YearMonth test2 = new YearMonth(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonth() { [EOL]     YearMonth test1 = new YearMonth(TEST_TIME1); [EOL]     YearMonth test2 = new YearMonth(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonth() { [EOL]     YearMonth test1 = new YearMonth(TEST_TIME1); [EOL]     YearMonth test2 = new YearMonth(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonth() { [EOL]     YearMonth test1 = new YearMonth(TEST_TIME1); [EOL]     YearMonth test2 = new YearMonth(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testConstructor_Object() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     YearMonth test = new YearMonth(date); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL] }
public void testConstructor_Object() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     YearMonth test = new YearMonth(date); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL] }
public void testConstructor_Object() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     YearMonth test = new YearMonth(date); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL] }
public void testConstructor_Object() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     YearMonth test = new YearMonth(date); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL] }
public void testConstructor_Object() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     YearMonth test = new YearMonth(date); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL] }
public void testConstructor_Object() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     YearMonth test = new YearMonth(date); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL] }
public void testConstructor_Object() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     YearMonth test = new YearMonth(date); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL] }
public void testConstructor_Object() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     YearMonth test = new YearMonth(date); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL] }
public void testConstructor_Object() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     YearMonth test = new YearMonth(date); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGetFieldTypes() { [EOL]     YearMonth test = new YearMonth(COPTIC_PARIS); [EOL]     DateTimeFieldType[] fields = test.getFieldTypes(); [EOL]     assertEquals(2, fields.length); [EOL]     assertSame(DateTimeFieldType.year(), fields[0]); [EOL]     assertSame(DateTimeFieldType.monthOfYear(), fields[1]); [EOL]     assertNotSame(test.getFieldTypes(), test.getFieldTypes()); [EOL] }
public void testGetFieldTypes() { [EOL]     YearMonth test = new YearMonth(COPTIC_PARIS); [EOL]     DateTimeFieldType[] fields = test.getFieldTypes(); [EOL]     assertEquals(2, fields.length); [EOL]     assertSame(DateTimeFieldType.year(), fields[0]); [EOL]     assertSame(DateTimeFieldType.monthOfYear(), fields[1]); [EOL]     assertNotSame(test.getFieldTypes(), test.getFieldTypes()); [EOL] }
public void testGetFieldTypes() { [EOL]     YearMonth test = new YearMonth(COPTIC_PARIS); [EOL]     DateTimeFieldType[] fields = test.getFieldTypes(); [EOL]     assertEquals(2, fields.length); [EOL]     assertSame(DateTimeFieldType.year(), fields[0]); [EOL]     assertSame(DateTimeFieldType.monthOfYear(), fields[1]); [EOL]     assertNotSame(test.getFieldTypes(), test.getFieldTypes()); [EOL] }
public void testGetFieldTypes() { [EOL]     YearMonth test = new YearMonth(COPTIC_PARIS); [EOL]     DateTimeFieldType[] fields = test.getFieldTypes(); [EOL]     assertEquals(2, fields.length); [EOL]     assertSame(DateTimeFieldType.year(), fields[0]); [EOL]     assertSame(DateTimeFieldType.monthOfYear(), fields[1]); [EOL]     assertNotSame(test.getFieldTypes(), test.getFieldTypes()); [EOL] }
public void testGetFieldTypes() { [EOL]     YearMonth test = new YearMonth(COPTIC_PARIS); [EOL]     DateTimeFieldType[] fields = test.getFieldTypes(); [EOL]     assertEquals(2, fields.length); [EOL]     assertSame(DateTimeFieldType.year(), fields[0]); [EOL]     assertSame(DateTimeFieldType.monthOfYear(), fields[1]); [EOL]     assertNotSame(test.getFieldTypes(), test.getFieldTypes()); [EOL] }
public void testGetFieldTypes() { [EOL]     YearMonth test = new YearMonth(COPTIC_PARIS); [EOL]     DateTimeFieldType[] fields = test.getFieldTypes(); [EOL]     assertEquals(2, fields.length); [EOL]     assertSame(DateTimeFieldType.year(), fields[0]); [EOL]     assertSame(DateTimeFieldType.monthOfYear(), fields[1]); [EOL]     assertNotSame(test.getFieldTypes(), test.getFieldTypes()); [EOL] }
public void testGetFieldTypes() { [EOL]     YearMonth test = new YearMonth(COPTIC_PARIS); [EOL]     DateTimeFieldType[] fields = test.getFieldTypes(); [EOL]     assertEquals(2, fields.length); [EOL]     assertSame(DateTimeFieldType.year(), fields[0]); [EOL]     assertSame(DateTimeFieldType.monthOfYear(), fields[1]); [EOL]     assertNotSame(test.getFieldTypes(), test.getFieldTypes()); [EOL] }
public void testGetFieldTypes() { [EOL]     YearMonth test = new YearMonth(COPTIC_PARIS); [EOL]     DateTimeFieldType[] fields = test.getFieldTypes(); [EOL]     assertEquals(2, fields.length); [EOL]     assertSame(DateTimeFieldType.year(), fields[0]); [EOL]     assertSame(DateTimeFieldType.monthOfYear(), fields[1]); [EOL]     assertNotSame(test.getFieldTypes(), test.getFieldTypes()); [EOL] }
public void testGetFieldTypes() { [EOL]     YearMonth test = new YearMonth(COPTIC_PARIS); [EOL]     DateTimeFieldType[] fields = test.getFieldTypes(); [EOL]     assertEquals(2, fields.length); [EOL]     assertSame(DateTimeFieldType.year(), fields[0]); [EOL]     assertSame(DateTimeFieldType.monthOfYear(), fields[1]); [EOL]     assertNotSame(test.getFieldTypes(), test.getFieldTypes()); [EOL] }
public void testGetFieldTypes() { [EOL]     YearMonth test = new YearMonth(COPTIC_PARIS); [EOL]     DateTimeFieldType[] fields = test.getFieldTypes(); [EOL]     assertEquals(2, fields.length); [EOL]     assertSame(DateTimeFieldType.year(), fields[0]); [EOL]     assertSame(DateTimeFieldType.monthOfYear(), fields[1]); [EOL]     assertNotSame(test.getFieldTypes(), test.getFieldTypes()); [EOL] }
public void testGetFieldTypes() { [EOL]     YearMonth test = new YearMonth(COPTIC_PARIS); [EOL]     DateTimeFieldType[] fields = test.getFieldTypes(); [EOL]     assertEquals(2, fields.length); [EOL]     assertSame(DateTimeFieldType.year(), fields[0]); [EOL]     assertSame(DateTimeFieldType.monthOfYear(), fields[1]); [EOL]     assertNotSame(test.getFieldTypes(), test.getFieldTypes()); [EOL] }
public void testGetFieldTypes() { [EOL]     YearMonth test = new YearMonth(COPTIC_PARIS); [EOL]     DateTimeFieldType[] fields = test.getFieldTypes(); [EOL]     assertEquals(2, fields.length); [EOL]     assertSame(DateTimeFieldType.year(), fields[0]); [EOL]     assertSame(DateTimeFieldType.monthOfYear(), fields[1]); [EOL]     assertNotSame(test.getFieldTypes(), test.getFieldTypes()); [EOL] }
public void testGetFieldTypes() { [EOL]     YearMonth test = new YearMonth(COPTIC_PARIS); [EOL]     DateTimeFieldType[] fields = test.getFieldTypes(); [EOL]     assertEquals(2, fields.length); [EOL]     assertSame(DateTimeFieldType.year(), fields[0]); [EOL]     assertSame(DateTimeFieldType.monthOfYear(), fields[1]); [EOL]     assertNotSame(test.getFieldTypes(), test.getFieldTypes()); [EOL] }
public void testGetFieldTypes() { [EOL]     YearMonth test = new YearMonth(COPTIC_PARIS); [EOL]     DateTimeFieldType[] fields = test.getFieldTypes(); [EOL]     assertEquals(2, fields.length); [EOL]     assertSame(DateTimeFieldType.year(), fields[0]); [EOL]     assertSame(DateTimeFieldType.monthOfYear(), fields[1]); [EOL]     assertNotSame(test.getFieldTypes(), test.getFieldTypes()); [EOL] }
public void testGetFieldTypes() { [EOL]     YearMonth test = new YearMonth(COPTIC_PARIS); [EOL]     DateTimeFieldType[] fields = test.getFieldTypes(); [EOL]     assertEquals(2, fields.length); [EOL]     assertSame(DateTimeFieldType.year(), fields[0]); [EOL]     assertSame(DateTimeFieldType.monthOfYear(), fields[1]); [EOL]     assertNotSame(test.getFieldTypes(), test.getFieldTypes()); [EOL] }
public void testGetFieldTypes() { [EOL]     YearMonth test = new YearMonth(COPTIC_PARIS); [EOL]     DateTimeFieldType[] fields = test.getFieldTypes(); [EOL]     assertEquals(2, fields.length); [EOL]     assertSame(DateTimeFieldType.year(), fields[0]); [EOL]     assertSame(DateTimeFieldType.monthOfYear(), fields[1]); [EOL]     assertNotSame(test.getFieldTypes(), test.getFieldTypes()); [EOL] }
public void testGetFieldTypes() { [EOL]     YearMonth test = new YearMonth(COPTIC_PARIS); [EOL]     DateTimeFieldType[] fields = test.getFieldTypes(); [EOL]     assertEquals(2, fields.length); [EOL]     assertSame(DateTimeFieldType.year(), fields[0]); [EOL]     assertSame(DateTimeFieldType.monthOfYear(), fields[1]); [EOL]     assertNotSame(test.getFieldTypes(), test.getFieldTypes()); [EOL] }
public void testGetFieldTypes() { [EOL]     YearMonth test = new YearMonth(COPTIC_PARIS); [EOL]     DateTimeFieldType[] fields = test.getFieldTypes(); [EOL]     assertEquals(2, fields.length); [EOL]     assertSame(DateTimeFieldType.year(), fields[0]); [EOL]     assertSame(DateTimeFieldType.monthOfYear(), fields[1]); [EOL]     assertNotSame(test.getFieldTypes(), test.getFieldTypes()); [EOL] }
public void testGetFieldTypes() { [EOL]     YearMonth test = new YearMonth(COPTIC_PARIS); [EOL]     DateTimeFieldType[] fields = test.getFieldTypes(); [EOL]     assertEquals(2, fields.length); [EOL]     assertSame(DateTimeFieldType.year(), fields[0]); [EOL]     assertSame(DateTimeFieldType.monthOfYear(), fields[1]); [EOL]     assertNotSame(test.getFieldTypes(), test.getFieldTypes()); [EOL] }
public void testWithChronologyRetainFields_nullChrono() { [EOL]     YearMonth base = new YearMonth(2005, 6, COPTIC_PARIS); [EOL]     YearMonth test = base.withChronologyRetainFields(null); [EOL]     check(base, 2005, 6); [EOL]     assertEquals(COPTIC_UTC, base.getChronology()); [EOL]     check(test, 2005, 6); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL] }
public void testWithChronologyRetainFields_nullChrono() { [EOL]     YearMonth base = new YearMonth(2005, 6, COPTIC_PARIS); [EOL]     YearMonth test = base.withChronologyRetainFields(null); [EOL]     check(base, 2005, 6); [EOL]     assertEquals(COPTIC_UTC, base.getChronology()); [EOL]     check(test, 2005, 6); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL] }
public void testPlusYears_int() { [EOL]     YearMonth test = new YearMonth(2002, 5, BuddhistChronology.getInstance()); [EOL]     YearMonth result = test.plusYears(1); [EOL]     YearMonth expected = new YearMonth(2003, 5, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusYears(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusYears_int() { [EOL]     YearMonth test = new YearMonth(2002, 5, BuddhistChronology.getInstance()); [EOL]     YearMonth result = test.plusYears(1); [EOL]     YearMonth expected = new YearMonth(2003, 5, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusYears(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusYears_int() { [EOL]     YearMonth test = new YearMonth(2002, 5, BuddhistChronology.getInstance()); [EOL]     YearMonth result = test.plusYears(1); [EOL]     YearMonth expected = new YearMonth(2003, 5, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusYears(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinus_RP() { [EOL]     YearMonth test = new YearMonth(2002, 5, BuddhistChronology.getInstance()); [EOL]     YearMonth result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1)); [EOL]     YearMonth expected = new YearMonth(2001, 4, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.minus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testMinus_RP() { [EOL]     YearMonth test = new YearMonth(2002, 5, BuddhistChronology.getInstance()); [EOL]     YearMonth result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1)); [EOL]     YearMonth expected = new YearMonth(2001, 4, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.minus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testMinus_RP() { [EOL]     YearMonth test = new YearMonth(2002, 5, BuddhistChronology.getInstance()); [EOL]     YearMonth result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1)); [EOL]     YearMonth expected = new YearMonth(2001, 4, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.minus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testMinus_RP() { [EOL]     YearMonth test = new YearMonth(2002, 5, BuddhistChronology.getInstance()); [EOL]     YearMonth result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1)); [EOL]     YearMonth expected = new YearMonth(2001, 4, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.minus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testMinus_RP() { [EOL]     YearMonth test = new YearMonth(2002, 5, BuddhistChronology.getInstance()); [EOL]     YearMonth result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1)); [EOL]     YearMonth expected = new YearMonth(2001, 4, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.minus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlus_RP() { [EOL]     YearMonth test = new YearMonth(2002, 5, BuddhistChronology.getInstance()); [EOL]     YearMonth result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8)); [EOL]     YearMonth expected = new YearMonth(2003, 7, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlus_RP() { [EOL]     YearMonth test = new YearMonth(2002, 5, BuddhistChronology.getInstance()); [EOL]     YearMonth result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8)); [EOL]     YearMonth expected = new YearMonth(2003, 7, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlusYears_int() { [EOL]     YearMonth test = new YearMonth(2002, 5, BuddhistChronology.getInstance()); [EOL]     YearMonth result = test.plusYears(1); [EOL]     YearMonth expected = new YearMonth(2003, 5, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusYears(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusYears_int() { [EOL]     YearMonth test = new YearMonth(2002, 5, BuddhistChronology.getInstance()); [EOL]     YearMonth result = test.plusYears(1); [EOL]     YearMonth expected = new YearMonth(2003, 5, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusYears(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusYears_int() { [EOL]     YearMonth test = new YearMonth(2002, 5, BuddhistChronology.getInstance()); [EOL]     YearMonth result = test.plusYears(1); [EOL]     YearMonth expected = new YearMonth(2003, 5, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusYears(0); [EOL]     assertSame(test, result); [EOL] }
public void testToInterval() { [EOL]     YearMonth base = new YearMonth(2005, 6, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(); [EOL]     check(base, 2005, 6); [EOL]     DateTime start = new DateTime(2005, 6, 1, 0, 0, COPTIC_LONDON); [EOL]     DateTime end = new DateTime(2005, 7, 1, 0, 0, COPTIC_LONDON); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testMinus_RP() { [EOL]     YearMonth test = new YearMonth(2002, 5, BuddhistChronology.getInstance()); [EOL]     YearMonth result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1)); [EOL]     YearMonth expected = new YearMonth(2001, 4, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.minus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testMinus_RP() { [EOL]     YearMonth test = new YearMonth(2002, 5, BuddhistChronology.getInstance()); [EOL]     YearMonth result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1)); [EOL]     YearMonth expected = new YearMonth(2001, 4, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.minus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testToInterval() { [EOL]     YearMonth base = new YearMonth(2005, 6, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(); [EOL]     check(base, 2005, 6); [EOL]     DateTime start = new DateTime(2005, 6, 1, 0, 0, COPTIC_LONDON); [EOL]     DateTime end = new DateTime(2005, 7, 1, 0, 0, COPTIC_LONDON); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testToInterval() { [EOL]     YearMonth base = new YearMonth(2005, 6, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(); [EOL]     check(base, 2005, 6); [EOL]     DateTime start = new DateTime(2005, 6, 1, 0, 0, COPTIC_LONDON); [EOL]     DateTime end = new DateTime(2005, 7, 1, 0, 0, COPTIC_LONDON); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testToInterval() { [EOL]     YearMonth base = new YearMonth(2005, 6, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(); [EOL]     check(base, 2005, 6); [EOL]     DateTime start = new DateTime(2005, 6, 1, 0, 0, COPTIC_LONDON); [EOL]     DateTime end = new DateTime(2005, 7, 1, 0, 0, COPTIC_LONDON); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testToInterval() { [EOL]     YearMonth base = new YearMonth(2005, 6, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(); [EOL]     check(base, 2005, 6); [EOL]     DateTime start = new DateTime(2005, 6, 1, 0, 0, COPTIC_LONDON); [EOL]     DateTime end = new DateTime(2005, 7, 1, 0, 0, COPTIC_LONDON); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testToInterval() { [EOL]     YearMonth base = new YearMonth(2005, 6, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(); [EOL]     check(base, 2005, 6); [EOL]     DateTime start = new DateTime(2005, 6, 1, 0, 0, COPTIC_LONDON); [EOL]     DateTime end = new DateTime(2005, 7, 1, 0, 0, COPTIC_LONDON); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testToInterval() { [EOL]     YearMonth base = new YearMonth(2005, 6, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(); [EOL]     check(base, 2005, 6); [EOL]     DateTime start = new DateTime(2005, 6, 1, 0, 0, COPTIC_LONDON); [EOL]     DateTime end = new DateTime(2005, 7, 1, 0, 0, COPTIC_LONDON); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testToInterval() { [EOL]     YearMonth base = new YearMonth(2005, 6, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(); [EOL]     check(base, 2005, 6); [EOL]     DateTime start = new DateTime(2005, 6, 1, 0, 0, COPTIC_LONDON); [EOL]     DateTime end = new DateTime(2005, 7, 1, 0, 0, COPTIC_LONDON); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testToInterval() { [EOL]     YearMonth base = new YearMonth(2005, 6, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(); [EOL]     check(base, 2005, 6); [EOL]     DateTime start = new DateTime(2005, 6, 1, 0, 0, COPTIC_LONDON); [EOL]     DateTime end = new DateTime(2005, 7, 1, 0, 0, COPTIC_LONDON); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testToInterval() { [EOL]     YearMonth base = new YearMonth(2005, 6, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(); [EOL]     check(base, 2005, 6); [EOL]     DateTime start = new DateTime(2005, 6, 1, 0, 0, COPTIC_LONDON); [EOL]     DateTime end = new DateTime(2005, 7, 1, 0, 0, COPTIC_LONDON); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testToInterval() { [EOL]     YearMonth base = new YearMonth(2005, 6, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(); [EOL]     check(base, 2005, 6); [EOL]     DateTime start = new DateTime(2005, 6, 1, 0, 0, COPTIC_LONDON); [EOL]     DateTime end = new DateTime(2005, 7, 1, 0, 0, COPTIC_LONDON); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testToInterval() { [EOL]     YearMonth base = new YearMonth(2005, 6, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(); [EOL]     check(base, 2005, 6); [EOL]     DateTime start = new DateTime(2005, 6, 1, 0, 0, COPTIC_LONDON); [EOL]     DateTime end = new DateTime(2005, 7, 1, 0, 0, COPTIC_LONDON); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testToInterval() { [EOL]     YearMonth base = new YearMonth(2005, 6, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(); [EOL]     check(base, 2005, 6); [EOL]     DateTime start = new DateTime(2005, 6, 1, 0, 0, COPTIC_LONDON); [EOL]     DateTime end = new DateTime(2005, 7, 1, 0, 0, COPTIC_LONDON); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testToInterval() { [EOL]     YearMonth base = new YearMonth(2005, 6, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(); [EOL]     check(base, 2005, 6); [EOL]     DateTime start = new DateTime(2005, 6, 1, 0, 0, COPTIC_LONDON); [EOL]     DateTime end = new DateTime(2005, 7, 1, 0, 0, COPTIC_LONDON); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testToInterval() { [EOL]     YearMonth base = new YearMonth(2005, 6, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(); [EOL]     check(base, 2005, 6); [EOL]     DateTime start = new DateTime(2005, 6, 1, 0, 0, COPTIC_LONDON); [EOL]     DateTime end = new DateTime(2005, 7, 1, 0, 0, COPTIC_LONDON); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testToInterval() { [EOL]     YearMonth base = new YearMonth(2005, 6, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(); [EOL]     check(base, 2005, 6); [EOL]     DateTime start = new DateTime(2005, 6, 1, 0, 0, COPTIC_LONDON); [EOL]     DateTime end = new DateTime(2005, 7, 1, 0, 0, COPTIC_LONDON); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testToInterval() { [EOL]     YearMonth base = new YearMonth(2005, 6, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(); [EOL]     check(base, 2005, 6); [EOL]     DateTime start = new DateTime(2005, 6, 1, 0, 0, COPTIC_LONDON); [EOL]     DateTime end = new DateTime(2005, 7, 1, 0, 0, COPTIC_LONDON); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testToInterval() { [EOL]     YearMonth base = new YearMonth(2005, 6, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(); [EOL]     check(base, 2005, 6); [EOL]     DateTime start = new DateTime(2005, 6, 1, 0, 0, COPTIC_LONDON); [EOL]     DateTime end = new DateTime(2005, 7, 1, 0, 0, COPTIC_LONDON); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testToInterval() { [EOL]     YearMonth base = new YearMonth(2005, 6, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(); [EOL]     check(base, 2005, 6); [EOL]     DateTime start = new DateTime(2005, 6, 1, 0, 0, COPTIC_LONDON); [EOL]     DateTime end = new DateTime(2005, 7, 1, 0, 0, COPTIC_LONDON); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testToInterval() { [EOL]     YearMonth base = new YearMonth(2005, 6, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(); [EOL]     check(base, 2005, 6); [EOL]     DateTime start = new DateTime(2005, 6, 1, 0, 0, COPTIC_LONDON); [EOL]     DateTime end = new DateTime(2005, 7, 1, 0, 0, COPTIC_LONDON); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testToInterval() { [EOL]     YearMonth base = new YearMonth(2005, 6, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(); [EOL]     check(base, 2005, 6); [EOL]     DateTime start = new DateTime(2005, 6, 1, 0, 0, COPTIC_LONDON); [EOL]     DateTime end = new DateTime(2005, 7, 1, 0, 0, COPTIC_LONDON); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testToInterval() { [EOL]     YearMonth base = new YearMonth(2005, 6, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(); [EOL]     check(base, 2005, 6); [EOL]     DateTime start = new DateTime(2005, 6, 1, 0, 0, COPTIC_LONDON); [EOL]     DateTime end = new DateTime(2005, 7, 1, 0, 0, COPTIC_LONDON); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testToInterval() { [EOL]     YearMonth base = new YearMonth(2005, 6, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(); [EOL]     check(base, 2005, 6); [EOL]     DateTime start = new DateTime(2005, 6, 1, 0, 0, COPTIC_LONDON); [EOL]     DateTime end = new DateTime(2005, 7, 1, 0, 0, COPTIC_LONDON); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testToInterval() { [EOL]     YearMonth base = new YearMonth(2005, 6, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(); [EOL]     check(base, 2005, 6); [EOL]     DateTime start = new DateTime(2005, 6, 1, 0, 0, COPTIC_LONDON); [EOL]     DateTime end = new DateTime(2005, 7, 1, 0, 0, COPTIC_LONDON); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testToInterval() { [EOL]     YearMonth base = new YearMonth(2005, 6, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(); [EOL]     check(base, 2005, 6); [EOL]     DateTime start = new DateTime(2005, 6, 1, 0, 0, COPTIC_LONDON); [EOL]     DateTime end = new DateTime(2005, 7, 1, 0, 0, COPTIC_LONDON); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testToInterval() { [EOL]     YearMonth base = new YearMonth(2005, 6, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(); [EOL]     check(base, 2005, 6); [EOL]     DateTime start = new DateTime(2005, 6, 1, 0, 0, COPTIC_LONDON); [EOL]     DateTime end = new DateTime(2005, 7, 1, 0, 0, COPTIC_LONDON); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testToInterval() { [EOL]     YearMonth base = new YearMonth(2005, 6, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(); [EOL]     check(base, 2005, 6); [EOL]     DateTime start = new DateTime(2005, 6, 1, 0, 0, COPTIC_LONDON); [EOL]     DateTime end = new DateTime(2005, 7, 1, 0, 0, COPTIC_LONDON); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testToInterval() { [EOL]     YearMonth base = new YearMonth(2005, 6, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(); [EOL]     check(base, 2005, 6); [EOL]     DateTime start = new DateTime(2005, 6, 1, 0, 0, COPTIC_LONDON); [EOL]     DateTime end = new DateTime(2005, 7, 1, 0, 0, COPTIC_LONDON); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testToInterval() { [EOL]     YearMonth base = new YearMonth(2005, 6, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(); [EOL]     check(base, 2005, 6); [EOL]     DateTime start = new DateTime(2005, 6, 1, 0, 0, COPTIC_LONDON); [EOL]     DateTime end = new DateTime(2005, 7, 1, 0, 0, COPTIC_LONDON); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testToInterval() { [EOL]     YearMonth base = new YearMonth(2005, 6, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(); [EOL]     check(base, 2005, 6); [EOL]     DateTime start = new DateTime(2005, 6, 1, 0, 0, COPTIC_LONDON); [EOL]     DateTime end = new DateTime(2005, 7, 1, 0, 0, COPTIC_LONDON); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testToInterval() { [EOL]     YearMonth base = new YearMonth(2005, 6, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(); [EOL]     check(base, 2005, 6); [EOL]     DateTime start = new DateTime(2005, 6, 1, 0, 0, COPTIC_LONDON); [EOL]     DateTime end = new DateTime(2005, 7, 1, 0, 0, COPTIC_LONDON); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testToInterval() { [EOL]     YearMonth base = new YearMonth(2005, 6, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(); [EOL]     check(base, 2005, 6); [EOL]     DateTime start = new DateTime(2005, 6, 1, 0, 0, COPTIC_LONDON); [EOL]     DateTime end = new DateTime(2005, 7, 1, 0, 0, COPTIC_LONDON); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testToInterval() { [EOL]     YearMonth base = new YearMonth(2005, 6, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(); [EOL]     check(base, 2005, 6); [EOL]     DateTime start = new DateTime(2005, 6, 1, 0, 0, COPTIC_LONDON); [EOL]     DateTime end = new DateTime(2005, 7, 1, 0, 0, COPTIC_LONDON); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testToInterval() { [EOL]     YearMonth base = new YearMonth(2005, 6, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(); [EOL]     check(base, 2005, 6); [EOL]     DateTime start = new DateTime(2005, 6, 1, 0, 0, COPTIC_LONDON); [EOL]     DateTime end = new DateTime(2005, 7, 1, 0, 0, COPTIC_LONDON); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testToInterval() { [EOL]     YearMonth base = new YearMonth(2005, 6, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(); [EOL]     check(base, 2005, 6); [EOL]     DateTime start = new DateTime(2005, 6, 1, 0, 0, COPTIC_LONDON); [EOL]     DateTime end = new DateTime(2005, 7, 1, 0, 0, COPTIC_LONDON); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testToInterval() { [EOL]     YearMonth base = new YearMonth(2005, 6, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(); [EOL]     check(base, 2005, 6); [EOL]     DateTime start = new DateTime(2005, 6, 1, 0, 0, COPTIC_LONDON); [EOL]     DateTime end = new DateTime(2005, 7, 1, 0, 0, COPTIC_LONDON); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testToInterval() { [EOL]     YearMonth base = new YearMonth(2005, 6, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(); [EOL]     check(base, 2005, 6); [EOL]     DateTime start = new DateTime(2005, 6, 1, 0, 0, COPTIC_LONDON); [EOL]     DateTime end = new DateTime(2005, 7, 1, 0, 0, COPTIC_LONDON); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testToInterval() { [EOL]     YearMonth base = new YearMonth(2005, 6, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(); [EOL]     check(base, 2005, 6); [EOL]     DateTime start = new DateTime(2005, 6, 1, 0, 0, COPTIC_LONDON); [EOL]     DateTime end = new DateTime(2005, 7, 1, 0, 0, COPTIC_LONDON); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyGetYear() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     assertSame(test.getChronology().year(), test.year().getField()); [EOL]     assertEquals("year", test.year().getName()); [EOL]     assertEquals("Property[year]", test.year().toString()); [EOL]     assertSame(test, test.year().getReadablePartial()); [EOL]     assertSame(test, test.year().getYearMonth()); [EOL]     assertEquals(1972, test.year().get()); [EOL]     assertEquals("1972", test.year().getAsString()); [EOL]     assertEquals("1972", test.year().getAsText()); [EOL]     assertEquals("1972", test.year().getAsText(Locale.FRENCH)); [EOL]     assertEquals("1972", test.year().getAsShortText()); [EOL]     assertEquals("1972", test.year().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().years(), test.year().getDurationField()); [EOL]     assertEquals(null, test.year().getRangeDurationField()); [EOL]     assertEquals(9, test.year().getMaximumTextLength(null)); [EOL]     assertEquals(9, test.year().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyGetYear() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     assertSame(test.getChronology().year(), test.year().getField()); [EOL]     assertEquals("year", test.year().getName()); [EOL]     assertEquals("Property[year]", test.year().toString()); [EOL]     assertSame(test, test.year().getReadablePartial()); [EOL]     assertSame(test, test.year().getYearMonth()); [EOL]     assertEquals(1972, test.year().get()); [EOL]     assertEquals("1972", test.year().getAsString()); [EOL]     assertEquals("1972", test.year().getAsText()); [EOL]     assertEquals("1972", test.year().getAsText(Locale.FRENCH)); [EOL]     assertEquals("1972", test.year().getAsShortText()); [EOL]     assertEquals("1972", test.year().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().years(), test.year().getDurationField()); [EOL]     assertEquals(null, test.year().getRangeDurationField()); [EOL]     assertEquals(9, test.year().getMaximumTextLength(null)); [EOL]     assertEquals(9, test.year().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyGetYear() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     assertSame(test.getChronology().year(), test.year().getField()); [EOL]     assertEquals("year", test.year().getName()); [EOL]     assertEquals("Property[year]", test.year().toString()); [EOL]     assertSame(test, test.year().getReadablePartial()); [EOL]     assertSame(test, test.year().getYearMonth()); [EOL]     assertEquals(1972, test.year().get()); [EOL]     assertEquals("1972", test.year().getAsString()); [EOL]     assertEquals("1972", test.year().getAsText()); [EOL]     assertEquals("1972", test.year().getAsText(Locale.FRENCH)); [EOL]     assertEquals("1972", test.year().getAsShortText()); [EOL]     assertEquals("1972", test.year().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().years(), test.year().getDurationField()); [EOL]     assertEquals(null, test.year().getRangeDurationField()); [EOL]     assertEquals(9, test.year().getMaximumTextLength(null)); [EOL]     assertEquals(9, test.year().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyGetYear() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     assertSame(test.getChronology().year(), test.year().getField()); [EOL]     assertEquals("year", test.year().getName()); [EOL]     assertEquals("Property[year]", test.year().toString()); [EOL]     assertSame(test, test.year().getReadablePartial()); [EOL]     assertSame(test, test.year().getYearMonth()); [EOL]     assertEquals(1972, test.year().get()); [EOL]     assertEquals("1972", test.year().getAsString()); [EOL]     assertEquals("1972", test.year().getAsText()); [EOL]     assertEquals("1972", test.year().getAsText(Locale.FRENCH)); [EOL]     assertEquals("1972", test.year().getAsShortText()); [EOL]     assertEquals("1972", test.year().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().years(), test.year().getDurationField()); [EOL]     assertEquals(null, test.year().getRangeDurationField()); [EOL]     assertEquals(9, test.year().getMaximumTextLength(null)); [EOL]     assertEquals(9, test.year().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyGetYear() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     assertSame(test.getChronology().year(), test.year().getField()); [EOL]     assertEquals("year", test.year().getName()); [EOL]     assertEquals("Property[year]", test.year().toString()); [EOL]     assertSame(test, test.year().getReadablePartial()); [EOL]     assertSame(test, test.year().getYearMonth()); [EOL]     assertEquals(1972, test.year().get()); [EOL]     assertEquals("1972", test.year().getAsString()); [EOL]     assertEquals("1972", test.year().getAsText()); [EOL]     assertEquals("1972", test.year().getAsText(Locale.FRENCH)); [EOL]     assertEquals("1972", test.year().getAsShortText()); [EOL]     assertEquals("1972", test.year().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().years(), test.year().getDurationField()); [EOL]     assertEquals(null, test.year().getRangeDurationField()); [EOL]     assertEquals(9, test.year().getMaximumTextLength(null)); [EOL]     assertEquals(9, test.year().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyGetYear() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     assertSame(test.getChronology().year(), test.year().getField()); [EOL]     assertEquals("year", test.year().getName()); [EOL]     assertEquals("Property[year]", test.year().toString()); [EOL]     assertSame(test, test.year().getReadablePartial()); [EOL]     assertSame(test, test.year().getYearMonth()); [EOL]     assertEquals(1972, test.year().get()); [EOL]     assertEquals("1972", test.year().getAsString()); [EOL]     assertEquals("1972", test.year().getAsText()); [EOL]     assertEquals("1972", test.year().getAsText(Locale.FRENCH)); [EOL]     assertEquals("1972", test.year().getAsShortText()); [EOL]     assertEquals("1972", test.year().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().years(), test.year().getDurationField()); [EOL]     assertEquals(null, test.year().getRangeDurationField()); [EOL]     assertEquals(9, test.year().getMaximumTextLength(null)); [EOL]     assertEquals(9, test.year().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyGetYear() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     assertSame(test.getChronology().year(), test.year().getField()); [EOL]     assertEquals("year", test.year().getName()); [EOL]     assertEquals("Property[year]", test.year().toString()); [EOL]     assertSame(test, test.year().getReadablePartial()); [EOL]     assertSame(test, test.year().getYearMonth()); [EOL]     assertEquals(1972, test.year().get()); [EOL]     assertEquals("1972", test.year().getAsString()); [EOL]     assertEquals("1972", test.year().getAsText()); [EOL]     assertEquals("1972", test.year().getAsText(Locale.FRENCH)); [EOL]     assertEquals("1972", test.year().getAsShortText()); [EOL]     assertEquals("1972", test.year().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().years(), test.year().getDurationField()); [EOL]     assertEquals(null, test.year().getRangeDurationField()); [EOL]     assertEquals(9, test.year().getMaximumTextLength(null)); [EOL]     assertEquals(9, test.year().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyGetYear() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     assertSame(test.getChronology().year(), test.year().getField()); [EOL]     assertEquals("year", test.year().getName()); [EOL]     assertEquals("Property[year]", test.year().toString()); [EOL]     assertSame(test, test.year().getReadablePartial()); [EOL]     assertSame(test, test.year().getYearMonth()); [EOL]     assertEquals(1972, test.year().get()); [EOL]     assertEquals("1972", test.year().getAsString()); [EOL]     assertEquals("1972", test.year().getAsText()); [EOL]     assertEquals("1972", test.year().getAsText(Locale.FRENCH)); [EOL]     assertEquals("1972", test.year().getAsShortText()); [EOL]     assertEquals("1972", test.year().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().years(), test.year().getDurationField()); [EOL]     assertEquals(null, test.year().getRangeDurationField()); [EOL]     assertEquals(9, test.year().getMaximumTextLength(null)); [EOL]     assertEquals(9, test.year().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyGetYear() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     assertSame(test.getChronology().year(), test.year().getField()); [EOL]     assertEquals("year", test.year().getName()); [EOL]     assertEquals("Property[year]", test.year().toString()); [EOL]     assertSame(test, test.year().getReadablePartial()); [EOL]     assertSame(test, test.year().getYearMonth()); [EOL]     assertEquals(1972, test.year().get()); [EOL]     assertEquals("1972", test.year().getAsString()); [EOL]     assertEquals("1972", test.year().getAsText()); [EOL]     assertEquals("1972", test.year().getAsText(Locale.FRENCH)); [EOL]     assertEquals("1972", test.year().getAsShortText()); [EOL]     assertEquals("1972", test.year().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().years(), test.year().getDurationField()); [EOL]     assertEquals(null, test.year().getRangeDurationField()); [EOL]     assertEquals(9, test.year().getMaximumTextLength(null)); [EOL]     assertEquals(9, test.year().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyGetYear() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     assertSame(test.getChronology().year(), test.year().getField()); [EOL]     assertEquals("year", test.year().getName()); [EOL]     assertEquals("Property[year]", test.year().toString()); [EOL]     assertSame(test, test.year().getReadablePartial()); [EOL]     assertSame(test, test.year().getYearMonth()); [EOL]     assertEquals(1972, test.year().get()); [EOL]     assertEquals("1972", test.year().getAsString()); [EOL]     assertEquals("1972", test.year().getAsText()); [EOL]     assertEquals("1972", test.year().getAsText(Locale.FRENCH)); [EOL]     assertEquals("1972", test.year().getAsShortText()); [EOL]     assertEquals("1972", test.year().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().years(), test.year().getDurationField()); [EOL]     assertEquals(null, test.year().getRangeDurationField()); [EOL]     assertEquals(9, test.year().getMaximumTextLength(null)); [EOL]     assertEquals(9, test.year().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyGetYear() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     assertSame(test.getChronology().year(), test.year().getField()); [EOL]     assertEquals("year", test.year().getName()); [EOL]     assertEquals("Property[year]", test.year().toString()); [EOL]     assertSame(test, test.year().getReadablePartial()); [EOL]     assertSame(test, test.year().getYearMonth()); [EOL]     assertEquals(1972, test.year().get()); [EOL]     assertEquals("1972", test.year().getAsString()); [EOL]     assertEquals("1972", test.year().getAsText()); [EOL]     assertEquals("1972", test.year().getAsText(Locale.FRENCH)); [EOL]     assertEquals("1972", test.year().getAsShortText()); [EOL]     assertEquals("1972", test.year().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().years(), test.year().getDurationField()); [EOL]     assertEquals(null, test.year().getRangeDurationField()); [EOL]     assertEquals(9, test.year().getMaximumTextLength(null)); [EOL]     assertEquals(9, test.year().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyCompareToMonth() { [EOL]     YearMonth test1 = new YearMonth(TEST_TIME1); [EOL]     YearMonth test2 = new YearMonth(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonth() { [EOL]     YearMonth test1 = new YearMonth(TEST_TIME1); [EOL]     YearMonth test2 = new YearMonth(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonth() { [EOL]     YearMonth test1 = new YearMonth(TEST_TIME1); [EOL]     YearMonth test2 = new YearMonth(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonth() { [EOL]     YearMonth test1 = new YearMonth(TEST_TIME1); [EOL]     YearMonth test2 = new YearMonth(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonth() { [EOL]     YearMonth test1 = new YearMonth(TEST_TIME1); [EOL]     YearMonth test2 = new YearMonth(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonth() { [EOL]     YearMonth test1 = new YearMonth(TEST_TIME1); [EOL]     YearMonth test2 = new YearMonth(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonth() { [EOL]     YearMonth test1 = new YearMonth(TEST_TIME1); [EOL]     YearMonth test2 = new YearMonth(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonth() { [EOL]     YearMonth test1 = new YearMonth(TEST_TIME1); [EOL]     YearMonth test2 = new YearMonth(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonth() { [EOL]     YearMonth test1 = new YearMonth(TEST_TIME1); [EOL]     YearMonth test2 = new YearMonth(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonth() { [EOL]     YearMonth test1 = new YearMonth(TEST_TIME1); [EOL]     YearMonth test2 = new YearMonth(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonth() { [EOL]     YearMonth test1 = new YearMonth(TEST_TIME1); [EOL]     YearMonth test2 = new YearMonth(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonth() { [EOL]     YearMonth test1 = new YearMonth(TEST_TIME1); [EOL]     YearMonth test2 = new YearMonth(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonth() { [EOL]     YearMonth test1 = new YearMonth(TEST_TIME1); [EOL]     YearMonth test2 = new YearMonth(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonth() { [EOL]     YearMonth test1 = new YearMonth(TEST_TIME1); [EOL]     YearMonth test2 = new YearMonth(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonth() { [EOL]     YearMonth test1 = new YearMonth(TEST_TIME1); [EOL]     YearMonth test2 = new YearMonth(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonth() { [EOL]     YearMonth test1 = new YearMonth(TEST_TIME1); [EOL]     YearMonth test2 = new YearMonth(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonth() { [EOL]     YearMonth test1 = new YearMonth(TEST_TIME1); [EOL]     YearMonth test2 = new YearMonth(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonth() { [EOL]     YearMonth test1 = new YearMonth(TEST_TIME1); [EOL]     YearMonth test2 = new YearMonth(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonth() { [EOL]     YearMonth test1 = new YearMonth(TEST_TIME1); [EOL]     YearMonth test2 = new YearMonth(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void test_getAsText_RP_int_Locale() { [EOL]     BaseDateTimeField field = new MockBaseDateTimeField(); [EOL]     assertEquals("20", field.getAsText(new TimeOfDay(12, 30, 40, 50), 20, Locale.ENGLISH)); [EOL]     assertEquals("20", field.getAsText(new TimeOfDay(12, 30, 40, 50), 20, null)); [EOL] }
public void testPropertyAddHour() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.hourOfDay().addToCopy(9); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 19, 20, 30, 40); [EOL]     copy = test.hourOfDay().addToCopy(0); [EOL]     check(copy, 10, 20, 30, 40); [EOL]     copy = test.hourOfDay().addToCopy(13); [EOL]     check(copy, 23, 20, 30, 40); [EOL]     copy = test.hourOfDay().addToCopy(14); [EOL]     check(copy, 0, 20, 30, 40); [EOL]     copy = test.hourOfDay().addToCopy(-10); [EOL]     check(copy, 0, 20, 30, 40); [EOL]     copy = test.hourOfDay().addToCopy(-11); [EOL]     check(copy, 23, 20, 30, 40); [EOL] }
public void testPropertyAddHour() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.hourOfDay().addToCopy(9); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 19, 20, 30, 40); [EOL]     copy = test.hourOfDay().addToCopy(0); [EOL]     check(copy, 10, 20, 30, 40); [EOL]     copy = test.hourOfDay().addToCopy(13); [EOL]     check(copy, 23, 20, 30, 40); [EOL]     copy = test.hourOfDay().addToCopy(14); [EOL]     check(copy, 0, 20, 30, 40); [EOL]     copy = test.hourOfDay().addToCopy(-10); [EOL]     check(copy, 0, 20, 30, 40); [EOL]     copy = test.hourOfDay().addToCopy(-11); [EOL]     check(copy, 23, 20, 30, 40); [EOL] }
public void testPropertyAddHour() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.hourOfDay().addToCopy(9); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 19, 20, 30, 40); [EOL]     copy = test.hourOfDay().addToCopy(0); [EOL]     check(copy, 10, 20, 30, 40); [EOL]     copy = test.hourOfDay().addToCopy(13); [EOL]     check(copy, 23, 20, 30, 40); [EOL]     copy = test.hourOfDay().addToCopy(14); [EOL]     check(copy, 0, 20, 30, 40); [EOL]     copy = test.hourOfDay().addToCopy(-10); [EOL]     check(copy, 0, 20, 30, 40); [EOL]     copy = test.hourOfDay().addToCopy(-11); [EOL]     check(copy, 23, 20, 30, 40); [EOL] }
public void testPropertyAddHour() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.hourOfDay().addToCopy(9); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 19, 20, 30, 40); [EOL]     copy = test.hourOfDay().addToCopy(0); [EOL]     check(copy, 10, 20, 30, 40); [EOL]     copy = test.hourOfDay().addToCopy(13); [EOL]     check(copy, 23, 20, 30, 40); [EOL]     copy = test.hourOfDay().addToCopy(14); [EOL]     check(copy, 0, 20, 30, 40); [EOL]     copy = test.hourOfDay().addToCopy(-10); [EOL]     check(copy, 0, 20, 30, 40); [EOL]     copy = test.hourOfDay().addToCopy(-11); [EOL]     check(copy, 23, 20, 30, 40); [EOL] }
public void testPropertyAddHour() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.hourOfDay().addToCopy(9); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 19, 20, 30, 40); [EOL]     copy = test.hourOfDay().addToCopy(0); [EOL]     check(copy, 10, 20, 30, 40); [EOL]     copy = test.hourOfDay().addToCopy(13); [EOL]     check(copy, 23, 20, 30, 40); [EOL]     copy = test.hourOfDay().addToCopy(14); [EOL]     check(copy, 0, 20, 30, 40); [EOL]     copy = test.hourOfDay().addToCopy(-10); [EOL]     check(copy, 0, 20, 30, 40); [EOL]     copy = test.hourOfDay().addToCopy(-11); [EOL]     check(copy, 23, 20, 30, 40); [EOL] }
public void testPropertyAddHour() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.hourOfDay().addToCopy(9); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 19, 20, 30, 40); [EOL]     copy = test.hourOfDay().addToCopy(0); [EOL]     check(copy, 10, 20, 30, 40); [EOL]     copy = test.hourOfDay().addToCopy(13); [EOL]     check(copy, 23, 20, 30, 40); [EOL]     copy = test.hourOfDay().addToCopy(14); [EOL]     check(copy, 0, 20, 30, 40); [EOL]     copy = test.hourOfDay().addToCopy(-10); [EOL]     check(copy, 0, 20, 30, 40); [EOL]     copy = test.hourOfDay().addToCopy(-11); [EOL]     check(copy, 23, 20, 30, 40); [EOL] }
public void testPropertyAddHour() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.hourOfDay().addToCopy(9); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 19, 20, 30, 40); [EOL]     copy = test.hourOfDay().addToCopy(0); [EOL]     check(copy, 10, 20, 30, 40); [EOL]     copy = test.hourOfDay().addToCopy(13); [EOL]     check(copy, 23, 20, 30, 40); [EOL]     copy = test.hourOfDay().addToCopy(14); [EOL]     check(copy, 0, 20, 30, 40); [EOL]     copy = test.hourOfDay().addToCopy(-10); [EOL]     check(copy, 0, 20, 30, 40); [EOL]     copy = test.hourOfDay().addToCopy(-11); [EOL]     check(copy, 23, 20, 30, 40); [EOL] }
public void testSerializedGJChronologyChangedInternals() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(PARIS, 123L, 2); [EOL]     loadAndCompare(test, "GJChronologyChangedInternals", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronologyChangedInternals() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(PARIS, 123L, 2); [EOL]     loadAndCompare(test, "GJChronologyChangedInternals", true); [EOL]     inlineCompare(test, true); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testIsContiguous_RP() { [EOL]     YearMonthDay ymd = new YearMonthDay(2005, 6, 9); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(ymd)); [EOL]     TimeOfDay tod = new TimeOfDay(12, 20, 30, 0); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(tod)); [EOL]     Partial year = new Partial(DateTimeFieldType.year(), 2005); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(year)); [EOL]     Partial hourOfDay = new Partial(DateTimeFieldType.hourOfDay(), 12); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(hourOfDay)); [EOL]     Partial yearHour = year.with(DateTimeFieldType.hourOfDay(), 12); [EOL]     assertEquals(false, DateTimeUtils.isContiguous(yearHour)); [EOL]     Partial ymdd = new Partial(ymd).with(DateTimeFieldType.dayOfWeek(), 2); [EOL]     assertEquals(false, DateTimeUtils.isContiguous(ymdd)); [EOL]     Partial dd = new Partial(DateTimeFieldType.dayOfMonth(), 13).with(DateTimeFieldType.dayOfWeek(), 5); [EOL]     assertEquals(false, DateTimeUtils.isContiguous(dd)); [EOL]     try { [EOL]         DateTimeUtils.isContiguous((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testIsContiguous_RP() { [EOL]     YearMonthDay ymd = new YearMonthDay(2005, 6, 9); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(ymd)); [EOL]     TimeOfDay tod = new TimeOfDay(12, 20, 30, 0); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(tod)); [EOL]     Partial year = new Partial(DateTimeFieldType.year(), 2005); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(year)); [EOL]     Partial hourOfDay = new Partial(DateTimeFieldType.hourOfDay(), 12); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(hourOfDay)); [EOL]     Partial yearHour = year.with(DateTimeFieldType.hourOfDay(), 12); [EOL]     assertEquals(false, DateTimeUtils.isContiguous(yearHour)); [EOL]     Partial ymdd = new Partial(ymd).with(DateTimeFieldType.dayOfWeek(), 2); [EOL]     assertEquals(false, DateTimeUtils.isContiguous(ymdd)); [EOL]     Partial dd = new Partial(DateTimeFieldType.dayOfMonth(), 13).with(DateTimeFieldType.dayOfWeek(), 5); [EOL]     assertEquals(false, DateTimeUtils.isContiguous(dd)); [EOL]     try { [EOL]         DateTimeUtils.isContiguous((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testIsContiguous_RP() { [EOL]     YearMonthDay ymd = new YearMonthDay(2005, 6, 9); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(ymd)); [EOL]     TimeOfDay tod = new TimeOfDay(12, 20, 30, 0); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(tod)); [EOL]     Partial year = new Partial(DateTimeFieldType.year(), 2005); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(year)); [EOL]     Partial hourOfDay = new Partial(DateTimeFieldType.hourOfDay(), 12); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(hourOfDay)); [EOL]     Partial yearHour = year.with(DateTimeFieldType.hourOfDay(), 12); [EOL]     assertEquals(false, DateTimeUtils.isContiguous(yearHour)); [EOL]     Partial ymdd = new Partial(ymd).with(DateTimeFieldType.dayOfWeek(), 2); [EOL]     assertEquals(false, DateTimeUtils.isContiguous(ymdd)); [EOL]     Partial dd = new Partial(DateTimeFieldType.dayOfMonth(), 13).with(DateTimeFieldType.dayOfWeek(), 5); [EOL]     assertEquals(false, DateTimeUtils.isContiguous(dd)); [EOL]     try { [EOL]         DateTimeUtils.isContiguous((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testIsContiguous_RP() { [EOL]     YearMonthDay ymd = new YearMonthDay(2005, 6, 9); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(ymd)); [EOL]     TimeOfDay tod = new TimeOfDay(12, 20, 30, 0); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(tod)); [EOL]     Partial year = new Partial(DateTimeFieldType.year(), 2005); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(year)); [EOL]     Partial hourOfDay = new Partial(DateTimeFieldType.hourOfDay(), 12); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(hourOfDay)); [EOL]     Partial yearHour = year.with(DateTimeFieldType.hourOfDay(), 12); [EOL]     assertEquals(false, DateTimeUtils.isContiguous(yearHour)); [EOL]     Partial ymdd = new Partial(ymd).with(DateTimeFieldType.dayOfWeek(), 2); [EOL]     assertEquals(false, DateTimeUtils.isContiguous(ymdd)); [EOL]     Partial dd = new Partial(DateTimeFieldType.dayOfMonth(), 13).with(DateTimeFieldType.dayOfWeek(), 5); [EOL]     assertEquals(false, DateTimeUtils.isContiguous(dd)); [EOL]     try { [EOL]         DateTimeUtils.isContiguous((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWith1() { [EOL]     Partial test = createHourMinPartial(); [EOL]     Partial result = test.with(DateTimeFieldType.hourOfDay(), 15); [EOL]     check(test, 10, 20); [EOL]     check(result, 15, 20); [EOL] }
public void testToString() { [EOL]     long length = (365L + 2L * 30L + 3L * 7L + 4L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 845L; [EOL]     Duration test = new Duration(length); [EOL]     assertEquals("PT" + (length / 1000) + "." + (length % 1000) + "S", test.toString()); [EOL]     assertEquals("PT0S", new Duration(0L).toString()); [EOL]     assertEquals("PT10S", new Duration(10000L).toString()); [EOL]     assertEquals("PT1S", new Duration(1000L).toString()); [EOL]     assertEquals("PT12.345S", new Duration(12345L).toString()); [EOL]     assertEquals("PT-12.345S", new Duration(-12345L).toString()); [EOL]     assertEquals("PT-1.123S", new Duration(-1123L).toString()); [EOL]     assertEquals("PT-0.123S", new Duration(-123L).toString()); [EOL]     assertEquals("PT-0.012S", new Duration(-12L).toString()); [EOL]     assertEquals("PT-0.001S", new Duration(-1L).toString()); [EOL] }
public void testToString() { [EOL]     long length = (365L + 2L * 30L + 3L * 7L + 4L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 845L; [EOL]     Duration test = new Duration(length); [EOL]     assertEquals("PT" + (length / 1000) + "." + (length % 1000) + "S", test.toString()); [EOL]     assertEquals("PT0S", new Duration(0L).toString()); [EOL]     assertEquals("PT10S", new Duration(10000L).toString()); [EOL]     assertEquals("PT1S", new Duration(1000L).toString()); [EOL]     assertEquals("PT12.345S", new Duration(12345L).toString()); [EOL]     assertEquals("PT-12.345S", new Duration(-12345L).toString()); [EOL]     assertEquals("PT-1.123S", new Duration(-1123L).toString()); [EOL]     assertEquals("PT-0.123S", new Duration(-123L).toString()); [EOL]     assertEquals("PT-0.012S", new Duration(-12L).toString()); [EOL]     assertEquals("PT-0.001S", new Duration(-1L).toString()); [EOL] }
public void testToString() { [EOL]     long length = (365L + 2L * 30L + 3L * 7L + 4L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 845L; [EOL]     Duration test = new Duration(length); [EOL]     assertEquals("PT" + (length / 1000) + "." + (length % 1000) + "S", test.toString()); [EOL]     assertEquals("PT0S", new Duration(0L).toString()); [EOL]     assertEquals("PT10S", new Duration(10000L).toString()); [EOL]     assertEquals("PT1S", new Duration(1000L).toString()); [EOL]     assertEquals("PT12.345S", new Duration(12345L).toString()); [EOL]     assertEquals("PT-12.345S", new Duration(-12345L).toString()); [EOL]     assertEquals("PT-1.123S", new Duration(-1123L).toString()); [EOL]     assertEquals("PT-0.123S", new Duration(-123L).toString()); [EOL]     assertEquals("PT-0.012S", new Duration(-12L).toString()); [EOL]     assertEquals("PT-0.001S", new Duration(-1L).toString()); [EOL] }
public void testToString() { [EOL]     long length = (365L + 2L * 30L + 3L * 7L + 4L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 845L; [EOL]     Duration test = new Duration(length); [EOL]     assertEquals("PT" + (length / 1000) + "." + (length % 1000) + "S", test.toString()); [EOL]     assertEquals("PT0S", new Duration(0L).toString()); [EOL]     assertEquals("PT10S", new Duration(10000L).toString()); [EOL]     assertEquals("PT1S", new Duration(1000L).toString()); [EOL]     assertEquals("PT12.345S", new Duration(12345L).toString()); [EOL]     assertEquals("PT-12.345S", new Duration(-12345L).toString()); [EOL]     assertEquals("PT-1.123S", new Duration(-1123L).toString()); [EOL]     assertEquals("PT-0.123S", new Duration(-123L).toString()); [EOL]     assertEquals("PT-0.012S", new Duration(-12L).toString()); [EOL]     assertEquals("PT-0.001S", new Duration(-1L).toString()); [EOL] }
public void testFormatParse_textYear_UK() { [EOL]     DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder().appendLiteral('$').appendText(DateTimeFieldType.year()).toFormatter().withLocale(Locale.UK).withZoneUTC(); [EOL]     String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("$2007", str); [EOL]     try { [EOL]         dateFormatter.parseDateTime(str); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFormatParse_textYear_UK() { [EOL]     DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder().appendLiteral('$').appendText(DateTimeFieldType.year()).toFormatter().withLocale(Locale.UK).withZoneUTC(); [EOL]     String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("$2007", str); [EOL]     try { [EOL]         dateFormatter.parseDateTime(str); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFormatParse_textYear_UK() { [EOL]     DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder().appendLiteral('$').appendText(DateTimeFieldType.year()).toFormatter().withLocale(Locale.UK).withZoneUTC(); [EOL]     String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("$2007", str); [EOL]     try { [EOL]         dateFormatter.parseDateTime(str); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFormatParse_textYear_UK() { [EOL]     DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder().appendLiteral('$').appendText(DateTimeFieldType.year()).toFormatter().withLocale(Locale.UK).withZoneUTC(); [EOL]     String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("$2007", str); [EOL]     try { [EOL]         dateFormatter.parseDateTime(str); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFormatParse_textYear_UK() { [EOL]     DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder().appendLiteral('$').appendText(DateTimeFieldType.year()).toFormatter().withLocale(Locale.UK).withZoneUTC(); [EOL]     String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("$2007", str); [EOL]     try { [EOL]         dateFormatter.parseDateTime(str); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testToString() { [EOL]     assertEquals("JulianChronology[Europe/London]", JulianChronology.getInstance(LONDON).toString()); [EOL]     assertEquals("JulianChronology[Asia/Tokyo]", JulianChronology.getInstance(TOKYO).toString()); [EOL]     assertEquals("JulianChronology[Europe/London]", JulianChronology.getInstance().toString()); [EOL]     assertEquals("JulianChronology[UTC]", JulianChronology.getInstanceUTC().toString()); [EOL]     assertEquals("JulianChronology[UTC,mdfw=2]", JulianChronology.getInstance(DateTimeZone.UTC, 2).toString()); [EOL] }
public void testToString() { [EOL]     assertEquals("JulianChronology[Europe/London]", JulianChronology.getInstance(LONDON).toString()); [EOL]     assertEquals("JulianChronology[Asia/Tokyo]", JulianChronology.getInstance(TOKYO).toString()); [EOL]     assertEquals("JulianChronology[Europe/London]", JulianChronology.getInstance().toString()); [EOL]     assertEquals("JulianChronology[UTC]", JulianChronology.getInstanceUTC().toString()); [EOL]     assertEquals("JulianChronology[UTC,mdfw=2]", JulianChronology.getInstance(DateTimeZone.UTC, 2).toString()); [EOL] }
public void testToString() { [EOL]     assertEquals("JulianChronology[Europe/London]", JulianChronology.getInstance(LONDON).toString()); [EOL]     assertEquals("JulianChronology[Asia/Tokyo]", JulianChronology.getInstance(TOKYO).toString()); [EOL]     assertEquals("JulianChronology[Europe/London]", JulianChronology.getInstance().toString()); [EOL]     assertEquals("JulianChronology[UTC]", JulianChronology.getInstanceUTC().toString()); [EOL]     assertEquals("JulianChronology[UTC,mdfw=2]", JulianChronology.getInstance(DateTimeZone.UTC, 2).toString()); [EOL] }
public void testToString() { [EOL]     assertEquals("JulianChronology[Europe/London]", JulianChronology.getInstance(LONDON).toString()); [EOL]     assertEquals("JulianChronology[Asia/Tokyo]", JulianChronology.getInstance(TOKYO).toString()); [EOL]     assertEquals("JulianChronology[Europe/London]", JulianChronology.getInstance().toString()); [EOL]     assertEquals("JulianChronology[UTC]", JulianChronology.getInstanceUTC().toString()); [EOL]     assertEquals("JulianChronology[UTC,mdfw=2]", JulianChronology.getInstance(DateTimeZone.UTC, 2).toString()); [EOL] }
public void testToString() { [EOL]     assertEquals("JulianChronology[Europe/London]", JulianChronology.getInstance(LONDON).toString()); [EOL]     assertEquals("JulianChronology[Asia/Tokyo]", JulianChronology.getInstance(TOKYO).toString()); [EOL]     assertEquals("JulianChronology[Europe/London]", JulianChronology.getInstance().toString()); [EOL]     assertEquals("JulianChronology[UTC]", JulianChronology.getInstanceUTC().toString()); [EOL]     assertEquals("JulianChronology[UTC,mdfw=2]", JulianChronology.getInstance(DateTimeZone.UTC, 2).toString()); [EOL] }
public void testToString() { [EOL]     assertEquals("JulianChronology[Europe/London]", JulianChronology.getInstance(LONDON).toString()); [EOL]     assertEquals("JulianChronology[Asia/Tokyo]", JulianChronology.getInstance(TOKYO).toString()); [EOL]     assertEquals("JulianChronology[Europe/London]", JulianChronology.getInstance().toString()); [EOL]     assertEquals("JulianChronology[UTC]", JulianChronology.getInstanceUTC().toString()); [EOL]     assertEquals("JulianChronology[UTC,mdfw=2]", JulianChronology.getInstance(DateTimeZone.UTC, 2).toString()); [EOL] }
public void testToString() { [EOL]     assertEquals("JulianChronology[Europe/London]", JulianChronology.getInstance(LONDON).toString()); [EOL]     assertEquals("JulianChronology[Asia/Tokyo]", JulianChronology.getInstance(TOKYO).toString()); [EOL]     assertEquals("JulianChronology[Europe/London]", JulianChronology.getInstance().toString()); [EOL]     assertEquals("JulianChronology[UTC]", JulianChronology.getInstanceUTC().toString()); [EOL]     assertEquals("JulianChronology[UTC,mdfw=2]", JulianChronology.getInstance(DateTimeZone.UTC, 2).toString()); [EOL] }
public void testToString() { [EOL]     assertEquals("Converter[org.joda.time.ReadableInstant]", ReadableInstantConverter.INSTANCE.toString()); [EOL] }
public void testPlusMinutes_int() { [EOL]     LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON); [EOL]     LocalTime result = test.plusMinutes(1); [EOL]     LocalTime expected = new LocalTime(1, 3, 3, 4, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusMinutes(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusMinutes_int() { [EOL]     LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON); [EOL]     LocalTime result = test.plusMinutes(1); [EOL]     LocalTime expected = new LocalTime(1, 3, 3, 4, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusMinutes(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusMinutes_int() { [EOL]     LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON); [EOL]     LocalTime result = test.plusMinutes(1); [EOL]     LocalTime expected = new LocalTime(1, 3, 3, 4, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusMinutes(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusMinutes_int() { [EOL]     LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON); [EOL]     LocalTime result = test.plusMinutes(1); [EOL]     LocalTime expected = new LocalTime(1, 3, 3, 4, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusMinutes(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusMinutes_int() { [EOL]     LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON); [EOL]     LocalTime result = test.plusMinutes(1); [EOL]     LocalTime expected = new LocalTime(1, 3, 3, 4, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusMinutes(0); [EOL]     assertSame(test, result); [EOL] }
public void testPropertyCompareToYear() { [EOL]     YearMonthDay test1 = new YearMonthDay(TEST_TIME1); [EOL]     YearMonthDay test2 = new YearMonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToYear() { [EOL]     YearMonthDay test1 = new YearMonthDay(TEST_TIME1); [EOL]     YearMonthDay test2 = new YearMonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyGetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     assertSame(test.getChronology().minuteOfHour(), test.minuteOfHour().getField()); [EOL]     assertEquals("minuteOfHour", test.minuteOfHour().getName()); [EOL]     assertEquals("Property[minuteOfHour]", test.minuteOfHour().toString()); [EOL]     assertSame(test, test.minuteOfHour().getReadablePartial()); [EOL]     assertSame(test, test.minuteOfHour().getTimeOfDay()); [EOL]     assertEquals(20, test.minuteOfHour().get()); [EOL]     assertEquals("20", test.minuteOfHour().getAsString()); [EOL]     assertEquals("20", test.minuteOfHour().getAsText()); [EOL]     assertEquals("20", test.minuteOfHour().getAsText(Locale.FRENCH)); [EOL]     assertEquals("20", test.minuteOfHour().getAsShortText()); [EOL]     assertEquals("20", test.minuteOfHour().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().minutes(), test.minuteOfHour().getDurationField()); [EOL]     assertEquals(test.getChronology().hours(), test.minuteOfHour().getRangeDurationField()); [EOL]     assertEquals(2, test.minuteOfHour().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.minuteOfHour().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyGetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     assertSame(test.getChronology().minuteOfHour(), test.minuteOfHour().getField()); [EOL]     assertEquals("minuteOfHour", test.minuteOfHour().getName()); [EOL]     assertEquals("Property[minuteOfHour]", test.minuteOfHour().toString()); [EOL]     assertSame(test, test.minuteOfHour().getReadablePartial()); [EOL]     assertSame(test, test.minuteOfHour().getTimeOfDay()); [EOL]     assertEquals(20, test.minuteOfHour().get()); [EOL]     assertEquals("20", test.minuteOfHour().getAsString()); [EOL]     assertEquals("20", test.minuteOfHour().getAsText()); [EOL]     assertEquals("20", test.minuteOfHour().getAsText(Locale.FRENCH)); [EOL]     assertEquals("20", test.minuteOfHour().getAsShortText()); [EOL]     assertEquals("20", test.minuteOfHour().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().minutes(), test.minuteOfHour().getDurationField()); [EOL]     assertEquals(test.getChronology().hours(), test.minuteOfHour().getRangeDurationField()); [EOL]     assertEquals(2, test.minuteOfHour().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.minuteOfHour().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyGetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     assertSame(test.getChronology().minuteOfHour(), test.minuteOfHour().getField()); [EOL]     assertEquals("minuteOfHour", test.minuteOfHour().getName()); [EOL]     assertEquals("Property[minuteOfHour]", test.minuteOfHour().toString()); [EOL]     assertSame(test, test.minuteOfHour().getReadablePartial()); [EOL]     assertSame(test, test.minuteOfHour().getTimeOfDay()); [EOL]     assertEquals(20, test.minuteOfHour().get()); [EOL]     assertEquals("20", test.minuteOfHour().getAsString()); [EOL]     assertEquals("20", test.minuteOfHour().getAsText()); [EOL]     assertEquals("20", test.minuteOfHour().getAsText(Locale.FRENCH)); [EOL]     assertEquals("20", test.minuteOfHour().getAsShortText()); [EOL]     assertEquals("20", test.minuteOfHour().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().minutes(), test.minuteOfHour().getDurationField()); [EOL]     assertEquals(test.getChronology().hours(), test.minuteOfHour().getRangeDurationField()); [EOL]     assertEquals(2, test.minuteOfHour().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.minuteOfHour().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyGetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     assertSame(test.getChronology().minuteOfHour(), test.minuteOfHour().getField()); [EOL]     assertEquals("minuteOfHour", test.minuteOfHour().getName()); [EOL]     assertEquals("Property[minuteOfHour]", test.minuteOfHour().toString()); [EOL]     assertSame(test, test.minuteOfHour().getReadablePartial()); [EOL]     assertSame(test, test.minuteOfHour().getTimeOfDay()); [EOL]     assertEquals(20, test.minuteOfHour().get()); [EOL]     assertEquals("20", test.minuteOfHour().getAsString()); [EOL]     assertEquals("20", test.minuteOfHour().getAsText()); [EOL]     assertEquals("20", test.minuteOfHour().getAsText(Locale.FRENCH)); [EOL]     assertEquals("20", test.minuteOfHour().getAsShortText()); [EOL]     assertEquals("20", test.minuteOfHour().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().minutes(), test.minuteOfHour().getDurationField()); [EOL]     assertEquals(test.getChronology().hours(), test.minuteOfHour().getRangeDurationField()); [EOL]     assertEquals(2, test.minuteOfHour().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.minuteOfHour().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyGetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     assertSame(test.getChronology().minuteOfHour(), test.minuteOfHour().getField()); [EOL]     assertEquals("minuteOfHour", test.minuteOfHour().getName()); [EOL]     assertEquals("Property[minuteOfHour]", test.minuteOfHour().toString()); [EOL]     assertSame(test, test.minuteOfHour().getReadablePartial()); [EOL]     assertSame(test, test.minuteOfHour().getTimeOfDay()); [EOL]     assertEquals(20, test.minuteOfHour().get()); [EOL]     assertEquals("20", test.minuteOfHour().getAsString()); [EOL]     assertEquals("20", test.minuteOfHour().getAsText()); [EOL]     assertEquals("20", test.minuteOfHour().getAsText(Locale.FRENCH)); [EOL]     assertEquals("20", test.minuteOfHour().getAsShortText()); [EOL]     assertEquals("20", test.minuteOfHour().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().minutes(), test.minuteOfHour().getDurationField()); [EOL]     assertEquals(test.getChronology().hours(), test.minuteOfHour().getRangeDurationField()); [EOL]     assertEquals(2, test.minuteOfHour().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.minuteOfHour().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyGetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     assertSame(test.getChronology().minuteOfHour(), test.minuteOfHour().getField()); [EOL]     assertEquals("minuteOfHour", test.minuteOfHour().getName()); [EOL]     assertEquals("Property[minuteOfHour]", test.minuteOfHour().toString()); [EOL]     assertSame(test, test.minuteOfHour().getReadablePartial()); [EOL]     assertSame(test, test.minuteOfHour().getTimeOfDay()); [EOL]     assertEquals(20, test.minuteOfHour().get()); [EOL]     assertEquals("20", test.minuteOfHour().getAsString()); [EOL]     assertEquals("20", test.minuteOfHour().getAsText()); [EOL]     assertEquals("20", test.minuteOfHour().getAsText(Locale.FRENCH)); [EOL]     assertEquals("20", test.minuteOfHour().getAsShortText()); [EOL]     assertEquals("20", test.minuteOfHour().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().minutes(), test.minuteOfHour().getDurationField()); [EOL]     assertEquals(test.getChronology().hours(), test.minuteOfHour().getRangeDurationField()); [EOL]     assertEquals(2, test.minuteOfHour().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.minuteOfHour().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyGetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     assertSame(test.getChronology().minuteOfHour(), test.minuteOfHour().getField()); [EOL]     assertEquals("minuteOfHour", test.minuteOfHour().getName()); [EOL]     assertEquals("Property[minuteOfHour]", test.minuteOfHour().toString()); [EOL]     assertSame(test, test.minuteOfHour().getReadablePartial()); [EOL]     assertSame(test, test.minuteOfHour().getTimeOfDay()); [EOL]     assertEquals(20, test.minuteOfHour().get()); [EOL]     assertEquals("20", test.minuteOfHour().getAsString()); [EOL]     assertEquals("20", test.minuteOfHour().getAsText()); [EOL]     assertEquals("20", test.minuteOfHour().getAsText(Locale.FRENCH)); [EOL]     assertEquals("20", test.minuteOfHour().getAsShortText()); [EOL]     assertEquals("20", test.minuteOfHour().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().minutes(), test.minuteOfHour().getDurationField()); [EOL]     assertEquals(test.getChronology().hours(), test.minuteOfHour().getRangeDurationField()); [EOL]     assertEquals(2, test.minuteOfHour().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.minuteOfHour().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyGetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     assertSame(test.getChronology().minuteOfHour(), test.minuteOfHour().getField()); [EOL]     assertEquals("minuteOfHour", test.minuteOfHour().getName()); [EOL]     assertEquals("Property[minuteOfHour]", test.minuteOfHour().toString()); [EOL]     assertSame(test, test.minuteOfHour().getReadablePartial()); [EOL]     assertSame(test, test.minuteOfHour().getTimeOfDay()); [EOL]     assertEquals(20, test.minuteOfHour().get()); [EOL]     assertEquals("20", test.minuteOfHour().getAsString()); [EOL]     assertEquals("20", test.minuteOfHour().getAsText()); [EOL]     assertEquals("20", test.minuteOfHour().getAsText(Locale.FRENCH)); [EOL]     assertEquals("20", test.minuteOfHour().getAsShortText()); [EOL]     assertEquals("20", test.minuteOfHour().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().minutes(), test.minuteOfHour().getDurationField()); [EOL]     assertEquals(test.getChronology().hours(), test.minuteOfHour().getRangeDurationField()); [EOL]     assertEquals(2, test.minuteOfHour().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.minuteOfHour().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyGetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     assertSame(test.getChronology().minuteOfHour(), test.minuteOfHour().getField()); [EOL]     assertEquals("minuteOfHour", test.minuteOfHour().getName()); [EOL]     assertEquals("Property[minuteOfHour]", test.minuteOfHour().toString()); [EOL]     assertSame(test, test.minuteOfHour().getReadablePartial()); [EOL]     assertSame(test, test.minuteOfHour().getTimeOfDay()); [EOL]     assertEquals(20, test.minuteOfHour().get()); [EOL]     assertEquals("20", test.minuteOfHour().getAsString()); [EOL]     assertEquals("20", test.minuteOfHour().getAsText()); [EOL]     assertEquals("20", test.minuteOfHour().getAsText(Locale.FRENCH)); [EOL]     assertEquals("20", test.minuteOfHour().getAsShortText()); [EOL]     assertEquals("20", test.minuteOfHour().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().minutes(), test.minuteOfHour().getDurationField()); [EOL]     assertEquals(test.getChronology().hours(), test.minuteOfHour().getRangeDurationField()); [EOL]     assertEquals(2, test.minuteOfHour().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.minuteOfHour().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyGetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     assertSame(test.getChronology().minuteOfHour(), test.minuteOfHour().getField()); [EOL]     assertEquals("minuteOfHour", test.minuteOfHour().getName()); [EOL]     assertEquals("Property[minuteOfHour]", test.minuteOfHour().toString()); [EOL]     assertSame(test, test.minuteOfHour().getReadablePartial()); [EOL]     assertSame(test, test.minuteOfHour().getTimeOfDay()); [EOL]     assertEquals(20, test.minuteOfHour().get()); [EOL]     assertEquals("20", test.minuteOfHour().getAsString()); [EOL]     assertEquals("20", test.minuteOfHour().getAsText()); [EOL]     assertEquals("20", test.minuteOfHour().getAsText(Locale.FRENCH)); [EOL]     assertEquals("20", test.minuteOfHour().getAsShortText()); [EOL]     assertEquals("20", test.minuteOfHour().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().minutes(), test.minuteOfHour().getDurationField()); [EOL]     assertEquals(test.getChronology().hours(), test.minuteOfHour().getRangeDurationField()); [EOL]     assertEquals(2, test.minuteOfHour().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.minuteOfHour().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyGetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     assertSame(test.getChronology().minuteOfHour(), test.minuteOfHour().getField()); [EOL]     assertEquals("minuteOfHour", test.minuteOfHour().getName()); [EOL]     assertEquals("Property[minuteOfHour]", test.minuteOfHour().toString()); [EOL]     assertSame(test, test.minuteOfHour().getReadablePartial()); [EOL]     assertSame(test, test.minuteOfHour().getTimeOfDay()); [EOL]     assertEquals(20, test.minuteOfHour().get()); [EOL]     assertEquals("20", test.minuteOfHour().getAsString()); [EOL]     assertEquals("20", test.minuteOfHour().getAsText()); [EOL]     assertEquals("20", test.minuteOfHour().getAsText(Locale.FRENCH)); [EOL]     assertEquals("20", test.minuteOfHour().getAsShortText()); [EOL]     assertEquals("20", test.minuteOfHour().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().minutes(), test.minuteOfHour().getDurationField()); [EOL]     assertEquals(test.getChronology().hours(), test.minuteOfHour().getRangeDurationField()); [EOL]     assertEquals(2, test.minuteOfHour().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.minuteOfHour().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyGetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     assertSame(test.getChronology().minuteOfHour(), test.minuteOfHour().getField()); [EOL]     assertEquals("minuteOfHour", test.minuteOfHour().getName()); [EOL]     assertEquals("Property[minuteOfHour]", test.minuteOfHour().toString()); [EOL]     assertSame(test, test.minuteOfHour().getReadablePartial()); [EOL]     assertSame(test, test.minuteOfHour().getTimeOfDay()); [EOL]     assertEquals(20, test.minuteOfHour().get()); [EOL]     assertEquals("20", test.minuteOfHour().getAsString()); [EOL]     assertEquals("20", test.minuteOfHour().getAsText()); [EOL]     assertEquals("20", test.minuteOfHour().getAsText(Locale.FRENCH)); [EOL]     assertEquals("20", test.minuteOfHour().getAsShortText()); [EOL]     assertEquals("20", test.minuteOfHour().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().minutes(), test.minuteOfHour().getDurationField()); [EOL]     assertEquals(test.getChronology().hours(), test.minuteOfHour().getRangeDurationField()); [EOL]     assertEquals(2, test.minuteOfHour().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.minuteOfHour().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyGetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     assertSame(test.getChronology().minuteOfHour(), test.minuteOfHour().getField()); [EOL]     assertEquals("minuteOfHour", test.minuteOfHour().getName()); [EOL]     assertEquals("Property[minuteOfHour]", test.minuteOfHour().toString()); [EOL]     assertSame(test, test.minuteOfHour().getReadablePartial()); [EOL]     assertSame(test, test.minuteOfHour().getTimeOfDay()); [EOL]     assertEquals(20, test.minuteOfHour().get()); [EOL]     assertEquals("20", test.minuteOfHour().getAsString()); [EOL]     assertEquals("20", test.minuteOfHour().getAsText()); [EOL]     assertEquals("20", test.minuteOfHour().getAsText(Locale.FRENCH)); [EOL]     assertEquals("20", test.minuteOfHour().getAsShortText()); [EOL]     assertEquals("20", test.minuteOfHour().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().minutes(), test.minuteOfHour().getDurationField()); [EOL]     assertEquals(test.getChronology().hours(), test.minuteOfHour().getRangeDurationField()); [EOL]     assertEquals(2, test.minuteOfHour().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.minuteOfHour().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyCompareToYear() { [EOL]     YearMonthDay test1 = new YearMonthDay(TEST_TIME1); [EOL]     YearMonthDay test2 = new YearMonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToYear() { [EOL]     YearMonthDay test1 = new YearMonthDay(TEST_TIME1); [EOL]     YearMonthDay test2 = new YearMonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToYear() { [EOL]     YearMonthDay test1 = new YearMonthDay(TEST_TIME1); [EOL]     YearMonthDay test2 = new YearMonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToYear() { [EOL]     YearMonthDay test1 = new YearMonthDay(TEST_TIME1); [EOL]     YearMonthDay test2 = new YearMonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToYear() { [EOL]     YearMonthDay test1 = new YearMonthDay(TEST_TIME1); [EOL]     YearMonthDay test2 = new YearMonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToYear() { [EOL]     YearMonthDay test1 = new YearMonthDay(TEST_TIME1); [EOL]     YearMonthDay test2 = new YearMonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToYear() { [EOL]     YearMonthDay test1 = new YearMonthDay(TEST_TIME1); [EOL]     YearMonthDay test2 = new YearMonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToYear() { [EOL]     YearMonthDay test1 = new YearMonthDay(TEST_TIME1); [EOL]     YearMonthDay test2 = new YearMonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGetPropertyEquals() throws Throwable { [EOL]     MockProperty0 prop0 = new MockProperty0(); [EOL]     assertEquals(true, prop0.equals(prop0)); [EOL]     assertEquals(true, prop0.equals(new MockProperty0())); [EOL]     assertEquals(false, prop0.equals(new MockProperty1())); [EOL]     assertEquals(false, prop0.equals(new MockProperty0Val())); [EOL]     assertEquals(false, prop0.equals(new MockProperty0Field())); [EOL]     assertEquals(false, prop0.equals(new MockProperty0Chrono())); [EOL]     assertEquals(false, prop0.equals("")); [EOL]     assertEquals(false, prop0.equals(null)); [EOL] }
public void testGetPropertyEquals() throws Throwable { [EOL]     MockProperty0 prop0 = new MockProperty0(); [EOL]     assertEquals(true, prop0.equals(prop0)); [EOL]     assertEquals(true, prop0.equals(new MockProperty0())); [EOL]     assertEquals(false, prop0.equals(new MockProperty1())); [EOL]     assertEquals(false, prop0.equals(new MockProperty0Val())); [EOL]     assertEquals(false, prop0.equals(new MockProperty0Field())); [EOL]     assertEquals(false, prop0.equals(new MockProperty0Chrono())); [EOL]     assertEquals(false, prop0.equals("")); [EOL]     assertEquals(false, prop0.equals(null)); [EOL] }
public void testGetPropertyEquals() throws Throwable { [EOL]     MockProperty0 prop0 = new MockProperty0(); [EOL]     assertEquals(true, prop0.equals(prop0)); [EOL]     assertEquals(true, prop0.equals(new MockProperty0())); [EOL]     assertEquals(false, prop0.equals(new MockProperty1())); [EOL]     assertEquals(false, prop0.equals(new MockProperty0Val())); [EOL]     assertEquals(false, prop0.equals(new MockProperty0Field())); [EOL]     assertEquals(false, prop0.equals(new MockProperty0Chrono())); [EOL]     assertEquals(false, prop0.equals("")); [EOL]     assertEquals(false, prop0.equals(null)); [EOL] }
public void testGetPropertyEquals() throws Throwable { [EOL]     MockProperty0 prop0 = new MockProperty0(); [EOL]     assertEquals(true, prop0.equals(prop0)); [EOL]     assertEquals(true, prop0.equals(new MockProperty0())); [EOL]     assertEquals(false, prop0.equals(new MockProperty1())); [EOL]     assertEquals(false, prop0.equals(new MockProperty0Val())); [EOL]     assertEquals(false, prop0.equals(new MockProperty0Field())); [EOL]     assertEquals(false, prop0.equals(new MockProperty0Chrono())); [EOL]     assertEquals(false, prop0.equals("")); [EOL]     assertEquals(false, prop0.equals(null)); [EOL] }
public void testGetPropertyEquals() throws Throwable { [EOL]     MockProperty0 prop0 = new MockProperty0(); [EOL]     assertEquals(true, prop0.equals(prop0)); [EOL]     assertEquals(true, prop0.equals(new MockProperty0())); [EOL]     assertEquals(false, prop0.equals(new MockProperty1())); [EOL]     assertEquals(false, prop0.equals(new MockProperty0Val())); [EOL]     assertEquals(false, prop0.equals(new MockProperty0Field())); [EOL]     assertEquals(false, prop0.equals(new MockProperty0Chrono())); [EOL]     assertEquals(false, prop0.equals("")); [EOL]     assertEquals(false, prop0.equals(null)); [EOL] }
public void testGetPropertyEquals() throws Throwable { [EOL]     MockProperty0 prop0 = new MockProperty0(); [EOL]     assertEquals(true, prop0.equals(prop0)); [EOL]     assertEquals(true, prop0.equals(new MockProperty0())); [EOL]     assertEquals(false, prop0.equals(new MockProperty1())); [EOL]     assertEquals(false, prop0.equals(new MockProperty0Val())); [EOL]     assertEquals(false, prop0.equals(new MockProperty0Field())); [EOL]     assertEquals(false, prop0.equals(new MockProperty0Chrono())); [EOL]     assertEquals(false, prop0.equals("")); [EOL]     assertEquals(false, prop0.equals(null)); [EOL] }
public void testGetPropertyEquals() throws Throwable { [EOL]     MockProperty0 prop0 = new MockProperty0(); [EOL]     assertEquals(true, prop0.equals(prop0)); [EOL]     assertEquals(true, prop0.equals(new MockProperty0())); [EOL]     assertEquals(false, prop0.equals(new MockProperty1())); [EOL]     assertEquals(false, prop0.equals(new MockProperty0Val())); [EOL]     assertEquals(false, prop0.equals(new MockProperty0Field())); [EOL]     assertEquals(false, prop0.equals(new MockProperty0Chrono())); [EOL]     assertEquals(false, prop0.equals("")); [EOL]     assertEquals(false, prop0.equals(null)); [EOL] }
public void testPropertyGetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     assertSame(test.getChronology().minuteOfHour(), test.minuteOfHour().getField()); [EOL]     assertEquals("minuteOfHour", test.minuteOfHour().getName()); [EOL]     assertEquals("Property[minuteOfHour]", test.minuteOfHour().toString()); [EOL]     assertSame(test, test.minuteOfHour().getReadablePartial()); [EOL]     assertSame(test, test.minuteOfHour().getTimeOfDay()); [EOL]     assertEquals(20, test.minuteOfHour().get()); [EOL]     assertEquals("20", test.minuteOfHour().getAsString()); [EOL]     assertEquals("20", test.minuteOfHour().getAsText()); [EOL]     assertEquals("20", test.minuteOfHour().getAsText(Locale.FRENCH)); [EOL]     assertEquals("20", test.minuteOfHour().getAsShortText()); [EOL]     assertEquals("20", test.minuteOfHour().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().minutes(), test.minuteOfHour().getDurationField()); [EOL]     assertEquals(test.getChronology().hours(), test.minuteOfHour().getRangeDurationField()); [EOL]     assertEquals(2, test.minuteOfHour().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.minuteOfHour().getMaximumShortTextLength(null)); [EOL] }
public void test_getMillis_int_long() { [EOL]     assertEquals(0L, iField.getMillis(0, 567L)); [EOL]     assertEquals(1234000L, iField.getMillis(1234, 567L)); [EOL]     assertEquals(-1234000L, iField.getMillis(-1234, 567L)); [EOL]     assertEquals(LONG_INTEGER_MAX * 1000L, iField.getMillis(INTEGER_MAX, 567L)); [EOL] }
public void test_getMillis_int_long() { [EOL]     assertEquals(0L, iField.getMillis(0, 567L)); [EOL]     assertEquals(1234000L, iField.getMillis(1234, 567L)); [EOL]     assertEquals(-1234000L, iField.getMillis(-1234, 567L)); [EOL]     assertEquals(LONG_INTEGER_MAX * 1000L, iField.getMillis(INTEGER_MAX, 567L)); [EOL] }
public void test_getMillis_int_long() { [EOL]     assertEquals(0L, iField.getMillis(0, 567L)); [EOL]     assertEquals(1234000L, iField.getMillis(1234, 567L)); [EOL]     assertEquals(-1234000L, iField.getMillis(-1234, 567L)); [EOL]     assertEquals(LONG_INTEGER_MAX * 1000L, iField.getMillis(INTEGER_MAX, 567L)); [EOL] }
public void test_add_long_int() { [EOL]     assertEquals(567L, iField.add(567L, 0)); [EOL]     assertEquals(567L + 1234000L, iField.add(567L, 1234)); [EOL]     assertEquals(567L - 1234000L, iField.add(567L, -1234)); [EOL]     try { [EOL]         iField.add(LONG_MAX, 1); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void test_equals() { [EOL]     assertEquals(true, iField.equals(iField)); [EOL]     assertEquals(false, iField.equals(ISOChronology.getInstance().minutes())); [EOL]     DurationField dummy = new PreciseDurationField(DurationFieldType.seconds(), 0); [EOL]     assertEquals(false, iField.equals(dummy)); [EOL]     dummy = new PreciseDurationField(DurationFieldType.seconds(), 1000); [EOL]     assertEquals(true, iField.equals(dummy)); [EOL]     dummy = new PreciseDurationField(DurationFieldType.millis(), 1000); [EOL]     assertEquals(false, iField.equals(dummy)); [EOL]     assertEquals(false, iField.equals("")); [EOL]     assertEquals(false, iField.equals(null)); [EOL] }
public void test_equals() { [EOL]     assertEquals(true, iField.equals(iField)); [EOL]     assertEquals(false, iField.equals(ISOChronology.getInstance().minutes())); [EOL]     DurationField dummy = new PreciseDurationField(DurationFieldType.seconds(), 0); [EOL]     assertEquals(false, iField.equals(dummy)); [EOL]     dummy = new PreciseDurationField(DurationFieldType.seconds(), 1000); [EOL]     assertEquals(true, iField.equals(dummy)); [EOL]     dummy = new PreciseDurationField(DurationFieldType.millis(), 1000); [EOL]     assertEquals(false, iField.equals(dummy)); [EOL]     assertEquals(false, iField.equals("")); [EOL]     assertEquals(false, iField.equals(null)); [EOL] }
public void test_equals() { [EOL]     assertEquals(true, iField.equals(iField)); [EOL]     assertEquals(false, iField.equals(ISOChronology.getInstance().minutes())); [EOL]     DurationField dummy = new PreciseDurationField(DurationFieldType.seconds(), 0); [EOL]     assertEquals(false, iField.equals(dummy)); [EOL]     dummy = new PreciseDurationField(DurationFieldType.seconds(), 1000); [EOL]     assertEquals(true, iField.equals(dummy)); [EOL]     dummy = new PreciseDurationField(DurationFieldType.millis(), 1000); [EOL]     assertEquals(false, iField.equals(dummy)); [EOL]     assertEquals(false, iField.equals("")); [EOL]     assertEquals(false, iField.equals(null)); [EOL] }
public void test_equals() { [EOL]     assertEquals(true, iField.equals(iField)); [EOL]     assertEquals(false, iField.equals(ISOChronology.getInstance().minutes())); [EOL]     DurationField dummy = new PreciseDurationField(DurationFieldType.seconds(), 0); [EOL]     assertEquals(false, iField.equals(dummy)); [EOL]     dummy = new PreciseDurationField(DurationFieldType.seconds(), 1000); [EOL]     assertEquals(true, iField.equals(dummy)); [EOL]     dummy = new PreciseDurationField(DurationFieldType.millis(), 1000); [EOL]     assertEquals(false, iField.equals(dummy)); [EOL]     assertEquals(false, iField.equals("")); [EOL]     assertEquals(false, iField.equals(null)); [EOL] }
public void test_equals() { [EOL]     assertEquals(true, iField.equals(iField)); [EOL]     assertEquals(false, iField.equals(ISOChronology.getInstance().minutes())); [EOL]     DurationField dummy = new PreciseDurationField(DurationFieldType.seconds(), 0); [EOL]     assertEquals(false, iField.equals(dummy)); [EOL]     dummy = new PreciseDurationField(DurationFieldType.seconds(), 1000); [EOL]     assertEquals(true, iField.equals(dummy)); [EOL]     dummy = new PreciseDurationField(DurationFieldType.millis(), 1000); [EOL]     assertEquals(false, iField.equals(dummy)); [EOL]     assertEquals(false, iField.equals("")); [EOL]     assertEquals(false, iField.equals(null)); [EOL] }
public void testPropertyAddDayOfMonth() { [EOL]     MonthDay test = new MonthDay(4, 6); [EOL]     MonthDay copy = test.dayOfMonth().addToCopy(6); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 12); [EOL]     copy = test.dayOfMonth().addToCopy(7); [EOL]     check(copy, 4, 13); [EOL]     copy = test.dayOfMonth().addToCopy(-5); [EOL]     check(copy, 4, 1); [EOL]     copy = test.dayOfMonth().addToCopy(-6); [EOL]     check(copy, 3, 31); [EOL] }
public void testPropertyAddDayOfMonth() { [EOL]     MonthDay test = new MonthDay(4, 6); [EOL]     MonthDay copy = test.dayOfMonth().addToCopy(6); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 12); [EOL]     copy = test.dayOfMonth().addToCopy(7); [EOL]     check(copy, 4, 13); [EOL]     copy = test.dayOfMonth().addToCopy(-5); [EOL]     check(copy, 4, 1); [EOL]     copy = test.dayOfMonth().addToCopy(-6); [EOL]     check(copy, 3, 31); [EOL] }
public void testPropertyAddDayOfMonth() { [EOL]     MonthDay test = new MonthDay(4, 6); [EOL]     MonthDay copy = test.dayOfMonth().addToCopy(6); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 12); [EOL]     copy = test.dayOfMonth().addToCopy(7); [EOL]     check(copy, 4, 13); [EOL]     copy = test.dayOfMonth().addToCopy(-5); [EOL]     check(copy, 4, 1); [EOL]     copy = test.dayOfMonth().addToCopy(-6); [EOL]     check(copy, 3, 31); [EOL] }
public void testPropertyAddDayOfMonth() { [EOL]     MonthDay test = new MonthDay(4, 6); [EOL]     MonthDay copy = test.dayOfMonth().addToCopy(6); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 12); [EOL]     copy = test.dayOfMonth().addToCopy(7); [EOL]     check(copy, 4, 13); [EOL]     copy = test.dayOfMonth().addToCopy(-5); [EOL]     check(copy, 4, 1); [EOL]     copy = test.dayOfMonth().addToCopy(-6); [EOL]     check(copy, 3, 31); [EOL] }
public void testPropertyAddWrapFieldMonthOfYear() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     test.monthOfYear().addWrapField(8); [EOL]     assertEquals("2004-02-09T00:00:00.000Z", test.toString()); [EOL] }
public void testPropertyAddWrapFieldMonthOfYear() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     test.monthOfYear().addWrapField(8); [EOL]     assertEquals("2004-02-09T00:00:00.000Z", test.toString()); [EOL] }
public void testPropertyAddWrapFieldMonthOfYear() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     test.monthOfYear().addWrapField(8); [EOL]     assertEquals("2004-02-09T00:00:00.000Z", test.toString()); [EOL] }
public void testConstructor_long_long_Chronology1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance()); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, CopticChronology.getInstance()); [EOL]     MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), CopticChronology.getInstance()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testConstructor_long_long_Chronology1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance()); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, CopticChronology.getInstance()); [EOL]     MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), CopticChronology.getInstance()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testConstructor_long_long_Chronology1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance()); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, CopticChronology.getInstance()); [EOL]     MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), CopticChronology.getInstance()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testConstructor_long_long_Chronology1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance()); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, CopticChronology.getInstance()); [EOL]     MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), CopticChronology.getInstance()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testIsContiguous_RP() { [EOL]     YearMonthDay ymd = new YearMonthDay(2005, 6, 9); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(ymd)); [EOL]     TimeOfDay tod = new TimeOfDay(12, 20, 30, 0); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(tod)); [EOL]     Partial year = new Partial(DateTimeFieldType.year(), 2005); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(year)); [EOL]     Partial hourOfDay = new Partial(DateTimeFieldType.hourOfDay(), 12); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(hourOfDay)); [EOL]     Partial yearHour = year.with(DateTimeFieldType.hourOfDay(), 12); [EOL]     assertEquals(false, DateTimeUtils.isContiguous(yearHour)); [EOL]     Partial ymdd = new Partial(ymd).with(DateTimeFieldType.dayOfWeek(), 2); [EOL]     assertEquals(false, DateTimeUtils.isContiguous(ymdd)); [EOL]     Partial dd = new Partial(DateTimeFieldType.dayOfMonth(), 13).with(DateTimeFieldType.dayOfWeek(), 5); [EOL]     assertEquals(false, DateTimeUtils.isContiguous(dd)); [EOL]     try { [EOL]         DateTimeUtils.isContiguous((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testParse_noFormatter() throws Throwable { [EOL]     assertEquals(new LocalDate(2010, 6, 30), LocalDate.parse("2010-06-30")); [EOL]     assertEquals(new LocalDate(2010, 1, 2), LocalDate.parse("2010-002")); [EOL] }
public void testParse_noFormatter() throws Throwable { [EOL]     assertEquals(new LocalDate(2010, 6, 30), LocalDate.parse("2010-06-30")); [EOL]     assertEquals(new LocalDate(2010, 1, 2), LocalDate.parse("2010-002")); [EOL] }
public void testSetDayOfYear_int2() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     try { [EOL]         test.setDayOfYear(366); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals("2002-06-09T05:06:07.008+01:00", test.toString()); [EOL] }
public void testSetDayOfYear_int2() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     try { [EOL]         test.setDayOfYear(366); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals("2002-06-09T05:06:07.008+01:00", test.toString()); [EOL] }
public void testParse_noFormatter() throws Throwable { [EOL]     assertEquals(new LocalDate(2010, 6, 30), LocalDate.parse("2010-06-30")); [EOL]     assertEquals(new LocalDate(2010, 1, 2), LocalDate.parse("2010-002")); [EOL] }
public void testParse_noFormatter() throws Throwable { [EOL]     assertEquals(new LocalDate(2010, 6, 30), LocalDate.parse("2010-06-30")); [EOL]     assertEquals(new LocalDate(2010, 1, 2), LocalDate.parse("2010-002")); [EOL] }
public void testParse_noFormatter() throws Throwable { [EOL]     assertEquals(new LocalDate(2010, 6, 30), LocalDate.parse("2010-06-30")); [EOL]     assertEquals(new LocalDate(2010, 1, 2), LocalDate.parse("2010-002")); [EOL] }
public void testSafeAddLong() { [EOL]     assertEquals(0L, FieldUtils.safeAdd(0L, 0L)); [EOL]     assertEquals(5L, FieldUtils.safeAdd(2L, 3L)); [EOL]     assertEquals(-1L, FieldUtils.safeAdd(2L, -3L)); [EOL]     assertEquals(1L, FieldUtils.safeAdd(-2L, 3L)); [EOL]     assertEquals(-5L, FieldUtils.safeAdd(-2L, -3L)); [EOL]     assertEquals(Long.MAX_VALUE - 1, FieldUtils.safeAdd(Long.MAX_VALUE, -1L)); [EOL]     assertEquals(Long.MIN_VALUE + 1, FieldUtils.safeAdd(Long.MIN_VALUE, 1L)); [EOL]     assertEquals(-1, FieldUtils.safeAdd(Long.MIN_VALUE, Long.MAX_VALUE)); [EOL]     assertEquals(-1, FieldUtils.safeAdd(Long.MAX_VALUE, Long.MIN_VALUE)); [EOL]     try { [EOL]         FieldUtils.safeAdd(Long.MAX_VALUE, 1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeAdd(Long.MAX_VALUE, 100L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeAdd(Long.MAX_VALUE, Long.MAX_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeAdd(Long.MIN_VALUE, -1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeAdd(Long.MIN_VALUE, -100L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeAdd(Long.MIN_VALUE, Long.MIN_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL] }
public void testSafeAddLong() { [EOL]     assertEquals(0L, FieldUtils.safeAdd(0L, 0L)); [EOL]     assertEquals(5L, FieldUtils.safeAdd(2L, 3L)); [EOL]     assertEquals(-1L, FieldUtils.safeAdd(2L, -3L)); [EOL]     assertEquals(1L, FieldUtils.safeAdd(-2L, 3L)); [EOL]     assertEquals(-5L, FieldUtils.safeAdd(-2L, -3L)); [EOL]     assertEquals(Long.MAX_VALUE - 1, FieldUtils.safeAdd(Long.MAX_VALUE, -1L)); [EOL]     assertEquals(Long.MIN_VALUE + 1, FieldUtils.safeAdd(Long.MIN_VALUE, 1L)); [EOL]     assertEquals(-1, FieldUtils.safeAdd(Long.MIN_VALUE, Long.MAX_VALUE)); [EOL]     assertEquals(-1, FieldUtils.safeAdd(Long.MAX_VALUE, Long.MIN_VALUE)); [EOL]     try { [EOL]         FieldUtils.safeAdd(Long.MAX_VALUE, 1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeAdd(Long.MAX_VALUE, 100L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeAdd(Long.MAX_VALUE, Long.MAX_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeAdd(Long.MIN_VALUE, -1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeAdd(Long.MIN_VALUE, -100L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeAdd(Long.MIN_VALUE, Long.MIN_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL] }
public void testSafeAddLong() { [EOL]     assertEquals(0L, FieldUtils.safeAdd(0L, 0L)); [EOL]     assertEquals(5L, FieldUtils.safeAdd(2L, 3L)); [EOL]     assertEquals(-1L, FieldUtils.safeAdd(2L, -3L)); [EOL]     assertEquals(1L, FieldUtils.safeAdd(-2L, 3L)); [EOL]     assertEquals(-5L, FieldUtils.safeAdd(-2L, -3L)); [EOL]     assertEquals(Long.MAX_VALUE - 1, FieldUtils.safeAdd(Long.MAX_VALUE, -1L)); [EOL]     assertEquals(Long.MIN_VALUE + 1, FieldUtils.safeAdd(Long.MIN_VALUE, 1L)); [EOL]     assertEquals(-1, FieldUtils.safeAdd(Long.MIN_VALUE, Long.MAX_VALUE)); [EOL]     assertEquals(-1, FieldUtils.safeAdd(Long.MAX_VALUE, Long.MIN_VALUE)); [EOL]     try { [EOL]         FieldUtils.safeAdd(Long.MAX_VALUE, 1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeAdd(Long.MAX_VALUE, 100L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeAdd(Long.MAX_VALUE, Long.MAX_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeAdd(Long.MIN_VALUE, -1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeAdd(Long.MIN_VALUE, -100L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeAdd(Long.MIN_VALUE, Long.MIN_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL] }
public void testSafeDivideLongLong() { [EOL]     assertEquals(1L, FieldUtils.safeDivide(1L, 1L)); [EOL]     assertEquals(1L, FieldUtils.safeDivide(3L, 3L)); [EOL]     assertEquals(0L, FieldUtils.safeDivide(1L, 3L)); [EOL]     assertEquals(3L, FieldUtils.safeDivide(3L, 1L)); [EOL]     assertEquals(1L, FieldUtils.safeDivide(5L, 3L)); [EOL]     assertEquals(-1L, FieldUtils.safeDivide(5L, -3L)); [EOL]     assertEquals(-1L, FieldUtils.safeDivide(-5L, 3L)); [EOL]     assertEquals(1L, FieldUtils.safeDivide(-5L, -3L)); [EOL]     assertEquals(2L, FieldUtils.safeDivide(6L, 3L)); [EOL]     assertEquals(-2L, FieldUtils.safeDivide(6L, -3L)); [EOL]     assertEquals(-2L, FieldUtils.safeDivide(-6L, 3L)); [EOL]     assertEquals(2L, FieldUtils.safeDivide(-6L, -3L)); [EOL]     assertEquals(2L, FieldUtils.safeDivide(7L, 3L)); [EOL]     assertEquals(-2L, FieldUtils.safeDivide(7L, -3L)); [EOL]     assertEquals(-2L, FieldUtils.safeDivide(-7L, 3L)); [EOL]     assertEquals(2L, FieldUtils.safeDivide(-7L, -3L)); [EOL]     assertEquals(Long.MAX_VALUE, FieldUtils.safeDivide(Long.MAX_VALUE, 1L)); [EOL]     assertEquals(Long.MIN_VALUE, FieldUtils.safeDivide(Long.MIN_VALUE, 1L)); [EOL]     assertEquals(-Long.MAX_VALUE, FieldUtils.safeDivide(Long.MAX_VALUE, -1L)); [EOL]     try { [EOL]         FieldUtils.safeDivide(Long.MIN_VALUE, -1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeDivide(1L, 0L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL] }
public void testSafeDivideLongLong() { [EOL]     assertEquals(1L, FieldUtils.safeDivide(1L, 1L)); [EOL]     assertEquals(1L, FieldUtils.safeDivide(3L, 3L)); [EOL]     assertEquals(0L, FieldUtils.safeDivide(1L, 3L)); [EOL]     assertEquals(3L, FieldUtils.safeDivide(3L, 1L)); [EOL]     assertEquals(1L, FieldUtils.safeDivide(5L, 3L)); [EOL]     assertEquals(-1L, FieldUtils.safeDivide(5L, -3L)); [EOL]     assertEquals(-1L, FieldUtils.safeDivide(-5L, 3L)); [EOL]     assertEquals(1L, FieldUtils.safeDivide(-5L, -3L)); [EOL]     assertEquals(2L, FieldUtils.safeDivide(6L, 3L)); [EOL]     assertEquals(-2L, FieldUtils.safeDivide(6L, -3L)); [EOL]     assertEquals(-2L, FieldUtils.safeDivide(-6L, 3L)); [EOL]     assertEquals(2L, FieldUtils.safeDivide(-6L, -3L)); [EOL]     assertEquals(2L, FieldUtils.safeDivide(7L, 3L)); [EOL]     assertEquals(-2L, FieldUtils.safeDivide(7L, -3L)); [EOL]     assertEquals(-2L, FieldUtils.safeDivide(-7L, 3L)); [EOL]     assertEquals(2L, FieldUtils.safeDivide(-7L, -3L)); [EOL]     assertEquals(Long.MAX_VALUE, FieldUtils.safeDivide(Long.MAX_VALUE, 1L)); [EOL]     assertEquals(Long.MIN_VALUE, FieldUtils.safeDivide(Long.MIN_VALUE, 1L)); [EOL]     assertEquals(-Long.MAX_VALUE, FieldUtils.safeDivide(Long.MAX_VALUE, -1L)); [EOL]     try { [EOL]         FieldUtils.safeDivide(Long.MIN_VALUE, -1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeDivide(1L, 0L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL] }
public void testSafeDivideLongLong() { [EOL]     assertEquals(1L, FieldUtils.safeDivide(1L, 1L)); [EOL]     assertEquals(1L, FieldUtils.safeDivide(3L, 3L)); [EOL]     assertEquals(0L, FieldUtils.safeDivide(1L, 3L)); [EOL]     assertEquals(3L, FieldUtils.safeDivide(3L, 1L)); [EOL]     assertEquals(1L, FieldUtils.safeDivide(5L, 3L)); [EOL]     assertEquals(-1L, FieldUtils.safeDivide(5L, -3L)); [EOL]     assertEquals(-1L, FieldUtils.safeDivide(-5L, 3L)); [EOL]     assertEquals(1L, FieldUtils.safeDivide(-5L, -3L)); [EOL]     assertEquals(2L, FieldUtils.safeDivide(6L, 3L)); [EOL]     assertEquals(-2L, FieldUtils.safeDivide(6L, -3L)); [EOL]     assertEquals(-2L, FieldUtils.safeDivide(-6L, 3L)); [EOL]     assertEquals(2L, FieldUtils.safeDivide(-6L, -3L)); [EOL]     assertEquals(2L, FieldUtils.safeDivide(7L, 3L)); [EOL]     assertEquals(-2L, FieldUtils.safeDivide(7L, -3L)); [EOL]     assertEquals(-2L, FieldUtils.safeDivide(-7L, 3L)); [EOL]     assertEquals(2L, FieldUtils.safeDivide(-7L, -3L)); [EOL]     assertEquals(Long.MAX_VALUE, FieldUtils.safeDivide(Long.MAX_VALUE, 1L)); [EOL]     assertEquals(Long.MIN_VALUE, FieldUtils.safeDivide(Long.MIN_VALUE, 1L)); [EOL]     assertEquals(-Long.MAX_VALUE, FieldUtils.safeDivide(Long.MAX_VALUE, -1L)); [EOL]     try { [EOL]         FieldUtils.safeDivide(Long.MIN_VALUE, -1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeDivide(1L, 0L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL] }
public void testSafeDivideLongLong() { [EOL]     assertEquals(1L, FieldUtils.safeDivide(1L, 1L)); [EOL]     assertEquals(1L, FieldUtils.safeDivide(3L, 3L)); [EOL]     assertEquals(0L, FieldUtils.safeDivide(1L, 3L)); [EOL]     assertEquals(3L, FieldUtils.safeDivide(3L, 1L)); [EOL]     assertEquals(1L, FieldUtils.safeDivide(5L, 3L)); [EOL]     assertEquals(-1L, FieldUtils.safeDivide(5L, -3L)); [EOL]     assertEquals(-1L, FieldUtils.safeDivide(-5L, 3L)); [EOL]     assertEquals(1L, FieldUtils.safeDivide(-5L, -3L)); [EOL]     assertEquals(2L, FieldUtils.safeDivide(6L, 3L)); [EOL]     assertEquals(-2L, FieldUtils.safeDivide(6L, -3L)); [EOL]     assertEquals(-2L, FieldUtils.safeDivide(-6L, 3L)); [EOL]     assertEquals(2L, FieldUtils.safeDivide(-6L, -3L)); [EOL]     assertEquals(2L, FieldUtils.safeDivide(7L, 3L)); [EOL]     assertEquals(-2L, FieldUtils.safeDivide(7L, -3L)); [EOL]     assertEquals(-2L, FieldUtils.safeDivide(-7L, 3L)); [EOL]     assertEquals(2L, FieldUtils.safeDivide(-7L, -3L)); [EOL]     assertEquals(Long.MAX_VALUE, FieldUtils.safeDivide(Long.MAX_VALUE, 1L)); [EOL]     assertEquals(Long.MIN_VALUE, FieldUtils.safeDivide(Long.MIN_VALUE, 1L)); [EOL]     assertEquals(-Long.MAX_VALUE, FieldUtils.safeDivide(Long.MAX_VALUE, -1L)); [EOL]     try { [EOL]         FieldUtils.safeDivide(Long.MIN_VALUE, -1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeDivide(1L, 0L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL] }
public void testSafeDivideLongLong() { [EOL]     assertEquals(1L, FieldUtils.safeDivide(1L, 1L)); [EOL]     assertEquals(1L, FieldUtils.safeDivide(3L, 3L)); [EOL]     assertEquals(0L, FieldUtils.safeDivide(1L, 3L)); [EOL]     assertEquals(3L, FieldUtils.safeDivide(3L, 1L)); [EOL]     assertEquals(1L, FieldUtils.safeDivide(5L, 3L)); [EOL]     assertEquals(-1L, FieldUtils.safeDivide(5L, -3L)); [EOL]     assertEquals(-1L, FieldUtils.safeDivide(-5L, 3L)); [EOL]     assertEquals(1L, FieldUtils.safeDivide(-5L, -3L)); [EOL]     assertEquals(2L, FieldUtils.safeDivide(6L, 3L)); [EOL]     assertEquals(-2L, FieldUtils.safeDivide(6L, -3L)); [EOL]     assertEquals(-2L, FieldUtils.safeDivide(-6L, 3L)); [EOL]     assertEquals(2L, FieldUtils.safeDivide(-6L, -3L)); [EOL]     assertEquals(2L, FieldUtils.safeDivide(7L, 3L)); [EOL]     assertEquals(-2L, FieldUtils.safeDivide(7L, -3L)); [EOL]     assertEquals(-2L, FieldUtils.safeDivide(-7L, 3L)); [EOL]     assertEquals(2L, FieldUtils.safeDivide(-7L, -3L)); [EOL]     assertEquals(Long.MAX_VALUE, FieldUtils.safeDivide(Long.MAX_VALUE, 1L)); [EOL]     assertEquals(Long.MIN_VALUE, FieldUtils.safeDivide(Long.MIN_VALUE, 1L)); [EOL]     assertEquals(-Long.MAX_VALUE, FieldUtils.safeDivide(Long.MAX_VALUE, -1L)); [EOL]     try { [EOL]         FieldUtils.safeDivide(Long.MIN_VALUE, -1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeDivide(1L, 0L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL] }
public void testSafeDivideLongLong() { [EOL]     assertEquals(1L, FieldUtils.safeDivide(1L, 1L)); [EOL]     assertEquals(1L, FieldUtils.safeDivide(3L, 3L)); [EOL]     assertEquals(0L, FieldUtils.safeDivide(1L, 3L)); [EOL]     assertEquals(3L, FieldUtils.safeDivide(3L, 1L)); [EOL]     assertEquals(1L, FieldUtils.safeDivide(5L, 3L)); [EOL]     assertEquals(-1L, FieldUtils.safeDivide(5L, -3L)); [EOL]     assertEquals(-1L, FieldUtils.safeDivide(-5L, 3L)); [EOL]     assertEquals(1L, FieldUtils.safeDivide(-5L, -3L)); [EOL]     assertEquals(2L, FieldUtils.safeDivide(6L, 3L)); [EOL]     assertEquals(-2L, FieldUtils.safeDivide(6L, -3L)); [EOL]     assertEquals(-2L, FieldUtils.safeDivide(-6L, 3L)); [EOL]     assertEquals(2L, FieldUtils.safeDivide(-6L, -3L)); [EOL]     assertEquals(2L, FieldUtils.safeDivide(7L, 3L)); [EOL]     assertEquals(-2L, FieldUtils.safeDivide(7L, -3L)); [EOL]     assertEquals(-2L, FieldUtils.safeDivide(-7L, 3L)); [EOL]     assertEquals(2L, FieldUtils.safeDivide(-7L, -3L)); [EOL]     assertEquals(Long.MAX_VALUE, FieldUtils.safeDivide(Long.MAX_VALUE, 1L)); [EOL]     assertEquals(Long.MIN_VALUE, FieldUtils.safeDivide(Long.MIN_VALUE, 1L)); [EOL]     assertEquals(-Long.MAX_VALUE, FieldUtils.safeDivide(Long.MAX_VALUE, -1L)); [EOL]     try { [EOL]         FieldUtils.safeDivide(Long.MIN_VALUE, -1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeDivide(1L, 0L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL] }
public void testSafeDivideLongLong() { [EOL]     assertEquals(1L, FieldUtils.safeDivide(1L, 1L)); [EOL]     assertEquals(1L, FieldUtils.safeDivide(3L, 3L)); [EOL]     assertEquals(0L, FieldUtils.safeDivide(1L, 3L)); [EOL]     assertEquals(3L, FieldUtils.safeDivide(3L, 1L)); [EOL]     assertEquals(1L, FieldUtils.safeDivide(5L, 3L)); [EOL]     assertEquals(-1L, FieldUtils.safeDivide(5L, -3L)); [EOL]     assertEquals(-1L, FieldUtils.safeDivide(-5L, 3L)); [EOL]     assertEquals(1L, FieldUtils.safeDivide(-5L, -3L)); [EOL]     assertEquals(2L, FieldUtils.safeDivide(6L, 3L)); [EOL]     assertEquals(-2L, FieldUtils.safeDivide(6L, -3L)); [EOL]     assertEquals(-2L, FieldUtils.safeDivide(-6L, 3L)); [EOL]     assertEquals(2L, FieldUtils.safeDivide(-6L, -3L)); [EOL]     assertEquals(2L, FieldUtils.safeDivide(7L, 3L)); [EOL]     assertEquals(-2L, FieldUtils.safeDivide(7L, -3L)); [EOL]     assertEquals(-2L, FieldUtils.safeDivide(-7L, 3L)); [EOL]     assertEquals(2L, FieldUtils.safeDivide(-7L, -3L)); [EOL]     assertEquals(Long.MAX_VALUE, FieldUtils.safeDivide(Long.MAX_VALUE, 1L)); [EOL]     assertEquals(Long.MIN_VALUE, FieldUtils.safeDivide(Long.MIN_VALUE, 1L)); [EOL]     assertEquals(-Long.MAX_VALUE, FieldUtils.safeDivide(Long.MAX_VALUE, -1L)); [EOL]     try { [EOL]         FieldUtils.safeDivide(Long.MIN_VALUE, -1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeDivide(1L, 0L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL] }
public void testToInterval_Zone() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(TOKYO); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime start = base.toDateTimeAtStartOfDay(TOKYO); [EOL]     DateTime end = start.plus(Period.days(1)); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testToInterval_Zone() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(TOKYO); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime start = base.toDateTimeAtStartOfDay(TOKYO); [EOL]     DateTime end = start.plus(Period.days(1)); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testToInterval_Zone() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(TOKYO); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime start = base.toDateTimeAtStartOfDay(TOKYO); [EOL]     DateTime end = start.plus(Period.days(1)); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testToInterval_Zone() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(TOKYO); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime start = base.toDateTimeAtStartOfDay(TOKYO); [EOL]     DateTime end = start.plus(Period.days(1)); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testToInterval_Zone() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(TOKYO); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime start = base.toDateTimeAtStartOfDay(TOKYO); [EOL]     DateTime end = start.plus(Period.days(1)); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testBug2182444_usCentral() { [EOL]     Chronology chronUSCentral = GregorianChronology.getInstance(DateTimeZone.forID("US/Central")); [EOL]     Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC); [EOL]     DateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0, 0, chronUTC); [EOL]     DateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0, 0, chronUTC); [EOL]     assertTrue("Should be standard time", chronUSCentral.getZone().isStandardOffset(usCentralStandardInUTC.getMillis())); [EOL]     assertFalse("Should be daylight time", chronUSCentral.getZone().isStandardOffset(usCentralDaylightInUTC.getMillis())); [EOL]     DateTime usCentralStandardInUSCentral = usCentralStandardInUTC.toDateTime(chronUSCentral); [EOL]     DateTime usCentralDaylightInUSCentral = usCentralDaylightInUTC.toDateTime(chronUSCentral); [EOL]     assertEquals(1, usCentralStandardInUSCentral.getHourOfDay()); [EOL]     assertEquals(usCentralStandardInUSCentral.getHourOfDay(), usCentralDaylightInUSCentral.getHourOfDay()); [EOL]     assertTrue(usCentralStandardInUSCentral.getMillis() != usCentralDaylightInUSCentral.getMillis()); [EOL]     assertEquals(usCentralStandardInUSCentral, usCentralStandardInUSCentral.withHourOfDay(1)); [EOL]     assertEquals(usCentralStandardInUSCentral.getMillis() + 3, usCentralStandardInUSCentral.withMillisOfSecond(3).getMillis()); [EOL]     assertEquals(usCentralDaylightInUSCentral, usCentralDaylightInUSCentral.withHourOfDay(1)); [EOL]     assertEquals(usCentralDaylightInUSCentral.getMillis() + 3, usCentralDaylightInUSCentral.withMillisOfSecond(3).getMillis()); [EOL] }
public void testBug2182444_usCentral() { [EOL]     Chronology chronUSCentral = GregorianChronology.getInstance(DateTimeZone.forID("US/Central")); [EOL]     Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC); [EOL]     DateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0, 0, chronUTC); [EOL]     DateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0, 0, chronUTC); [EOL]     assertTrue("Should be standard time", chronUSCentral.getZone().isStandardOffset(usCentralStandardInUTC.getMillis())); [EOL]     assertFalse("Should be daylight time", chronUSCentral.getZone().isStandardOffset(usCentralDaylightInUTC.getMillis())); [EOL]     DateTime usCentralStandardInUSCentral = usCentralStandardInUTC.toDateTime(chronUSCentral); [EOL]     DateTime usCentralDaylightInUSCentral = usCentralDaylightInUTC.toDateTime(chronUSCentral); [EOL]     assertEquals(1, usCentralStandardInUSCentral.getHourOfDay()); [EOL]     assertEquals(usCentralStandardInUSCentral.getHourOfDay(), usCentralDaylightInUSCentral.getHourOfDay()); [EOL]     assertTrue(usCentralStandardInUSCentral.getMillis() != usCentralDaylightInUSCentral.getMillis()); [EOL]     assertEquals(usCentralStandardInUSCentral, usCentralStandardInUSCentral.withHourOfDay(1)); [EOL]     assertEquals(usCentralStandardInUSCentral.getMillis() + 3, usCentralStandardInUSCentral.withMillisOfSecond(3).getMillis()); [EOL]     assertEquals(usCentralDaylightInUSCentral, usCentralDaylightInUSCentral.withHourOfDay(1)); [EOL]     assertEquals(usCentralDaylightInUSCentral.getMillis() + 3, usCentralDaylightInUSCentral.withMillisOfSecond(3).getMillis()); [EOL] }
public void testBug2182444_usCentral() { [EOL]     Chronology chronUSCentral = GregorianChronology.getInstance(DateTimeZone.forID("US/Central")); [EOL]     Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC); [EOL]     DateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0, 0, chronUTC); [EOL]     DateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0, 0, chronUTC); [EOL]     assertTrue("Should be standard time", chronUSCentral.getZone().isStandardOffset(usCentralStandardInUTC.getMillis())); [EOL]     assertFalse("Should be daylight time", chronUSCentral.getZone().isStandardOffset(usCentralDaylightInUTC.getMillis())); [EOL]     DateTime usCentralStandardInUSCentral = usCentralStandardInUTC.toDateTime(chronUSCentral); [EOL]     DateTime usCentralDaylightInUSCentral = usCentralDaylightInUTC.toDateTime(chronUSCentral); [EOL]     assertEquals(1, usCentralStandardInUSCentral.getHourOfDay()); [EOL]     assertEquals(usCentralStandardInUSCentral.getHourOfDay(), usCentralDaylightInUSCentral.getHourOfDay()); [EOL]     assertTrue(usCentralStandardInUSCentral.getMillis() != usCentralDaylightInUSCentral.getMillis()); [EOL]     assertEquals(usCentralStandardInUSCentral, usCentralStandardInUSCentral.withHourOfDay(1)); [EOL]     assertEquals(usCentralStandardInUSCentral.getMillis() + 3, usCentralStandardInUSCentral.withMillisOfSecond(3).getMillis()); [EOL]     assertEquals(usCentralDaylightInUSCentral, usCentralDaylightInUSCentral.withHourOfDay(1)); [EOL]     assertEquals(usCentralDaylightInUSCentral.getMillis() + 3, usCentralDaylightInUSCentral.withMillisOfSecond(3).getMillis()); [EOL] }
public void testGetInstantConverter() { [EOL]     InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L)); [EOL]     assertEquals(Long.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getInstantConverter(new DateTime()); [EOL]     assertEquals(ReadableInstant.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getInstantConverter(""); [EOL]     assertEquals(String.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getInstantConverter(new Date()); [EOL]     assertEquals(Date.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getInstantConverter(new GregorianCalendar()); [EOL]     assertEquals(Calendar.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getInstantConverter(null); [EOL]     assertEquals(null, c.getSupportedType()); [EOL]     try { [EOL]         ConverterManager.getInstance().getInstantConverter(Boolean.TRUE); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGetInstantConverter() { [EOL]     InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L)); [EOL]     assertEquals(Long.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getInstantConverter(new DateTime()); [EOL]     assertEquals(ReadableInstant.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getInstantConverter(""); [EOL]     assertEquals(String.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getInstantConverter(new Date()); [EOL]     assertEquals(Date.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getInstantConverter(new GregorianCalendar()); [EOL]     assertEquals(Calendar.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getInstantConverter(null); [EOL]     assertEquals(null, c.getSupportedType()); [EOL]     try { [EOL]         ConverterManager.getInstance().getInstantConverter(Boolean.TRUE); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGetInstantConverter() { [EOL]     InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L)); [EOL]     assertEquals(Long.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getInstantConverter(new DateTime()); [EOL]     assertEquals(ReadableInstant.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getInstantConverter(""); [EOL]     assertEquals(String.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getInstantConverter(new Date()); [EOL]     assertEquals(Date.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getInstantConverter(new GregorianCalendar()); [EOL]     assertEquals(Calendar.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getInstantConverter(null); [EOL]     assertEquals(null, c.getSupportedType()); [EOL]     try { [EOL]         ConverterManager.getInstance().getInstantConverter(Boolean.TRUE); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGetInstantConverterOKMultipleMatches() { [EOL]     InstantConverter c = new InstantConverter() { [EOL]  [EOL]         public long getInstantMillis(Object object, Chronology chrono) { [EOL]             return 0; [EOL]         } [EOL]  [EOL]         public Chronology getChronology(Object object, DateTimeZone zone) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public Chronology getChronology(Object object, Chronology chrono) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public Class getSupportedType() { [EOL]             return ReadableDateTime.class; [EOL]         } [EOL]     }; [EOL]     try { [EOL]         ConverterManager.getInstance().addInstantConverter(c); [EOL]         InstantConverter ok = ConverterManager.getInstance().getInstantConverter(new DateTime()); [EOL]         assertEquals(ReadableDateTime.class, ok.getSupportedType()); [EOL]     } finally { [EOL]         ConverterManager.getInstance().removeInstantConverter(c); [EOL]     } [EOL]     assertEquals(6, ConverterManager.getInstance().getInstantConverters().length); [EOL] }
public void testGetInstantConverterOKMultipleMatches() { [EOL]     InstantConverter c = new InstantConverter() { [EOL]  [EOL]         public long getInstantMillis(Object object, Chronology chrono) { [EOL]             return 0; [EOL]         } [EOL]  [EOL]         public Chronology getChronology(Object object, DateTimeZone zone) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public Chronology getChronology(Object object, Chronology chrono) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public Class getSupportedType() { [EOL]             return ReadableDateTime.class; [EOL]         } [EOL]     }; [EOL]     try { [EOL]         ConverterManager.getInstance().addInstantConverter(c); [EOL]         InstantConverter ok = ConverterManager.getInstance().getInstantConverter(new DateTime()); [EOL]         assertEquals(ReadableDateTime.class, ok.getSupportedType()); [EOL]     } finally { [EOL]         ConverterManager.getInstance().removeInstantConverter(c); [EOL]     } [EOL]     assertEquals(6, ConverterManager.getInstance().getInstantConverters().length); [EOL] }
public void testGetInstantConverterOKMultipleMatches() { [EOL]     InstantConverter c = new InstantConverter() { [EOL]  [EOL]         public long getInstantMillis(Object object, Chronology chrono) { [EOL]             return 0; [EOL]         } [EOL]  [EOL]         public Chronology getChronology(Object object, DateTimeZone zone) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public Chronology getChronology(Object object, Chronology chrono) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public Class getSupportedType() { [EOL]             return ReadableDateTime.class; [EOL]         } [EOL]     }; [EOL]     try { [EOL]         ConverterManager.getInstance().addInstantConverter(c); [EOL]         InstantConverter ok = ConverterManager.getInstance().getInstantConverter(new DateTime()); [EOL]         assertEquals(ReadableDateTime.class, ok.getSupportedType()); [EOL]     } finally { [EOL]         ConverterManager.getInstance().removeInstantConverter(c); [EOL]     } [EOL]     assertEquals(6, ConverterManager.getInstance().getInstantConverters().length); [EOL] }
public void testGetInstantConverterOKMultipleMatches() { [EOL]     InstantConverter c = new InstantConverter() { [EOL]  [EOL]         public long getInstantMillis(Object object, Chronology chrono) { [EOL]             return 0; [EOL]         } [EOL]  [EOL]         public Chronology getChronology(Object object, DateTimeZone zone) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public Chronology getChronology(Object object, Chronology chrono) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public Class getSupportedType() { [EOL]             return ReadableDateTime.class; [EOL]         } [EOL]     }; [EOL]     try { [EOL]         ConverterManager.getInstance().addInstantConverter(c); [EOL]         InstantConverter ok = ConverterManager.getInstance().getInstantConverter(new DateTime()); [EOL]         assertEquals(ReadableDateTime.class, ok.getSupportedType()); [EOL]     } finally { [EOL]         ConverterManager.getInstance().removeInstantConverter(c); [EOL]     } [EOL]     assertEquals(6, ConverterManager.getInstance().getInstantConverters().length); [EOL] }
public void testGetInstantConverterOKMultipleMatches() { [EOL]     InstantConverter c = new InstantConverter() { [EOL]  [EOL]         public long getInstantMillis(Object object, Chronology chrono) { [EOL]             return 0; [EOL]         } [EOL]  [EOL]         public Chronology getChronology(Object object, DateTimeZone zone) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public Chronology getChronology(Object object, Chronology chrono) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public Class getSupportedType() { [EOL]             return ReadableDateTime.class; [EOL]         } [EOL]     }; [EOL]     try { [EOL]         ConverterManager.getInstance().addInstantConverter(c); [EOL]         InstantConverter ok = ConverterManager.getInstance().getInstantConverter(new DateTime()); [EOL]         assertEquals(ReadableDateTime.class, ok.getSupportedType()); [EOL]     } finally { [EOL]         ConverterManager.getInstance().removeInstantConverter(c); [EOL]     } [EOL]     assertEquals(6, ConverterManager.getInstance().getInstantConverters().length); [EOL] }
public void testGetInstantConverterOKMultipleMatches() { [EOL]     InstantConverter c = new InstantConverter() { [EOL]  [EOL]         public long getInstantMillis(Object object, Chronology chrono) { [EOL]             return 0; [EOL]         } [EOL]  [EOL]         public Chronology getChronology(Object object, DateTimeZone zone) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public Chronology getChronology(Object object, Chronology chrono) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public Class getSupportedType() { [EOL]             return ReadableDateTime.class; [EOL]         } [EOL]     }; [EOL]     try { [EOL]         ConverterManager.getInstance().addInstantConverter(c); [EOL]         InstantConverter ok = ConverterManager.getInstance().getInstantConverter(new DateTime()); [EOL]         assertEquals(ReadableDateTime.class, ok.getSupportedType()); [EOL]     } finally { [EOL]         ConverterManager.getInstance().removeInstantConverter(c); [EOL]     } [EOL]     assertEquals(6, ConverterManager.getInstance().getInstantConverters().length); [EOL] }
public void testGetInstantConverterOKMultipleMatches() { [EOL]     InstantConverter c = new InstantConverter() { [EOL]  [EOL]         public long getInstantMillis(Object object, Chronology chrono) { [EOL]             return 0; [EOL]         } [EOL]  [EOL]         public Chronology getChronology(Object object, DateTimeZone zone) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public Chronology getChronology(Object object, Chronology chrono) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public Class getSupportedType() { [EOL]             return ReadableDateTime.class; [EOL]         } [EOL]     }; [EOL]     try { [EOL]         ConverterManager.getInstance().addInstantConverter(c); [EOL]         InstantConverter ok = ConverterManager.getInstance().getInstantConverter(new DateTime()); [EOL]         assertEquals(ReadableDateTime.class, ok.getSupportedType()); [EOL]     } finally { [EOL]         ConverterManager.getInstance().removeInstantConverter(c); [EOL]     } [EOL]     assertEquals(6, ConverterManager.getInstance().getInstantConverters().length); [EOL] }
public void testGetInstantConverterOKMultipleMatches() { [EOL]     InstantConverter c = new InstantConverter() { [EOL]  [EOL]         public long getInstantMillis(Object object, Chronology chrono) { [EOL]             return 0; [EOL]         } [EOL]  [EOL]         public Chronology getChronology(Object object, DateTimeZone zone) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public Chronology getChronology(Object object, Chronology chrono) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public Class getSupportedType() { [EOL]             return ReadableDateTime.class; [EOL]         } [EOL]     }; [EOL]     try { [EOL]         ConverterManager.getInstance().addInstantConverter(c); [EOL]         InstantConverter ok = ConverterManager.getInstance().getInstantConverter(new DateTime()); [EOL]         assertEquals(ReadableDateTime.class, ok.getSupportedType()); [EOL]     } finally { [EOL]         ConverterManager.getInstance().removeInstantConverter(c); [EOL]     } [EOL]     assertEquals(6, ConverterManager.getInstance().getInstantConverters().length); [EOL] }
public void testGetPartialConverterRemovedNull() { [EOL]     try { [EOL]         ConverterManager.getInstance().removePartialConverter(NullConverter.INSTANCE); [EOL]         try { [EOL]             ConverterManager.getInstance().getPartialConverter(null); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]     } finally { [EOL]         ConverterManager.getInstance().addPartialConverter(NullConverter.INSTANCE); [EOL]     } [EOL]     assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length); [EOL] }
public void testGetPartialConverterRemovedNull() { [EOL]     try { [EOL]         ConverterManager.getInstance().removePartialConverter(NullConverter.INSTANCE); [EOL]         try { [EOL]             ConverterManager.getInstance().getPartialConverter(null); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]     } finally { [EOL]         ConverterManager.getInstance().addPartialConverter(NullConverter.INSTANCE); [EOL]     } [EOL]     assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length); [EOL] }
public void testGetPartialConverterRemovedNull() { [EOL]     try { [EOL]         ConverterManager.getInstance().removePartialConverter(NullConverter.INSTANCE); [EOL]         try { [EOL]             ConverterManager.getInstance().getPartialConverter(null); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]     } finally { [EOL]         ConverterManager.getInstance().addPartialConverter(NullConverter.INSTANCE); [EOL]     } [EOL]     assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length); [EOL] }
public void testRemovePartialConverter3() { [EOL]     PartialConverter removed = ConverterManager.getInstance().removePartialConverter(null); [EOL]     assertEquals(null, removed); [EOL]     assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length); [EOL] }
public void testRemovePartialConverter3() { [EOL]     PartialConverter removed = ConverterManager.getInstance().removePartialConverter(null); [EOL]     assertEquals(null, removed); [EOL]     assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length); [EOL] }
public void testRemovePartialConverter3() { [EOL]     PartialConverter removed = ConverterManager.getInstance().removePartialConverter(null); [EOL]     assertEquals(null, removed); [EOL]     assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length); [EOL] }
public void testRemovePartialConverter3() { [EOL]     PartialConverter removed = ConverterManager.getInstance().removePartialConverter(null); [EOL]     assertEquals(null, removed); [EOL]     assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length); [EOL] }
public void testRemovePartialConverter3() { [EOL]     PartialConverter removed = ConverterManager.getInstance().removePartialConverter(null); [EOL]     assertEquals(null, removed); [EOL]     assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length); [EOL] }
public void testRemovePartialConverter3() { [EOL]     PartialConverter removed = ConverterManager.getInstance().removePartialConverter(null); [EOL]     assertEquals(null, removed); [EOL]     assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length); [EOL] }
public void testRemovePartialConverter3() { [EOL]     PartialConverter removed = ConverterManager.getInstance().removePartialConverter(null); [EOL]     assertEquals(null, removed); [EOL]     assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length); [EOL] }
public void testAddIntervalConverter3() { [EOL]     IntervalConverter removed = ConverterManager.getInstance().addIntervalConverter(null); [EOL]     assertEquals(null, removed); [EOL]     assertEquals(INTERVAL_SIZE, ConverterManager.getInstance().getIntervalConverters().length); [EOL] }
public void testAddIntervalConverter3() { [EOL]     IntervalConverter removed = ConverterManager.getInstance().addIntervalConverter(null); [EOL]     assertEquals(null, removed); [EOL]     assertEquals(INTERVAL_SIZE, ConverterManager.getInstance().getIntervalConverters().length); [EOL] }
public void testSerializedLocalDateBuddhist() throws Exception { [EOL]     LocalDate test = new LocalDate(BuddhistChronology.getInstanceUTC()); [EOL]     loadAndCompare(test, "LocalDateBuddhist", false); [EOL]     inlineCompare(test, false); [EOL] }
public void testSerializedLocalDateBuddhist() throws Exception { [EOL]     LocalDate test = new LocalDate(BuddhistChronology.getInstanceUTC()); [EOL]     loadAndCompare(test, "LocalDateBuddhist", false); [EOL]     inlineCompare(test, false); [EOL] }
public void test_plusYears_negativeToPositive() { [EOL]     LocalDate date = new LocalDate(-3, 6, 30, GJ_CHRONOLOGY); [EOL]     LocalDate expected = new LocalDate(2, 6, 30, GJ_CHRONOLOGY); [EOL]     assertEquals(expected, date.plusYears(4)); [EOL] }
public void testToInterval() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime start = base.toDateTime(TimeOfDay.MIDNIGHT); [EOL]     DateTime end = start.plus(Period.days(1)); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testToInterval() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime start = base.toDateTime(TimeOfDay.MIDNIGHT); [EOL]     DateTime end = start.plus(Period.days(1)); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testSerializedGJChronologyChangedInternals() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(PARIS, 123L, 2); [EOL]     loadAndCompare(test, "GJChronologyChangedInternals", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronologyChangedInternals() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(PARIS, 123L, 2); [EOL]     loadAndCompare(test, "GJChronologyChangedInternals", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testGetChronology_Object_nullChronology() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Paris")); [EOL]     assertEquals(GJChronology.getInstance(PARIS), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(0L)); [EOL]     assertEquals(GJChronology.getInstance(MOSCOW, 0L, 4), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MAX_VALUE)); [EOL]     assertEquals(JulianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MIN_VALUE)); [EOL]     assertEquals(GregorianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(new MockUnknownTimeZone()); [EOL]     assertEquals(GJChronology.getInstance(), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     Calendar uc = new MockUnknownCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     assertEquals(ISOChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(uc, (Chronology) null)); [EOL]     try { [EOL]         Calendar bc = (Calendar) Class.forName("sun.util.BuddhistCalendar").newInstance(); [EOL]         bc.setTimeZone(TimeZone.getTimeZone("Europe/Moscow")); [EOL]         assertEquals(BuddhistChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(bc, (Chronology) null)); [EOL]     } catch (ClassNotFoundException ex) { [EOL]     } [EOL] }
public void testToInterval() { [EOL]     YearMonth base = new YearMonth(2005, 6, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(); [EOL]     check(base, 2005, 6); [EOL]     DateTime start = new DateTime(2005, 6, 1, 0, 0, COPTIC_LONDON); [EOL]     DateTime end = new DateTime(2005, 7, 1, 0, 0, COPTIC_LONDON); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testMaximumValue() { [EOL]     DateMidnight dt = new DateMidnight(1570, 1, 1, GJChronology.getInstance()); [EOL]     while (dt.getYear() < 1590) { [EOL]         dt = dt.plusDays(1); [EOL]         YearMonthDay ymd = dt.toYearMonthDay(); [EOL]         assertEquals(dt.year().getMaximumValue(), ymd.year().getMaximumValue()); [EOL]         assertEquals(dt.monthOfYear().getMaximumValue(), ymd.monthOfYear().getMaximumValue()); [EOL]         assertEquals(dt.dayOfMonth().getMaximumValue(), ymd.dayOfMonth().getMaximumValue()); [EOL]     } [EOL] }
public void testCutoverAddWeeks() { [EOL]     testAdd("1582-01-01", DurationFieldType.weeks(), 1, "1582-01-08"); [EOL]     testAdd("1583-01-01", DurationFieldType.weeks(), 1, "1583-01-08"); [EOL]     testAdd("1582-10-01", DurationFieldType.weeks(), 2, "1582-10-25"); [EOL]     testAdd("1582-W01-1", DurationFieldType.weeks(), 51, "1583-W01-1"); [EOL] }
public void testCutoverAddWeeks() { [EOL]     testAdd("1582-01-01", DurationFieldType.weeks(), 1, "1582-01-08"); [EOL]     testAdd("1583-01-01", DurationFieldType.weeks(), 1, "1583-01-08"); [EOL]     testAdd("1582-10-01", DurationFieldType.weeks(), 2, "1582-10-25"); [EOL]     testAdd("1582-W01-1", DurationFieldType.weeks(), 51, "1583-W01-1"); [EOL] }
public void testCutoverAddWeeks() { [EOL]     testAdd("1582-01-01", DurationFieldType.weeks(), 1, "1582-01-08"); [EOL]     testAdd("1583-01-01", DurationFieldType.weeks(), 1, "1583-01-08"); [EOL]     testAdd("1582-10-01", DurationFieldType.weeks(), 2, "1582-10-25"); [EOL]     testAdd("1582-W01-1", DurationFieldType.weeks(), 51, "1583-W01-1"); [EOL] }
public void testStaticGetInstanceLowerUpper() { [EOL]     DateTimeComparator c = DateTimeComparator.getInstance(DateTimeFieldType.hourOfDay(), DateTimeFieldType.dayOfYear()); [EOL]     assertEquals(DateTimeFieldType.hourOfDay(), c.getLowerLimit()); [EOL]     assertEquals(DateTimeFieldType.dayOfYear(), c.getUpperLimit()); [EOL]     assertEquals("DateTimeComparator[hourOfDay-dayOfYear]", c.toString()); [EOL]     c = DateTimeComparator.getInstance(DateTimeFieldType.hourOfDay(), DateTimeFieldType.hourOfDay()); [EOL]     assertEquals(DateTimeFieldType.hourOfDay(), c.getLowerLimit()); [EOL]     assertEquals(DateTimeFieldType.hourOfDay(), c.getUpperLimit()); [EOL]     assertEquals("DateTimeComparator[hourOfDay]", c.toString()); [EOL]     c = DateTimeComparator.getInstance(null, null); [EOL]     assertSame(DateTimeComparator.getInstance(), c); [EOL]     c = DateTimeComparator.getInstance(DateTimeFieldType.dayOfYear(), null); [EOL]     assertSame(DateTimeComparator.getDateOnlyInstance(), c); [EOL]     c = DateTimeComparator.getInstance(null, DateTimeFieldType.dayOfYear()); [EOL]     assertSame(DateTimeComparator.getTimeOnlyInstance(), c); [EOL] }
public void testStaticGetInstanceLowerUpper() { [EOL]     DateTimeComparator c = DateTimeComparator.getInstance(DateTimeFieldType.hourOfDay(), DateTimeFieldType.dayOfYear()); [EOL]     assertEquals(DateTimeFieldType.hourOfDay(), c.getLowerLimit()); [EOL]     assertEquals(DateTimeFieldType.dayOfYear(), c.getUpperLimit()); [EOL]     assertEquals("DateTimeComparator[hourOfDay-dayOfYear]", c.toString()); [EOL]     c = DateTimeComparator.getInstance(DateTimeFieldType.hourOfDay(), DateTimeFieldType.hourOfDay()); [EOL]     assertEquals(DateTimeFieldType.hourOfDay(), c.getLowerLimit()); [EOL]     assertEquals(DateTimeFieldType.hourOfDay(), c.getUpperLimit()); [EOL]     assertEquals("DateTimeComparator[hourOfDay]", c.toString()); [EOL]     c = DateTimeComparator.getInstance(null, null); [EOL]     assertSame(DateTimeComparator.getInstance(), c); [EOL]     c = DateTimeComparator.getInstance(DateTimeFieldType.dayOfYear(), null); [EOL]     assertSame(DateTimeComparator.getDateOnlyInstance(), c); [EOL]     c = DateTimeComparator.getInstance(null, DateTimeFieldType.dayOfYear()); [EOL]     assertSame(DateTimeComparator.getTimeOnlyInstance(), c); [EOL] }
public void testStaticGetInstanceLowerUpper() { [EOL]     DateTimeComparator c = DateTimeComparator.getInstance(DateTimeFieldType.hourOfDay(), DateTimeFieldType.dayOfYear()); [EOL]     assertEquals(DateTimeFieldType.hourOfDay(), c.getLowerLimit()); [EOL]     assertEquals(DateTimeFieldType.dayOfYear(), c.getUpperLimit()); [EOL]     assertEquals("DateTimeComparator[hourOfDay-dayOfYear]", c.toString()); [EOL]     c = DateTimeComparator.getInstance(DateTimeFieldType.hourOfDay(), DateTimeFieldType.hourOfDay()); [EOL]     assertEquals(DateTimeFieldType.hourOfDay(), c.getLowerLimit()); [EOL]     assertEquals(DateTimeFieldType.hourOfDay(), c.getUpperLimit()); [EOL]     assertEquals("DateTimeComparator[hourOfDay]", c.toString()); [EOL]     c = DateTimeComparator.getInstance(null, null); [EOL]     assertSame(DateTimeComparator.getInstance(), c); [EOL]     c = DateTimeComparator.getInstance(DateTimeFieldType.dayOfYear(), null); [EOL]     assertSame(DateTimeComparator.getDateOnlyInstance(), c); [EOL]     c = DateTimeComparator.getInstance(null, DateTimeFieldType.dayOfYear()); [EOL]     assertSame(DateTimeComparator.getTimeOnlyInstance(), c); [EOL] }
public void testStaticGetInstanceLowerUpper() { [EOL]     DateTimeComparator c = DateTimeComparator.getInstance(DateTimeFieldType.hourOfDay(), DateTimeFieldType.dayOfYear()); [EOL]     assertEquals(DateTimeFieldType.hourOfDay(), c.getLowerLimit()); [EOL]     assertEquals(DateTimeFieldType.dayOfYear(), c.getUpperLimit()); [EOL]     assertEquals("DateTimeComparator[hourOfDay-dayOfYear]", c.toString()); [EOL]     c = DateTimeComparator.getInstance(DateTimeFieldType.hourOfDay(), DateTimeFieldType.hourOfDay()); [EOL]     assertEquals(DateTimeFieldType.hourOfDay(), c.getLowerLimit()); [EOL]     assertEquals(DateTimeFieldType.hourOfDay(), c.getUpperLimit()); [EOL]     assertEquals("DateTimeComparator[hourOfDay]", c.toString()); [EOL]     c = DateTimeComparator.getInstance(null, null); [EOL]     assertSame(DateTimeComparator.getInstance(), c); [EOL]     c = DateTimeComparator.getInstance(DateTimeFieldType.dayOfYear(), null); [EOL]     assertSame(DateTimeComparator.getDateOnlyInstance(), c); [EOL]     c = DateTimeComparator.getInstance(null, DateTimeFieldType.dayOfYear()); [EOL]     assertSame(DateTimeComparator.getTimeOnlyInstance(), c); [EOL] }
public void testEqualsHashCode() { [EOL]     DateTimeComparator c1 = DateTimeComparator.getInstance(); [EOL]     assertEquals(true, c1.equals(c1)); [EOL]     assertEquals(false, c1.equals(null)); [EOL]     assertEquals(true, c1.hashCode() == c1.hashCode()); [EOL]     DateTimeComparator c2 = DateTimeComparator.getTimeOnlyInstance(); [EOL]     assertEquals(true, c2.equals(c2)); [EOL]     assertEquals(false, c2.equals(c1)); [EOL]     assertEquals(false, c1.equals(c2)); [EOL]     assertEquals(false, c2.equals(null)); [EOL]     assertEquals(false, c1.hashCode() == c2.hashCode()); [EOL]     DateTimeComparator c3 = DateTimeComparator.getTimeOnlyInstance(); [EOL]     assertEquals(true, c3.equals(c3)); [EOL]     assertEquals(false, c3.equals(c1)); [EOL]     assertEquals(true, c3.equals(c2)); [EOL]     assertEquals(false, c1.equals(c3)); [EOL]     assertEquals(true, c2.equals(c3)); [EOL]     assertEquals(false, c1.hashCode() == c3.hashCode()); [EOL]     assertEquals(true, c2.hashCode() == c3.hashCode()); [EOL]     DateTimeComparator c4 = DateTimeComparator.getDateOnlyInstance(); [EOL]     assertEquals(false, c4.hashCode() == c3.hashCode()); [EOL] }
public void testStaticGetInstanceLowerUpper() { [EOL]     DateTimeComparator c = DateTimeComparator.getInstance(DateTimeFieldType.hourOfDay(), DateTimeFieldType.dayOfYear()); [EOL]     assertEquals(DateTimeFieldType.hourOfDay(), c.getLowerLimit()); [EOL]     assertEquals(DateTimeFieldType.dayOfYear(), c.getUpperLimit()); [EOL]     assertEquals("DateTimeComparator[hourOfDay-dayOfYear]", c.toString()); [EOL]     c = DateTimeComparator.getInstance(DateTimeFieldType.hourOfDay(), DateTimeFieldType.hourOfDay()); [EOL]     assertEquals(DateTimeFieldType.hourOfDay(), c.getLowerLimit()); [EOL]     assertEquals(DateTimeFieldType.hourOfDay(), c.getUpperLimit()); [EOL]     assertEquals("DateTimeComparator[hourOfDay]", c.toString()); [EOL]     c = DateTimeComparator.getInstance(null, null); [EOL]     assertSame(DateTimeComparator.getInstance(), c); [EOL]     c = DateTimeComparator.getInstance(DateTimeFieldType.dayOfYear(), null); [EOL]     assertSame(DateTimeComparator.getDateOnlyInstance(), c); [EOL]     c = DateTimeComparator.getInstance(null, DateTimeFieldType.dayOfYear()); [EOL]     assertSame(DateTimeComparator.getTimeOnlyInstance(), c); [EOL] }
public void testStaticGetInstanceLowerUpper() { [EOL]     DateTimeComparator c = DateTimeComparator.getInstance(DateTimeFieldType.hourOfDay(), DateTimeFieldType.dayOfYear()); [EOL]     assertEquals(DateTimeFieldType.hourOfDay(), c.getLowerLimit()); [EOL]     assertEquals(DateTimeFieldType.dayOfYear(), c.getUpperLimit()); [EOL]     assertEquals("DateTimeComparator[hourOfDay-dayOfYear]", c.toString()); [EOL]     c = DateTimeComparator.getInstance(DateTimeFieldType.hourOfDay(), DateTimeFieldType.hourOfDay()); [EOL]     assertEquals(DateTimeFieldType.hourOfDay(), c.getLowerLimit()); [EOL]     assertEquals(DateTimeFieldType.hourOfDay(), c.getUpperLimit()); [EOL]     assertEquals("DateTimeComparator[hourOfDay]", c.toString()); [EOL]     c = DateTimeComparator.getInstance(null, null); [EOL]     assertSame(DateTimeComparator.getInstance(), c); [EOL]     c = DateTimeComparator.getInstance(DateTimeFieldType.dayOfYear(), null); [EOL]     assertSame(DateTimeComparator.getDateOnlyInstance(), c); [EOL]     c = DateTimeComparator.getInstance(null, DateTimeFieldType.dayOfYear()); [EOL]     assertSame(DateTimeComparator.getTimeOnlyInstance(), c); [EOL] }
public void testStaticGetInstanceLowerUpper() { [EOL]     DateTimeComparator c = DateTimeComparator.getInstance(DateTimeFieldType.hourOfDay(), DateTimeFieldType.dayOfYear()); [EOL]     assertEquals(DateTimeFieldType.hourOfDay(), c.getLowerLimit()); [EOL]     assertEquals(DateTimeFieldType.dayOfYear(), c.getUpperLimit()); [EOL]     assertEquals("DateTimeComparator[hourOfDay-dayOfYear]", c.toString()); [EOL]     c = DateTimeComparator.getInstance(DateTimeFieldType.hourOfDay(), DateTimeFieldType.hourOfDay()); [EOL]     assertEquals(DateTimeFieldType.hourOfDay(), c.getLowerLimit()); [EOL]     assertEquals(DateTimeFieldType.hourOfDay(), c.getUpperLimit()); [EOL]     assertEquals("DateTimeComparator[hourOfDay]", c.toString()); [EOL]     c = DateTimeComparator.getInstance(null, null); [EOL]     assertSame(DateTimeComparator.getInstance(), c); [EOL]     c = DateTimeComparator.getInstance(DateTimeFieldType.dayOfYear(), null); [EOL]     assertSame(DateTimeComparator.getDateOnlyInstance(), c); [EOL]     c = DateTimeComparator.getInstance(null, DateTimeFieldType.dayOfYear()); [EOL]     assertSame(DateTimeComparator.getTimeOnlyInstance(), c); [EOL] }
public void testStaticGetInstanceLowerUpper() { [EOL]     DateTimeComparator c = DateTimeComparator.getInstance(DateTimeFieldType.hourOfDay(), DateTimeFieldType.dayOfYear()); [EOL]     assertEquals(DateTimeFieldType.hourOfDay(), c.getLowerLimit()); [EOL]     assertEquals(DateTimeFieldType.dayOfYear(), c.getUpperLimit()); [EOL]     assertEquals("DateTimeComparator[hourOfDay-dayOfYear]", c.toString()); [EOL]     c = DateTimeComparator.getInstance(DateTimeFieldType.hourOfDay(), DateTimeFieldType.hourOfDay()); [EOL]     assertEquals(DateTimeFieldType.hourOfDay(), c.getLowerLimit()); [EOL]     assertEquals(DateTimeFieldType.hourOfDay(), c.getUpperLimit()); [EOL]     assertEquals("DateTimeComparator[hourOfDay]", c.toString()); [EOL]     c = DateTimeComparator.getInstance(null, null); [EOL]     assertSame(DateTimeComparator.getInstance(), c); [EOL]     c = DateTimeComparator.getInstance(DateTimeFieldType.dayOfYear(), null); [EOL]     assertSame(DateTimeComparator.getDateOnlyInstance(), c); [EOL]     c = DateTimeComparator.getInstance(null, DateTimeFieldType.dayOfYear()); [EOL]     assertSame(DateTimeComparator.getTimeOnlyInstance(), c); [EOL] }
public void testEqualsHashCode() { [EOL]     DateTimeComparator c1 = DateTimeComparator.getInstance(); [EOL]     assertEquals(true, c1.equals(c1)); [EOL]     assertEquals(false, c1.equals(null)); [EOL]     assertEquals(true, c1.hashCode() == c1.hashCode()); [EOL]     DateTimeComparator c2 = DateTimeComparator.getTimeOnlyInstance(); [EOL]     assertEquals(true, c2.equals(c2)); [EOL]     assertEquals(false, c2.equals(c1)); [EOL]     assertEquals(false, c1.equals(c2)); [EOL]     assertEquals(false, c2.equals(null)); [EOL]     assertEquals(false, c1.hashCode() == c2.hashCode()); [EOL]     DateTimeComparator c3 = DateTimeComparator.getTimeOnlyInstance(); [EOL]     assertEquals(true, c3.equals(c3)); [EOL]     assertEquals(false, c3.equals(c1)); [EOL]     assertEquals(true, c3.equals(c2)); [EOL]     assertEquals(false, c1.equals(c3)); [EOL]     assertEquals(true, c2.equals(c3)); [EOL]     assertEquals(false, c1.hashCode() == c3.hashCode()); [EOL]     assertEquals(true, c2.hashCode() == c3.hashCode()); [EOL]     DateTimeComparator c4 = DateTimeComparator.getDateOnlyInstance(); [EOL]     assertEquals(false, c4.hashCode() == c3.hashCode()); [EOL] }
public void testEqualsHashCode() { [EOL]     DateTimeComparator c1 = DateTimeComparator.getInstance(); [EOL]     assertEquals(true, c1.equals(c1)); [EOL]     assertEquals(false, c1.equals(null)); [EOL]     assertEquals(true, c1.hashCode() == c1.hashCode()); [EOL]     DateTimeComparator c2 = DateTimeComparator.getTimeOnlyInstance(); [EOL]     assertEquals(true, c2.equals(c2)); [EOL]     assertEquals(false, c2.equals(c1)); [EOL]     assertEquals(false, c1.equals(c2)); [EOL]     assertEquals(false, c2.equals(null)); [EOL]     assertEquals(false, c1.hashCode() == c2.hashCode()); [EOL]     DateTimeComparator c3 = DateTimeComparator.getTimeOnlyInstance(); [EOL]     assertEquals(true, c3.equals(c3)); [EOL]     assertEquals(false, c3.equals(c1)); [EOL]     assertEquals(true, c3.equals(c2)); [EOL]     assertEquals(false, c1.equals(c3)); [EOL]     assertEquals(true, c2.equals(c3)); [EOL]     assertEquals(false, c1.hashCode() == c3.hashCode()); [EOL]     assertEquals(true, c2.hashCode() == c3.hashCode()); [EOL]     DateTimeComparator c4 = DateTimeComparator.getDateOnlyInstance(); [EOL]     assertEquals(false, c4.hashCode() == c3.hashCode()); [EOL] }
public void testEqualsHashCode() { [EOL]     DateTimeComparator c1 = DateTimeComparator.getInstance(); [EOL]     assertEquals(true, c1.equals(c1)); [EOL]     assertEquals(false, c1.equals(null)); [EOL]     assertEquals(true, c1.hashCode() == c1.hashCode()); [EOL]     DateTimeComparator c2 = DateTimeComparator.getTimeOnlyInstance(); [EOL]     assertEquals(true, c2.equals(c2)); [EOL]     assertEquals(false, c2.equals(c1)); [EOL]     assertEquals(false, c1.equals(c2)); [EOL]     assertEquals(false, c2.equals(null)); [EOL]     assertEquals(false, c1.hashCode() == c2.hashCode()); [EOL]     DateTimeComparator c3 = DateTimeComparator.getTimeOnlyInstance(); [EOL]     assertEquals(true, c3.equals(c3)); [EOL]     assertEquals(false, c3.equals(c1)); [EOL]     assertEquals(true, c3.equals(c2)); [EOL]     assertEquals(false, c1.equals(c3)); [EOL]     assertEquals(true, c2.equals(c3)); [EOL]     assertEquals(false, c1.hashCode() == c3.hashCode()); [EOL]     assertEquals(true, c2.hashCode() == c3.hashCode()); [EOL]     DateTimeComparator c4 = DateTimeComparator.getDateOnlyInstance(); [EOL]     assertEquals(false, c4.hashCode() == c3.hashCode()); [EOL] }
public void testEqualsHashCode() { [EOL]     DateTimeComparator c1 = DateTimeComparator.getInstance(); [EOL]     assertEquals(true, c1.equals(c1)); [EOL]     assertEquals(false, c1.equals(null)); [EOL]     assertEquals(true, c1.hashCode() == c1.hashCode()); [EOL]     DateTimeComparator c2 = DateTimeComparator.getTimeOnlyInstance(); [EOL]     assertEquals(true, c2.equals(c2)); [EOL]     assertEquals(false, c2.equals(c1)); [EOL]     assertEquals(false, c1.equals(c2)); [EOL]     assertEquals(false, c2.equals(null)); [EOL]     assertEquals(false, c1.hashCode() == c2.hashCode()); [EOL]     DateTimeComparator c3 = DateTimeComparator.getTimeOnlyInstance(); [EOL]     assertEquals(true, c3.equals(c3)); [EOL]     assertEquals(false, c3.equals(c1)); [EOL]     assertEquals(true, c3.equals(c2)); [EOL]     assertEquals(false, c1.equals(c3)); [EOL]     assertEquals(true, c2.equals(c3)); [EOL]     assertEquals(false, c1.hashCode() == c3.hashCode()); [EOL]     assertEquals(true, c2.hashCode() == c3.hashCode()); [EOL]     DateTimeComparator c4 = DateTimeComparator.getDateOnlyInstance(); [EOL]     assertEquals(false, c4.hashCode() == c3.hashCode()); [EOL] }
public void testEqualsHashCode() { [EOL]     DateTimeComparator c1 = DateTimeComparator.getInstance(); [EOL]     assertEquals(true, c1.equals(c1)); [EOL]     assertEquals(false, c1.equals(null)); [EOL]     assertEquals(true, c1.hashCode() == c1.hashCode()); [EOL]     DateTimeComparator c2 = DateTimeComparator.getTimeOnlyInstance(); [EOL]     assertEquals(true, c2.equals(c2)); [EOL]     assertEquals(false, c2.equals(c1)); [EOL]     assertEquals(false, c1.equals(c2)); [EOL]     assertEquals(false, c2.equals(null)); [EOL]     assertEquals(false, c1.hashCode() == c2.hashCode()); [EOL]     DateTimeComparator c3 = DateTimeComparator.getTimeOnlyInstance(); [EOL]     assertEquals(true, c3.equals(c3)); [EOL]     assertEquals(false, c3.equals(c1)); [EOL]     assertEquals(true, c3.equals(c2)); [EOL]     assertEquals(false, c1.equals(c3)); [EOL]     assertEquals(true, c2.equals(c3)); [EOL]     assertEquals(false, c1.hashCode() == c3.hashCode()); [EOL]     assertEquals(true, c2.hashCode() == c3.hashCode()); [EOL]     DateTimeComparator c4 = DateTimeComparator.getDateOnlyInstance(); [EOL]     assertEquals(false, c4.hashCode() == c3.hashCode()); [EOL] }
public void testEqualsHashCode() { [EOL]     DateTimeComparator c1 = DateTimeComparator.getInstance(); [EOL]     assertEquals(true, c1.equals(c1)); [EOL]     assertEquals(false, c1.equals(null)); [EOL]     assertEquals(true, c1.hashCode() == c1.hashCode()); [EOL]     DateTimeComparator c2 = DateTimeComparator.getTimeOnlyInstance(); [EOL]     assertEquals(true, c2.equals(c2)); [EOL]     assertEquals(false, c2.equals(c1)); [EOL]     assertEquals(false, c1.equals(c2)); [EOL]     assertEquals(false, c2.equals(null)); [EOL]     assertEquals(false, c1.hashCode() == c2.hashCode()); [EOL]     DateTimeComparator c3 = DateTimeComparator.getTimeOnlyInstance(); [EOL]     assertEquals(true, c3.equals(c3)); [EOL]     assertEquals(false, c3.equals(c1)); [EOL]     assertEquals(true, c3.equals(c2)); [EOL]     assertEquals(false, c1.equals(c3)); [EOL]     assertEquals(true, c2.equals(c3)); [EOL]     assertEquals(false, c1.hashCode() == c3.hashCode()); [EOL]     assertEquals(true, c2.hashCode() == c3.hashCode()); [EOL]     DateTimeComparator c4 = DateTimeComparator.getDateOnlyInstance(); [EOL]     assertEquals(false, c4.hashCode() == c3.hashCode()); [EOL] }
public void testEqualsHashCode() { [EOL]     DateTimeComparator c1 = DateTimeComparator.getInstance(); [EOL]     assertEquals(true, c1.equals(c1)); [EOL]     assertEquals(false, c1.equals(null)); [EOL]     assertEquals(true, c1.hashCode() == c1.hashCode()); [EOL]     DateTimeComparator c2 = DateTimeComparator.getTimeOnlyInstance(); [EOL]     assertEquals(true, c2.equals(c2)); [EOL]     assertEquals(false, c2.equals(c1)); [EOL]     assertEquals(false, c1.equals(c2)); [EOL]     assertEquals(false, c2.equals(null)); [EOL]     assertEquals(false, c1.hashCode() == c2.hashCode()); [EOL]     DateTimeComparator c3 = DateTimeComparator.getTimeOnlyInstance(); [EOL]     assertEquals(true, c3.equals(c3)); [EOL]     assertEquals(false, c3.equals(c1)); [EOL]     assertEquals(true, c3.equals(c2)); [EOL]     assertEquals(false, c1.equals(c3)); [EOL]     assertEquals(true, c2.equals(c3)); [EOL]     assertEquals(false, c1.hashCode() == c3.hashCode()); [EOL]     assertEquals(true, c2.hashCode() == c3.hashCode()); [EOL]     DateTimeComparator c4 = DateTimeComparator.getDateOnlyInstance(); [EOL]     assertEquals(false, c4.hashCode() == c3.hashCode()); [EOL] }
public void testFieldTypeIndexMethods() { [EOL]     Single test = new Single(20); [EOL]     assertEquals(1, test.size()); [EOL]     assertEquals(DurationFieldType.days(), test.getFieldType(0)); [EOL]     try { [EOL]         test.getFieldType(1); [EOL]         fail(); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] }
public void testFieldTypeIndexMethods() { [EOL]     Single test = new Single(20); [EOL]     assertEquals(1, test.size()); [EOL]     assertEquals(DurationFieldType.days(), test.getFieldType(0)); [EOL]     try { [EOL]         test.getFieldType(1); [EOL]         fail(); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] }
public void testToString() { [EOL]     DateTimeZone paris = DateTimeZone.forID("Europe/Paris"); [EOL]     ISOChronology isoParis = ISOChronology.getInstance(paris); [EOL]     assertEquals("ISOChronology[Europe/Paris]", isoParis.toString()); [EOL]     assertEquals("GJChronology[Europe/Paris]", GJChronology.getInstance(paris).toString()); [EOL]     assertEquals("GregorianChronology[Europe/Paris]", GregorianChronology.getInstance(paris).toString()); [EOL]     assertEquals("JulianChronology[Europe/Paris]", JulianChronology.getInstance(paris).toString()); [EOL]     assertEquals("BuddhistChronology[Europe/Paris]", BuddhistChronology.getInstance(paris).toString()); [EOL]     assertEquals("CopticChronology[Europe/Paris]", CopticChronology.getInstance(paris).toString()); [EOL]     assertEquals("EthiopicChronology[Europe/Paris]", EthiopicChronology.getInstance(paris).toString()); [EOL]     assertEquals("IslamicChronology[Europe/Paris]", IslamicChronology.getInstance(paris).toString()); [EOL]     assertEquals("LenientChronology[ISOChronology[Europe/Paris]]", LenientChronology.getInstance(isoParis).toString()); [EOL]     assertEquals("StrictChronology[ISOChronology[Europe/Paris]]", StrictChronology.getInstance(isoParis).toString()); [EOL]     assertEquals("LimitChronology[ISOChronology[Europe/Paris], NoLimit, NoLimit]", LimitChronology.getInstance(isoParis, null, null).toString()); [EOL]     assertEquals("ZonedChronology[ISOChronology[UTC], Europe/Paris]", ZonedChronology.getInstance(isoParis, paris).toString()); [EOL] }
public void testToString() { [EOL]     DateTimeZone paris = DateTimeZone.forID("Europe/Paris"); [EOL]     ISOChronology isoParis = ISOChronology.getInstance(paris); [EOL]     assertEquals("ISOChronology[Europe/Paris]", isoParis.toString()); [EOL]     assertEquals("GJChronology[Europe/Paris]", GJChronology.getInstance(paris).toString()); [EOL]     assertEquals("GregorianChronology[Europe/Paris]", GregorianChronology.getInstance(paris).toString()); [EOL]     assertEquals("JulianChronology[Europe/Paris]", JulianChronology.getInstance(paris).toString()); [EOL]     assertEquals("BuddhistChronology[Europe/Paris]", BuddhistChronology.getInstance(paris).toString()); [EOL]     assertEquals("CopticChronology[Europe/Paris]", CopticChronology.getInstance(paris).toString()); [EOL]     assertEquals("EthiopicChronology[Europe/Paris]", EthiopicChronology.getInstance(paris).toString()); [EOL]     assertEquals("IslamicChronology[Europe/Paris]", IslamicChronology.getInstance(paris).toString()); [EOL]     assertEquals("LenientChronology[ISOChronology[Europe/Paris]]", LenientChronology.getInstance(isoParis).toString()); [EOL]     assertEquals("StrictChronology[ISOChronology[Europe/Paris]]", StrictChronology.getInstance(isoParis).toString()); [EOL]     assertEquals("LimitChronology[ISOChronology[Europe/Paris], NoLimit, NoLimit]", LimitChronology.getInstance(isoParis, null, null).toString()); [EOL]     assertEquals("ZonedChronology[ISOChronology[UTC], Europe/Paris]", ZonedChronology.getInstance(isoParis, paris).toString()); [EOL] }
public void testToString() { [EOL]     DateTimeZone paris = DateTimeZone.forID("Europe/Paris"); [EOL]     ISOChronology isoParis = ISOChronology.getInstance(paris); [EOL]     assertEquals("ISOChronology[Europe/Paris]", isoParis.toString()); [EOL]     assertEquals("GJChronology[Europe/Paris]", GJChronology.getInstance(paris).toString()); [EOL]     assertEquals("GregorianChronology[Europe/Paris]", GregorianChronology.getInstance(paris).toString()); [EOL]     assertEquals("JulianChronology[Europe/Paris]", JulianChronology.getInstance(paris).toString()); [EOL]     assertEquals("BuddhistChronology[Europe/Paris]", BuddhistChronology.getInstance(paris).toString()); [EOL]     assertEquals("CopticChronology[Europe/Paris]", CopticChronology.getInstance(paris).toString()); [EOL]     assertEquals("EthiopicChronology[Europe/Paris]", EthiopicChronology.getInstance(paris).toString()); [EOL]     assertEquals("IslamicChronology[Europe/Paris]", IslamicChronology.getInstance(paris).toString()); [EOL]     assertEquals("LenientChronology[ISOChronology[Europe/Paris]]", LenientChronology.getInstance(isoParis).toString()); [EOL]     assertEquals("StrictChronology[ISOChronology[Europe/Paris]]", StrictChronology.getInstance(isoParis).toString()); [EOL]     assertEquals("LimitChronology[ISOChronology[Europe/Paris], NoLimit, NoLimit]", LimitChronology.getInstance(isoParis, null, null).toString()); [EOL]     assertEquals("ZonedChronology[ISOChronology[UTC], Europe/Paris]", ZonedChronology.getInstance(isoParis, paris).toString()); [EOL] }
public void testToString() { [EOL]     DateTimeZone paris = DateTimeZone.forID("Europe/Paris"); [EOL]     ISOChronology isoParis = ISOChronology.getInstance(paris); [EOL]     assertEquals("ISOChronology[Europe/Paris]", isoParis.toString()); [EOL]     assertEquals("GJChronology[Europe/Paris]", GJChronology.getInstance(paris).toString()); [EOL]     assertEquals("GregorianChronology[Europe/Paris]", GregorianChronology.getInstance(paris).toString()); [EOL]     assertEquals("JulianChronology[Europe/Paris]", JulianChronology.getInstance(paris).toString()); [EOL]     assertEquals("BuddhistChronology[Europe/Paris]", BuddhistChronology.getInstance(paris).toString()); [EOL]     assertEquals("CopticChronology[Europe/Paris]", CopticChronology.getInstance(paris).toString()); [EOL]     assertEquals("EthiopicChronology[Europe/Paris]", EthiopicChronology.getInstance(paris).toString()); [EOL]     assertEquals("IslamicChronology[Europe/Paris]", IslamicChronology.getInstance(paris).toString()); [EOL]     assertEquals("LenientChronology[ISOChronology[Europe/Paris]]", LenientChronology.getInstance(isoParis).toString()); [EOL]     assertEquals("StrictChronology[ISOChronology[Europe/Paris]]", StrictChronology.getInstance(isoParis).toString()); [EOL]     assertEquals("LimitChronology[ISOChronology[Europe/Paris], NoLimit, NoLimit]", LimitChronology.getInstance(isoParis, null, null).toString()); [EOL]     assertEquals("ZonedChronology[ISOChronology[UTC], Europe/Paris]", ZonedChronology.getInstance(isoParis, paris).toString()); [EOL] }
public void testToString() { [EOL]     DateTimeZone paris = DateTimeZone.forID("Europe/Paris"); [EOL]     ISOChronology isoParis = ISOChronology.getInstance(paris); [EOL]     assertEquals("ISOChronology[Europe/Paris]", isoParis.toString()); [EOL]     assertEquals("GJChronology[Europe/Paris]", GJChronology.getInstance(paris).toString()); [EOL]     assertEquals("GregorianChronology[Europe/Paris]", GregorianChronology.getInstance(paris).toString()); [EOL]     assertEquals("JulianChronology[Europe/Paris]", JulianChronology.getInstance(paris).toString()); [EOL]     assertEquals("BuddhistChronology[Europe/Paris]", BuddhistChronology.getInstance(paris).toString()); [EOL]     assertEquals("CopticChronology[Europe/Paris]", CopticChronology.getInstance(paris).toString()); [EOL]     assertEquals("EthiopicChronology[Europe/Paris]", EthiopicChronology.getInstance(paris).toString()); [EOL]     assertEquals("IslamicChronology[Europe/Paris]", IslamicChronology.getInstance(paris).toString()); [EOL]     assertEquals("LenientChronology[ISOChronology[Europe/Paris]]", LenientChronology.getInstance(isoParis).toString()); [EOL]     assertEquals("StrictChronology[ISOChronology[Europe/Paris]]", StrictChronology.getInstance(isoParis).toString()); [EOL]     assertEquals("LimitChronology[ISOChronology[Europe/Paris], NoLimit, NoLimit]", LimitChronology.getInstance(isoParis, null, null).toString()); [EOL]     assertEquals("ZonedChronology[ISOChronology[UTC], Europe/Paris]", ZonedChronology.getInstance(isoParis, paris).toString()); [EOL] }
public void testToString() { [EOL]     DateTimeZone paris = DateTimeZone.forID("Europe/Paris"); [EOL]     ISOChronology isoParis = ISOChronology.getInstance(paris); [EOL]     assertEquals("ISOChronology[Europe/Paris]", isoParis.toString()); [EOL]     assertEquals("GJChronology[Europe/Paris]", GJChronology.getInstance(paris).toString()); [EOL]     assertEquals("GregorianChronology[Europe/Paris]", GregorianChronology.getInstance(paris).toString()); [EOL]     assertEquals("JulianChronology[Europe/Paris]", JulianChronology.getInstance(paris).toString()); [EOL]     assertEquals("BuddhistChronology[Europe/Paris]", BuddhistChronology.getInstance(paris).toString()); [EOL]     assertEquals("CopticChronology[Europe/Paris]", CopticChronology.getInstance(paris).toString()); [EOL]     assertEquals("EthiopicChronology[Europe/Paris]", EthiopicChronology.getInstance(paris).toString()); [EOL]     assertEquals("IslamicChronology[Europe/Paris]", IslamicChronology.getInstance(paris).toString()); [EOL]     assertEquals("LenientChronology[ISOChronology[Europe/Paris]]", LenientChronology.getInstance(isoParis).toString()); [EOL]     assertEquals("StrictChronology[ISOChronology[Europe/Paris]]", StrictChronology.getInstance(isoParis).toString()); [EOL]     assertEquals("LimitChronology[ISOChronology[Europe/Paris], NoLimit, NoLimit]", LimitChronology.getInstance(isoParis, null, null).toString()); [EOL]     assertEquals("ZonedChronology[ISOChronology[UTC], Europe/Paris]", ZonedChronology.getInstance(isoParis, paris).toString()); [EOL] }
public void testToString() { [EOL]     DateTimeZone paris = DateTimeZone.forID("Europe/Paris"); [EOL]     ISOChronology isoParis = ISOChronology.getInstance(paris); [EOL]     assertEquals("ISOChronology[Europe/Paris]", isoParis.toString()); [EOL]     assertEquals("GJChronology[Europe/Paris]", GJChronology.getInstance(paris).toString()); [EOL]     assertEquals("GregorianChronology[Europe/Paris]", GregorianChronology.getInstance(paris).toString()); [EOL]     assertEquals("JulianChronology[Europe/Paris]", JulianChronology.getInstance(paris).toString()); [EOL]     assertEquals("BuddhistChronology[Europe/Paris]", BuddhistChronology.getInstance(paris).toString()); [EOL]     assertEquals("CopticChronology[Europe/Paris]", CopticChronology.getInstance(paris).toString()); [EOL]     assertEquals("EthiopicChronology[Europe/Paris]", EthiopicChronology.getInstance(paris).toString()); [EOL]     assertEquals("IslamicChronology[Europe/Paris]", IslamicChronology.getInstance(paris).toString()); [EOL]     assertEquals("LenientChronology[ISOChronology[Europe/Paris]]", LenientChronology.getInstance(isoParis).toString()); [EOL]     assertEquals("StrictChronology[ISOChronology[Europe/Paris]]", StrictChronology.getInstance(isoParis).toString()); [EOL]     assertEquals("LimitChronology[ISOChronology[Europe/Paris], NoLimit, NoLimit]", LimitChronology.getInstance(isoParis, null, null).toString()); [EOL]     assertEquals("ZonedChronology[ISOChronology[UTC], Europe/Paris]", ZonedChronology.getInstance(isoParis, paris).toString()); [EOL] }
public void testConstructor_long_long_Chronology1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance()); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, CopticChronology.getInstance()); [EOL]     MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), CopticChronology.getInstance()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testConstructor_long_long_Chronology1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance()); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, CopticChronology.getInstance()); [EOL]     MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), CopticChronology.getInstance()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testPlus_int() { [EOL]     Seconds test2 = Seconds.seconds(2); [EOL]     Seconds result = test2.plus(3); [EOL]     assertEquals(2, test2.getSeconds()); [EOL]     assertEquals(5, result.getSeconds()); [EOL]     assertEquals(1, Seconds.ONE.plus(0).getSeconds()); [EOL]     try { [EOL]         Seconds.MAX_VALUE.plus(1); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testAddToLocalDate() { [EOL]     Seconds test = Seconds.seconds(26); [EOL]     LocalDateTime date = new LocalDateTime(2006, 6, 1, 0, 0, 0, 0); [EOL]     LocalDateTime expected = new LocalDateTime(2006, 6, 1, 0, 0, 26, 0); [EOL]     assertEquals(expected, date.plus(test)); [EOL] }
public void testToStandardWeeks() { [EOL]     Seconds test = Seconds.seconds(60 * 60 * 24 * 7 * 2); [EOL]     Weeks expected = Weeks.weeks(2); [EOL]     assertEquals(expected, test.toStandardWeeks()); [EOL] }
public void testToStandardWeeks() { [EOL]     Seconds test = Seconds.seconds(60 * 60 * 24 * 7 * 2); [EOL]     Weeks expected = Weeks.weeks(2); [EOL]     assertEquals(expected, test.toStandardWeeks()); [EOL] }
public void testToStandardWeeks() { [EOL]     Seconds test = Seconds.seconds(60 * 60 * 24 * 7 * 2); [EOL]     Weeks expected = Weeks.weeks(2); [EOL]     assertEquals(expected, test.toStandardWeeks()); [EOL] }
public void testToStandardWeeks() { [EOL]     Seconds test = Seconds.seconds(60 * 60 * 24 * 7 * 2); [EOL]     Weeks expected = Weeks.weeks(2); [EOL]     assertEquals(expected, test.toStandardWeeks()); [EOL] }
public void testPlus_int() { [EOL]     Seconds test2 = Seconds.seconds(2); [EOL]     Seconds result = test2.plus(3); [EOL]     assertEquals(2, test2.getSeconds()); [EOL]     assertEquals(5, result.getSeconds()); [EOL]     assertEquals(1, Seconds.ONE.plus(0).getSeconds()); [EOL]     try { [EOL]         Seconds.MAX_VALUE.plus(1); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testPlus_int() { [EOL]     Seconds test2 = Seconds.seconds(2); [EOL]     Seconds result = test2.plus(3); [EOL]     assertEquals(2, test2.getSeconds()); [EOL]     assertEquals(5, result.getSeconds()); [EOL]     assertEquals(1, Seconds.ONE.plus(0).getSeconds()); [EOL]     try { [EOL]         Seconds.MAX_VALUE.plus(1); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMinus_Seconds() { [EOL]     Seconds test2 = Seconds.seconds(2); [EOL]     Seconds test3 = Seconds.seconds(3); [EOL]     Seconds result = test2.minus(test3); [EOL]     assertEquals(2, test2.getSeconds()); [EOL]     assertEquals(3, test3.getSeconds()); [EOL]     assertEquals(-1, result.getSeconds()); [EOL]     assertEquals(1, Seconds.ONE.minus(Seconds.ZERO).getSeconds()); [EOL]     assertEquals(1, Seconds.ONE.minus((Seconds) null).getSeconds()); [EOL]     try { [EOL]         Seconds.MIN_VALUE.minus(Seconds.ONE); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMinus_Seconds() { [EOL]     Seconds test2 = Seconds.seconds(2); [EOL]     Seconds test3 = Seconds.seconds(3); [EOL]     Seconds result = test2.minus(test3); [EOL]     assertEquals(2, test2.getSeconds()); [EOL]     assertEquals(3, test3.getSeconds()); [EOL]     assertEquals(-1, result.getSeconds()); [EOL]     assertEquals(1, Seconds.ONE.minus(Seconds.ZERO).getSeconds()); [EOL]     assertEquals(1, Seconds.ONE.minus((Seconds) null).getSeconds()); [EOL]     try { [EOL]         Seconds.MIN_VALUE.minus(Seconds.ONE); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testIsLessThan() { [EOL]     assertEquals(false, Seconds.THREE.isLessThan(Seconds.TWO)); [EOL]     assertEquals(false, Seconds.THREE.isLessThan(Seconds.THREE)); [EOL]     assertEquals(true, Seconds.TWO.isLessThan(Seconds.THREE)); [EOL]     assertEquals(false, Seconds.ONE.isLessThan(null)); [EOL]     assertEquals(true, Seconds.seconds(-1).isLessThan(null)); [EOL] }
public void testIsLessThan() { [EOL]     assertEquals(false, Seconds.THREE.isLessThan(Seconds.TWO)); [EOL]     assertEquals(false, Seconds.THREE.isLessThan(Seconds.THREE)); [EOL]     assertEquals(true, Seconds.TWO.isLessThan(Seconds.THREE)); [EOL]     assertEquals(false, Seconds.ONE.isLessThan(null)); [EOL]     assertEquals(true, Seconds.seconds(-1).isLessThan(null)); [EOL] }
public void testIsLessThan() { [EOL]     assertEquals(false, Seconds.THREE.isLessThan(Seconds.TWO)); [EOL]     assertEquals(false, Seconds.THREE.isLessThan(Seconds.THREE)); [EOL]     assertEquals(true, Seconds.TWO.isLessThan(Seconds.THREE)); [EOL]     assertEquals(false, Seconds.ONE.isLessThan(null)); [EOL]     assertEquals(true, Seconds.seconds(-1).isLessThan(null)); [EOL] }
public void testIsLessThan() { [EOL]     assertEquals(false, Seconds.THREE.isLessThan(Seconds.TWO)); [EOL]     assertEquals(false, Seconds.THREE.isLessThan(Seconds.THREE)); [EOL]     assertEquals(true, Seconds.TWO.isLessThan(Seconds.THREE)); [EOL]     assertEquals(false, Seconds.ONE.isLessThan(null)); [EOL]     assertEquals(true, Seconds.seconds(-1).isLessThan(null)); [EOL] }
public void testIsLessThan() { [EOL]     assertEquals(false, Seconds.THREE.isLessThan(Seconds.TWO)); [EOL]     assertEquals(false, Seconds.THREE.isLessThan(Seconds.THREE)); [EOL]     assertEquals(true, Seconds.TWO.isLessThan(Seconds.THREE)); [EOL]     assertEquals(false, Seconds.ONE.isLessThan(null)); [EOL]     assertEquals(true, Seconds.seconds(-1).isLessThan(null)); [EOL] }
public void testGetChronology_Object_nullChronology() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Paris")); [EOL]     assertEquals(GJChronology.getInstance(PARIS), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(0L)); [EOL]     assertEquals(GJChronology.getInstance(MOSCOW, 0L, 4), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MAX_VALUE)); [EOL]     assertEquals(JulianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MIN_VALUE)); [EOL]     assertEquals(GregorianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(new MockUnknownTimeZone()); [EOL]     assertEquals(GJChronology.getInstance(), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     Calendar uc = new MockUnknownCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     assertEquals(ISOChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(uc, (Chronology) null)); [EOL]     try { [EOL]         Calendar bc = (Calendar) Class.forName("sun.util.BuddhistCalendar").newInstance(); [EOL]         bc.setTimeZone(TimeZone.getTimeZone("Europe/Moscow")); [EOL]         assertEquals(BuddhistChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(bc, (Chronology) null)); [EOL]     } catch (ClassNotFoundException ex) { [EOL]     } [EOL] }
public void testGetChronology_Object_nullChronology() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Paris")); [EOL]     assertEquals(GJChronology.getInstance(PARIS), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(0L)); [EOL]     assertEquals(GJChronology.getInstance(MOSCOW, 0L, 4), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MAX_VALUE)); [EOL]     assertEquals(JulianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MIN_VALUE)); [EOL]     assertEquals(GregorianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(new MockUnknownTimeZone()); [EOL]     assertEquals(GJChronology.getInstance(), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     Calendar uc = new MockUnknownCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     assertEquals(ISOChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(uc, (Chronology) null)); [EOL]     try { [EOL]         Calendar bc = (Calendar) Class.forName("sun.util.BuddhistCalendar").newInstance(); [EOL]         bc.setTimeZone(TimeZone.getTimeZone("Europe/Moscow")); [EOL]         assertEquals(BuddhistChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(bc, (Chronology) null)); [EOL]     } catch (ClassNotFoundException ex) { [EOL]     } [EOL] }
public void testGetChronology_Object_nullChronology() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Paris")); [EOL]     assertEquals(GJChronology.getInstance(PARIS), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(0L)); [EOL]     assertEquals(GJChronology.getInstance(MOSCOW, 0L, 4), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MAX_VALUE)); [EOL]     assertEquals(JulianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MIN_VALUE)); [EOL]     assertEquals(GregorianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(new MockUnknownTimeZone()); [EOL]     assertEquals(GJChronology.getInstance(), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     Calendar uc = new MockUnknownCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     assertEquals(ISOChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(uc, (Chronology) null)); [EOL]     try { [EOL]         Calendar bc = (Calendar) Class.forName("sun.util.BuddhistCalendar").newInstance(); [EOL]         bc.setTimeZone(TimeZone.getTimeZone("Europe/Moscow")); [EOL]         assertEquals(BuddhistChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(bc, (Chronology) null)); [EOL]     } catch (ClassNotFoundException ex) { [EOL]     } [EOL] }
public void testGetChronology_Object_nullChronology() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Paris")); [EOL]     assertEquals(GJChronology.getInstance(PARIS), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(0L)); [EOL]     assertEquals(GJChronology.getInstance(MOSCOW, 0L, 4), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MAX_VALUE)); [EOL]     assertEquals(JulianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MIN_VALUE)); [EOL]     assertEquals(GregorianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(new MockUnknownTimeZone()); [EOL]     assertEquals(GJChronology.getInstance(), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     Calendar uc = new MockUnknownCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     assertEquals(ISOChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(uc, (Chronology) null)); [EOL]     try { [EOL]         Calendar bc = (Calendar) Class.forName("sun.util.BuddhistCalendar").newInstance(); [EOL]         bc.setTimeZone(TimeZone.getTimeZone("Europe/Moscow")); [EOL]         assertEquals(BuddhistChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(bc, (Chronology) null)); [EOL]     } catch (ClassNotFoundException ex) { [EOL]     } [EOL] }
public void testGetChronology_Object_nullChronology() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Paris")); [EOL]     assertEquals(GJChronology.getInstance(PARIS), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(0L)); [EOL]     assertEquals(GJChronology.getInstance(MOSCOW, 0L, 4), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MAX_VALUE)); [EOL]     assertEquals(JulianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MIN_VALUE)); [EOL]     assertEquals(GregorianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(new MockUnknownTimeZone()); [EOL]     assertEquals(GJChronology.getInstance(), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     Calendar uc = new MockUnknownCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     assertEquals(ISOChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(uc, (Chronology) null)); [EOL]     try { [EOL]         Calendar bc = (Calendar) Class.forName("sun.util.BuddhistCalendar").newInstance(); [EOL]         bc.setTimeZone(TimeZone.getTimeZone("Europe/Moscow")); [EOL]         assertEquals(BuddhistChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(bc, (Chronology) null)); [EOL]     } catch (ClassNotFoundException ex) { [EOL]     } [EOL] }
public void testGetChronology_Object_nullChronology() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Paris")); [EOL]     assertEquals(GJChronology.getInstance(PARIS), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(0L)); [EOL]     assertEquals(GJChronology.getInstance(MOSCOW, 0L, 4), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MAX_VALUE)); [EOL]     assertEquals(JulianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MIN_VALUE)); [EOL]     assertEquals(GregorianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(new MockUnknownTimeZone()); [EOL]     assertEquals(GJChronology.getInstance(), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     Calendar uc = new MockUnknownCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     assertEquals(ISOChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(uc, (Chronology) null)); [EOL]     try { [EOL]         Calendar bc = (Calendar) Class.forName("sun.util.BuddhistCalendar").newInstance(); [EOL]         bc.setTimeZone(TimeZone.getTimeZone("Europe/Moscow")); [EOL]         assertEquals(BuddhistChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(bc, (Chronology) null)); [EOL]     } catch (ClassNotFoundException ex) { [EOL]     } [EOL] }
public void testGetChronology_Object_nullChronology() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Paris")); [EOL]     assertEquals(GJChronology.getInstance(PARIS), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(0L)); [EOL]     assertEquals(GJChronology.getInstance(MOSCOW, 0L, 4), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MAX_VALUE)); [EOL]     assertEquals(JulianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MIN_VALUE)); [EOL]     assertEquals(GregorianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(new MockUnknownTimeZone()); [EOL]     assertEquals(GJChronology.getInstance(), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     Calendar uc = new MockUnknownCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     assertEquals(ISOChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(uc, (Chronology) null)); [EOL]     try { [EOL]         Calendar bc = (Calendar) Class.forName("sun.util.BuddhistCalendar").newInstance(); [EOL]         bc.setTimeZone(TimeZone.getTimeZone("Europe/Moscow")); [EOL]         assertEquals(BuddhistChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(bc, (Chronology) null)); [EOL]     } catch (ClassNotFoundException ex) { [EOL]     } [EOL] }
public void testGetChronology_Object_nullChronology() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Paris")); [EOL]     assertEquals(GJChronology.getInstance(PARIS), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(0L)); [EOL]     assertEquals(GJChronology.getInstance(MOSCOW, 0L, 4), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MAX_VALUE)); [EOL]     assertEquals(JulianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MIN_VALUE)); [EOL]     assertEquals(GregorianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(new MockUnknownTimeZone()); [EOL]     assertEquals(GJChronology.getInstance(), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     Calendar uc = new MockUnknownCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     assertEquals(ISOChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(uc, (Chronology) null)); [EOL]     try { [EOL]         Calendar bc = (Calendar) Class.forName("sun.util.BuddhistCalendar").newInstance(); [EOL]         bc.setTimeZone(TimeZone.getTimeZone("Europe/Moscow")); [EOL]         assertEquals(BuddhistChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(bc, (Chronology) null)); [EOL]     } catch (ClassNotFoundException ex) { [EOL]     } [EOL] }
public void testGetChronology_Object_nullChronology() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Paris")); [EOL]     assertEquals(GJChronology.getInstance(PARIS), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(0L)); [EOL]     assertEquals(GJChronology.getInstance(MOSCOW, 0L, 4), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MAX_VALUE)); [EOL]     assertEquals(JulianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MIN_VALUE)); [EOL]     assertEquals(GregorianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(new MockUnknownTimeZone()); [EOL]     assertEquals(GJChronology.getInstance(), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     Calendar uc = new MockUnknownCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     assertEquals(ISOChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(uc, (Chronology) null)); [EOL]     try { [EOL]         Calendar bc = (Calendar) Class.forName("sun.util.BuddhistCalendar").newInstance(); [EOL]         bc.setTimeZone(TimeZone.getTimeZone("Europe/Moscow")); [EOL]         assertEquals(BuddhistChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(bc, (Chronology) null)); [EOL]     } catch (ClassNotFoundException ex) { [EOL]     } [EOL] }
public void testGetChronology_Object_nullChronology() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Paris")); [EOL]     assertEquals(GJChronology.getInstance(PARIS), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(0L)); [EOL]     assertEquals(GJChronology.getInstance(MOSCOW, 0L, 4), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MAX_VALUE)); [EOL]     assertEquals(JulianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MIN_VALUE)); [EOL]     assertEquals(GregorianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(new MockUnknownTimeZone()); [EOL]     assertEquals(GJChronology.getInstance(), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     Calendar uc = new MockUnknownCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     assertEquals(ISOChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(uc, (Chronology) null)); [EOL]     try { [EOL]         Calendar bc = (Calendar) Class.forName("sun.util.BuddhistCalendar").newInstance(); [EOL]         bc.setTimeZone(TimeZone.getTimeZone("Europe/Moscow")); [EOL]         assertEquals(BuddhistChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(bc, (Chronology) null)); [EOL]     } catch (ClassNotFoundException ex) { [EOL]     } [EOL] }
public void testPlusMinutes_int() { [EOL]     LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON); [EOL]     LocalTime result = test.plusMinutes(1); [EOL]     LocalTime expected = new LocalTime(1, 3, 3, 4, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusMinutes(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusMinutes_int() { [EOL]     LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON); [EOL]     LocalTime result = test.plusMinutes(1); [EOL]     LocalTime expected = new LocalTime(1, 3, 3, 4, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusMinutes(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusMinutes_int() { [EOL]     LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON); [EOL]     LocalTime result = test.plusMinutes(1); [EOL]     LocalTime expected = new LocalTime(1, 3, 3, 4, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusMinutes(0); [EOL]     assertSame(test, result); [EOL] }
public void testEra() { [EOL]     assertEquals(1, CopticChronology.AM); [EOL]     try { [EOL]         new DateTime(-1, 13, 5, 0, 0, 0, 0, COPTIC_UTC); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testEra() { [EOL]     assertEquals(1, CopticChronology.AM); [EOL]     try { [EOL]         new DateTime(-1, 13, 5, 0, 0, 0, 0, COPTIC_UTC); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testEra() { [EOL]     assertEquals(1, CopticChronology.AM); [EOL]     try { [EOL]         new DateTime(-1, 13, 5, 0, 0, 0, 0, COPTIC_UTC); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testToString() { [EOL]     DateTimeZone paris = DateTimeZone.forID("Europe/Paris"); [EOL]     ISOChronology isoParis = ISOChronology.getInstance(paris); [EOL]     assertEquals("ISOChronology[Europe/Paris]", isoParis.toString()); [EOL]     assertEquals("GJChronology[Europe/Paris]", GJChronology.getInstance(paris).toString()); [EOL]     assertEquals("GregorianChronology[Europe/Paris]", GregorianChronology.getInstance(paris).toString()); [EOL]     assertEquals("JulianChronology[Europe/Paris]", JulianChronology.getInstance(paris).toString()); [EOL]     assertEquals("BuddhistChronology[Europe/Paris]", BuddhistChronology.getInstance(paris).toString()); [EOL]     assertEquals("CopticChronology[Europe/Paris]", CopticChronology.getInstance(paris).toString()); [EOL]     assertEquals("EthiopicChronology[Europe/Paris]", EthiopicChronology.getInstance(paris).toString()); [EOL]     assertEquals("IslamicChronology[Europe/Paris]", IslamicChronology.getInstance(paris).toString()); [EOL]     assertEquals("LenientChronology[ISOChronology[Europe/Paris]]", LenientChronology.getInstance(isoParis).toString()); [EOL]     assertEquals("StrictChronology[ISOChronology[Europe/Paris]]", StrictChronology.getInstance(isoParis).toString()); [EOL]     assertEquals("LimitChronology[ISOChronology[Europe/Paris], NoLimit, NoLimit]", LimitChronology.getInstance(isoParis, null, null).toString()); [EOL]     assertEquals("ZonedChronology[ISOChronology[UTC], Europe/Paris]", ZonedChronology.getInstance(isoParis, paris).toString()); [EOL] }
public void testToString() { [EOL]     DateTimeZone paris = DateTimeZone.forID("Europe/Paris"); [EOL]     ISOChronology isoParis = ISOChronology.getInstance(paris); [EOL]     assertEquals("ISOChronology[Europe/Paris]", isoParis.toString()); [EOL]     assertEquals("GJChronology[Europe/Paris]", GJChronology.getInstance(paris).toString()); [EOL]     assertEquals("GregorianChronology[Europe/Paris]", GregorianChronology.getInstance(paris).toString()); [EOL]     assertEquals("JulianChronology[Europe/Paris]", JulianChronology.getInstance(paris).toString()); [EOL]     assertEquals("BuddhistChronology[Europe/Paris]", BuddhistChronology.getInstance(paris).toString()); [EOL]     assertEquals("CopticChronology[Europe/Paris]", CopticChronology.getInstance(paris).toString()); [EOL]     assertEquals("EthiopicChronology[Europe/Paris]", EthiopicChronology.getInstance(paris).toString()); [EOL]     assertEquals("IslamicChronology[Europe/Paris]", IslamicChronology.getInstance(paris).toString()); [EOL]     assertEquals("LenientChronology[ISOChronology[Europe/Paris]]", LenientChronology.getInstance(isoParis).toString()); [EOL]     assertEquals("StrictChronology[ISOChronology[Europe/Paris]]", StrictChronology.getInstance(isoParis).toString()); [EOL]     assertEquals("LimitChronology[ISOChronology[Europe/Paris], NoLimit, NoLimit]", LimitChronology.getInstance(isoParis, null, null).toString()); [EOL]     assertEquals("ZonedChronology[ISOChronology[UTC], Europe/Paris]", ZonedChronology.getInstance(isoParis, paris).toString()); [EOL] }
public void testToString() { [EOL]     DateTimeZone paris = DateTimeZone.forID("Europe/Paris"); [EOL]     ISOChronology isoParis = ISOChronology.getInstance(paris); [EOL]     assertEquals("ISOChronology[Europe/Paris]", isoParis.toString()); [EOL]     assertEquals("GJChronology[Europe/Paris]", GJChronology.getInstance(paris).toString()); [EOL]     assertEquals("GregorianChronology[Europe/Paris]", GregorianChronology.getInstance(paris).toString()); [EOL]     assertEquals("JulianChronology[Europe/Paris]", JulianChronology.getInstance(paris).toString()); [EOL]     assertEquals("BuddhistChronology[Europe/Paris]", BuddhistChronology.getInstance(paris).toString()); [EOL]     assertEquals("CopticChronology[Europe/Paris]", CopticChronology.getInstance(paris).toString()); [EOL]     assertEquals("EthiopicChronology[Europe/Paris]", EthiopicChronology.getInstance(paris).toString()); [EOL]     assertEquals("IslamicChronology[Europe/Paris]", IslamicChronology.getInstance(paris).toString()); [EOL]     assertEquals("LenientChronology[ISOChronology[Europe/Paris]]", LenientChronology.getInstance(isoParis).toString()); [EOL]     assertEquals("StrictChronology[ISOChronology[Europe/Paris]]", StrictChronology.getInstance(isoParis).toString()); [EOL]     assertEquals("LimitChronology[ISOChronology[Europe/Paris], NoLimit, NoLimit]", LimitChronology.getInstance(isoParis, null, null).toString()); [EOL]     assertEquals("ZonedChronology[ISOChronology[UTC], Europe/Paris]", ZonedChronology.getInstance(isoParis, paris).toString()); [EOL] }
public void testToString() { [EOL]     DateTimeZone paris = DateTimeZone.forID("Europe/Paris"); [EOL]     ISOChronology isoParis = ISOChronology.getInstance(paris); [EOL]     assertEquals("ISOChronology[Europe/Paris]", isoParis.toString()); [EOL]     assertEquals("GJChronology[Europe/Paris]", GJChronology.getInstance(paris).toString()); [EOL]     assertEquals("GregorianChronology[Europe/Paris]", GregorianChronology.getInstance(paris).toString()); [EOL]     assertEquals("JulianChronology[Europe/Paris]", JulianChronology.getInstance(paris).toString()); [EOL]     assertEquals("BuddhistChronology[Europe/Paris]", BuddhistChronology.getInstance(paris).toString()); [EOL]     assertEquals("CopticChronology[Europe/Paris]", CopticChronology.getInstance(paris).toString()); [EOL]     assertEquals("EthiopicChronology[Europe/Paris]", EthiopicChronology.getInstance(paris).toString()); [EOL]     assertEquals("IslamicChronology[Europe/Paris]", IslamicChronology.getInstance(paris).toString()); [EOL]     assertEquals("LenientChronology[ISOChronology[Europe/Paris]]", LenientChronology.getInstance(isoParis).toString()); [EOL]     assertEquals("StrictChronology[ISOChronology[Europe/Paris]]", StrictChronology.getInstance(isoParis).toString()); [EOL]     assertEquals("LimitChronology[ISOChronology[Europe/Paris], NoLimit, NoLimit]", LimitChronology.getInstance(isoParis, null, null).toString()); [EOL]     assertEquals("ZonedChronology[ISOChronology[UTC], Europe/Paris]", ZonedChronology.getInstance(isoParis, paris).toString()); [EOL] }
public void testEra() { [EOL]     assertEquals(1, CopticChronology.AM); [EOL]     try { [EOL]         new DateTime(-1, 13, 5, 0, 0, 0, 0, COPTIC_UTC); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testEra() { [EOL]     assertEquals(1, CopticChronology.AM); [EOL]     try { [EOL]         new DateTime(-1, 13, 5, 0, 0, 0, 0, COPTIC_UTC); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonth() { [EOL]     YearMonth test1 = new YearMonth(TEST_TIME1); [EOL]     YearMonth test2 = new YearMonth(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonth() { [EOL]     YearMonth test1 = new YearMonth(TEST_TIME1); [EOL]     YearMonth test2 = new YearMonth(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void test_lenientChrononolgy_Chicago() { [EOL]     DateTimeZone zone = DateTimeZone.forID("America/Chicago"); [EOL]     Chronology lenient = LenientChronology.getInstance(ISOChronology.getInstance(zone)); [EOL]     DateTime dt = new DateTime(2007, 3, 11, 2, 30, 0, 0, lenient); [EOL]     assertEquals("2007-03-11T03:30:00.000-05:00", dt.toString()); [EOL] }
public void test_lenientChrononolgy_Chicago() { [EOL]     DateTimeZone zone = DateTimeZone.forID("America/Chicago"); [EOL]     Chronology lenient = LenientChronology.getInstance(ISOChronology.getInstance(zone)); [EOL]     DateTime dt = new DateTime(2007, 3, 11, 2, 30, 0, 0, lenient); [EOL]     assertEquals("2007-03-11T03:30:00.000-05:00", dt.toString()); [EOL] }
public void testToString() { [EOL]     DateTimeZone paris = DateTimeZone.forID("Europe/Paris"); [EOL]     ISOChronology isoParis = ISOChronology.getInstance(paris); [EOL]     assertEquals("ISOChronology[Europe/Paris]", isoParis.toString()); [EOL]     assertEquals("GJChronology[Europe/Paris]", GJChronology.getInstance(paris).toString()); [EOL]     assertEquals("GregorianChronology[Europe/Paris]", GregorianChronology.getInstance(paris).toString()); [EOL]     assertEquals("JulianChronology[Europe/Paris]", JulianChronology.getInstance(paris).toString()); [EOL]     assertEquals("BuddhistChronology[Europe/Paris]", BuddhistChronology.getInstance(paris).toString()); [EOL]     assertEquals("CopticChronology[Europe/Paris]", CopticChronology.getInstance(paris).toString()); [EOL]     assertEquals("EthiopicChronology[Europe/Paris]", EthiopicChronology.getInstance(paris).toString()); [EOL]     assertEquals("IslamicChronology[Europe/Paris]", IslamicChronology.getInstance(paris).toString()); [EOL]     assertEquals("LenientChronology[ISOChronology[Europe/Paris]]", LenientChronology.getInstance(isoParis).toString()); [EOL]     assertEquals("StrictChronology[ISOChronology[Europe/Paris]]", StrictChronology.getInstance(isoParis).toString()); [EOL]     assertEquals("LimitChronology[ISOChronology[Europe/Paris], NoLimit, NoLimit]", LimitChronology.getInstance(isoParis, null, null).toString()); [EOL]     assertEquals("ZonedChronology[ISOChronology[UTC], Europe/Paris]", ZonedChronology.getInstance(isoParis, paris).toString()); [EOL] }
public void testBug2182444_usCentral() { [EOL]     Chronology chronUSCentral = GregorianChronology.getInstance(DateTimeZone.forID("US/Central")); [EOL]     Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC); [EOL]     DateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0, 0, chronUTC); [EOL]     DateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0, 0, chronUTC); [EOL]     assertTrue("Should be standard time", chronUSCentral.getZone().isStandardOffset(usCentralStandardInUTC.getMillis())); [EOL]     assertFalse("Should be daylight time", chronUSCentral.getZone().isStandardOffset(usCentralDaylightInUTC.getMillis())); [EOL]     DateTime usCentralStandardInUSCentral = usCentralStandardInUTC.toDateTime(chronUSCentral); [EOL]     DateTime usCentralDaylightInUSCentral = usCentralDaylightInUTC.toDateTime(chronUSCentral); [EOL]     assertEquals(1, usCentralStandardInUSCentral.getHourOfDay()); [EOL]     assertEquals(usCentralStandardInUSCentral.getHourOfDay(), usCentralDaylightInUSCentral.getHourOfDay()); [EOL]     assertTrue(usCentralStandardInUSCentral.getMillis() != usCentralDaylightInUSCentral.getMillis()); [EOL]     assertEquals(usCentralStandardInUSCentral, usCentralStandardInUSCentral.withHourOfDay(1)); [EOL]     assertEquals(usCentralStandardInUSCentral.getMillis() + 3, usCentralStandardInUSCentral.withMillisOfSecond(3).getMillis()); [EOL]     assertEquals(usCentralDaylightInUSCentral, usCentralDaylightInUSCentral.withHourOfDay(1)); [EOL]     assertEquals(usCentralDaylightInUSCentral.getMillis() + 3, usCentralDaylightInUSCentral.withMillisOfSecond(3).getMillis()); [EOL] }
public void testConstructor_long_PeriodType_Chronology4() throws Throwable { [EOL]     long length = 4 * DateTimeConstants.MILLIS_PER_DAY + 5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE + 7 * DateTimeConstants.MILLIS_PER_SECOND + 8; [EOL]     Period test = new Period(length, (PeriodType) null, (Chronology) null); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals((4 * 24) + 5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] }
public void testDurationYear() { [EOL]     DateTime dt20 = new DateTime(1720, 10, 2, 0, 0, 0, 0, COPTIC_UTC); [EOL]     DateTime dt21 = new DateTime(1721, 10, 2, 0, 0, 0, 0, COPTIC_UTC); [EOL]     DateTime dt22 = new DateTime(1722, 10, 2, 0, 0, 0, 0, COPTIC_UTC); [EOL]     DateTime dt23 = new DateTime(1723, 10, 2, 0, 0, 0, 0, COPTIC_UTC); [EOL]     DateTime dt24 = new DateTime(1724, 10, 2, 0, 0, 0, 0, COPTIC_UTC); [EOL]     DurationField fld = dt20.year().getDurationField(); [EOL]     assertEquals(COPTIC_UTC.years(), fld); [EOL]     assertEquals(1L * 365L * MILLIS_PER_DAY, fld.getMillis(1, dt20.getMillis())); [EOL]     assertEquals(2L * 365L * MILLIS_PER_DAY, fld.getMillis(2, dt20.getMillis())); [EOL]     assertEquals(3L * 365L * MILLIS_PER_DAY, fld.getMillis(3, dt20.getMillis())); [EOL]     assertEquals((4L * 365L + 1L) * MILLIS_PER_DAY, fld.getMillis(4, dt20.getMillis())); [EOL]     assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 4, fld.getMillis(1)); [EOL]     assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 2, fld.getMillis(2)); [EOL]     assertEquals(1L * 365L * MILLIS_PER_DAY, fld.getMillis(1L, dt20.getMillis())); [EOL]     assertEquals(2L * 365L * MILLIS_PER_DAY, fld.getMillis(2L, dt20.getMillis())); [EOL]     assertEquals(3L * 365L * MILLIS_PER_DAY, fld.getMillis(3L, dt20.getMillis())); [EOL]     assertEquals((4L * 365L + 1L) * MILLIS_PER_DAY, fld.getMillis(4L, dt20.getMillis())); [EOL]     assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 4, fld.getMillis(1L)); [EOL]     assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 2, fld.getMillis(2L)); [EOL]     assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 4, fld.getUnitMillis()); [EOL]     assertEquals(0, fld.getValue(1L * 365L * MILLIS_PER_DAY - 1L, dt20.getMillis())); [EOL]     assertEquals(1, fld.getValue(1L * 365L * MILLIS_PER_DAY, dt20.getMillis())); [EOL]     assertEquals(1, fld.getValue(1L * 365L * MILLIS_PER_DAY + 1L, dt20.getMillis())); [EOL]     assertEquals(1, fld.getValue(2L * 365L * MILLIS_PER_DAY - 1L, dt20.getMillis())); [EOL]     assertEquals(2, fld.getValue(2L * 365L * MILLIS_PER_DAY, dt20.getMillis())); [EOL]     assertEquals(2, fld.getValue(2L * 365L * MILLIS_PER_DAY + 1L, dt20.getMillis())); [EOL]     assertEquals(2, fld.getValue(3L * 365L * MILLIS_PER_DAY - 1L, dt20.getMillis())); [EOL]     assertEquals(3, fld.getValue(3L * 365L * MILLIS_PER_DAY, dt20.getMillis())); [EOL]     assertEquals(3, fld.getValue(3L * 365L * MILLIS_PER_DAY + 1L, dt20.getMillis())); [EOL]     assertEquals(3, fld.getValue((4L * 365L + 1L) * MILLIS_PER_DAY - 1L, dt20.getMillis())); [EOL]     assertEquals(4, fld.getValue((4L * 365L + 1L) * MILLIS_PER_DAY, dt20.getMillis())); [EOL]     assertEquals(4, fld.getValue((4L * 365L + 1L) * MILLIS_PER_DAY + 1L, dt20.getMillis())); [EOL]     assertEquals(dt21.getMillis(), fld.add(dt20.getMillis(), 1)); [EOL]     assertEquals(dt22.getMillis(), fld.add(dt20.getMillis(), 2)); [EOL]     assertEquals(dt23.getMillis(), fld.add(dt20.getMillis(), 3)); [EOL]     assertEquals(dt24.getMillis(), fld.add(dt20.getMillis(), 4)); [EOL]     assertEquals(dt21.getMillis(), fld.add(dt20.getMillis(), 1L)); [EOL]     assertEquals(dt22.getMillis(), fld.add(dt20.getMillis(), 2L)); [EOL]     assertEquals(dt23.getMillis(), fld.add(dt20.getMillis(), 3L)); [EOL]     assertEquals(dt24.getMillis(), fld.add(dt20.getMillis(), 4L)); [EOL] }
public void testDurationYear() { [EOL]     DateTime dt20 = new DateTime(1720, 10, 2, 0, 0, 0, 0, COPTIC_UTC); [EOL]     DateTime dt21 = new DateTime(1721, 10, 2, 0, 0, 0, 0, COPTIC_UTC); [EOL]     DateTime dt22 = new DateTime(1722, 10, 2, 0, 0, 0, 0, COPTIC_UTC); [EOL]     DateTime dt23 = new DateTime(1723, 10, 2, 0, 0, 0, 0, COPTIC_UTC); [EOL]     DateTime dt24 = new DateTime(1724, 10, 2, 0, 0, 0, 0, COPTIC_UTC); [EOL]     DurationField fld = dt20.year().getDurationField(); [EOL]     assertEquals(COPTIC_UTC.years(), fld); [EOL]     assertEquals(1L * 365L * MILLIS_PER_DAY, fld.getMillis(1, dt20.getMillis())); [EOL]     assertEquals(2L * 365L * MILLIS_PER_DAY, fld.getMillis(2, dt20.getMillis())); [EOL]     assertEquals(3L * 365L * MILLIS_PER_DAY, fld.getMillis(3, dt20.getMillis())); [EOL]     assertEquals((4L * 365L + 1L) * MILLIS_PER_DAY, fld.getMillis(4, dt20.getMillis())); [EOL]     assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 4, fld.getMillis(1)); [EOL]     assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 2, fld.getMillis(2)); [EOL]     assertEquals(1L * 365L * MILLIS_PER_DAY, fld.getMillis(1L, dt20.getMillis())); [EOL]     assertEquals(2L * 365L * MILLIS_PER_DAY, fld.getMillis(2L, dt20.getMillis())); [EOL]     assertEquals(3L * 365L * MILLIS_PER_DAY, fld.getMillis(3L, dt20.getMillis())); [EOL]     assertEquals((4L * 365L + 1L) * MILLIS_PER_DAY, fld.getMillis(4L, dt20.getMillis())); [EOL]     assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 4, fld.getMillis(1L)); [EOL]     assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 2, fld.getMillis(2L)); [EOL]     assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 4, fld.getUnitMillis()); [EOL]     assertEquals(0, fld.getValue(1L * 365L * MILLIS_PER_DAY - 1L, dt20.getMillis())); [EOL]     assertEquals(1, fld.getValue(1L * 365L * MILLIS_PER_DAY, dt20.getMillis())); [EOL]     assertEquals(1, fld.getValue(1L * 365L * MILLIS_PER_DAY + 1L, dt20.getMillis())); [EOL]     assertEquals(1, fld.getValue(2L * 365L * MILLIS_PER_DAY - 1L, dt20.getMillis())); [EOL]     assertEquals(2, fld.getValue(2L * 365L * MILLIS_PER_DAY, dt20.getMillis())); [EOL]     assertEquals(2, fld.getValue(2L * 365L * MILLIS_PER_DAY + 1L, dt20.getMillis())); [EOL]     assertEquals(2, fld.getValue(3L * 365L * MILLIS_PER_DAY - 1L, dt20.getMillis())); [EOL]     assertEquals(3, fld.getValue(3L * 365L * MILLIS_PER_DAY, dt20.getMillis())); [EOL]     assertEquals(3, fld.getValue(3L * 365L * MILLIS_PER_DAY + 1L, dt20.getMillis())); [EOL]     assertEquals(3, fld.getValue((4L * 365L + 1L) * MILLIS_PER_DAY - 1L, dt20.getMillis())); [EOL]     assertEquals(4, fld.getValue((4L * 365L + 1L) * MILLIS_PER_DAY, dt20.getMillis())); [EOL]     assertEquals(4, fld.getValue((4L * 365L + 1L) * MILLIS_PER_DAY + 1L, dt20.getMillis())); [EOL]     assertEquals(dt21.getMillis(), fld.add(dt20.getMillis(), 1)); [EOL]     assertEquals(dt22.getMillis(), fld.add(dt20.getMillis(), 2)); [EOL]     assertEquals(dt23.getMillis(), fld.add(dt20.getMillis(), 3)); [EOL]     assertEquals(dt24.getMillis(), fld.add(dt20.getMillis(), 4)); [EOL]     assertEquals(dt21.getMillis(), fld.add(dt20.getMillis(), 1L)); [EOL]     assertEquals(dt22.getMillis(), fld.add(dt20.getMillis(), 2L)); [EOL]     assertEquals(dt23.getMillis(), fld.add(dt20.getMillis(), 3L)); [EOL]     assertEquals(dt24.getMillis(), fld.add(dt20.getMillis(), 4L)); [EOL] }
public void testDurationYear() { [EOL]     DateTime dt20 = new DateTime(1720, 10, 2, 0, 0, 0, 0, COPTIC_UTC); [EOL]     DateTime dt21 = new DateTime(1721, 10, 2, 0, 0, 0, 0, COPTIC_UTC); [EOL]     DateTime dt22 = new DateTime(1722, 10, 2, 0, 0, 0, 0, COPTIC_UTC); [EOL]     DateTime dt23 = new DateTime(1723, 10, 2, 0, 0, 0, 0, COPTIC_UTC); [EOL]     DateTime dt24 = new DateTime(1724, 10, 2, 0, 0, 0, 0, COPTIC_UTC); [EOL]     DurationField fld = dt20.year().getDurationField(); [EOL]     assertEquals(COPTIC_UTC.years(), fld); [EOL]     assertEquals(1L * 365L * MILLIS_PER_DAY, fld.getMillis(1, dt20.getMillis())); [EOL]     assertEquals(2L * 365L * MILLIS_PER_DAY, fld.getMillis(2, dt20.getMillis())); [EOL]     assertEquals(3L * 365L * MILLIS_PER_DAY, fld.getMillis(3, dt20.getMillis())); [EOL]     assertEquals((4L * 365L + 1L) * MILLIS_PER_DAY, fld.getMillis(4, dt20.getMillis())); [EOL]     assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 4, fld.getMillis(1)); [EOL]     assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 2, fld.getMillis(2)); [EOL]     assertEquals(1L * 365L * MILLIS_PER_DAY, fld.getMillis(1L, dt20.getMillis())); [EOL]     assertEquals(2L * 365L * MILLIS_PER_DAY, fld.getMillis(2L, dt20.getMillis())); [EOL]     assertEquals(3L * 365L * MILLIS_PER_DAY, fld.getMillis(3L, dt20.getMillis())); [EOL]     assertEquals((4L * 365L + 1L) * MILLIS_PER_DAY, fld.getMillis(4L, dt20.getMillis())); [EOL]     assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 4, fld.getMillis(1L)); [EOL]     assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 2, fld.getMillis(2L)); [EOL]     assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 4, fld.getUnitMillis()); [EOL]     assertEquals(0, fld.getValue(1L * 365L * MILLIS_PER_DAY - 1L, dt20.getMillis())); [EOL]     assertEquals(1, fld.getValue(1L * 365L * MILLIS_PER_DAY, dt20.getMillis())); [EOL]     assertEquals(1, fld.getValue(1L * 365L * MILLIS_PER_DAY + 1L, dt20.getMillis())); [EOL]     assertEquals(1, fld.getValue(2L * 365L * MILLIS_PER_DAY - 1L, dt20.getMillis())); [EOL]     assertEquals(2, fld.getValue(2L * 365L * MILLIS_PER_DAY, dt20.getMillis())); [EOL]     assertEquals(2, fld.getValue(2L * 365L * MILLIS_PER_DAY + 1L, dt20.getMillis())); [EOL]     assertEquals(2, fld.getValue(3L * 365L * MILLIS_PER_DAY - 1L, dt20.getMillis())); [EOL]     assertEquals(3, fld.getValue(3L * 365L * MILLIS_PER_DAY, dt20.getMillis())); [EOL]     assertEquals(3, fld.getValue(3L * 365L * MILLIS_PER_DAY + 1L, dt20.getMillis())); [EOL]     assertEquals(3, fld.getValue((4L * 365L + 1L) * MILLIS_PER_DAY - 1L, dt20.getMillis())); [EOL]     assertEquals(4, fld.getValue((4L * 365L + 1L) * MILLIS_PER_DAY, dt20.getMillis())); [EOL]     assertEquals(4, fld.getValue((4L * 365L + 1L) * MILLIS_PER_DAY + 1L, dt20.getMillis())); [EOL]     assertEquals(dt21.getMillis(), fld.add(dt20.getMillis(), 1)); [EOL]     assertEquals(dt22.getMillis(), fld.add(dt20.getMillis(), 2)); [EOL]     assertEquals(dt23.getMillis(), fld.add(dt20.getMillis(), 3)); [EOL]     assertEquals(dt24.getMillis(), fld.add(dt20.getMillis(), 4)); [EOL]     assertEquals(dt21.getMillis(), fld.add(dt20.getMillis(), 1L)); [EOL]     assertEquals(dt22.getMillis(), fld.add(dt20.getMillis(), 2L)); [EOL]     assertEquals(dt23.getMillis(), fld.add(dt20.getMillis(), 3L)); [EOL]     assertEquals(dt24.getMillis(), fld.add(dt20.getMillis(), 4L)); [EOL] }
public void testDurationYear() { [EOL]     DateTime dt20 = new DateTime(1720, 10, 2, 0, 0, 0, 0, COPTIC_UTC); [EOL]     DateTime dt21 = new DateTime(1721, 10, 2, 0, 0, 0, 0, COPTIC_UTC); [EOL]     DateTime dt22 = new DateTime(1722, 10, 2, 0, 0, 0, 0, COPTIC_UTC); [EOL]     DateTime dt23 = new DateTime(1723, 10, 2, 0, 0, 0, 0, COPTIC_UTC); [EOL]     DateTime dt24 = new DateTime(1724, 10, 2, 0, 0, 0, 0, COPTIC_UTC); [EOL]     DurationField fld = dt20.year().getDurationField(); [EOL]     assertEquals(COPTIC_UTC.years(), fld); [EOL]     assertEquals(1L * 365L * MILLIS_PER_DAY, fld.getMillis(1, dt20.getMillis())); [EOL]     assertEquals(2L * 365L * MILLIS_PER_DAY, fld.getMillis(2, dt20.getMillis())); [EOL]     assertEquals(3L * 365L * MILLIS_PER_DAY, fld.getMillis(3, dt20.getMillis())); [EOL]     assertEquals((4L * 365L + 1L) * MILLIS_PER_DAY, fld.getMillis(4, dt20.getMillis())); [EOL]     assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 4, fld.getMillis(1)); [EOL]     assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 2, fld.getMillis(2)); [EOL]     assertEquals(1L * 365L * MILLIS_PER_DAY, fld.getMillis(1L, dt20.getMillis())); [EOL]     assertEquals(2L * 365L * MILLIS_PER_DAY, fld.getMillis(2L, dt20.getMillis())); [EOL]     assertEquals(3L * 365L * MILLIS_PER_DAY, fld.getMillis(3L, dt20.getMillis())); [EOL]     assertEquals((4L * 365L + 1L) * MILLIS_PER_DAY, fld.getMillis(4L, dt20.getMillis())); [EOL]     assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 4, fld.getMillis(1L)); [EOL]     assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 2, fld.getMillis(2L)); [EOL]     assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 4, fld.getUnitMillis()); [EOL]     assertEquals(0, fld.getValue(1L * 365L * MILLIS_PER_DAY - 1L, dt20.getMillis())); [EOL]     assertEquals(1, fld.getValue(1L * 365L * MILLIS_PER_DAY, dt20.getMillis())); [EOL]     assertEquals(1, fld.getValue(1L * 365L * MILLIS_PER_DAY + 1L, dt20.getMillis())); [EOL]     assertEquals(1, fld.getValue(2L * 365L * MILLIS_PER_DAY - 1L, dt20.getMillis())); [EOL]     assertEquals(2, fld.getValue(2L * 365L * MILLIS_PER_DAY, dt20.getMillis())); [EOL]     assertEquals(2, fld.getValue(2L * 365L * MILLIS_PER_DAY + 1L, dt20.getMillis())); [EOL]     assertEquals(2, fld.getValue(3L * 365L * MILLIS_PER_DAY - 1L, dt20.getMillis())); [EOL]     assertEquals(3, fld.getValue(3L * 365L * MILLIS_PER_DAY, dt20.getMillis())); [EOL]     assertEquals(3, fld.getValue(3L * 365L * MILLIS_PER_DAY + 1L, dt20.getMillis())); [EOL]     assertEquals(3, fld.getValue((4L * 365L + 1L) * MILLIS_PER_DAY - 1L, dt20.getMillis())); [EOL]     assertEquals(4, fld.getValue((4L * 365L + 1L) * MILLIS_PER_DAY, dt20.getMillis())); [EOL]     assertEquals(4, fld.getValue((4L * 365L + 1L) * MILLIS_PER_DAY + 1L, dt20.getMillis())); [EOL]     assertEquals(dt21.getMillis(), fld.add(dt20.getMillis(), 1)); [EOL]     assertEquals(dt22.getMillis(), fld.add(dt20.getMillis(), 2)); [EOL]     assertEquals(dt23.getMillis(), fld.add(dt20.getMillis(), 3)); [EOL]     assertEquals(dt24.getMillis(), fld.add(dt20.getMillis(), 4)); [EOL]     assertEquals(dt21.getMillis(), fld.add(dt20.getMillis(), 1L)); [EOL]     assertEquals(dt22.getMillis(), fld.add(dt20.getMillis(), 2L)); [EOL]     assertEquals(dt23.getMillis(), fld.add(dt20.getMillis(), 3L)); [EOL]     assertEquals(dt24.getMillis(), fld.add(dt20.getMillis(), 4L)); [EOL] }
public void testDurationYear() { [EOL]     DateTime dt20 = new DateTime(1720, 10, 2, 0, 0, 0, 0, COPTIC_UTC); [EOL]     DateTime dt21 = new DateTime(1721, 10, 2, 0, 0, 0, 0, COPTIC_UTC); [EOL]     DateTime dt22 = new DateTime(1722, 10, 2, 0, 0, 0, 0, COPTIC_UTC); [EOL]     DateTime dt23 = new DateTime(1723, 10, 2, 0, 0, 0, 0, COPTIC_UTC); [EOL]     DateTime dt24 = new DateTime(1724, 10, 2, 0, 0, 0, 0, COPTIC_UTC); [EOL]     DurationField fld = dt20.year().getDurationField(); [EOL]     assertEquals(COPTIC_UTC.years(), fld); [EOL]     assertEquals(1L * 365L * MILLIS_PER_DAY, fld.getMillis(1, dt20.getMillis())); [EOL]     assertEquals(2L * 365L * MILLIS_PER_DAY, fld.getMillis(2, dt20.getMillis())); [EOL]     assertEquals(3L * 365L * MILLIS_PER_DAY, fld.getMillis(3, dt20.getMillis())); [EOL]     assertEquals((4L * 365L + 1L) * MILLIS_PER_DAY, fld.getMillis(4, dt20.getMillis())); [EOL]     assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 4, fld.getMillis(1)); [EOL]     assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 2, fld.getMillis(2)); [EOL]     assertEquals(1L * 365L * MILLIS_PER_DAY, fld.getMillis(1L, dt20.getMillis())); [EOL]     assertEquals(2L * 365L * MILLIS_PER_DAY, fld.getMillis(2L, dt20.getMillis())); [EOL]     assertEquals(3L * 365L * MILLIS_PER_DAY, fld.getMillis(3L, dt20.getMillis())); [EOL]     assertEquals((4L * 365L + 1L) * MILLIS_PER_DAY, fld.getMillis(4L, dt20.getMillis())); [EOL]     assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 4, fld.getMillis(1L)); [EOL]     assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 2, fld.getMillis(2L)); [EOL]     assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 4, fld.getUnitMillis()); [EOL]     assertEquals(0, fld.getValue(1L * 365L * MILLIS_PER_DAY - 1L, dt20.getMillis())); [EOL]     assertEquals(1, fld.getValue(1L * 365L * MILLIS_PER_DAY, dt20.getMillis())); [EOL]     assertEquals(1, fld.getValue(1L * 365L * MILLIS_PER_DAY + 1L, dt20.getMillis())); [EOL]     assertEquals(1, fld.getValue(2L * 365L * MILLIS_PER_DAY - 1L, dt20.getMillis())); [EOL]     assertEquals(2, fld.getValue(2L * 365L * MILLIS_PER_DAY, dt20.getMillis())); [EOL]     assertEquals(2, fld.getValue(2L * 365L * MILLIS_PER_DAY + 1L, dt20.getMillis())); [EOL]     assertEquals(2, fld.getValue(3L * 365L * MILLIS_PER_DAY - 1L, dt20.getMillis())); [EOL]     assertEquals(3, fld.getValue(3L * 365L * MILLIS_PER_DAY, dt20.getMillis())); [EOL]     assertEquals(3, fld.getValue(3L * 365L * MILLIS_PER_DAY + 1L, dt20.getMillis())); [EOL]     assertEquals(3, fld.getValue((4L * 365L + 1L) * MILLIS_PER_DAY - 1L, dt20.getMillis())); [EOL]     assertEquals(4, fld.getValue((4L * 365L + 1L) * MILLIS_PER_DAY, dt20.getMillis())); [EOL]     assertEquals(4, fld.getValue((4L * 365L + 1L) * MILLIS_PER_DAY + 1L, dt20.getMillis())); [EOL]     assertEquals(dt21.getMillis(), fld.add(dt20.getMillis(), 1)); [EOL]     assertEquals(dt22.getMillis(), fld.add(dt20.getMillis(), 2)); [EOL]     assertEquals(dt23.getMillis(), fld.add(dt20.getMillis(), 3)); [EOL]     assertEquals(dt24.getMillis(), fld.add(dt20.getMillis(), 4)); [EOL]     assertEquals(dt21.getMillis(), fld.add(dt20.getMillis(), 1L)); [EOL]     assertEquals(dt22.getMillis(), fld.add(dt20.getMillis(), 2L)); [EOL]     assertEquals(dt23.getMillis(), fld.add(dt20.getMillis(), 3L)); [EOL]     assertEquals(dt24.getMillis(), fld.add(dt20.getMillis(), 4L)); [EOL] }
public void testDurationYear() { [EOL]     DateTime dt20 = new DateTime(1720, 10, 2, 0, 0, 0, 0, COPTIC_UTC); [EOL]     DateTime dt21 = new DateTime(1721, 10, 2, 0, 0, 0, 0, COPTIC_UTC); [EOL]     DateTime dt22 = new DateTime(1722, 10, 2, 0, 0, 0, 0, COPTIC_UTC); [EOL]     DateTime dt23 = new DateTime(1723, 10, 2, 0, 0, 0, 0, COPTIC_UTC); [EOL]     DateTime dt24 = new DateTime(1724, 10, 2, 0, 0, 0, 0, COPTIC_UTC); [EOL]     DurationField fld = dt20.year().getDurationField(); [EOL]     assertEquals(COPTIC_UTC.years(), fld); [EOL]     assertEquals(1L * 365L * MILLIS_PER_DAY, fld.getMillis(1, dt20.getMillis())); [EOL]     assertEquals(2L * 365L * MILLIS_PER_DAY, fld.getMillis(2, dt20.getMillis())); [EOL]     assertEquals(3L * 365L * MILLIS_PER_DAY, fld.getMillis(3, dt20.getMillis())); [EOL]     assertEquals((4L * 365L + 1L) * MILLIS_PER_DAY, fld.getMillis(4, dt20.getMillis())); [EOL]     assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 4, fld.getMillis(1)); [EOL]     assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 2, fld.getMillis(2)); [EOL]     assertEquals(1L * 365L * MILLIS_PER_DAY, fld.getMillis(1L, dt20.getMillis())); [EOL]     assertEquals(2L * 365L * MILLIS_PER_DAY, fld.getMillis(2L, dt20.getMillis())); [EOL]     assertEquals(3L * 365L * MILLIS_PER_DAY, fld.getMillis(3L, dt20.getMillis())); [EOL]     assertEquals((4L * 365L + 1L) * MILLIS_PER_DAY, fld.getMillis(4L, dt20.getMillis())); [EOL]     assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 4, fld.getMillis(1L)); [EOL]     assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 2, fld.getMillis(2L)); [EOL]     assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 4, fld.getUnitMillis()); [EOL]     assertEquals(0, fld.getValue(1L * 365L * MILLIS_PER_DAY - 1L, dt20.getMillis())); [EOL]     assertEquals(1, fld.getValue(1L * 365L * MILLIS_PER_DAY, dt20.getMillis())); [EOL]     assertEquals(1, fld.getValue(1L * 365L * MILLIS_PER_DAY + 1L, dt20.getMillis())); [EOL]     assertEquals(1, fld.getValue(2L * 365L * MILLIS_PER_DAY - 1L, dt20.getMillis())); [EOL]     assertEquals(2, fld.getValue(2L * 365L * MILLIS_PER_DAY, dt20.getMillis())); [EOL]     assertEquals(2, fld.getValue(2L * 365L * MILLIS_PER_DAY + 1L, dt20.getMillis())); [EOL]     assertEquals(2, fld.getValue(3L * 365L * MILLIS_PER_DAY - 1L, dt20.getMillis())); [EOL]     assertEquals(3, fld.getValue(3L * 365L * MILLIS_PER_DAY, dt20.getMillis())); [EOL]     assertEquals(3, fld.getValue(3L * 365L * MILLIS_PER_DAY + 1L, dt20.getMillis())); [EOL]     assertEquals(3, fld.getValue((4L * 365L + 1L) * MILLIS_PER_DAY - 1L, dt20.getMillis())); [EOL]     assertEquals(4, fld.getValue((4L * 365L + 1L) * MILLIS_PER_DAY, dt20.getMillis())); [EOL]     assertEquals(4, fld.getValue((4L * 365L + 1L) * MILLIS_PER_DAY + 1L, dt20.getMillis())); [EOL]     assertEquals(dt21.getMillis(), fld.add(dt20.getMillis(), 1)); [EOL]     assertEquals(dt22.getMillis(), fld.add(dt20.getMillis(), 2)); [EOL]     assertEquals(dt23.getMillis(), fld.add(dt20.getMillis(), 3)); [EOL]     assertEquals(dt24.getMillis(), fld.add(dt20.getMillis(), 4)); [EOL]     assertEquals(dt21.getMillis(), fld.add(dt20.getMillis(), 1L)); [EOL]     assertEquals(dt22.getMillis(), fld.add(dt20.getMillis(), 2L)); [EOL]     assertEquals(dt23.getMillis(), fld.add(dt20.getMillis(), 3L)); [EOL]     assertEquals(dt24.getMillis(), fld.add(dt20.getMillis(), 4L)); [EOL] }
public void testDurationYear() { [EOL]     DateTime dt20 = new DateTime(1720, 10, 2, 0, 0, 0, 0, COPTIC_UTC); [EOL]     DateTime dt21 = new DateTime(1721, 10, 2, 0, 0, 0, 0, COPTIC_UTC); [EOL]     DateTime dt22 = new DateTime(1722, 10, 2, 0, 0, 0, 0, COPTIC_UTC); [EOL]     DateTime dt23 = new DateTime(1723, 10, 2, 0, 0, 0, 0, COPTIC_UTC); [EOL]     DateTime dt24 = new DateTime(1724, 10, 2, 0, 0, 0, 0, COPTIC_UTC); [EOL]     DurationField fld = dt20.year().getDurationField(); [EOL]     assertEquals(COPTIC_UTC.years(), fld); [EOL]     assertEquals(1L * 365L * MILLIS_PER_DAY, fld.getMillis(1, dt20.getMillis())); [EOL]     assertEquals(2L * 365L * MILLIS_PER_DAY, fld.getMillis(2, dt20.getMillis())); [EOL]     assertEquals(3L * 365L * MILLIS_PER_DAY, fld.getMillis(3, dt20.getMillis())); [EOL]     assertEquals((4L * 365L + 1L) * MILLIS_PER_DAY, fld.getMillis(4, dt20.getMillis())); [EOL]     assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 4, fld.getMillis(1)); [EOL]     assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 2, fld.getMillis(2)); [EOL]     assertEquals(1L * 365L * MILLIS_PER_DAY, fld.getMillis(1L, dt20.getMillis())); [EOL]     assertEquals(2L * 365L * MILLIS_PER_DAY, fld.getMillis(2L, dt20.getMillis())); [EOL]     assertEquals(3L * 365L * MILLIS_PER_DAY, fld.getMillis(3L, dt20.getMillis())); [EOL]     assertEquals((4L * 365L + 1L) * MILLIS_PER_DAY, fld.getMillis(4L, dt20.getMillis())); [EOL]     assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 4, fld.getMillis(1L)); [EOL]     assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 2, fld.getMillis(2L)); [EOL]     assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 4, fld.getUnitMillis()); [EOL]     assertEquals(0, fld.getValue(1L * 365L * MILLIS_PER_DAY - 1L, dt20.getMillis())); [EOL]     assertEquals(1, fld.getValue(1L * 365L * MILLIS_PER_DAY, dt20.getMillis())); [EOL]     assertEquals(1, fld.getValue(1L * 365L * MILLIS_PER_DAY + 1L, dt20.getMillis())); [EOL]     assertEquals(1, fld.getValue(2L * 365L * MILLIS_PER_DAY - 1L, dt20.getMillis())); [EOL]     assertEquals(2, fld.getValue(2L * 365L * MILLIS_PER_DAY, dt20.getMillis())); [EOL]     assertEquals(2, fld.getValue(2L * 365L * MILLIS_PER_DAY + 1L, dt20.getMillis())); [EOL]     assertEquals(2, fld.getValue(3L * 365L * MILLIS_PER_DAY - 1L, dt20.getMillis())); [EOL]     assertEquals(3, fld.getValue(3L * 365L * MILLIS_PER_DAY, dt20.getMillis())); [EOL]     assertEquals(3, fld.getValue(3L * 365L * MILLIS_PER_DAY + 1L, dt20.getMillis())); [EOL]     assertEquals(3, fld.getValue((4L * 365L + 1L) * MILLIS_PER_DAY - 1L, dt20.getMillis())); [EOL]     assertEquals(4, fld.getValue((4L * 365L + 1L) * MILLIS_PER_DAY, dt20.getMillis())); [EOL]     assertEquals(4, fld.getValue((4L * 365L + 1L) * MILLIS_PER_DAY + 1L, dt20.getMillis())); [EOL]     assertEquals(dt21.getMillis(), fld.add(dt20.getMillis(), 1)); [EOL]     assertEquals(dt22.getMillis(), fld.add(dt20.getMillis(), 2)); [EOL]     assertEquals(dt23.getMillis(), fld.add(dt20.getMillis(), 3)); [EOL]     assertEquals(dt24.getMillis(), fld.add(dt20.getMillis(), 4)); [EOL]     assertEquals(dt21.getMillis(), fld.add(dt20.getMillis(), 1L)); [EOL]     assertEquals(dt22.getMillis(), fld.add(dt20.getMillis(), 2L)); [EOL]     assertEquals(dt23.getMillis(), fld.add(dt20.getMillis(), 3L)); [EOL]     assertEquals(dt24.getMillis(), fld.add(dt20.getMillis(), 4L)); [EOL] }
public void testFactory_weeksBetween_RInstant() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 6, 30, 12, 0, 0, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 7, 21, 12, 0, 0, 0, PARIS); [EOL]     assertEquals(3, Weeks.weeksBetween(start, end1).getWeeks()); [EOL]     assertEquals(0, Weeks.weeksBetween(start, start).getWeeks()); [EOL]     assertEquals(0, Weeks.weeksBetween(end1, end1).getWeeks()); [EOL]     assertEquals(-3, Weeks.weeksBetween(end1, start).getWeeks()); [EOL]     assertEquals(6, Weeks.weeksBetween(start, end2).getWeeks()); [EOL] }
public void testFactory_weeksBetween_RInstant() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 6, 30, 12, 0, 0, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 7, 21, 12, 0, 0, 0, PARIS); [EOL]     assertEquals(3, Weeks.weeksBetween(start, end1).getWeeks()); [EOL]     assertEquals(0, Weeks.weeksBetween(start, start).getWeeks()); [EOL]     assertEquals(0, Weeks.weeksBetween(end1, end1).getWeeks()); [EOL]     assertEquals(-3, Weeks.weeksBetween(end1, start).getWeeks()); [EOL]     assertEquals(6, Weeks.weeksBetween(start, end2).getWeeks()); [EOL] }
public void testFactory_weeksBetween_RInstant() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 6, 30, 12, 0, 0, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 7, 21, 12, 0, 0, 0, PARIS); [EOL]     assertEquals(3, Weeks.weeksBetween(start, end1).getWeeks()); [EOL]     assertEquals(0, Weeks.weeksBetween(start, start).getWeeks()); [EOL]     assertEquals(0, Weeks.weeksBetween(end1, end1).getWeeks()); [EOL]     assertEquals(-3, Weeks.weeksBetween(end1, start).getWeeks()); [EOL]     assertEquals(6, Weeks.weeksBetween(start, end2).getWeeks()); [EOL] }
public void testFactory_weeksBetween_RInstant() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 6, 30, 12, 0, 0, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 7, 21, 12, 0, 0, 0, PARIS); [EOL]     assertEquals(3, Weeks.weeksBetween(start, end1).getWeeks()); [EOL]     assertEquals(0, Weeks.weeksBetween(start, start).getWeeks()); [EOL]     assertEquals(0, Weeks.weeksBetween(end1, end1).getWeeks()); [EOL]     assertEquals(-3, Weeks.weeksBetween(end1, start).getWeeks()); [EOL]     assertEquals(6, Weeks.weeksBetween(start, end2).getWeeks()); [EOL] }
public void testFactory_weeksBetween_RInstant() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 6, 30, 12, 0, 0, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 7, 21, 12, 0, 0, 0, PARIS); [EOL]     assertEquals(3, Weeks.weeksBetween(start, end1).getWeeks()); [EOL]     assertEquals(0, Weeks.weeksBetween(start, start).getWeeks()); [EOL]     assertEquals(0, Weeks.weeksBetween(end1, end1).getWeeks()); [EOL]     assertEquals(-3, Weeks.weeksBetween(end1, start).getWeeks()); [EOL]     assertEquals(6, Weeks.weeksBetween(start, end2).getWeeks()); [EOL] }
public void testFactory_weeksBetween_RInstant() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 6, 30, 12, 0, 0, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 7, 21, 12, 0, 0, 0, PARIS); [EOL]     assertEquals(3, Weeks.weeksBetween(start, end1).getWeeks()); [EOL]     assertEquals(0, Weeks.weeksBetween(start, start).getWeeks()); [EOL]     assertEquals(0, Weeks.weeksBetween(end1, end1).getWeeks()); [EOL]     assertEquals(-3, Weeks.weeksBetween(end1, start).getWeeks()); [EOL]     assertEquals(6, Weeks.weeksBetween(start, end2).getWeeks()); [EOL] }
public void testFactory_weeksBetween_RInstant() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 6, 30, 12, 0, 0, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 7, 21, 12, 0, 0, 0, PARIS); [EOL]     assertEquals(3, Weeks.weeksBetween(start, end1).getWeeks()); [EOL]     assertEquals(0, Weeks.weeksBetween(start, start).getWeeks()); [EOL]     assertEquals(0, Weeks.weeksBetween(end1, end1).getWeeks()); [EOL]     assertEquals(-3, Weeks.weeksBetween(end1, start).getWeeks()); [EOL]     assertEquals(6, Weeks.weeksBetween(start, end2).getWeeks()); [EOL] }
public void testFactory_weeksBetween_RInstant() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 6, 30, 12, 0, 0, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 7, 21, 12, 0, 0, 0, PARIS); [EOL]     assertEquals(3, Weeks.weeksBetween(start, end1).getWeeks()); [EOL]     assertEquals(0, Weeks.weeksBetween(start, start).getWeeks()); [EOL]     assertEquals(0, Weeks.weeksBetween(end1, end1).getWeeks()); [EOL]     assertEquals(-3, Weeks.weeksBetween(end1, start).getWeeks()); [EOL]     assertEquals(6, Weeks.weeksBetween(start, end2).getWeeks()); [EOL] }
public void testFactory_weeksBetween_RInstant() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 6, 30, 12, 0, 0, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 7, 21, 12, 0, 0, 0, PARIS); [EOL]     assertEquals(3, Weeks.weeksBetween(start, end1).getWeeks()); [EOL]     assertEquals(0, Weeks.weeksBetween(start, start).getWeeks()); [EOL]     assertEquals(0, Weeks.weeksBetween(end1, end1).getWeeks()); [EOL]     assertEquals(-3, Weeks.weeksBetween(end1, start).getWeeks()); [EOL]     assertEquals(6, Weeks.weeksBetween(start, end2).getWeeks()); [EOL] }
public void testFactory_weeksBetween_RInstant() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 6, 30, 12, 0, 0, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 7, 21, 12, 0, 0, 0, PARIS); [EOL]     assertEquals(3, Weeks.weeksBetween(start, end1).getWeeks()); [EOL]     assertEquals(0, Weeks.weeksBetween(start, start).getWeeks()); [EOL]     assertEquals(0, Weeks.weeksBetween(end1, end1).getWeeks()); [EOL]     assertEquals(-3, Weeks.weeksBetween(end1, start).getWeeks()); [EOL]     assertEquals(6, Weeks.weeksBetween(start, end2).getWeeks()); [EOL] }
public void testFactory_parseWeeks_String() { [EOL]     assertEquals(0, Weeks.parseWeeks((String) null).getWeeks()); [EOL]     assertEquals(0, Weeks.parseWeeks("P0W").getWeeks()); [EOL]     assertEquals(1, Weeks.parseWeeks("P1W").getWeeks()); [EOL]     assertEquals(-3, Weeks.parseWeeks("P-3W").getWeeks()); [EOL]     assertEquals(2, Weeks.parseWeeks("P0Y0M2W").getWeeks()); [EOL]     assertEquals(2, Weeks.parseWeeks("P2WT0H0M").getWeeks()); [EOL]     try { [EOL]         Weeks.parseWeeks("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Weeks.parseWeeks("P1WT1H"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_parseWeeks_String() { [EOL]     assertEquals(0, Weeks.parseWeeks((String) null).getWeeks()); [EOL]     assertEquals(0, Weeks.parseWeeks("P0W").getWeeks()); [EOL]     assertEquals(1, Weeks.parseWeeks("P1W").getWeeks()); [EOL]     assertEquals(-3, Weeks.parseWeeks("P-3W").getWeeks()); [EOL]     assertEquals(2, Weeks.parseWeeks("P0Y0M2W").getWeeks()); [EOL]     assertEquals(2, Weeks.parseWeeks("P2WT0H0M").getWeeks()); [EOL]     try { [EOL]         Weeks.parseWeeks("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Weeks.parseWeeks("P1WT1H"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_parseWeeks_String() { [EOL]     assertEquals(0, Weeks.parseWeeks((String) null).getWeeks()); [EOL]     assertEquals(0, Weeks.parseWeeks("P0W").getWeeks()); [EOL]     assertEquals(1, Weeks.parseWeeks("P1W").getWeeks()); [EOL]     assertEquals(-3, Weeks.parseWeeks("P-3W").getWeeks()); [EOL]     assertEquals(2, Weeks.parseWeeks("P0Y0M2W").getWeeks()); [EOL]     assertEquals(2, Weeks.parseWeeks("P2WT0H0M").getWeeks()); [EOL]     try { [EOL]         Weeks.parseWeeks("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Weeks.parseWeeks("P1WT1H"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_weeksBetween_RInstant() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 6, 30, 12, 0, 0, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 7, 21, 12, 0, 0, 0, PARIS); [EOL]     assertEquals(3, Weeks.weeksBetween(start, end1).getWeeks()); [EOL]     assertEquals(0, Weeks.weeksBetween(start, start).getWeeks()); [EOL]     assertEquals(0, Weeks.weeksBetween(end1, end1).getWeeks()); [EOL]     assertEquals(-3, Weeks.weeksBetween(end1, start).getWeeks()); [EOL]     assertEquals(6, Weeks.weeksBetween(start, end2).getWeeks()); [EOL] }
public void testSerialization() throws Exception { [EOL]     Weeks test = Weeks.THREE; [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     Weeks result = (Weeks) ois.readObject(); [EOL]     ois.close(); [EOL]     assertSame(test, result); [EOL] }
public void testAddToLocalDate() { [EOL]     Weeks test = Weeks.weeks(3); [EOL]     LocalDate date = new LocalDate(2006, 6, 1); [EOL]     LocalDate expected = new LocalDate(2006, 6, 22); [EOL]     assertEquals(expected, date.plus(test)); [EOL] }
public void testToStandardHours() { [EOL]     Weeks test = Weeks.weeks(2); [EOL]     Hours expected = Hours.hours(2 * 7 * 24); [EOL]     assertEquals(expected, test.toStandardHours()); [EOL]     try { [EOL]         Weeks.MAX_VALUE.toStandardHours(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testToStandardHours() { [EOL]     Weeks test = Weeks.weeks(2); [EOL]     Hours expected = Hours.hours(2 * 7 * 24); [EOL]     assertEquals(expected, test.toStandardHours()); [EOL]     try { [EOL]         Weeks.MAX_VALUE.toStandardHours(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testToStandardHours() { [EOL]     Weeks test = Weeks.weeks(2); [EOL]     Hours expected = Hours.hours(2 * 7 * 24); [EOL]     assertEquals(expected, test.toStandardHours()); [EOL]     try { [EOL]         Weeks.MAX_VALUE.toStandardHours(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testFactory_weeksBetween_RInstant() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 6, 30, 12, 0, 0, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 7, 21, 12, 0, 0, 0, PARIS); [EOL]     assertEquals(3, Weeks.weeksBetween(start, end1).getWeeks()); [EOL]     assertEquals(0, Weeks.weeksBetween(start, start).getWeeks()); [EOL]     assertEquals(0, Weeks.weeksBetween(end1, end1).getWeeks()); [EOL]     assertEquals(-3, Weeks.weeksBetween(end1, start).getWeeks()); [EOL]     assertEquals(6, Weeks.weeksBetween(start, end2).getWeeks()); [EOL] }
public void test_now_DateTimeZone() throws Throwable { [EOL]     DateTime test = DateTime.now(PARIS); [EOL]     assertEquals(ISOChronology.getInstance(PARIS), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] }
public void test_now_DateTimeZone() throws Throwable { [EOL]     DateTime test = DateTime.now(PARIS); [EOL]     assertEquals(ISOChronology.getInstance(PARIS), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] }
public void testToDateTime_RI() { [EOL]     TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); [EOL]     DateTime dt = new DateTime(0L); [EOL]     assertEquals("1970-01-01T01:00:00.000+01:00", dt.toString()); [EOL]     DateTime test = base.toDateTime(dt); [EOL]     check(base, 10, 20, 30, 40); [EOL]     assertEquals("1970-01-01T01:00:00.000+01:00", dt.toString()); [EOL]     assertEquals("1970-01-01T10:20:30.040+01:00", test.toString()); [EOL] }
public void testBug3476684_adjustOffset_springGap() { [EOL]     final DateTimeZone zone = DateTimeZone.forID("America/Sao_Paulo"); [EOL]     DateTime base = new DateTime(2011, 10, 15, 22, 15, zone); [EOL]     DateTime baseBefore = base.plusHours(1); [EOL]     DateTime baseAfter = base.plusHours(2); [EOL]     assertSame(base, base.withEarlierOffsetAtOverlap()); [EOL]     assertSame(base, base.withLaterOffsetAtOverlap()); [EOL]     assertSame(baseBefore, baseBefore.withEarlierOffsetAtOverlap()); [EOL]     assertEquals(baseBefore, baseBefore.withLaterOffsetAtOverlap()); [EOL]     assertSame(baseAfter, baseAfter.withLaterOffsetAtOverlap()); [EOL]     assertEquals(baseAfter, baseAfter.withEarlierOffsetAtOverlap()); [EOL] }
public void testFormatParse_textYear_UK() { [EOL]     DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder().appendLiteral('$').appendText(DateTimeFieldType.year()).toFormatter().withLocale(Locale.UK).withZoneUTC(); [EOL]     String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("$2007", str); [EOL]     try { [EOL]         dateFormatter.parseDateTime(str); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testBug3476684_adjustOffset_springGap() { [EOL]     final DateTimeZone zone = DateTimeZone.forID("America/Sao_Paulo"); [EOL]     DateTime base = new DateTime(2011, 10, 15, 22, 15, zone); [EOL]     DateTime baseBefore = base.plusHours(1); [EOL]     DateTime baseAfter = base.plusHours(2); [EOL]     assertSame(base, base.withEarlierOffsetAtOverlap()); [EOL]     assertSame(base, base.withLaterOffsetAtOverlap()); [EOL]     assertSame(baseBefore, baseBefore.withEarlierOffsetAtOverlap()); [EOL]     assertEquals(baseBefore, baseBefore.withLaterOffsetAtOverlap()); [EOL]     assertSame(baseAfter, baseAfter.withLaterOffsetAtOverlap()); [EOL]     assertEquals(baseAfter, baseAfter.withEarlierOffsetAtOverlap()); [EOL] }
public void testBug3476684_adjustOffset_springGap() { [EOL]     final DateTimeZone zone = DateTimeZone.forID("America/Sao_Paulo"); [EOL]     DateTime base = new DateTime(2011, 10, 15, 22, 15, zone); [EOL]     DateTime baseBefore = base.plusHours(1); [EOL]     DateTime baseAfter = base.plusHours(2); [EOL]     assertSame(base, base.withEarlierOffsetAtOverlap()); [EOL]     assertSame(base, base.withLaterOffsetAtOverlap()); [EOL]     assertSame(baseBefore, baseBefore.withEarlierOffsetAtOverlap()); [EOL]     assertEquals(baseBefore, baseBefore.withLaterOffsetAtOverlap()); [EOL]     assertSame(baseAfter, baseAfter.withLaterOffsetAtOverlap()); [EOL]     assertEquals(baseAfter, baseAfter.withEarlierOffsetAtOverlap()); [EOL] }
public void testBug3476684_adjustOffset_springGap() { [EOL]     final DateTimeZone zone = DateTimeZone.forID("America/Sao_Paulo"); [EOL]     DateTime base = new DateTime(2011, 10, 15, 22, 15, zone); [EOL]     DateTime baseBefore = base.plusHours(1); [EOL]     DateTime baseAfter = base.plusHours(2); [EOL]     assertSame(base, base.withEarlierOffsetAtOverlap()); [EOL]     assertSame(base, base.withLaterOffsetAtOverlap()); [EOL]     assertSame(baseBefore, baseBefore.withEarlierOffsetAtOverlap()); [EOL]     assertEquals(baseBefore, baseBefore.withLaterOffsetAtOverlap()); [EOL]     assertSame(baseAfter, baseAfter.withLaterOffsetAtOverlap()); [EOL]     assertEquals(baseAfter, baseAfter.withEarlierOffsetAtOverlap()); [EOL] }
public void testBug3476684_adjustOffset_springGap() { [EOL]     final DateTimeZone zone = DateTimeZone.forID("America/Sao_Paulo"); [EOL]     DateTime base = new DateTime(2011, 10, 15, 22, 15, zone); [EOL]     DateTime baseBefore = base.plusHours(1); [EOL]     DateTime baseAfter = base.plusHours(2); [EOL]     assertSame(base, base.withEarlierOffsetAtOverlap()); [EOL]     assertSame(base, base.withLaterOffsetAtOverlap()); [EOL]     assertSame(baseBefore, baseBefore.withEarlierOffsetAtOverlap()); [EOL]     assertEquals(baseBefore, baseBefore.withLaterOffsetAtOverlap()); [EOL]     assertSame(baseAfter, baseAfter.withLaterOffsetAtOverlap()); [EOL]     assertEquals(baseAfter, baseAfter.withEarlierOffsetAtOverlap()); [EOL] }
public void testWithDate_int_int_int() { [EOL]     DateTime test = new DateTime(2002, 4, 5, 1, 2, 3, 4, ISO_UTC); [EOL]     DateTime result = test.withDate(2003, 5, 6); [EOL]     DateTime expected = new DateTime(2003, 5, 6, 1, 2, 3, 4, ISO_UTC); [EOL]     assertEquals(expected, result); [EOL]     test = new DateTime(TEST_TIME1); [EOL]     try { [EOL]         test.withDate(2003, 13, 1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithDate_int_int_int() { [EOL]     DateTime test = new DateTime(2002, 4, 5, 1, 2, 3, 4, ISO_UTC); [EOL]     DateTime result = test.withDate(2003, 5, 6); [EOL]     DateTime expected = new DateTime(2003, 5, 6, 1, 2, 3, 4, ISO_UTC); [EOL]     assertEquals(expected, result); [EOL]     test = new DateTime(TEST_TIME1); [EOL]     try { [EOL]         test.withDate(2003, 13, 1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithDate_int_int_int() { [EOL]     DateTime test = new DateTime(2002, 4, 5, 1, 2, 3, 4, ISO_UTC); [EOL]     DateTime result = test.withDate(2003, 5, 6); [EOL]     DateTime expected = new DateTime(2003, 5, 6, 1, 2, 3, 4, ISO_UTC); [EOL]     assertEquals(expected, result); [EOL]     test = new DateTime(TEST_TIME1); [EOL]     try { [EOL]         test.withDate(2003, 13, 1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithDate_int_int_int() { [EOL]     DateTime test = new DateTime(2002, 4, 5, 1, 2, 3, 4, ISO_UTC); [EOL]     DateTime result = test.withDate(2003, 5, 6); [EOL]     DateTime expected = new DateTime(2003, 5, 6, 1, 2, 3, 4, ISO_UTC); [EOL]     assertEquals(expected, result); [EOL]     test = new DateTime(TEST_TIME1); [EOL]     try { [EOL]         test.withDate(2003, 13, 1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testWithFields_RPartial() { [EOL]     DateTime test = new DateTime(2004, 5, 6, 7, 8, 9, 0); [EOL]     DateTime result = test.withFields(new YearMonthDay(2003, 4, 5)); [EOL]     DateTime expected = new DateTime(2003, 4, 5, 7, 8, 9, 0); [EOL]     assertEquals(expected, result); [EOL]     test = new DateTime(TEST_TIME1); [EOL]     result = test.withFields(null); [EOL]     assertSame(test, result); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testWithFields_RPartial() { [EOL]     DateTime test = new DateTime(2004, 5, 6, 7, 8, 9, 0); [EOL]     DateTime result = test.withFields(new YearMonthDay(2003, 4, 5)); [EOL]     DateTime expected = new DateTime(2003, 4, 5, 7, 8, 9, 0); [EOL]     assertEquals(expected, result); [EOL]     test = new DateTime(TEST_TIME1); [EOL]     result = test.withFields(null); [EOL]     assertSame(test, result); [EOL] }
public void testWithField2() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     try { [EOL]         test.withField(null, 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithField2() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     try { [EOL]         test.withField(null, 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithDurationAdded_long_int() { [EOL]     DateTime test = new DateTime(TEST_TIME1, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.withDurationAdded(123456789L, 1); [EOL]     DateTime expected = new DateTime(TEST_TIME1 + 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.withDurationAdded(123456789L, 0); [EOL]     assertSame(test, result); [EOL]     result = test.withDurationAdded(123456789L, 2); [EOL]     expected = new DateTime(TEST_TIME1 + (2L * 123456789L), BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.withDurationAdded(123456789L, -3); [EOL]     expected = new DateTime(TEST_TIME1 - (3L * 123456789L), BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL] }
public void testWithDurationAdded_long_int() { [EOL]     DateTime test = new DateTime(TEST_TIME1, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.withDurationAdded(123456789L, 1); [EOL]     DateTime expected = new DateTime(TEST_TIME1 + 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.withDurationAdded(123456789L, 0); [EOL]     assertSame(test, result); [EOL]     result = test.withDurationAdded(123456789L, 2); [EOL]     expected = new DateTime(TEST_TIME1 + (2L * 123456789L), BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.withDurationAdded(123456789L, -3); [EOL]     expected = new DateTime(TEST_TIME1 - (3L * 123456789L), BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL] }
public void testWithDurationAdded_long_int() { [EOL]     DateTime test = new DateTime(TEST_TIME1, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.withDurationAdded(123456789L, 1); [EOL]     DateTime expected = new DateTime(TEST_TIME1 + 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.withDurationAdded(123456789L, 0); [EOL]     assertSame(test, result); [EOL]     result = test.withDurationAdded(123456789L, 2); [EOL]     expected = new DateTime(TEST_TIME1 + (2L * 123456789L), BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.withDurationAdded(123456789L, -3); [EOL]     expected = new DateTime(TEST_TIME1 - (3L * 123456789L), BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL] }
public void testPlus_RP() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8)); [EOL]     DateTime expected = new DateTime(2003, 7, 28, 6, 8, 10, 12, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlus_RP() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8)); [EOL]     DateTime expected = new DateTime(2003, 7, 28, 6, 8, 10, 12, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlus_RP() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8)); [EOL]     DateTime expected = new DateTime(2003, 7, 28, 6, 8, 10, 12, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testBug3476684_adjustOffset_springGap() { [EOL]     final DateTimeZone zone = DateTimeZone.forID("America/Sao_Paulo"); [EOL]     DateTime base = new DateTime(2011, 10, 15, 22, 15, zone); [EOL]     DateTime baseBefore = base.plusHours(1); [EOL]     DateTime baseAfter = base.plusHours(2); [EOL]     assertSame(base, base.withEarlierOffsetAtOverlap()); [EOL]     assertSame(base, base.withLaterOffsetAtOverlap()); [EOL]     assertSame(baseBefore, baseBefore.withEarlierOffsetAtOverlap()); [EOL]     assertEquals(baseBefore, baseBefore.withLaterOffsetAtOverlap()); [EOL]     assertSame(baseAfter, baseAfter.withLaterOffsetAtOverlap()); [EOL]     assertEquals(baseAfter, baseAfter.withEarlierOffsetAtOverlap()); [EOL] }
public void testBug3476684_adjustOffset_springGap() { [EOL]     final DateTimeZone zone = DateTimeZone.forID("America/Sao_Paulo"); [EOL]     DateTime base = new DateTime(2011, 10, 15, 22, 15, zone); [EOL]     DateTime baseBefore = base.plusHours(1); [EOL]     DateTime baseAfter = base.plusHours(2); [EOL]     assertSame(base, base.withEarlierOffsetAtOverlap()); [EOL]     assertSame(base, base.withLaterOffsetAtOverlap()); [EOL]     assertSame(baseBefore, baseBefore.withEarlierOffsetAtOverlap()); [EOL]     assertEquals(baseBefore, baseBefore.withLaterOffsetAtOverlap()); [EOL]     assertSame(baseAfter, baseAfter.withLaterOffsetAtOverlap()); [EOL]     assertEquals(baseAfter, baseAfter.withEarlierOffsetAtOverlap()); [EOL] }
public void testBug3476684_adjustOffset_springGap() { [EOL]     final DateTimeZone zone = DateTimeZone.forID("America/Sao_Paulo"); [EOL]     DateTime base = new DateTime(2011, 10, 15, 22, 15, zone); [EOL]     DateTime baseBefore = base.plusHours(1); [EOL]     DateTime baseAfter = base.plusHours(2); [EOL]     assertSame(base, base.withEarlierOffsetAtOverlap()); [EOL]     assertSame(base, base.withLaterOffsetAtOverlap()); [EOL]     assertSame(baseBefore, baseBefore.withEarlierOffsetAtOverlap()); [EOL]     assertEquals(baseBefore, baseBefore.withLaterOffsetAtOverlap()); [EOL]     assertSame(baseAfter, baseAfter.withLaterOffsetAtOverlap()); [EOL]     assertEquals(baseAfter, baseAfter.withEarlierOffsetAtOverlap()); [EOL] }
public void testMinus_long() { [EOL]     DateTime test = new DateTime(TEST_TIME1, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.minus(123456789L); [EOL]     DateTime expected = new DateTime(TEST_TIME1 - 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL] }
public void testMinus_long() { [EOL]     DateTime test = new DateTime(TEST_TIME1, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.minus(123456789L); [EOL]     DateTime expected = new DateTime(TEST_TIME1 - 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL] }
public void testMinus_long() { [EOL]     DateTime test = new DateTime(TEST_TIME1, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.minus(123456789L); [EOL]     DateTime expected = new DateTime(TEST_TIME1 - 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL] }
public void testPropertyGetCenturyOfEra() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertSame(test.getChronology().centuryOfEra(), test.centuryOfEra().getField()); [EOL]     assertEquals("centuryOfEra", test.centuryOfEra().getName()); [EOL]     assertEquals("Property[centuryOfEra]", test.centuryOfEra().toString()); [EOL]     assertSame(test, test.centuryOfEra().getDateTime()); [EOL]     assertEquals(20, test.centuryOfEra().get()); [EOL]     assertEquals("20", test.centuryOfEra().getAsString()); [EOL]     assertEquals("20", test.centuryOfEra().getAsText()); [EOL]     assertEquals("20", test.centuryOfEra().getAsText(Locale.FRENCH)); [EOL]     assertEquals("20", test.centuryOfEra().getAsShortText()); [EOL]     assertEquals("20", test.centuryOfEra().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().centuries(), test.centuryOfEra().getDurationField()); [EOL]     assertEquals(test.getChronology().eras(), test.centuryOfEra().getRangeDurationField()); [EOL]     assertEquals(7, test.centuryOfEra().getMaximumTextLength(null)); [EOL]     assertEquals(7, test.centuryOfEra().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyAddLongDayOfWeek() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime copy = test.dayOfWeek().addToCopy(1L); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2004-06-10T00:00:00.000+01:00", copy.toString()); [EOL] }
public void testPropertyAddLongDayOfWeek() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime copy = test.dayOfWeek().addToCopy(1L); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2004-06-10T00:00:00.000+01:00", copy.toString()); [EOL] }
public void testPropertyWithMaximumValueMillisOfDayDSTGap() { [EOL]     DateTimeZone paris = DateTimeZone.forID("Europe/Paris"); [EOL]     DateTime dt = new DateTime(1926, 4, 17, 18, 0, 0, 0, paris); [EOL]     DateTime test = dt.millisOfDay().withMaximumValue(); [EOL]     assertEquals("1926-04-17T22:59:59.999Z", test.toString()); [EOL] }
public void testToString() { [EOL]     DateTimeZone paris = DateTimeZone.forID("Europe/Paris"); [EOL]     ISOChronology isoParis = ISOChronology.getInstance(paris); [EOL]     assertEquals("ISOChronology[Europe/Paris]", isoParis.toString()); [EOL]     assertEquals("GJChronology[Europe/Paris]", GJChronology.getInstance(paris).toString()); [EOL]     assertEquals("GregorianChronology[Europe/Paris]", GregorianChronology.getInstance(paris).toString()); [EOL]     assertEquals("JulianChronology[Europe/Paris]", JulianChronology.getInstance(paris).toString()); [EOL]     assertEquals("BuddhistChronology[Europe/Paris]", BuddhistChronology.getInstance(paris).toString()); [EOL]     assertEquals("CopticChronology[Europe/Paris]", CopticChronology.getInstance(paris).toString()); [EOL]     assertEquals("EthiopicChronology[Europe/Paris]", EthiopicChronology.getInstance(paris).toString()); [EOL]     assertEquals("IslamicChronology[Europe/Paris]", IslamicChronology.getInstance(paris).toString()); [EOL]     assertEquals("LenientChronology[ISOChronology[Europe/Paris]]", LenientChronology.getInstance(isoParis).toString()); [EOL]     assertEquals("StrictChronology[ISOChronology[Europe/Paris]]", StrictChronology.getInstance(isoParis).toString()); [EOL]     assertEquals("LimitChronology[ISOChronology[Europe/Paris], NoLimit, NoLimit]", LimitChronology.getInstance(isoParis, null, null).toString()); [EOL]     assertEquals("ZonedChronology[ISOChronology[UTC], Europe/Paris]", ZonedChronology.getInstance(isoParis, paris).toString()); [EOL] }
public void testToString() { [EOL]     DateTimeZone paris = DateTimeZone.forID("Europe/Paris"); [EOL]     ISOChronology isoParis = ISOChronology.getInstance(paris); [EOL]     assertEquals("ISOChronology[Europe/Paris]", isoParis.toString()); [EOL]     assertEquals("GJChronology[Europe/Paris]", GJChronology.getInstance(paris).toString()); [EOL]     assertEquals("GregorianChronology[Europe/Paris]", GregorianChronology.getInstance(paris).toString()); [EOL]     assertEquals("JulianChronology[Europe/Paris]", JulianChronology.getInstance(paris).toString()); [EOL]     assertEquals("BuddhistChronology[Europe/Paris]", BuddhistChronology.getInstance(paris).toString()); [EOL]     assertEquals("CopticChronology[Europe/Paris]", CopticChronology.getInstance(paris).toString()); [EOL]     assertEquals("EthiopicChronology[Europe/Paris]", EthiopicChronology.getInstance(paris).toString()); [EOL]     assertEquals("IslamicChronology[Europe/Paris]", IslamicChronology.getInstance(paris).toString()); [EOL]     assertEquals("LenientChronology[ISOChronology[Europe/Paris]]", LenientChronology.getInstance(isoParis).toString()); [EOL]     assertEquals("StrictChronology[ISOChronology[Europe/Paris]]", StrictChronology.getInstance(isoParis).toString()); [EOL]     assertEquals("LimitChronology[ISOChronology[Europe/Paris], NoLimit, NoLimit]", LimitChronology.getInstance(isoParis, null, null).toString()); [EOL]     assertEquals("ZonedChronology[ISOChronology[UTC], Europe/Paris]", ZonedChronology.getInstance(isoParis, paris).toString()); [EOL] }
public void testToString() { [EOL]     DateTimeZone paris = DateTimeZone.forID("Europe/Paris"); [EOL]     ISOChronology isoParis = ISOChronology.getInstance(paris); [EOL]     assertEquals("ISOChronology[Europe/Paris]", isoParis.toString()); [EOL]     assertEquals("GJChronology[Europe/Paris]", GJChronology.getInstance(paris).toString()); [EOL]     assertEquals("GregorianChronology[Europe/Paris]", GregorianChronology.getInstance(paris).toString()); [EOL]     assertEquals("JulianChronology[Europe/Paris]", JulianChronology.getInstance(paris).toString()); [EOL]     assertEquals("BuddhistChronology[Europe/Paris]", BuddhistChronology.getInstance(paris).toString()); [EOL]     assertEquals("CopticChronology[Europe/Paris]", CopticChronology.getInstance(paris).toString()); [EOL]     assertEquals("EthiopicChronology[Europe/Paris]", EthiopicChronology.getInstance(paris).toString()); [EOL]     assertEquals("IslamicChronology[Europe/Paris]", IslamicChronology.getInstance(paris).toString()); [EOL]     assertEquals("LenientChronology[ISOChronology[Europe/Paris]]", LenientChronology.getInstance(isoParis).toString()); [EOL]     assertEquals("StrictChronology[ISOChronology[Europe/Paris]]", StrictChronology.getInstance(isoParis).toString()); [EOL]     assertEquals("LimitChronology[ISOChronology[Europe/Paris], NoLimit, NoLimit]", LimitChronology.getInstance(isoParis, null, null).toString()); [EOL]     assertEquals("ZonedChronology[ISOChronology[UTC], Europe/Paris]", ZonedChronology.getInstance(isoParis, paris).toString()); [EOL] }
public void testIsLocalDateTimeGap_Berlin() { [EOL]     DateTimeZone zone = DateTimeZone.forID("Europe/Berlin"); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 1, 0))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 1, 59, 59, 99))); [EOL]     assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 0))); [EOL]     assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 30))); [EOL]     assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 59, 59, 99))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 3, 0))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 4, 0))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 1, 30))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 2, 30))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 3, 30))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 12, 24, 12, 34))); [EOL] }
public void testIsLocalDateTimeGap_Berlin() { [EOL]     DateTimeZone zone = DateTimeZone.forID("Europe/Berlin"); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 1, 0))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 1, 59, 59, 99))); [EOL]     assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 0))); [EOL]     assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 30))); [EOL]     assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 59, 59, 99))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 3, 0))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 4, 0))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 1, 30))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 2, 30))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 3, 30))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 12, 24, 12, 34))); [EOL] }
public void testIsLocalDateTimeGap_Berlin() { [EOL]     DateTimeZone zone = DateTimeZone.forID("Europe/Berlin"); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 1, 0))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 1, 59, 59, 99))); [EOL]     assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 0))); [EOL]     assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 30))); [EOL]     assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 59, 59, 99))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 3, 0))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 4, 0))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 1, 30))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 2, 30))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 3, 30))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 12, 24, 12, 34))); [EOL] }
public void testIsLocalDateTimeGap_Berlin() { [EOL]     DateTimeZone zone = DateTimeZone.forID("Europe/Berlin"); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 1, 0))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 1, 59, 59, 99))); [EOL]     assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 0))); [EOL]     assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 30))); [EOL]     assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 59, 59, 99))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 3, 0))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 4, 0))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 1, 30))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 2, 30))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 3, 30))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 12, 24, 12, 34))); [EOL] }
public void testIsLocalDateTimeGap_Berlin() { [EOL]     DateTimeZone zone = DateTimeZone.forID("Europe/Berlin"); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 1, 0))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 1, 59, 59, 99))); [EOL]     assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 0))); [EOL]     assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 30))); [EOL]     assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 59, 59, 99))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 3, 0))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 4, 0))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 1, 30))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 2, 30))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 3, 30))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 12, 24, 12, 34))); [EOL] }
public void testIsLocalDateTimeGap_Berlin() { [EOL]     DateTimeZone zone = DateTimeZone.forID("Europe/Berlin"); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 1, 0))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 1, 59, 59, 99))); [EOL]     assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 0))); [EOL]     assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 30))); [EOL]     assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 59, 59, 99))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 3, 0))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 4, 0))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 1, 30))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 2, 30))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 3, 30))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 12, 24, 12, 34))); [EOL] }
public void testIsLocalDateTimeGap_Berlin() { [EOL]     DateTimeZone zone = DateTimeZone.forID("Europe/Berlin"); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 1, 0))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 1, 59, 59, 99))); [EOL]     assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 0))); [EOL]     assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 30))); [EOL]     assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 59, 59, 99))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 3, 0))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 4, 0))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 1, 30))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 2, 30))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 3, 30))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 12, 24, 12, 34))); [EOL] }
public void testIsLocalDateTimeGap_Berlin() { [EOL]     DateTimeZone zone = DateTimeZone.forID("Europe/Berlin"); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 1, 0))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 1, 59, 59, 99))); [EOL]     assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 0))); [EOL]     assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 30))); [EOL]     assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 59, 59, 99))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 3, 0))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 4, 0))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 1, 30))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 2, 30))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 3, 30))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 12, 24, 12, 34))); [EOL] }
public void testIsLocalDateTimeGap_Berlin() { [EOL]     DateTimeZone zone = DateTimeZone.forID("Europe/Berlin"); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 1, 0))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 1, 59, 59, 99))); [EOL]     assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 0))); [EOL]     assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 30))); [EOL]     assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 59, 59, 99))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 3, 0))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 4, 0))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 1, 30))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 2, 30))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 3, 30))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 12, 24, 12, 34))); [EOL] }
public void testIsLocalDateTimeGap_Berlin() { [EOL]     DateTimeZone zone = DateTimeZone.forID("Europe/Berlin"); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 1, 0))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 1, 59, 59, 99))); [EOL]     assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 0))); [EOL]     assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 30))); [EOL]     assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 59, 59, 99))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 3, 0))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 4, 0))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 1, 30))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 2, 30))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 3, 30))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 12, 24, 12, 34))); [EOL] }
public void testIsLocalDateTimeGap_Berlin() { [EOL]     DateTimeZone zone = DateTimeZone.forID("Europe/Berlin"); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 1, 0))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 1, 59, 59, 99))); [EOL]     assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 0))); [EOL]     assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 30))); [EOL]     assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 59, 59, 99))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 3, 0))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 4, 0))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 1, 30))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 2, 30))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 3, 30))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 12, 24, 12, 34))); [EOL] }
public void testPrinterParserMethods() { [EOL]     Period p = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     PeriodFormatter f2 = new PeriodFormatter(f.getPrinter(), f.getParser()); [EOL]     assertEquals(f.getPrinter(), f2.getPrinter()); [EOL]     assertEquals(f.getParser(), f2.getParser()); [EOL]     assertEquals(true, f2.isPrinter()); [EOL]     assertEquals(true, f2.isParser()); [EOL]     assertNotNull(f2.print(p)); [EOL]     assertNotNull(f2.parsePeriod("P1Y2M3W4DT5H6M7.008S")); [EOL]     f2 = new PeriodFormatter(f.getPrinter(), null); [EOL]     assertEquals(f.getPrinter(), f2.getPrinter()); [EOL]     assertEquals(null, f2.getParser()); [EOL]     assertEquals(true, f2.isPrinter()); [EOL]     assertEquals(false, f2.isParser()); [EOL]     assertNotNull(f2.print(p)); [EOL]     try { [EOL]         assertNotNull(f2.parsePeriod("P1Y2M3W4DT5H6M7.008S")); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     f2 = new PeriodFormatter(null, f.getParser()); [EOL]     assertEquals(null, f2.getPrinter()); [EOL]     assertEquals(f.getParser(), f2.getParser()); [EOL]     assertEquals(false, f2.isPrinter()); [EOL]     assertEquals(true, f2.isParser()); [EOL]     try { [EOL]         f2.print(p); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     assertNotNull(f2.parsePeriod("P1Y2M3W4DT5H6M7.008S")); [EOL] }
public void testPrinterParserMethods() { [EOL]     Period p = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     PeriodFormatter f2 = new PeriodFormatter(f.getPrinter(), f.getParser()); [EOL]     assertEquals(f.getPrinter(), f2.getPrinter()); [EOL]     assertEquals(f.getParser(), f2.getParser()); [EOL]     assertEquals(true, f2.isPrinter()); [EOL]     assertEquals(true, f2.isParser()); [EOL]     assertNotNull(f2.print(p)); [EOL]     assertNotNull(f2.parsePeriod("P1Y2M3W4DT5H6M7.008S")); [EOL]     f2 = new PeriodFormatter(f.getPrinter(), null); [EOL]     assertEquals(f.getPrinter(), f2.getPrinter()); [EOL]     assertEquals(null, f2.getParser()); [EOL]     assertEquals(true, f2.isPrinter()); [EOL]     assertEquals(false, f2.isParser()); [EOL]     assertNotNull(f2.print(p)); [EOL]     try { [EOL]         assertNotNull(f2.parsePeriod("P1Y2M3W4DT5H6M7.008S")); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     f2 = new PeriodFormatter(null, f.getParser()); [EOL]     assertEquals(null, f2.getPrinter()); [EOL]     assertEquals(f.getParser(), f2.getParser()); [EOL]     assertEquals(false, f2.isPrinter()); [EOL]     assertEquals(true, f2.isParser()); [EOL]     try { [EOL]         f2.print(p); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     assertNotNull(f2.parsePeriod("P1Y2M3W4DT5H6M7.008S")); [EOL] }
public void testPrinterParserMethods() { [EOL]     Period p = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     PeriodFormatter f2 = new PeriodFormatter(f.getPrinter(), f.getParser()); [EOL]     assertEquals(f.getPrinter(), f2.getPrinter()); [EOL]     assertEquals(f.getParser(), f2.getParser()); [EOL]     assertEquals(true, f2.isPrinter()); [EOL]     assertEquals(true, f2.isParser()); [EOL]     assertNotNull(f2.print(p)); [EOL]     assertNotNull(f2.parsePeriod("P1Y2M3W4DT5H6M7.008S")); [EOL]     f2 = new PeriodFormatter(f.getPrinter(), null); [EOL]     assertEquals(f.getPrinter(), f2.getPrinter()); [EOL]     assertEquals(null, f2.getParser()); [EOL]     assertEquals(true, f2.isPrinter()); [EOL]     assertEquals(false, f2.isParser()); [EOL]     assertNotNull(f2.print(p)); [EOL]     try { [EOL]         assertNotNull(f2.parsePeriod("P1Y2M3W4DT5H6M7.008S")); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     f2 = new PeriodFormatter(null, f.getParser()); [EOL]     assertEquals(null, f2.getPrinter()); [EOL]     assertEquals(f.getParser(), f2.getParser()); [EOL]     assertEquals(false, f2.isPrinter()); [EOL]     assertEquals(true, f2.isParser()); [EOL]     try { [EOL]         f2.print(p); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     assertNotNull(f2.parsePeriod("P1Y2M3W4DT5H6M7.008S")); [EOL] }
public void testPrinterParserMethods() { [EOL]     Period p = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     PeriodFormatter f2 = new PeriodFormatter(f.getPrinter(), f.getParser()); [EOL]     assertEquals(f.getPrinter(), f2.getPrinter()); [EOL]     assertEquals(f.getParser(), f2.getParser()); [EOL]     assertEquals(true, f2.isPrinter()); [EOL]     assertEquals(true, f2.isParser()); [EOL]     assertNotNull(f2.print(p)); [EOL]     assertNotNull(f2.parsePeriod("P1Y2M3W4DT5H6M7.008S")); [EOL]     f2 = new PeriodFormatter(f.getPrinter(), null); [EOL]     assertEquals(f.getPrinter(), f2.getPrinter()); [EOL]     assertEquals(null, f2.getParser()); [EOL]     assertEquals(true, f2.isPrinter()); [EOL]     assertEquals(false, f2.isParser()); [EOL]     assertNotNull(f2.print(p)); [EOL]     try { [EOL]         assertNotNull(f2.parsePeriod("P1Y2M3W4DT5H6M7.008S")); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     f2 = new PeriodFormatter(null, f.getParser()); [EOL]     assertEquals(null, f2.getPrinter()); [EOL]     assertEquals(f.getParser(), f2.getParser()); [EOL]     assertEquals(false, f2.isPrinter()); [EOL]     assertEquals(true, f2.isParser()); [EOL]     try { [EOL]         f2.print(p); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     assertNotNull(f2.parsePeriod("P1Y2M3W4DT5H6M7.008S")); [EOL] }
public void testFormatSeparatorIfFieldsAfter() { [EOL]     PeriodFormatter f = builder.appendYears().appendSeparatorIfFieldsAfter("T").appendHours().toFormatter(); [EOL]     assertEquals("1T5", f.print(PERIOD)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("T5", f.print(TIME_PERIOD)); [EOL]     assertEquals(2, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1", f.print(DATE_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null)); [EOL] }
public void testFormatAppend_PrinterParser_PrinterParser() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, parser).appendMonths(); [EOL]     assertNotNull(bld.toPrinter()); [EOL]     assertNotNull(bld.toParser()); [EOL]     PeriodFormatter f = bld.toFormatter(); [EOL]     assertEquals("1-2", f.print(PERIOD)); [EOL]     assertEquals(new Period(0, 2, 1, 0, 0, 0, 0, 0), f.parsePeriod("1-2")); [EOL] }
public void testFormatAppend_PrinterParser_PrinterParser() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, parser).appendMonths(); [EOL]     assertNotNull(bld.toPrinter()); [EOL]     assertNotNull(bld.toParser()); [EOL]     PeriodFormatter f = bld.toFormatter(); [EOL]     assertEquals("1-2", f.print(PERIOD)); [EOL]     assertEquals(new Period(0, 2, 1, 0, 0, 0, 0, 0), f.parsePeriod("1-2")); [EOL] }
public void testFormatAppend_PrinterParser_PrinterParser() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, parser).appendMonths(); [EOL]     assertNotNull(bld.toPrinter()); [EOL]     assertNotNull(bld.toParser()); [EOL]     PeriodFormatter f = bld.toFormatter(); [EOL]     assertEquals("1-2", f.print(PERIOD)); [EOL]     assertEquals(new Period(0, 2, 1, 0, 0, 0, 0, 0), f.parsePeriod("1-2")); [EOL] }
public void testFormatAppend_PrinterParser_PrinterParser() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, parser).appendMonths(); [EOL]     assertNotNull(bld.toPrinter()); [EOL]     assertNotNull(bld.toParser()); [EOL]     PeriodFormatter f = bld.toFormatter(); [EOL]     assertEquals("1-2", f.print(PERIOD)); [EOL]     assertEquals(new Period(0, 2, 1, 0, 0, 0, 0, 0), f.parsePeriod("1-2")); [EOL] }
public void testFormatAppend_PrinterParser_PrinterParser() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, parser).appendMonths(); [EOL]     assertNotNull(bld.toPrinter()); [EOL]     assertNotNull(bld.toParser()); [EOL]     PeriodFormatter f = bld.toFormatter(); [EOL]     assertEquals("1-2", f.print(PERIOD)); [EOL]     assertEquals(new Period(0, 2, 1, 0, 0, 0, 0, 0), f.parsePeriod("1-2")); [EOL] }
public void testFormatAppend_PrinterParser_PrinterParser() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, parser).appendMonths(); [EOL]     assertNotNull(bld.toPrinter()); [EOL]     assertNotNull(bld.toParser()); [EOL]     PeriodFormatter f = bld.toFormatter(); [EOL]     assertEquals("1-2", f.print(PERIOD)); [EOL]     assertEquals(new Period(0, 2, 1, 0, 0, 0, 0, 0), f.parsePeriod("1-2")); [EOL] }
public void testFormatAppend_PrinterParser_PrinterParser() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, parser).appendMonths(); [EOL]     assertNotNull(bld.toPrinter()); [EOL]     assertNotNull(bld.toParser()); [EOL]     PeriodFormatter f = bld.toFormatter(); [EOL]     assertEquals("1-2", f.print(PERIOD)); [EOL]     assertEquals(new Period(0, 2, 1, 0, 0, 0, 0, 0), f.parsePeriod("1-2")); [EOL] }
public void testFormatAppend_PrinterParser_PrinterParser() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, parser).appendMonths(); [EOL]     assertNotNull(bld.toPrinter()); [EOL]     assertNotNull(bld.toParser()); [EOL]     PeriodFormatter f = bld.toFormatter(); [EOL]     assertEquals("1-2", f.print(PERIOD)); [EOL]     assertEquals(new Period(0, 2, 1, 0, 0, 0, 0, 0), f.parsePeriod("1-2")); [EOL] }
public void testFormatAppend_PrinterParser_PrinterParser() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, parser).appendMonths(); [EOL]     assertNotNull(bld.toPrinter()); [EOL]     assertNotNull(bld.toParser()); [EOL]     PeriodFormatter f = bld.toFormatter(); [EOL]     assertEquals("1-2", f.print(PERIOD)); [EOL]     assertEquals(new Period(0, 2, 1, 0, 0, 0, 0, 0), f.parsePeriod("1-2")); [EOL] }
public void testConstructor_Chrono() throws Throwable { [EOL]     Partial test = new Partial((Chronology) null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(0, test.size()); [EOL]     test = new Partial(GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(0, test.size()); [EOL] }
public void testConstructor_Chrono() throws Throwable { [EOL]     Partial test = new Partial((Chronology) null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(0, test.size()); [EOL]     test = new Partial(GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(0, test.size()); [EOL] }
public void testGetFieldTypes() { [EOL]     Partial test = createHourMinPartial(); [EOL]     DateTimeFieldType[] fields = test.getFieldTypes(); [EOL]     assertEquals(2, fields.length); [EOL]     assertSame(DateTimeFieldType.hourOfDay(), fields[0]); [EOL]     assertSame(DateTimeFieldType.minuteOfHour(), fields[1]); [EOL]     assertNotSame(test.getFieldTypes(), test.getFieldTypes()); [EOL] }
public void testGetFieldTypes() { [EOL]     Partial test = createHourMinPartial(); [EOL]     DateTimeFieldType[] fields = test.getFieldTypes(); [EOL]     assertEquals(2, fields.length); [EOL]     assertSame(DateTimeFieldType.hourOfDay(), fields[0]); [EOL]     assertSame(DateTimeFieldType.minuteOfHour(), fields[1]); [EOL]     assertNotSame(test.getFieldTypes(), test.getFieldTypes()); [EOL] }
public void testGetFieldTypes() { [EOL]     Partial test = createHourMinPartial(); [EOL]     DateTimeFieldType[] fields = test.getFieldTypes(); [EOL]     assertEquals(2, fields.length); [EOL]     assertSame(DateTimeFieldType.hourOfDay(), fields[0]); [EOL]     assertSame(DateTimeFieldType.minuteOfHour(), fields[1]); [EOL]     assertNotSame(test.getFieldTypes(), test.getFieldTypes()); [EOL] }
public void testGetFieldTypes() { [EOL]     Partial test = createHourMinPartial(); [EOL]     DateTimeFieldType[] fields = test.getFieldTypes(); [EOL]     assertEquals(2, fields.length); [EOL]     assertSame(DateTimeFieldType.hourOfDay(), fields[0]); [EOL]     assertSame(DateTimeFieldType.minuteOfHour(), fields[1]); [EOL]     assertNotSame(test.getFieldTypes(), test.getFieldTypes()); [EOL] }
public void testGetFieldTypes() { [EOL]     Partial test = createHourMinPartial(); [EOL]     DateTimeFieldType[] fields = test.getFieldTypes(); [EOL]     assertEquals(2, fields.length); [EOL]     assertSame(DateTimeFieldType.hourOfDay(), fields[0]); [EOL]     assertSame(DateTimeFieldType.minuteOfHour(), fields[1]); [EOL]     assertNotSame(test.getFieldTypes(), test.getFieldTypes()); [EOL] }
public void testGetFieldTypes() { [EOL]     Partial test = createHourMinPartial(); [EOL]     DateTimeFieldType[] fields = test.getFieldTypes(); [EOL]     assertEquals(2, fields.length); [EOL]     assertSame(DateTimeFieldType.hourOfDay(), fields[0]); [EOL]     assertSame(DateTimeFieldType.minuteOfHour(), fields[1]); [EOL]     assertNotSame(test.getFieldTypes(), test.getFieldTypes()); [EOL] }
public void testGetFieldTypes() { [EOL]     Partial test = createHourMinPartial(); [EOL]     DateTimeFieldType[] fields = test.getFieldTypes(); [EOL]     assertEquals(2, fields.length); [EOL]     assertSame(DateTimeFieldType.hourOfDay(), fields[0]); [EOL]     assertSame(DateTimeFieldType.minuteOfHour(), fields[1]); [EOL]     assertNotSame(test.getFieldTypes(), test.getFieldTypes()); [EOL] }
public void testWith1() { [EOL]     Partial test = createHourMinPartial(); [EOL]     Partial result = test.with(DateTimeFieldType.hourOfDay(), 15); [EOL]     check(test, 10, 20); [EOL]     check(result, 15, 20); [EOL] }
public void testWith1() { [EOL]     Partial test = createHourMinPartial(); [EOL]     Partial result = test.with(DateTimeFieldType.hourOfDay(), 15); [EOL]     check(test, 10, 20); [EOL]     check(result, 15, 20); [EOL] }
public void testWith1() { [EOL]     Partial test = createHourMinPartial(); [EOL]     Partial result = test.with(DateTimeFieldType.hourOfDay(), 15); [EOL]     check(test, 10, 20); [EOL]     check(result, 15, 20); [EOL] }
public void testWith1() { [EOL]     Partial test = createHourMinPartial(); [EOL]     Partial result = test.with(DateTimeFieldType.hourOfDay(), 15); [EOL]     check(test, 10, 20); [EOL]     check(result, 15, 20); [EOL] }
public void testWithout2() { [EOL]     Partial test = createHourMinPartial(); [EOL]     Partial result = test.without((DateTimeFieldType) null); [EOL]     check(test, 10, 20); [EOL]     check(result, 10, 20); [EOL] }
public void testWithout2() { [EOL]     Partial test = createHourMinPartial(); [EOL]     Partial result = test.without((DateTimeFieldType) null); [EOL]     check(test, 10, 20); [EOL]     check(result, 10, 20); [EOL] }
public void testWith1() { [EOL]     Partial test = createHourMinPartial(); [EOL]     Partial result = test.with(DateTimeFieldType.hourOfDay(), 15); [EOL]     check(test, 10, 20); [EOL]     check(result, 15, 20); [EOL] }
public void testWith1() { [EOL]     Partial test = createHourMinPartial(); [EOL]     Partial result = test.with(DateTimeFieldType.hourOfDay(), 15); [EOL]     check(test, 10, 20); [EOL]     check(result, 15, 20); [EOL] }
public void testWith1() { [EOL]     Partial test = createHourMinPartial(); [EOL]     Partial result = test.with(DateTimeFieldType.hourOfDay(), 15); [EOL]     check(test, 10, 20); [EOL]     check(result, 15, 20); [EOL] }
public void testWith1() { [EOL]     Partial test = createHourMinPartial(); [EOL]     Partial result = test.with(DateTimeFieldType.hourOfDay(), 15); [EOL]     check(test, 10, 20); [EOL]     check(result, 15, 20); [EOL] }
public void testWith1() { [EOL]     Partial test = createHourMinPartial(); [EOL]     Partial result = test.with(DateTimeFieldType.hourOfDay(), 15); [EOL]     check(test, 10, 20); [EOL]     check(result, 15, 20); [EOL] }
public void testWith1() { [EOL]     Partial test = createHourMinPartial(); [EOL]     Partial result = test.with(DateTimeFieldType.hourOfDay(), 15); [EOL]     check(test, 10, 20); [EOL]     check(result, 15, 20); [EOL] }
public void testWith1() { [EOL]     Partial test = createHourMinPartial(); [EOL]     Partial result = test.with(DateTimeFieldType.hourOfDay(), 15); [EOL]     check(test, 10, 20); [EOL]     check(result, 15, 20); [EOL] }
public void testPropertyGetMinute() { [EOL]     Partial test = new Partial(TYPES, VALUES); [EOL]     assertSame(test.getChronology().minuteOfHour(), test.property(DateTimeFieldType.minuteOfHour()).getField()); [EOL]     assertEquals("minuteOfHour", test.property(DateTimeFieldType.minuteOfHour()).getName()); [EOL]     assertEquals("Property[minuteOfHour]", test.property(DateTimeFieldType.minuteOfHour()).toString()); [EOL]     assertSame(test, test.property(DateTimeFieldType.minuteOfHour()).getReadablePartial()); [EOL]     assertSame(test, test.property(DateTimeFieldType.minuteOfHour()).getPartial()); [EOL]     assertEquals(20, test.property(DateTimeFieldType.minuteOfHour()).get()); [EOL]     assertEquals("20", test.property(DateTimeFieldType.minuteOfHour()).getAsString()); [EOL]     assertEquals("20", test.property(DateTimeFieldType.minuteOfHour()).getAsText()); [EOL]     assertEquals("20", test.property(DateTimeFieldType.minuteOfHour()).getAsText(Locale.FRENCH)); [EOL]     assertEquals("20", test.property(DateTimeFieldType.minuteOfHour()).getAsShortText()); [EOL]     assertEquals("20", test.property(DateTimeFieldType.minuteOfHour()).getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().minutes(), test.property(DateTimeFieldType.minuteOfHour()).getDurationField()); [EOL]     assertEquals(test.getChronology().hours(), test.property(DateTimeFieldType.minuteOfHour()).getRangeDurationField()); [EOL]     assertEquals(2, test.property(DateTimeFieldType.minuteOfHour()).getMaximumTextLength(null)); [EOL]     assertEquals(2, test.property(DateTimeFieldType.minuteOfHour()).getMaximumShortTextLength(null)); [EOL] }
public void testPropertyGetMinute() { [EOL]     Partial test = new Partial(TYPES, VALUES); [EOL]     assertSame(test.getChronology().minuteOfHour(), test.property(DateTimeFieldType.minuteOfHour()).getField()); [EOL]     assertEquals("minuteOfHour", test.property(DateTimeFieldType.minuteOfHour()).getName()); [EOL]     assertEquals("Property[minuteOfHour]", test.property(DateTimeFieldType.minuteOfHour()).toString()); [EOL]     assertSame(test, test.property(DateTimeFieldType.minuteOfHour()).getReadablePartial()); [EOL]     assertSame(test, test.property(DateTimeFieldType.minuteOfHour()).getPartial()); [EOL]     assertEquals(20, test.property(DateTimeFieldType.minuteOfHour()).get()); [EOL]     assertEquals("20", test.property(DateTimeFieldType.minuteOfHour()).getAsString()); [EOL]     assertEquals("20", test.property(DateTimeFieldType.minuteOfHour()).getAsText()); [EOL]     assertEquals("20", test.property(DateTimeFieldType.minuteOfHour()).getAsText(Locale.FRENCH)); [EOL]     assertEquals("20", test.property(DateTimeFieldType.minuteOfHour()).getAsShortText()); [EOL]     assertEquals("20", test.property(DateTimeFieldType.minuteOfHour()).getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().minutes(), test.property(DateTimeFieldType.minuteOfHour()).getDurationField()); [EOL]     assertEquals(test.getChronology().hours(), test.property(DateTimeFieldType.minuteOfHour()).getRangeDurationField()); [EOL]     assertEquals(2, test.property(DateTimeFieldType.minuteOfHour()).getMaximumTextLength(null)); [EOL]     assertEquals(2, test.property(DateTimeFieldType.minuteOfHour()).getMaximumShortTextLength(null)); [EOL] }
public void testConstructor_RI_RI4() throws Throwable { [EOL]     DateTime dt1 = null; [EOL]     DateTime dt2 = null; [EOL]     Duration test = new Duration(dt1, dt2); [EOL]     assertEquals(0L, test.getMillis()); [EOL] }
public void testConstructor_RI_RI4() throws Throwable { [EOL]     DateTime dt1 = null; [EOL]     DateTime dt2 = null; [EOL]     Duration test = new Duration(dt1, dt2); [EOL]     assertEquals(0L, test.getMillis()); [EOL] }
public void testToPeriod_Chronology() { [EOL]     long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L; [EOL]     Duration test = new Duration(length); [EOL]     Period result = test.toPeriod(ISOChronology.getInstanceUTC()); [EOL]     assertEquals(new Period(test, ISOChronology.getInstanceUTC()), result); [EOL]     assertEquals(new Period(test.getMillis(), ISOChronology.getInstanceUTC()), result); [EOL] }
public void testToPeriod_Chronology() { [EOL]     long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L; [EOL]     Duration test = new Duration(length); [EOL]     Period result = test.toPeriod(ISOChronology.getInstanceUTC()); [EOL]     assertEquals(new Period(test, ISOChronology.getInstanceUTC()), result); [EOL]     assertEquals(new Period(test.getMillis(), ISOChronology.getInstanceUTC()), result); [EOL] }
public void testToPeriod_PeriodType_Chronology() { [EOL]     long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L; [EOL]     Duration test = new Duration(length); [EOL]     Period result = test.toPeriod(PeriodType.standard().withMillisRemoved(), ISOChronology.getInstanceUTC()); [EOL]     assertEquals(new Period(test, PeriodType.standard().withMillisRemoved(), ISOChronology.getInstanceUTC()), result); [EOL]     assertEquals(new Period(test.getMillis(), PeriodType.standard().withMillisRemoved(), ISOChronology.getInstanceUTC()), result); [EOL] }
public void testToPeriod_PeriodType_Chronology() { [EOL]     long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L; [EOL]     Duration test = new Duration(length); [EOL]     Period result = test.toPeriod(PeriodType.standard().withMillisRemoved(), ISOChronology.getInstanceUTC()); [EOL]     assertEquals(new Period(test, PeriodType.standard().withMillisRemoved(), ISOChronology.getInstanceUTC()), result); [EOL]     assertEquals(new Period(test.getMillis(), PeriodType.standard().withMillisRemoved(), ISOChronology.getInstanceUTC()), result); [EOL] }
public void testToPeriodFrom_PeriodType() { [EOL]     long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L; [EOL]     Duration test = new Duration(length); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     Period result = test.toPeriodFrom(dt, PeriodType.standard().withMillisRemoved()); [EOL]     assertEquals(new Period(dt, test, PeriodType.standard().withMillisRemoved()), result); [EOL] }
public void testToPeriodFrom_PeriodType() { [EOL]     long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L; [EOL]     Duration test = new Duration(length); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     Period result = test.toPeriodFrom(dt, PeriodType.standard().withMillisRemoved()); [EOL]     assertEquals(new Period(dt, test, PeriodType.standard().withMillisRemoved()), result); [EOL] }
public void testToString() { [EOL]     Years test = Years.years(20); [EOL]     assertEquals("P20Y", test.toString()); [EOL]     test = Years.years(-20); [EOL]     assertEquals("P-20Y", test.toString()); [EOL] }
public void testToString() { [EOL]     Years test = Years.years(20); [EOL]     assertEquals("P20Y", test.toString()); [EOL]     test = Years.years(-20); [EOL]     assertEquals("P-20Y", test.toString()); [EOL] }
public void testToString() { [EOL]     Years test = Years.years(20); [EOL]     assertEquals("P20Y", test.toString()); [EOL]     test = Years.years(-20); [EOL]     assertEquals("P-20Y", test.toString()); [EOL] }
public void testToString() { [EOL]     Years test = Years.years(20); [EOL]     assertEquals("P20Y", test.toString()); [EOL]     test = Years.years(-20); [EOL]     assertEquals("P-20Y", test.toString()); [EOL] }
public void testToString() { [EOL]     Years test = Years.years(20); [EOL]     assertEquals("P20Y", test.toString()); [EOL]     test = Years.years(-20); [EOL]     assertEquals("P-20Y", test.toString()); [EOL] }
public void testToString() { [EOL]     Years test = Years.years(20); [EOL]     assertEquals("P20Y", test.toString()); [EOL]     test = Years.years(-20); [EOL]     assertEquals("P-20Y", test.toString()); [EOL] }
public void testToString() { [EOL]     Years test = Years.years(20); [EOL]     assertEquals("P20Y", test.toString()); [EOL]     test = Years.years(-20); [EOL]     assertEquals("P-20Y", test.toString()); [EOL] }
public void testFactory_yearsBetween_RInstant() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2009, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2012, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     assertEquals(3, Years.yearsBetween(start, end1).getYears()); [EOL]     assertEquals(0, Years.yearsBetween(start, start).getYears()); [EOL]     assertEquals(0, Years.yearsBetween(end1, end1).getYears()); [EOL]     assertEquals(-3, Years.yearsBetween(end1, start).getYears()); [EOL]     assertEquals(6, Years.yearsBetween(start, end2).getYears()); [EOL] }
public void testFactory_yearsBetween_RInstant() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2009, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2012, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     assertEquals(3, Years.yearsBetween(start, end1).getYears()); [EOL]     assertEquals(0, Years.yearsBetween(start, start).getYears()); [EOL]     assertEquals(0, Years.yearsBetween(end1, end1).getYears()); [EOL]     assertEquals(-3, Years.yearsBetween(end1, start).getYears()); [EOL]     assertEquals(6, Years.yearsBetween(start, end2).getYears()); [EOL] }
public void testFactory_yearsBetween_RInstant() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2009, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2012, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     assertEquals(3, Years.yearsBetween(start, end1).getYears()); [EOL]     assertEquals(0, Years.yearsBetween(start, start).getYears()); [EOL]     assertEquals(0, Years.yearsBetween(end1, end1).getYears()); [EOL]     assertEquals(-3, Years.yearsBetween(end1, start).getYears()); [EOL]     assertEquals(6, Years.yearsBetween(start, end2).getYears()); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testFactory_yearsBetween_RPartial() { [EOL]     LocalDate start = new LocalDate(2006, 6, 9); [EOL]     LocalDate end1 = new LocalDate(2009, 6, 9); [EOL]     YearMonthDay end2 = new YearMonthDay(2012, 6, 9); [EOL]     assertEquals(3, Years.yearsBetween(start, end1).getYears()); [EOL]     assertEquals(0, Years.yearsBetween(start, start).getYears()); [EOL]     assertEquals(0, Years.yearsBetween(end1, end1).getYears()); [EOL]     assertEquals(-3, Years.yearsBetween(end1, start).getYears()); [EOL]     assertEquals(6, Years.yearsBetween(start, end2).getYears()); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testFactory_yearsBetween_RPartial() { [EOL]     LocalDate start = new LocalDate(2006, 6, 9); [EOL]     LocalDate end1 = new LocalDate(2009, 6, 9); [EOL]     YearMonthDay end2 = new YearMonthDay(2012, 6, 9); [EOL]     assertEquals(3, Years.yearsBetween(start, end1).getYears()); [EOL]     assertEquals(0, Years.yearsBetween(start, start).getYears()); [EOL]     assertEquals(0, Years.yearsBetween(end1, end1).getYears()); [EOL]     assertEquals(-3, Years.yearsBetween(end1, start).getYears()); [EOL]     assertEquals(6, Years.yearsBetween(start, end2).getYears()); [EOL] }
public void testToString() { [EOL]     Years test = Years.years(20); [EOL]     assertEquals("P20Y", test.toString()); [EOL]     test = Years.years(-20); [EOL]     assertEquals("P-20Y", test.toString()); [EOL] }
public void testFactory_yearsBetween_RInstant() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2009, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2012, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     assertEquals(3, Years.yearsBetween(start, end1).getYears()); [EOL]     assertEquals(0, Years.yearsBetween(start, start).getYears()); [EOL]     assertEquals(0, Years.yearsBetween(end1, end1).getYears()); [EOL]     assertEquals(-3, Years.yearsBetween(end1, start).getYears()); [EOL]     assertEquals(6, Years.yearsBetween(start, end2).getYears()); [EOL] }
public void testNegated() { [EOL]     Years test = Years.years(12); [EOL]     assertEquals(-12, test.negated().getYears()); [EOL]     assertEquals(12, test.getYears()); [EOL]     try { [EOL]         Years.MIN_VALUE.negated(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testNegated() { [EOL]     Years test = Years.years(12); [EOL]     assertEquals(-12, test.negated().getYears()); [EOL]     assertEquals(12, test.getYears()); [EOL]     try { [EOL]         Years.MIN_VALUE.negated(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testNegated() { [EOL]     Years test = Years.years(12); [EOL]     assertEquals(-12, test.negated().getYears()); [EOL]     assertEquals(12, test.getYears()); [EOL]     try { [EOL]         Years.MIN_VALUE.negated(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testNegated() { [EOL]     Years test = Years.years(12); [EOL]     assertEquals(-12, test.negated().getYears()); [EOL]     assertEquals(12, test.getYears()); [EOL]     try { [EOL]         Years.MIN_VALUE.negated(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testNegated() { [EOL]     Years test = Years.years(12); [EOL]     assertEquals(-12, test.negated().getYears()); [EOL]     assertEquals(12, test.getYears()); [EOL]     try { [EOL]         Years.MIN_VALUE.negated(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testIsGreaterThan() { [EOL]     assertEquals(true, Years.THREE.isGreaterThan(Years.TWO)); [EOL]     assertEquals(false, Years.THREE.isGreaterThan(Years.THREE)); [EOL]     assertEquals(false, Years.TWO.isGreaterThan(Years.THREE)); [EOL]     assertEquals(true, Years.ONE.isGreaterThan(null)); [EOL]     assertEquals(false, Years.years(-1).isGreaterThan(null)); [EOL] }
public void testIsLessThan() { [EOL]     assertEquals(false, Years.THREE.isLessThan(Years.TWO)); [EOL]     assertEquals(false, Years.THREE.isLessThan(Years.THREE)); [EOL]     assertEquals(true, Years.TWO.isLessThan(Years.THREE)); [EOL]     assertEquals(false, Years.ONE.isLessThan(null)); [EOL]     assertEquals(true, Years.years(-1).isLessThan(null)); [EOL] }
public void testIsLessThan() { [EOL]     assertEquals(false, Years.THREE.isLessThan(Years.TWO)); [EOL]     assertEquals(false, Years.THREE.isLessThan(Years.THREE)); [EOL]     assertEquals(true, Years.TWO.isLessThan(Years.THREE)); [EOL]     assertEquals(false, Years.ONE.isLessThan(null)); [EOL]     assertEquals(true, Years.years(-1).isLessThan(null)); [EOL] }
public void testIsLessThan() { [EOL]     assertEquals(false, Years.THREE.isLessThan(Years.TWO)); [EOL]     assertEquals(false, Years.THREE.isLessThan(Years.THREE)); [EOL]     assertEquals(true, Years.TWO.isLessThan(Years.THREE)); [EOL]     assertEquals(false, Years.ONE.isLessThan(null)); [EOL]     assertEquals(true, Years.years(-1).isLessThan(null)); [EOL] }
public void testIsLessThan() { [EOL]     assertEquals(false, Years.THREE.isLessThan(Years.TWO)); [EOL]     assertEquals(false, Years.THREE.isLessThan(Years.THREE)); [EOL]     assertEquals(true, Years.TWO.isLessThan(Years.THREE)); [EOL]     assertEquals(false, Years.ONE.isLessThan(null)); [EOL]     assertEquals(true, Years.years(-1).isLessThan(null)); [EOL] }
public void testIsLessThan() { [EOL]     assertEquals(false, Years.THREE.isLessThan(Years.TWO)); [EOL]     assertEquals(false, Years.THREE.isLessThan(Years.THREE)); [EOL]     assertEquals(true, Years.TWO.isLessThan(Years.THREE)); [EOL]     assertEquals(false, Years.ONE.isLessThan(null)); [EOL]     assertEquals(true, Years.years(-1).isLessThan(null)); [EOL] }
public void testToString() { [EOL]     Years test = Years.years(20); [EOL]     assertEquals("P20Y", test.toString()); [EOL]     test = Years.years(-20); [EOL]     assertEquals("P-20Y", test.toString()); [EOL] }
public void testGet_DateTimeFieldType() { [EOL]     Instant test = new Instant(); [EOL]     assertEquals(1, test.get(DateTimeFieldType.era())); [EOL]     assertEquals(20, test.get(DateTimeFieldType.centuryOfEra())); [EOL]     assertEquals(2, test.get(DateTimeFieldType.yearOfCentury())); [EOL]     assertEquals(2002, test.get(DateTimeFieldType.yearOfEra())); [EOL]     assertEquals(2002, test.get(DateTimeFieldType.year())); [EOL]     assertEquals(6, test.get(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(9, test.get(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(2002, test.get(DateTimeFieldType.weekyear())); [EOL]     assertEquals(23, test.get(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(7, test.get(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(160, test.get(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(24, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.minuteOfDay())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.secondOfDay())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.millisOfDay())); [EOL]     try { [EOL]         test.get((DateTimeFieldType) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testConstructor_nullObject() throws Throwable { [EOL]     Instant test = new Instant((Object) null); [EOL]     assertEquals(ISOChronology.getInstanceUTC(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] }
public void testConstructor_nullObject() throws Throwable { [EOL]     Instant test = new Instant((Object) null); [EOL]     assertEquals(ISOChronology.getInstanceUTC(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] }
public void testToInstant() { [EOL]     Instant test = new Instant(TEST_TIME1); [EOL]     Instant result = test.toInstant(); [EOL]     assertSame(test, result); [EOL] }
public void testConstructor() throws Throwable { [EOL]     LocalDate test = new LocalDate(); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(test, LocalDate.now()); [EOL] }
public void testParse_noFormatter() throws Throwable { [EOL]     assertEquals(new LocalDate(2010, 6, 30), LocalDate.parse("2010-06-30")); [EOL]     assertEquals(new LocalDate(2010, 1, 2), LocalDate.parse("2010-002")); [EOL] }
public void testParse_noFormatter() throws Throwable { [EOL]     assertEquals(new LocalDate(2010, 6, 30), LocalDate.parse("2010-06-30")); [EOL]     assertEquals(new LocalDate(2010, 1, 2), LocalDate.parse("2010-002")); [EOL] }
public void testParse_noFormatter() throws Throwable { [EOL]     assertEquals(new LocalDate(2010, 6, 30), LocalDate.parse("2010-06-30")); [EOL]     assertEquals(new LocalDate(2010, 1, 2), LocalDate.parse("2010-002")); [EOL] }
public void testParse_noFormatter() throws Throwable { [EOL]     assertEquals(new LocalDate(2010, 6, 30), LocalDate.parse("2010-06-30")); [EOL]     assertEquals(new LocalDate(2010, 1, 2), LocalDate.parse("2010-002")); [EOL] }
public void testParse_noFormatter() throws Throwable { [EOL]     assertEquals(new LocalDate(2010, 6, 30), LocalDate.parse("2010-06-30")); [EOL]     assertEquals(new LocalDate(2010, 1, 2), LocalDate.parse("2010-002")); [EOL] }
public void testParse_noFormatter() throws Throwable { [EOL]     assertEquals(new LocalDate(2010, 6, 30), LocalDate.parse("2010-06-30")); [EOL]     assertEquals(new LocalDate(2010, 1, 2), LocalDate.parse("2010-002")); [EOL] }
public void testToDate_springDST_2Hour40Savings() { [EOL]     LocalDate base = new LocalDate(2007, 4, 2); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000, (3600000 / 6) * 16); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 4, 2); [EOL]         assertEquals("Mon Apr 02 02:40:00 GMT+03:40 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_springDST_2Hour40Savings() { [EOL]     LocalDate base = new LocalDate(2007, 4, 2); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000, (3600000 / 6) * 16); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 4, 2); [EOL]         assertEquals("Mon Apr 02 02:40:00 GMT+03:40 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_springDST_2Hour40Savings() { [EOL]     LocalDate base = new LocalDate(2007, 4, 2); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000, (3600000 / 6) * 16); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 4, 2); [EOL]         assertEquals("Mon Apr 02 02:40:00 GMT+03:40 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testSerializedLocalDateBuddhist() throws Exception { [EOL]     LocalDate test = new LocalDate(BuddhistChronology.getInstanceUTC()); [EOL]     loadAndCompare(test, "LocalDateBuddhist", false); [EOL]     inlineCompare(test, false); [EOL] }
public void testSerializedLocalDateBuddhist() throws Exception { [EOL]     LocalDate test = new LocalDate(BuddhistChronology.getInstanceUTC()); [EOL]     loadAndCompare(test, "LocalDateBuddhist", false); [EOL]     inlineCompare(test, false); [EOL] }
public void testConstructor_nullObject_nullDateTimeZone() throws Throwable { [EOL]     LocalDate test = new LocalDate((Object) null, (DateTimeZone) null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL] }
public void testConstructor_nullObject_nullDateTimeZone() throws Throwable { [EOL]     LocalDate test = new LocalDate((Object) null, (DateTimeZone) null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL] }
public void testConstructor_nullObject_nullDateTimeZone() throws Throwable { [EOL]     LocalDate test = new LocalDate((Object) null, (DateTimeZone) null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL] }
public void testConstructor_nullObject_nullDateTimeZone() throws Throwable { [EOL]     LocalDate test = new LocalDate((Object) null, (DateTimeZone) null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL] }
public void testSerializedLocalDateBuddhist() throws Exception { [EOL]     LocalDate test = new LocalDate(BuddhistChronology.getInstanceUTC()); [EOL]     loadAndCompare(test, "LocalDateBuddhist", false); [EOL]     inlineCompare(test, false); [EOL] }
public void testSerializedLocalDateBuddhist() throws Exception { [EOL]     LocalDate test = new LocalDate(BuddhistChronology.getInstanceUTC()); [EOL]     loadAndCompare(test, "LocalDateBuddhist", false); [EOL]     inlineCompare(test, false); [EOL] }
public void testSerializedLocalDateBuddhist() throws Exception { [EOL]     LocalDate test = new LocalDate(BuddhistChronology.getInstanceUTC()); [EOL]     loadAndCompare(test, "LocalDateBuddhist", false); [EOL]     inlineCompare(test, false); [EOL] }
public void testGet_DateTimeFieldType() { [EOL]     LocalDate test = new LocalDate(); [EOL]     assertEquals(1970, test.get(DateTimeFieldType.year())); [EOL]     assertEquals(6, test.get(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(9, test.get(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(2, test.get(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(160, test.get(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(24, test.get(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(1970, test.get(DateTimeFieldType.weekyear())); [EOL]     try { [EOL]         test.get(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.get(DateTimeFieldType.hourOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGet_DateTimeFieldType() { [EOL]     LocalDate test = new LocalDate(); [EOL]     assertEquals(1970, test.get(DateTimeFieldType.year())); [EOL]     assertEquals(6, test.get(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(9, test.get(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(2, test.get(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(160, test.get(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(24, test.get(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(1970, test.get(DateTimeFieldType.weekyear())); [EOL]     try { [EOL]         test.get(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.get(DateTimeFieldType.hourOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGet_DateTimeFieldType() { [EOL]     LocalDate test = new LocalDate(); [EOL]     assertEquals(1970, test.get(DateTimeFieldType.year())); [EOL]     assertEquals(6, test.get(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(9, test.get(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(2, test.get(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(160, test.get(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(24, test.get(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(1970, test.get(DateTimeFieldType.weekyear())); [EOL]     try { [EOL]         test.get(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.get(DateTimeFieldType.hourOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testToDate_springDST_2Hour40Savings() { [EOL]     LocalDate base = new LocalDate(2007, 4, 2); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000, (3600000 / 6) * 16); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 4, 2); [EOL]         assertEquals("Mon Apr 02 02:40:00 GMT+03:40 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testToDateTimeAtMidnight() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     DateTime test = base.toDateTimeAtMidnight(); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(new DateTime(2005, 6, 9, 0, 0, 0, 0, COPTIC_LONDON), test); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testToDateTimeAtMidnight() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     DateTime test = base.toDateTimeAtMidnight(); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(new DateTime(2005, 6, 9, 0, 0, 0, 0, COPTIC_LONDON), test); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testToDateTimeAtMidnight() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     DateTime test = base.toDateTimeAtMidnight(); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(new DateTime(2005, 6, 9, 0, 0, 0, 0, COPTIC_LONDON), test); [EOL] }
public void testToLocalDateTime_wrongChronologyLocalTime() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     LocalTime tod = new LocalTime(12, 13, 14, 15, BUDDHIST_PARIS); [EOL]     try { [EOL]         base.toLocalDateTime(tod); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testToLocalDateTime_wrongChronologyLocalTime() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     LocalTime tod = new LocalTime(12, 13, 14, 15, BUDDHIST_PARIS); [EOL]     try { [EOL]         base.toLocalDateTime(tod); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testToLocalDateTime_wrongChronologyLocalTime() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     LocalTime tod = new LocalTime(12, 13, 14, 15, BUDDHIST_PARIS); [EOL]     try { [EOL]         base.toLocalDateTime(tod); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testToDateTime_wrongChronoLocalTime_Zone() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     LocalTime tod = new LocalTime(12, 13, 14, 15, BUDDHIST_TOKYO); [EOL]     try { [EOL]         base.toDateTime(tod, LONDON); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testToDateTime_wrongChronoLocalTime_Zone() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     LocalTime tod = new LocalTime(12, 13, 14, 15, BUDDHIST_TOKYO); [EOL]     try { [EOL]         base.toDateTime(tod, LONDON); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testToDateTime_wrongChronoLocalTime_Zone() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     LocalTime tod = new LocalTime(12, 13, 14, 15, BUDDHIST_TOKYO); [EOL]     try { [EOL]         base.toDateTime(tod, LONDON); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testToInterval_Zone() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(TOKYO); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime start = base.toDateTimeAtStartOfDay(TOKYO); [EOL]     DateTime end = start.plus(Period.days(1)); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testToInterval_Zone() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(TOKYO); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime start = base.toDateTimeAtStartOfDay(TOKYO); [EOL]     DateTime end = start.plus(Period.days(1)); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testToDate_springDST_2Hour40Savings() { [EOL]     LocalDate base = new LocalDate(2007, 4, 2); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000, (3600000 / 6) * 16); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 4, 2); [EOL]         assertEquals("Mon Apr 02 02:40:00 GMT+03:40 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_springDST_2Hour40Savings() { [EOL]     LocalDate base = new LocalDate(2007, 4, 2); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000, (3600000 / 6) * 16); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 4, 2); [EOL]         assertEquals("Mon Apr 02 02:40:00 GMT+03:40 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToDate_springDST_2Hour40Savings() { [EOL]     LocalDate base = new LocalDate(2007, 4, 2); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000, (3600000 / 6) * 16); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 4, 2); [EOL]         assertEquals("Mon Apr 02 02:40:00 GMT+03:40 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] }
public void testToInterval_Zone() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(TOKYO); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime start = base.toDateTimeAtStartOfDay(TOKYO); [EOL]     DateTime end = start.plus(Period.days(1)); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testToInterval_Zone() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(TOKYO); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime start = base.toDateTimeAtStartOfDay(TOKYO); [EOL]     DateTime end = start.plus(Period.days(1)); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testWithField_DateTimeFieldType_int_2() { [EOL]     LocalDate test = new LocalDate(2004, 6, 9); [EOL]     try { [EOL]         test.withField(null, 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithField_DateTimeFieldType_int_2() { [EOL]     LocalDate test = new LocalDate(2004, 6, 9); [EOL]     try { [EOL]         test.withField(null, 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithField_DateTimeFieldType_int_2() { [EOL]     LocalDate test = new LocalDate(2004, 6, 9); [EOL]     try { [EOL]         test.withField(null, 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithFieldAdded_DurationFieldType_int_5() { [EOL]     LocalDate test = new LocalDate(2004, 6, 9); [EOL]     try { [EOL]         test.withFieldAdded(DurationFieldType.hours(), 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithFieldAdded_DurationFieldType_int_5() { [EOL]     LocalDate test = new LocalDate(2004, 6, 9); [EOL]     try { [EOL]         test.withFieldAdded(DurationFieldType.hours(), 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithFieldAdded_DurationFieldType_int_5() { [EOL]     LocalDate test = new LocalDate(2004, 6, 9); [EOL]     try { [EOL]         test.withFieldAdded(DurationFieldType.hours(), 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithFieldAdded_DurationFieldType_int_5() { [EOL]     LocalDate test = new LocalDate(2004, 6, 9); [EOL]     try { [EOL]         test.withFieldAdded(DurationFieldType.hours(), 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPlusWeeks_int() { [EOL]     LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON); [EOL]     LocalDate result = test.plusWeeks(1); [EOL]     LocalDate expected = new LocalDate(2002, 5, 10, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusWeeks(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusWeeks_int() { [EOL]     LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON); [EOL]     LocalDate result = test.plusWeeks(1); [EOL]     LocalDate expected = new LocalDate(2002, 5, 10, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusWeeks(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusWeeks_int() { [EOL]     LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON); [EOL]     LocalDate result = test.plusWeeks(1); [EOL]     LocalDate expected = new LocalDate(2002, 5, 10, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusWeeks(0); [EOL]     assertSame(test, result); [EOL] }
public void testToInterval_Zone() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(TOKYO); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime start = base.toDateTimeAtStartOfDay(TOKYO); [EOL]     DateTime end = start.plus(Period.days(1)); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testToInterval_Zone() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(TOKYO); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime start = base.toDateTimeAtStartOfDay(TOKYO); [EOL]     DateTime end = start.plus(Period.days(1)); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testToInterval_Zone() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(TOKYO); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime start = base.toDateTimeAtStartOfDay(TOKYO); [EOL]     DateTime end = start.plus(Period.days(1)); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testMinusMonths_int() { [EOL]     LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON); [EOL]     LocalDate result = test.minusMonths(1); [EOL]     LocalDate expected = new LocalDate(2002, 4, 3, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusMonths(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusMonths_int() { [EOL]     LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON); [EOL]     LocalDate result = test.minusMonths(1); [EOL]     LocalDate expected = new LocalDate(2002, 4, 3, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusMonths(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusMonths_int() { [EOL]     LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON); [EOL]     LocalDate result = test.minusMonths(1); [EOL]     LocalDate expected = new LocalDate(2002, 4, 3, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusMonths(0); [EOL]     assertSame(test, result); [EOL] }
public void test_getDefault_cached() { [EOL]     assertSame(PeriodFormat.getDefault(), PeriodFormat.getDefault()); [EOL] }
public void testDurationFields() { [EOL]     final EthiopicChronology ethiopic = EthiopicChronology.getInstance(); [EOL]     assertEquals("eras", ethiopic.eras().getName()); [EOL]     assertEquals("centuries", ethiopic.centuries().getName()); [EOL]     assertEquals("years", ethiopic.years().getName()); [EOL]     assertEquals("weekyears", ethiopic.weekyears().getName()); [EOL]     assertEquals("months", ethiopic.months().getName()); [EOL]     assertEquals("weeks", ethiopic.weeks().getName()); [EOL]     assertEquals("days", ethiopic.days().getName()); [EOL]     assertEquals("halfdays", ethiopic.halfdays().getName()); [EOL]     assertEquals("hours", ethiopic.hours().getName()); [EOL]     assertEquals("minutes", ethiopic.minutes().getName()); [EOL]     assertEquals("seconds", ethiopic.seconds().getName()); [EOL]     assertEquals("millis", ethiopic.millis().getName()); [EOL]     assertEquals(false, ethiopic.eras().isSupported()); [EOL]     assertEquals(true, ethiopic.centuries().isSupported()); [EOL]     assertEquals(true, ethiopic.years().isSupported()); [EOL]     assertEquals(true, ethiopic.weekyears().isSupported()); [EOL]     assertEquals(true, ethiopic.months().isSupported()); [EOL]     assertEquals(true, ethiopic.weeks().isSupported()); [EOL]     assertEquals(true, ethiopic.days().isSupported()); [EOL]     assertEquals(true, ethiopic.halfdays().isSupported()); [EOL]     assertEquals(true, ethiopic.hours().isSupported()); [EOL]     assertEquals(true, ethiopic.minutes().isSupported()); [EOL]     assertEquals(true, ethiopic.seconds().isSupported()); [EOL]     assertEquals(true, ethiopic.millis().isSupported()); [EOL]     assertEquals(false, ethiopic.centuries().isPrecise()); [EOL]     assertEquals(false, ethiopic.years().isPrecise()); [EOL]     assertEquals(false, ethiopic.weekyears().isPrecise()); [EOL]     assertEquals(false, ethiopic.months().isPrecise()); [EOL]     assertEquals(false, ethiopic.weeks().isPrecise()); [EOL]     assertEquals(false, ethiopic.days().isPrecise()); [EOL]     assertEquals(false, ethiopic.halfdays().isPrecise()); [EOL]     assertEquals(true, ethiopic.hours().isPrecise()); [EOL]     assertEquals(true, ethiopic.minutes().isPrecise()); [EOL]     assertEquals(true, ethiopic.seconds().isPrecise()); [EOL]     assertEquals(true, ethiopic.millis().isPrecise()); [EOL]     final EthiopicChronology ethiopicUTC = EthiopicChronology.getInstanceUTC(); [EOL]     assertEquals(false, ethiopicUTC.centuries().isPrecise()); [EOL]     assertEquals(false, ethiopicUTC.years().isPrecise()); [EOL]     assertEquals(false, ethiopicUTC.weekyears().isPrecise()); [EOL]     assertEquals(false, ethiopicUTC.months().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.weeks().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.days().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.halfdays().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.hours().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.minutes().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.seconds().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.millis().isPrecise()); [EOL]     final DateTimeZone gmt = DateTimeZone.forID("Etc/GMT"); [EOL]     final EthiopicChronology ethiopicGMT = EthiopicChronology.getInstance(gmt); [EOL]     assertEquals(false, ethiopicGMT.centuries().isPrecise()); [EOL]     assertEquals(false, ethiopicGMT.years().isPrecise()); [EOL]     assertEquals(false, ethiopicGMT.weekyears().isPrecise()); [EOL]     assertEquals(false, ethiopicGMT.months().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.weeks().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.days().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.halfdays().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.hours().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.minutes().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.seconds().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.millis().isPrecise()); [EOL] }
public void testDurationFields() { [EOL]     final EthiopicChronology ethiopic = EthiopicChronology.getInstance(); [EOL]     assertEquals("eras", ethiopic.eras().getName()); [EOL]     assertEquals("centuries", ethiopic.centuries().getName()); [EOL]     assertEquals("years", ethiopic.years().getName()); [EOL]     assertEquals("weekyears", ethiopic.weekyears().getName()); [EOL]     assertEquals("months", ethiopic.months().getName()); [EOL]     assertEquals("weeks", ethiopic.weeks().getName()); [EOL]     assertEquals("days", ethiopic.days().getName()); [EOL]     assertEquals("halfdays", ethiopic.halfdays().getName()); [EOL]     assertEquals("hours", ethiopic.hours().getName()); [EOL]     assertEquals("minutes", ethiopic.minutes().getName()); [EOL]     assertEquals("seconds", ethiopic.seconds().getName()); [EOL]     assertEquals("millis", ethiopic.millis().getName()); [EOL]     assertEquals(false, ethiopic.eras().isSupported()); [EOL]     assertEquals(true, ethiopic.centuries().isSupported()); [EOL]     assertEquals(true, ethiopic.years().isSupported()); [EOL]     assertEquals(true, ethiopic.weekyears().isSupported()); [EOL]     assertEquals(true, ethiopic.months().isSupported()); [EOL]     assertEquals(true, ethiopic.weeks().isSupported()); [EOL]     assertEquals(true, ethiopic.days().isSupported()); [EOL]     assertEquals(true, ethiopic.halfdays().isSupported()); [EOL]     assertEquals(true, ethiopic.hours().isSupported()); [EOL]     assertEquals(true, ethiopic.minutes().isSupported()); [EOL]     assertEquals(true, ethiopic.seconds().isSupported()); [EOL]     assertEquals(true, ethiopic.millis().isSupported()); [EOL]     assertEquals(false, ethiopic.centuries().isPrecise()); [EOL]     assertEquals(false, ethiopic.years().isPrecise()); [EOL]     assertEquals(false, ethiopic.weekyears().isPrecise()); [EOL]     assertEquals(false, ethiopic.months().isPrecise()); [EOL]     assertEquals(false, ethiopic.weeks().isPrecise()); [EOL]     assertEquals(false, ethiopic.days().isPrecise()); [EOL]     assertEquals(false, ethiopic.halfdays().isPrecise()); [EOL]     assertEquals(true, ethiopic.hours().isPrecise()); [EOL]     assertEquals(true, ethiopic.minutes().isPrecise()); [EOL]     assertEquals(true, ethiopic.seconds().isPrecise()); [EOL]     assertEquals(true, ethiopic.millis().isPrecise()); [EOL]     final EthiopicChronology ethiopicUTC = EthiopicChronology.getInstanceUTC(); [EOL]     assertEquals(false, ethiopicUTC.centuries().isPrecise()); [EOL]     assertEquals(false, ethiopicUTC.years().isPrecise()); [EOL]     assertEquals(false, ethiopicUTC.weekyears().isPrecise()); [EOL]     assertEquals(false, ethiopicUTC.months().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.weeks().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.days().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.halfdays().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.hours().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.minutes().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.seconds().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.millis().isPrecise()); [EOL]     final DateTimeZone gmt = DateTimeZone.forID("Etc/GMT"); [EOL]     final EthiopicChronology ethiopicGMT = EthiopicChronology.getInstance(gmt); [EOL]     assertEquals(false, ethiopicGMT.centuries().isPrecise()); [EOL]     assertEquals(false, ethiopicGMT.years().isPrecise()); [EOL]     assertEquals(false, ethiopicGMT.weekyears().isPrecise()); [EOL]     assertEquals(false, ethiopicGMT.months().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.weeks().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.days().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.halfdays().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.hours().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.minutes().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.seconds().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.millis().isPrecise()); [EOL] }
public void testDurationFields() { [EOL]     final EthiopicChronology ethiopic = EthiopicChronology.getInstance(); [EOL]     assertEquals("eras", ethiopic.eras().getName()); [EOL]     assertEquals("centuries", ethiopic.centuries().getName()); [EOL]     assertEquals("years", ethiopic.years().getName()); [EOL]     assertEquals("weekyears", ethiopic.weekyears().getName()); [EOL]     assertEquals("months", ethiopic.months().getName()); [EOL]     assertEquals("weeks", ethiopic.weeks().getName()); [EOL]     assertEquals("days", ethiopic.days().getName()); [EOL]     assertEquals("halfdays", ethiopic.halfdays().getName()); [EOL]     assertEquals("hours", ethiopic.hours().getName()); [EOL]     assertEquals("minutes", ethiopic.minutes().getName()); [EOL]     assertEquals("seconds", ethiopic.seconds().getName()); [EOL]     assertEquals("millis", ethiopic.millis().getName()); [EOL]     assertEquals(false, ethiopic.eras().isSupported()); [EOL]     assertEquals(true, ethiopic.centuries().isSupported()); [EOL]     assertEquals(true, ethiopic.years().isSupported()); [EOL]     assertEquals(true, ethiopic.weekyears().isSupported()); [EOL]     assertEquals(true, ethiopic.months().isSupported()); [EOL]     assertEquals(true, ethiopic.weeks().isSupported()); [EOL]     assertEquals(true, ethiopic.days().isSupported()); [EOL]     assertEquals(true, ethiopic.halfdays().isSupported()); [EOL]     assertEquals(true, ethiopic.hours().isSupported()); [EOL]     assertEquals(true, ethiopic.minutes().isSupported()); [EOL]     assertEquals(true, ethiopic.seconds().isSupported()); [EOL]     assertEquals(true, ethiopic.millis().isSupported()); [EOL]     assertEquals(false, ethiopic.centuries().isPrecise()); [EOL]     assertEquals(false, ethiopic.years().isPrecise()); [EOL]     assertEquals(false, ethiopic.weekyears().isPrecise()); [EOL]     assertEquals(false, ethiopic.months().isPrecise()); [EOL]     assertEquals(false, ethiopic.weeks().isPrecise()); [EOL]     assertEquals(false, ethiopic.days().isPrecise()); [EOL]     assertEquals(false, ethiopic.halfdays().isPrecise()); [EOL]     assertEquals(true, ethiopic.hours().isPrecise()); [EOL]     assertEquals(true, ethiopic.minutes().isPrecise()); [EOL]     assertEquals(true, ethiopic.seconds().isPrecise()); [EOL]     assertEquals(true, ethiopic.millis().isPrecise()); [EOL]     final EthiopicChronology ethiopicUTC = EthiopicChronology.getInstanceUTC(); [EOL]     assertEquals(false, ethiopicUTC.centuries().isPrecise()); [EOL]     assertEquals(false, ethiopicUTC.years().isPrecise()); [EOL]     assertEquals(false, ethiopicUTC.weekyears().isPrecise()); [EOL]     assertEquals(false, ethiopicUTC.months().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.weeks().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.days().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.halfdays().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.hours().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.minutes().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.seconds().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.millis().isPrecise()); [EOL]     final DateTimeZone gmt = DateTimeZone.forID("Etc/GMT"); [EOL]     final EthiopicChronology ethiopicGMT = EthiopicChronology.getInstance(gmt); [EOL]     assertEquals(false, ethiopicGMT.centuries().isPrecise()); [EOL]     assertEquals(false, ethiopicGMT.years().isPrecise()); [EOL]     assertEquals(false, ethiopicGMT.weekyears().isPrecise()); [EOL]     assertEquals(false, ethiopicGMT.months().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.weeks().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.days().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.halfdays().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.hours().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.minutes().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.seconds().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.millis().isPrecise()); [EOL] }
public void testDurationFields() { [EOL]     final EthiopicChronology ethiopic = EthiopicChronology.getInstance(); [EOL]     assertEquals("eras", ethiopic.eras().getName()); [EOL]     assertEquals("centuries", ethiopic.centuries().getName()); [EOL]     assertEquals("years", ethiopic.years().getName()); [EOL]     assertEquals("weekyears", ethiopic.weekyears().getName()); [EOL]     assertEquals("months", ethiopic.months().getName()); [EOL]     assertEquals("weeks", ethiopic.weeks().getName()); [EOL]     assertEquals("days", ethiopic.days().getName()); [EOL]     assertEquals("halfdays", ethiopic.halfdays().getName()); [EOL]     assertEquals("hours", ethiopic.hours().getName()); [EOL]     assertEquals("minutes", ethiopic.minutes().getName()); [EOL]     assertEquals("seconds", ethiopic.seconds().getName()); [EOL]     assertEquals("millis", ethiopic.millis().getName()); [EOL]     assertEquals(false, ethiopic.eras().isSupported()); [EOL]     assertEquals(true, ethiopic.centuries().isSupported()); [EOL]     assertEquals(true, ethiopic.years().isSupported()); [EOL]     assertEquals(true, ethiopic.weekyears().isSupported()); [EOL]     assertEquals(true, ethiopic.months().isSupported()); [EOL]     assertEquals(true, ethiopic.weeks().isSupported()); [EOL]     assertEquals(true, ethiopic.days().isSupported()); [EOL]     assertEquals(true, ethiopic.halfdays().isSupported()); [EOL]     assertEquals(true, ethiopic.hours().isSupported()); [EOL]     assertEquals(true, ethiopic.minutes().isSupported()); [EOL]     assertEquals(true, ethiopic.seconds().isSupported()); [EOL]     assertEquals(true, ethiopic.millis().isSupported()); [EOL]     assertEquals(false, ethiopic.centuries().isPrecise()); [EOL]     assertEquals(false, ethiopic.years().isPrecise()); [EOL]     assertEquals(false, ethiopic.weekyears().isPrecise()); [EOL]     assertEquals(false, ethiopic.months().isPrecise()); [EOL]     assertEquals(false, ethiopic.weeks().isPrecise()); [EOL]     assertEquals(false, ethiopic.days().isPrecise()); [EOL]     assertEquals(false, ethiopic.halfdays().isPrecise()); [EOL]     assertEquals(true, ethiopic.hours().isPrecise()); [EOL]     assertEquals(true, ethiopic.minutes().isPrecise()); [EOL]     assertEquals(true, ethiopic.seconds().isPrecise()); [EOL]     assertEquals(true, ethiopic.millis().isPrecise()); [EOL]     final EthiopicChronology ethiopicUTC = EthiopicChronology.getInstanceUTC(); [EOL]     assertEquals(false, ethiopicUTC.centuries().isPrecise()); [EOL]     assertEquals(false, ethiopicUTC.years().isPrecise()); [EOL]     assertEquals(false, ethiopicUTC.weekyears().isPrecise()); [EOL]     assertEquals(false, ethiopicUTC.months().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.weeks().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.days().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.halfdays().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.hours().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.minutes().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.seconds().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.millis().isPrecise()); [EOL]     final DateTimeZone gmt = DateTimeZone.forID("Etc/GMT"); [EOL]     final EthiopicChronology ethiopicGMT = EthiopicChronology.getInstance(gmt); [EOL]     assertEquals(false, ethiopicGMT.centuries().isPrecise()); [EOL]     assertEquals(false, ethiopicGMT.years().isPrecise()); [EOL]     assertEquals(false, ethiopicGMT.weekyears().isPrecise()); [EOL]     assertEquals(false, ethiopicGMT.months().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.weeks().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.days().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.halfdays().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.hours().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.minutes().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.seconds().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.millis().isPrecise()); [EOL] }
public void testDurationFields() { [EOL]     final EthiopicChronology ethiopic = EthiopicChronology.getInstance(); [EOL]     assertEquals("eras", ethiopic.eras().getName()); [EOL]     assertEquals("centuries", ethiopic.centuries().getName()); [EOL]     assertEquals("years", ethiopic.years().getName()); [EOL]     assertEquals("weekyears", ethiopic.weekyears().getName()); [EOL]     assertEquals("months", ethiopic.months().getName()); [EOL]     assertEquals("weeks", ethiopic.weeks().getName()); [EOL]     assertEquals("days", ethiopic.days().getName()); [EOL]     assertEquals("halfdays", ethiopic.halfdays().getName()); [EOL]     assertEquals("hours", ethiopic.hours().getName()); [EOL]     assertEquals("minutes", ethiopic.minutes().getName()); [EOL]     assertEquals("seconds", ethiopic.seconds().getName()); [EOL]     assertEquals("millis", ethiopic.millis().getName()); [EOL]     assertEquals(false, ethiopic.eras().isSupported()); [EOL]     assertEquals(true, ethiopic.centuries().isSupported()); [EOL]     assertEquals(true, ethiopic.years().isSupported()); [EOL]     assertEquals(true, ethiopic.weekyears().isSupported()); [EOL]     assertEquals(true, ethiopic.months().isSupported()); [EOL]     assertEquals(true, ethiopic.weeks().isSupported()); [EOL]     assertEquals(true, ethiopic.days().isSupported()); [EOL]     assertEquals(true, ethiopic.halfdays().isSupported()); [EOL]     assertEquals(true, ethiopic.hours().isSupported()); [EOL]     assertEquals(true, ethiopic.minutes().isSupported()); [EOL]     assertEquals(true, ethiopic.seconds().isSupported()); [EOL]     assertEquals(true, ethiopic.millis().isSupported()); [EOL]     assertEquals(false, ethiopic.centuries().isPrecise()); [EOL]     assertEquals(false, ethiopic.years().isPrecise()); [EOL]     assertEquals(false, ethiopic.weekyears().isPrecise()); [EOL]     assertEquals(false, ethiopic.months().isPrecise()); [EOL]     assertEquals(false, ethiopic.weeks().isPrecise()); [EOL]     assertEquals(false, ethiopic.days().isPrecise()); [EOL]     assertEquals(false, ethiopic.halfdays().isPrecise()); [EOL]     assertEquals(true, ethiopic.hours().isPrecise()); [EOL]     assertEquals(true, ethiopic.minutes().isPrecise()); [EOL]     assertEquals(true, ethiopic.seconds().isPrecise()); [EOL]     assertEquals(true, ethiopic.millis().isPrecise()); [EOL]     final EthiopicChronology ethiopicUTC = EthiopicChronology.getInstanceUTC(); [EOL]     assertEquals(false, ethiopicUTC.centuries().isPrecise()); [EOL]     assertEquals(false, ethiopicUTC.years().isPrecise()); [EOL]     assertEquals(false, ethiopicUTC.weekyears().isPrecise()); [EOL]     assertEquals(false, ethiopicUTC.months().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.weeks().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.days().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.halfdays().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.hours().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.minutes().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.seconds().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.millis().isPrecise()); [EOL]     final DateTimeZone gmt = DateTimeZone.forID("Etc/GMT"); [EOL]     final EthiopicChronology ethiopicGMT = EthiopicChronology.getInstance(gmt); [EOL]     assertEquals(false, ethiopicGMT.centuries().isPrecise()); [EOL]     assertEquals(false, ethiopicGMT.years().isPrecise()); [EOL]     assertEquals(false, ethiopicGMT.weekyears().isPrecise()); [EOL]     assertEquals(false, ethiopicGMT.months().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.weeks().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.days().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.halfdays().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.hours().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.minutes().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.seconds().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.millis().isPrecise()); [EOL] }
public void testDurationFields() { [EOL]     final EthiopicChronology ethiopic = EthiopicChronology.getInstance(); [EOL]     assertEquals("eras", ethiopic.eras().getName()); [EOL]     assertEquals("centuries", ethiopic.centuries().getName()); [EOL]     assertEquals("years", ethiopic.years().getName()); [EOL]     assertEquals("weekyears", ethiopic.weekyears().getName()); [EOL]     assertEquals("months", ethiopic.months().getName()); [EOL]     assertEquals("weeks", ethiopic.weeks().getName()); [EOL]     assertEquals("days", ethiopic.days().getName()); [EOL]     assertEquals("halfdays", ethiopic.halfdays().getName()); [EOL]     assertEquals("hours", ethiopic.hours().getName()); [EOL]     assertEquals("minutes", ethiopic.minutes().getName()); [EOL]     assertEquals("seconds", ethiopic.seconds().getName()); [EOL]     assertEquals("millis", ethiopic.millis().getName()); [EOL]     assertEquals(false, ethiopic.eras().isSupported()); [EOL]     assertEquals(true, ethiopic.centuries().isSupported()); [EOL]     assertEquals(true, ethiopic.years().isSupported()); [EOL]     assertEquals(true, ethiopic.weekyears().isSupported()); [EOL]     assertEquals(true, ethiopic.months().isSupported()); [EOL]     assertEquals(true, ethiopic.weeks().isSupported()); [EOL]     assertEquals(true, ethiopic.days().isSupported()); [EOL]     assertEquals(true, ethiopic.halfdays().isSupported()); [EOL]     assertEquals(true, ethiopic.hours().isSupported()); [EOL]     assertEquals(true, ethiopic.minutes().isSupported()); [EOL]     assertEquals(true, ethiopic.seconds().isSupported()); [EOL]     assertEquals(true, ethiopic.millis().isSupported()); [EOL]     assertEquals(false, ethiopic.centuries().isPrecise()); [EOL]     assertEquals(false, ethiopic.years().isPrecise()); [EOL]     assertEquals(false, ethiopic.weekyears().isPrecise()); [EOL]     assertEquals(false, ethiopic.months().isPrecise()); [EOL]     assertEquals(false, ethiopic.weeks().isPrecise()); [EOL]     assertEquals(false, ethiopic.days().isPrecise()); [EOL]     assertEquals(false, ethiopic.halfdays().isPrecise()); [EOL]     assertEquals(true, ethiopic.hours().isPrecise()); [EOL]     assertEquals(true, ethiopic.minutes().isPrecise()); [EOL]     assertEquals(true, ethiopic.seconds().isPrecise()); [EOL]     assertEquals(true, ethiopic.millis().isPrecise()); [EOL]     final EthiopicChronology ethiopicUTC = EthiopicChronology.getInstanceUTC(); [EOL]     assertEquals(false, ethiopicUTC.centuries().isPrecise()); [EOL]     assertEquals(false, ethiopicUTC.years().isPrecise()); [EOL]     assertEquals(false, ethiopicUTC.weekyears().isPrecise()); [EOL]     assertEquals(false, ethiopicUTC.months().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.weeks().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.days().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.halfdays().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.hours().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.minutes().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.seconds().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.millis().isPrecise()); [EOL]     final DateTimeZone gmt = DateTimeZone.forID("Etc/GMT"); [EOL]     final EthiopicChronology ethiopicGMT = EthiopicChronology.getInstance(gmt); [EOL]     assertEquals(false, ethiopicGMT.centuries().isPrecise()); [EOL]     assertEquals(false, ethiopicGMT.years().isPrecise()); [EOL]     assertEquals(false, ethiopicGMT.weekyears().isPrecise()); [EOL]     assertEquals(false, ethiopicGMT.months().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.weeks().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.days().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.halfdays().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.hours().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.minutes().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.seconds().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.millis().isPrecise()); [EOL] }
public void testBug2182444_usCentral() { [EOL]     Chronology chronUSCentral = GregorianChronology.getInstance(DateTimeZone.forID("US/Central")); [EOL]     Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC); [EOL]     DateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0, 0, chronUTC); [EOL]     DateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0, 0, chronUTC); [EOL]     assertTrue("Should be standard time", chronUSCentral.getZone().isStandardOffset(usCentralStandardInUTC.getMillis())); [EOL]     assertFalse("Should be daylight time", chronUSCentral.getZone().isStandardOffset(usCentralDaylightInUTC.getMillis())); [EOL]     DateTime usCentralStandardInUSCentral = usCentralStandardInUTC.toDateTime(chronUSCentral); [EOL]     DateTime usCentralDaylightInUSCentral = usCentralDaylightInUTC.toDateTime(chronUSCentral); [EOL]     assertEquals(1, usCentralStandardInUSCentral.getHourOfDay()); [EOL]     assertEquals(usCentralStandardInUSCentral.getHourOfDay(), usCentralDaylightInUSCentral.getHourOfDay()); [EOL]     assertTrue(usCentralStandardInUSCentral.getMillis() != usCentralDaylightInUSCentral.getMillis()); [EOL]     assertEquals(usCentralStandardInUSCentral, usCentralStandardInUSCentral.withHourOfDay(1)); [EOL]     assertEquals(usCentralStandardInUSCentral.getMillis() + 3, usCentralStandardInUSCentral.withMillisOfSecond(3).getMillis()); [EOL]     assertEquals(usCentralDaylightInUSCentral, usCentralDaylightInUSCentral.withHourOfDay(1)); [EOL]     assertEquals(usCentralDaylightInUSCentral.getMillis() + 3, usCentralDaylightInUSCentral.withMillisOfSecond(3).getMillis()); [EOL] }
public void testGetPeriodType() { [EOL]     Period test = new Period(0L); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL] }
public void testGetPeriodType() { [EOL]     Period test = new Period(0L); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL] }
public void testConstructor_Object_PeriodType3() throws Throwable { [EOL]     Period test = new Period(new Period(0, 0, 0, 0, 1, 2, 3, 4, PeriodType.dayTime()), PeriodType.yearMonthDayTime()); [EOL]     assertEquals(PeriodType.yearMonthDayTime(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(2, test.getMinutes()); [EOL]     assertEquals(3, test.getSeconds()); [EOL]     assertEquals(4, test.getMillis()); [EOL] }
public void testConstructor_Object_PeriodType3() throws Throwable { [EOL]     Period test = new Period(new Period(0, 0, 0, 0, 1, 2, 3, 4, PeriodType.dayTime()), PeriodType.yearMonthDayTime()); [EOL]     assertEquals(PeriodType.yearMonthDayTime(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(2, test.getMinutes()); [EOL]     assertEquals(3, test.getSeconds()); [EOL]     assertEquals(4, test.getMillis()); [EOL] }
public void testGetPeriodType() { [EOL]     Period test = new Period(0L); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL] }
public void testGetPeriodType() { [EOL]     Period test = new Period(0L); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL] }
public void testSeconds() throws Exception { [EOL]     PeriodType type = PeriodType.seconds(); [EOL]     assertEquals(1, type.size()); [EOL]     assertEquals(DurationFieldType.seconds(), type.getFieldType(0)); [EOL]     assertEquals("Seconds", type.getName()); [EOL]     assertEquals("PeriodType[Seconds]", type.toString()); [EOL]     assertEquals(true, type.equals(type)); [EOL]     assertEquals(true, type == PeriodType.seconds()); [EOL]     assertEquals(false, type.equals(PeriodType.standard())); [EOL]     assertEquals(true, type.hashCode() == type.hashCode()); [EOL]     assertEquals(true, type.hashCode() == PeriodType.seconds().hashCode()); [EOL]     assertEquals(false, type.hashCode() == PeriodType.standard().hashCode()); [EOL]     assertSameAfterSerialization(type); [EOL] }
public void testMaskSeconds() throws Exception { [EOL]     PeriodType type = PeriodType.standard().withSecondsRemoved(); [EOL]     assertEquals(7, type.size()); [EOL]     assertEquals(DurationFieldType.years(), type.getFieldType(0)); [EOL]     assertEquals(DurationFieldType.months(), type.getFieldType(1)); [EOL]     assertEquals(DurationFieldType.weeks(), type.getFieldType(2)); [EOL]     assertEquals(DurationFieldType.days(), type.getFieldType(3)); [EOL]     assertEquals(DurationFieldType.hours(), type.getFieldType(4)); [EOL]     assertEquals(DurationFieldType.minutes(), type.getFieldType(5)); [EOL]     assertEquals(DurationFieldType.millis(), type.getFieldType(6)); [EOL]     assertEquals(true, type.equals(type)); [EOL]     assertEquals(true, type.equals(PeriodType.standard().withSecondsRemoved())); [EOL]     assertEquals(false, type.equals(PeriodType.millis())); [EOL]     assertEquals(true, type.hashCode() == type.hashCode()); [EOL]     assertEquals(true, type.hashCode() == PeriodType.standard().withSecondsRemoved().hashCode()); [EOL]     assertEquals(false, type.hashCode() == PeriodType.millis().hashCode()); [EOL]     assertEquals("StandardNoSeconds", type.getName()); [EOL]     assertEquals("PeriodType[StandardNoSeconds]", type.toString()); [EOL]     assertEqualsAfterSerialization(type); [EOL] }
public void testMaskSeconds() throws Exception { [EOL]     PeriodType type = PeriodType.standard().withSecondsRemoved(); [EOL]     assertEquals(7, type.size()); [EOL]     assertEquals(DurationFieldType.years(), type.getFieldType(0)); [EOL]     assertEquals(DurationFieldType.months(), type.getFieldType(1)); [EOL]     assertEquals(DurationFieldType.weeks(), type.getFieldType(2)); [EOL]     assertEquals(DurationFieldType.days(), type.getFieldType(3)); [EOL]     assertEquals(DurationFieldType.hours(), type.getFieldType(4)); [EOL]     assertEquals(DurationFieldType.minutes(), type.getFieldType(5)); [EOL]     assertEquals(DurationFieldType.millis(), type.getFieldType(6)); [EOL]     assertEquals(true, type.equals(type)); [EOL]     assertEquals(true, type.equals(PeriodType.standard().withSecondsRemoved())); [EOL]     assertEquals(false, type.equals(PeriodType.millis())); [EOL]     assertEquals(true, type.hashCode() == type.hashCode()); [EOL]     assertEquals(true, type.hashCode() == PeriodType.standard().withSecondsRemoved().hashCode()); [EOL]     assertEquals(false, type.hashCode() == PeriodType.millis().hashCode()); [EOL]     assertEquals("StandardNoSeconds", type.getName()); [EOL]     assertEquals("PeriodType[StandardNoSeconds]", type.toString()); [EOL]     assertEqualsAfterSerialization(type); [EOL] }
public void testForFields4() throws Exception { [EOL]     DurationFieldType[] types = new DurationFieldType[] { DurationFieldType.weeks(), DurationFieldType.days(), DurationFieldType.months() }; [EOL]     DurationFieldType[] types2 = new DurationFieldType[] { DurationFieldType.months(), DurationFieldType.days(), DurationFieldType.weeks() }; [EOL]     PeriodType type = PeriodType.forFields(types); [EOL]     PeriodType type2 = PeriodType.forFields(types2); [EOL]     assertEquals(true, type == type2); [EOL] }
public void testForFields4() throws Exception { [EOL]     DurationFieldType[] types = new DurationFieldType[] { DurationFieldType.weeks(), DurationFieldType.days(), DurationFieldType.months() }; [EOL]     DurationFieldType[] types2 = new DurationFieldType[] { DurationFieldType.months(), DurationFieldType.days(), DurationFieldType.weeks() }; [EOL]     PeriodType type = PeriodType.forFields(types); [EOL]     PeriodType type2 = PeriodType.forFields(types2); [EOL]     assertEquals(true, type == type2); [EOL] }
public void testForFields4() throws Exception { [EOL]     DurationFieldType[] types = new DurationFieldType[] { DurationFieldType.weeks(), DurationFieldType.days(), DurationFieldType.months() }; [EOL]     DurationFieldType[] types2 = new DurationFieldType[] { DurationFieldType.months(), DurationFieldType.days(), DurationFieldType.weeks() }; [EOL]     PeriodType type = PeriodType.forFields(types); [EOL]     PeriodType type2 = PeriodType.forFields(types2); [EOL]     assertEquals(true, type == type2); [EOL] }
public void testForFields4() throws Exception { [EOL]     DurationFieldType[] types = new DurationFieldType[] { DurationFieldType.weeks(), DurationFieldType.days(), DurationFieldType.months() }; [EOL]     DurationFieldType[] types2 = new DurationFieldType[] { DurationFieldType.months(), DurationFieldType.days(), DurationFieldType.weeks() }; [EOL]     PeriodType type = PeriodType.forFields(types); [EOL]     PeriodType type2 = PeriodType.forFields(types2); [EOL]     assertEquals(true, type == type2); [EOL] }
public void testForFields4() throws Exception { [EOL]     DurationFieldType[] types = new DurationFieldType[] { DurationFieldType.weeks(), DurationFieldType.days(), DurationFieldType.months() }; [EOL]     DurationFieldType[] types2 = new DurationFieldType[] { DurationFieldType.months(), DurationFieldType.days(), DurationFieldType.weeks() }; [EOL]     PeriodType type = PeriodType.forFields(types); [EOL]     PeriodType type2 = PeriodType.forFields(types2); [EOL]     assertEquals(true, type == type2); [EOL] }
public void testForFields4() throws Exception { [EOL]     DurationFieldType[] types = new DurationFieldType[] { DurationFieldType.weeks(), DurationFieldType.days(), DurationFieldType.months() }; [EOL]     DurationFieldType[] types2 = new DurationFieldType[] { DurationFieldType.months(), DurationFieldType.days(), DurationFieldType.weeks() }; [EOL]     PeriodType type = PeriodType.forFields(types); [EOL]     PeriodType type2 = PeriodType.forFields(types2); [EOL]     assertEquals(true, type == type2); [EOL] }
public void testMaskSeconds() throws Exception { [EOL]     PeriodType type = PeriodType.standard().withSecondsRemoved(); [EOL]     assertEquals(7, type.size()); [EOL]     assertEquals(DurationFieldType.years(), type.getFieldType(0)); [EOL]     assertEquals(DurationFieldType.months(), type.getFieldType(1)); [EOL]     assertEquals(DurationFieldType.weeks(), type.getFieldType(2)); [EOL]     assertEquals(DurationFieldType.days(), type.getFieldType(3)); [EOL]     assertEquals(DurationFieldType.hours(), type.getFieldType(4)); [EOL]     assertEquals(DurationFieldType.minutes(), type.getFieldType(5)); [EOL]     assertEquals(DurationFieldType.millis(), type.getFieldType(6)); [EOL]     assertEquals(true, type.equals(type)); [EOL]     assertEquals(true, type.equals(PeriodType.standard().withSecondsRemoved())); [EOL]     assertEquals(false, type.equals(PeriodType.millis())); [EOL]     assertEquals(true, type.hashCode() == type.hashCode()); [EOL]     assertEquals(true, type.hashCode() == PeriodType.standard().withSecondsRemoved().hashCode()); [EOL]     assertEquals(false, type.hashCode() == PeriodType.millis().hashCode()); [EOL]     assertEquals("StandardNoSeconds", type.getName()); [EOL]     assertEquals("PeriodType[StandardNoSeconds]", type.toString()); [EOL]     assertEqualsAfterSerialization(type); [EOL] }
public void testMaskSeconds() throws Exception { [EOL]     PeriodType type = PeriodType.standard().withSecondsRemoved(); [EOL]     assertEquals(7, type.size()); [EOL]     assertEquals(DurationFieldType.years(), type.getFieldType(0)); [EOL]     assertEquals(DurationFieldType.months(), type.getFieldType(1)); [EOL]     assertEquals(DurationFieldType.weeks(), type.getFieldType(2)); [EOL]     assertEquals(DurationFieldType.days(), type.getFieldType(3)); [EOL]     assertEquals(DurationFieldType.hours(), type.getFieldType(4)); [EOL]     assertEquals(DurationFieldType.minutes(), type.getFieldType(5)); [EOL]     assertEquals(DurationFieldType.millis(), type.getFieldType(6)); [EOL]     assertEquals(true, type.equals(type)); [EOL]     assertEquals(true, type.equals(PeriodType.standard().withSecondsRemoved())); [EOL]     assertEquals(false, type.equals(PeriodType.millis())); [EOL]     assertEquals(true, type.hashCode() == type.hashCode()); [EOL]     assertEquals(true, type.hashCode() == PeriodType.standard().withSecondsRemoved().hashCode()); [EOL]     assertEquals(false, type.hashCode() == PeriodType.millis().hashCode()); [EOL]     assertEquals("StandardNoSeconds", type.getName()); [EOL]     assertEquals("PeriodType[StandardNoSeconds]", type.toString()); [EOL]     assertEqualsAfterSerialization(type); [EOL] }
public void testConstructor_long_PeriodType_Chronology4() throws Throwable { [EOL]     long length = 4 * DateTimeConstants.MILLIS_PER_DAY + 5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE + 7 * DateTimeConstants.MILLIS_PER_SECOND + 8; [EOL]     Period test = new Period(length, (PeriodType) null, (Chronology) null); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals((4 * 24) + 5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] }
public void testConstructor_long_PeriodType_Chronology4() throws Throwable { [EOL]     long length = 4 * DateTimeConstants.MILLIS_PER_DAY + 5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE + 7 * DateTimeConstants.MILLIS_PER_SECOND + 8; [EOL]     Period test = new Period(length, (PeriodType) null, (Chronology) null); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals((4 * 24) + 5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] }
public void testMaskSeconds() throws Exception { [EOL]     PeriodType type = PeriodType.standard().withSecondsRemoved(); [EOL]     assertEquals(7, type.size()); [EOL]     assertEquals(DurationFieldType.years(), type.getFieldType(0)); [EOL]     assertEquals(DurationFieldType.months(), type.getFieldType(1)); [EOL]     assertEquals(DurationFieldType.weeks(), type.getFieldType(2)); [EOL]     assertEquals(DurationFieldType.days(), type.getFieldType(3)); [EOL]     assertEquals(DurationFieldType.hours(), type.getFieldType(4)); [EOL]     assertEquals(DurationFieldType.minutes(), type.getFieldType(5)); [EOL]     assertEquals(DurationFieldType.millis(), type.getFieldType(6)); [EOL]     assertEquals(true, type.equals(type)); [EOL]     assertEquals(true, type.equals(PeriodType.standard().withSecondsRemoved())); [EOL]     assertEquals(false, type.equals(PeriodType.millis())); [EOL]     assertEquals(true, type.hashCode() == type.hashCode()); [EOL]     assertEquals(true, type.hashCode() == PeriodType.standard().withSecondsRemoved().hashCode()); [EOL]     assertEquals(false, type.hashCode() == PeriodType.millis().hashCode()); [EOL]     assertEquals("StandardNoSeconds", type.getName()); [EOL]     assertEquals("PeriodType[StandardNoSeconds]", type.toString()); [EOL]     assertEqualsAfterSerialization(type); [EOL] }
public void testConstructor_long_PeriodType_Chronology4() throws Throwable { [EOL]     long length = 4 * DateTimeConstants.MILLIS_PER_DAY + 5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE + 7 * DateTimeConstants.MILLIS_PER_SECOND + 8; [EOL]     Period test = new Period(length, (PeriodType) null, (Chronology) null); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals((4 * 24) + 5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] }
public void testConstructor_long_PeriodType_Chronology4() throws Throwable { [EOL]     long length = 4 * DateTimeConstants.MILLIS_PER_DAY + 5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE + 7 * DateTimeConstants.MILLIS_PER_SECOND + 8; [EOL]     Period test = new Period(length, (PeriodType) null, (Chronology) null); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals((4 * 24) + 5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] }
public void testConstructor_long_PeriodType_Chronology4() throws Throwable { [EOL]     long length = 4 * DateTimeConstants.MILLIS_PER_DAY + 5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE + 7 * DateTimeConstants.MILLIS_PER_SECOND + 8; [EOL]     Period test = new Period(length, (PeriodType) null, (Chronology) null); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals((4 * 24) + 5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] }
public void testWith() { [EOL]     Period test; [EOL]     test = Period.years(5).withYears(1); [EOL]     assertEquals(test, new Period(1, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard())); [EOL]     test = Period.months(5).withMonths(1); [EOL]     assertEquals(test, new Period(0, 1, 0, 0, 0, 0, 0, 0, PeriodType.standard())); [EOL]     test = Period.weeks(5).withWeeks(1); [EOL]     assertEquals(test, new Period(0, 0, 1, 0, 0, 0, 0, 0, PeriodType.standard())); [EOL]     test = Period.days(5).withDays(1); [EOL]     assertEquals(test, new Period(0, 0, 0, 1, 0, 0, 0, 0, PeriodType.standard())); [EOL]     test = Period.hours(5).withHours(1); [EOL]     assertEquals(test, new Period(0, 0, 0, 0, 1, 0, 0, 0, PeriodType.standard())); [EOL]     test = Period.minutes(5).withMinutes(1); [EOL]     assertEquals(test, new Period(0, 0, 0, 0, 0, 1, 0, 0, PeriodType.standard())); [EOL]     test = Period.seconds(5).withSeconds(1); [EOL]     assertEquals(test, new Period(0, 0, 0, 0, 0, 0, 1, 0, PeriodType.standard())); [EOL]     test = Period.millis(5).withMillis(1); [EOL]     assertEquals(test, new Period(0, 0, 0, 0, 0, 0, 0, 1, PeriodType.standard())); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.withYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] }
public void testMaskTwice2() throws Exception { [EOL]     PeriodType type = PeriodType.dayTime(); [EOL]     PeriodType type2 = type.withYearsRemoved(); [EOL]     assertEquals(true, type == type2); [EOL]     type = PeriodType.dayTime(); [EOL]     type2 = type.withMonthsRemoved(); [EOL]     assertEquals(true, type == type2); [EOL]     type = PeriodType.dayTime(); [EOL]     type2 = type.withWeeksRemoved(); [EOL]     assertEquals(true, type == type2); [EOL]     type = PeriodType.millis(); [EOL]     type2 = type.withDaysRemoved(); [EOL]     assertEquals(true, type == type2); [EOL]     type = PeriodType.millis(); [EOL]     type2 = type.withHoursRemoved(); [EOL]     assertEquals(true, type == type2); [EOL]     type = PeriodType.millis(); [EOL]     type2 = type.withMinutesRemoved(); [EOL]     assertEquals(true, type == type2); [EOL]     type = PeriodType.millis(); [EOL]     type2 = type.withSecondsRemoved(); [EOL]     assertEquals(true, type == type2); [EOL] }
public void testMaskTwice2() throws Exception { [EOL]     PeriodType type = PeriodType.dayTime(); [EOL]     PeriodType type2 = type.withYearsRemoved(); [EOL]     assertEquals(true, type == type2); [EOL]     type = PeriodType.dayTime(); [EOL]     type2 = type.withMonthsRemoved(); [EOL]     assertEquals(true, type == type2); [EOL]     type = PeriodType.dayTime(); [EOL]     type2 = type.withWeeksRemoved(); [EOL]     assertEquals(true, type == type2); [EOL]     type = PeriodType.millis(); [EOL]     type2 = type.withDaysRemoved(); [EOL]     assertEquals(true, type == type2); [EOL]     type = PeriodType.millis(); [EOL]     type2 = type.withHoursRemoved(); [EOL]     assertEquals(true, type == type2); [EOL]     type = PeriodType.millis(); [EOL]     type2 = type.withMinutesRemoved(); [EOL]     assertEquals(true, type == type2); [EOL]     type = PeriodType.millis(); [EOL]     type2 = type.withSecondsRemoved(); [EOL]     assertEquals(true, type == type2); [EOL] }
public void testMaskTwice2() throws Exception { [EOL]     PeriodType type = PeriodType.dayTime(); [EOL]     PeriodType type2 = type.withYearsRemoved(); [EOL]     assertEquals(true, type == type2); [EOL]     type = PeriodType.dayTime(); [EOL]     type2 = type.withMonthsRemoved(); [EOL]     assertEquals(true, type == type2); [EOL]     type = PeriodType.dayTime(); [EOL]     type2 = type.withWeeksRemoved(); [EOL]     assertEquals(true, type == type2); [EOL]     type = PeriodType.millis(); [EOL]     type2 = type.withDaysRemoved(); [EOL]     assertEquals(true, type == type2); [EOL]     type = PeriodType.millis(); [EOL]     type2 = type.withHoursRemoved(); [EOL]     assertEquals(true, type == type2); [EOL]     type = PeriodType.millis(); [EOL]     type2 = type.withMinutesRemoved(); [EOL]     assertEquals(true, type == type2); [EOL]     type = PeriodType.millis(); [EOL]     type2 = type.withSecondsRemoved(); [EOL]     assertEquals(true, type == type2); [EOL] }
public void testMaskTwice2() throws Exception { [EOL]     PeriodType type = PeriodType.dayTime(); [EOL]     PeriodType type2 = type.withYearsRemoved(); [EOL]     assertEquals(true, type == type2); [EOL]     type = PeriodType.dayTime(); [EOL]     type2 = type.withMonthsRemoved(); [EOL]     assertEquals(true, type == type2); [EOL]     type = PeriodType.dayTime(); [EOL]     type2 = type.withWeeksRemoved(); [EOL]     assertEquals(true, type == type2); [EOL]     type = PeriodType.millis(); [EOL]     type2 = type.withDaysRemoved(); [EOL]     assertEquals(true, type == type2); [EOL]     type = PeriodType.millis(); [EOL]     type2 = type.withHoursRemoved(); [EOL]     assertEquals(true, type == type2); [EOL]     type = PeriodType.millis(); [EOL]     type2 = type.withMinutesRemoved(); [EOL]     assertEquals(true, type == type2); [EOL]     type = PeriodType.millis(); [EOL]     type2 = type.withSecondsRemoved(); [EOL]     assertEquals(true, type == type2); [EOL] }
public void testMaskTwice2() throws Exception { [EOL]     PeriodType type = PeriodType.dayTime(); [EOL]     PeriodType type2 = type.withYearsRemoved(); [EOL]     assertEquals(true, type == type2); [EOL]     type = PeriodType.dayTime(); [EOL]     type2 = type.withMonthsRemoved(); [EOL]     assertEquals(true, type == type2); [EOL]     type = PeriodType.dayTime(); [EOL]     type2 = type.withWeeksRemoved(); [EOL]     assertEquals(true, type == type2); [EOL]     type = PeriodType.millis(); [EOL]     type2 = type.withDaysRemoved(); [EOL]     assertEquals(true, type == type2); [EOL]     type = PeriodType.millis(); [EOL]     type2 = type.withHoursRemoved(); [EOL]     assertEquals(true, type == type2); [EOL]     type = PeriodType.millis(); [EOL]     type2 = type.withMinutesRemoved(); [EOL]     assertEquals(true, type == type2); [EOL]     type = PeriodType.millis(); [EOL]     type2 = type.withSecondsRemoved(); [EOL]     assertEquals(true, type == type2); [EOL] }
public void testMaskSeconds() throws Exception { [EOL]     PeriodType type = PeriodType.standard().withSecondsRemoved(); [EOL]     assertEquals(7, type.size()); [EOL]     assertEquals(DurationFieldType.years(), type.getFieldType(0)); [EOL]     assertEquals(DurationFieldType.months(), type.getFieldType(1)); [EOL]     assertEquals(DurationFieldType.weeks(), type.getFieldType(2)); [EOL]     assertEquals(DurationFieldType.days(), type.getFieldType(3)); [EOL]     assertEquals(DurationFieldType.hours(), type.getFieldType(4)); [EOL]     assertEquals(DurationFieldType.minutes(), type.getFieldType(5)); [EOL]     assertEquals(DurationFieldType.millis(), type.getFieldType(6)); [EOL]     assertEquals(true, type.equals(type)); [EOL]     assertEquals(true, type.equals(PeriodType.standard().withSecondsRemoved())); [EOL]     assertEquals(false, type.equals(PeriodType.millis())); [EOL]     assertEquals(true, type.hashCode() == type.hashCode()); [EOL]     assertEquals(true, type.hashCode() == PeriodType.standard().withSecondsRemoved().hashCode()); [EOL]     assertEquals(false, type.hashCode() == PeriodType.millis().hashCode()); [EOL]     assertEquals("StandardNoSeconds", type.getName()); [EOL]     assertEquals("PeriodType[StandardNoSeconds]", type.toString()); [EOL]     assertEqualsAfterSerialization(type); [EOL] }
public void testMaskSeconds() throws Exception { [EOL]     PeriodType type = PeriodType.standard().withSecondsRemoved(); [EOL]     assertEquals(7, type.size()); [EOL]     assertEquals(DurationFieldType.years(), type.getFieldType(0)); [EOL]     assertEquals(DurationFieldType.months(), type.getFieldType(1)); [EOL]     assertEquals(DurationFieldType.weeks(), type.getFieldType(2)); [EOL]     assertEquals(DurationFieldType.days(), type.getFieldType(3)); [EOL]     assertEquals(DurationFieldType.hours(), type.getFieldType(4)); [EOL]     assertEquals(DurationFieldType.minutes(), type.getFieldType(5)); [EOL]     assertEquals(DurationFieldType.millis(), type.getFieldType(6)); [EOL]     assertEquals(true, type.equals(type)); [EOL]     assertEquals(true, type.equals(PeriodType.standard().withSecondsRemoved())); [EOL]     assertEquals(false, type.equals(PeriodType.millis())); [EOL]     assertEquals(true, type.hashCode() == type.hashCode()); [EOL]     assertEquals(true, type.hashCode() == PeriodType.standard().withSecondsRemoved().hashCode()); [EOL]     assertEquals(false, type.hashCode() == PeriodType.millis().hashCode()); [EOL]     assertEquals("StandardNoSeconds", type.getName()); [EOL]     assertEquals("PeriodType[StandardNoSeconds]", type.toString()); [EOL]     assertEqualsAfterSerialization(type); [EOL] }
public void testMaskSeconds() throws Exception { [EOL]     PeriodType type = PeriodType.standard().withSecondsRemoved(); [EOL]     assertEquals(7, type.size()); [EOL]     assertEquals(DurationFieldType.years(), type.getFieldType(0)); [EOL]     assertEquals(DurationFieldType.months(), type.getFieldType(1)); [EOL]     assertEquals(DurationFieldType.weeks(), type.getFieldType(2)); [EOL]     assertEquals(DurationFieldType.days(), type.getFieldType(3)); [EOL]     assertEquals(DurationFieldType.hours(), type.getFieldType(4)); [EOL]     assertEquals(DurationFieldType.minutes(), type.getFieldType(5)); [EOL]     assertEquals(DurationFieldType.millis(), type.getFieldType(6)); [EOL]     assertEquals(true, type.equals(type)); [EOL]     assertEquals(true, type.equals(PeriodType.standard().withSecondsRemoved())); [EOL]     assertEquals(false, type.equals(PeriodType.millis())); [EOL]     assertEquals(true, type.hashCode() == type.hashCode()); [EOL]     assertEquals(true, type.hashCode() == PeriodType.standard().withSecondsRemoved().hashCode()); [EOL]     assertEquals(false, type.hashCode() == PeriodType.millis().hashCode()); [EOL]     assertEquals("StandardNoSeconds", type.getName()); [EOL]     assertEquals("PeriodType[StandardNoSeconds]", type.toString()); [EOL]     assertEqualsAfterSerialization(type); [EOL] }
public void testMaskSeconds() throws Exception { [EOL]     PeriodType type = PeriodType.standard().withSecondsRemoved(); [EOL]     assertEquals(7, type.size()); [EOL]     assertEquals(DurationFieldType.years(), type.getFieldType(0)); [EOL]     assertEquals(DurationFieldType.months(), type.getFieldType(1)); [EOL]     assertEquals(DurationFieldType.weeks(), type.getFieldType(2)); [EOL]     assertEquals(DurationFieldType.days(), type.getFieldType(3)); [EOL]     assertEquals(DurationFieldType.hours(), type.getFieldType(4)); [EOL]     assertEquals(DurationFieldType.minutes(), type.getFieldType(5)); [EOL]     assertEquals(DurationFieldType.millis(), type.getFieldType(6)); [EOL]     assertEquals(true, type.equals(type)); [EOL]     assertEquals(true, type.equals(PeriodType.standard().withSecondsRemoved())); [EOL]     assertEquals(false, type.equals(PeriodType.millis())); [EOL]     assertEquals(true, type.hashCode() == type.hashCode()); [EOL]     assertEquals(true, type.hashCode() == PeriodType.standard().withSecondsRemoved().hashCode()); [EOL]     assertEquals(false, type.hashCode() == PeriodType.millis().hashCode()); [EOL]     assertEquals("StandardNoSeconds", type.getName()); [EOL]     assertEquals("PeriodType[StandardNoSeconds]", type.toString()); [EOL]     assertEqualsAfterSerialization(type); [EOL] }
public void testGetPeriodType() { [EOL]     Period test = new Period(0L); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL] }
public void testGetPeriodType() { [EOL]     Period test = new Period(0L); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL] }
public void testGetPeriodType() { [EOL]     Period test = new Period(0L); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL] }
public void testGetPeriodType() { [EOL]     Period test = new Period(0L); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL] }
public void testGetPeriodType() { [EOL]     Period test = new Period(0L); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL] }
public void testMaskSeconds() throws Exception { [EOL]     PeriodType type = PeriodType.standard().withSecondsRemoved(); [EOL]     assertEquals(7, type.size()); [EOL]     assertEquals(DurationFieldType.years(), type.getFieldType(0)); [EOL]     assertEquals(DurationFieldType.months(), type.getFieldType(1)); [EOL]     assertEquals(DurationFieldType.weeks(), type.getFieldType(2)); [EOL]     assertEquals(DurationFieldType.days(), type.getFieldType(3)); [EOL]     assertEquals(DurationFieldType.hours(), type.getFieldType(4)); [EOL]     assertEquals(DurationFieldType.minutes(), type.getFieldType(5)); [EOL]     assertEquals(DurationFieldType.millis(), type.getFieldType(6)); [EOL]     assertEquals(true, type.equals(type)); [EOL]     assertEquals(true, type.equals(PeriodType.standard().withSecondsRemoved())); [EOL]     assertEquals(false, type.equals(PeriodType.millis())); [EOL]     assertEquals(true, type.hashCode() == type.hashCode()); [EOL]     assertEquals(true, type.hashCode() == PeriodType.standard().withSecondsRemoved().hashCode()); [EOL]     assertEquals(false, type.hashCode() == PeriodType.millis().hashCode()); [EOL]     assertEquals("StandardNoSeconds", type.getName()); [EOL]     assertEquals("PeriodType[StandardNoSeconds]", type.toString()); [EOL]     assertEqualsAfterSerialization(type); [EOL] }
public void testMaskSeconds() throws Exception { [EOL]     PeriodType type = PeriodType.standard().withSecondsRemoved(); [EOL]     assertEquals(7, type.size()); [EOL]     assertEquals(DurationFieldType.years(), type.getFieldType(0)); [EOL]     assertEquals(DurationFieldType.months(), type.getFieldType(1)); [EOL]     assertEquals(DurationFieldType.weeks(), type.getFieldType(2)); [EOL]     assertEquals(DurationFieldType.days(), type.getFieldType(3)); [EOL]     assertEquals(DurationFieldType.hours(), type.getFieldType(4)); [EOL]     assertEquals(DurationFieldType.minutes(), type.getFieldType(5)); [EOL]     assertEquals(DurationFieldType.millis(), type.getFieldType(6)); [EOL]     assertEquals(true, type.equals(type)); [EOL]     assertEquals(true, type.equals(PeriodType.standard().withSecondsRemoved())); [EOL]     assertEquals(false, type.equals(PeriodType.millis())); [EOL]     assertEquals(true, type.hashCode() == type.hashCode()); [EOL]     assertEquals(true, type.hashCode() == PeriodType.standard().withSecondsRemoved().hashCode()); [EOL]     assertEquals(false, type.hashCode() == PeriodType.millis().hashCode()); [EOL]     assertEquals("StandardNoSeconds", type.getName()); [EOL]     assertEquals("PeriodType[StandardNoSeconds]", type.toString()); [EOL]     assertEqualsAfterSerialization(type); [EOL] }
public void testMaskSeconds() throws Exception { [EOL]     PeriodType type = PeriodType.standard().withSecondsRemoved(); [EOL]     assertEquals(7, type.size()); [EOL]     assertEquals(DurationFieldType.years(), type.getFieldType(0)); [EOL]     assertEquals(DurationFieldType.months(), type.getFieldType(1)); [EOL]     assertEquals(DurationFieldType.weeks(), type.getFieldType(2)); [EOL]     assertEquals(DurationFieldType.days(), type.getFieldType(3)); [EOL]     assertEquals(DurationFieldType.hours(), type.getFieldType(4)); [EOL]     assertEquals(DurationFieldType.minutes(), type.getFieldType(5)); [EOL]     assertEquals(DurationFieldType.millis(), type.getFieldType(6)); [EOL]     assertEquals(true, type.equals(type)); [EOL]     assertEquals(true, type.equals(PeriodType.standard().withSecondsRemoved())); [EOL]     assertEquals(false, type.equals(PeriodType.millis())); [EOL]     assertEquals(true, type.hashCode() == type.hashCode()); [EOL]     assertEquals(true, type.hashCode() == PeriodType.standard().withSecondsRemoved().hashCode()); [EOL]     assertEquals(false, type.hashCode() == PeriodType.millis().hashCode()); [EOL]     assertEquals("StandardNoSeconds", type.getName()); [EOL]     assertEquals("PeriodType[StandardNoSeconds]", type.toString()); [EOL]     assertEqualsAfterSerialization(type); [EOL] }
public void testGetInstantChronology_RI() { [EOL]     DateTime dt = new DateTime(123L, BuddhistChronology.getInstance()); [EOL]     assertEquals(BuddhistChronology.getInstance(), DateTimeUtils.getInstantChronology(dt)); [EOL]     Instant i = new Instant(123L); [EOL]     assertEquals(ISOChronology.getInstanceUTC(), DateTimeUtils.getInstantChronology(i)); [EOL]     AbstractInstant ai = new AbstractInstant() { [EOL]  [EOL]         public long getMillis() { [EOL]             return 0L; [EOL]         } [EOL]  [EOL]         public Chronology getChronology() { [EOL]             return null; [EOL]         } [EOL]     }; [EOL]     assertEquals(ISOChronology.getInstance(), DateTimeUtils.getInstantChronology(ai)); [EOL]     assertEquals(ISOChronology.getInstance(), DateTimeUtils.getInstantChronology(null)); [EOL] }
public void testGetInstantChronology_RI() { [EOL]     DateTime dt = new DateTime(123L, BuddhistChronology.getInstance()); [EOL]     assertEquals(BuddhistChronology.getInstance(), DateTimeUtils.getInstantChronology(dt)); [EOL]     Instant i = new Instant(123L); [EOL]     assertEquals(ISOChronology.getInstanceUTC(), DateTimeUtils.getInstantChronology(i)); [EOL]     AbstractInstant ai = new AbstractInstant() { [EOL]  [EOL]         public long getMillis() { [EOL]             return 0L; [EOL]         } [EOL]  [EOL]         public Chronology getChronology() { [EOL]             return null; [EOL]         } [EOL]     }; [EOL]     assertEquals(ISOChronology.getInstance(), DateTimeUtils.getInstantChronology(ai)); [EOL]     assertEquals(ISOChronology.getInstance(), DateTimeUtils.getInstantChronology(null)); [EOL] }
public void testGetInstantChronology_RI() { [EOL]     DateTime dt = new DateTime(123L, BuddhistChronology.getInstance()); [EOL]     assertEquals(BuddhistChronology.getInstance(), DateTimeUtils.getInstantChronology(dt)); [EOL]     Instant i = new Instant(123L); [EOL]     assertEquals(ISOChronology.getInstanceUTC(), DateTimeUtils.getInstantChronology(i)); [EOL]     AbstractInstant ai = new AbstractInstant() { [EOL]  [EOL]         public long getMillis() { [EOL]             return 0L; [EOL]         } [EOL]  [EOL]         public Chronology getChronology() { [EOL]             return null; [EOL]         } [EOL]     }; [EOL]     assertEquals(ISOChronology.getInstance(), DateTimeUtils.getInstantChronology(ai)); [EOL]     assertEquals(ISOChronology.getInstance(), DateTimeUtils.getInstantChronology(null)); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testIsContiguous_RP() { [EOL]     YearMonthDay ymd = new YearMonthDay(2005, 6, 9); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(ymd)); [EOL]     TimeOfDay tod = new TimeOfDay(12, 20, 30, 0); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(tod)); [EOL]     Partial year = new Partial(DateTimeFieldType.year(), 2005); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(year)); [EOL]     Partial hourOfDay = new Partial(DateTimeFieldType.hourOfDay(), 12); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(hourOfDay)); [EOL]     Partial yearHour = year.with(DateTimeFieldType.hourOfDay(), 12); [EOL]     assertEquals(false, DateTimeUtils.isContiguous(yearHour)); [EOL]     Partial ymdd = new Partial(ymd).with(DateTimeFieldType.dayOfWeek(), 2); [EOL]     assertEquals(false, DateTimeUtils.isContiguous(ymdd)); [EOL]     Partial dd = new Partial(DateTimeFieldType.dayOfMonth(), 13).with(DateTimeFieldType.dayOfWeek(), 5); [EOL]     assertEquals(false, DateTimeUtils.isContiguous(dd)); [EOL]     try { [EOL]         DateTimeUtils.isContiguous((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testIsContiguous_RP() { [EOL]     YearMonthDay ymd = new YearMonthDay(2005, 6, 9); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(ymd)); [EOL]     TimeOfDay tod = new TimeOfDay(12, 20, 30, 0); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(tod)); [EOL]     Partial year = new Partial(DateTimeFieldType.year(), 2005); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(year)); [EOL]     Partial hourOfDay = new Partial(DateTimeFieldType.hourOfDay(), 12); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(hourOfDay)); [EOL]     Partial yearHour = year.with(DateTimeFieldType.hourOfDay(), 12); [EOL]     assertEquals(false, DateTimeUtils.isContiguous(yearHour)); [EOL]     Partial ymdd = new Partial(ymd).with(DateTimeFieldType.dayOfWeek(), 2); [EOL]     assertEquals(false, DateTimeUtils.isContiguous(ymdd)); [EOL]     Partial dd = new Partial(DateTimeFieldType.dayOfMonth(), 13).with(DateTimeFieldType.dayOfWeek(), 5); [EOL]     assertEquals(false, DateTimeUtils.isContiguous(dd)); [EOL]     try { [EOL]         DateTimeUtils.isContiguous((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGetPeriodType_PeriodType() { [EOL]     assertEquals(PeriodType.dayTime(), DateTimeUtils.getPeriodType(PeriodType.dayTime())); [EOL]     assertEquals(PeriodType.standard(), DateTimeUtils.getPeriodType(null)); [EOL] }
public void testGetDurationMillis_RI() { [EOL]     Duration dur = new Duration(123L); [EOL]     assertEquals(123L, DateTimeUtils.getDurationMillis(dur)); [EOL]     assertEquals(0L, DateTimeUtils.getDurationMillis(null)); [EOL] }
public void testGetDurationMillis_RI() { [EOL]     Duration dur = new Duration(123L); [EOL]     assertEquals(123L, DateTimeUtils.getDurationMillis(dur)); [EOL]     assertEquals(0L, DateTimeUtils.getDurationMillis(null)); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testIsContiguous_RP() { [EOL]     YearMonthDay ymd = new YearMonthDay(2005, 6, 9); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(ymd)); [EOL]     TimeOfDay tod = new TimeOfDay(12, 20, 30, 0); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(tod)); [EOL]     Partial year = new Partial(DateTimeFieldType.year(), 2005); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(year)); [EOL]     Partial hourOfDay = new Partial(DateTimeFieldType.hourOfDay(), 12); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(hourOfDay)); [EOL]     Partial yearHour = year.with(DateTimeFieldType.hourOfDay(), 12); [EOL]     assertEquals(false, DateTimeUtils.isContiguous(yearHour)); [EOL]     Partial ymdd = new Partial(ymd).with(DateTimeFieldType.dayOfWeek(), 2); [EOL]     assertEquals(false, DateTimeUtils.isContiguous(ymdd)); [EOL]     Partial dd = new Partial(DateTimeFieldType.dayOfMonth(), 13).with(DateTimeFieldType.dayOfWeek(), 5); [EOL]     assertEquals(false, DateTimeUtils.isContiguous(dd)); [EOL]     try { [EOL]         DateTimeUtils.isContiguous((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testIsContiguous_RP() { [EOL]     YearMonthDay ymd = new YearMonthDay(2005, 6, 9); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(ymd)); [EOL]     TimeOfDay tod = new TimeOfDay(12, 20, 30, 0); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(tod)); [EOL]     Partial year = new Partial(DateTimeFieldType.year(), 2005); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(year)); [EOL]     Partial hourOfDay = new Partial(DateTimeFieldType.hourOfDay(), 12); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(hourOfDay)); [EOL]     Partial yearHour = year.with(DateTimeFieldType.hourOfDay(), 12); [EOL]     assertEquals(false, DateTimeUtils.isContiguous(yearHour)); [EOL]     Partial ymdd = new Partial(ymd).with(DateTimeFieldType.dayOfWeek(), 2); [EOL]     assertEquals(false, DateTimeUtils.isContiguous(ymdd)); [EOL]     Partial dd = new Partial(DateTimeFieldType.dayOfMonth(), 13).with(DateTimeFieldType.dayOfWeek(), 5); [EOL]     assertEquals(false, DateTimeUtils.isContiguous(dd)); [EOL]     try { [EOL]         DateTimeUtils.isContiguous((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testIsContiguous_RP() { [EOL]     YearMonthDay ymd = new YearMonthDay(2005, 6, 9); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(ymd)); [EOL]     TimeOfDay tod = new TimeOfDay(12, 20, 30, 0); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(tod)); [EOL]     Partial year = new Partial(DateTimeFieldType.year(), 2005); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(year)); [EOL]     Partial hourOfDay = new Partial(DateTimeFieldType.hourOfDay(), 12); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(hourOfDay)); [EOL]     Partial yearHour = year.with(DateTimeFieldType.hourOfDay(), 12); [EOL]     assertEquals(false, DateTimeUtils.isContiguous(yearHour)); [EOL]     Partial ymdd = new Partial(ymd).with(DateTimeFieldType.dayOfWeek(), 2); [EOL]     assertEquals(false, DateTimeUtils.isContiguous(ymdd)); [EOL]     Partial dd = new Partial(DateTimeFieldType.dayOfMonth(), 13).with(DateTimeFieldType.dayOfWeek(), 5); [EOL]     assertEquals(false, DateTimeUtils.isContiguous(dd)); [EOL]     try { [EOL]         DateTimeUtils.isContiguous((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testIsContiguous_RP() { [EOL]     YearMonthDay ymd = new YearMonthDay(2005, 6, 9); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(ymd)); [EOL]     TimeOfDay tod = new TimeOfDay(12, 20, 30, 0); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(tod)); [EOL]     Partial year = new Partial(DateTimeFieldType.year(), 2005); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(year)); [EOL]     Partial hourOfDay = new Partial(DateTimeFieldType.hourOfDay(), 12); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(hourOfDay)); [EOL]     Partial yearHour = year.with(DateTimeFieldType.hourOfDay(), 12); [EOL]     assertEquals(false, DateTimeUtils.isContiguous(yearHour)); [EOL]     Partial ymdd = new Partial(ymd).with(DateTimeFieldType.dayOfWeek(), 2); [EOL]     assertEquals(false, DateTimeUtils.isContiguous(ymdd)); [EOL]     Partial dd = new Partial(DateTimeFieldType.dayOfMonth(), 13).with(DateTimeFieldType.dayOfWeek(), 5); [EOL]     assertEquals(false, DateTimeUtils.isContiguous(dd)); [EOL]     try { [EOL]         DateTimeUtils.isContiguous((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFormatParse_textMonthJanShort_France() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("dd MMM yyyy").withLocale(Locale.FRANCE).withZoneUTC(); [EOL]     String str = new DateTime(2007, 1, 23, 0, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("23 janv. 2007", str); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     check(date, 2007, 1, 23); [EOL] }
public void testFormatParse_textMonthJanShort_France() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("dd MMM yyyy").withLocale(Locale.FRANCE).withZoneUTC(); [EOL]     String str = new DateTime(2007, 1, 23, 0, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("23 janv. 2007", str); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     check(date, 2007, 1, 23); [EOL] }
public void testConstructor_RP_RI5() throws Throwable { [EOL]     MutableInterval test = new MutableInterval((ReadablePeriod) null, (ReadableInstant) null); [EOL]     assertEquals(TEST_TIME_NOW, test.getStartMillis()); [EOL]     assertEquals(TEST_TIME_NOW, test.getEndMillis()); [EOL] }
public void testConstructor_RP_RI5() throws Throwable { [EOL]     MutableInterval test = new MutableInterval((ReadablePeriod) null, (ReadableInstant) null); [EOL]     assertEquals(TEST_TIME_NOW, test.getStartMillis()); [EOL]     assertEquals(TEST_TIME_NOW, test.getEndMillis()); [EOL] }
public void testConstructor_RP_RI5() throws Throwable { [EOL]     MutableInterval test = new MutableInterval((ReadablePeriod) null, (ReadableInstant) null); [EOL]     assertEquals(TEST_TIME_NOW, test.getStartMillis()); [EOL]     assertEquals(TEST_TIME_NOW, test.getEndMillis()); [EOL] }
public void testConstructor_RP_RI5() throws Throwable { [EOL]     MutableInterval test = new MutableInterval((ReadablePeriod) null, (ReadableInstant) null); [EOL]     assertEquals(TEST_TIME_NOW, test.getStartMillis()); [EOL]     assertEquals(TEST_TIME_NOW, test.getEndMillis()); [EOL] }
public void testDefault() { [EOL]     assertNotNull(DateTimeZone.getDefault()); [EOL]     DateTimeZone.setDefault(PARIS); [EOL]     assertSame(PARIS, DateTimeZone.getDefault()); [EOL]     try { [EOL]         DateTimeZone.setDefault(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testDefault() { [EOL]     assertNotNull(DateTimeZone.getDefault()); [EOL]     DateTimeZone.setDefault(PARIS); [EOL]     assertSame(PARIS, DateTimeZone.getDefault()); [EOL]     try { [EOL]         DateTimeZone.setDefault(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testDefault() { [EOL]     assertNotNull(DateTimeZone.getDefault()); [EOL]     DateTimeZone.setDefault(PARIS); [EOL]     assertSame(PARIS, DateTimeZone.getDefault()); [EOL]     try { [EOL]         DateTimeZone.setDefault(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForOffsetHours_int() { [EOL]     assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHours(0)); [EOL]     assertEquals(DateTimeZone.forID("+03:00"), DateTimeZone.forOffsetHours(3)); [EOL]     assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetHours(-2)); [EOL]     try { [EOL]         DateTimeZone.forOffsetHours(999999); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForOffsetHours_int() { [EOL]     assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHours(0)); [EOL]     assertEquals(DateTimeZone.forID("+03:00"), DateTimeZone.forOffsetHours(3)); [EOL]     assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetHours(-2)); [EOL]     try { [EOL]         DateTimeZone.forOffsetHours(999999); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForOffsetHours_int() { [EOL]     assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHours(0)); [EOL]     assertEquals(DateTimeZone.forID("+03:00"), DateTimeZone.forOffsetHours(3)); [EOL]     assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetHours(-2)); [EOL]     try { [EOL]         DateTimeZone.forOffsetHours(999999); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForOffsetHours_int() { [EOL]     assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHours(0)); [EOL]     assertEquals(DateTimeZone.forID("+03:00"), DateTimeZone.forOffsetHours(3)); [EOL]     assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetHours(-2)); [EOL]     try { [EOL]         DateTimeZone.forOffsetHours(999999); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForOffsetHours_int() { [EOL]     assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHours(0)); [EOL]     assertEquals(DateTimeZone.forID("+03:00"), DateTimeZone.forOffsetHours(3)); [EOL]     assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetHours(-2)); [EOL]     try { [EOL]         DateTimeZone.forOffsetHours(999999); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForOffsetHours_int() { [EOL]     assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHours(0)); [EOL]     assertEquals(DateTimeZone.forID("+03:00"), DateTimeZone.forOffsetHours(3)); [EOL]     assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetHours(-2)); [EOL]     try { [EOL]         DateTimeZone.forOffsetHours(999999); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForOffsetHours_int() { [EOL]     assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHours(0)); [EOL]     assertEquals(DateTimeZone.forID("+03:00"), DateTimeZone.forOffsetHours(3)); [EOL]     assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetHours(-2)); [EOL]     try { [EOL]         DateTimeZone.forOffsetHours(999999); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForOffsetHours_int() { [EOL]     assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHours(0)); [EOL]     assertEquals(DateTimeZone.forID("+03:00"), DateTimeZone.forOffsetHours(3)); [EOL]     assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetHours(-2)); [EOL]     try { [EOL]         DateTimeZone.forOffsetHours(999999); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForOffsetHours_int() { [EOL]     assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHours(0)); [EOL]     assertEquals(DateTimeZone.forID("+03:00"), DateTimeZone.forOffsetHours(3)); [EOL]     assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetHours(-2)); [EOL]     try { [EOL]         DateTimeZone.forOffsetHours(999999); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForOffsetHours_int() { [EOL]     assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHours(0)); [EOL]     assertEquals(DateTimeZone.forID("+03:00"), DateTimeZone.forOffsetHours(3)); [EOL]     assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetHours(-2)); [EOL]     try { [EOL]         DateTimeZone.forOffsetHours(999999); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForOffsetHours_int() { [EOL]     assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHours(0)); [EOL]     assertEquals(DateTimeZone.forID("+03:00"), DateTimeZone.forOffsetHours(3)); [EOL]     assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetHours(-2)); [EOL]     try { [EOL]         DateTimeZone.forOffsetHours(999999); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForOffsetHours_int() { [EOL]     assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHours(0)); [EOL]     assertEquals(DateTimeZone.forID("+03:00"), DateTimeZone.forOffsetHours(3)); [EOL]     assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetHours(-2)); [EOL]     try { [EOL]         DateTimeZone.forOffsetHours(999999); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForOffsetHours_int() { [EOL]     assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHours(0)); [EOL]     assertEquals(DateTimeZone.forID("+03:00"), DateTimeZone.forOffsetHours(3)); [EOL]     assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetHours(-2)); [EOL]     try { [EOL]         DateTimeZone.forOffsetHours(999999); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForOffsetHours_int() { [EOL]     assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHours(0)); [EOL]     assertEquals(DateTimeZone.forID("+03:00"), DateTimeZone.forOffsetHours(3)); [EOL]     assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetHours(-2)); [EOL]     try { [EOL]         DateTimeZone.forOffsetHours(999999); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForOffsetHours_int() { [EOL]     assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHours(0)); [EOL]     assertEquals(DateTimeZone.forID("+03:00"), DateTimeZone.forOffsetHours(3)); [EOL]     assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetHours(-2)); [EOL]     try { [EOL]         DateTimeZone.forOffsetHours(999999); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForID_String_old() { [EOL]     Map<String, String> map = new LinkedHashMap<String, String>(); [EOL]     map.put("GMT", "UTC"); [EOL]     map.put("WET", "WET"); [EOL]     map.put("CET", "CET"); [EOL]     map.put("MET", "CET"); [EOL]     map.put("ECT", "CET"); [EOL]     map.put("EET", "EET"); [EOL]     map.put("MIT", "Pacific/Apia"); [EOL]     map.put("HST", "Pacific/Honolulu"); [EOL]     map.put("AST", "America/Anchorage"); [EOL]     map.put("PST", "America/Los_Angeles"); [EOL]     map.put("MST", "America/Denver"); [EOL]     map.put("PNT", "America/Phoenix"); [EOL]     map.put("CST", "America/Chicago"); [EOL]     map.put("EST", "America/New_York"); [EOL]     map.put("IET", "America/Indiana/Indianapolis"); [EOL]     map.put("PRT", "America/Puerto_Rico"); [EOL]     map.put("CNT", "America/St_Johns"); [EOL]     map.put("AGT", "America/Argentina/Buenos_Aires"); [EOL]     map.put("BET", "America/Sao_Paulo"); [EOL]     map.put("ART", "Africa/Cairo"); [EOL]     map.put("CAT", "Africa/Harare"); [EOL]     map.put("EAT", "Africa/Addis_Ababa"); [EOL]     map.put("NET", "Asia/Yerevan"); [EOL]     map.put("PLT", "Asia/Karachi"); [EOL]     map.put("IST", "Asia/Kolkata"); [EOL]     map.put("BST", "Asia/Dhaka"); [EOL]     map.put("VST", "Asia/Ho_Chi_Minh"); [EOL]     map.put("CTT", "Asia/Shanghai"); [EOL]     map.put("JST", "Asia/Tokyo"); [EOL]     map.put("ACT", "Australia/Darwin"); [EOL]     map.put("AET", "Australia/Sydney"); [EOL]     map.put("SST", "Pacific/Guadalcanal"); [EOL]     map.put("NST", "Pacific/Auckland"); [EOL]     for (String key : map.keySet()) { [EOL]         String value = map.get(key); [EOL]         TimeZone juZone = TimeZone.getTimeZone(key); [EOL]         DateTimeZone zone = DateTimeZone.forTimeZone(juZone); [EOL]         assertEquals(value, zone.getID()); [EOL]     } [EOL] }
public void testForID_String_old() { [EOL]     Map<String, String> map = new LinkedHashMap<String, String>(); [EOL]     map.put("GMT", "UTC"); [EOL]     map.put("WET", "WET"); [EOL]     map.put("CET", "CET"); [EOL]     map.put("MET", "CET"); [EOL]     map.put("ECT", "CET"); [EOL]     map.put("EET", "EET"); [EOL]     map.put("MIT", "Pacific/Apia"); [EOL]     map.put("HST", "Pacific/Honolulu"); [EOL]     map.put("AST", "America/Anchorage"); [EOL]     map.put("PST", "America/Los_Angeles"); [EOL]     map.put("MST", "America/Denver"); [EOL]     map.put("PNT", "America/Phoenix"); [EOL]     map.put("CST", "America/Chicago"); [EOL]     map.put("EST", "America/New_York"); [EOL]     map.put("IET", "America/Indiana/Indianapolis"); [EOL]     map.put("PRT", "America/Puerto_Rico"); [EOL]     map.put("CNT", "America/St_Johns"); [EOL]     map.put("AGT", "America/Argentina/Buenos_Aires"); [EOL]     map.put("BET", "America/Sao_Paulo"); [EOL]     map.put("ART", "Africa/Cairo"); [EOL]     map.put("CAT", "Africa/Harare"); [EOL]     map.put("EAT", "Africa/Addis_Ababa"); [EOL]     map.put("NET", "Asia/Yerevan"); [EOL]     map.put("PLT", "Asia/Karachi"); [EOL]     map.put("IST", "Asia/Kolkata"); [EOL]     map.put("BST", "Asia/Dhaka"); [EOL]     map.put("VST", "Asia/Ho_Chi_Minh"); [EOL]     map.put("CTT", "Asia/Shanghai"); [EOL]     map.put("JST", "Asia/Tokyo"); [EOL]     map.put("ACT", "Australia/Darwin"); [EOL]     map.put("AET", "Australia/Sydney"); [EOL]     map.put("SST", "Pacific/Guadalcanal"); [EOL]     map.put("NST", "Pacific/Auckland"); [EOL]     for (String key : map.keySet()) { [EOL]         String value = map.get(key); [EOL]         TimeZone juZone = TimeZone.getTimeZone(key); [EOL]         DateTimeZone zone = DateTimeZone.forTimeZone(juZone); [EOL]         assertEquals(value, zone.getID()); [EOL]     } [EOL] }
public void testForID_String_old() { [EOL]     Map<String, String> map = new LinkedHashMap<String, String>(); [EOL]     map.put("GMT", "UTC"); [EOL]     map.put("WET", "WET"); [EOL]     map.put("CET", "CET"); [EOL]     map.put("MET", "CET"); [EOL]     map.put("ECT", "CET"); [EOL]     map.put("EET", "EET"); [EOL]     map.put("MIT", "Pacific/Apia"); [EOL]     map.put("HST", "Pacific/Honolulu"); [EOL]     map.put("AST", "America/Anchorage"); [EOL]     map.put("PST", "America/Los_Angeles"); [EOL]     map.put("MST", "America/Denver"); [EOL]     map.put("PNT", "America/Phoenix"); [EOL]     map.put("CST", "America/Chicago"); [EOL]     map.put("EST", "America/New_York"); [EOL]     map.put("IET", "America/Indiana/Indianapolis"); [EOL]     map.put("PRT", "America/Puerto_Rico"); [EOL]     map.put("CNT", "America/St_Johns"); [EOL]     map.put("AGT", "America/Argentina/Buenos_Aires"); [EOL]     map.put("BET", "America/Sao_Paulo"); [EOL]     map.put("ART", "Africa/Cairo"); [EOL]     map.put("CAT", "Africa/Harare"); [EOL]     map.put("EAT", "Africa/Addis_Ababa"); [EOL]     map.put("NET", "Asia/Yerevan"); [EOL]     map.put("PLT", "Asia/Karachi"); [EOL]     map.put("IST", "Asia/Kolkata"); [EOL]     map.put("BST", "Asia/Dhaka"); [EOL]     map.put("VST", "Asia/Ho_Chi_Minh"); [EOL]     map.put("CTT", "Asia/Shanghai"); [EOL]     map.put("JST", "Asia/Tokyo"); [EOL]     map.put("ACT", "Australia/Darwin"); [EOL]     map.put("AET", "Australia/Sydney"); [EOL]     map.put("SST", "Pacific/Guadalcanal"); [EOL]     map.put("NST", "Pacific/Auckland"); [EOL]     for (String key : map.keySet()) { [EOL]         String value = map.get(key); [EOL]         TimeZone juZone = TimeZone.getTimeZone(key); [EOL]         DateTimeZone zone = DateTimeZone.forTimeZone(juZone); [EOL]         assertEquals(value, zone.getID()); [EOL]     } [EOL] }
public void testForID_String_old() { [EOL]     Map<String, String> map = new LinkedHashMap<String, String>(); [EOL]     map.put("GMT", "UTC"); [EOL]     map.put("WET", "WET"); [EOL]     map.put("CET", "CET"); [EOL]     map.put("MET", "CET"); [EOL]     map.put("ECT", "CET"); [EOL]     map.put("EET", "EET"); [EOL]     map.put("MIT", "Pacific/Apia"); [EOL]     map.put("HST", "Pacific/Honolulu"); [EOL]     map.put("AST", "America/Anchorage"); [EOL]     map.put("PST", "America/Los_Angeles"); [EOL]     map.put("MST", "America/Denver"); [EOL]     map.put("PNT", "America/Phoenix"); [EOL]     map.put("CST", "America/Chicago"); [EOL]     map.put("EST", "America/New_York"); [EOL]     map.put("IET", "America/Indiana/Indianapolis"); [EOL]     map.put("PRT", "America/Puerto_Rico"); [EOL]     map.put("CNT", "America/St_Johns"); [EOL]     map.put("AGT", "America/Argentina/Buenos_Aires"); [EOL]     map.put("BET", "America/Sao_Paulo"); [EOL]     map.put("ART", "Africa/Cairo"); [EOL]     map.put("CAT", "Africa/Harare"); [EOL]     map.put("EAT", "Africa/Addis_Ababa"); [EOL]     map.put("NET", "Asia/Yerevan"); [EOL]     map.put("PLT", "Asia/Karachi"); [EOL]     map.put("IST", "Asia/Kolkata"); [EOL]     map.put("BST", "Asia/Dhaka"); [EOL]     map.put("VST", "Asia/Ho_Chi_Minh"); [EOL]     map.put("CTT", "Asia/Shanghai"); [EOL]     map.put("JST", "Asia/Tokyo"); [EOL]     map.put("ACT", "Australia/Darwin"); [EOL]     map.put("AET", "Australia/Sydney"); [EOL]     map.put("SST", "Pacific/Guadalcanal"); [EOL]     map.put("NST", "Pacific/Auckland"); [EOL]     for (String key : map.keySet()) { [EOL]         String value = map.get(key); [EOL]         TimeZone juZone = TimeZone.getTimeZone(key); [EOL]         DateTimeZone zone = DateTimeZone.forTimeZone(juZone); [EOL]         assertEquals(value, zone.getID()); [EOL]     } [EOL] }
public void testForID_String_old() { [EOL]     Map<String, String> map = new LinkedHashMap<String, String>(); [EOL]     map.put("GMT", "UTC"); [EOL]     map.put("WET", "WET"); [EOL]     map.put("CET", "CET"); [EOL]     map.put("MET", "CET"); [EOL]     map.put("ECT", "CET"); [EOL]     map.put("EET", "EET"); [EOL]     map.put("MIT", "Pacific/Apia"); [EOL]     map.put("HST", "Pacific/Honolulu"); [EOL]     map.put("AST", "America/Anchorage"); [EOL]     map.put("PST", "America/Los_Angeles"); [EOL]     map.put("MST", "America/Denver"); [EOL]     map.put("PNT", "America/Phoenix"); [EOL]     map.put("CST", "America/Chicago"); [EOL]     map.put("EST", "America/New_York"); [EOL]     map.put("IET", "America/Indiana/Indianapolis"); [EOL]     map.put("PRT", "America/Puerto_Rico"); [EOL]     map.put("CNT", "America/St_Johns"); [EOL]     map.put("AGT", "America/Argentina/Buenos_Aires"); [EOL]     map.put("BET", "America/Sao_Paulo"); [EOL]     map.put("ART", "Africa/Cairo"); [EOL]     map.put("CAT", "Africa/Harare"); [EOL]     map.put("EAT", "Africa/Addis_Ababa"); [EOL]     map.put("NET", "Asia/Yerevan"); [EOL]     map.put("PLT", "Asia/Karachi"); [EOL]     map.put("IST", "Asia/Kolkata"); [EOL]     map.put("BST", "Asia/Dhaka"); [EOL]     map.put("VST", "Asia/Ho_Chi_Minh"); [EOL]     map.put("CTT", "Asia/Shanghai"); [EOL]     map.put("JST", "Asia/Tokyo"); [EOL]     map.put("ACT", "Australia/Darwin"); [EOL]     map.put("AET", "Australia/Sydney"); [EOL]     map.put("SST", "Pacific/Guadalcanal"); [EOL]     map.put("NST", "Pacific/Auckland"); [EOL]     for (String key : map.keySet()) { [EOL]         String value = map.get(key); [EOL]         TimeZone juZone = TimeZone.getTimeZone(key); [EOL]         DateTimeZone zone = DateTimeZone.forTimeZone(juZone); [EOL]         assertEquals(value, zone.getID()); [EOL]     } [EOL] }
public void testForID_String_old() { [EOL]     Map<String, String> map = new LinkedHashMap<String, String>(); [EOL]     map.put("GMT", "UTC"); [EOL]     map.put("WET", "WET"); [EOL]     map.put("CET", "CET"); [EOL]     map.put("MET", "CET"); [EOL]     map.put("ECT", "CET"); [EOL]     map.put("EET", "EET"); [EOL]     map.put("MIT", "Pacific/Apia"); [EOL]     map.put("HST", "Pacific/Honolulu"); [EOL]     map.put("AST", "America/Anchorage"); [EOL]     map.put("PST", "America/Los_Angeles"); [EOL]     map.put("MST", "America/Denver"); [EOL]     map.put("PNT", "America/Phoenix"); [EOL]     map.put("CST", "America/Chicago"); [EOL]     map.put("EST", "America/New_York"); [EOL]     map.put("IET", "America/Indiana/Indianapolis"); [EOL]     map.put("PRT", "America/Puerto_Rico"); [EOL]     map.put("CNT", "America/St_Johns"); [EOL]     map.put("AGT", "America/Argentina/Buenos_Aires"); [EOL]     map.put("BET", "America/Sao_Paulo"); [EOL]     map.put("ART", "Africa/Cairo"); [EOL]     map.put("CAT", "Africa/Harare"); [EOL]     map.put("EAT", "Africa/Addis_Ababa"); [EOL]     map.put("NET", "Asia/Yerevan"); [EOL]     map.put("PLT", "Asia/Karachi"); [EOL]     map.put("IST", "Asia/Kolkata"); [EOL]     map.put("BST", "Asia/Dhaka"); [EOL]     map.put("VST", "Asia/Ho_Chi_Minh"); [EOL]     map.put("CTT", "Asia/Shanghai"); [EOL]     map.put("JST", "Asia/Tokyo"); [EOL]     map.put("ACT", "Australia/Darwin"); [EOL]     map.put("AET", "Australia/Sydney"); [EOL]     map.put("SST", "Pacific/Guadalcanal"); [EOL]     map.put("NST", "Pacific/Auckland"); [EOL]     for (String key : map.keySet()) { [EOL]         String value = map.get(key); [EOL]         TimeZone juZone = TimeZone.getTimeZone(key); [EOL]         DateTimeZone zone = DateTimeZone.forTimeZone(juZone); [EOL]         assertEquals(value, zone.getID()); [EOL]     } [EOL] }
public void testForOffsetHours_int() { [EOL]     assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHours(0)); [EOL]     assertEquals(DateTimeZone.forID("+03:00"), DateTimeZone.forOffsetHours(3)); [EOL]     assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetHours(-2)); [EOL]     try { [EOL]         DateTimeZone.forOffsetHours(999999); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForOffsetHours_int() { [EOL]     assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHours(0)); [EOL]     assertEquals(DateTimeZone.forID("+03:00"), DateTimeZone.forOffsetHours(3)); [EOL]     assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetHours(-2)); [EOL]     try { [EOL]         DateTimeZone.forOffsetHours(999999); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForOffsetHours_int() { [EOL]     assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHours(0)); [EOL]     assertEquals(DateTimeZone.forID("+03:00"), DateTimeZone.forOffsetHours(3)); [EOL]     assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetHours(-2)); [EOL]     try { [EOL]         DateTimeZone.forOffsetHours(999999); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForID_String_old() { [EOL]     Map<String, String> map = new LinkedHashMap<String, String>(); [EOL]     map.put("GMT", "UTC"); [EOL]     map.put("WET", "WET"); [EOL]     map.put("CET", "CET"); [EOL]     map.put("MET", "CET"); [EOL]     map.put("ECT", "CET"); [EOL]     map.put("EET", "EET"); [EOL]     map.put("MIT", "Pacific/Apia"); [EOL]     map.put("HST", "Pacific/Honolulu"); [EOL]     map.put("AST", "America/Anchorage"); [EOL]     map.put("PST", "America/Los_Angeles"); [EOL]     map.put("MST", "America/Denver"); [EOL]     map.put("PNT", "America/Phoenix"); [EOL]     map.put("CST", "America/Chicago"); [EOL]     map.put("EST", "America/New_York"); [EOL]     map.put("IET", "America/Indiana/Indianapolis"); [EOL]     map.put("PRT", "America/Puerto_Rico"); [EOL]     map.put("CNT", "America/St_Johns"); [EOL]     map.put("AGT", "America/Argentina/Buenos_Aires"); [EOL]     map.put("BET", "America/Sao_Paulo"); [EOL]     map.put("ART", "Africa/Cairo"); [EOL]     map.put("CAT", "Africa/Harare"); [EOL]     map.put("EAT", "Africa/Addis_Ababa"); [EOL]     map.put("NET", "Asia/Yerevan"); [EOL]     map.put("PLT", "Asia/Karachi"); [EOL]     map.put("IST", "Asia/Kolkata"); [EOL]     map.put("BST", "Asia/Dhaka"); [EOL]     map.put("VST", "Asia/Ho_Chi_Minh"); [EOL]     map.put("CTT", "Asia/Shanghai"); [EOL]     map.put("JST", "Asia/Tokyo"); [EOL]     map.put("ACT", "Australia/Darwin"); [EOL]     map.put("AET", "Australia/Sydney"); [EOL]     map.put("SST", "Pacific/Guadalcanal"); [EOL]     map.put("NST", "Pacific/Auckland"); [EOL]     for (String key : map.keySet()) { [EOL]         String value = map.get(key); [EOL]         TimeZone juZone = TimeZone.getTimeZone(key); [EOL]         DateTimeZone zone = DateTimeZone.forTimeZone(juZone); [EOL]         assertEquals(value, zone.getID()); [EOL]     } [EOL] }
public void testForID_String_old() { [EOL]     Map<String, String> map = new LinkedHashMap<String, String>(); [EOL]     map.put("GMT", "UTC"); [EOL]     map.put("WET", "WET"); [EOL]     map.put("CET", "CET"); [EOL]     map.put("MET", "CET"); [EOL]     map.put("ECT", "CET"); [EOL]     map.put("EET", "EET"); [EOL]     map.put("MIT", "Pacific/Apia"); [EOL]     map.put("HST", "Pacific/Honolulu"); [EOL]     map.put("AST", "America/Anchorage"); [EOL]     map.put("PST", "America/Los_Angeles"); [EOL]     map.put("MST", "America/Denver"); [EOL]     map.put("PNT", "America/Phoenix"); [EOL]     map.put("CST", "America/Chicago"); [EOL]     map.put("EST", "America/New_York"); [EOL]     map.put("IET", "America/Indiana/Indianapolis"); [EOL]     map.put("PRT", "America/Puerto_Rico"); [EOL]     map.put("CNT", "America/St_Johns"); [EOL]     map.put("AGT", "America/Argentina/Buenos_Aires"); [EOL]     map.put("BET", "America/Sao_Paulo"); [EOL]     map.put("ART", "Africa/Cairo"); [EOL]     map.put("CAT", "Africa/Harare"); [EOL]     map.put("EAT", "Africa/Addis_Ababa"); [EOL]     map.put("NET", "Asia/Yerevan"); [EOL]     map.put("PLT", "Asia/Karachi"); [EOL]     map.put("IST", "Asia/Kolkata"); [EOL]     map.put("BST", "Asia/Dhaka"); [EOL]     map.put("VST", "Asia/Ho_Chi_Minh"); [EOL]     map.put("CTT", "Asia/Shanghai"); [EOL]     map.put("JST", "Asia/Tokyo"); [EOL]     map.put("ACT", "Australia/Darwin"); [EOL]     map.put("AET", "Australia/Sydney"); [EOL]     map.put("SST", "Pacific/Guadalcanal"); [EOL]     map.put("NST", "Pacific/Auckland"); [EOL]     for (String key : map.keySet()) { [EOL]         String value = map.get(key); [EOL]         TimeZone juZone = TimeZone.getTimeZone(key); [EOL]         DateTimeZone zone = DateTimeZone.forTimeZone(juZone); [EOL]         assertEquals(value, zone.getID()); [EOL]     } [EOL] }
public void testForID_String_old() { [EOL]     Map<String, String> map = new LinkedHashMap<String, String>(); [EOL]     map.put("GMT", "UTC"); [EOL]     map.put("WET", "WET"); [EOL]     map.put("CET", "CET"); [EOL]     map.put("MET", "CET"); [EOL]     map.put("ECT", "CET"); [EOL]     map.put("EET", "EET"); [EOL]     map.put("MIT", "Pacific/Apia"); [EOL]     map.put("HST", "Pacific/Honolulu"); [EOL]     map.put("AST", "America/Anchorage"); [EOL]     map.put("PST", "America/Los_Angeles"); [EOL]     map.put("MST", "America/Denver"); [EOL]     map.put("PNT", "America/Phoenix"); [EOL]     map.put("CST", "America/Chicago"); [EOL]     map.put("EST", "America/New_York"); [EOL]     map.put("IET", "America/Indiana/Indianapolis"); [EOL]     map.put("PRT", "America/Puerto_Rico"); [EOL]     map.put("CNT", "America/St_Johns"); [EOL]     map.put("AGT", "America/Argentina/Buenos_Aires"); [EOL]     map.put("BET", "America/Sao_Paulo"); [EOL]     map.put("ART", "Africa/Cairo"); [EOL]     map.put("CAT", "Africa/Harare"); [EOL]     map.put("EAT", "Africa/Addis_Ababa"); [EOL]     map.put("NET", "Asia/Yerevan"); [EOL]     map.put("PLT", "Asia/Karachi"); [EOL]     map.put("IST", "Asia/Kolkata"); [EOL]     map.put("BST", "Asia/Dhaka"); [EOL]     map.put("VST", "Asia/Ho_Chi_Minh"); [EOL]     map.put("CTT", "Asia/Shanghai"); [EOL]     map.put("JST", "Asia/Tokyo"); [EOL]     map.put("ACT", "Australia/Darwin"); [EOL]     map.put("AET", "Australia/Sydney"); [EOL]     map.put("SST", "Pacific/Guadalcanal"); [EOL]     map.put("NST", "Pacific/Auckland"); [EOL]     for (String key : map.keySet()) { [EOL]         String value = map.get(key); [EOL]         TimeZone juZone = TimeZone.getTimeZone(key); [EOL]         DateTimeZone zone = DateTimeZone.forTimeZone(juZone); [EOL]         assertEquals(value, zone.getID()); [EOL]     } [EOL] }
public void testForID_String_old() { [EOL]     Map<String, String> map = new LinkedHashMap<String, String>(); [EOL]     map.put("GMT", "UTC"); [EOL]     map.put("WET", "WET"); [EOL]     map.put("CET", "CET"); [EOL]     map.put("MET", "CET"); [EOL]     map.put("ECT", "CET"); [EOL]     map.put("EET", "EET"); [EOL]     map.put("MIT", "Pacific/Apia"); [EOL]     map.put("HST", "Pacific/Honolulu"); [EOL]     map.put("AST", "America/Anchorage"); [EOL]     map.put("PST", "America/Los_Angeles"); [EOL]     map.put("MST", "America/Denver"); [EOL]     map.put("PNT", "America/Phoenix"); [EOL]     map.put("CST", "America/Chicago"); [EOL]     map.put("EST", "America/New_York"); [EOL]     map.put("IET", "America/Indiana/Indianapolis"); [EOL]     map.put("PRT", "America/Puerto_Rico"); [EOL]     map.put("CNT", "America/St_Johns"); [EOL]     map.put("AGT", "America/Argentina/Buenos_Aires"); [EOL]     map.put("BET", "America/Sao_Paulo"); [EOL]     map.put("ART", "Africa/Cairo"); [EOL]     map.put("CAT", "Africa/Harare"); [EOL]     map.put("EAT", "Africa/Addis_Ababa"); [EOL]     map.put("NET", "Asia/Yerevan"); [EOL]     map.put("PLT", "Asia/Karachi"); [EOL]     map.put("IST", "Asia/Kolkata"); [EOL]     map.put("BST", "Asia/Dhaka"); [EOL]     map.put("VST", "Asia/Ho_Chi_Minh"); [EOL]     map.put("CTT", "Asia/Shanghai"); [EOL]     map.put("JST", "Asia/Tokyo"); [EOL]     map.put("ACT", "Australia/Darwin"); [EOL]     map.put("AET", "Australia/Sydney"); [EOL]     map.put("SST", "Pacific/Guadalcanal"); [EOL]     map.put("NST", "Pacific/Auckland"); [EOL]     for (String key : map.keySet()) { [EOL]         String value = map.get(key); [EOL]         TimeZone juZone = TimeZone.getTimeZone(key); [EOL]         DateTimeZone zone = DateTimeZone.forTimeZone(juZone); [EOL]         assertEquals(value, zone.getID()); [EOL]     } [EOL] }
public void testForOffsetHours_int() { [EOL]     assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHours(0)); [EOL]     assertEquals(DateTimeZone.forID("+03:00"), DateTimeZone.forOffsetHours(3)); [EOL]     assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetHours(-2)); [EOL]     try { [EOL]         DateTimeZone.forOffsetHours(999999); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForOffsetHours_int() { [EOL]     assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHours(0)); [EOL]     assertEquals(DateTimeZone.forID("+03:00"), DateTimeZone.forOffsetHours(3)); [EOL]     assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetHours(-2)); [EOL]     try { [EOL]         DateTimeZone.forOffsetHours(999999); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForOffsetHours_int() { [EOL]     assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHours(0)); [EOL]     assertEquals(DateTimeZone.forID("+03:00"), DateTimeZone.forOffsetHours(3)); [EOL]     assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetHours(-2)); [EOL]     try { [EOL]         DateTimeZone.forOffsetHours(999999); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForOffsetHours_int() { [EOL]     assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHours(0)); [EOL]     assertEquals(DateTimeZone.forID("+03:00"), DateTimeZone.forOffsetHours(3)); [EOL]     assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetHours(-2)); [EOL]     try { [EOL]         DateTimeZone.forOffsetHours(999999); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForOffsetHours_int() { [EOL]     assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHours(0)); [EOL]     assertEquals(DateTimeZone.forID("+03:00"), DateTimeZone.forOffsetHours(3)); [EOL]     assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetHours(-2)); [EOL]     try { [EOL]         DateTimeZone.forOffsetHours(999999); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForOffsetHours_int() { [EOL]     assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHours(0)); [EOL]     assertEquals(DateTimeZone.forID("+03:00"), DateTimeZone.forOffsetHours(3)); [EOL]     assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetHours(-2)); [EOL]     try { [EOL]         DateTimeZone.forOffsetHours(999999); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForOffsetHours_int() { [EOL]     assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHours(0)); [EOL]     assertEquals(DateTimeZone.forID("+03:00"), DateTimeZone.forOffsetHours(3)); [EOL]     assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetHours(-2)); [EOL]     try { [EOL]         DateTimeZone.forOffsetHours(999999); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForOffsetHours_int() { [EOL]     assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHours(0)); [EOL]     assertEquals(DateTimeZone.forID("+03:00"), DateTimeZone.forOffsetHours(3)); [EOL]     assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetHours(-2)); [EOL]     try { [EOL]         DateTimeZone.forOffsetHours(999999); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForOffsetHours_int() { [EOL]     assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHours(0)); [EOL]     assertEquals(DateTimeZone.forID("+03:00"), DateTimeZone.forOffsetHours(3)); [EOL]     assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetHours(-2)); [EOL]     try { [EOL]         DateTimeZone.forOffsetHours(999999); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForOffsetHours_int() { [EOL]     assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHours(0)); [EOL]     assertEquals(DateTimeZone.forID("+03:00"), DateTimeZone.forOffsetHours(3)); [EOL]     assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetHours(-2)); [EOL]     try { [EOL]         DateTimeZone.forOffsetHours(999999); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testIsLocalDateTimeGap_Berlin() { [EOL]     DateTimeZone zone = DateTimeZone.forID("Europe/Berlin"); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 1, 0))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 1, 59, 59, 99))); [EOL]     assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 0))); [EOL]     assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 30))); [EOL]     assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 59, 59, 99))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 3, 0))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 4, 0))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 1, 30))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 2, 30))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 3, 30))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 12, 24, 12, 34))); [EOL] }
public void testIsLocalDateTimeGap_Berlin() { [EOL]     DateTimeZone zone = DateTimeZone.forID("Europe/Berlin"); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 1, 0))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 1, 59, 59, 99))); [EOL]     assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 0))); [EOL]     assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 30))); [EOL]     assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 59, 59, 99))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 3, 0))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 4, 0))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 1, 30))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 2, 30))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 3, 30))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 12, 24, 12, 34))); [EOL] }
public void testIsLocalDateTimeGap_Berlin() { [EOL]     DateTimeZone zone = DateTimeZone.forID("Europe/Berlin"); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 1, 0))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 1, 59, 59, 99))); [EOL]     assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 0))); [EOL]     assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 30))); [EOL]     assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 59, 59, 99))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 3, 0))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 4, 0))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 1, 30))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 2, 30))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 3, 30))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 12, 24, 12, 34))); [EOL] }
public void testBug3476684_adjustOffset_springGap() { [EOL]     final DateTimeZone zone = DateTimeZone.forID("America/Sao_Paulo"); [EOL]     DateTime base = new DateTime(2011, 10, 15, 22, 15, zone); [EOL]     DateTime baseBefore = base.plusHours(1); [EOL]     DateTime baseAfter = base.plusHours(2); [EOL]     assertSame(base, base.withEarlierOffsetAtOverlap()); [EOL]     assertSame(base, base.withLaterOffsetAtOverlap()); [EOL]     assertSame(baseBefore, baseBefore.withEarlierOffsetAtOverlap()); [EOL]     assertEquals(baseBefore, baseBefore.withLaterOffsetAtOverlap()); [EOL]     assertSame(baseAfter, baseAfter.withLaterOffsetAtOverlap()); [EOL]     assertEquals(baseAfter, baseAfter.withEarlierOffsetAtOverlap()); [EOL] }
public void testBug3476684_adjustOffset_springGap() { [EOL]     final DateTimeZone zone = DateTimeZone.forID("America/Sao_Paulo"); [EOL]     DateTime base = new DateTime(2011, 10, 15, 22, 15, zone); [EOL]     DateTime baseBefore = base.plusHours(1); [EOL]     DateTime baseAfter = base.plusHours(2); [EOL]     assertSame(base, base.withEarlierOffsetAtOverlap()); [EOL]     assertSame(base, base.withLaterOffsetAtOverlap()); [EOL]     assertSame(baseBefore, baseBefore.withEarlierOffsetAtOverlap()); [EOL]     assertEquals(baseBefore, baseBefore.withLaterOffsetAtOverlap()); [EOL]     assertSame(baseAfter, baseAfter.withLaterOffsetAtOverlap()); [EOL]     assertEquals(baseAfter, baseAfter.withEarlierOffsetAtOverlap()); [EOL] }
public void testBug3476684_adjustOffset_springGap() { [EOL]     final DateTimeZone zone = DateTimeZone.forID("America/Sao_Paulo"); [EOL]     DateTime base = new DateTime(2011, 10, 15, 22, 15, zone); [EOL]     DateTime baseBefore = base.plusHours(1); [EOL]     DateTime baseAfter = base.plusHours(2); [EOL]     assertSame(base, base.withEarlierOffsetAtOverlap()); [EOL]     assertSame(base, base.withLaterOffsetAtOverlap()); [EOL]     assertSame(baseBefore, baseBefore.withEarlierOffsetAtOverlap()); [EOL]     assertEquals(baseBefore, baseBefore.withLaterOffsetAtOverlap()); [EOL]     assertSame(baseAfter, baseAfter.withLaterOffsetAtOverlap()); [EOL]     assertEquals(baseAfter, baseAfter.withEarlierOffsetAtOverlap()); [EOL] }
public void testBug3476684_adjustOffset_springGap() { [EOL]     final DateTimeZone zone = DateTimeZone.forID("America/Sao_Paulo"); [EOL]     DateTime base = new DateTime(2011, 10, 15, 22, 15, zone); [EOL]     DateTime baseBefore = base.plusHours(1); [EOL]     DateTime baseAfter = base.plusHours(2); [EOL]     assertSame(base, base.withEarlierOffsetAtOverlap()); [EOL]     assertSame(base, base.withLaterOffsetAtOverlap()); [EOL]     assertSame(baseBefore, baseBefore.withEarlierOffsetAtOverlap()); [EOL]     assertEquals(baseBefore, baseBefore.withLaterOffsetAtOverlap()); [EOL]     assertSame(baseAfter, baseAfter.withLaterOffsetAtOverlap()); [EOL]     assertEquals(baseAfter, baseAfter.withEarlierOffsetAtOverlap()); [EOL] }
public void testBug3476684_adjustOffset_springGap() { [EOL]     final DateTimeZone zone = DateTimeZone.forID("America/Sao_Paulo"); [EOL]     DateTime base = new DateTime(2011, 10, 15, 22, 15, zone); [EOL]     DateTime baseBefore = base.plusHours(1); [EOL]     DateTime baseAfter = base.plusHours(2); [EOL]     assertSame(base, base.withEarlierOffsetAtOverlap()); [EOL]     assertSame(base, base.withLaterOffsetAtOverlap()); [EOL]     assertSame(baseBefore, baseBefore.withEarlierOffsetAtOverlap()); [EOL]     assertEquals(baseBefore, baseBefore.withLaterOffsetAtOverlap()); [EOL]     assertSame(baseAfter, baseAfter.withLaterOffsetAtOverlap()); [EOL]     assertEquals(baseAfter, baseAfter.withEarlierOffsetAtOverlap()); [EOL] }
public void testToInterval_Zone() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(TOKYO); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime start = base.toDateTimeAtStartOfDay(TOKYO); [EOL]     DateTime end = start.plus(Period.days(1)); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testToInterval_Zone() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(TOKYO); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime start = base.toDateTimeAtStartOfDay(TOKYO); [EOL]     DateTime end = start.plus(Period.days(1)); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testToInterval_Zone() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(TOKYO); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime start = base.toDateTimeAtStartOfDay(TOKYO); [EOL]     DateTime end = start.plus(Period.days(1)); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testConstructor_long_long_Chronology1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance()); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, CopticChronology.getInstance()); [EOL]     MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), CopticChronology.getInstance()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testConstructor_long_long_Chronology1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance()); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, CopticChronology.getInstance()); [EOL]     MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), CopticChronology.getInstance()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testConstructor_long_long_Chronology1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance()); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, CopticChronology.getInstance()); [EOL]     MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), CopticChronology.getInstance()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testConstructor_long_long_Chronology1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance()); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, CopticChronology.getInstance()); [EOL]     MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), CopticChronology.getInstance()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testConstructor_long_long_Chronology1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance()); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, CopticChronology.getInstance()); [EOL]     MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), CopticChronology.getInstance()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testConstructor_long_long_Chronology1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance()); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, CopticChronology.getInstance()); [EOL]     MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), CopticChronology.getInstance()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testConstructor_long_long_Chronology1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance()); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, CopticChronology.getInstance()); [EOL]     MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), CopticChronology.getInstance()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testConstructor_long_long_Chronology1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance()); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, CopticChronology.getInstance()); [EOL]     MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), CopticChronology.getInstance()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testConstructor_long_long_Chronology1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance()); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, CopticChronology.getInstance()); [EOL]     MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), CopticChronology.getInstance()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testConstructor_long_long_Chronology1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance()); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, CopticChronology.getInstance()); [EOL]     MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), CopticChronology.getInstance()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testConstructor_long_long_Chronology1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance()); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, CopticChronology.getInstance()); [EOL]     MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), CopticChronology.getInstance()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testPropertyAddDayOfMonth() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime copy = test.dayOfMonth().addToCopy(9); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2004-06-18T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfMonth().addToCopy(21); [EOL]     assertEquals("2004-06-30T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfMonth().addToCopy(22); [EOL]     assertEquals("2004-07-01T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfMonth().addToCopy(22 + 30); [EOL]     assertEquals("2004-07-31T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfMonth().addToCopy(22 + 31); [EOL]     assertEquals("2004-08-01T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfMonth().addToCopy(21 + 31 + 31 + 30 + 31 + 30 + 31); [EOL]     assertEquals("2004-12-31T00:00:00.000Z", copy.toString()); [EOL]     copy = test.dayOfMonth().addToCopy(22 + 31 + 31 + 30 + 31 + 30 + 31); [EOL]     assertEquals("2005-01-01T00:00:00.000Z", copy.toString()); [EOL]     copy = test.dayOfMonth().addToCopy(-8); [EOL]     assertEquals("2004-06-01T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfMonth().addToCopy(-9); [EOL]     assertEquals("2004-05-31T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfMonth().addToCopy(-8 - 31 - 30 - 31 - 29 - 31); [EOL]     assertEquals("2004-01-01T00:00:00.000Z", copy.toString()); [EOL]     copy = test.dayOfMonth().addToCopy(-9 - 31 - 30 - 31 - 29 - 31); [EOL]     assertEquals("2003-12-31T00:00:00.000Z", copy.toString()); [EOL] }
public void testPropertyAddDayOfMonth() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime copy = test.dayOfMonth().addToCopy(9); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2004-06-18T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfMonth().addToCopy(21); [EOL]     assertEquals("2004-06-30T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfMonth().addToCopy(22); [EOL]     assertEquals("2004-07-01T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfMonth().addToCopy(22 + 30); [EOL]     assertEquals("2004-07-31T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfMonth().addToCopy(22 + 31); [EOL]     assertEquals("2004-08-01T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfMonth().addToCopy(21 + 31 + 31 + 30 + 31 + 30 + 31); [EOL]     assertEquals("2004-12-31T00:00:00.000Z", copy.toString()); [EOL]     copy = test.dayOfMonth().addToCopy(22 + 31 + 31 + 30 + 31 + 30 + 31); [EOL]     assertEquals("2005-01-01T00:00:00.000Z", copy.toString()); [EOL]     copy = test.dayOfMonth().addToCopy(-8); [EOL]     assertEquals("2004-06-01T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfMonth().addToCopy(-9); [EOL]     assertEquals("2004-05-31T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfMonth().addToCopy(-8 - 31 - 30 - 31 - 29 - 31); [EOL]     assertEquals("2004-01-01T00:00:00.000Z", copy.toString()); [EOL]     copy = test.dayOfMonth().addToCopy(-9 - 31 - 30 - 31 - 29 - 31); [EOL]     assertEquals("2003-12-31T00:00:00.000Z", copy.toString()); [EOL] }
public void testPropertyAddDayOfMonth() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime copy = test.dayOfMonth().addToCopy(9); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2004-06-18T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfMonth().addToCopy(21); [EOL]     assertEquals("2004-06-30T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfMonth().addToCopy(22); [EOL]     assertEquals("2004-07-01T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfMonth().addToCopy(22 + 30); [EOL]     assertEquals("2004-07-31T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfMonth().addToCopy(22 + 31); [EOL]     assertEquals("2004-08-01T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfMonth().addToCopy(21 + 31 + 31 + 30 + 31 + 30 + 31); [EOL]     assertEquals("2004-12-31T00:00:00.000Z", copy.toString()); [EOL]     copy = test.dayOfMonth().addToCopy(22 + 31 + 31 + 30 + 31 + 30 + 31); [EOL]     assertEquals("2005-01-01T00:00:00.000Z", copy.toString()); [EOL]     copy = test.dayOfMonth().addToCopy(-8); [EOL]     assertEquals("2004-06-01T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfMonth().addToCopy(-9); [EOL]     assertEquals("2004-05-31T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfMonth().addToCopy(-8 - 31 - 30 - 31 - 29 - 31); [EOL]     assertEquals("2004-01-01T00:00:00.000Z", copy.toString()); [EOL]     copy = test.dayOfMonth().addToCopy(-9 - 31 - 30 - 31 - 29 - 31); [EOL]     assertEquals("2003-12-31T00:00:00.000Z", copy.toString()); [EOL] }
public void testPropertyAddDayOfMonth() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime copy = test.dayOfMonth().addToCopy(9); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2004-06-18T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfMonth().addToCopy(21); [EOL]     assertEquals("2004-06-30T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfMonth().addToCopy(22); [EOL]     assertEquals("2004-07-01T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfMonth().addToCopy(22 + 30); [EOL]     assertEquals("2004-07-31T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfMonth().addToCopy(22 + 31); [EOL]     assertEquals("2004-08-01T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfMonth().addToCopy(21 + 31 + 31 + 30 + 31 + 30 + 31); [EOL]     assertEquals("2004-12-31T00:00:00.000Z", copy.toString()); [EOL]     copy = test.dayOfMonth().addToCopy(22 + 31 + 31 + 30 + 31 + 30 + 31); [EOL]     assertEquals("2005-01-01T00:00:00.000Z", copy.toString()); [EOL]     copy = test.dayOfMonth().addToCopy(-8); [EOL]     assertEquals("2004-06-01T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfMonth().addToCopy(-9); [EOL]     assertEquals("2004-05-31T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfMonth().addToCopy(-8 - 31 - 30 - 31 - 29 - 31); [EOL]     assertEquals("2004-01-01T00:00:00.000Z", copy.toString()); [EOL]     copy = test.dayOfMonth().addToCopy(-9 - 31 - 30 - 31 - 29 - 31); [EOL]     assertEquals("2003-12-31T00:00:00.000Z", copy.toString()); [EOL] }
public void testPropertyAddDayOfMonth() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime copy = test.dayOfMonth().addToCopy(9); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2004-06-18T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfMonth().addToCopy(21); [EOL]     assertEquals("2004-06-30T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfMonth().addToCopy(22); [EOL]     assertEquals("2004-07-01T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfMonth().addToCopy(22 + 30); [EOL]     assertEquals("2004-07-31T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfMonth().addToCopy(22 + 31); [EOL]     assertEquals("2004-08-01T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfMonth().addToCopy(21 + 31 + 31 + 30 + 31 + 30 + 31); [EOL]     assertEquals("2004-12-31T00:00:00.000Z", copy.toString()); [EOL]     copy = test.dayOfMonth().addToCopy(22 + 31 + 31 + 30 + 31 + 30 + 31); [EOL]     assertEquals("2005-01-01T00:00:00.000Z", copy.toString()); [EOL]     copy = test.dayOfMonth().addToCopy(-8); [EOL]     assertEquals("2004-06-01T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfMonth().addToCopy(-9); [EOL]     assertEquals("2004-05-31T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfMonth().addToCopy(-8 - 31 - 30 - 31 - 29 - 31); [EOL]     assertEquals("2004-01-01T00:00:00.000Z", copy.toString()); [EOL]     copy = test.dayOfMonth().addToCopy(-9 - 31 - 30 - 31 - 29 - 31); [EOL]     assertEquals("2003-12-31T00:00:00.000Z", copy.toString()); [EOL] }
public void testToInterval_Zone() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(TOKYO); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime start = base.toDateTimeAtStartOfDay(TOKYO); [EOL]     DateTime end = start.plus(Period.days(1)); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testGetPeriodType() { [EOL]     Period test = new Period(0L); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testConstructor_RP_RP4() throws Throwable { [EOL]     YearMonthDay dt1 = new YearMonthDay(2005, 7, 17); [EOL]     YearMonthDay dt2 = null; [EOL]     try { [EOL]         new Period(dt1, dt2); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testConstructor_RI_RD_PeriodType1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     Duration dur = new Interval(dt1, dt2).toDuration(); [EOL]     MutablePeriod test = new MutablePeriod(dt1, dur, PeriodType.yearDayTime()); [EOL]     assertEquals(PeriodType.yearDayTime(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(31, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testGetPeriodType() { [EOL]     Period test = new Period(0L); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL] }
public void testGetPeriodType() { [EOL]     Period test = new Period(0L); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL] }
public void testConstructor_long_PeriodType_Chronology4() throws Throwable { [EOL]     long length = 4 * DateTimeConstants.MILLIS_PER_DAY + 5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE + 7 * DateTimeConstants.MILLIS_PER_SECOND + 8; [EOL]     Period test = new Period(length, (PeriodType) null, (Chronology) null); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals((4 * 24) + 5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] }
public void testToInterval_Zone() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(TOKYO); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime start = base.toDateTimeAtStartOfDay(TOKYO); [EOL]     DateTime end = start.plus(Period.days(1)); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testConstructor_long_PeriodType_Chronology4() throws Throwable { [EOL]     long length = 4 * DateTimeConstants.MILLIS_PER_DAY + 5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE + 7 * DateTimeConstants.MILLIS_PER_SECOND + 8; [EOL]     Period test = new Period(length, (PeriodType) null, (Chronology) null); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals((4 * 24) + 5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] }
public void testGetPeriodType() { [EOL]     Period test = new Period(0L); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL] }
public void testConstructor_long_PeriodType_Chronology4() throws Throwable { [EOL]     long length = 4 * DateTimeConstants.MILLIS_PER_DAY + 5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE + 7 * DateTimeConstants.MILLIS_PER_SECOND + 8; [EOL]     Period test = new Period(length, (PeriodType) null, (Chronology) null); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals((4 * 24) + 5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] }
public void testConstructor_long_PeriodType_Chronology4() throws Throwable { [EOL]     long length = 4 * DateTimeConstants.MILLIS_PER_DAY + 5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE + 7 * DateTimeConstants.MILLIS_PER_SECOND + 8; [EOL]     Period test = new Period(length, (PeriodType) null, (Chronology) null); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals((4 * 24) + 5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] }
public void testConstructor_Object_PeriodType2() throws Throwable { [EOL]     Period test = new Period((Object) null, PeriodType.yearMonthDayTime()); [EOL]     assertEquals(PeriodType.yearMonthDayTime(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] }
public void testAddDays() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addDays(10); [EOL]     assertEquals(14, test.getDays()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addDays(-10); [EOL]     assertEquals(-6, test.getDays()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addDays(0); [EOL]     assertEquals(4, test.getDays()); [EOL] }
public void testAddDays() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addDays(10); [EOL]     assertEquals(14, test.getDays()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addDays(-10); [EOL]     assertEquals(-6, test.getDays()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addDays(0); [EOL]     assertEquals(4, test.getDays()); [EOL] }
public void testToPeriod_PeriodType_Chronology() { [EOL]     long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L; [EOL]     Duration test = new Duration(length); [EOL]     Period result = test.toPeriod(PeriodType.standard().withMillisRemoved(), ISOChronology.getInstanceUTC()); [EOL]     assertEquals(new Period(test, PeriodType.standard().withMillisRemoved(), ISOChronology.getInstanceUTC()), result); [EOL]     assertEquals(new Period(test.getMillis(), PeriodType.standard().withMillisRemoved(), ISOChronology.getInstanceUTC()), result); [EOL] }
public void testSubclassableConstructor() { [EOL]     ISODateTimeFormat f = new ISODateTimeFormat() { [EOL]     }; [EOL]     assertNotNull(f); [EOL] }
public void testForFields_null() { [EOL]     try { [EOL]         ISODateTimeFormat.forFields((Collection) null, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_null() { [EOL]     try { [EOL]         ISODateTimeFormat.forFields((Collection) null, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_null() { [EOL]     try { [EOL]         ISODateTimeFormat.forFields((Collection) null, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_null() { [EOL]     try { [EOL]         ISODateTimeFormat.forFields((Collection) null, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_null() { [EOL]     try { [EOL]         ISODateTimeFormat.forFields((Collection) null, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_null() { [EOL]     try { [EOL]         ISODateTimeFormat.forFields((Collection) null, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_null() { [EOL]     try { [EOL]         ISODateTimeFormat.forFields((Collection) null, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_null() { [EOL]     try { [EOL]         ISODateTimeFormat.forFields((Collection) null, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_null() { [EOL]     try { [EOL]         ISODateTimeFormat.forFields((Collection) null, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_null() { [EOL]     try { [EOL]         ISODateTimeFormat.forFields((Collection) null, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_null() { [EOL]     try { [EOL]         ISODateTimeFormat.forFields((Collection) null, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_calBased_YM() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear() }; [EOL]     int[] values = new int[] { 2005, 6 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005-06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("2005-06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005-06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void testForFields_calBased_YM() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear() }; [EOL]     int[] values = new int[] { 2005, 6 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005-06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("2005-06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005-06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void testForFields_calBased_YM() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear() }; [EOL]     int[] values = new int[] { 2005, 6 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005-06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("2005-06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005-06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void testForFields_calBased_YM() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear() }; [EOL]     int[] values = new int[] { 2005, 6 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005-06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("2005-06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005-06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void testForFields_calBased_YM() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear() }; [EOL]     int[] values = new int[] { 2005, 6 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005-06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("2005-06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005-06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void testForFields_calBased_YM() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear() }; [EOL]     int[] values = new int[] { 2005, 6 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005-06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("2005-06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005-06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void testForFields_calBased_YM() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear() }; [EOL]     int[] values = new int[] { 2005, 6 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005-06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("2005-06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005-06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void testForFields_calBased_YM() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear() }; [EOL]     int[] values = new int[] { 2005, 6 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005-06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("2005-06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005-06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void testForFields_ordinalBased_YD() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.dayOfYear() }; [EOL]     int[] values = new int[] { 2005, 177 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("2005177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void testForFields_ordinalBased_YD() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.dayOfYear() }; [EOL]     int[] values = new int[] { 2005, 177 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("2005177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void testForFields_ordinalBased_YD() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.dayOfYear() }; [EOL]     int[] values = new int[] { 2005, 177 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("2005177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void testForFields_ordinalBased_YD() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.dayOfYear() }; [EOL]     int[] values = new int[] { 2005, 177 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("2005177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void testForFields_weekBased_YWD() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.weekyear(), DateTimeFieldType.weekOfWeekyear(), DateTimeFieldType.dayOfWeek() }; [EOL]     int[] values = new int[] { 2005, 8, 5 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-W08-5", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005-W08-5", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("2005W085", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005W085", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void testForFields_weekBased_YWD() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.weekyear(), DateTimeFieldType.weekOfWeekyear(), DateTimeFieldType.dayOfWeek() }; [EOL]     int[] values = new int[] { 2005, 8, 5 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-W08-5", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005-W08-5", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("2005W085", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005W085", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void testForFields_weekBased_YWD() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.weekyear(), DateTimeFieldType.weekOfWeekyear(), DateTimeFieldType.dayOfWeek() }; [EOL]     int[] values = new int[] { 2005, 8, 5 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-W08-5", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005-W08-5", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("2005W085", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005W085", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void testForFields_weekBased_YWD() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.weekyear(), DateTimeFieldType.weekOfWeekyear(), DateTimeFieldType.dayOfWeek() }; [EOL]     int[] values = new int[] { 2005, 8, 5 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-W08-5", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005-W08-5", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("2005W085", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005W085", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void testForFields_weekBased_YWD() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.weekyear(), DateTimeFieldType.weekOfWeekyear(), DateTimeFieldType.dayOfWeek() }; [EOL]     int[] values = new int[] { 2005, 8, 5 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-W08-5", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005-W08-5", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("2005W085", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005W085", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void testForFields_weekBased_YWD() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.weekyear(), DateTimeFieldType.weekOfWeekyear(), DateTimeFieldType.dayOfWeek() }; [EOL]     int[] values = new int[] { 2005, 8, 5 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-W08-5", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005-W08-5", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("2005W085", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005W085", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void testForFields_weekBased_YWD() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.weekyear(), DateTimeFieldType.weekOfWeekyear(), DateTimeFieldType.dayOfWeek() }; [EOL]     int[] values = new int[] { 2005, 8, 5 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-W08-5", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005-W08-5", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("2005W085", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005W085", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] }
public void testForFields_time_Mm() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.minuteOfHour(), DateTimeFieldType.millisOfSecond() }; [EOL]     int[] values = new int[] { 20, 40 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("-20-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("-20-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_time_Mm() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.minuteOfHour(), DateTimeFieldType.millisOfSecond() }; [EOL]     int[] values = new int[] { 20, 40 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("-20-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("-20-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_time_Mm() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.minuteOfHour(), DateTimeFieldType.millisOfSecond() }; [EOL]     int[] values = new int[] { 20, 40 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("-20-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("-20-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_time_Mm() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.minuteOfHour(), DateTimeFieldType.millisOfSecond() }; [EOL]     int[] values = new int[] { 20, 40 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("-20-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("-20-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_time_Mm() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.minuteOfHour(), DateTimeFieldType.millisOfSecond() }; [EOL]     int[] values = new int[] { 20, 40 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("-20-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("-20-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_time_Mm() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.minuteOfHour(), DateTimeFieldType.millisOfSecond() }; [EOL]     int[] values = new int[] { 20, 40 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("-20-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("-20-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testForFields_time_Mm() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.minuteOfHour(), DateTimeFieldType.millisOfSecond() }; [EOL]     int[] values = new int[] { 20, 40 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("-20-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("-20-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void test_timeParser() { [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL]     DateTimeFormatter parser = ISODateTimeFormat.timeParser(); [EOL]     assertParse(parser, false, "2006-06-09"); [EOL]     assertParse(parser, false, "2006-W27-3"); [EOL]     assertParse(parser, false, "2006-123"); [EOL]     assertParse(parser, false, "2006-06-09T+02:00"); [EOL]     assertParse(parser, false, "2006-W27-3T+02:00"); [EOL]     assertParse(parser, false, "2006-123T+02:00"); [EOL]     assertParse(parser, false, "2006-06-09T10:20:30.040"); [EOL]     assertParse(parser, false, "2006-W27-3T10:20:30.040"); [EOL]     assertParse(parser, false, "2006-123T10:20:30.040"); [EOL]     assertParse(parser, false, "2006-06-09T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "2006-W27-3T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "2006-123T10:20:30.040+02:00"); [EOL]     assertParse(parser, "T10:20:30.040000000", new DateTime(1970, 1, 1, 10, 20, 30, 40)); [EOL]     assertParse(parser, "T10:20:30.004", new DateTime(1970, 1, 1, 10, 20, 30, 4)); [EOL]     assertParse(parser, "T10:20:30.040", new DateTime(1970, 1, 1, 10, 20, 30, 40)); [EOL]     assertParse(parser, "T10:20:30.400", new DateTime(1970, 1, 1, 10, 20, 30, 400)); [EOL]     assertParse(parser, "T10.5", new DateTime(1970, 1, 1, 10, 30, 0, 0)); [EOL]     assertParse(parser, "T10:20:30.040+02:00", new DateTime(1970, 1, 1, 8, 20, 30, 40)); [EOL]     assertParse(parser, "T10.5+02:00", new DateTime(1970, 1, 1, 8, 30, 0, 0)); [EOL]     assertParse(parser, true, "10:20:30.040"); [EOL]     assertParse(parser, true, "10.5"); [EOL]     assertParse(parser, true, "10:20:30.040+02:00"); [EOL]     assertParse(parser, true, "10.5+02:00"); [EOL] }
public void test_localDateOptionalTimeParser() { [EOL]     DateTimeFormatter parser = ISODateTimeFormat.localDateOptionalTimeParser(); [EOL]     assertEquals(DateTimeZone.UTC, parser.getZone()); [EOL]     assertParse(parser, true, "2006-06-09"); [EOL]     assertParse(parser, true, "2006-W27-3"); [EOL]     assertParse(parser, true, "2006-123"); [EOL]     assertParse(parser, false, "2006-06-09T+02:00"); [EOL]     assertParse(parser, false, "2006-W27-3T+02:00"); [EOL]     assertParse(parser, false, "2006-123T+02:00"); [EOL]     assertParse(parser, true, "2006-06-09T10:20:30.040"); [EOL]     assertParse(parser, true, "2006-W27-3T10:20:30.040"); [EOL]     assertParse(parser, true, "2006-123T10:20:30.040"); [EOL]     assertParse(parser, false, "2006-06-09T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "2006-W27-3T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "2006-123T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "T10:20:30.040"); [EOL]     assertParse(parser, false, "T10.5"); [EOL]     assertParse(parser, false, "T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "T10.5+02:00"); [EOL]     assertParse(parser, false, "10:20:30.040"); [EOL]     assertParse(parser, false, "10.5"); [EOL]     assertParse(parser, false, "10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "10.5+02:00"); [EOL] }
public void testFormat_basicTTime() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("T102030.040Z", ISODateTimeFormat.basicTTime().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("T112030.040+0100", ISODateTimeFormat.basicTTime().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("T122030.040+0200", ISODateTimeFormat.basicTTime().print(dt)); [EOL] }
public void test_basicWeekDateTime() { [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL]     DateTimeFormatter parser = ISODateTimeFormat.basicWeekDateTime(); [EOL]     assertParse(parser, "2006W273T102030.400999999Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006W273T102030.400Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006W273T102030.40Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006W273T102030.4Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, false, "2006W27T102030.400Z"); [EOL]     assertParse(parser, false, "2006W2T102030.400Z"); [EOL]     assertParse(parser, false, "2006W273T10203.400Z"); [EOL]     assertParse(parser, false, "2006W273T1020.400Z"); [EOL]     assertParse(parser, false, "2006W273T102.400Z"); [EOL]     assertParse(parser, false, "2006W273T10.400Z"); [EOL]     assertParse(parser, false, "2006W273T1.400Z"); [EOL] }
public void testFormat_yearMonthDay() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("2004-06-09", ISODateTimeFormat.yearMonthDay().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("2004-06-09", ISODateTimeFormat.yearMonthDay().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("2004-06-09", ISODateTimeFormat.yearMonthDay().print(dt)); [EOL] }
public void testFormat_weekyear() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("2004", ISODateTimeFormat.weekyear().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("2004", ISODateTimeFormat.weekyear().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("2004", ISODateTimeFormat.weekyear().print(dt)); [EOL] }
public void testFormat_weekyearWeekDay() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("2004-W24-3", ISODateTimeFormat.weekyearWeekDay().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("2004-W24-3", ISODateTimeFormat.weekyearWeekDay().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("2004-W24-3", ISODateTimeFormat.weekyearWeekDay().print(dt)); [EOL] }
public void testFormat_dateHourMinuteSecondMillis() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("2004-06-09T10:20:30.040", ISODateTimeFormat.dateHourMinuteSecondMillis().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("2004-06-09T11:20:30.040", ISODateTimeFormat.dateHourMinuteSecondMillis().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("2004-06-09T12:20:30.040", ISODateTimeFormat.dateHourMinuteSecondMillis().print(dt)); [EOL] }
public void testFormat_dateHourMinuteSecondFraction() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("2004-06-09T10:20:30.040", ISODateTimeFormat.dateHourMinuteSecondFraction().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("2004-06-09T11:20:30.040", ISODateTimeFormat.dateHourMinuteSecondFraction().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("2004-06-09T12:20:30.040", ISODateTimeFormat.dateHourMinuteSecondFraction().print(dt)); [EOL] }
public void testFactory_parseMinutes_String() { [EOL]     assertEquals(0, Minutes.parseMinutes((String) null).getMinutes()); [EOL]     assertEquals(0, Minutes.parseMinutes("PT0M").getMinutes()); [EOL]     assertEquals(1, Minutes.parseMinutes("PT1M").getMinutes()); [EOL]     assertEquals(-3, Minutes.parseMinutes("PT-3M").getMinutes()); [EOL]     assertEquals(2, Minutes.parseMinutes("P0Y0M0DT2M").getMinutes()); [EOL]     assertEquals(2, Minutes.parseMinutes("PT0H2M").getMinutes()); [EOL]     try { [EOL]         Minutes.parseMinutes("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Minutes.parseMinutes("P1DT1M"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_parseMinutes_String() { [EOL]     assertEquals(0, Minutes.parseMinutes((String) null).getMinutes()); [EOL]     assertEquals(0, Minutes.parseMinutes("PT0M").getMinutes()); [EOL]     assertEquals(1, Minutes.parseMinutes("PT1M").getMinutes()); [EOL]     assertEquals(-3, Minutes.parseMinutes("PT-3M").getMinutes()); [EOL]     assertEquals(2, Minutes.parseMinutes("P0Y0M0DT2M").getMinutes()); [EOL]     assertEquals(2, Minutes.parseMinutes("PT0H2M").getMinutes()); [EOL]     try { [EOL]         Minutes.parseMinutes("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Minutes.parseMinutes("P1DT1M"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_parseMinutes_String() { [EOL]     assertEquals(0, Minutes.parseMinutes((String) null).getMinutes()); [EOL]     assertEquals(0, Minutes.parseMinutes("PT0M").getMinutes()); [EOL]     assertEquals(1, Minutes.parseMinutes("PT1M").getMinutes()); [EOL]     assertEquals(-3, Minutes.parseMinutes("PT-3M").getMinutes()); [EOL]     assertEquals(2, Minutes.parseMinutes("P0Y0M0DT2M").getMinutes()); [EOL]     assertEquals(2, Minutes.parseMinutes("PT0H2M").getMinutes()); [EOL]     try { [EOL]         Minutes.parseMinutes("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Minutes.parseMinutes("P1DT1M"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_parseMinutes_String() { [EOL]     assertEquals(0, Minutes.parseMinutes((String) null).getMinutes()); [EOL]     assertEquals(0, Minutes.parseMinutes("PT0M").getMinutes()); [EOL]     assertEquals(1, Minutes.parseMinutes("PT1M").getMinutes()); [EOL]     assertEquals(-3, Minutes.parseMinutes("PT-3M").getMinutes()); [EOL]     assertEquals(2, Minutes.parseMinutes("P0Y0M0DT2M").getMinutes()); [EOL]     assertEquals(2, Minutes.parseMinutes("PT0H2M").getMinutes()); [EOL]     try { [EOL]         Minutes.parseMinutes("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Minutes.parseMinutes("P1DT1M"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_parseMinutes_String() { [EOL]     assertEquals(0, Minutes.parseMinutes((String) null).getMinutes()); [EOL]     assertEquals(0, Minutes.parseMinutes("PT0M").getMinutes()); [EOL]     assertEquals(1, Minutes.parseMinutes("PT1M").getMinutes()); [EOL]     assertEquals(-3, Minutes.parseMinutes("PT-3M").getMinutes()); [EOL]     assertEquals(2, Minutes.parseMinutes("P0Y0M0DT2M").getMinutes()); [EOL]     assertEquals(2, Minutes.parseMinutes("PT0H2M").getMinutes()); [EOL]     try { [EOL]         Minutes.parseMinutes("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Minutes.parseMinutes("P1DT1M"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_parseMinutes_String() { [EOL]     assertEquals(0, Minutes.parseMinutes((String) null).getMinutes()); [EOL]     assertEquals(0, Minutes.parseMinutes("PT0M").getMinutes()); [EOL]     assertEquals(1, Minutes.parseMinutes("PT1M").getMinutes()); [EOL]     assertEquals(-3, Minutes.parseMinutes("PT-3M").getMinutes()); [EOL]     assertEquals(2, Minutes.parseMinutes("P0Y0M0DT2M").getMinutes()); [EOL]     assertEquals(2, Minutes.parseMinutes("PT0H2M").getMinutes()); [EOL]     try { [EOL]         Minutes.parseMinutes("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Minutes.parseMinutes("P1DT1M"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_parseMinutes_String() { [EOL]     assertEquals(0, Minutes.parseMinutes((String) null).getMinutes()); [EOL]     assertEquals(0, Minutes.parseMinutes("PT0M").getMinutes()); [EOL]     assertEquals(1, Minutes.parseMinutes("PT1M").getMinutes()); [EOL]     assertEquals(-3, Minutes.parseMinutes("PT-3M").getMinutes()); [EOL]     assertEquals(2, Minutes.parseMinutes("P0Y0M0DT2M").getMinutes()); [EOL]     assertEquals(2, Minutes.parseMinutes("PT0H2M").getMinutes()); [EOL]     try { [EOL]         Minutes.parseMinutes("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Minutes.parseMinutes("P1DT1M"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_minutesBetween_RPartial() { [EOL]     LocalTime start = new LocalTime(12, 3); [EOL]     LocalTime end1 = new LocalTime(12, 6); [EOL]     @SuppressWarnings("deprecation") [EOL]     TimeOfDay end2 = new TimeOfDay(12, 9); [EOL]     assertEquals(3, Minutes.minutesBetween(start, end1).getMinutes()); [EOL]     assertEquals(0, Minutes.minutesBetween(start, start).getMinutes()); [EOL]     assertEquals(0, Minutes.minutesBetween(end1, end1).getMinutes()); [EOL]     assertEquals(-3, Minutes.minutesBetween(end1, start).getMinutes()); [EOL]     assertEquals(6, Minutes.minutesBetween(start, end2).getMinutes()); [EOL] }
public void testFactory_minutesBetween_RPartial() { [EOL]     LocalTime start = new LocalTime(12, 3); [EOL]     LocalTime end1 = new LocalTime(12, 6); [EOL]     @SuppressWarnings("deprecation") [EOL]     TimeOfDay end2 = new TimeOfDay(12, 9); [EOL]     assertEquals(3, Minutes.minutesBetween(start, end1).getMinutes()); [EOL]     assertEquals(0, Minutes.minutesBetween(start, start).getMinutes()); [EOL]     assertEquals(0, Minutes.minutesBetween(end1, end1).getMinutes()); [EOL]     assertEquals(-3, Minutes.minutesBetween(end1, start).getMinutes()); [EOL]     assertEquals(6, Minutes.minutesBetween(start, end2).getMinutes()); [EOL] }
public void testFactory_minutesBetween_RPartial() { [EOL]     LocalTime start = new LocalTime(12, 3); [EOL]     LocalTime end1 = new LocalTime(12, 6); [EOL]     @SuppressWarnings("deprecation") [EOL]     TimeOfDay end2 = new TimeOfDay(12, 9); [EOL]     assertEquals(3, Minutes.minutesBetween(start, end1).getMinutes()); [EOL]     assertEquals(0, Minutes.minutesBetween(start, start).getMinutes()); [EOL]     assertEquals(0, Minutes.minutesBetween(end1, end1).getMinutes()); [EOL]     assertEquals(-3, Minutes.minutesBetween(end1, start).getMinutes()); [EOL]     assertEquals(6, Minutes.minutesBetween(start, end2).getMinutes()); [EOL] }
public void testFactory_parseMinutes_String() { [EOL]     assertEquals(0, Minutes.parseMinutes((String) null).getMinutes()); [EOL]     assertEquals(0, Minutes.parseMinutes("PT0M").getMinutes()); [EOL]     assertEquals(1, Minutes.parseMinutes("PT1M").getMinutes()); [EOL]     assertEquals(-3, Minutes.parseMinutes("PT-3M").getMinutes()); [EOL]     assertEquals(2, Minutes.parseMinutes("P0Y0M0DT2M").getMinutes()); [EOL]     assertEquals(2, Minutes.parseMinutes("PT0H2M").getMinutes()); [EOL]     try { [EOL]         Minutes.parseMinutes("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Minutes.parseMinutes("P1DT1M"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_parseMinutes_String() { [EOL]     assertEquals(0, Minutes.parseMinutes((String) null).getMinutes()); [EOL]     assertEquals(0, Minutes.parseMinutes("PT0M").getMinutes()); [EOL]     assertEquals(1, Minutes.parseMinutes("PT1M").getMinutes()); [EOL]     assertEquals(-3, Minutes.parseMinutes("PT-3M").getMinutes()); [EOL]     assertEquals(2, Minutes.parseMinutes("P0Y0M0DT2M").getMinutes()); [EOL]     assertEquals(2, Minutes.parseMinutes("PT0H2M").getMinutes()); [EOL]     try { [EOL]         Minutes.parseMinutes("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Minutes.parseMinutes("P1DT1M"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_parseMinutes_String() { [EOL]     assertEquals(0, Minutes.parseMinutes((String) null).getMinutes()); [EOL]     assertEquals(0, Minutes.parseMinutes("PT0M").getMinutes()); [EOL]     assertEquals(1, Minutes.parseMinutes("PT1M").getMinutes()); [EOL]     assertEquals(-3, Minutes.parseMinutes("PT-3M").getMinutes()); [EOL]     assertEquals(2, Minutes.parseMinutes("P0Y0M0DT2M").getMinutes()); [EOL]     assertEquals(2, Minutes.parseMinutes("PT0H2M").getMinutes()); [EOL]     try { [EOL]         Minutes.parseMinutes("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Minutes.parseMinutes("P1DT1M"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_minutesBetween_RPartial() { [EOL]     LocalTime start = new LocalTime(12, 3); [EOL]     LocalTime end1 = new LocalTime(12, 6); [EOL]     @SuppressWarnings("deprecation") [EOL]     TimeOfDay end2 = new TimeOfDay(12, 9); [EOL]     assertEquals(3, Minutes.minutesBetween(start, end1).getMinutes()); [EOL]     assertEquals(0, Minutes.minutesBetween(start, start).getMinutes()); [EOL]     assertEquals(0, Minutes.minutesBetween(end1, end1).getMinutes()); [EOL]     assertEquals(-3, Minutes.minutesBetween(end1, start).getMinutes()); [EOL]     assertEquals(6, Minutes.minutesBetween(start, end2).getMinutes()); [EOL] }
public void testToStandardWeeks() { [EOL]     Minutes test = Minutes.minutes(60 * 24 * 7 * 2); [EOL]     Weeks expected = Weeks.weeks(2); [EOL]     assertEquals(expected, test.toStandardWeeks()); [EOL] }
public void testMinus_Minutes() { [EOL]     Minutes test2 = Minutes.minutes(2); [EOL]     Minutes test3 = Minutes.minutes(3); [EOL]     Minutes result = test2.minus(test3); [EOL]     assertEquals(2, test2.getMinutes()); [EOL]     assertEquals(3, test3.getMinutes()); [EOL]     assertEquals(-1, result.getMinutes()); [EOL]     assertEquals(1, Minutes.ONE.minus(Minutes.ZERO).getMinutes()); [EOL]     assertEquals(1, Minutes.ONE.minus((Minutes) null).getMinutes()); [EOL]     try { [EOL]         Minutes.MIN_VALUE.minus(Minutes.ONE); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testMinus_Minutes() { [EOL]     Minutes test2 = Minutes.minutes(2); [EOL]     Minutes test3 = Minutes.minutes(3); [EOL]     Minutes result = test2.minus(test3); [EOL]     assertEquals(2, test2.getMinutes()); [EOL]     assertEquals(3, test3.getMinutes()); [EOL]     assertEquals(-1, result.getMinutes()); [EOL]     assertEquals(1, Minutes.ONE.minus(Minutes.ZERO).getMinutes()); [EOL]     assertEquals(1, Minutes.ONE.minus((Minutes) null).getMinutes()); [EOL]     try { [EOL]         Minutes.MIN_VALUE.minus(Minutes.ONE); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] }
public void testSerializedGJChronologyChangedInternals() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(PARIS, 123L, 2); [EOL]     loadAndCompare(test, "GJChronologyChangedInternals", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronologyChangedInternals() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(PARIS, 123L, 2); [EOL]     loadAndCompare(test, "GJChronologyChangedInternals", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronologyChangedInternals() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(PARIS, 123L, 2); [EOL]     loadAndCompare(test, "GJChronologyChangedInternals", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testSerializedGJChronologyChangedInternals() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(PARIS, 123L, 2); [EOL]     loadAndCompare(test, "GJChronologyChangedInternals", true); [EOL]     inlineCompare(test, true); [EOL] }
public void testFormatParse_textYear_UK() { [EOL]     DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder().appendLiteral('$').appendText(DateTimeFieldType.year()).toFormatter().withLocale(Locale.UK).withZoneUTC(); [EOL]     String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("$2007", str); [EOL]     try { [EOL]         dateFormatter.parseDateTime(str); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFormatParse_textYear_UK() { [EOL]     DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder().appendLiteral('$').appendText(DateTimeFieldType.year()).toFormatter().withLocale(Locale.UK).withZoneUTC(); [EOL]     String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("$2007", str); [EOL]     try { [EOL]         dateFormatter.parseDateTime(str); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFixed() throws IOException { [EOL]     DateTimeZoneBuilder builder = new DateTimeZoneBuilder().setStandardOffset(3600000).setFixedSavings("LMT", 0); [EOL]     DateTimeZone tz = builder.toDateTimeZone("Test", true); [EOL]     for (int i = 0; i < 2; i++) { [EOL]         assertEquals("Test", tz.getID()); [EOL]         assertEquals(true, tz.isFixed()); [EOL]         assertEquals(3600000, tz.getOffset(0)); [EOL]         assertEquals(3600000, tz.getStandardOffset(0)); [EOL]         assertEquals(0, tz.nextTransition(0)); [EOL]         assertEquals(0, tz.previousTransition(0)); [EOL]         tz = testSerialization(builder, "Test"); [EOL]     } [EOL] }
public void testFixed() throws IOException { [EOL]     DateTimeZoneBuilder builder = new DateTimeZoneBuilder().setStandardOffset(3600000).setFixedSavings("LMT", 0); [EOL]     DateTimeZone tz = builder.toDateTimeZone("Test", true); [EOL]     for (int i = 0; i < 2; i++) { [EOL]         assertEquals("Test", tz.getID()); [EOL]         assertEquals(true, tz.isFixed()); [EOL]         assertEquals(3600000, tz.getOffset(0)); [EOL]         assertEquals(3600000, tz.getStandardOffset(0)); [EOL]         assertEquals(0, tz.nextTransition(0)); [EOL]         assertEquals(0, tz.previousTransition(0)); [EOL]         tz = testSerialization(builder, "Test"); [EOL]     } [EOL] }
public void testFixed() throws IOException { [EOL]     DateTimeZoneBuilder builder = new DateTimeZoneBuilder().setStandardOffset(3600000).setFixedSavings("LMT", 0); [EOL]     DateTimeZone tz = builder.toDateTimeZone("Test", true); [EOL]     for (int i = 0; i < 2; i++) { [EOL]         assertEquals("Test", tz.getID()); [EOL]         assertEquals(true, tz.isFixed()); [EOL]         assertEquals(3600000, tz.getOffset(0)); [EOL]         assertEquals(3600000, tz.getStandardOffset(0)); [EOL]         assertEquals(0, tz.nextTransition(0)); [EOL]         assertEquals(0, tz.previousTransition(0)); [EOL]         tz = testSerialization(builder, "Test"); [EOL]     } [EOL] }
public void testFormatParse_textYear_UK() { [EOL]     DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder().appendLiteral('$').appendText(DateTimeFieldType.year()).toFormatter().withLocale(Locale.UK).withZoneUTC(); [EOL]     String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("$2007", str); [EOL]     try { [EOL]         dateFormatter.parseDateTime(str); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyGetMaxMinValuesDayOfYear() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertEquals(1, test.dayOfYear().getMinimumValue()); [EOL]     assertEquals(1, test.dayOfYear().getMinimumValueOverall()); [EOL]     assertEquals(366, test.dayOfYear().getMaximumValue()); [EOL]     assertEquals(366, test.dayOfYear().getMaximumValueOverall()); [EOL]     test = new DateTime(2002, 6, 9, 0, 0, 0, 0); [EOL]     assertEquals(365, test.dayOfYear().getMaximumValue()); [EOL]     assertEquals(366, test.dayOfYear().getMaximumValueOverall()); [EOL] }
public void testFormatParse_textYear_UK() { [EOL]     DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder().appendLiteral('$').appendText(DateTimeFieldType.year()).toFormatter().withLocale(Locale.UK).withZoneUTC(); [EOL]     String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("$2007", str); [EOL]     try { [EOL]         dateFormatter.parseDateTime(str); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyWithMaximumValueDayOfMonth() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime copy = test.dayOfMonth().withMaximumValue(); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2004-06-30T00:00:00.000+01:00", copy.toString()); [EOL] }
public void testPropertyHashCode() { [EOL]     LocalDateTime test1 = new LocalDateTime(2005, 11, 8, 10, 20, 30, 40); [EOL]     LocalDateTime test2 = new LocalDateTime(2005, 11, 9, 10, 20, 30, 40); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode()); [EOL]     assertEquals(false, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test1.monthOfYear().hashCode() == test1.monthOfYear().hashCode()); [EOL]     assertEquals(true, test1.monthOfYear().hashCode() == test2.monthOfYear().hashCode()); [EOL] }
public void testPublicGetNameMethod() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     assertSame(fieldOne.getName(), dateTimeFieldTypeOne.getName()); [EOL] }
public void test_add_RP_int_intarray_int() { [EOL]     int[] values = new int[] { 10, 20, 30, 40 }; [EOL]     int[] expected = new int[] { 10, 20, 30, 40 }; [EOL]     BaseDateTimeField field = new MockStandardDateTimeField(); [EOL]     int[] result = field.add(new TimeOfDay(), 2, values, 0); [EOL]     assertEquals(true, Arrays.equals(expected, result)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 31, 40 }; [EOL]     result = field.add(new TimeOfDay(), 2, values, 1); [EOL]     assertEquals(true, Arrays.equals(expected, result)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 21, 0, 40 }; [EOL]     result = field.add(new TimeOfDay(), 2, values, 30); [EOL]     assertEquals(true, Arrays.equals(expected, result)); [EOL]     values = new int[] { 23, 59, 30, 40 }; [EOL]     try { [EOL]         field.add(new TimeOfDay(), 2, values, 30); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 29, 40 }; [EOL]     result = field.add(new TimeOfDay(), 2, values, -1); [EOL]     assertEquals(true, Arrays.equals(expected, result)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 19, 59, 40 }; [EOL]     result = field.add(new TimeOfDay(), 2, values, -31); [EOL]     assertEquals(true, Arrays.equals(expected, result)); [EOL]     values = new int[] { 0, 0, 30, 40 }; [EOL]     try { [EOL]         field.add(new TimeOfDay(), 2, values, -31); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testSetDate_int_int_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 12, 24, 48, 501); [EOL]     test.setDate(2010, 12, 3); [EOL]     assertEquals(2010, test.getYear()); [EOL]     assertEquals(12, test.getMonthOfYear()); [EOL]     assertEquals(3, test.getDayOfMonth()); [EOL]     assertEquals(12, test.getHourOfDay()); [EOL]     assertEquals(24, test.getMinuteOfHour()); [EOL]     assertEquals(48, test.getSecondOfMinute()); [EOL]     assertEquals(501, test.getMillisOfSecond()); [EOL] }
public void testSetDate_int_int_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 12, 24, 48, 501); [EOL]     test.setDate(2010, 12, 3); [EOL]     assertEquals(2010, test.getYear()); [EOL]     assertEquals(12, test.getMonthOfYear()); [EOL]     assertEquals(3, test.getDayOfMonth()); [EOL]     assertEquals(12, test.getHourOfDay()); [EOL]     assertEquals(24, test.getMinuteOfHour()); [EOL]     assertEquals(48, test.getSecondOfMinute()); [EOL]     assertEquals(501, test.getMillisOfSecond()); [EOL] }
public void testSetDate_int_int_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 12, 24, 48, 501); [EOL]     test.setDate(2010, 12, 3); [EOL]     assertEquals(2010, test.getYear()); [EOL]     assertEquals(12, test.getMonthOfYear()); [EOL]     assertEquals(3, test.getDayOfMonth()); [EOL]     assertEquals(12, test.getHourOfDay()); [EOL]     assertEquals(24, test.getMinuteOfHour()); [EOL]     assertEquals(48, test.getSecondOfMinute()); [EOL]     assertEquals(501, test.getMillisOfSecond()); [EOL] }
public void testSetDate_int_int_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 12, 24, 48, 501); [EOL]     test.setDate(2010, 12, 3); [EOL]     assertEquals(2010, test.getYear()); [EOL]     assertEquals(12, test.getMonthOfYear()); [EOL]     assertEquals(3, test.getDayOfMonth()); [EOL]     assertEquals(12, test.getHourOfDay()); [EOL]     assertEquals(24, test.getMinuteOfHour()); [EOL]     assertEquals(48, test.getSecondOfMinute()); [EOL]     assertEquals(501, test.getMillisOfSecond()); [EOL] }
public void testSetTime_int_int_int2() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     try { [EOL]         test.setTime(60, 6, 7, 8); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(TEST_TIME1, test.getMillis()); [EOL] }
public void testSetTime_int_int_int2() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     try { [EOL]         test.setTime(60, 6, 7, 8); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(TEST_TIME1, test.getMillis()); [EOL] }
public void testIsLocalDateTimeGap_Berlin() { [EOL]     DateTimeZone zone = DateTimeZone.forID("Europe/Berlin"); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 1, 0))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 1, 59, 59, 99))); [EOL]     assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 0))); [EOL]     assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 30))); [EOL]     assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 59, 59, 99))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 3, 0))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 4, 0))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 1, 30))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 2, 30))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 3, 30))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 12, 24, 12, 34))); [EOL] }
public void testIsLocalDateTimeGap_Berlin() { [EOL]     DateTimeZone zone = DateTimeZone.forID("Europe/Berlin"); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 1, 0))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 1, 59, 59, 99))); [EOL]     assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 0))); [EOL]     assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 30))); [EOL]     assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 59, 59, 99))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 3, 0))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 4, 0))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 1, 30))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 2, 30))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 3, 30))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 12, 24, 12, 34))); [EOL] }
public void testToString() { [EOL]     DateTimeZone paris = DateTimeZone.forID("Europe/Paris"); [EOL]     ISOChronology isoParis = ISOChronology.getInstance(paris); [EOL]     assertEquals("ISOChronology[Europe/Paris]", isoParis.toString()); [EOL]     assertEquals("GJChronology[Europe/Paris]", GJChronology.getInstance(paris).toString()); [EOL]     assertEquals("GregorianChronology[Europe/Paris]", GregorianChronology.getInstance(paris).toString()); [EOL]     assertEquals("JulianChronology[Europe/Paris]", JulianChronology.getInstance(paris).toString()); [EOL]     assertEquals("BuddhistChronology[Europe/Paris]", BuddhistChronology.getInstance(paris).toString()); [EOL]     assertEquals("CopticChronology[Europe/Paris]", CopticChronology.getInstance(paris).toString()); [EOL]     assertEquals("EthiopicChronology[Europe/Paris]", EthiopicChronology.getInstance(paris).toString()); [EOL]     assertEquals("IslamicChronology[Europe/Paris]", IslamicChronology.getInstance(paris).toString()); [EOL]     assertEquals("LenientChronology[ISOChronology[Europe/Paris]]", LenientChronology.getInstance(isoParis).toString()); [EOL]     assertEquals("StrictChronology[ISOChronology[Europe/Paris]]", StrictChronology.getInstance(isoParis).toString()); [EOL]     assertEquals("LimitChronology[ISOChronology[Europe/Paris], NoLimit, NoLimit]", LimitChronology.getInstance(isoParis, null, null).toString()); [EOL]     assertEquals("ZonedChronology[ISOChronology[UTC], Europe/Paris]", ZonedChronology.getInstance(isoParis, paris).toString()); [EOL] }
public void testConstructor_long_long_Chronology1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance()); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, CopticChronology.getInstance()); [EOL]     MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), CopticChronology.getInstance()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testToInterval_Zone() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(TOKYO); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime start = base.toDateTimeAtStartOfDay(TOKYO); [EOL]     DateTime end = start.plus(Period.days(1)); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testToInterval_Zone() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(TOKYO); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime start = base.toDateTimeAtStartOfDay(TOKYO); [EOL]     DateTime end = start.plus(Period.days(1)); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testToInterval_Zone() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(TOKYO); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime start = base.toDateTimeAtStartOfDay(TOKYO); [EOL]     DateTime end = start.plus(Period.days(1)); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testToInterval_Zone() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(TOKYO); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime start = base.toDateTimeAtStartOfDay(TOKYO); [EOL]     DateTime end = start.plus(Period.days(1)); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testToInterval_Zone() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(TOKYO); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime start = base.toDateTimeAtStartOfDay(TOKYO); [EOL]     DateTime end = start.plus(Period.days(1)); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testToInterval_Zone() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(TOKYO); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime start = base.toDateTimeAtStartOfDay(TOKYO); [EOL]     DateTime end = start.plus(Period.days(1)); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testPropertyGetMonthOfYear() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertSame(test.getChronology().monthOfYear(), test.monthOfYear().getField()); [EOL]     assertEquals("monthOfYear", test.monthOfYear().getName()); [EOL]     assertEquals("Property[monthOfYear]", test.monthOfYear().toString()); [EOL]     assertSame(test, test.monthOfYear().getDateTime()); [EOL]     assertEquals(6, test.monthOfYear().get()); [EOL]     assertEquals("6", test.monthOfYear().getAsString()); [EOL]     assertEquals("June", test.monthOfYear().getAsText()); [EOL]     assertEquals("June", test.monthOfYear().getField().getAsText(6, Locale.ENGLISH)); [EOL]     assertEquals("juin", test.monthOfYear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("juin", test.monthOfYear().getField().getAsText(6, Locale.FRENCH)); [EOL]     assertEquals("Jun", test.monthOfYear().getAsShortText()); [EOL]     assertEquals("Jun", test.monthOfYear().getField().getAsShortText(6, Locale.ENGLISH)); [EOL]     assertEquals("juin", test.monthOfYear().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals("juin", test.monthOfYear().getField().getAsShortText(6, Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().months(), test.monthOfYear().getDurationField()); [EOL]     assertEquals(test.getChronology().years(), test.monthOfYear().getRangeDurationField()); [EOL]     assertEquals(9, test.monthOfYear().getMaximumTextLength(null)); [EOL]     assertEquals(3, test.monthOfYear().getMaximumShortTextLength(null)); [EOL]     test = new DateTime(2004, 7, 9, 0, 0, 0, 0); [EOL]     assertEquals("juillet", test.monthOfYear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("juillet", test.monthOfYear().getField().getAsText(7, Locale.FRENCH)); [EOL]     assertEquals("juil.", test.monthOfYear().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals("juil.", test.monthOfYear().getField().getAsShortText(7, Locale.FRENCH)); [EOL]     assertEquals(1, test.monthOfYear().getMinimumValue()); [EOL]     assertEquals(1, test.monthOfYear().getMinimumValueOverall()); [EOL]     assertEquals(12, test.monthOfYear().getMaximumValue()); [EOL]     assertEquals(12, test.monthOfYear().getMaximumValueOverall()); [EOL]     assertEquals(1, test.monthOfYear().getMinimumValue()); [EOL]     assertEquals(1, test.monthOfYear().getMinimumValueOverall()); [EOL]     assertEquals(12, test.monthOfYear().getMaximumValue()); [EOL]     assertEquals(12, test.monthOfYear().getMaximumValueOverall()); [EOL] }
public void testPropertyGetMonthOfYear() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertSame(test.getChronology().monthOfYear(), test.monthOfYear().getField()); [EOL]     assertEquals("monthOfYear", test.monthOfYear().getName()); [EOL]     assertEquals("Property[monthOfYear]", test.monthOfYear().toString()); [EOL]     assertSame(test, test.monthOfYear().getDateTime()); [EOL]     assertEquals(6, test.monthOfYear().get()); [EOL]     assertEquals("6", test.monthOfYear().getAsString()); [EOL]     assertEquals("June", test.monthOfYear().getAsText()); [EOL]     assertEquals("June", test.monthOfYear().getField().getAsText(6, Locale.ENGLISH)); [EOL]     assertEquals("juin", test.monthOfYear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("juin", test.monthOfYear().getField().getAsText(6, Locale.FRENCH)); [EOL]     assertEquals("Jun", test.monthOfYear().getAsShortText()); [EOL]     assertEquals("Jun", test.monthOfYear().getField().getAsShortText(6, Locale.ENGLISH)); [EOL]     assertEquals("juin", test.monthOfYear().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals("juin", test.monthOfYear().getField().getAsShortText(6, Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().months(), test.monthOfYear().getDurationField()); [EOL]     assertEquals(test.getChronology().years(), test.monthOfYear().getRangeDurationField()); [EOL]     assertEquals(9, test.monthOfYear().getMaximumTextLength(null)); [EOL]     assertEquals(3, test.monthOfYear().getMaximumShortTextLength(null)); [EOL]     test = new DateTime(2004, 7, 9, 0, 0, 0, 0); [EOL]     assertEquals("juillet", test.monthOfYear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("juillet", test.monthOfYear().getField().getAsText(7, Locale.FRENCH)); [EOL]     assertEquals("juil.", test.monthOfYear().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals("juil.", test.monthOfYear().getField().getAsShortText(7, Locale.FRENCH)); [EOL]     assertEquals(1, test.monthOfYear().getMinimumValue()); [EOL]     assertEquals(1, test.monthOfYear().getMinimumValueOverall()); [EOL]     assertEquals(12, test.monthOfYear().getMaximumValue()); [EOL]     assertEquals(12, test.monthOfYear().getMaximumValueOverall()); [EOL]     assertEquals(1, test.monthOfYear().getMinimumValue()); [EOL]     assertEquals(1, test.monthOfYear().getMinimumValueOverall()); [EOL]     assertEquals(12, test.monthOfYear().getMaximumValue()); [EOL]     assertEquals(12, test.monthOfYear().getMaximumValueOverall()); [EOL] }
public void testPropertyGetMonthOfYear() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertSame(test.getChronology().monthOfYear(), test.monthOfYear().getField()); [EOL]     assertEquals("monthOfYear", test.monthOfYear().getName()); [EOL]     assertEquals("Property[monthOfYear]", test.monthOfYear().toString()); [EOL]     assertSame(test, test.monthOfYear().getDateTime()); [EOL]     assertEquals(6, test.monthOfYear().get()); [EOL]     assertEquals("6", test.monthOfYear().getAsString()); [EOL]     assertEquals("June", test.monthOfYear().getAsText()); [EOL]     assertEquals("June", test.monthOfYear().getField().getAsText(6, Locale.ENGLISH)); [EOL]     assertEquals("juin", test.monthOfYear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("juin", test.monthOfYear().getField().getAsText(6, Locale.FRENCH)); [EOL]     assertEquals("Jun", test.monthOfYear().getAsShortText()); [EOL]     assertEquals("Jun", test.monthOfYear().getField().getAsShortText(6, Locale.ENGLISH)); [EOL]     assertEquals("juin", test.monthOfYear().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals("juin", test.monthOfYear().getField().getAsShortText(6, Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().months(), test.monthOfYear().getDurationField()); [EOL]     assertEquals(test.getChronology().years(), test.monthOfYear().getRangeDurationField()); [EOL]     assertEquals(9, test.monthOfYear().getMaximumTextLength(null)); [EOL]     assertEquals(3, test.monthOfYear().getMaximumShortTextLength(null)); [EOL]     test = new DateTime(2004, 7, 9, 0, 0, 0, 0); [EOL]     assertEquals("juillet", test.monthOfYear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("juillet", test.monthOfYear().getField().getAsText(7, Locale.FRENCH)); [EOL]     assertEquals("juil.", test.monthOfYear().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals("juil.", test.monthOfYear().getField().getAsShortText(7, Locale.FRENCH)); [EOL]     assertEquals(1, test.monthOfYear().getMinimumValue()); [EOL]     assertEquals(1, test.monthOfYear().getMinimumValueOverall()); [EOL]     assertEquals(12, test.monthOfYear().getMaximumValue()); [EOL]     assertEquals(12, test.monthOfYear().getMaximumValueOverall()); [EOL]     assertEquals(1, test.monthOfYear().getMinimumValue()); [EOL]     assertEquals(1, test.monthOfYear().getMinimumValueOverall()); [EOL]     assertEquals(12, test.monthOfYear().getMaximumValue()); [EOL]     assertEquals(12, test.monthOfYear().getMaximumValueOverall()); [EOL] }
public void testPropertyGetMonthOfYear() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertSame(test.getChronology().monthOfYear(), test.monthOfYear().getField()); [EOL]     assertEquals("monthOfYear", test.monthOfYear().getName()); [EOL]     assertEquals("Property[monthOfYear]", test.monthOfYear().toString()); [EOL]     assertSame(test, test.monthOfYear().getDateTime()); [EOL]     assertEquals(6, test.monthOfYear().get()); [EOL]     assertEquals("6", test.monthOfYear().getAsString()); [EOL]     assertEquals("June", test.monthOfYear().getAsText()); [EOL]     assertEquals("June", test.monthOfYear().getField().getAsText(6, Locale.ENGLISH)); [EOL]     assertEquals("juin", test.monthOfYear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("juin", test.monthOfYear().getField().getAsText(6, Locale.FRENCH)); [EOL]     assertEquals("Jun", test.monthOfYear().getAsShortText()); [EOL]     assertEquals("Jun", test.monthOfYear().getField().getAsShortText(6, Locale.ENGLISH)); [EOL]     assertEquals("juin", test.monthOfYear().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals("juin", test.monthOfYear().getField().getAsShortText(6, Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().months(), test.monthOfYear().getDurationField()); [EOL]     assertEquals(test.getChronology().years(), test.monthOfYear().getRangeDurationField()); [EOL]     assertEquals(9, test.monthOfYear().getMaximumTextLength(null)); [EOL]     assertEquals(3, test.monthOfYear().getMaximumShortTextLength(null)); [EOL]     test = new DateTime(2004, 7, 9, 0, 0, 0, 0); [EOL]     assertEquals("juillet", test.monthOfYear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("juillet", test.monthOfYear().getField().getAsText(7, Locale.FRENCH)); [EOL]     assertEquals("juil.", test.monthOfYear().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals("juil.", test.monthOfYear().getField().getAsShortText(7, Locale.FRENCH)); [EOL]     assertEquals(1, test.monthOfYear().getMinimumValue()); [EOL]     assertEquals(1, test.monthOfYear().getMinimumValueOverall()); [EOL]     assertEquals(12, test.monthOfYear().getMaximumValue()); [EOL]     assertEquals(12, test.monthOfYear().getMaximumValueOverall()); [EOL]     assertEquals(1, test.monthOfYear().getMinimumValue()); [EOL]     assertEquals(1, test.monthOfYear().getMinimumValueOverall()); [EOL]     assertEquals(12, test.monthOfYear().getMaximumValue()); [EOL]     assertEquals(12, test.monthOfYear().getMaximumValueOverall()); [EOL] }
public void testPropertyAddLongDayOfWeek() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime copy = test.dayOfWeek().addToCopy(1L); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2004-06-10T00:00:00.000+01:00", copy.toString()); [EOL] }
public void testPropertyAddLongDayOfWeek() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime copy = test.dayOfWeek().addToCopy(1L); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2004-06-10T00:00:00.000+01:00", copy.toString()); [EOL] }
public void testPropertyGetMonthOfYear() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertSame(test.getChronology().monthOfYear(), test.monthOfYear().getField()); [EOL]     assertEquals("monthOfYear", test.monthOfYear().getName()); [EOL]     assertEquals("Property[monthOfYear]", test.monthOfYear().toString()); [EOL]     assertSame(test, test.monthOfYear().getDateTime()); [EOL]     assertEquals(6, test.monthOfYear().get()); [EOL]     assertEquals("6", test.monthOfYear().getAsString()); [EOL]     assertEquals("June", test.monthOfYear().getAsText()); [EOL]     assertEquals("June", test.monthOfYear().getField().getAsText(6, Locale.ENGLISH)); [EOL]     assertEquals("juin", test.monthOfYear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("juin", test.monthOfYear().getField().getAsText(6, Locale.FRENCH)); [EOL]     assertEquals("Jun", test.monthOfYear().getAsShortText()); [EOL]     assertEquals("Jun", test.monthOfYear().getField().getAsShortText(6, Locale.ENGLISH)); [EOL]     assertEquals("juin", test.monthOfYear().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals("juin", test.monthOfYear().getField().getAsShortText(6, Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().months(), test.monthOfYear().getDurationField()); [EOL]     assertEquals(test.getChronology().years(), test.monthOfYear().getRangeDurationField()); [EOL]     assertEquals(9, test.monthOfYear().getMaximumTextLength(null)); [EOL]     assertEquals(3, test.monthOfYear().getMaximumShortTextLength(null)); [EOL]     test = new DateTime(2004, 7, 9, 0, 0, 0, 0); [EOL]     assertEquals("juillet", test.monthOfYear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("juillet", test.monthOfYear().getField().getAsText(7, Locale.FRENCH)); [EOL]     assertEquals("juil.", test.monthOfYear().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals("juil.", test.monthOfYear().getField().getAsShortText(7, Locale.FRENCH)); [EOL]     assertEquals(1, test.monthOfYear().getMinimumValue()); [EOL]     assertEquals(1, test.monthOfYear().getMinimumValueOverall()); [EOL]     assertEquals(12, test.monthOfYear().getMaximumValue()); [EOL]     assertEquals(12, test.monthOfYear().getMaximumValueOverall()); [EOL]     assertEquals(1, test.monthOfYear().getMinimumValue()); [EOL]     assertEquals(1, test.monthOfYear().getMinimumValueOverall()); [EOL]     assertEquals(12, test.monthOfYear().getMaximumValue()); [EOL]     assertEquals(12, test.monthOfYear().getMaximumValueOverall()); [EOL] }
public void testPropertyGetMonthOfYear() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertSame(test.getChronology().monthOfYear(), test.monthOfYear().getField()); [EOL]     assertEquals("monthOfYear", test.monthOfYear().getName()); [EOL]     assertEquals("Property[monthOfYear]", test.monthOfYear().toString()); [EOL]     assertSame(test, test.monthOfYear().getDateTime()); [EOL]     assertEquals(6, test.monthOfYear().get()); [EOL]     assertEquals("6", test.monthOfYear().getAsString()); [EOL]     assertEquals("June", test.monthOfYear().getAsText()); [EOL]     assertEquals("June", test.monthOfYear().getField().getAsText(6, Locale.ENGLISH)); [EOL]     assertEquals("juin", test.monthOfYear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("juin", test.monthOfYear().getField().getAsText(6, Locale.FRENCH)); [EOL]     assertEquals("Jun", test.monthOfYear().getAsShortText()); [EOL]     assertEquals("Jun", test.monthOfYear().getField().getAsShortText(6, Locale.ENGLISH)); [EOL]     assertEquals("juin", test.monthOfYear().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals("juin", test.monthOfYear().getField().getAsShortText(6, Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().months(), test.monthOfYear().getDurationField()); [EOL]     assertEquals(test.getChronology().years(), test.monthOfYear().getRangeDurationField()); [EOL]     assertEquals(9, test.monthOfYear().getMaximumTextLength(null)); [EOL]     assertEquals(3, test.monthOfYear().getMaximumShortTextLength(null)); [EOL]     test = new DateTime(2004, 7, 9, 0, 0, 0, 0); [EOL]     assertEquals("juillet", test.monthOfYear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("juillet", test.monthOfYear().getField().getAsText(7, Locale.FRENCH)); [EOL]     assertEquals("juil.", test.monthOfYear().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals("juil.", test.monthOfYear().getField().getAsShortText(7, Locale.FRENCH)); [EOL]     assertEquals(1, test.monthOfYear().getMinimumValue()); [EOL]     assertEquals(1, test.monthOfYear().getMinimumValueOverall()); [EOL]     assertEquals(12, test.monthOfYear().getMaximumValue()); [EOL]     assertEquals(12, test.monthOfYear().getMaximumValueOverall()); [EOL]     assertEquals(1, test.monthOfYear().getMinimumValue()); [EOL]     assertEquals(1, test.monthOfYear().getMinimumValueOverall()); [EOL]     assertEquals(12, test.monthOfYear().getMaximumValue()); [EOL]     assertEquals(12, test.monthOfYear().getMaximumValueOverall()); [EOL] }
public void testPropertyGetMonthOfYear() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertSame(test.getChronology().monthOfYear(), test.monthOfYear().getField()); [EOL]     assertEquals("monthOfYear", test.monthOfYear().getName()); [EOL]     assertEquals("Property[monthOfYear]", test.monthOfYear().toString()); [EOL]     assertSame(test, test.monthOfYear().getDateTime()); [EOL]     assertEquals(6, test.monthOfYear().get()); [EOL]     assertEquals("6", test.monthOfYear().getAsString()); [EOL]     assertEquals("June", test.monthOfYear().getAsText()); [EOL]     assertEquals("June", test.monthOfYear().getField().getAsText(6, Locale.ENGLISH)); [EOL]     assertEquals("juin", test.monthOfYear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("juin", test.monthOfYear().getField().getAsText(6, Locale.FRENCH)); [EOL]     assertEquals("Jun", test.monthOfYear().getAsShortText()); [EOL]     assertEquals("Jun", test.monthOfYear().getField().getAsShortText(6, Locale.ENGLISH)); [EOL]     assertEquals("juin", test.monthOfYear().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals("juin", test.monthOfYear().getField().getAsShortText(6, Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().months(), test.monthOfYear().getDurationField()); [EOL]     assertEquals(test.getChronology().years(), test.monthOfYear().getRangeDurationField()); [EOL]     assertEquals(9, test.monthOfYear().getMaximumTextLength(null)); [EOL]     assertEquals(3, test.monthOfYear().getMaximumShortTextLength(null)); [EOL]     test = new DateTime(2004, 7, 9, 0, 0, 0, 0); [EOL]     assertEquals("juillet", test.monthOfYear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("juillet", test.monthOfYear().getField().getAsText(7, Locale.FRENCH)); [EOL]     assertEquals("juil.", test.monthOfYear().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals("juil.", test.monthOfYear().getField().getAsShortText(7, Locale.FRENCH)); [EOL]     assertEquals(1, test.monthOfYear().getMinimumValue()); [EOL]     assertEquals(1, test.monthOfYear().getMinimumValueOverall()); [EOL]     assertEquals(12, test.monthOfYear().getMaximumValue()); [EOL]     assertEquals(12, test.monthOfYear().getMaximumValueOverall()); [EOL]     assertEquals(1, test.monthOfYear().getMinimumValue()); [EOL]     assertEquals(1, test.monthOfYear().getMinimumValueOverall()); [EOL]     assertEquals(12, test.monthOfYear().getMaximumValue()); [EOL]     assertEquals(12, test.monthOfYear().getMaximumValueOverall()); [EOL] }
public void testBug2182444_usCentral() { [EOL]     Chronology chronUSCentral = GregorianChronology.getInstance(DateTimeZone.forID("US/Central")); [EOL]     Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC); [EOL]     DateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0, 0, chronUTC); [EOL]     DateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0, 0, chronUTC); [EOL]     assertTrue("Should be standard time", chronUSCentral.getZone().isStandardOffset(usCentralStandardInUTC.getMillis())); [EOL]     assertFalse("Should be daylight time", chronUSCentral.getZone().isStandardOffset(usCentralDaylightInUTC.getMillis())); [EOL]     DateTime usCentralStandardInUSCentral = usCentralStandardInUTC.toDateTime(chronUSCentral); [EOL]     DateTime usCentralDaylightInUSCentral = usCentralDaylightInUTC.toDateTime(chronUSCentral); [EOL]     assertEquals(1, usCentralStandardInUSCentral.getHourOfDay()); [EOL]     assertEquals(usCentralStandardInUSCentral.getHourOfDay(), usCentralDaylightInUSCentral.getHourOfDay()); [EOL]     assertTrue(usCentralStandardInUSCentral.getMillis() != usCentralDaylightInUSCentral.getMillis()); [EOL]     assertEquals(usCentralStandardInUSCentral, usCentralStandardInUSCentral.withHourOfDay(1)); [EOL]     assertEquals(usCentralStandardInUSCentral.getMillis() + 3, usCentralStandardInUSCentral.withMillisOfSecond(3).getMillis()); [EOL]     assertEquals(usCentralDaylightInUSCentral, usCentralDaylightInUSCentral.withHourOfDay(1)); [EOL]     assertEquals(usCentralDaylightInUSCentral.getMillis() + 3, usCentralDaylightInUSCentral.withMillisOfSecond(3).getMillis()); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testIsContiguous_RP() { [EOL]     YearMonthDay ymd = new YearMonthDay(2005, 6, 9); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(ymd)); [EOL]     TimeOfDay tod = new TimeOfDay(12, 20, 30, 0); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(tod)); [EOL]     Partial year = new Partial(DateTimeFieldType.year(), 2005); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(year)); [EOL]     Partial hourOfDay = new Partial(DateTimeFieldType.hourOfDay(), 12); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(hourOfDay)); [EOL]     Partial yearHour = year.with(DateTimeFieldType.hourOfDay(), 12); [EOL]     assertEquals(false, DateTimeUtils.isContiguous(yearHour)); [EOL]     Partial ymdd = new Partial(ymd).with(DateTimeFieldType.dayOfWeek(), 2); [EOL]     assertEquals(false, DateTimeUtils.isContiguous(ymdd)); [EOL]     Partial dd = new Partial(DateTimeFieldType.dayOfMonth(), 13).with(DateTimeFieldType.dayOfWeek(), 5); [EOL]     assertEquals(false, DateTimeUtils.isContiguous(dd)); [EOL]     try { [EOL]         DateTimeUtils.isContiguous((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testIsContiguous_RP() { [EOL]     YearMonthDay ymd = new YearMonthDay(2005, 6, 9); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(ymd)); [EOL]     TimeOfDay tod = new TimeOfDay(12, 20, 30, 0); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(tod)); [EOL]     Partial year = new Partial(DateTimeFieldType.year(), 2005); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(year)); [EOL]     Partial hourOfDay = new Partial(DateTimeFieldType.hourOfDay(), 12); [EOL]     assertEquals(true, DateTimeUtils.isContiguous(hourOfDay)); [EOL]     Partial yearHour = year.with(DateTimeFieldType.hourOfDay(), 12); [EOL]     assertEquals(false, DateTimeUtils.isContiguous(yearHour)); [EOL]     Partial ymdd = new Partial(ymd).with(DateTimeFieldType.dayOfWeek(), 2); [EOL]     assertEquals(false, DateTimeUtils.isContiguous(ymdd)); [EOL]     Partial dd = new Partial(DateTimeFieldType.dayOfMonth(), 13).with(DateTimeFieldType.dayOfWeek(), 5); [EOL]     assertEquals(false, DateTimeUtils.isContiguous(dd)); [EOL]     try { [EOL]         DateTimeUtils.isContiguous((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyGetDayOfWeek() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertSame(test.getChronology().dayOfWeek(), test.dayOfWeek().getField()); [EOL]     assertEquals("dayOfWeek", test.dayOfWeek().getName()); [EOL]     assertEquals("Property[dayOfWeek]", test.dayOfWeek().toString()); [EOL]     assertEquals(3, test.dayOfWeek().get()); [EOL]     assertEquals("Wednesday", test.dayOfWeek().getAsText()); [EOL]     assertEquals("mercredi", test.dayOfWeek().getAsText(Locale.FRENCH)); [EOL]     assertEquals("Wed", test.dayOfWeek().getAsShortText()); [EOL]     assertEquals("mer.", test.dayOfWeek().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().days(), test.dayOfWeek().getDurationField()); [EOL]     assertEquals(test.getChronology().weeks(), test.dayOfWeek().getRangeDurationField()); [EOL]     assertEquals(9, test.dayOfWeek().getMaximumTextLength(null)); [EOL]     assertEquals(8, test.dayOfWeek().getMaximumTextLength(Locale.FRENCH)); [EOL]     assertEquals(3, test.dayOfWeek().getMaximumShortTextLength(null)); [EOL]     assertEquals(4, test.dayOfWeek().getMaximumShortTextLength(Locale.FRENCH)); [EOL]     assertEquals(1, test.dayOfWeek().getMinimumValue()); [EOL]     assertEquals(1, test.dayOfWeek().getMinimumValueOverall()); [EOL]     assertEquals(7, test.dayOfWeek().getMaximumValue()); [EOL]     assertEquals(7, test.dayOfWeek().getMaximumValueOverall()); [EOL]     assertEquals(false, test.dayOfWeek().isLeap()); [EOL]     assertEquals(0, test.dayOfWeek().getLeapAmount()); [EOL]     assertEquals(null, test.dayOfWeek().getLeapDurationField()); [EOL] }
public void testPropertyGetDayOfWeek() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertSame(test.getChronology().dayOfWeek(), test.dayOfWeek().getField()); [EOL]     assertEquals("dayOfWeek", test.dayOfWeek().getName()); [EOL]     assertEquals("Property[dayOfWeek]", test.dayOfWeek().toString()); [EOL]     assertEquals(3, test.dayOfWeek().get()); [EOL]     assertEquals("Wednesday", test.dayOfWeek().getAsText()); [EOL]     assertEquals("mercredi", test.dayOfWeek().getAsText(Locale.FRENCH)); [EOL]     assertEquals("Wed", test.dayOfWeek().getAsShortText()); [EOL]     assertEquals("mer.", test.dayOfWeek().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().days(), test.dayOfWeek().getDurationField()); [EOL]     assertEquals(test.getChronology().weeks(), test.dayOfWeek().getRangeDurationField()); [EOL]     assertEquals(9, test.dayOfWeek().getMaximumTextLength(null)); [EOL]     assertEquals(8, test.dayOfWeek().getMaximumTextLength(Locale.FRENCH)); [EOL]     assertEquals(3, test.dayOfWeek().getMaximumShortTextLength(null)); [EOL]     assertEquals(4, test.dayOfWeek().getMaximumShortTextLength(Locale.FRENCH)); [EOL]     assertEquals(1, test.dayOfWeek().getMinimumValue()); [EOL]     assertEquals(1, test.dayOfWeek().getMinimumValueOverall()); [EOL]     assertEquals(7, test.dayOfWeek().getMaximumValue()); [EOL]     assertEquals(7, test.dayOfWeek().getMaximumValueOverall()); [EOL]     assertEquals(false, test.dayOfWeek().isLeap()); [EOL]     assertEquals(0, test.dayOfWeek().getLeapAmount()); [EOL]     assertEquals(null, test.dayOfWeek().getLeapDurationField()); [EOL] }
public void testPropertyGetDayOfWeek() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertSame(test.getChronology().dayOfWeek(), test.dayOfWeek().getField()); [EOL]     assertEquals("dayOfWeek", test.dayOfWeek().getName()); [EOL]     assertEquals("Property[dayOfWeek]", test.dayOfWeek().toString()); [EOL]     assertEquals(3, test.dayOfWeek().get()); [EOL]     assertEquals("Wednesday", test.dayOfWeek().getAsText()); [EOL]     assertEquals("mercredi", test.dayOfWeek().getAsText(Locale.FRENCH)); [EOL]     assertEquals("Wed", test.dayOfWeek().getAsShortText()); [EOL]     assertEquals("mer.", test.dayOfWeek().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().days(), test.dayOfWeek().getDurationField()); [EOL]     assertEquals(test.getChronology().weeks(), test.dayOfWeek().getRangeDurationField()); [EOL]     assertEquals(9, test.dayOfWeek().getMaximumTextLength(null)); [EOL]     assertEquals(8, test.dayOfWeek().getMaximumTextLength(Locale.FRENCH)); [EOL]     assertEquals(3, test.dayOfWeek().getMaximumShortTextLength(null)); [EOL]     assertEquals(4, test.dayOfWeek().getMaximumShortTextLength(Locale.FRENCH)); [EOL]     assertEquals(1, test.dayOfWeek().getMinimumValue()); [EOL]     assertEquals(1, test.dayOfWeek().getMinimumValueOverall()); [EOL]     assertEquals(7, test.dayOfWeek().getMaximumValue()); [EOL]     assertEquals(7, test.dayOfWeek().getMaximumValueOverall()); [EOL]     assertEquals(false, test.dayOfWeek().isLeap()); [EOL]     assertEquals(0, test.dayOfWeek().getLeapAmount()); [EOL]     assertEquals(null, test.dayOfWeek().getLeapDurationField()); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testReadablePartialValidate() { [EOL]     try { [EOL]         new YearMonthDay(1970, -5, 1); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("monthOfYear", e.getFieldName()); [EOL]         assertEquals(new Integer(-5), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("-5", e.getIllegalValueAsString()); [EOL]         assertEquals(new Integer(1), e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         new YearMonthDay(1970, 500, 1); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("monthOfYear", e.getFieldName()); [EOL]         assertEquals(new Integer(500), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("500", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(new Integer(12), e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         new YearMonthDay(1970, 2, 30); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.dayOfMonth(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("dayOfMonth", e.getFieldName()); [EOL]         assertEquals(new Integer(30), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("30", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(new Integer(28), e.getUpperBound()); [EOL]     } [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testReadablePartialValidate() { [EOL]     try { [EOL]         new YearMonthDay(1970, -5, 1); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("monthOfYear", e.getFieldName()); [EOL]         assertEquals(new Integer(-5), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("-5", e.getIllegalValueAsString()); [EOL]         assertEquals(new Integer(1), e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         new YearMonthDay(1970, 500, 1); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("monthOfYear", e.getFieldName()); [EOL]         assertEquals(new Integer(500), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("500", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(new Integer(12), e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         new YearMonthDay(1970, 2, 30); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.dayOfMonth(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("dayOfMonth", e.getFieldName()); [EOL]         assertEquals(new Integer(30), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("30", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(new Integer(28), e.getUpperBound()); [EOL]     } [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testReadablePartialValidate() { [EOL]     try { [EOL]         new YearMonthDay(1970, -5, 1); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("monthOfYear", e.getFieldName()); [EOL]         assertEquals(new Integer(-5), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("-5", e.getIllegalValueAsString()); [EOL]         assertEquals(new Integer(1), e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         new YearMonthDay(1970, 500, 1); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("monthOfYear", e.getFieldName()); [EOL]         assertEquals(new Integer(500), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("500", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(new Integer(12), e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         new YearMonthDay(1970, 2, 30); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.dayOfMonth(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("dayOfMonth", e.getFieldName()); [EOL]         assertEquals(new Integer(30), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("30", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(new Integer(28), e.getUpperBound()); [EOL]     } [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testReadablePartialValidate() { [EOL]     try { [EOL]         new YearMonthDay(1970, -5, 1); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("monthOfYear", e.getFieldName()); [EOL]         assertEquals(new Integer(-5), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("-5", e.getIllegalValueAsString()); [EOL]         assertEquals(new Integer(1), e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         new YearMonthDay(1970, 500, 1); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("monthOfYear", e.getFieldName()); [EOL]         assertEquals(new Integer(500), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("500", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(new Integer(12), e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         new YearMonthDay(1970, 2, 30); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.dayOfMonth(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("dayOfMonth", e.getFieldName()); [EOL]         assertEquals(new Integer(30), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("30", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(new Integer(28), e.getUpperBound()); [EOL]     } [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testReadablePartialValidate() { [EOL]     try { [EOL]         new YearMonthDay(1970, -5, 1); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("monthOfYear", e.getFieldName()); [EOL]         assertEquals(new Integer(-5), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("-5", e.getIllegalValueAsString()); [EOL]         assertEquals(new Integer(1), e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         new YearMonthDay(1970, 500, 1); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("monthOfYear", e.getFieldName()); [EOL]         assertEquals(new Integer(500), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("500", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(new Integer(12), e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         new YearMonthDay(1970, 2, 30); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.dayOfMonth(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("dayOfMonth", e.getFieldName()); [EOL]         assertEquals(new Integer(30), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("30", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(new Integer(28), e.getUpperBound()); [EOL]     } [EOL] }
public void testZoneTransition() { [EOL]     DateTime dt = new DateTime(2005, 4, 3, 1, 0, 0, 0, DateTimeZone.forID("America/Los_Angeles")); [EOL]     try { [EOL]         dt.hourOfDay().setCopy(2); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.hourOfDay(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("hourOfDay", e.getFieldName()); [EOL]         assertEquals(new Integer(2), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("2", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL] }
public void testZoneTransition() { [EOL]     DateTime dt = new DateTime(2005, 4, 3, 1, 0, 0, 0, DateTimeZone.forID("America/Los_Angeles")); [EOL]     try { [EOL]         dt.hourOfDay().setCopy(2); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.hourOfDay(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("hourOfDay", e.getFieldName()); [EOL]         assertEquals(new Integer(2), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("2", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL] }
public void testFactory_FromDateFields_after1970() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6); [EOL]     cal.set(Calendar.MILLISECOND, 7); [EOL]     LocalTime expected = new LocalTime(4, 5, 6, 7); [EOL]     assertEquals(expected, LocalTime.fromDateFields(cal.getTime())); [EOL] }
public void testFactory_FromDateFields_after1970() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6); [EOL]     cal.set(Calendar.MILLISECOND, 7); [EOL]     LocalTime expected = new LocalTime(4, 5, 6, 7); [EOL]     assertEquals(expected, LocalTime.fromDateFields(cal.getTime())); [EOL] }
public void testConstructor_ObjectLocalTime() throws Throwable { [EOL]     LocalTime time = new LocalTime(10, 20, 30, 40, BUDDHIST_UTC); [EOL]     LocalTime test = new LocalTime(time); [EOL]     assertEquals(BUDDHIST_UTC, test.getChronology()); [EOL]     assertEquals(10, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL] }
public void testConstructor_ObjectLocalTime() throws Throwable { [EOL]     LocalTime time = new LocalTime(10, 20, 30, 40, BUDDHIST_UTC); [EOL]     LocalTime test = new LocalTime(time); [EOL]     assertEquals(BUDDHIST_UTC, test.getChronology()); [EOL]     assertEquals(10, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL] }
public void testConstructor_ObjectLocalTime() throws Throwable { [EOL]     LocalTime time = new LocalTime(10, 20, 30, 40, BUDDHIST_UTC); [EOL]     LocalTime test = new LocalTime(time); [EOL]     assertEquals(BUDDHIST_UTC, test.getChronology()); [EOL]     assertEquals(10, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL] }
public void testConstructor_ObjectString_DateTimeZoneNewYork() throws Throwable { [EOL]     LocalTime test = new LocalTime("04:20", NEW_YORK); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(4, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL] }
public void testConstructor_ObjectString_DateTimeZoneNewYork() throws Throwable { [EOL]     LocalTime test = new LocalTime("04:20", NEW_YORK); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(4, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL] }
public void testConstructor_ObjectString_DateTimeZoneNewYork() throws Throwable { [EOL]     LocalTime test = new LocalTime("04:20", NEW_YORK); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(4, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL] }
public void testConstructor_ObjectString_DateTimeZoneNewYork() throws Throwable { [EOL]     LocalTime test = new LocalTime("04:20", NEW_YORK); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(4, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL] }
public void testConstructor_ObjectLocalTime() throws Throwable { [EOL]     LocalTime time = new LocalTime(10, 20, 30, 40, BUDDHIST_UTC); [EOL]     LocalTime test = new LocalTime(time); [EOL]     assertEquals(BUDDHIST_UTC, test.getChronology()); [EOL]     assertEquals(10, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL] }
public void testConstructor_ObjectLocalTime() throws Throwable { [EOL]     LocalTime time = new LocalTime(10, 20, 30, 40, BUDDHIST_UTC); [EOL]     LocalTime test = new LocalTime(time); [EOL]     assertEquals(BUDDHIST_UTC, test.getChronology()); [EOL]     assertEquals(10, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL] }
public void testConstructor_ObjectLocalTime() throws Throwable { [EOL]     LocalTime time = new LocalTime(10, 20, 30, 40, BUDDHIST_UTC); [EOL]     LocalTime test = new LocalTime(time); [EOL]     assertEquals(BUDDHIST_UTC, test.getChronology()); [EOL]     assertEquals(10, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL] }
public void testConstructor_ObjectLocalTime() throws Throwable { [EOL]     LocalTime time = new LocalTime(10, 20, 30, 40, BUDDHIST_UTC); [EOL]     LocalTime test = new LocalTime(time); [EOL]     assertEquals(BUDDHIST_UTC, test.getChronology()); [EOL]     assertEquals(10, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL] }
public void testConstructor_ObjectLocalTime() throws Throwable { [EOL]     LocalTime time = new LocalTime(10, 20, 30, 40, BUDDHIST_UTC); [EOL]     LocalTime test = new LocalTime(time); [EOL]     assertEquals(BUDDHIST_UTC, test.getChronology()); [EOL]     assertEquals(10, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL] }
public void testConstructor_ObjectLocalTime() throws Throwable { [EOL]     LocalTime time = new LocalTime(10, 20, 30, 40, BUDDHIST_UTC); [EOL]     LocalTime test = new LocalTime(time); [EOL]     assertEquals(BUDDHIST_UTC, test.getChronology()); [EOL]     assertEquals(10, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL] }
public void testConstructor_ObjectLocalTime() throws Throwable { [EOL]     LocalTime time = new LocalTime(10, 20, 30, 40, BUDDHIST_UTC); [EOL]     LocalTime test = new LocalTime(time); [EOL]     assertEquals(BUDDHIST_UTC, test.getChronology()); [EOL]     assertEquals(10, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL] }
public void testConstructor_ObjectLocalTime() throws Throwable { [EOL]     LocalTime time = new LocalTime(10, 20, 30, 40, BUDDHIST_UTC); [EOL]     LocalTime test = new LocalTime(time); [EOL]     assertEquals(BUDDHIST_UTC, test.getChronology()); [EOL]     assertEquals(10, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL] }
public void testConstructor_ObjectLocalTime() throws Throwable { [EOL]     LocalTime time = new LocalTime(10, 20, 30, 40, BUDDHIST_UTC); [EOL]     LocalTime test = new LocalTime(time); [EOL]     assertEquals(BUDDHIST_UTC, test.getChronology()); [EOL]     assertEquals(10, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL] }
public void testConstructor_ObjectLocalTime() throws Throwable { [EOL]     LocalTime time = new LocalTime(10, 20, 30, 40, BUDDHIST_UTC); [EOL]     LocalTime test = new LocalTime(time); [EOL]     assertEquals(BUDDHIST_UTC, test.getChronology()); [EOL]     assertEquals(10, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL] }
public void testConstructor_ObjectLocalTime() throws Throwable { [EOL]     LocalTime time = new LocalTime(10, 20, 30, 40, BUDDHIST_UTC); [EOL]     LocalTime test = new LocalTime(time); [EOL]     assertEquals(BUDDHIST_UTC, test.getChronology()); [EOL]     assertEquals(10, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL] }
public void testPlusMinutes_int() { [EOL]     LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON); [EOL]     LocalTime result = test.plusMinutes(1); [EOL]     LocalTime expected = new LocalTime(1, 3, 3, 4, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusMinutes(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusMinutes_int() { [EOL]     LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON); [EOL]     LocalTime result = test.plusMinutes(1); [EOL]     LocalTime expected = new LocalTime(1, 3, 3, 4, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusMinutes(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusMinutes_int() { [EOL]     LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON); [EOL]     LocalTime result = test.plusMinutes(1); [EOL]     LocalTime expected = new LocalTime(1, 3, 3, 4, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusMinutes(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusMinutes_int() { [EOL]     LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON); [EOL]     LocalTime result = test.plusMinutes(1); [EOL]     LocalTime expected = new LocalTime(1, 3, 3, 4, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusMinutes(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusMinutes_int() { [EOL]     LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON); [EOL]     LocalTime result = test.plusMinutes(1); [EOL]     LocalTime expected = new LocalTime(1, 3, 3, 4, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusMinutes(0); [EOL]     assertSame(test, result); [EOL] }
public void testWithFieldAdded_DurationFieldType_int_3() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     try { [EOL]         test.withFieldAdded(null, 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithFieldAdded_DurationFieldType_int_3() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     try { [EOL]         test.withFieldAdded(null, 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithFieldAdded_DurationFieldType_int_3() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     try { [EOL]         test.withFieldAdded(null, 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithFieldAdded_DurationFieldType_int_3() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     try { [EOL]         test.withFieldAdded(null, 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPlusMinutes_int() { [EOL]     LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON); [EOL]     LocalTime result = test.plusMinutes(1); [EOL]     LocalTime expected = new LocalTime(1, 3, 3, 4, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusMinutes(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusMinutes_int() { [EOL]     LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON); [EOL]     LocalTime result = test.plusMinutes(1); [EOL]     LocalTime expected = new LocalTime(1, 3, 3, 4, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusMinutes(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusMinutes_int() { [EOL]     LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON); [EOL]     LocalTime result = test.plusMinutes(1); [EOL]     LocalTime expected = new LocalTime(1, 3, 3, 4, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusMinutes(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusSeconds_int() { [EOL]     LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON); [EOL]     LocalTime result = test.plusSeconds(1); [EOL]     LocalTime expected = new LocalTime(1, 2, 4, 4, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusSeconds(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusSeconds_int() { [EOL]     LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON); [EOL]     LocalTime result = test.plusSeconds(1); [EOL]     LocalTime expected = new LocalTime(1, 2, 4, 4, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusSeconds(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusSeconds_int() { [EOL]     LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON); [EOL]     LocalTime result = test.plusSeconds(1); [EOL]     LocalTime expected = new LocalTime(1, 2, 4, 4, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusSeconds(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusMinutes_int() { [EOL]     LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON); [EOL]     LocalTime result = test.minusMinutes(1); [EOL]     LocalTime expected = new LocalTime(1, 1, 3, 4, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusMinutes(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusMinutes_int() { [EOL]     LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON); [EOL]     LocalTime result = test.minusMinutes(1); [EOL]     LocalTime expected = new LocalTime(1, 1, 3, 4, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusMinutes(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusMinutes_int() { [EOL]     LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON); [EOL]     LocalTime result = test.minusMinutes(1); [EOL]     LocalTime expected = new LocalTime(1, 1, 3, 4, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusMinutes(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusSeconds_int() { [EOL]     LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON); [EOL]     LocalTime result = test.minusSeconds(1); [EOL]     LocalTime expected = new LocalTime(1, 2, 2, 4, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusSeconds(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusSeconds_int() { [EOL]     LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON); [EOL]     LocalTime result = test.minusSeconds(1); [EOL]     LocalTime expected = new LocalTime(1, 2, 2, 4, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusSeconds(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusSeconds_int() { [EOL]     LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON); [EOL]     LocalTime result = test.minusSeconds(1); [EOL]     LocalTime expected = new LocalTime(1, 2, 2, 4, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusSeconds(0); [EOL]     assertSame(test, result); [EOL] }
public void testToInterval() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime start = base.toDateTime(TimeOfDay.MIDNIGHT); [EOL]     DateTime end = start.plus(Period.days(1)); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testToInterval() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime start = base.toDateTime(TimeOfDay.MIDNIGHT); [EOL]     DateTime end = start.plus(Period.days(1)); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testToInterval() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime start = base.toDateTime(TimeOfDay.MIDNIGHT); [EOL]     DateTime end = start.plus(Period.days(1)); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testToInterval() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime start = base.toDateTime(TimeOfDay.MIDNIGHT); [EOL]     DateTime end = start.plus(Period.days(1)); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void test_weeks() throws Exception { [EOL]     assertEquals(DurationFieldType.weeks(), DurationFieldType.weeks()); [EOL]     assertEquals("weeks", DurationFieldType.weeks().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks(), DurationFieldType.weeks().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks().isSupported(), DurationFieldType.weeks().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.weeks()); [EOL] }
public void test_weeks() throws Exception { [EOL]     assertEquals(DurationFieldType.weeks(), DurationFieldType.weeks()); [EOL]     assertEquals("weeks", DurationFieldType.weeks().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks(), DurationFieldType.weeks().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks().isSupported(), DurationFieldType.weeks().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.weeks()); [EOL] }
public void test_weeks() throws Exception { [EOL]     assertEquals(DurationFieldType.weeks(), DurationFieldType.weeks()); [EOL]     assertEquals("weeks", DurationFieldType.weeks().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks(), DurationFieldType.weeks().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks().isSupported(), DurationFieldType.weeks().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.weeks()); [EOL] }
public void testWithFieldAdded_DurationFieldType_int_5() { [EOL]     LocalDate test = new LocalDate(2004, 6, 9); [EOL]     try { [EOL]         test.withFieldAdded(DurationFieldType.hours(), 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void test_weeks() throws Exception { [EOL]     assertEquals(DurationFieldType.weeks(), DurationFieldType.weeks()); [EOL]     assertEquals("weeks", DurationFieldType.weeks().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks(), DurationFieldType.weeks().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks().isSupported(), DurationFieldType.weeks().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.weeks()); [EOL] }
public void test_weeks() throws Exception { [EOL]     assertEquals(DurationFieldType.weeks(), DurationFieldType.weeks()); [EOL]     assertEquals("weeks", DurationFieldType.weeks().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks(), DurationFieldType.weeks().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks().isSupported(), DurationFieldType.weeks().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.weeks()); [EOL] }
public void test_weeks() throws Exception { [EOL]     assertEquals(DurationFieldType.weeks(), DurationFieldType.weeks()); [EOL]     assertEquals("weeks", DurationFieldType.weeks().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks(), DurationFieldType.weeks().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks().isSupported(), DurationFieldType.weeks().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.weeks()); [EOL] }
public void test_weeks() throws Exception { [EOL]     assertEquals(DurationFieldType.weeks(), DurationFieldType.weeks()); [EOL]     assertEquals("weeks", DurationFieldType.weeks().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks(), DurationFieldType.weeks().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks().isSupported(), DurationFieldType.weeks().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.weeks()); [EOL] }
public void test_weeks() throws Exception { [EOL]     assertEquals(DurationFieldType.weeks(), DurationFieldType.weeks()); [EOL]     assertEquals("weeks", DurationFieldType.weeks().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks(), DurationFieldType.weeks().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks().isSupported(), DurationFieldType.weeks().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.weeks()); [EOL] }
public void test_weeks() throws Exception { [EOL]     assertEquals(DurationFieldType.weeks(), DurationFieldType.weeks()); [EOL]     assertEquals("weeks", DurationFieldType.weeks().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks(), DurationFieldType.weeks().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks().isSupported(), DurationFieldType.weeks().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.weeks()); [EOL] }
public void test_weeks() throws Exception { [EOL]     assertEquals(DurationFieldType.weeks(), DurationFieldType.weeks()); [EOL]     assertEquals("weeks", DurationFieldType.weeks().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks(), DurationFieldType.weeks().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks().isSupported(), DurationFieldType.weeks().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.weeks()); [EOL] }
public void test_weeks() throws Exception { [EOL]     assertEquals(DurationFieldType.weeks(), DurationFieldType.weeks()); [EOL]     assertEquals("weeks", DurationFieldType.weeks().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks(), DurationFieldType.weeks().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks().isSupported(), DurationFieldType.weeks().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.weeks()); [EOL] }
public void test_weeks() throws Exception { [EOL]     assertEquals(DurationFieldType.weeks(), DurationFieldType.weeks()); [EOL]     assertEquals("weeks", DurationFieldType.weeks().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks(), DurationFieldType.weeks().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks().isSupported(), DurationFieldType.weeks().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.weeks()); [EOL] }
public void test_weeks() throws Exception { [EOL]     assertEquals(DurationFieldType.weeks(), DurationFieldType.weeks()); [EOL]     assertEquals("weeks", DurationFieldType.weeks().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks(), DurationFieldType.weeks().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks().isSupported(), DurationFieldType.weeks().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.weeks()); [EOL] }
public void test_weeks() throws Exception { [EOL]     assertEquals(DurationFieldType.weeks(), DurationFieldType.weeks()); [EOL]     assertEquals("weeks", DurationFieldType.weeks().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks(), DurationFieldType.weeks().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks().isSupported(), DurationFieldType.weeks().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.weeks()); [EOL] }
public void test_weeks() throws Exception { [EOL]     assertEquals(DurationFieldType.weeks(), DurationFieldType.weeks()); [EOL]     assertEquals("weeks", DurationFieldType.weeks().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks(), DurationFieldType.weeks().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks().isSupported(), DurationFieldType.weeks().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.weeks()); [EOL] }
public void test_weeks() throws Exception { [EOL]     assertEquals(DurationFieldType.weeks(), DurationFieldType.weeks()); [EOL]     assertEquals("weeks", DurationFieldType.weeks().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks(), DurationFieldType.weeks().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks().isSupported(), DurationFieldType.weeks().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.weeks()); [EOL] }
public void test_weeks() throws Exception { [EOL]     assertEquals(DurationFieldType.weeks(), DurationFieldType.weeks()); [EOL]     assertEquals("weeks", DurationFieldType.weeks().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks(), DurationFieldType.weeks().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks().isSupported(), DurationFieldType.weeks().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.weeks()); [EOL] }
public void test_weeks() throws Exception { [EOL]     assertEquals(DurationFieldType.weeks(), DurationFieldType.weeks()); [EOL]     assertEquals("weeks", DurationFieldType.weeks().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks(), DurationFieldType.weeks().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks().isSupported(), DurationFieldType.weeks().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.weeks()); [EOL] }
public void test_weeks() throws Exception { [EOL]     assertEquals(DurationFieldType.weeks(), DurationFieldType.weeks()); [EOL]     assertEquals("weeks", DurationFieldType.weeks().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks(), DurationFieldType.weeks().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks().isSupported(), DurationFieldType.weeks().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.weeks()); [EOL] }
public void test_weeks() throws Exception { [EOL]     assertEquals(DurationFieldType.weeks(), DurationFieldType.weeks()); [EOL]     assertEquals("weeks", DurationFieldType.weeks().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks(), DurationFieldType.weeks().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks().isSupported(), DurationFieldType.weeks().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.weeks()); [EOL] }
public void test_weeks() throws Exception { [EOL]     assertEquals(DurationFieldType.weeks(), DurationFieldType.weeks()); [EOL]     assertEquals("weeks", DurationFieldType.weeks().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks(), DurationFieldType.weeks().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks().isSupported(), DurationFieldType.weeks().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.weeks()); [EOL] }
public void test_weeks() throws Exception { [EOL]     assertEquals(DurationFieldType.weeks(), DurationFieldType.weeks()); [EOL]     assertEquals("weeks", DurationFieldType.weeks().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks(), DurationFieldType.weeks().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks().isSupported(), DurationFieldType.weeks().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.weeks()); [EOL] }
public void test_weeks() throws Exception { [EOL]     assertEquals(DurationFieldType.weeks(), DurationFieldType.weeks()); [EOL]     assertEquals("weeks", DurationFieldType.weeks().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks(), DurationFieldType.weeks().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks().isSupported(), DurationFieldType.weeks().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.weeks()); [EOL] }
public void test_weeks() throws Exception { [EOL]     assertEquals(DurationFieldType.weeks(), DurationFieldType.weeks()); [EOL]     assertEquals("weeks", DurationFieldType.weeks().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks(), DurationFieldType.weeks().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks().isSupported(), DurationFieldType.weeks().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.weeks()); [EOL] }
public void test_weeks() throws Exception { [EOL]     assertEquals(DurationFieldType.weeks(), DurationFieldType.weeks()); [EOL]     assertEquals("weeks", DurationFieldType.weeks().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks(), DurationFieldType.weeks().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks().isSupported(), DurationFieldType.weeks().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.weeks()); [EOL] }
public void test_weeks() throws Exception { [EOL]     assertEquals(DurationFieldType.weeks(), DurationFieldType.weeks()); [EOL]     assertEquals("weeks", DurationFieldType.weeks().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks(), DurationFieldType.weeks().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks().isSupported(), DurationFieldType.weeks().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.weeks()); [EOL] }
public void test_weeks() throws Exception { [EOL]     assertEquals(DurationFieldType.weeks(), DurationFieldType.weeks()); [EOL]     assertEquals("weeks", DurationFieldType.weeks().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks(), DurationFieldType.weeks().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks().isSupported(), DurationFieldType.weeks().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.weeks()); [EOL] }
public void test_weeks() throws Exception { [EOL]     assertEquals(DurationFieldType.weeks(), DurationFieldType.weeks()); [EOL]     assertEquals("weeks", DurationFieldType.weeks().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks(), DurationFieldType.weeks().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks().isSupported(), DurationFieldType.weeks().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.weeks()); [EOL] }
public void test_weeks() throws Exception { [EOL]     assertEquals(DurationFieldType.weeks(), DurationFieldType.weeks()); [EOL]     assertEquals("weeks", DurationFieldType.weeks().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks(), DurationFieldType.weeks().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks().isSupported(), DurationFieldType.weeks().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.weeks()); [EOL] }
public void test_weeks() throws Exception { [EOL]     assertEquals(DurationFieldType.weeks(), DurationFieldType.weeks()); [EOL]     assertEquals("weeks", DurationFieldType.weeks().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks(), DurationFieldType.weeks().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks().isSupported(), DurationFieldType.weeks().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.weeks()); [EOL] }
public void test_weeks() throws Exception { [EOL]     assertEquals(DurationFieldType.weeks(), DurationFieldType.weeks()); [EOL]     assertEquals("weeks", DurationFieldType.weeks().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks(), DurationFieldType.weeks().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks().isSupported(), DurationFieldType.weeks().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.weeks()); [EOL] }
public void test_weeks() throws Exception { [EOL]     assertEquals(DurationFieldType.weeks(), DurationFieldType.weeks()); [EOL]     assertEquals("weeks", DurationFieldType.weeks().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks(), DurationFieldType.weeks().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks().isSupported(), DurationFieldType.weeks().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.weeks()); [EOL] }
public void test_weeks() throws Exception { [EOL]     assertEquals(DurationFieldType.weeks(), DurationFieldType.weeks()); [EOL]     assertEquals("weeks", DurationFieldType.weeks().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks(), DurationFieldType.weeks().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks().isSupported(), DurationFieldType.weeks().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.weeks()); [EOL] }
public void test_weeks() throws Exception { [EOL]     assertEquals(DurationFieldType.weeks(), DurationFieldType.weeks()); [EOL]     assertEquals("weeks", DurationFieldType.weeks().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks(), DurationFieldType.weeks().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks().isSupported(), DurationFieldType.weeks().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.weeks()); [EOL] }
public void testBug2182444_usCentral() { [EOL]     Chronology chronUSCentral = GregorianChronology.getInstance(DateTimeZone.forID("US/Central")); [EOL]     Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC); [EOL]     DateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0, 0, chronUTC); [EOL]     DateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0, 0, chronUTC); [EOL]     assertTrue("Should be standard time", chronUSCentral.getZone().isStandardOffset(usCentralStandardInUTC.getMillis())); [EOL]     assertFalse("Should be daylight time", chronUSCentral.getZone().isStandardOffset(usCentralDaylightInUTC.getMillis())); [EOL]     DateTime usCentralStandardInUSCentral = usCentralStandardInUTC.toDateTime(chronUSCentral); [EOL]     DateTime usCentralDaylightInUSCentral = usCentralDaylightInUTC.toDateTime(chronUSCentral); [EOL]     assertEquals(1, usCentralStandardInUSCentral.getHourOfDay()); [EOL]     assertEquals(usCentralStandardInUSCentral.getHourOfDay(), usCentralDaylightInUSCentral.getHourOfDay()); [EOL]     assertTrue(usCentralStandardInUSCentral.getMillis() != usCentralDaylightInUSCentral.getMillis()); [EOL]     assertEquals(usCentralStandardInUSCentral, usCentralStandardInUSCentral.withHourOfDay(1)); [EOL]     assertEquals(usCentralStandardInUSCentral.getMillis() + 3, usCentralStandardInUSCentral.withMillisOfSecond(3).getMillis()); [EOL]     assertEquals(usCentralDaylightInUSCentral, usCentralDaylightInUSCentral.withHourOfDay(1)); [EOL]     assertEquals(usCentralDaylightInUSCentral.getMillis() + 3, usCentralDaylightInUSCentral.withMillisOfSecond(3).getMillis()); [EOL] }
public void test_now() throws Throwable { [EOL]     MutableDateTime test = MutableDateTime.now(); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] }
public void test_now_DateTimeZone() throws Throwable { [EOL]     MutableDateTime test = MutableDateTime.now(PARIS); [EOL]     assertEquals(ISOChronology.getInstance(PARIS), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] }
public void test_now_DateTimeZone() throws Throwable { [EOL]     MutableDateTime test = MutableDateTime.now(PARIS); [EOL]     assertEquals(ISOChronology.getInstance(PARIS), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] }
public void testConstructor_nullObject_nullDateTimeZone() throws Throwable { [EOL]     MutableDateTime test = new MutableDateTime((Object) null, (DateTimeZone) null); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] }
public void testConstructor_nullObject_nullDateTimeZone() throws Throwable { [EOL]     MutableDateTime test = new MutableDateTime((Object) null, (DateTimeZone) null); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] }
public void testConstructor_nullObject_nullDateTimeZone() throws Throwable { [EOL]     MutableDateTime test = new MutableDateTime((Object) null, (DateTimeZone) null); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] }
public void testConstructor_nullObject_nullDateTimeZone() throws Throwable { [EOL]     MutableDateTime test = new MutableDateTime((Object) null, (DateTimeZone) null); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] }
public void testSet_DateTimeFieldType_int3() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     try { [EOL]         test.set(DateTimeFieldType.monthOfYear(), 13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(TEST_TIME1, test.getMillis()); [EOL] }
public void testAdd_DurationFieldType_int3() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     try { [EOL]         test.add((DurationFieldType) null, 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(TEST_TIME1, test.getMillis()); [EOL] }
public void testAdd_DurationFieldType_int3() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     try { [EOL]         test.add((DurationFieldType) null, 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(TEST_TIME1, test.getMillis()); [EOL] }
public void testAdd_DurationFieldType_int3() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     try { [EOL]         test.add((DurationFieldType) null, 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(TEST_TIME1, test.getMillis()); [EOL] }
public void testSetWeekyear_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     test.setWeekyear(2001); [EOL]     assertEquals("2001-06-10T05:06:07.008+01:00", test.toString()); [EOL] }
public void testSetWeekyear_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     test.setWeekyear(2001); [EOL]     assertEquals("2001-06-10T05:06:07.008+01:00", test.toString()); [EOL] }
public void testSetDayOfMonth_int_dstOverlapWinter_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     test.addHours(1); [EOL]     assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); [EOL]     test.setDayOfMonth(30); [EOL]     assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); [EOL] }
public void testSetDayOfMonth_int_dstOverlapWinter_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     test.addHours(1); [EOL]     assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); [EOL]     test.setDayOfMonth(30); [EOL]     assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); [EOL] }
public void testSetMinuteOfDay_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     test.setMinuteOfDay(13); [EOL]     assertEquals("2002-06-09T00:13:07.008+01:00", test.toString()); [EOL] }
public void testSetMinuteOfDay_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     test.setMinuteOfDay(13); [EOL]     assertEquals("2002-06-09T00:13:07.008+01:00", test.toString()); [EOL] }
public void testSetMinuteOfDay_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     test.setMinuteOfDay(13); [EOL]     assertEquals("2002-06-09T00:13:07.008+01:00", test.toString()); [EOL] }
public void testSetMilliOfDay_int2() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     try { [EOL]         test.setMillisOfDay(24 * 60 * 60 * 1000); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals("2002-06-09T05:06:07.008+01:00", test.toString()); [EOL] }
public void testSetMilliOfDay_int2() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     try { [EOL]         test.setMillisOfDay(24 * 60 * 60 * 1000); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals("2002-06-09T05:06:07.008+01:00", test.toString()); [EOL] }
public void testSetMilliOfSecond_int2() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     try { [EOL]         test.setMillisOfSecond(1000); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals("2002-06-09T05:06:07.008+01:00", test.toString()); [EOL] }
public void testSetMilliOfSecond_int2() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     try { [EOL]         test.setMillisOfSecond(1000); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals("2002-06-09T05:06:07.008+01:00", test.toString()); [EOL] }
public void testSetMilliOfSecond_int2() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     try { [EOL]         test.setMillisOfSecond(1000); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals("2002-06-09T05:06:07.008+01:00", test.toString()); [EOL] }
public void testSetDate_int_int_int2() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     try { [EOL]         test.setDate(2010, 13, 3); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(TEST_TIME1, test.getMillis()); [EOL] }
public void testSetDate_int_int_int2() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     try { [EOL]         test.setDate(2010, 13, 3); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(TEST_TIME1, test.getMillis()); [EOL] }
public void testSetTime_int_int_int2() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     try { [EOL]         test.setTime(60, 6, 7, 8); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(TEST_TIME1, test.getMillis()); [EOL] }
public void testSetTime_int_int_int2() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     try { [EOL]         test.setTime(60, 6, 7, 8); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(TEST_TIME1, test.getMillis()); [EOL] }
public void testPropertyGetYearOfCentury() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertSame(test.getChronology().yearOfCentury(), test.yearOfCentury().getField()); [EOL]     assertEquals("yearOfCentury", test.yearOfCentury().getName()); [EOL]     assertEquals("Property[yearOfCentury]", test.yearOfCentury().toString()); [EOL]     assertEquals(4, test.yearOfCentury().get()); [EOL]     assertEquals("4", test.yearOfCentury().getAsText()); [EOL]     assertEquals("4", test.yearOfCentury().getAsText(Locale.FRENCH)); [EOL]     assertEquals("4", test.yearOfCentury().getAsShortText()); [EOL]     assertEquals("4", test.yearOfCentury().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().years(), test.yearOfCentury().getDurationField()); [EOL]     assertEquals(test.getChronology().centuries(), test.yearOfCentury().getRangeDurationField()); [EOL]     assertEquals(2, test.yearOfCentury().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.yearOfCentury().getMaximumShortTextLength(null)); [EOL] }
public void testPropertySetTextDayOfYear() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     test.dayOfYear().set("12"); [EOL]     assertEquals("2004-01-12T00:00:00.000Z", test.toString()); [EOL] }
public void testPropertyGetMinuteOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     assertSame(test.getChronology().minuteOfDay(), test.minuteOfDay().getField()); [EOL]     assertEquals("minuteOfDay", test.minuteOfDay().getName()); [EOL]     assertEquals("Property[minuteOfDay]", test.minuteOfDay().toString()); [EOL]     assertEquals(803, test.minuteOfDay().get()); [EOL]     assertEquals("803", test.minuteOfDay().getAsText()); [EOL]     assertEquals("803", test.minuteOfDay().getAsText(Locale.FRENCH)); [EOL]     assertEquals("803", test.minuteOfDay().getAsShortText()); [EOL]     assertEquals("803", test.minuteOfDay().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().minutes(), test.minuteOfDay().getDurationField()); [EOL]     assertEquals(test.getChronology().days(), test.minuteOfDay().getRangeDurationField()); [EOL]     assertEquals(4, test.minuteOfDay().getMaximumTextLength(null)); [EOL]     assertEquals(4, test.minuteOfDay().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyGetMinuteOfHour() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     assertSame(test.getChronology().minuteOfHour(), test.minuteOfHour().getField()); [EOL]     assertEquals("minuteOfHour", test.minuteOfHour().getName()); [EOL]     assertEquals("Property[minuteOfHour]", test.minuteOfHour().toString()); [EOL]     assertEquals(23, test.minuteOfHour().get()); [EOL]     assertEquals("23", test.minuteOfHour().getAsText()); [EOL]     assertEquals("23", test.minuteOfHour().getAsText(Locale.FRENCH)); [EOL]     assertEquals("23", test.minuteOfHour().getAsShortText()); [EOL]     assertEquals("23", test.minuteOfHour().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().minutes(), test.minuteOfHour().getDurationField()); [EOL]     assertEquals(test.getChronology().hours(), test.minuteOfHour().getRangeDurationField()); [EOL]     assertEquals(2, test.minuteOfHour().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.minuteOfHour().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyGetSecondOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     assertSame(test.getChronology().secondOfDay(), test.secondOfDay().getField()); [EOL]     assertEquals("secondOfDay", test.secondOfDay().getName()); [EOL]     assertEquals("Property[secondOfDay]", test.secondOfDay().toString()); [EOL]     assertEquals(48223, test.secondOfDay().get()); [EOL]     assertEquals("48223", test.secondOfDay().getAsText()); [EOL]     assertEquals("48223", test.secondOfDay().getAsText(Locale.FRENCH)); [EOL]     assertEquals("48223", test.secondOfDay().getAsShortText()); [EOL]     assertEquals("48223", test.secondOfDay().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().seconds(), test.secondOfDay().getDurationField()); [EOL]     assertEquals(test.getChronology().days(), test.secondOfDay().getRangeDurationField()); [EOL]     assertEquals(5, test.secondOfDay().getMaximumTextLength(null)); [EOL]     assertEquals(5, test.secondOfDay().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyGetMillisOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     assertSame(test.getChronology().millisOfDay(), test.millisOfDay().getField()); [EOL]     assertEquals("millisOfDay", test.millisOfDay().getName()); [EOL]     assertEquals("Property[millisOfDay]", test.millisOfDay().toString()); [EOL]     assertEquals(48223053, test.millisOfDay().get()); [EOL]     assertEquals("48223053", test.millisOfDay().getAsText()); [EOL]     assertEquals("48223053", test.millisOfDay().getAsText(Locale.FRENCH)); [EOL]     assertEquals("48223053", test.millisOfDay().getAsShortText()); [EOL]     assertEquals("48223053", test.millisOfDay().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().millis(), test.millisOfDay().getDurationField()); [EOL]     assertEquals(test.getChronology().days(), test.millisOfDay().getRangeDurationField()); [EOL]     assertEquals(8, test.millisOfDay().getMaximumTextLength(null)); [EOL]     assertEquals(8, test.millisOfDay().getMaximumShortTextLength(null)); [EOL] }
public void testCopy() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     MutableDateTime result = test.copy(); [EOL]     assertEquals(true, test.equals(result)); [EOL]     assertEquals(true, test != result); [EOL] }
public void testSerializedMutableDateTimeProperty() throws Exception { [EOL]     MutableDateTime.Property test = new MutableDateTime().hourOfDay(); [EOL]     loadAndCompare(test, "MutableDateTimeProperty", false); [EOL]     inlineCompare(test, false); [EOL] }
public void testSerializedMutableDateTimeProperty() throws Exception { [EOL]     MutableDateTime.Property test = new MutableDateTime().hourOfDay(); [EOL]     loadAndCompare(test, "MutableDateTimeProperty", false); [EOL]     inlineCompare(test, false); [EOL] }
public void testPropertyAddWrapFieldMonthOfYear() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     test.monthOfYear().addWrapField(8); [EOL]     assertEquals("2004-02-09T00:00:00.000Z", test.toString()); [EOL] }
public void testPropertyAddWrapFieldMonthOfYear() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     test.monthOfYear().addWrapField(8); [EOL]     assertEquals("2004-02-09T00:00:00.000Z", test.toString()); [EOL] }
public void testPropertyAddWrapFieldMonthOfYear() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     test.monthOfYear().addWrapField(8); [EOL]     assertEquals("2004-02-09T00:00:00.000Z", test.toString()); [EOL] }
public void testPropertyAddWrapFieldMonthOfYear() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     test.monthOfYear().addWrapField(8); [EOL]     assertEquals("2004-02-09T00:00:00.000Z", test.toString()); [EOL] }
public void testPropertyRoundCeilingHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     test.hourOfDay().roundCeiling(); [EOL]     assertEquals("2004-06-09T14:00:00.000+01:00", test.toString()); [EOL] }
public void testPropertyRoundHalfFloorHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     test.hourOfDay().roundHalfFloor(); [EOL]     assertEquals("2004-06-09T13:00:00.000+01:00", test.toString()); [EOL]     test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 1); [EOL]     test.hourOfDay().roundHalfFloor(); [EOL]     assertEquals("2004-06-09T14:00:00.000+01:00", test.toString()); [EOL]     test = new MutableDateTime(2004, 6, 9, 13, 29, 59, 999); [EOL]     test.hourOfDay().roundHalfFloor(); [EOL]     assertEquals("2004-06-09T13:00:00.000+01:00", test.toString()); [EOL] }
public void testPropertyRoundHalfFloorHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     test.hourOfDay().roundHalfFloor(); [EOL]     assertEquals("2004-06-09T13:00:00.000+01:00", test.toString()); [EOL]     test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 1); [EOL]     test.hourOfDay().roundHalfFloor(); [EOL]     assertEquals("2004-06-09T14:00:00.000+01:00", test.toString()); [EOL]     test = new MutableDateTime(2004, 6, 9, 13, 29, 59, 999); [EOL]     test.hourOfDay().roundHalfFloor(); [EOL]     assertEquals("2004-06-09T13:00:00.000+01:00", test.toString()); [EOL] }
public void testPropertyRoundHalfFloorHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     test.hourOfDay().roundHalfFloor(); [EOL]     assertEquals("2004-06-09T13:00:00.000+01:00", test.toString()); [EOL]     test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 1); [EOL]     test.hourOfDay().roundHalfFloor(); [EOL]     assertEquals("2004-06-09T14:00:00.000+01:00", test.toString()); [EOL]     test = new MutableDateTime(2004, 6, 9, 13, 29, 59, 999); [EOL]     test.hourOfDay().roundHalfFloor(); [EOL]     assertEquals("2004-06-09T13:00:00.000+01:00", test.toString()); [EOL] }
public void testPropertyRoundHalfFloorHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     test.hourOfDay().roundHalfFloor(); [EOL]     assertEquals("2004-06-09T13:00:00.000+01:00", test.toString()); [EOL]     test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 1); [EOL]     test.hourOfDay().roundHalfFloor(); [EOL]     assertEquals("2004-06-09T14:00:00.000+01:00", test.toString()); [EOL]     test = new MutableDateTime(2004, 6, 9, 13, 29, 59, 999); [EOL]     test.hourOfDay().roundHalfFloor(); [EOL]     assertEquals("2004-06-09T13:00:00.000+01:00", test.toString()); [EOL] }
public void testToStandardHours() { [EOL]     Weeks test = Weeks.weeks(2); [EOL]     Hours expected = Hours.hours(2 * 7 * 24); [EOL]     assertEquals(expected, test.toStandardHours()); [EOL]     try { [EOL]         Weeks.MAX_VALUE.toStandardHours(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testToStandardHours() { [EOL]     Weeks test = Weeks.weeks(2); [EOL]     Hours expected = Hours.hours(2 * 7 * 24); [EOL]     assertEquals(expected, test.toStandardHours()); [EOL]     try { [EOL]         Weeks.MAX_VALUE.toStandardHours(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testToStandardHours() { [EOL]     Weeks test = Weeks.weeks(2); [EOL]     Hours expected = Hours.hours(2 * 7 * 24); [EOL]     assertEquals(expected, test.toStandardHours()); [EOL]     try { [EOL]         Weeks.MAX_VALUE.toStandardHours(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testToStandardHours() { [EOL]     Weeks test = Weeks.weeks(2); [EOL]     Hours expected = Hours.hours(2 * 7 * 24); [EOL]     assertEquals(expected, test.toStandardHours()); [EOL]     try { [EOL]         Weeks.MAX_VALUE.toStandardHours(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testToStandardHours() { [EOL]     Weeks test = Weeks.weeks(2); [EOL]     Hours expected = Hours.hours(2 * 7 * 24); [EOL]     assertEquals(expected, test.toStandardHours()); [EOL]     try { [EOL]         Weeks.MAX_VALUE.toStandardHours(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testToStandardHours() { [EOL]     Weeks test = Weeks.weeks(2); [EOL]     Hours expected = Hours.hours(2 * 7 * 24); [EOL]     assertEquals(expected, test.toStandardHours()); [EOL]     try { [EOL]         Weeks.MAX_VALUE.toStandardHours(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testToStandardHours() { [EOL]     Weeks test = Weeks.weeks(2); [EOL]     Hours expected = Hours.hours(2 * 7 * 24); [EOL]     assertEquals(expected, test.toStandardHours()); [EOL]     try { [EOL]         Weeks.MAX_VALUE.toStandardHours(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testToStandardHours() { [EOL]     Weeks test = Weeks.weeks(2); [EOL]     Hours expected = Hours.hours(2 * 7 * 24); [EOL]     assertEquals(expected, test.toStandardHours()); [EOL]     try { [EOL]         Weeks.MAX_VALUE.toStandardHours(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testToStandardHours() { [EOL]     Weeks test = Weeks.weeks(2); [EOL]     Hours expected = Hours.hours(2 * 7 * 24); [EOL]     assertEquals(expected, test.toStandardHours()); [EOL]     try { [EOL]         Weeks.MAX_VALUE.toStandardHours(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testToStandardHours() { [EOL]     Weeks test = Weeks.weeks(2); [EOL]     Hours expected = Hours.hours(2 * 7 * 24); [EOL]     assertEquals(expected, test.toStandardHours()); [EOL]     try { [EOL]         Weeks.MAX_VALUE.toStandardHours(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testToStandardHours() { [EOL]     Weeks test = Weeks.weeks(2); [EOL]     Hours expected = Hours.hours(2 * 7 * 24); [EOL]     assertEquals(expected, test.toStandardHours()); [EOL]     try { [EOL]         Weeks.MAX_VALUE.toStandardHours(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testToStandardHours() { [EOL]     Weeks test = Weeks.weeks(2); [EOL]     Hours expected = Hours.hours(2 * 7 * 24); [EOL]     assertEquals(expected, test.toStandardHours()); [EOL]     try { [EOL]         Weeks.MAX_VALUE.toStandardHours(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testFactory_hoursBetween_RPartial() { [EOL]     LocalTime start = new LocalTime(12, 0); [EOL]     LocalTime end1 = new LocalTime(15, 0); [EOL]     @SuppressWarnings("deprecation") [EOL]     TimeOfDay end2 = new TimeOfDay(18, 0); [EOL]     assertEquals(3, Hours.hoursBetween(start, end1).getHours()); [EOL]     assertEquals(0, Hours.hoursBetween(start, start).getHours()); [EOL]     assertEquals(0, Hours.hoursBetween(end1, end1).getHours()); [EOL]     assertEquals(-3, Hours.hoursBetween(end1, start).getHours()); [EOL]     assertEquals(6, Hours.hoursBetween(start, end2).getHours()); [EOL] }
public void testFactory_hoursBetween_RPartial() { [EOL]     LocalTime start = new LocalTime(12, 0); [EOL]     LocalTime end1 = new LocalTime(15, 0); [EOL]     @SuppressWarnings("deprecation") [EOL]     TimeOfDay end2 = new TimeOfDay(18, 0); [EOL]     assertEquals(3, Hours.hoursBetween(start, end1).getHours()); [EOL]     assertEquals(0, Hours.hoursBetween(start, start).getHours()); [EOL]     assertEquals(0, Hours.hoursBetween(end1, end1).getHours()); [EOL]     assertEquals(-3, Hours.hoursBetween(end1, start).getHours()); [EOL]     assertEquals(6, Hours.hoursBetween(start, end2).getHours()); [EOL] }
public void testToStandardHours() { [EOL]     Weeks test = Weeks.weeks(2); [EOL]     Hours expected = Hours.hours(2 * 7 * 24); [EOL]     assertEquals(expected, test.toStandardHours()); [EOL]     try { [EOL]         Weeks.MAX_VALUE.toStandardHours(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testToStandardHours() { [EOL]     Weeks test = Weeks.weeks(2); [EOL]     Hours expected = Hours.hours(2 * 7 * 24); [EOL]     assertEquals(expected, test.toStandardHours()); [EOL]     try { [EOL]         Weeks.MAX_VALUE.toStandardHours(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testToStandardDays() { [EOL]     Hours test = Hours.hours(24 * 2); [EOL]     Days expected = Days.days(2); [EOL]     assertEquals(expected, test.toStandardDays()); [EOL] }
public void testToStandardDuration() { [EOL]     Hours test = Hours.hours(20); [EOL]     Duration expected = new Duration(20L * DateTimeConstants.MILLIS_PER_HOUR); [EOL]     assertEquals(expected, test.toStandardDuration()); [EOL]     expected = new Duration(((long) Integer.MAX_VALUE) * DateTimeConstants.MILLIS_PER_HOUR); [EOL]     assertEquals(expected, Hours.MAX_VALUE.toStandardDuration()); [EOL] }
public void testToStandardDuration() { [EOL]     Hours test = Hours.hours(20); [EOL]     Duration expected = new Duration(20L * DateTimeConstants.MILLIS_PER_HOUR); [EOL]     assertEquals(expected, test.toStandardDuration()); [EOL]     expected = new Duration(((long) Integer.MAX_VALUE) * DateTimeConstants.MILLIS_PER_HOUR); [EOL]     assertEquals(expected, Hours.MAX_VALUE.toStandardDuration()); [EOL] }
public void testToStandardDuration() { [EOL]     Hours test = Hours.hours(20); [EOL]     Duration expected = new Duration(20L * DateTimeConstants.MILLIS_PER_HOUR); [EOL]     assertEquals(expected, test.toStandardDuration()); [EOL]     expected = new Duration(((long) Integer.MAX_VALUE) * DateTimeConstants.MILLIS_PER_HOUR); [EOL]     assertEquals(expected, Hours.MAX_VALUE.toStandardDuration()); [EOL] }
public void testIsGreaterThan() { [EOL]     assertEquals(true, Hours.THREE.isGreaterThan(Hours.TWO)); [EOL]     assertEquals(false, Hours.THREE.isGreaterThan(Hours.THREE)); [EOL]     assertEquals(false, Hours.TWO.isGreaterThan(Hours.THREE)); [EOL]     assertEquals(true, Hours.ONE.isGreaterThan(null)); [EOL]     assertEquals(false, Hours.hours(-1).isGreaterThan(null)); [EOL] }
public void testRemoveNullRemoved2() { [EOL]     Converter[] array = new Converter[] { c1, c2, c3, c4 }; [EOL]     ConverterSet set = new ConverterSet(array); [EOL]     ConverterSet result = set.remove(c5, null); [EOL]     assertSame(set, result); [EOL] }
public void testRemoveNullRemoved2() { [EOL]     Converter[] array = new Converter[] { c1, c2, c3, c4 }; [EOL]     ConverterSet set = new ConverterSet(array); [EOL]     ConverterSet result = set.remove(c5, null); [EOL]     assertSame(set, result); [EOL] }
public void testGetInstantConverterOKMultipleMatches() { [EOL]     InstantConverter c = new InstantConverter() { [EOL]  [EOL]         public long getInstantMillis(Object object, Chronology chrono) { [EOL]             return 0; [EOL]         } [EOL]  [EOL]         public Chronology getChronology(Object object, DateTimeZone zone) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public Chronology getChronology(Object object, Chronology chrono) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public Class getSupportedType() { [EOL]             return ReadableDateTime.class; [EOL]         } [EOL]     }; [EOL]     try { [EOL]         ConverterManager.getInstance().addInstantConverter(c); [EOL]         InstantConverter ok = ConverterManager.getInstance().getInstantConverter(new DateTime()); [EOL]         assertEquals(ReadableDateTime.class, ok.getSupportedType()); [EOL]     } finally { [EOL]         ConverterManager.getInstance().removeInstantConverter(c); [EOL]     } [EOL]     assertEquals(6, ConverterManager.getInstance().getInstantConverters().length); [EOL] }
public void test_append_nullPrinter_Parser() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendLiteral('Y'); [EOL]     DateTimeParser p = bld.toParser(); [EOL]     try { [EOL]         DateTimeFormatterBuilder bld2 = new DateTimeFormatterBuilder(); [EOL]         bld2.append((DateTimePrinter) null, p); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void test_canBuildParser() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     assertEquals(false, bld.canBuildParser()); [EOL]     bld.appendLiteral('X'); [EOL]     assertEquals(true, bld.canBuildParser()); [EOL] }
public void test_append_nullPrinter_Parser() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendLiteral('Y'); [EOL]     DateTimeParser p = bld.toParser(); [EOL]     try { [EOL]         DateTimeFormatterBuilder bld2 = new DateTimeFormatterBuilder(); [EOL]         bld2.append((DateTimePrinter) null, p); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void test_append_nullPrinter_Parser() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendLiteral('Y'); [EOL]     DateTimeParser p = bld.toParser(); [EOL]     try { [EOL]         DateTimeFormatterBuilder bld2 = new DateTimeFormatterBuilder(); [EOL]         bld2.append((DateTimePrinter) null, p); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void test_append_nullPrinter_Parser() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendLiteral('Y'); [EOL]     DateTimeParser p = bld.toParser(); [EOL]     try { [EOL]         DateTimeFormatterBuilder bld2 = new DateTimeFormatterBuilder(); [EOL]         bld2.append((DateTimePrinter) null, p); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void test_append_nullPrinter_Parser() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendLiteral('Y'); [EOL]     DateTimeParser p = bld.toParser(); [EOL]     try { [EOL]         DateTimeFormatterBuilder bld2 = new DateTimeFormatterBuilder(); [EOL]         bld2.append((DateTimePrinter) null, p); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void test_append_nullPrinter_Parser() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder(); [EOL]     bld.appendLiteral('Y'); [EOL]     DateTimeParser p = bld.toParser(); [EOL]     try { [EOL]         DateTimeFormatterBuilder bld2 = new DateTimeFormatterBuilder(); [EOL]         bld2.append((DateTimePrinter) null, p); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFormatParse_textYear_UK() { [EOL]     DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder().appendLiteral('$').appendText(DateTimeFieldType.year()).toFormatter().withLocale(Locale.UK).withZoneUTC(); [EOL]     String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("$2007", str); [EOL]     try { [EOL]         dateFormatter.parseDateTime(str); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFormatParse_textYear_UK() { [EOL]     DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder().appendLiteral('$').appendText(DateTimeFieldType.year()).toFormatter().withLocale(Locale.UK).withZoneUTC(); [EOL]     String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("$2007", str); [EOL]     try { [EOL]         dateFormatter.parseDateTime(str); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFormat_weekyearOfEra_twoDigit() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("xx").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "04", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "23", f.print(dt)); [EOL]     f = f.withZoneUTC(); [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2003, 12, 29, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(1922, 1, 2, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("22")); [EOL]     expect = new DateTime(2021, 1, 4, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("21")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = f.withPivotYear(new Integer(2050)); [EOL]     expect = new DateTime(2000, 1, 3, 0, 0, 0, 0, DateTimeZone.UTC); [EOL]     assertEquals(expect, f.parseDateTime("00")); [EOL]     expect = new DateTime(2098, 12, 29, 0, 0, 0, 0, DateTimeZone.UTC); [EOL]     assertEquals(expect, f.parseDateTime("99")); [EOL]     f = new DateTimeFormatterBuilder().appendTwoDigitWeekyear(2000).toFormatter(); [EOL]     f = f.withZoneUTC(); [EOL]     try { [EOL]         f.parseDateTime("5"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("005"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+50"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("-50"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = DateTimeFormat.forPattern("xx").withLocale(Locale.UK); [EOL]     f = f.withZoneUTC(); [EOL]     f.parseDateTime("5"); [EOL]     f.parseDateTime("005"); [EOL]     f.parseDateTime("+50"); [EOL]     f.parseDateTime("-50"); [EOL]     f = new DateTimeFormatterBuilder().appendTwoDigitWeekyear(2000, true).toFormatter(); [EOL]     f = f.withZoneUTC(); [EOL]     expect = new DateTime(2003, 12, 29, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(3, 12, 29, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("+04")); [EOL]     expect = new DateTime(-4, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("-04")); [EOL]     expect = new DateTime(3, 12, 29, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("4")); [EOL]     expect = new DateTime(-4, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("-4")); [EOL]     expect = new DateTime(3, 12, 29, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("004")); [EOL]     expect = new DateTime(3, 12, 29, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("+004")); [EOL]     expect = new DateTime(-4, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("-004")); [EOL]     expect = new DateTime(3004, 1, 2, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("3004")); [EOL]     expect = new DateTime(3004, 1, 2, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("+3004")); [EOL]     expect = new DateTime(-3004, 1, 4, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("-3004")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFormat_weekyearOfEra_twoDigit() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("xx").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "04", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "23", f.print(dt)); [EOL]     f = f.withZoneUTC(); [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2003, 12, 29, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(1922, 1, 2, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("22")); [EOL]     expect = new DateTime(2021, 1, 4, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("21")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = f.withPivotYear(new Integer(2050)); [EOL]     expect = new DateTime(2000, 1, 3, 0, 0, 0, 0, DateTimeZone.UTC); [EOL]     assertEquals(expect, f.parseDateTime("00")); [EOL]     expect = new DateTime(2098, 12, 29, 0, 0, 0, 0, DateTimeZone.UTC); [EOL]     assertEquals(expect, f.parseDateTime("99")); [EOL]     f = new DateTimeFormatterBuilder().appendTwoDigitWeekyear(2000).toFormatter(); [EOL]     f = f.withZoneUTC(); [EOL]     try { [EOL]         f.parseDateTime("5"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("005"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+50"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("-50"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = DateTimeFormat.forPattern("xx").withLocale(Locale.UK); [EOL]     f = f.withZoneUTC(); [EOL]     f.parseDateTime("5"); [EOL]     f.parseDateTime("005"); [EOL]     f.parseDateTime("+50"); [EOL]     f.parseDateTime("-50"); [EOL]     f = new DateTimeFormatterBuilder().appendTwoDigitWeekyear(2000, true).toFormatter(); [EOL]     f = f.withZoneUTC(); [EOL]     expect = new DateTime(2003, 12, 29, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(3, 12, 29, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("+04")); [EOL]     expect = new DateTime(-4, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("-04")); [EOL]     expect = new DateTime(3, 12, 29, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("4")); [EOL]     expect = new DateTime(-4, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("-4")); [EOL]     expect = new DateTime(3, 12, 29, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("004")); [EOL]     expect = new DateTime(3, 12, 29, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("+004")); [EOL]     expect = new DateTime(-4, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("-004")); [EOL]     expect = new DateTime(3004, 1, 2, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("3004")); [EOL]     expect = new DateTime(3004, 1, 2, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("+3004")); [EOL]     expect = new DateTime(-3004, 1, 4, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("-3004")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFormat_weekyearOfEra_twoDigit() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("xx").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "04", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "23", f.print(dt)); [EOL]     f = f.withZoneUTC(); [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2003, 12, 29, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(1922, 1, 2, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("22")); [EOL]     expect = new DateTime(2021, 1, 4, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("21")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = f.withPivotYear(new Integer(2050)); [EOL]     expect = new DateTime(2000, 1, 3, 0, 0, 0, 0, DateTimeZone.UTC); [EOL]     assertEquals(expect, f.parseDateTime("00")); [EOL]     expect = new DateTime(2098, 12, 29, 0, 0, 0, 0, DateTimeZone.UTC); [EOL]     assertEquals(expect, f.parseDateTime("99")); [EOL]     f = new DateTimeFormatterBuilder().appendTwoDigitWeekyear(2000).toFormatter(); [EOL]     f = f.withZoneUTC(); [EOL]     try { [EOL]         f.parseDateTime("5"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("005"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+50"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("-50"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = DateTimeFormat.forPattern("xx").withLocale(Locale.UK); [EOL]     f = f.withZoneUTC(); [EOL]     f.parseDateTime("5"); [EOL]     f.parseDateTime("005"); [EOL]     f.parseDateTime("+50"); [EOL]     f.parseDateTime("-50"); [EOL]     f = new DateTimeFormatterBuilder().appendTwoDigitWeekyear(2000, true).toFormatter(); [EOL]     f = f.withZoneUTC(); [EOL]     expect = new DateTime(2003, 12, 29, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(3, 12, 29, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("+04")); [EOL]     expect = new DateTime(-4, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("-04")); [EOL]     expect = new DateTime(3, 12, 29, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("4")); [EOL]     expect = new DateTime(-4, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("-4")); [EOL]     expect = new DateTime(3, 12, 29, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("004")); [EOL]     expect = new DateTime(3, 12, 29, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("+004")); [EOL]     expect = new DateTime(-4, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("-004")); [EOL]     expect = new DateTime(3004, 1, 2, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("3004")); [EOL]     expect = new DateTime(3004, 1, 2, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("+3004")); [EOL]     expect = new DateTime(-3004, 1, 4, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("-3004")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFormat_weekyearOfEra_twoDigit() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("xx").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "04", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "23", f.print(dt)); [EOL]     f = f.withZoneUTC(); [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2003, 12, 29, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(1922, 1, 2, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("22")); [EOL]     expect = new DateTime(2021, 1, 4, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("21")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = f.withPivotYear(new Integer(2050)); [EOL]     expect = new DateTime(2000, 1, 3, 0, 0, 0, 0, DateTimeZone.UTC); [EOL]     assertEquals(expect, f.parseDateTime("00")); [EOL]     expect = new DateTime(2098, 12, 29, 0, 0, 0, 0, DateTimeZone.UTC); [EOL]     assertEquals(expect, f.parseDateTime("99")); [EOL]     f = new DateTimeFormatterBuilder().appendTwoDigitWeekyear(2000).toFormatter(); [EOL]     f = f.withZoneUTC(); [EOL]     try { [EOL]         f.parseDateTime("5"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("005"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+50"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("-50"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = DateTimeFormat.forPattern("xx").withLocale(Locale.UK); [EOL]     f = f.withZoneUTC(); [EOL]     f.parseDateTime("5"); [EOL]     f.parseDateTime("005"); [EOL]     f.parseDateTime("+50"); [EOL]     f.parseDateTime("-50"); [EOL]     f = new DateTimeFormatterBuilder().appendTwoDigitWeekyear(2000, true).toFormatter(); [EOL]     f = f.withZoneUTC(); [EOL]     expect = new DateTime(2003, 12, 29, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(3, 12, 29, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("+04")); [EOL]     expect = new DateTime(-4, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("-04")); [EOL]     expect = new DateTime(3, 12, 29, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("4")); [EOL]     expect = new DateTime(-4, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("-4")); [EOL]     expect = new DateTime(3, 12, 29, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("004")); [EOL]     expect = new DateTime(3, 12, 29, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("+004")); [EOL]     expect = new DateTime(-4, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("-004")); [EOL]     expect = new DateTime(3004, 1, 2, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("3004")); [EOL]     expect = new DateTime(3004, 1, 2, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("+3004")); [EOL]     expect = new DateTime(-3004, 1, 4, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("-3004")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFormat_yearOfEra() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("Y").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "2004", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals(dt.toString(), "2004", f.print(dt)); [EOL]     dt = dt.withZone(TOKYO); [EOL]     assertEquals(dt.toString(), "2004", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "124", f.print(dt)); [EOL] }
public void testFormat_yearOfEra() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("Y").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "2004", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals(dt.toString(), "2004", f.print(dt)); [EOL]     dt = dt.withZone(TOKYO); [EOL]     assertEquals(dt.toString(), "2004", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "124", f.print(dt)); [EOL] }
public void testParse_noFormatter() throws Throwable { [EOL]     DateTime start = new DateTime(2010, 6, 30, 12, 30, ISOChronology.getInstance(PARIS)); [EOL]     DateTime end = new DateTime(2010, 7, 1, 14, 30, ISOChronology.getInstance(PARIS)); [EOL]     assertEquals(new MutableInterval(start, end), MutableInterval.parse("2010-06-30T12:30/2010-07-01T14:30")); [EOL]     assertEquals(new MutableInterval(start, end), MutableInterval.parse("2010-06-30T12:30/P1DT2H")); [EOL]     assertEquals(new MutableInterval(start, end), MutableInterval.parse("P1DT2H/2010-07-01T14:30")); [EOL] }
public void testParse_noFormatter() throws Throwable { [EOL]     DateTime start = new DateTime(2010, 6, 30, 12, 30, ISOChronology.getInstance(PARIS)); [EOL]     DateTime end = new DateTime(2010, 7, 1, 14, 30, ISOChronology.getInstance(PARIS)); [EOL]     assertEquals(new MutableInterval(start, end), MutableInterval.parse("2010-06-30T12:30/2010-07-01T14:30")); [EOL]     assertEquals(new MutableInterval(start, end), MutableInterval.parse("2010-06-30T12:30/P1DT2H")); [EOL]     assertEquals(new MutableInterval(start, end), MutableInterval.parse("P1DT2H/2010-07-01T14:30")); [EOL] }
public void testParse_noFormatter() throws Throwable { [EOL]     DateTime start = new DateTime(2010, 6, 30, 12, 30, ISOChronology.getInstance(PARIS)); [EOL]     DateTime end = new DateTime(2010, 7, 1, 14, 30, ISOChronology.getInstance(PARIS)); [EOL]     assertEquals(new MutableInterval(start, end), MutableInterval.parse("2010-06-30T12:30/2010-07-01T14:30")); [EOL]     assertEquals(new MutableInterval(start, end), MutableInterval.parse("2010-06-30T12:30/P1DT2H")); [EOL]     assertEquals(new MutableInterval(start, end), MutableInterval.parse("P1DT2H/2010-07-01T14:30")); [EOL] }
public void testParse_noFormatter() throws Throwable { [EOL]     DateTime start = new DateTime(2010, 6, 30, 12, 30, ISOChronology.getInstance(PARIS)); [EOL]     DateTime end = new DateTime(2010, 7, 1, 14, 30, ISOChronology.getInstance(PARIS)); [EOL]     assertEquals(new MutableInterval(start, end), MutableInterval.parse("2010-06-30T12:30/2010-07-01T14:30")); [EOL]     assertEquals(new MutableInterval(start, end), MutableInterval.parse("2010-06-30T12:30/P1DT2H")); [EOL]     assertEquals(new MutableInterval(start, end), MutableInterval.parse("P1DT2H/2010-07-01T14:30")); [EOL] }
public void testWith1() { [EOL]     Partial test = createHourMinPartial(); [EOL]     Partial result = test.with(DateTimeFieldType.hourOfDay(), 15); [EOL]     check(test, 10, 20); [EOL]     check(result, 15, 20); [EOL] }
public void testFormat_weekyearOfEra_twoDigit() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("xx").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "04", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "23", f.print(dt)); [EOL]     f = f.withZoneUTC(); [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2003, 12, 29, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(1922, 1, 2, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("22")); [EOL]     expect = new DateTime(2021, 1, 4, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("21")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = f.withPivotYear(new Integer(2050)); [EOL]     expect = new DateTime(2000, 1, 3, 0, 0, 0, 0, DateTimeZone.UTC); [EOL]     assertEquals(expect, f.parseDateTime("00")); [EOL]     expect = new DateTime(2098, 12, 29, 0, 0, 0, 0, DateTimeZone.UTC); [EOL]     assertEquals(expect, f.parseDateTime("99")); [EOL]     f = new DateTimeFormatterBuilder().appendTwoDigitWeekyear(2000).toFormatter(); [EOL]     f = f.withZoneUTC(); [EOL]     try { [EOL]         f.parseDateTime("5"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("005"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+50"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("-50"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = DateTimeFormat.forPattern("xx").withLocale(Locale.UK); [EOL]     f = f.withZoneUTC(); [EOL]     f.parseDateTime("5"); [EOL]     f.parseDateTime("005"); [EOL]     f.parseDateTime("+50"); [EOL]     f.parseDateTime("-50"); [EOL]     f = new DateTimeFormatterBuilder().appendTwoDigitWeekyear(2000, true).toFormatter(); [EOL]     f = f.withZoneUTC(); [EOL]     expect = new DateTime(2003, 12, 29, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(3, 12, 29, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("+04")); [EOL]     expect = new DateTime(-4, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("-04")); [EOL]     expect = new DateTime(3, 12, 29, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("4")); [EOL]     expect = new DateTime(-4, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("-4")); [EOL]     expect = new DateTime(3, 12, 29, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("004")); [EOL]     expect = new DateTime(3, 12, 29, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("+004")); [EOL]     expect = new DateTime(-4, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("-004")); [EOL]     expect = new DateTime(3004, 1, 2, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("3004")); [EOL]     expect = new DateTime(3004, 1, 2, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("+3004")); [EOL]     expect = new DateTime(-3004, 1, 4, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("-3004")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFormat_weekyearOfEra_twoDigit() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("xx").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "04", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "23", f.print(dt)); [EOL]     f = f.withZoneUTC(); [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2003, 12, 29, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(1922, 1, 2, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("22")); [EOL]     expect = new DateTime(2021, 1, 4, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("21")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = f.withPivotYear(new Integer(2050)); [EOL]     expect = new DateTime(2000, 1, 3, 0, 0, 0, 0, DateTimeZone.UTC); [EOL]     assertEquals(expect, f.parseDateTime("00")); [EOL]     expect = new DateTime(2098, 12, 29, 0, 0, 0, 0, DateTimeZone.UTC); [EOL]     assertEquals(expect, f.parseDateTime("99")); [EOL]     f = new DateTimeFormatterBuilder().appendTwoDigitWeekyear(2000).toFormatter(); [EOL]     f = f.withZoneUTC(); [EOL]     try { [EOL]         f.parseDateTime("5"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("005"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+50"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("-50"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = DateTimeFormat.forPattern("xx").withLocale(Locale.UK); [EOL]     f = f.withZoneUTC(); [EOL]     f.parseDateTime("5"); [EOL]     f.parseDateTime("005"); [EOL]     f.parseDateTime("+50"); [EOL]     f.parseDateTime("-50"); [EOL]     f = new DateTimeFormatterBuilder().appendTwoDigitWeekyear(2000, true).toFormatter(); [EOL]     f = f.withZoneUTC(); [EOL]     expect = new DateTime(2003, 12, 29, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(3, 12, 29, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("+04")); [EOL]     expect = new DateTime(-4, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("-04")); [EOL]     expect = new DateTime(3, 12, 29, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("4")); [EOL]     expect = new DateTime(-4, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("-4")); [EOL]     expect = new DateTime(3, 12, 29, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("004")); [EOL]     expect = new DateTime(3, 12, 29, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("+004")); [EOL]     expect = new DateTime(-4, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("-004")); [EOL]     expect = new DateTime(3004, 1, 2, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("3004")); [EOL]     expect = new DateTime(3004, 1, 2, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("+3004")); [EOL]     expect = new DateTime(-3004, 1, 4, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("-3004")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFormat_weekyearOfEra_twoDigit() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("xx").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "04", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "23", f.print(dt)); [EOL]     f = f.withZoneUTC(); [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2003, 12, 29, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(1922, 1, 2, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("22")); [EOL]     expect = new DateTime(2021, 1, 4, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("21")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = f.withPivotYear(new Integer(2050)); [EOL]     expect = new DateTime(2000, 1, 3, 0, 0, 0, 0, DateTimeZone.UTC); [EOL]     assertEquals(expect, f.parseDateTime("00")); [EOL]     expect = new DateTime(2098, 12, 29, 0, 0, 0, 0, DateTimeZone.UTC); [EOL]     assertEquals(expect, f.parseDateTime("99")); [EOL]     f = new DateTimeFormatterBuilder().appendTwoDigitWeekyear(2000).toFormatter(); [EOL]     f = f.withZoneUTC(); [EOL]     try { [EOL]         f.parseDateTime("5"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("005"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+50"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("-50"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = DateTimeFormat.forPattern("xx").withLocale(Locale.UK); [EOL]     f = f.withZoneUTC(); [EOL]     f.parseDateTime("5"); [EOL]     f.parseDateTime("005"); [EOL]     f.parseDateTime("+50"); [EOL]     f.parseDateTime("-50"); [EOL]     f = new DateTimeFormatterBuilder().appendTwoDigitWeekyear(2000, true).toFormatter(); [EOL]     f = f.withZoneUTC(); [EOL]     expect = new DateTime(2003, 12, 29, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(3, 12, 29, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("+04")); [EOL]     expect = new DateTime(-4, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("-04")); [EOL]     expect = new DateTime(3, 12, 29, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("4")); [EOL]     expect = new DateTime(-4, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("-4")); [EOL]     expect = new DateTime(3, 12, 29, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("004")); [EOL]     expect = new DateTime(3, 12, 29, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("+004")); [EOL]     expect = new DateTime(-4, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("-004")); [EOL]     expect = new DateTime(3004, 1, 2, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("3004")); [EOL]     expect = new DateTime(3004, 1, 2, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("+3004")); [EOL]     expect = new DateTime(-3004, 1, 4, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("-3004")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFormat_weekyearOfEra_twoDigit() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("xx").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "04", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "23", f.print(dt)); [EOL]     f = f.withZoneUTC(); [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2003, 12, 29, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(1922, 1, 2, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("22")); [EOL]     expect = new DateTime(2021, 1, 4, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("21")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = f.withPivotYear(new Integer(2050)); [EOL]     expect = new DateTime(2000, 1, 3, 0, 0, 0, 0, DateTimeZone.UTC); [EOL]     assertEquals(expect, f.parseDateTime("00")); [EOL]     expect = new DateTime(2098, 12, 29, 0, 0, 0, 0, DateTimeZone.UTC); [EOL]     assertEquals(expect, f.parseDateTime("99")); [EOL]     f = new DateTimeFormatterBuilder().appendTwoDigitWeekyear(2000).toFormatter(); [EOL]     f = f.withZoneUTC(); [EOL]     try { [EOL]         f.parseDateTime("5"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("005"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+50"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("-50"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = DateTimeFormat.forPattern("xx").withLocale(Locale.UK); [EOL]     f = f.withZoneUTC(); [EOL]     f.parseDateTime("5"); [EOL]     f.parseDateTime("005"); [EOL]     f.parseDateTime("+50"); [EOL]     f.parseDateTime("-50"); [EOL]     f = new DateTimeFormatterBuilder().appendTwoDigitWeekyear(2000, true).toFormatter(); [EOL]     f = f.withZoneUTC(); [EOL]     expect = new DateTime(2003, 12, 29, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(3, 12, 29, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("+04")); [EOL]     expect = new DateTime(-4, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("-04")); [EOL]     expect = new DateTime(3, 12, 29, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("4")); [EOL]     expect = new DateTime(-4, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("-4")); [EOL]     expect = new DateTime(3, 12, 29, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("004")); [EOL]     expect = new DateTime(3, 12, 29, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("+004")); [EOL]     expect = new DateTime(-4, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("-004")); [EOL]     expect = new DateTime(3004, 1, 2, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("3004")); [EOL]     expect = new DateTime(3004, 1, 2, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("+3004")); [EOL]     expect = new DateTime(-3004, 1, 4, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("-3004")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFormatParse_textYear_UK() { [EOL]     DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder().appendLiteral('$').appendText(DateTimeFieldType.year()).toFormatter().withLocale(Locale.UK).withZoneUTC(); [EOL]     String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("$2007", str); [EOL]     try { [EOL]         dateFormatter.parseDateTime(str); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFormatParse_textYear_UK() { [EOL]     DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder().appendLiteral('$').appendText(DateTimeFieldType.year()).toFormatter().withLocale(Locale.UK).withZoneUTC(); [EOL]     String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("$2007", str); [EOL]     try { [EOL]         dateFormatter.parseDateTime(str); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFormatParse_textYear_UK() { [EOL]     DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder().appendLiteral('$').appendText(DateTimeFieldType.year()).toFormatter().withLocale(Locale.UK).withZoneUTC(); [EOL]     String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("$2007", str); [EOL]     try { [EOL]         dateFormatter.parseDateTime(str); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFormatParse_textYear_UK() { [EOL]     DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder().appendLiteral('$').appendText(DateTimeFieldType.year()).toFormatter().withLocale(Locale.UK).withZoneUTC(); [EOL]     String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("$2007", str); [EOL]     try { [EOL]         dateFormatter.parseDateTime(str); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFormatParse_textYear_UK() { [EOL]     DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder().appendLiteral('$').appendText(DateTimeFieldType.year()).toFormatter().withLocale(Locale.UK).withZoneUTC(); [EOL]     String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("$2007", str); [EOL]     try { [EOL]         dateFormatter.parseDateTime(str); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFormatParse_textYear_UK() { [EOL]     DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder().appendLiteral('$').appendText(DateTimeFieldType.year()).toFormatter().withLocale(Locale.UK).withZoneUTC(); [EOL]     String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("$2007", str); [EOL]     try { [EOL]         dateFormatter.parseDateTime(str); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testToString_String_Locale() { [EOL]     YearMonthDay test = new YearMonthDay(2002, 6, 9); [EOL]     assertEquals("\ufffd 9/6", test.toString("EEE d/M", Locale.ENGLISH)); [EOL]     assertEquals("\ufffd 9/6", test.toString("EEE d/M", Locale.FRENCH)); [EOL]     assertEquals("2002-06-09", test.toString(null, Locale.ENGLISH)); [EOL]     assertEquals("\ufffd 9/6", test.toString("EEE d/M", null)); [EOL]     assertEquals("2002-06-09", test.toString(null, null)); [EOL] }
public void testToString_String_Locale() { [EOL]     YearMonthDay test = new YearMonthDay(2002, 6, 9); [EOL]     assertEquals("\ufffd 9/6", test.toString("EEE d/M", Locale.ENGLISH)); [EOL]     assertEquals("\ufffd 9/6", test.toString("EEE d/M", Locale.FRENCH)); [EOL]     assertEquals("2002-06-09", test.toString(null, Locale.ENGLISH)); [EOL]     assertEquals("\ufffd 9/6", test.toString("EEE d/M", null)); [EOL]     assertEquals("2002-06-09", test.toString(null, null)); [EOL] }
public void testFormatParse_textYear_UK() { [EOL]     DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder().appendLiteral('$').appendText(DateTimeFieldType.year()).toFormatter().withLocale(Locale.UK).withZoneUTC(); [EOL]     String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("$2007", str); [EOL]     try { [EOL]         dateFormatter.parseDateTime(str); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFormatParse_textYear_UK() { [EOL]     DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder().appendLiteral('$').appendText(DateTimeFieldType.year()).toFormatter().withLocale(Locale.UK).withZoneUTC(); [EOL]     String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("$2007", str); [EOL]     try { [EOL]         dateFormatter.parseDateTime(str); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testToString_String_Locale() { [EOL]     YearMonthDay test = new YearMonthDay(2002, 6, 9); [EOL]     assertEquals("\ufffd 9/6", test.toString("EEE d/M", Locale.ENGLISH)); [EOL]     assertEquals("\ufffd 9/6", test.toString("EEE d/M", Locale.FRENCH)); [EOL]     assertEquals("2002-06-09", test.toString(null, Locale.ENGLISH)); [EOL]     assertEquals("\ufffd 9/6", test.toString("EEE d/M", null)); [EOL]     assertEquals("2002-06-09", test.toString(null, null)); [EOL] }
public void testToString_String_Locale() { [EOL]     YearMonthDay test = new YearMonthDay(2002, 6, 9); [EOL]     assertEquals("\ufffd 9/6", test.toString("EEE d/M", Locale.ENGLISH)); [EOL]     assertEquals("\ufffd 9/6", test.toString("EEE d/M", Locale.FRENCH)); [EOL]     assertEquals("2002-06-09", test.toString(null, Locale.ENGLISH)); [EOL]     assertEquals("\ufffd 9/6", test.toString("EEE d/M", null)); [EOL]     assertEquals("2002-06-09", test.toString(null, null)); [EOL] }
public void testToString_String_Locale() { [EOL]     YearMonthDay test = new YearMonthDay(2002, 6, 9); [EOL]     assertEquals("\ufffd 9/6", test.toString("EEE d/M", Locale.ENGLISH)); [EOL]     assertEquals("\ufffd 9/6", test.toString("EEE d/M", Locale.FRENCH)); [EOL]     assertEquals("2002-06-09", test.toString(null, Locale.ENGLISH)); [EOL]     assertEquals("\ufffd 9/6", test.toString("EEE d/M", null)); [EOL]     assertEquals("2002-06-09", test.toString(null, null)); [EOL] }
public void testFormatParse_textYear_UK() { [EOL]     DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder().appendLiteral('$').appendText(DateTimeFieldType.year()).toFormatter().withLocale(Locale.UK).withZoneUTC(); [EOL]     String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("$2007", str); [EOL]     try { [EOL]         dateFormatter.parseDateTime(str); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFormatParse_textYear_UK() { [EOL]     DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder().appendLiteral('$').appendText(DateTimeFieldType.year()).toFormatter().withLocale(Locale.UK).withZoneUTC(); [EOL]     String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("$2007", str); [EOL]     try { [EOL]         dateFormatter.parseDateTime(str); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFormatParse_textYear_UK() { [EOL]     DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder().appendLiteral('$').appendText(DateTimeFieldType.year()).toFormatter().withLocale(Locale.UK).withZoneUTC(); [EOL]     String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("$2007", str); [EOL]     try { [EOL]         dateFormatter.parseDateTime(str); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFormatParse_textYear_UK() { [EOL]     DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder().appendLiteral('$').appendText(DateTimeFieldType.year()).toFormatter().withLocale(Locale.UK).withZoneUTC(); [EOL]     String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("$2007", str); [EOL]     try { [EOL]         dateFormatter.parseDateTime(str); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testToDateTime_RI() { [EOL]     TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); [EOL]     DateTime dt = new DateTime(0L); [EOL]     assertEquals("1970-01-01T01:00:00.000+01:00", dt.toString()); [EOL]     DateTime test = base.toDateTime(dt); [EOL]     check(base, 10, 20, 30, 40); [EOL]     assertEquals("1970-01-01T01:00:00.000+01:00", dt.toString()); [EOL]     assertEquals("1970-01-01T10:20:30.040+01:00", test.toString()); [EOL] }
public void testToDateTime_RI() { [EOL]     TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); [EOL]     DateTime dt = new DateTime(0L); [EOL]     assertEquals("1970-01-01T01:00:00.000+01:00", dt.toString()); [EOL]     DateTime test = base.toDateTime(dt); [EOL]     check(base, 10, 20, 30, 40); [EOL]     assertEquals("1970-01-01T01:00:00.000+01:00", dt.toString()); [EOL]     assertEquals("1970-01-01T10:20:30.040+01:00", test.toString()); [EOL] }
public void testToDateTime_RI() { [EOL]     TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); [EOL]     DateTime dt = new DateTime(0L); [EOL]     assertEquals("1970-01-01T01:00:00.000+01:00", dt.toString()); [EOL]     DateTime test = base.toDateTime(dt); [EOL]     check(base, 10, 20, 30, 40); [EOL]     assertEquals("1970-01-01T01:00:00.000+01:00", dt.toString()); [EOL]     assertEquals("1970-01-01T10:20:30.040+01:00", test.toString()); [EOL] }
public void testToDateTime_RI() { [EOL]     TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); [EOL]     DateTime dt = new DateTime(0L); [EOL]     assertEquals("1970-01-01T01:00:00.000+01:00", dt.toString()); [EOL]     DateTime test = base.toDateTime(dt); [EOL]     check(base, 10, 20, 30, 40); [EOL]     assertEquals("1970-01-01T01:00:00.000+01:00", dt.toString()); [EOL]     assertEquals("1970-01-01T10:20:30.040+01:00", test.toString()); [EOL] }
public void testToDateTime_RI() { [EOL]     TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); [EOL]     DateTime dt = new DateTime(0L); [EOL]     assertEquals("1970-01-01T01:00:00.000+01:00", dt.toString()); [EOL]     DateTime test = base.toDateTime(dt); [EOL]     check(base, 10, 20, 30, 40); [EOL]     assertEquals("1970-01-01T01:00:00.000+01:00", dt.toString()); [EOL]     assertEquals("1970-01-01T10:20:30.040+01:00", test.toString()); [EOL] }
public void testToDateTime_RI() { [EOL]     TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); [EOL]     DateTime dt = new DateTime(0L); [EOL]     assertEquals("1970-01-01T01:00:00.000+01:00", dt.toString()); [EOL]     DateTime test = base.toDateTime(dt); [EOL]     check(base, 10, 20, 30, 40); [EOL]     assertEquals("1970-01-01T01:00:00.000+01:00", dt.toString()); [EOL]     assertEquals("1970-01-01T10:20:30.040+01:00", test.toString()); [EOL] }
public void testToDateTime_RI() { [EOL]     TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); [EOL]     DateTime dt = new DateTime(0L); [EOL]     assertEquals("1970-01-01T01:00:00.000+01:00", dt.toString()); [EOL]     DateTime test = base.toDateTime(dt); [EOL]     check(base, 10, 20, 30, 40); [EOL]     assertEquals("1970-01-01T01:00:00.000+01:00", dt.toString()); [EOL]     assertEquals("1970-01-01T10:20:30.040+01:00", test.toString()); [EOL] }
public void testForID_String() { [EOL]     assertEquals(DateTimeZone.getDefault(), DateTimeZone.forID((String) null)); [EOL]     DateTimeZone zone = DateTimeZone.forID("Europe/London"); [EOL]     assertEquals("Europe/London", zone.getID()); [EOL]     zone = DateTimeZone.forID("UTC"); [EOL]     assertSame(DateTimeZone.UTC, zone); [EOL]     zone = DateTimeZone.forID("+00:00"); [EOL]     assertSame(DateTimeZone.UTC, zone); [EOL]     zone = DateTimeZone.forID("+00"); [EOL]     assertSame(DateTimeZone.UTC, zone); [EOL]     zone = DateTimeZone.forID("+01:23"); [EOL]     assertEquals("+01:23", zone.getID()); [EOL]     assertEquals(DateTimeConstants.MILLIS_PER_HOUR + (23L * DateTimeConstants.MILLIS_PER_MINUTE), zone.getOffset(TEST_TIME_SUMMER)); [EOL]     zone = DateTimeZone.forID("-02:00"); [EOL]     assertEquals("-02:00", zone.getID()); [EOL]     assertEquals((-2L * DateTimeConstants.MILLIS_PER_HOUR), zone.getOffset(TEST_TIME_SUMMER)); [EOL]     zone = DateTimeZone.forID("-07:05:34.0"); [EOL]     assertEquals("-07:05:34", zone.getID()); [EOL]     assertEquals((-7L * DateTimeConstants.MILLIS_PER_HOUR) + (-5L * DateTimeConstants.MILLIS_PER_MINUTE) + (-34L * DateTimeConstants.MILLIS_PER_SECOND), zone.getOffset(TEST_TIME_SUMMER)); [EOL]     try { [EOL]         DateTimeZone.forID("SST"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateTimeZone.forID("europe/london"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateTimeZone.forID("Europe/UK"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateTimeZone.forID("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateTimeZone.forID("+0"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWith1() { [EOL]     Partial test = createHourMinPartial(); [EOL]     Partial result = test.with(DateTimeFieldType.hourOfDay(), 15); [EOL]     check(test, 10, 20); [EOL]     check(result, 15, 20); [EOL] }
public void testWith1() { [EOL]     Partial test = createHourMinPartial(); [EOL]     Partial result = test.with(DateTimeFieldType.hourOfDay(), 15); [EOL]     check(test, 10, 20); [EOL]     check(result, 15, 20); [EOL] }
public void testWith1() { [EOL]     Partial test = createHourMinPartial(); [EOL]     Partial result = test.with(DateTimeFieldType.hourOfDay(), 15); [EOL]     check(test, 10, 20); [EOL]     check(result, 15, 20); [EOL] }
public void testParse_noFormatter() throws Throwable { [EOL]     DateTime start = new DateTime(2010, 6, 30, 12, 30, ISOChronology.getInstance(PARIS)); [EOL]     DateTime end = new DateTime(2010, 7, 1, 14, 30, ISOChronology.getInstance(PARIS)); [EOL]     assertEquals(new MutableInterval(start, end), MutableInterval.parse("2010-06-30T12:30/2010-07-01T14:30")); [EOL]     assertEquals(new MutableInterval(start, end), MutableInterval.parse("2010-06-30T12:30/P1DT2H")); [EOL]     assertEquals(new MutableInterval(start, end), MutableInterval.parse("P1DT2H/2010-07-01T14:30")); [EOL] }
public void testPropertyCompareToSecond() { [EOL]     TimeOfDay test1 = new TimeOfDay(TEST_TIME1); [EOL]     TimeOfDay test2 = new TimeOfDay(TEST_TIME2); [EOL]     assertEquals(true, test1.secondOfMinute().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.secondOfMinute().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.secondOfMinute().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.secondOfMinute().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.secondOfMinute().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.secondOfMinute().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.secondOfMinute().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.secondOfMinute().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testConstructor_ObjectString1() throws Throwable { [EOL]     TimeOfDay test = new TimeOfDay("10:20:30.040"); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(10, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL] }
public void testConstructor_int_int_int_nullChronology() throws Throwable { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(10, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(0, test.getMillisOfSecond()); [EOL] }
public void testConstructor_int_int_int_nullChronology() throws Throwable { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(10, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(0, test.getMillisOfSecond()); [EOL] }
public void testConstructor_int_int_int_nullChronology() throws Throwable { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(10, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(0, test.getMillisOfSecond()); [EOL] }
public void testConstructor_int_int_int_nullChronology() throws Throwable { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(10, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(0, test.getMillisOfSecond()); [EOL] }
public void testConstructor_int_int_int_nullChronology() throws Throwable { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(10, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(0, test.getMillisOfSecond()); [EOL] }
public void testConstructor_int_int_int_nullChronology() throws Throwable { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(10, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(0, test.getMillisOfSecond()); [EOL] }
public void testWithField1() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay result = test.withField(DateTimeFieldType.hourOfDay(), 15); [EOL]     assertEquals(new TimeOfDay(10, 20, 30, 40), test); [EOL]     assertEquals(new TimeOfDay(15, 20, 30, 40), result); [EOL] }
public void testToDateTimeToday() { [EOL]     TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     DateTime test = base.toDateTimeToday(); [EOL]     check(base, 10, 20, 30, 40); [EOL]     DateTime expected = new DateTime(dt.getMillis(), COPTIC_LONDON); [EOL]     expected = expected.hourOfDay().setCopy(10); [EOL]     expected = expected.minuteOfHour().setCopy(20); [EOL]     expected = expected.secondOfMinute().setCopy(30); [EOL]     expected = expected.millisOfSecond().setCopy(40); [EOL]     assertEquals(expected, test); [EOL] }
public void testToDateTimeToday() { [EOL]     TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     DateTime test = base.toDateTimeToday(); [EOL]     check(base, 10, 20, 30, 40); [EOL]     DateTime expected = new DateTime(dt.getMillis(), COPTIC_LONDON); [EOL]     expected = expected.hourOfDay().setCopy(10); [EOL]     expected = expected.minuteOfHour().setCopy(20); [EOL]     expected = expected.secondOfMinute().setCopy(30); [EOL]     expected = expected.millisOfSecond().setCopy(40); [EOL]     assertEquals(expected, test); [EOL] }
public void testWithers() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 10, 20, 30, 6); [EOL]     try { [EOL]         test.withHourOfDay(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withHourOfDay(24); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 10, 20, 30, 6); [EOL]     try { [EOL]         test.withHourOfDay(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withHourOfDay(24); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 10, 20, 30, 6); [EOL]     try { [EOL]         test.withHourOfDay(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withHourOfDay(24); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 10, 20, 30, 6); [EOL]     try { [EOL]         test.withHourOfDay(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withHourOfDay(24); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 10, 20, 30, 6); [EOL]     try { [EOL]         test.withHourOfDay(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withHourOfDay(24); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 10, 20, 30, 6); [EOL]     try { [EOL]         test.withHourOfDay(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withHourOfDay(24); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertySetMilli() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.millisOfSecond().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 20, 30, 12); [EOL]     try { [EOL]         test.millisOfSecond().setCopy(1000); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.millisOfSecond().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyGetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     assertSame(test.getChronology().minuteOfHour(), test.minuteOfHour().getField()); [EOL]     assertEquals("minuteOfHour", test.minuteOfHour().getName()); [EOL]     assertEquals("Property[minuteOfHour]", test.minuteOfHour().toString()); [EOL]     assertSame(test, test.minuteOfHour().getReadablePartial()); [EOL]     assertSame(test, test.minuteOfHour().getTimeOfDay()); [EOL]     assertEquals(20, test.minuteOfHour().get()); [EOL]     assertEquals("20", test.minuteOfHour().getAsString()); [EOL]     assertEquals("20", test.minuteOfHour().getAsText()); [EOL]     assertEquals("20", test.minuteOfHour().getAsText(Locale.FRENCH)); [EOL]     assertEquals("20", test.minuteOfHour().getAsShortText()); [EOL]     assertEquals("20", test.minuteOfHour().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().minutes(), test.minuteOfHour().getDurationField()); [EOL]     assertEquals(test.getChronology().hours(), test.minuteOfHour().getRangeDurationField()); [EOL]     assertEquals(2, test.minuteOfHour().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.minuteOfHour().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyGetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     assertSame(test.getChronology().minuteOfHour(), test.minuteOfHour().getField()); [EOL]     assertEquals("minuteOfHour", test.minuteOfHour().getName()); [EOL]     assertEquals("Property[minuteOfHour]", test.minuteOfHour().toString()); [EOL]     assertSame(test, test.minuteOfHour().getReadablePartial()); [EOL]     assertSame(test, test.minuteOfHour().getTimeOfDay()); [EOL]     assertEquals(20, test.minuteOfHour().get()); [EOL]     assertEquals("20", test.minuteOfHour().getAsString()); [EOL]     assertEquals("20", test.minuteOfHour().getAsText()); [EOL]     assertEquals("20", test.minuteOfHour().getAsText(Locale.FRENCH)); [EOL]     assertEquals("20", test.minuteOfHour().getAsShortText()); [EOL]     assertEquals("20", test.minuteOfHour().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().minutes(), test.minuteOfHour().getDurationField()); [EOL]     assertEquals(test.getChronology().hours(), test.minuteOfHour().getRangeDurationField()); [EOL]     assertEquals(2, test.minuteOfHour().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.minuteOfHour().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyAddHour() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.hourOfDay().addToCopy(9); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 19, 20, 30, 40); [EOL]     copy = test.hourOfDay().addToCopy(0); [EOL]     check(copy, 10, 20, 30, 40); [EOL]     copy = test.hourOfDay().addToCopy(13); [EOL]     check(copy, 23, 20, 30, 40); [EOL]     copy = test.hourOfDay().addToCopy(14); [EOL]     check(copy, 0, 20, 30, 40); [EOL]     copy = test.hourOfDay().addToCopy(-10); [EOL]     check(copy, 0, 20, 30, 40); [EOL]     copy = test.hourOfDay().addToCopy(-11); [EOL]     check(copy, 23, 20, 30, 40); [EOL] }
public void testConstructor_RP_RI5() throws Throwable { [EOL]     MutableInterval test = new MutableInterval((ReadablePeriod) null, (ReadableInstant) null); [EOL]     assertEquals(TEST_TIME_NOW, test.getStartMillis()); [EOL]     assertEquals(TEST_TIME_NOW, test.getEndMillis()); [EOL] }
public void testConstructor_RP_RI5() throws Throwable { [EOL]     MutableInterval test = new MutableInterval((ReadablePeriod) null, (ReadableInstant) null); [EOL]     assertEquals(TEST_TIME_NOW, test.getStartMillis()); [EOL]     assertEquals(TEST_TIME_NOW, test.getEndMillis()); [EOL] }
public void testConstructor_RP_RI5() throws Throwable { [EOL]     MutableInterval test = new MutableInterval((ReadablePeriod) null, (ReadableInstant) null); [EOL]     assertEquals(TEST_TIME_NOW, test.getStartMillis()); [EOL]     assertEquals(TEST_TIME_NOW, test.getEndMillis()); [EOL] }
public void testConstructor_RP_RI5() throws Throwable { [EOL]     MutableInterval test = new MutableInterval((ReadablePeriod) null, (ReadableInstant) null); [EOL]     assertEquals(TEST_TIME_NOW, test.getStartMillis()); [EOL]     assertEquals(TEST_TIME_NOW, test.getEndMillis()); [EOL] }
public void testIsBefore_RInterval_null() { [EOL]     DateTimeUtils.setCurrentMillisFixed(2); [EOL]     assertEquals(false, interval37.isBefore((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(false, interval37.isBefore((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(4); [EOL]     assertEquals(false, interval37.isBefore((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(6); [EOL]     assertEquals(false, interval37.isBefore((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(7); [EOL]     assertEquals(true, interval37.isBefore((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(8); [EOL]     assertEquals(true, interval37.isBefore((ReadableInterval) null)); [EOL] }
public void testIsBefore_RInterval_null() { [EOL]     DateTimeUtils.setCurrentMillisFixed(2); [EOL]     assertEquals(false, interval37.isBefore((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(false, interval37.isBefore((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(4); [EOL]     assertEquals(false, interval37.isBefore((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(6); [EOL]     assertEquals(false, interval37.isBefore((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(7); [EOL]     assertEquals(true, interval37.isBefore((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(8); [EOL]     assertEquals(true, interval37.isBefore((ReadableInterval) null)); [EOL] }
public void testIsBefore_RInterval_null() { [EOL]     DateTimeUtils.setCurrentMillisFixed(2); [EOL]     assertEquals(false, interval37.isBefore((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(false, interval37.isBefore((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(4); [EOL]     assertEquals(false, interval37.isBefore((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(6); [EOL]     assertEquals(false, interval37.isBefore((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(7); [EOL]     assertEquals(true, interval37.isBefore((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(8); [EOL]     assertEquals(true, interval37.isBefore((ReadableInterval) null)); [EOL] }
public void testConstructor_RD_RI_PeriodType1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     Duration dur = new Interval(dt1, dt2).toDuration(); [EOL]     Period test = new Period(dur, dt2, PeriodType.yearDayTime()); [EOL]     assertEquals(PeriodType.yearDayTime(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(31, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testConstructor_RD_RI_PeriodType1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     Duration dur = new Interval(dt1, dt2).toDuration(); [EOL]     Period test = new Period(dur, dt2, PeriodType.yearDayTime()); [EOL]     assertEquals(PeriodType.yearDayTime(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(31, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testConstructor_RD_RI_PeriodType1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     Duration dur = new Interval(dt1, dt2).toDuration(); [EOL]     Period test = new Period(dur, dt2, PeriodType.yearDayTime()); [EOL]     assertEquals(PeriodType.yearDayTime(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(31, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testToPeriod() { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 7, 8, 9, 10, COPTIC_PARIS); [EOL]     DateTime dt2 = new DateTime(2005, 8, 13, 12, 14, 16, 18, COPTIC_PARIS); [EOL]     Interval base = new Interval(dt1, dt2); [EOL]     Period test = base.toPeriod(); [EOL]     Period expected = new Period(dt1, dt2, PeriodType.standard()); [EOL]     assertEquals(expected, test); [EOL] }
public void testToInterval() { [EOL]     YearMonth base = new YearMonth(2005, 6, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(); [EOL]     check(base, 2005, 6); [EOL]     DateTime start = new DateTime(2005, 6, 1, 0, 0, COPTIC_LONDON); [EOL]     DateTime end = new DateTime(2005, 7, 1, 0, 0, COPTIC_LONDON); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] }
public void testEqualsHashCodeStrict() { [EOL]     Interval test1 = new Interval(new DateTime(TEST_TIME1, LenientChronology.getInstance(COPTIC_PARIS)), new DateTime(TEST_TIME2, LenientChronology.getInstance(COPTIC_PARIS))); [EOL]     Interval test2 = new Interval(new DateTime(TEST_TIME1, LenientChronology.getInstance(COPTIC_PARIS)), new DateTime(TEST_TIME2, LenientChronology.getInstance(COPTIC_PARIS))); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL] }
public void testGetPeriodType() { [EOL]     Period test = new Period(0L); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL] }
public void testGetPeriodType() { [EOL]     Period test = new Period(0L); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL] }
public void testConstructor_long_PeriodType_Chronology4() throws Throwable { [EOL]     long length = 4 * DateTimeConstants.MILLIS_PER_DAY + 5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE + 7 * DateTimeConstants.MILLIS_PER_SECOND + 8; [EOL]     Period test = new Period(length, (PeriodType) null, (Chronology) null); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals((4 * 24) + 5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] }
public void testIsSupported() { [EOL]     Period test = new Period(1, 0, 0, 4, 5, 6, 7, 8, PeriodType.yearDayTime()); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.years())); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.months())); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.weeks())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.days())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.hours())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.minutes())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.seconds())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.millis())); [EOL] }
public void testIsSupported() { [EOL]     Period test = new Period(1, 0, 0, 4, 5, 6, 7, 8, PeriodType.yearDayTime()); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.years())); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.months())); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.weeks())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.days())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.hours())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.minutes())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.seconds())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.millis())); [EOL] }
public void testSetPeriod_8ints2() { [EOL]     MutablePeriod test = new MutablePeriod(100L, PeriodType.millis()); [EOL]     try { [EOL]         test.setPeriod(11, 12, 13, 14, 15, 16, 17, 18); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(100, test.getMillis()); [EOL] }
public void testSetPeriod_8ints2() { [EOL]     MutablePeriod test = new MutablePeriod(100L, PeriodType.millis()); [EOL]     try { [EOL]         test.setPeriod(11, 12, 13, 14, 15, 16, 17, 18); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(100, test.getMillis()); [EOL] }
public void testSetPeriod_8ints2() { [EOL]     MutablePeriod test = new MutablePeriod(100L, PeriodType.millis()); [EOL]     try { [EOL]         test.setPeriod(11, 12, 13, 14, 15, 16, 17, 18); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(100, test.getMillis()); [EOL] }
public void testConstructor_long_PeriodType_Chronology2() throws Throwable { [EOL]     long length = 4 * DateTimeConstants.MILLIS_PER_DAY + 5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE + 7 * DateTimeConstants.MILLIS_PER_SECOND + 8; [EOL]     MutablePeriod test = new MutablePeriod(length, PeriodType.standard(), ISOChronology.getInstanceUTC()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(4, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] }
public void testConstructor_long_PeriodType_Chronology2() throws Throwable { [EOL]     long length = 4 * DateTimeConstants.MILLIS_PER_DAY + 5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE + 7 * DateTimeConstants.MILLIS_PER_SECOND + 8; [EOL]     MutablePeriod test = new MutablePeriod(length, PeriodType.standard(), ISOChronology.getInstanceUTC()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(4, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] }
public void testConstructor_long_PeriodType_Chronology2() throws Throwable { [EOL]     long length = 4 * DateTimeConstants.MILLIS_PER_DAY + 5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE + 7 * DateTimeConstants.MILLIS_PER_SECOND + 8; [EOL]     MutablePeriod test = new MutablePeriod(length, PeriodType.standard(), ISOChronology.getInstanceUTC()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(4, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] }
public void testConstructor_long_long_Chronology1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance()); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, CopticChronology.getInstance()); [EOL]     MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), CopticChronology.getInstance()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testConstructor_long_long_Chronology1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance()); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, CopticChronology.getInstance()); [EOL]     MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), CopticChronology.getInstance()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testConstructor_RI_RI3() throws Throwable { [EOL]     DateTime dt1 = null; [EOL]     DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1); [EOL]     MutablePeriod test = new MutablePeriod(dt1, dt2); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(3, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(1, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testConstructor_RI_RI3() throws Throwable { [EOL]     DateTime dt1 = null; [EOL]     DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1); [EOL]     MutablePeriod test = new MutablePeriod(dt1, dt2); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(3, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(1, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testConstructor_RI_RI3() throws Throwable { [EOL]     DateTime dt1 = null; [EOL]     DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1); [EOL]     MutablePeriod test = new MutablePeriod(dt1, dt2); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(3, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(1, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testConstructor_RI_RI3() throws Throwable { [EOL]     DateTime dt1 = null; [EOL]     DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1); [EOL]     MutablePeriod test = new MutablePeriod(dt1, dt2); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(3, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(1, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testConstructor_RI_RD_PeriodType1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     Duration dur = new Interval(dt1, dt2).toDuration(); [EOL]     MutablePeriod test = new MutablePeriod(dt1, dur, PeriodType.yearDayTime()); [EOL]     assertEquals(PeriodType.yearDayTime(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(31, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testConstructor_RI_RD_PeriodType1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     Duration dur = new Interval(dt1, dt2).toDuration(); [EOL]     MutablePeriod test = new MutablePeriod(dt1, dur, PeriodType.yearDayTime()); [EOL]     assertEquals(PeriodType.yearDayTime(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(31, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testToMutablePeriod() { [EOL]     Period test = new Period(123L); [EOL]     MutablePeriod result = test.toMutablePeriod(); [EOL]     assertEquals(test, result); [EOL] }
public void testConstructor_Object_PeriodType4() throws Throwable { [EOL]     MutablePeriod test = new MutablePeriod(new Period(0, 0, 0, 0, 1, 2, 3, 4, PeriodType.dayTime()), (PeriodType) null); [EOL]     assertEquals(PeriodType.dayTime(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(2, test.getMinutes()); [EOL]     assertEquals(3, test.getSeconds()); [EOL]     assertEquals(4, test.getMillis()); [EOL] }
public void testConstructor_Object_PeriodType4() throws Throwable { [EOL]     MutablePeriod test = new MutablePeriod(new Period(0, 0, 0, 0, 1, 2, 3, 4, PeriodType.dayTime()), (PeriodType) null); [EOL]     assertEquals(PeriodType.dayTime(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(2, test.getMinutes()); [EOL]     assertEquals(3, test.getSeconds()); [EOL]     assertEquals(4, test.getMillis()); [EOL] }
public void testToMutablePeriod() { [EOL]     Period test = new Period(123L); [EOL]     MutablePeriod result = test.toMutablePeriod(); [EOL]     assertEquals(test, result); [EOL] }
public void testSetPeriod_8ints2() { [EOL]     MutablePeriod test = new MutablePeriod(100L, PeriodType.millis()); [EOL]     try { [EOL]         test.setPeriod(11, 12, 13, 14, 15, 16, 17, 18); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(100, test.getMillis()); [EOL] }
public void testSetPeriod_RI_RI3() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19); [EOL]     test.setPeriod(dt1, dt1); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] }
public void testSetPeriod_RI_RI3() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19); [EOL]     test.setPeriod(dt1, dt1); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] }
public void testAddDays() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addDays(10); [EOL]     assertEquals(14, test.getDays()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addDays(-10); [EOL]     assertEquals(-6, test.getDays()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addDays(0); [EOL]     assertEquals(4, test.getDays()); [EOL] }
public void testAddDays() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addDays(10); [EOL]     assertEquals(14, test.getDays()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addDays(-10); [EOL]     assertEquals(-6, test.getDays()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addDays(0); [EOL]     assertEquals(4, test.getDays()); [EOL] }
public void testAddDays() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addDays(10); [EOL]     assertEquals(14, test.getDays()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addDays(-10); [EOL]     assertEquals(-6, test.getDays()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addDays(0); [EOL]     assertEquals(4, test.getDays()); [EOL] }
public void testAddMinutes() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addMinutes(10); [EOL]     assertEquals(16, test.getMinutes()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addMinutes(-10); [EOL]     assertEquals(-4, test.getMinutes()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addMinutes(0); [EOL]     assertEquals(6, test.getMinutes()); [EOL] }
public void testAddMinutes() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addMinutes(10); [EOL]     assertEquals(16, test.getMinutes()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addMinutes(-10); [EOL]     assertEquals(-4, test.getMinutes()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addMinutes(0); [EOL]     assertEquals(6, test.getMinutes()); [EOL] }
public void testAddMinutes() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addMinutes(10); [EOL]     assertEquals(16, test.getMinutes()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addMinutes(-10); [EOL]     assertEquals(-4, test.getMinutes()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addMinutes(0); [EOL]     assertEquals(6, test.getMinutes()); [EOL] }
public void test_convertText() { [EOL]     BaseDateTimeField field = new MockPreciseDurationDateTimeField(); [EOL]     assertEquals(0, field.convertText("0", null)); [EOL]     assertEquals(29, field.convertText("29", null)); [EOL]     try { [EOL]         field.convertText("2A", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         field.convertText(null, null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void test_convertText() { [EOL]     BaseDateTimeField field = new MockPreciseDurationDateTimeField(); [EOL]     assertEquals(0, field.convertText("0", null)); [EOL]     assertEquals(29, field.convertText("29", null)); [EOL]     try { [EOL]         field.convertText("2A", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         field.convertText(null, null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void test_convertText() { [EOL]     BaseDateTimeField field = new MockPreciseDurationDateTimeField(); [EOL]     assertEquals(0, field.convertText("0", null)); [EOL]     assertEquals(29, field.convertText("29", null)); [EOL]     try { [EOL]         field.convertText("2A", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         field.convertText(null, null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testConstructor_long_long_Chronology1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance()); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, CopticChronology.getInstance()); [EOL]     MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), CopticChronology.getInstance()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testConstructor_long_long_Chronology1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance()); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, CopticChronology.getInstance()); [EOL]     MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), CopticChronology.getInstance()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testConstructor_long_long_Chronology1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance()); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, CopticChronology.getInstance()); [EOL]     MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), CopticChronology.getInstance()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void test_parseWrongOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime expected = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forOffsetHours(7)); [EOL]     assertEquals(expected.withZone(TOKYO), f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected, f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +07:00")); [EOL] }
public void test_parseWrongOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime expected = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forOffsetHours(7)); [EOL]     assertEquals(expected.withZone(TOKYO), f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected, f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +07:00")); [EOL] }
public void test_parseWrongOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime expected = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forOffsetHours(7)); [EOL]     assertEquals(expected.withZone(TOKYO), f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected, f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +07:00")); [EOL] }
public void test_time() { [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL]     DateTimeFormatter parser = ISODateTimeFormat.time(); [EOL]     assertParse(parser, "10:20:30.400999999Z", new DateTime(1970, 1, 1, 10, 20, 30, 400)); [EOL]     assertParse(parser, "10:20:30.400Z", new DateTime(1970, 1, 1, 10, 20, 30, 400)); [EOL]     assertParse(parser, "10:20:30.40Z", new DateTime(1970, 1, 1, 10, 20, 30, 400)); [EOL]     assertParse(parser, "10:20:30.4Z", new DateTime(1970, 1, 1, 10, 20, 30, 400)); [EOL]     assertParse(parser, "5:6:7.8Z", new DateTime(1970, 1, 1, 5, 6, 7, 800)); [EOL]     assertParse(parser, false, "10:20.400Z"); [EOL]     assertParse(parser, false, "10:2.400Z"); [EOL]     assertParse(parser, false, "10.400Z"); [EOL]     assertParse(parser, false, "1.400Z"); [EOL] }
public void test_parseWrongOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime expected = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forOffsetHours(7)); [EOL]     assertEquals(expected.withZone(TOKYO), f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected, f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +07:00")); [EOL] }
public void test_parseWrongOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime expected = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forOffsetHours(7)); [EOL]     assertEquals(expected.withZone(TOKYO), f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected, f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +07:00")); [EOL] }
public void test_parseWrongOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime expected = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forOffsetHours(7)); [EOL]     assertEquals(expected.withZone(TOKYO), f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected, f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +07:00")); [EOL] }
public void test_parseWrongOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime expected = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forOffsetHours(7)); [EOL]     assertEquals(expected.withZone(TOKYO), f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected, f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +07:00")); [EOL] }
public void test_time() { [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL]     DateTimeFormatter parser = ISODateTimeFormat.time(); [EOL]     assertParse(parser, "10:20:30.400999999Z", new DateTime(1970, 1, 1, 10, 20, 30, 400)); [EOL]     assertParse(parser, "10:20:30.400Z", new DateTime(1970, 1, 1, 10, 20, 30, 400)); [EOL]     assertParse(parser, "10:20:30.40Z", new DateTime(1970, 1, 1, 10, 20, 30, 400)); [EOL]     assertParse(parser, "10:20:30.4Z", new DateTime(1970, 1, 1, 10, 20, 30, 400)); [EOL]     assertParse(parser, "5:6:7.8Z", new DateTime(1970, 1, 1, 5, 6, 7, 800)); [EOL]     assertParse(parser, false, "10:20.400Z"); [EOL]     assertParse(parser, false, "10:2.400Z"); [EOL]     assertParse(parser, false, "10.400Z"); [EOL]     assertParse(parser, false, "1.400Z"); [EOL] }
public void test_parseWrongOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime expected = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forOffsetHours(7)); [EOL]     assertEquals(expected.withZone(TOKYO), f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected, f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +07:00")); [EOL] }
public void test_parseWrongOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime expected = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forOffsetHours(7)); [EOL]     assertEquals(expected.withZone(TOKYO), f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected, f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +07:00")); [EOL] }
public void test_parseWrongOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime expected = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forOffsetHours(7)); [EOL]     assertEquals(expected.withZone(TOKYO), f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected, f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +07:00")); [EOL] }
public void test_parseWrongOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime expected = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forOffsetHours(7)); [EOL]     assertEquals(expected.withZone(TOKYO), f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected, f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +07:00")); [EOL] }
public void test_parseWrongOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime expected = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forOffsetHours(7)); [EOL]     assertEquals(expected.withZone(TOKYO), f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected, f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +07:00")); [EOL] }
public void testConstructor_ObjectStringEx2() throws Throwable { [EOL]     try { [EOL]         new YearMonthDay("T10:20:30.040+14:00"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testConstructor_ObjectStringEx2() throws Throwable { [EOL]     try { [EOL]         new YearMonthDay("T10:20:30.040+14:00"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testConstructor_ObjectStringEx2() throws Throwable { [EOL]     try { [EOL]         new YearMonthDay("T10:20:30.040+14:00"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testConstructor_ObjectStringEx2() throws Throwable { [EOL]     try { [EOL]         new YearMonthDay("T10:20:30.040+14:00"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void test_parseWrongOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime expected = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forOffsetHours(7)); [EOL]     assertEquals(expected.withZone(TOKYO), f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected, f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +07:00")); [EOL] }
public void test_parseWrongOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime expected = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forOffsetHours(7)); [EOL]     assertEquals(expected.withZone(TOKYO), f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected, f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +07:00")); [EOL] }
public void test_parseWrongOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime expected = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forOffsetHours(7)); [EOL]     assertEquals(expected.withZone(TOKYO), f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected, f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +07:00")); [EOL] }
public void testConstructor_ObjectStringEx2() throws Throwable { [EOL]     try { [EOL]         new YearMonthDay("T10:20:30.040+14:00"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testConstructor_ObjectStringEx2() throws Throwable { [EOL]     try { [EOL]         new YearMonthDay("T10:20:30.040+14:00"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testConstructor_ObjectStringEx2() throws Throwable { [EOL]     try { [EOL]         new YearMonthDay("T10:20:30.040+14:00"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testConstructor_ObjectStringEx2() throws Throwable { [EOL]     try { [EOL]         new YearMonthDay("T10:20:30.040+14:00"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void test_parseWrongOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime expected = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forOffsetHours(7)); [EOL]     assertEquals(expected.withZone(TOKYO), f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected, f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +07:00")); [EOL] }
public void test_parseWrongOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime expected = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forOffsetHours(7)); [EOL]     assertEquals(expected.withZone(TOKYO), f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected, f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +07:00")); [EOL] }
public void test_parseWrongOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime expected = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forOffsetHours(7)); [EOL]     assertEquals(expected.withZone(TOKYO), f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected, f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +07:00")); [EOL] }
public void test_parseWrongOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime expected = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forOffsetHours(7)); [EOL]     assertEquals(expected.withZone(TOKYO), f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected, f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +07:00")); [EOL] }
public void test_parseWrongOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime expected = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forOffsetHours(7)); [EOL]     assertEquals(expected.withZone(TOKYO), f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected, f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +07:00")); [EOL] }
public void test_parseWrongOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime expected = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forOffsetHours(7)); [EOL]     assertEquals(expected.withZone(TOKYO), f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected, f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +07:00")); [EOL] }
public void test_parseWrongOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime expected = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forOffsetHours(7)); [EOL]     assertEquals(expected.withZone(TOKYO), f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected, f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +07:00")); [EOL] }
public void test_parseWrongOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime expected = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forOffsetHours(7)); [EOL]     assertEquals(expected.withZone(TOKYO), f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected, f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +07:00")); [EOL] }
public void test_parseWrongOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime expected = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forOffsetHours(7)); [EOL]     assertEquals(expected.withZone(TOKYO), f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected, f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +07:00")); [EOL] }
public void test_parseWrongOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime expected = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forOffsetHours(7)); [EOL]     assertEquals(expected.withZone(TOKYO), f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected, f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +07:00")); [EOL] }
public void test_parseWrongOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime expected = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forOffsetHours(7)); [EOL]     assertEquals(expected.withZone(TOKYO), f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected, f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +07:00")); [EOL] }
public void test_parseWrongOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime expected = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forOffsetHours(7)); [EOL]     assertEquals(expected.withZone(TOKYO), f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected, f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +07:00")); [EOL] }
public void test_parseWrongOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime expected = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forOffsetHours(7)); [EOL]     assertEquals(expected.withZone(TOKYO), f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected, f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +07:00")); [EOL] }
public void test_parseWrongOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime expected = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forOffsetHours(7)); [EOL]     assertEquals(expected.withZone(TOKYO), f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected, f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +07:00")); [EOL] }
public void test_parseWrongOffset() { [EOL]     DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2); [EOL]     DateTimeFormatter f = bld.toFormatter(); [EOL]     DateTime expected = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forOffsetHours(7)); [EOL]     assertEquals(expected.withZone(TOKYO), f.withZone(TOKYO).parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected, f.withOffsetParsed().parseDateTime("2007-03-04 12:30 +07:00")); [EOL]     assertEquals(expected.withZone(DateTimeZone.getDefault()), f.parseDateTime("2007-03-04 12:30 +07:00")); [EOL] }
public void test_roundHalfCeiling_long() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals(0L, field.roundHalfCeiling(0L)); [EOL]     assertEquals(0L, field.roundHalfCeiling(499L)); [EOL]     assertEquals(1000L, field.roundHalfCeiling(500L)); [EOL]     assertEquals(1000L, field.roundHalfCeiling(501L)); [EOL]     assertEquals(1000L, field.roundHalfCeiling(1000L)); [EOL] }
public void test_getOffset() { [EOL]     OffsetDateTimeField field = new OffsetDateTimeField(ISOChronology.getInstance().secondOfMinute(), 5); [EOL]     assertEquals(5, field.getOffset()); [EOL] }
public void testDurationFields() { [EOL]     final EthiopicChronology ethiopic = EthiopicChronology.getInstance(); [EOL]     assertEquals("eras", ethiopic.eras().getName()); [EOL]     assertEquals("centuries", ethiopic.centuries().getName()); [EOL]     assertEquals("years", ethiopic.years().getName()); [EOL]     assertEquals("weekyears", ethiopic.weekyears().getName()); [EOL]     assertEquals("months", ethiopic.months().getName()); [EOL]     assertEquals("weeks", ethiopic.weeks().getName()); [EOL]     assertEquals("days", ethiopic.days().getName()); [EOL]     assertEquals("halfdays", ethiopic.halfdays().getName()); [EOL]     assertEquals("hours", ethiopic.hours().getName()); [EOL]     assertEquals("minutes", ethiopic.minutes().getName()); [EOL]     assertEquals("seconds", ethiopic.seconds().getName()); [EOL]     assertEquals("millis", ethiopic.millis().getName()); [EOL]     assertEquals(false, ethiopic.eras().isSupported()); [EOL]     assertEquals(true, ethiopic.centuries().isSupported()); [EOL]     assertEquals(true, ethiopic.years().isSupported()); [EOL]     assertEquals(true, ethiopic.weekyears().isSupported()); [EOL]     assertEquals(true, ethiopic.months().isSupported()); [EOL]     assertEquals(true, ethiopic.weeks().isSupported()); [EOL]     assertEquals(true, ethiopic.days().isSupported()); [EOL]     assertEquals(true, ethiopic.halfdays().isSupported()); [EOL]     assertEquals(true, ethiopic.hours().isSupported()); [EOL]     assertEquals(true, ethiopic.minutes().isSupported()); [EOL]     assertEquals(true, ethiopic.seconds().isSupported()); [EOL]     assertEquals(true, ethiopic.millis().isSupported()); [EOL]     assertEquals(false, ethiopic.centuries().isPrecise()); [EOL]     assertEquals(false, ethiopic.years().isPrecise()); [EOL]     assertEquals(false, ethiopic.weekyears().isPrecise()); [EOL]     assertEquals(false, ethiopic.months().isPrecise()); [EOL]     assertEquals(false, ethiopic.weeks().isPrecise()); [EOL]     assertEquals(false, ethiopic.days().isPrecise()); [EOL]     assertEquals(false, ethiopic.halfdays().isPrecise()); [EOL]     assertEquals(true, ethiopic.hours().isPrecise()); [EOL]     assertEquals(true, ethiopic.minutes().isPrecise()); [EOL]     assertEquals(true, ethiopic.seconds().isPrecise()); [EOL]     assertEquals(true, ethiopic.millis().isPrecise()); [EOL]     final EthiopicChronology ethiopicUTC = EthiopicChronology.getInstanceUTC(); [EOL]     assertEquals(false, ethiopicUTC.centuries().isPrecise()); [EOL]     assertEquals(false, ethiopicUTC.years().isPrecise()); [EOL]     assertEquals(false, ethiopicUTC.weekyears().isPrecise()); [EOL]     assertEquals(false, ethiopicUTC.months().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.weeks().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.days().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.halfdays().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.hours().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.minutes().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.seconds().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.millis().isPrecise()); [EOL]     final DateTimeZone gmt = DateTimeZone.forID("Etc/GMT"); [EOL]     final EthiopicChronology ethiopicGMT = EthiopicChronology.getInstance(gmt); [EOL]     assertEquals(false, ethiopicGMT.centuries().isPrecise()); [EOL]     assertEquals(false, ethiopicGMT.years().isPrecise()); [EOL]     assertEquals(false, ethiopicGMT.weekyears().isPrecise()); [EOL]     assertEquals(false, ethiopicGMT.months().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.weeks().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.days().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.halfdays().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.hours().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.minutes().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.seconds().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.millis().isPrecise()); [EOL] }
public void testConstructor_long_long_Chronology1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance()); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, CopticChronology.getInstance()); [EOL]     MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), CopticChronology.getInstance()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testConstructor_long_long_Chronology1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance()); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, CopticChronology.getInstance()); [EOL]     MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), CopticChronology.getInstance()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testConstructor_long_long_Chronology1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance()); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, CopticChronology.getInstance()); [EOL]     MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), CopticChronology.getInstance()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testConstructor_long_long_Chronology1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance()); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, CopticChronology.getInstance()); [EOL]     MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), CopticChronology.getInstance()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testConstructor_long_long_Chronology1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance()); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, CopticChronology.getInstance()); [EOL]     MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), CopticChronology.getInstance()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void testPropertySetWeekOfWeekyear() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 7, 0, 0, 0, 0); [EOL]     test.weekOfWeekyear().set(4); [EOL]     assertEquals("2004-01-19T00:00:00.000Z", test.toString()); [EOL] }
public void testBug2182444_usCentral() { [EOL]     Chronology chronUSCentral = GregorianChronology.getInstance(DateTimeZone.forID("US/Central")); [EOL]     Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC); [EOL]     DateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0, 0, chronUTC); [EOL]     DateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0, 0, chronUTC); [EOL]     assertTrue("Should be standard time", chronUSCentral.getZone().isStandardOffset(usCentralStandardInUTC.getMillis())); [EOL]     assertFalse("Should be daylight time", chronUSCentral.getZone().isStandardOffset(usCentralDaylightInUTC.getMillis())); [EOL]     DateTime usCentralStandardInUSCentral = usCentralStandardInUTC.toDateTime(chronUSCentral); [EOL]     DateTime usCentralDaylightInUSCentral = usCentralDaylightInUTC.toDateTime(chronUSCentral); [EOL]     assertEquals(1, usCentralStandardInUSCentral.getHourOfDay()); [EOL]     assertEquals(usCentralStandardInUSCentral.getHourOfDay(), usCentralDaylightInUSCentral.getHourOfDay()); [EOL]     assertTrue(usCentralStandardInUSCentral.getMillis() != usCentralDaylightInUSCentral.getMillis()); [EOL]     assertEquals(usCentralStandardInUSCentral, usCentralStandardInUSCentral.withHourOfDay(1)); [EOL]     assertEquals(usCentralStandardInUSCentral.getMillis() + 3, usCentralStandardInUSCentral.withMillisOfSecond(3).getMillis()); [EOL]     assertEquals(usCentralDaylightInUSCentral, usCentralDaylightInUSCentral.withHourOfDay(1)); [EOL]     assertEquals(usCentralDaylightInUSCentral.getMillis() + 3, usCentralDaylightInUSCentral.withMillisOfSecond(3).getMillis()); [EOL] }
public void testPropertySetWeekOfWeekyear() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 7, 0, 0, 0, 0); [EOL]     test.weekOfWeekyear().set(4); [EOL]     assertEquals("2004-01-19T00:00:00.000Z", test.toString()); [EOL] }
public void testMinusMinutes_int() { [EOL]     LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON); [EOL]     LocalTime result = test.minusMinutes(1); [EOL]     LocalTime expected = new LocalTime(1, 1, 3, 4, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusMinutes(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusMinutes_int() { [EOL]     LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON); [EOL]     LocalTime result = test.minusMinutes(1); [EOL]     LocalTime expected = new LocalTime(1, 1, 3, 4, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusMinutes(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusMinutes_int() { [EOL]     LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON); [EOL]     LocalTime result = test.minusMinutes(1); [EOL]     LocalTime expected = new LocalTime(1, 1, 3, 4, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusMinutes(0); [EOL]     assertSame(test, result); [EOL] }
public void testWith1() { [EOL]     Partial test = createHourMinPartial(); [EOL]     Partial result = test.with(DateTimeFieldType.hourOfDay(), 15); [EOL]     check(test, 10, 20); [EOL]     check(result, 15, 20); [EOL] }
public void testWith1() { [EOL]     Partial test = createHourMinPartial(); [EOL]     Partial result = test.with(DateTimeFieldType.hourOfDay(), 15); [EOL]     check(test, 10, 20); [EOL]     check(result, 15, 20); [EOL] }
public void testToStandardHours() { [EOL]     Days test = Days.days(2); [EOL]     Hours expected = Hours.hours(2 * 24); [EOL]     assertEquals(expected, test.toStandardHours()); [EOL]     try { [EOL]         Days.MAX_VALUE.toStandardHours(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testToStandardHours() { [EOL]     Days test = Days.days(2); [EOL]     Hours expected = Hours.hours(2 * 24); [EOL]     assertEquals(expected, test.toStandardHours()); [EOL]     try { [EOL]         Days.MAX_VALUE.toStandardHours(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testToStandardHours() { [EOL]     Days test = Days.days(2); [EOL]     Hours expected = Hours.hours(2 * 24); [EOL]     assertEquals(expected, test.toStandardHours()); [EOL]     try { [EOL]         Days.MAX_VALUE.toStandardHours(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testConstants() { [EOL]     assertEquals(0, Days.ZERO.getDays()); [EOL]     assertEquals(1, Days.ONE.getDays()); [EOL]     assertEquals(2, Days.TWO.getDays()); [EOL]     assertEquals(3, Days.THREE.getDays()); [EOL]     assertEquals(4, Days.FOUR.getDays()); [EOL]     assertEquals(5, Days.FIVE.getDays()); [EOL]     assertEquals(6, Days.SIX.getDays()); [EOL]     assertEquals(7, Days.SEVEN.getDays()); [EOL]     assertEquals(Integer.MAX_VALUE, Days.MAX_VALUE.getDays()); [EOL]     assertEquals(Integer.MIN_VALUE, Days.MIN_VALUE.getDays()); [EOL] }
public void testPlus_Days() { [EOL]     Days test2 = Days.days(2); [EOL]     Days test3 = Days.days(3); [EOL]     Days result = test2.plus(test3); [EOL]     assertEquals(2, test2.getDays()); [EOL]     assertEquals(3, test3.getDays()); [EOL]     assertEquals(5, result.getDays()); [EOL]     assertEquals(1, Days.ONE.plus(Days.ZERO).getDays()); [EOL]     assertEquals(1, Days.ONE.plus((Days) null).getDays()); [EOL]     try { [EOL]         Days.MAX_VALUE.plus(Days.ONE); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testPlus_Days() { [EOL]     Days test2 = Days.days(2); [EOL]     Days test3 = Days.days(3); [EOL]     Days result = test2.plus(test3); [EOL]     assertEquals(2, test2.getDays()); [EOL]     assertEquals(3, test3.getDays()); [EOL]     assertEquals(5, result.getDays()); [EOL]     assertEquals(1, Days.ONE.plus(Days.ZERO).getDays()); [EOL]     assertEquals(1, Days.ONE.plus((Days) null).getDays()); [EOL]     try { [EOL]         Days.MAX_VALUE.plus(Days.ONE); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testFormat_yearOfEra() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("Y").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "2004", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals(dt.toString(), "2004", f.print(dt)); [EOL]     dt = dt.withZone(TOKYO); [EOL]     assertEquals(dt.toString(), "2004", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "124", f.print(dt)); [EOL] }
public void testFormat_yearOfEra() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("Y").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "2004", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals(dt.toString(), "2004", f.print(dt)); [EOL]     dt = dt.withZone(TOKYO); [EOL]     assertEquals(dt.toString(), "2004", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "124", f.print(dt)); [EOL] }
public void testFormat_yearOfEra() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("Y").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "2004", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals(dt.toString(), "2004", f.print(dt)); [EOL]     dt = dt.withZone(TOKYO); [EOL]     assertEquals(dt.toString(), "2004", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "124", f.print(dt)); [EOL] }
public void testConstructor() throws Throwable { [EOL]     MonthDay test = new MonthDay(); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(test, MonthDay.now()); [EOL] }
public void testConstructor() throws Throwable { [EOL]     MonthDay test = new MonthDay(); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(test, MonthDay.now()); [EOL] }
public void testConstructor() throws Throwable { [EOL]     MonthDay test = new MonthDay(); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(test, MonthDay.now()); [EOL] }
public void testConstructor() throws Throwable { [EOL]     MonthDay test = new MonthDay(); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(test, MonthDay.now()); [EOL] }
public void testConstructor() throws Throwable { [EOL]     MonthDay test = new MonthDay(); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(test, MonthDay.now()); [EOL] }
public void testConstructor() throws Throwable { [EOL]     MonthDay test = new MonthDay(); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(test, MonthDay.now()); [EOL] }
public void testConstructor() throws Throwable { [EOL]     MonthDay test = new MonthDay(); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(test, MonthDay.now()); [EOL] }
public void testConstructor() throws Throwable { [EOL]     MonthDay test = new MonthDay(); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(test, MonthDay.now()); [EOL] }
public void testConstructor() throws Throwable { [EOL]     MonthDay test = new MonthDay(); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(test, MonthDay.now()); [EOL] }
public void testConstructor() throws Throwable { [EOL]     MonthDay test = new MonthDay(); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(test, MonthDay.now()); [EOL] }
public void testConstructor() throws Throwable { [EOL]     MonthDay test = new MonthDay(); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(test, MonthDay.now()); [EOL] }
public void testIsSupported() { [EOL]     MonthDay test = new MonthDay(COPTIC_PARIS); [EOL]     assertEquals(false, test.isSupported(DateTimeFieldType.year())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(false, test.isSupported(DateTimeFieldType.hourOfDay())); [EOL] }
public void testIsSupported() { [EOL]     MonthDay test = new MonthDay(COPTIC_PARIS); [EOL]     assertEquals(false, test.isSupported(DateTimeFieldType.year())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(false, test.isSupported(DateTimeFieldType.hourOfDay())); [EOL] }
public void testIsSupported() { [EOL]     MonthDay test = new MonthDay(COPTIC_PARIS); [EOL]     assertEquals(false, test.isSupported(DateTimeFieldType.year())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(false, test.isSupported(DateTimeFieldType.hourOfDay())); [EOL] }
public void testIsSupported() { [EOL]     MonthDay test = new MonthDay(COPTIC_PARIS); [EOL]     assertEquals(false, test.isSupported(DateTimeFieldType.year())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(false, test.isSupported(DateTimeFieldType.hourOfDay())); [EOL] }
public void testIsSupported() { [EOL]     MonthDay test = new MonthDay(COPTIC_PARIS); [EOL]     assertEquals(false, test.isSupported(DateTimeFieldType.year())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(false, test.isSupported(DateTimeFieldType.hourOfDay())); [EOL] }
public void testIsSupported() { [EOL]     MonthDay test = new MonthDay(COPTIC_PARIS); [EOL]     assertEquals(false, test.isSupported(DateTimeFieldType.year())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(false, test.isSupported(DateTimeFieldType.hourOfDay())); [EOL] }
public void testIsSupported() { [EOL]     MonthDay test = new MonthDay(COPTIC_PARIS); [EOL]     assertEquals(false, test.isSupported(DateTimeFieldType.year())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(false, test.isSupported(DateTimeFieldType.hourOfDay())); [EOL] }
public void testIsSupported() { [EOL]     MonthDay test = new MonthDay(COPTIC_PARIS); [EOL]     assertEquals(false, test.isSupported(DateTimeFieldType.year())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(false, test.isSupported(DateTimeFieldType.hourOfDay())); [EOL] }
public void testIsSupported() { [EOL]     MonthDay test = new MonthDay(COPTIC_PARIS); [EOL]     assertEquals(false, test.isSupported(DateTimeFieldType.year())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(false, test.isSupported(DateTimeFieldType.hourOfDay())); [EOL] }
public void testPropertyCompareToMonthOfYear() { [EOL]     MonthDay test1 = new MonthDay(TEST_TIME1); [EOL]     MonthDay test2 = new MonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonthOfYear() { [EOL]     MonthDay test1 = new MonthDay(TEST_TIME1); [EOL]     MonthDay test2 = new MonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonthOfYear() { [EOL]     MonthDay test1 = new MonthDay(TEST_TIME1); [EOL]     MonthDay test2 = new MonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonthOfYear() { [EOL]     MonthDay test1 = new MonthDay(TEST_TIME1); [EOL]     MonthDay test2 = new MonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonthOfYear() { [EOL]     MonthDay test1 = new MonthDay(TEST_TIME1); [EOL]     MonthDay test2 = new MonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonthOfYear() { [EOL]     MonthDay test1 = new MonthDay(TEST_TIME1); [EOL]     MonthDay test2 = new MonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonthOfYear() { [EOL]     MonthDay test1 = new MonthDay(TEST_TIME1); [EOL]     MonthDay test2 = new MonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonthOfYear() { [EOL]     MonthDay test1 = new MonthDay(TEST_TIME1); [EOL]     MonthDay test2 = new MonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonthOfYear() { [EOL]     MonthDay test1 = new MonthDay(TEST_TIME1); [EOL]     MonthDay test2 = new MonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonthOfYear() { [EOL]     MonthDay test1 = new MonthDay(TEST_TIME1); [EOL]     MonthDay test2 = new MonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonthOfYear() { [EOL]     MonthDay test1 = new MonthDay(TEST_TIME1); [EOL]     MonthDay test2 = new MonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonthOfYear() { [EOL]     MonthDay test1 = new MonthDay(TEST_TIME1); [EOL]     MonthDay test2 = new MonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonthOfYear() { [EOL]     MonthDay test1 = new MonthDay(TEST_TIME1); [EOL]     MonthDay test2 = new MonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonthOfYear() { [EOL]     MonthDay test1 = new MonthDay(TEST_TIME1); [EOL]     MonthDay test2 = new MonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonthOfYear() { [EOL]     MonthDay test1 = new MonthDay(TEST_TIME1); [EOL]     MonthDay test2 = new MonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonthOfYear() { [EOL]     MonthDay test1 = new MonthDay(TEST_TIME1); [EOL]     MonthDay test2 = new MonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonthOfYear() { [EOL]     MonthDay test1 = new MonthDay(TEST_TIME1); [EOL]     MonthDay test2 = new MonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonthOfYear() { [EOL]     MonthDay test1 = new MonthDay(TEST_TIME1); [EOL]     MonthDay test2 = new MonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonthOfYear() { [EOL]     MonthDay test1 = new MonthDay(TEST_TIME1); [EOL]     MonthDay test2 = new MonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithChronologyRetainFields_Chrono() { [EOL]     MonthDay base = new MonthDay(6, 6, COPTIC_PARIS); [EOL]     MonthDay test = base.withChronologyRetainFields(BUDDHIST_TOKYO); [EOL]     check(base, 6, 6); [EOL]     assertEquals(COPTIC_UTC, base.getChronology()); [EOL]     check(test, 6, 6); [EOL]     assertEquals(BUDDHIST_UTC, test.getChronology()); [EOL] }
public void testWithChronologyRetainFields_Chrono() { [EOL]     MonthDay base = new MonthDay(6, 6, COPTIC_PARIS); [EOL]     MonthDay test = base.withChronologyRetainFields(BUDDHIST_TOKYO); [EOL]     check(base, 6, 6); [EOL]     assertEquals(COPTIC_UTC, base.getChronology()); [EOL]     check(test, 6, 6); [EOL]     assertEquals(BUDDHIST_UTC, test.getChronology()); [EOL] }
public void testWithChronologyRetainFields_Chrono() { [EOL]     MonthDay base = new MonthDay(6, 6, COPTIC_PARIS); [EOL]     MonthDay test = base.withChronologyRetainFields(BUDDHIST_TOKYO); [EOL]     check(base, 6, 6); [EOL]     assertEquals(COPTIC_UTC, base.getChronology()); [EOL]     check(test, 6, 6); [EOL]     assertEquals(BUDDHIST_UTC, test.getChronology()); [EOL] }
public void testWithChronologyRetainFields_Chrono() { [EOL]     MonthDay base = new MonthDay(6, 6, COPTIC_PARIS); [EOL]     MonthDay test = base.withChronologyRetainFields(BUDDHIST_TOKYO); [EOL]     check(base, 6, 6); [EOL]     assertEquals(COPTIC_UTC, base.getChronology()); [EOL]     check(test, 6, 6); [EOL]     assertEquals(BUDDHIST_UTC, test.getChronology()); [EOL] }
public void testWithChronologyRetainFields_Chrono() { [EOL]     MonthDay base = new MonthDay(6, 6, COPTIC_PARIS); [EOL]     MonthDay test = base.withChronologyRetainFields(BUDDHIST_TOKYO); [EOL]     check(base, 6, 6); [EOL]     assertEquals(COPTIC_UTC, base.getChronology()); [EOL]     check(test, 6, 6); [EOL]     assertEquals(BUDDHIST_UTC, test.getChronology()); [EOL] }
public void testWithChronologyRetainFields_Chrono() { [EOL]     MonthDay base = new MonthDay(6, 6, COPTIC_PARIS); [EOL]     MonthDay test = base.withChronologyRetainFields(BUDDHIST_TOKYO); [EOL]     check(base, 6, 6); [EOL]     assertEquals(COPTIC_UTC, base.getChronology()); [EOL]     check(test, 6, 6); [EOL]     assertEquals(BUDDHIST_UTC, test.getChronology()); [EOL] }
public void testWithChronologyRetainFields_Chrono() { [EOL]     MonthDay base = new MonthDay(6, 6, COPTIC_PARIS); [EOL]     MonthDay test = base.withChronologyRetainFields(BUDDHIST_TOKYO); [EOL]     check(base, 6, 6); [EOL]     assertEquals(COPTIC_UTC, base.getChronology()); [EOL]     check(test, 6, 6); [EOL]     assertEquals(BUDDHIST_UTC, test.getChronology()); [EOL] }
public void testWithChronologyRetainFields_Chrono() { [EOL]     MonthDay base = new MonthDay(6, 6, COPTIC_PARIS); [EOL]     MonthDay test = base.withChronologyRetainFields(BUDDHIST_TOKYO); [EOL]     check(base, 6, 6); [EOL]     assertEquals(COPTIC_UTC, base.getChronology()); [EOL]     check(test, 6, 6); [EOL]     assertEquals(BUDDHIST_UTC, test.getChronology()); [EOL] }
public void testWithChronologyRetainFields_Chrono() { [EOL]     MonthDay base = new MonthDay(6, 6, COPTIC_PARIS); [EOL]     MonthDay test = base.withChronologyRetainFields(BUDDHIST_TOKYO); [EOL]     check(base, 6, 6); [EOL]     assertEquals(COPTIC_UTC, base.getChronology()); [EOL]     check(test, 6, 6); [EOL]     assertEquals(BUDDHIST_UTC, test.getChronology()); [EOL] }
public void testWithChronologyRetainFields_Chrono() { [EOL]     MonthDay base = new MonthDay(6, 6, COPTIC_PARIS); [EOL]     MonthDay test = base.withChronologyRetainFields(BUDDHIST_TOKYO); [EOL]     check(base, 6, 6); [EOL]     assertEquals(COPTIC_UTC, base.getChronology()); [EOL]     check(test, 6, 6); [EOL]     assertEquals(BUDDHIST_UTC, test.getChronology()); [EOL] }
public void testGetFieldTypes() { [EOL]     MonthDay test = new MonthDay(COPTIC_PARIS); [EOL]     DateTimeFieldType[] fields = test.getFieldTypes(); [EOL]     assertEquals(2, fields.length); [EOL]     assertSame(DateTimeFieldType.monthOfYear(), fields[0]); [EOL]     assertSame(DateTimeFieldType.dayOfMonth(), fields[1]); [EOL]     assertNotSame(test.getFieldTypes(), test.getFieldTypes()); [EOL] }
public void testWithChronologyRetainFields_Chrono() { [EOL]     MonthDay base = new MonthDay(6, 6, COPTIC_PARIS); [EOL]     MonthDay test = base.withChronologyRetainFields(BUDDHIST_TOKYO); [EOL]     check(base, 6, 6); [EOL]     assertEquals(COPTIC_UTC, base.getChronology()); [EOL]     check(test, 6, 6); [EOL]     assertEquals(BUDDHIST_UTC, test.getChronology()); [EOL] }
public void testWithChronologyRetainFields_Chrono() { [EOL]     MonthDay base = new MonthDay(6, 6, COPTIC_PARIS); [EOL]     MonthDay test = base.withChronologyRetainFields(BUDDHIST_TOKYO); [EOL]     check(base, 6, 6); [EOL]     assertEquals(COPTIC_UTC, base.getChronology()); [EOL]     check(test, 6, 6); [EOL]     assertEquals(BUDDHIST_UTC, test.getChronology()); [EOL] }
public void testWithField() { [EOL]     MonthDay test = new MonthDay(9, 6); [EOL]     MonthDay result = test.withField(DateTimeFieldType.monthOfYear(), 10); [EOL]     assertEquals(new MonthDay(9, 6), test); [EOL]     assertEquals(new MonthDay(10, 6), result); [EOL] }
public void testWithField() { [EOL]     MonthDay test = new MonthDay(9, 6); [EOL]     MonthDay result = test.withField(DateTimeFieldType.monthOfYear(), 10); [EOL]     assertEquals(new MonthDay(9, 6), test); [EOL]     assertEquals(new MonthDay(10, 6), result); [EOL] }
public void testWithField() { [EOL]     MonthDay test = new MonthDay(9, 6); [EOL]     MonthDay result = test.withField(DateTimeFieldType.monthOfYear(), 10); [EOL]     assertEquals(new MonthDay(9, 6), test); [EOL]     assertEquals(new MonthDay(10, 6), result); [EOL] }
public void testMinusMonths_int() { [EOL]     MonthDay test = new MonthDay(6, 5, BuddhistChronology.getInstance()); [EOL]     MonthDay result = test.minusMonths(1); [EOL]     MonthDay expected = new MonthDay(5, 5, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL] }
public void testMinusDays_int_negativeFromLeap() { [EOL]     MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC()); [EOL]     MonthDay result = test.minusDays(-1); [EOL]     MonthDay expected = new MonthDay(3, 1, ISOChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL] }
public void testToString_String_Locale() { [EOL]     MonthDay test = new MonthDay(5, 6); [EOL]     assertEquals("\ufffd 6/5", test.toString("EEE d/M", Locale.ENGLISH)); [EOL]     assertEquals("\ufffd 6/5", test.toString("EEE d/M", Locale.FRENCH)); [EOL]     assertEquals("--05-06", test.toString(null, Locale.ENGLISH)); [EOL]     assertEquals("\ufffd 6/5", test.toString("EEE d/M", null)); [EOL]     assertEquals("--05-06", test.toString(null, null)); [EOL] }
public void testToString_String_Locale() { [EOL]     MonthDay test = new MonthDay(5, 6); [EOL]     assertEquals("\ufffd 6/5", test.toString("EEE d/M", Locale.ENGLISH)); [EOL]     assertEquals("\ufffd 6/5", test.toString("EEE d/M", Locale.FRENCH)); [EOL]     assertEquals("--05-06", test.toString(null, Locale.ENGLISH)); [EOL]     assertEquals("\ufffd 6/5", test.toString("EEE d/M", null)); [EOL]     assertEquals("--05-06", test.toString(null, null)); [EOL] }
public void testToString_String_Locale() { [EOL]     MonthDay test = new MonthDay(5, 6); [EOL]     assertEquals("\ufffd 6/5", test.toString("EEE d/M", Locale.ENGLISH)); [EOL]     assertEquals("\ufffd 6/5", test.toString("EEE d/M", Locale.FRENCH)); [EOL]     assertEquals("--05-06", test.toString(null, Locale.ENGLISH)); [EOL]     assertEquals("\ufffd 6/5", test.toString("EEE d/M", null)); [EOL]     assertEquals("--05-06", test.toString(null, null)); [EOL] }
public void testPropertyAddDayOfMonth() { [EOL]     MonthDay test = new MonthDay(4, 6); [EOL]     MonthDay copy = test.dayOfMonth().addToCopy(6); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 12); [EOL]     copy = test.dayOfMonth().addToCopy(7); [EOL]     check(copy, 4, 13); [EOL]     copy = test.dayOfMonth().addToCopy(-5); [EOL]     check(copy, 4, 1); [EOL]     copy = test.dayOfMonth().addToCopy(-6); [EOL]     check(copy, 3, 31); [EOL] }
public void testPropertySetTextDayOfMonth() { [EOL]     MonthDay test = new MonthDay(4, 6); [EOL]     MonthDay copy = test.dayOfMonth().setCopy("12"); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 12); [EOL]     copy = test.dayOfMonth().setCopy("2"); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 2); [EOL]     copy = test.dayOfMonth().setCopy("4"); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 4); [EOL] }
public void testPropertySetTextDayOfMonth() { [EOL]     MonthDay test = new MonthDay(4, 6); [EOL]     MonthDay copy = test.dayOfMonth().setCopy("12"); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 12); [EOL]     copy = test.dayOfMonth().setCopy("2"); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 2); [EOL]     copy = test.dayOfMonth().setCopy("4"); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 4); [EOL] }
public void testPropertySetTextDayOfMonth() { [EOL]     MonthDay test = new MonthDay(4, 6); [EOL]     MonthDay copy = test.dayOfMonth().setCopy("12"); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 12); [EOL]     copy = test.dayOfMonth().setCopy("2"); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 2); [EOL]     copy = test.dayOfMonth().setCopy("4"); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 4); [EOL] }
public void testPropertySetTextDayOfMonth() { [EOL]     MonthDay test = new MonthDay(4, 6); [EOL]     MonthDay copy = test.dayOfMonth().setCopy("12"); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 12); [EOL]     copy = test.dayOfMonth().setCopy("2"); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 2); [EOL]     copy = test.dayOfMonth().setCopy("4"); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 4); [EOL] }
public void testPropertySetTextDayOfMonth() { [EOL]     MonthDay test = new MonthDay(4, 6); [EOL]     MonthDay copy = test.dayOfMonth().setCopy("12"); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 12); [EOL]     copy = test.dayOfMonth().setCopy("2"); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 2); [EOL]     copy = test.dayOfMonth().setCopy("4"); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 4); [EOL] }
public void testPropertySetTextDayOfMonth() { [EOL]     MonthDay test = new MonthDay(4, 6); [EOL]     MonthDay copy = test.dayOfMonth().setCopy("12"); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 12); [EOL]     copy = test.dayOfMonth().setCopy("2"); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 2); [EOL]     copy = test.dayOfMonth().setCopy("4"); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 4); [EOL] }
public void testPropertySetTextDayOfMonth() { [EOL]     MonthDay test = new MonthDay(4, 6); [EOL]     MonthDay copy = test.dayOfMonth().setCopy("12"); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 12); [EOL]     copy = test.dayOfMonth().setCopy("2"); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 2); [EOL]     copy = test.dayOfMonth().setCopy("4"); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 4); [EOL] }
public void testPropertySetTextDayOfMonth() { [EOL]     MonthDay test = new MonthDay(4, 6); [EOL]     MonthDay copy = test.dayOfMonth().setCopy("12"); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 12); [EOL]     copy = test.dayOfMonth().setCopy("2"); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 2); [EOL]     copy = test.dayOfMonth().setCopy("4"); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 4); [EOL] }
public void testPropertySetTextDayOfMonth() { [EOL]     MonthDay test = new MonthDay(4, 6); [EOL]     MonthDay copy = test.dayOfMonth().setCopy("12"); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 12); [EOL]     copy = test.dayOfMonth().setCopy("2"); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 2); [EOL]     copy = test.dayOfMonth().setCopy("4"); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 4); [EOL] }
public void testPropertySetTextDayOfMonth() { [EOL]     MonthDay test = new MonthDay(4, 6); [EOL]     MonthDay copy = test.dayOfMonth().setCopy("12"); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 12); [EOL]     copy = test.dayOfMonth().setCopy("2"); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 2); [EOL]     copy = test.dayOfMonth().setCopy("4"); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 4); [EOL] }
public void testPropertySetTextDayOfMonth() { [EOL]     MonthDay test = new MonthDay(4, 6); [EOL]     MonthDay copy = test.dayOfMonth().setCopy("12"); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 12); [EOL]     copy = test.dayOfMonth().setCopy("2"); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 2); [EOL]     copy = test.dayOfMonth().setCopy("4"); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 4); [EOL] }
public void testPropertySetTextDayOfMonth() { [EOL]     MonthDay test = new MonthDay(4, 6); [EOL]     MonthDay copy = test.dayOfMonth().setCopy("12"); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 12); [EOL]     copy = test.dayOfMonth().setCopy("2"); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 2); [EOL]     copy = test.dayOfMonth().setCopy("4"); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 4); [EOL] }
public void testPropertySetTextDayOfMonth() { [EOL]     MonthDay test = new MonthDay(4, 6); [EOL]     MonthDay copy = test.dayOfMonth().setCopy("12"); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 12); [EOL]     copy = test.dayOfMonth().setCopy("2"); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 2); [EOL]     copy = test.dayOfMonth().setCopy("4"); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 4); [EOL] }
public void testPropertySetTextDayOfMonth() { [EOL]     MonthDay test = new MonthDay(4, 6); [EOL]     MonthDay copy = test.dayOfMonth().setCopy("12"); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 12); [EOL]     copy = test.dayOfMonth().setCopy("2"); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 2); [EOL]     copy = test.dayOfMonth().setCopy("4"); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 4); [EOL] }
public void testPropertySetTextDayOfMonth() { [EOL]     MonthDay test = new MonthDay(4, 6); [EOL]     MonthDay copy = test.dayOfMonth().setCopy("12"); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 12); [EOL]     copy = test.dayOfMonth().setCopy("2"); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 2); [EOL]     copy = test.dayOfMonth().setCopy("4"); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 4); [EOL] }
public void testPropertySetTextDayOfMonth() { [EOL]     MonthDay test = new MonthDay(4, 6); [EOL]     MonthDay copy = test.dayOfMonth().setCopy("12"); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 12); [EOL]     copy = test.dayOfMonth().setCopy("2"); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 2); [EOL]     copy = test.dayOfMonth().setCopy("4"); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 4); [EOL] }
public void testPropertySetTextDayOfMonth() { [EOL]     MonthDay test = new MonthDay(4, 6); [EOL]     MonthDay copy = test.dayOfMonth().setCopy("12"); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 12); [EOL]     copy = test.dayOfMonth().setCopy("2"); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 2); [EOL]     copy = test.dayOfMonth().setCopy("4"); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 4); [EOL] }
public void testPropertySetTextDayOfMonth() { [EOL]     MonthDay test = new MonthDay(4, 6); [EOL]     MonthDay copy = test.dayOfMonth().setCopy("12"); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 12); [EOL]     copy = test.dayOfMonth().setCopy("2"); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 2); [EOL]     copy = test.dayOfMonth().setCopy("4"); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 4); [EOL] }
public void testPropertySetTextDayOfMonth() { [EOL]     MonthDay test = new MonthDay(4, 6); [EOL]     MonthDay copy = test.dayOfMonth().setCopy("12"); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 12); [EOL]     copy = test.dayOfMonth().setCopy("2"); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 2); [EOL]     copy = test.dayOfMonth().setCopy("4"); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 4); [EOL] }
public void testPropertySetTextDayOfMonth() { [EOL]     MonthDay test = new MonthDay(4, 6); [EOL]     MonthDay copy = test.dayOfMonth().setCopy("12"); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 12); [EOL]     copy = test.dayOfMonth().setCopy("2"); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 2); [EOL]     copy = test.dayOfMonth().setCopy("4"); [EOL]     check(test, 4, 6); [EOL]     check(copy, 4, 4); [EOL] }
public void testFactory_fromDateFields_null() throws Exception { [EOL]     try { [EOL]         LocalDateTime.fromDateFields((Date) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_fromDateFields_null() throws Exception { [EOL]     try { [EOL]         LocalDateTime.fromDateFields((Date) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFactory_fromDateFields_null() throws Exception { [EOL]     try { [EOL]         LocalDateTime.fromDateFields((Date) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testConstructor_Object_nullDateTimeZone() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     LocalDateTime test = new LocalDateTime(date, (DateTimeZone) null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL]     assertEquals(12 + OFFSET_MOSCOW, test.getHourOfDay()); [EOL]     assertEquals(24, test.getMinuteOfHour()); [EOL]     assertEquals(0, test.getSecondOfMinute()); [EOL]     assertEquals(0, test.getMillisOfSecond()); [EOL] }
public void testConstructor_Object_nullDateTimeZone() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     LocalDateTime test = new LocalDateTime(date, (DateTimeZone) null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL]     assertEquals(12 + OFFSET_MOSCOW, test.getHourOfDay()); [EOL]     assertEquals(24, test.getMinuteOfHour()); [EOL]     assertEquals(0, test.getSecondOfMinute()); [EOL]     assertEquals(0, test.getMillisOfSecond()); [EOL] }
public void testConstructor_Object_nullDateTimeZone() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     LocalDateTime test = new LocalDateTime(date, (DateTimeZone) null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL]     assertEquals(12 + OFFSET_MOSCOW, test.getHourOfDay()); [EOL]     assertEquals(24, test.getMinuteOfHour()); [EOL]     assertEquals(0, test.getSecondOfMinute()); [EOL]     assertEquals(0, test.getMillisOfSecond()); [EOL] }
public void testConstructor_Object_nullDateTimeZone() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     LocalDateTime test = new LocalDateTime(date, (DateTimeZone) null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL]     assertEquals(12 + OFFSET_MOSCOW, test.getHourOfDay()); [EOL]     assertEquals(24, test.getMinuteOfHour()); [EOL]     assertEquals(0, test.getSecondOfMinute()); [EOL]     assertEquals(0, test.getMillisOfSecond()); [EOL] }
public void testConstructor_ObjectStringEx6() throws Throwable { [EOL]     try { [EOL]         new LocalDateTime("10:20:30.040+14:00"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testConstructor_ObjectStringEx6() throws Throwable { [EOL]     try { [EOL]         new LocalDateTime("10:20:30.040+14:00"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testConstructor_ObjectStringEx6() throws Throwable { [EOL]     try { [EOL]         new LocalDateTime("10:20:30.040+14:00"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testIsLocalDateTimeGap_Berlin() { [EOL]     DateTimeZone zone = DateTimeZone.forID("Europe/Berlin"); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 1, 0))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 1, 59, 59, 99))); [EOL]     assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 0))); [EOL]     assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 30))); [EOL]     assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 59, 59, 99))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 3, 0))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 4, 0))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 1, 30))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 2, 30))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 3, 30))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 12, 24, 12, 34))); [EOL] }
public void testConstructor_int_int_int_int_int_int() throws Throwable { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2005, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(10, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(0, test.getMillisOfSecond()); [EOL] }
public void testGetValue_int() { [EOL]     LocalDateTime test = new LocalDateTime(ISO_UTC); [EOL]     assertEquals(1970, test.getValue(0)); [EOL]     assertEquals(6, test.getValue(1)); [EOL]     assertEquals(9, test.getValue(2)); [EOL]     assertEquals(MILLIS_OF_DAY_UTC, test.getValue(3)); [EOL]     try { [EOL]         test.getValue(-1); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         test.getValue(3); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] }
public void testGetValue_int() { [EOL]     LocalDateTime test = new LocalDateTime(ISO_UTC); [EOL]     assertEquals(1970, test.getValue(0)); [EOL]     assertEquals(6, test.getValue(1)); [EOL]     assertEquals(9, test.getValue(2)); [EOL]     assertEquals(MILLIS_OF_DAY_UTC, test.getValue(3)); [EOL]     try { [EOL]         test.getValue(-1); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         test.getValue(3); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] }
public void testGetValue_int() { [EOL]     LocalDateTime test = new LocalDateTime(ISO_UTC); [EOL]     assertEquals(1970, test.getValue(0)); [EOL]     assertEquals(6, test.getValue(1)); [EOL]     assertEquals(9, test.getValue(2)); [EOL]     assertEquals(MILLIS_OF_DAY_UTC, test.getValue(3)); [EOL]     try { [EOL]         test.getValue(-1); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         test.getValue(3); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] }
public void testGetValue_int() { [EOL]     LocalDateTime test = new LocalDateTime(ISO_UTC); [EOL]     assertEquals(1970, test.getValue(0)); [EOL]     assertEquals(6, test.getValue(1)); [EOL]     assertEquals(9, test.getValue(2)); [EOL]     assertEquals(MILLIS_OF_DAY_UTC, test.getValue(3)); [EOL]     try { [EOL]         test.getValue(-1); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         test.getValue(3); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] }
public void testGetValue_int() { [EOL]     LocalDateTime test = new LocalDateTime(ISO_UTC); [EOL]     assertEquals(1970, test.getValue(0)); [EOL]     assertEquals(6, test.getValue(1)); [EOL]     assertEquals(9, test.getValue(2)); [EOL]     assertEquals(MILLIS_OF_DAY_UTC, test.getValue(3)); [EOL]     try { [EOL]         test.getValue(-1); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         test.getValue(3); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] }
public void testGet_DateTimeFieldType() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40); [EOL]     assertEquals(1970, test.get(DateTimeFieldType.year())); [EOL]     assertEquals(6, test.get(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(9, test.get(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(2, test.get(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(160, test.get(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(24, test.get(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(1970, test.get(DateTimeFieldType.weekyear())); [EOL]     assertEquals(10, test.get(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(20, test.get(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(30, test.get(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(40, test.get(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(MILLIS_OF_DAY_UTC / 60000, test.get(DateTimeFieldType.minuteOfDay())); [EOL]     assertEquals(MILLIS_OF_DAY_UTC / 1000, test.get(DateTimeFieldType.secondOfDay())); [EOL]     assertEquals(MILLIS_OF_DAY_UTC, test.get(DateTimeFieldType.millisOfDay())); [EOL]     assertEquals(10, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(DateTimeConstants.AM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     test = new LocalDateTime(1970, 6, 9, 12, 30); [EOL]     assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(DateTimeConstants.PM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     test = new LocalDateTime(1970, 6, 9, 14, 30); [EOL]     assertEquals(2, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(2, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(14, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(DateTimeConstants.PM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     test = new LocalDateTime(1970, 6, 9, 0, 30); [EOL]     assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(24, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(DateTimeConstants.AM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     try { [EOL]         test.get(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testIsSupported_DurationFieldType() { [EOL]     LocalDateTime test = new LocalDateTime(); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.eras())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.centuries())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.years())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.months())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.weekyears())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.weeks())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.days())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.hours())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.minutes())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.seconds())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.millis())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.halfdays())); [EOL]     assertEquals(false, test.isSupported((DurationFieldType) null)); [EOL] }
public void testIsSupported_DurationFieldType() { [EOL]     LocalDateTime test = new LocalDateTime(); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.eras())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.centuries())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.years())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.months())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.weekyears())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.weeks())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.days())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.hours())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.minutes())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.seconds())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.millis())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.halfdays())); [EOL]     assertEquals(false, test.isSupported((DurationFieldType) null)); [EOL] }
public void testIsSupported_DurationFieldType() { [EOL]     LocalDateTime test = new LocalDateTime(); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.eras())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.centuries())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.years())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.months())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.weekyears())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.weeks())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.days())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.hours())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.minutes())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.seconds())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.millis())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.halfdays())); [EOL]     assertEquals(false, test.isSupported((DurationFieldType) null)); [EOL] }
public void testIsLocalDateTimeGap_Berlin() { [EOL]     DateTimeZone zone = DateTimeZone.forID("Europe/Berlin"); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 1, 0))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 1, 59, 59, 99))); [EOL]     assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 0))); [EOL]     assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 30))); [EOL]     assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 59, 59, 99))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 3, 0))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 4, 0))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 1, 30))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 2, 30))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 3, 30))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 12, 24, 12, 34))); [EOL] }
public void testIsLocalDateTimeGap_Berlin() { [EOL]     DateTimeZone zone = DateTimeZone.forID("Europe/Berlin"); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 1, 0))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 1, 59, 59, 99))); [EOL]     assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 0))); [EOL]     assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 30))); [EOL]     assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 59, 59, 99))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 3, 0))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 4, 0))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 1, 30))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 2, 30))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 3, 30))); [EOL]     assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 12, 24, 12, 34))); [EOL] }
public void testPlus_RP() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.plus(new Period(1, 2, 3, 4, 29, 6, 7, 8)); [EOL]     LocalDateTime expected = new LocalDateTime(2003, 7, 29, 15, 26, 37, 48, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlus_RP() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.plus(new Period(1, 2, 3, 4, 29, 6, 7, 8)); [EOL]     LocalDateTime expected = new LocalDateTime(2003, 7, 29, 15, 26, 37, 48, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testPlusDays_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.plusDays(1); [EOL]     LocalDateTime expected = new LocalDateTime(2002, 5, 4, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusDays(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusDays_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.plusDays(1); [EOL]     LocalDateTime expected = new LocalDateTime(2002, 5, 4, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusDays(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusDays_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.plusDays(1); [EOL]     LocalDateTime expected = new LocalDateTime(2002, 5, 4, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusDays(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusYears_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.minusYears(1); [EOL]     LocalDateTime expected = new LocalDateTime(2001, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusYears(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusYears_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.minusYears(1); [EOL]     LocalDateTime expected = new LocalDateTime(2001, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusYears(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusYears_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.minusYears(1); [EOL]     LocalDateTime expected = new LocalDateTime(2001, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusYears(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusMinutes_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.minusMinutes(1); [EOL]     LocalDateTime expected = new LocalDateTime(2002, 5, 3, 10, 19, 30, 40, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusMinutes(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusMinutes_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.minusMinutes(1); [EOL]     LocalDateTime expected = new LocalDateTime(2002, 5, 3, 10, 19, 30, 40, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusMinutes(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinusMinutes_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.minusMinutes(1); [EOL]     LocalDateTime expected = new LocalDateTime(2002, 5, 3, 10, 19, 30, 40, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusMinutes(0); [EOL]     assertSame(test, result); [EOL] }
public void testGetters() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(160, test.getDayOfYear()); [EOL]     assertEquals(2, test.getDayOfWeek()); [EOL]     assertEquals(24, test.getWeekOfWeekyear()); [EOL]     assertEquals(1970, test.getWeekyear()); [EOL]     assertEquals(70, test.getYearOfCentury()); [EOL]     assertEquals(20, test.getCenturyOfEra()); [EOL]     assertEquals(1970, test.getYearOfEra()); [EOL]     assertEquals(DateTimeConstants.AD, test.getEra()); [EOL]     assertEquals(10, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL]     assertEquals(MILLIS_OF_DAY_UTC, test.getMillisOfDay()); [EOL] }
public void testGetters() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(160, test.getDayOfYear()); [EOL]     assertEquals(2, test.getDayOfWeek()); [EOL]     assertEquals(24, test.getWeekOfWeekyear()); [EOL]     assertEquals(1970, test.getWeekyear()); [EOL]     assertEquals(70, test.getYearOfCentury()); [EOL]     assertEquals(20, test.getCenturyOfEra()); [EOL]     assertEquals(1970, test.getYearOfEra()); [EOL]     assertEquals(DateTimeConstants.AD, test.getEra()); [EOL]     assertEquals(10, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL]     assertEquals(MILLIS_OF_DAY_UTC, test.getMillisOfDay()); [EOL] }
public void testGetters() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(160, test.getDayOfYear()); [EOL]     assertEquals(2, test.getDayOfWeek()); [EOL]     assertEquals(24, test.getWeekOfWeekyear()); [EOL]     assertEquals(1970, test.getWeekyear()); [EOL]     assertEquals(70, test.getYearOfCentury()); [EOL]     assertEquals(20, test.getCenturyOfEra()); [EOL]     assertEquals(1970, test.getYearOfEra()); [EOL]     assertEquals(DateTimeConstants.AD, test.getEra()); [EOL]     assertEquals(10, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL]     assertEquals(MILLIS_OF_DAY_UTC, test.getMillisOfDay()); [EOL] }
public void testGetters() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(160, test.getDayOfYear()); [EOL]     assertEquals(2, test.getDayOfWeek()); [EOL]     assertEquals(24, test.getWeekOfWeekyear()); [EOL]     assertEquals(1970, test.getWeekyear()); [EOL]     assertEquals(70, test.getYearOfCentury()); [EOL]     assertEquals(20, test.getCenturyOfEra()); [EOL]     assertEquals(1970, test.getYearOfEra()); [EOL]     assertEquals(DateTimeConstants.AD, test.getEra()); [EOL]     assertEquals(10, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL]     assertEquals(MILLIS_OF_DAY_UTC, test.getMillisOfDay()); [EOL] }
public void testGetters() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(160, test.getDayOfYear()); [EOL]     assertEquals(2, test.getDayOfWeek()); [EOL]     assertEquals(24, test.getWeekOfWeekyear()); [EOL]     assertEquals(1970, test.getWeekyear()); [EOL]     assertEquals(70, test.getYearOfCentury()); [EOL]     assertEquals(20, test.getCenturyOfEra()); [EOL]     assertEquals(1970, test.getYearOfEra()); [EOL]     assertEquals(DateTimeConstants.AD, test.getEra()); [EOL]     assertEquals(10, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL]     assertEquals(MILLIS_OF_DAY_UTC, test.getMillisOfDay()); [EOL] }
public void testGetters() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(160, test.getDayOfYear()); [EOL]     assertEquals(2, test.getDayOfWeek()); [EOL]     assertEquals(24, test.getWeekOfWeekyear()); [EOL]     assertEquals(1970, test.getWeekyear()); [EOL]     assertEquals(70, test.getYearOfCentury()); [EOL]     assertEquals(20, test.getCenturyOfEra()); [EOL]     assertEquals(1970, test.getYearOfEra()); [EOL]     assertEquals(DateTimeConstants.AD, test.getEra()); [EOL]     assertEquals(10, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL]     assertEquals(MILLIS_OF_DAY_UTC, test.getMillisOfDay()); [EOL] }
public void testGetters() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(160, test.getDayOfYear()); [EOL]     assertEquals(2, test.getDayOfWeek()); [EOL]     assertEquals(24, test.getWeekOfWeekyear()); [EOL]     assertEquals(1970, test.getWeekyear()); [EOL]     assertEquals(70, test.getYearOfCentury()); [EOL]     assertEquals(20, test.getCenturyOfEra()); [EOL]     assertEquals(1970, test.getYearOfEra()); [EOL]     assertEquals(DateTimeConstants.AD, test.getEra()); [EOL]     assertEquals(10, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL]     assertEquals(MILLIS_OF_DAY_UTC, test.getMillisOfDay()); [EOL] }
public void testGetters() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(160, test.getDayOfYear()); [EOL]     assertEquals(2, test.getDayOfWeek()); [EOL]     assertEquals(24, test.getWeekOfWeekyear()); [EOL]     assertEquals(1970, test.getWeekyear()); [EOL]     assertEquals(70, test.getYearOfCentury()); [EOL]     assertEquals(20, test.getCenturyOfEra()); [EOL]     assertEquals(1970, test.getYearOfEra()); [EOL]     assertEquals(DateTimeConstants.AD, test.getEra()); [EOL]     assertEquals(10, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL]     assertEquals(MILLIS_OF_DAY_UTC, test.getMillisOfDay()); [EOL] }
public void testGetters() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(160, test.getDayOfYear()); [EOL]     assertEquals(2, test.getDayOfWeek()); [EOL]     assertEquals(24, test.getWeekOfWeekyear()); [EOL]     assertEquals(1970, test.getWeekyear()); [EOL]     assertEquals(70, test.getYearOfCentury()); [EOL]     assertEquals(20, test.getCenturyOfEra()); [EOL]     assertEquals(1970, test.getYearOfEra()); [EOL]     assertEquals(DateTimeConstants.AD, test.getEra()); [EOL]     assertEquals(10, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL]     assertEquals(MILLIS_OF_DAY_UTC, test.getMillisOfDay()); [EOL] }
public void testWithers() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithers() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyWithMaxMinValueHour() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 0, 20, 30, 40); [EOL]     check(test.hourOfDay().withMaximumValue(), 2005, 6, 9, 23, 20, 30, 40); [EOL]     check(test.hourOfDay().withMinimumValue(), 2005, 6, 9, 0, 20, 30, 40); [EOL] }
public void testToString_String_Locale() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40); [EOL]     assertEquals("Tue 9/6", test.toString("EEE d/M", Locale.ENGLISH)); [EOL]     assertEquals("mar. 9/6", test.toString("EEE d/M", Locale.FRENCH)); [EOL]     assertEquals("1970-06-09T10:20:30.040", test.toString(null, Locale.ENGLISH)); [EOL]     assertEquals("Tue 9/6", test.toString("EEE d/M", null)); [EOL]     assertEquals("1970-06-09T10:20:30.040", test.toString(null, null)); [EOL] }
public void testToString_String_Locale() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40); [EOL]     assertEquals("Tue 9/6", test.toString("EEE d/M", Locale.ENGLISH)); [EOL]     assertEquals("mar. 9/6", test.toString("EEE d/M", Locale.FRENCH)); [EOL]     assertEquals("1970-06-09T10:20:30.040", test.toString(null, Locale.ENGLISH)); [EOL]     assertEquals("Tue 9/6", test.toString("EEE d/M", null)); [EOL]     assertEquals("1970-06-09T10:20:30.040", test.toString(null, null)); [EOL] }
public void testPropertyWithMaxMinValueHour() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 0, 20, 30, 40); [EOL]     check(test.hourOfDay().withMaximumValue(), 2005, 6, 9, 23, 20, 30, 40); [EOL]     check(test.hourOfDay().withMinimumValue(), 2005, 6, 9, 0, 20, 30, 40); [EOL] }
public void testPropertyWithMaxMinValueHour() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 0, 20, 30, 40); [EOL]     check(test.hourOfDay().withMaximumValue(), 2005, 6, 9, 23, 20, 30, 40); [EOL]     check(test.hourOfDay().withMinimumValue(), 2005, 6, 9, 0, 20, 30, 40); [EOL] }
public void testPropertyHashCode() { [EOL]     LocalDateTime test1 = new LocalDateTime(2005, 11, 8, 10, 20, 30, 40); [EOL]     LocalDateTime test2 = new LocalDateTime(2005, 11, 9, 10, 20, 30, 40); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode()); [EOL]     assertEquals(false, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test1.monthOfYear().hashCode() == test1.monthOfYear().hashCode()); [EOL]     assertEquals(true, test1.monthOfYear().hashCode() == test2.monthOfYear().hashCode()); [EOL] }
public void testPropertyWithMaxMinValueHour() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 0, 20, 30, 40); [EOL]     check(test.hourOfDay().withMaximumValue(), 2005, 6, 9, 23, 20, 30, 40); [EOL]     check(test.hourOfDay().withMinimumValue(), 2005, 6, 9, 0, 20, 30, 40); [EOL] }
public void testPropertyWithMaxMinValueHour() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 0, 20, 30, 40); [EOL]     check(test.hourOfDay().withMaximumValue(), 2005, 6, 9, 23, 20, 30, 40); [EOL]     check(test.hourOfDay().withMinimumValue(), 2005, 6, 9, 0, 20, 30, 40); [EOL] }
public void testPropertyWithMaxMinValueHour() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 0, 20, 30, 40); [EOL]     check(test.hourOfDay().withMaximumValue(), 2005, 6, 9, 23, 20, 30, 40); [EOL]     check(test.hourOfDay().withMinimumValue(), 2005, 6, 9, 0, 20, 30, 40); [EOL] }
public void testPropertyWithMaxMinValueHour() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 0, 20, 30, 40); [EOL]     check(test.hourOfDay().withMaximumValue(), 2005, 6, 9, 23, 20, 30, 40); [EOL]     check(test.hourOfDay().withMinimumValue(), 2005, 6, 9, 0, 20, 30, 40); [EOL] }
public void testGetChronology_Object_nullChronology() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Paris")); [EOL]     assertEquals(GJChronology.getInstance(PARIS), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(0L)); [EOL]     assertEquals(GJChronology.getInstance(MOSCOW, 0L, 4), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MAX_VALUE)); [EOL]     assertEquals(JulianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MIN_VALUE)); [EOL]     assertEquals(GregorianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(new MockUnknownTimeZone()); [EOL]     assertEquals(GJChronology.getInstance(), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     Calendar uc = new MockUnknownCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     assertEquals(ISOChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(uc, (Chronology) null)); [EOL]     try { [EOL]         Calendar bc = (Calendar) Class.forName("sun.util.BuddhistCalendar").newInstance(); [EOL]         bc.setTimeZone(TimeZone.getTimeZone("Europe/Moscow")); [EOL]         assertEquals(BuddhistChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(bc, (Chronology) null)); [EOL]     } catch (ClassNotFoundException ex) { [EOL]     } [EOL] }
public void testGetChronology_Object_nullChronology() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Paris")); [EOL]     assertEquals(GJChronology.getInstance(PARIS), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(0L)); [EOL]     assertEquals(GJChronology.getInstance(MOSCOW, 0L, 4), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MAX_VALUE)); [EOL]     assertEquals(JulianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MIN_VALUE)); [EOL]     assertEquals(GregorianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(new MockUnknownTimeZone()); [EOL]     assertEquals(GJChronology.getInstance(), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     Calendar uc = new MockUnknownCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     assertEquals(ISOChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(uc, (Chronology) null)); [EOL]     try { [EOL]         Calendar bc = (Calendar) Class.forName("sun.util.BuddhistCalendar").newInstance(); [EOL]         bc.setTimeZone(TimeZone.getTimeZone("Europe/Moscow")); [EOL]         assertEquals(BuddhistChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(bc, (Chronology) null)); [EOL]     } catch (ClassNotFoundException ex) { [EOL]     } [EOL] }
public void testGetChronology_Object_nullChronology() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Paris")); [EOL]     assertEquals(GJChronology.getInstance(PARIS), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(0L)); [EOL]     assertEquals(GJChronology.getInstance(MOSCOW, 0L, 4), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MAX_VALUE)); [EOL]     assertEquals(JulianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MIN_VALUE)); [EOL]     assertEquals(GregorianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(new MockUnknownTimeZone()); [EOL]     assertEquals(GJChronology.getInstance(), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     Calendar uc = new MockUnknownCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     assertEquals(ISOChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(uc, (Chronology) null)); [EOL]     try { [EOL]         Calendar bc = (Calendar) Class.forName("sun.util.BuddhistCalendar").newInstance(); [EOL]         bc.setTimeZone(TimeZone.getTimeZone("Europe/Moscow")); [EOL]         assertEquals(BuddhistChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(bc, (Chronology) null)); [EOL]     } catch (ClassNotFoundException ex) { [EOL]     } [EOL] }
public void testGetChronology_Object_nullChronology() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Paris")); [EOL]     assertEquals(GJChronology.getInstance(PARIS), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(0L)); [EOL]     assertEquals(GJChronology.getInstance(MOSCOW, 0L, 4), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MAX_VALUE)); [EOL]     assertEquals(JulianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MIN_VALUE)); [EOL]     assertEquals(GregorianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(new MockUnknownTimeZone()); [EOL]     assertEquals(GJChronology.getInstance(), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     Calendar uc = new MockUnknownCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     assertEquals(ISOChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(uc, (Chronology) null)); [EOL]     try { [EOL]         Calendar bc = (Calendar) Class.forName("sun.util.BuddhistCalendar").newInstance(); [EOL]         bc.setTimeZone(TimeZone.getTimeZone("Europe/Moscow")); [EOL]         assertEquals(BuddhistChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(bc, (Chronology) null)); [EOL]     } catch (ClassNotFoundException ex) { [EOL]     } [EOL] }
public void testGetChronology_Object_nullChronology() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Paris")); [EOL]     assertEquals(GJChronology.getInstance(PARIS), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(0L)); [EOL]     assertEquals(GJChronology.getInstance(MOSCOW, 0L, 4), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MAX_VALUE)); [EOL]     assertEquals(JulianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MIN_VALUE)); [EOL]     assertEquals(GregorianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(new MockUnknownTimeZone()); [EOL]     assertEquals(GJChronology.getInstance(), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     Calendar uc = new MockUnknownCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     assertEquals(ISOChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(uc, (Chronology) null)); [EOL]     try { [EOL]         Calendar bc = (Calendar) Class.forName("sun.util.BuddhistCalendar").newInstance(); [EOL]         bc.setTimeZone(TimeZone.getTimeZone("Europe/Moscow")); [EOL]         assertEquals(BuddhistChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(bc, (Chronology) null)); [EOL]     } catch (ClassNotFoundException ex) { [EOL]     } [EOL] }
public void testGetChronology_Object_nullChronology() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Paris")); [EOL]     assertEquals(GJChronology.getInstance(PARIS), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(0L)); [EOL]     assertEquals(GJChronology.getInstance(MOSCOW, 0L, 4), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MAX_VALUE)); [EOL]     assertEquals(JulianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MIN_VALUE)); [EOL]     assertEquals(GregorianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(new MockUnknownTimeZone()); [EOL]     assertEquals(GJChronology.getInstance(), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     Calendar uc = new MockUnknownCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     assertEquals(ISOChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(uc, (Chronology) null)); [EOL]     try { [EOL]         Calendar bc = (Calendar) Class.forName("sun.util.BuddhistCalendar").newInstance(); [EOL]         bc.setTimeZone(TimeZone.getTimeZone("Europe/Moscow")); [EOL]         assertEquals(BuddhistChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(bc, (Chronology) null)); [EOL]     } catch (ClassNotFoundException ex) { [EOL]     } [EOL] }
public void testGetChronology_Object_nullChronology() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Paris")); [EOL]     assertEquals(GJChronology.getInstance(PARIS), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(0L)); [EOL]     assertEquals(GJChronology.getInstance(MOSCOW, 0L, 4), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MAX_VALUE)); [EOL]     assertEquals(JulianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MIN_VALUE)); [EOL]     assertEquals(GregorianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(new MockUnknownTimeZone()); [EOL]     assertEquals(GJChronology.getInstance(), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     Calendar uc = new MockUnknownCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     assertEquals(ISOChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(uc, (Chronology) null)); [EOL]     try { [EOL]         Calendar bc = (Calendar) Class.forName("sun.util.BuddhistCalendar").newInstance(); [EOL]         bc.setTimeZone(TimeZone.getTimeZone("Europe/Moscow")); [EOL]         assertEquals(BuddhistChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(bc, (Chronology) null)); [EOL]     } catch (ClassNotFoundException ex) { [EOL]     } [EOL] }
public void testGetChronology_Object_nullChronology() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Paris")); [EOL]     assertEquals(GJChronology.getInstance(PARIS), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(0L)); [EOL]     assertEquals(GJChronology.getInstance(MOSCOW, 0L, 4), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MAX_VALUE)); [EOL]     assertEquals(JulianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MIN_VALUE)); [EOL]     assertEquals(GregorianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(new MockUnknownTimeZone()); [EOL]     assertEquals(GJChronology.getInstance(), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     Calendar uc = new MockUnknownCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     assertEquals(ISOChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(uc, (Chronology) null)); [EOL]     try { [EOL]         Calendar bc = (Calendar) Class.forName("sun.util.BuddhistCalendar").newInstance(); [EOL]         bc.setTimeZone(TimeZone.getTimeZone("Europe/Moscow")); [EOL]         assertEquals(BuddhistChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(bc, (Chronology) null)); [EOL]     } catch (ClassNotFoundException ex) { [EOL]     } [EOL] }
public void testGetPartialValues() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(); [EOL]     cal.setTime(new Date(12345678L)); [EOL]     TimeOfDay tod = new TimeOfDay(); [EOL]     int[] expected = ISO.get(tod, 12345678L); [EOL]     int[] actual = CalendarConverter.INSTANCE.getPartialValues(tod, cal, ISO); [EOL]     assertEquals(true, Arrays.equals(expected, actual)); [EOL] }
public void testGetPartialValues() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(); [EOL]     cal.setTime(new Date(12345678L)); [EOL]     TimeOfDay tod = new TimeOfDay(); [EOL]     int[] expected = ISO.get(tod, 12345678L); [EOL]     int[] actual = CalendarConverter.INSTANCE.getPartialValues(tod, cal, ISO); [EOL]     assertEquals(true, Arrays.equals(expected, actual)); [EOL] }
public void testPlusMinutes_int() { [EOL]     LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON); [EOL]     LocalTime result = test.plusMinutes(1); [EOL]     LocalTime expected = new LocalTime(1, 3, 3, 4, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusMinutes(0); [EOL]     assertSame(test, result); [EOL] }
public void testDurationFields() { [EOL]     final EthiopicChronology ethiopic = EthiopicChronology.getInstance(); [EOL]     assertEquals("eras", ethiopic.eras().getName()); [EOL]     assertEquals("centuries", ethiopic.centuries().getName()); [EOL]     assertEquals("years", ethiopic.years().getName()); [EOL]     assertEquals("weekyears", ethiopic.weekyears().getName()); [EOL]     assertEquals("months", ethiopic.months().getName()); [EOL]     assertEquals("weeks", ethiopic.weeks().getName()); [EOL]     assertEquals("days", ethiopic.days().getName()); [EOL]     assertEquals("halfdays", ethiopic.halfdays().getName()); [EOL]     assertEquals("hours", ethiopic.hours().getName()); [EOL]     assertEquals("minutes", ethiopic.minutes().getName()); [EOL]     assertEquals("seconds", ethiopic.seconds().getName()); [EOL]     assertEquals("millis", ethiopic.millis().getName()); [EOL]     assertEquals(false, ethiopic.eras().isSupported()); [EOL]     assertEquals(true, ethiopic.centuries().isSupported()); [EOL]     assertEquals(true, ethiopic.years().isSupported()); [EOL]     assertEquals(true, ethiopic.weekyears().isSupported()); [EOL]     assertEquals(true, ethiopic.months().isSupported()); [EOL]     assertEquals(true, ethiopic.weeks().isSupported()); [EOL]     assertEquals(true, ethiopic.days().isSupported()); [EOL]     assertEquals(true, ethiopic.halfdays().isSupported()); [EOL]     assertEquals(true, ethiopic.hours().isSupported()); [EOL]     assertEquals(true, ethiopic.minutes().isSupported()); [EOL]     assertEquals(true, ethiopic.seconds().isSupported()); [EOL]     assertEquals(true, ethiopic.millis().isSupported()); [EOL]     assertEquals(false, ethiopic.centuries().isPrecise()); [EOL]     assertEquals(false, ethiopic.years().isPrecise()); [EOL]     assertEquals(false, ethiopic.weekyears().isPrecise()); [EOL]     assertEquals(false, ethiopic.months().isPrecise()); [EOL]     assertEquals(false, ethiopic.weeks().isPrecise()); [EOL]     assertEquals(false, ethiopic.days().isPrecise()); [EOL]     assertEquals(false, ethiopic.halfdays().isPrecise()); [EOL]     assertEquals(true, ethiopic.hours().isPrecise()); [EOL]     assertEquals(true, ethiopic.minutes().isPrecise()); [EOL]     assertEquals(true, ethiopic.seconds().isPrecise()); [EOL]     assertEquals(true, ethiopic.millis().isPrecise()); [EOL]     final EthiopicChronology ethiopicUTC = EthiopicChronology.getInstanceUTC(); [EOL]     assertEquals(false, ethiopicUTC.centuries().isPrecise()); [EOL]     assertEquals(false, ethiopicUTC.years().isPrecise()); [EOL]     assertEquals(false, ethiopicUTC.weekyears().isPrecise()); [EOL]     assertEquals(false, ethiopicUTC.months().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.weeks().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.days().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.halfdays().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.hours().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.minutes().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.seconds().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.millis().isPrecise()); [EOL]     final DateTimeZone gmt = DateTimeZone.forID("Etc/GMT"); [EOL]     final EthiopicChronology ethiopicGMT = EthiopicChronology.getInstance(gmt); [EOL]     assertEquals(false, ethiopicGMT.centuries().isPrecise()); [EOL]     assertEquals(false, ethiopicGMT.years().isPrecise()); [EOL]     assertEquals(false, ethiopicGMT.weekyears().isPrecise()); [EOL]     assertEquals(false, ethiopicGMT.months().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.weeks().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.days().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.halfdays().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.hours().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.minutes().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.seconds().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.millis().isPrecise()); [EOL] }
public void testDurationFields() { [EOL]     final EthiopicChronology ethiopic = EthiopicChronology.getInstance(); [EOL]     assertEquals("eras", ethiopic.eras().getName()); [EOL]     assertEquals("centuries", ethiopic.centuries().getName()); [EOL]     assertEquals("years", ethiopic.years().getName()); [EOL]     assertEquals("weekyears", ethiopic.weekyears().getName()); [EOL]     assertEquals("months", ethiopic.months().getName()); [EOL]     assertEquals("weeks", ethiopic.weeks().getName()); [EOL]     assertEquals("days", ethiopic.days().getName()); [EOL]     assertEquals("halfdays", ethiopic.halfdays().getName()); [EOL]     assertEquals("hours", ethiopic.hours().getName()); [EOL]     assertEquals("minutes", ethiopic.minutes().getName()); [EOL]     assertEquals("seconds", ethiopic.seconds().getName()); [EOL]     assertEquals("millis", ethiopic.millis().getName()); [EOL]     assertEquals(false, ethiopic.eras().isSupported()); [EOL]     assertEquals(true, ethiopic.centuries().isSupported()); [EOL]     assertEquals(true, ethiopic.years().isSupported()); [EOL]     assertEquals(true, ethiopic.weekyears().isSupported()); [EOL]     assertEquals(true, ethiopic.months().isSupported()); [EOL]     assertEquals(true, ethiopic.weeks().isSupported()); [EOL]     assertEquals(true, ethiopic.days().isSupported()); [EOL]     assertEquals(true, ethiopic.halfdays().isSupported()); [EOL]     assertEquals(true, ethiopic.hours().isSupported()); [EOL]     assertEquals(true, ethiopic.minutes().isSupported()); [EOL]     assertEquals(true, ethiopic.seconds().isSupported()); [EOL]     assertEquals(true, ethiopic.millis().isSupported()); [EOL]     assertEquals(false, ethiopic.centuries().isPrecise()); [EOL]     assertEquals(false, ethiopic.years().isPrecise()); [EOL]     assertEquals(false, ethiopic.weekyears().isPrecise()); [EOL]     assertEquals(false, ethiopic.months().isPrecise()); [EOL]     assertEquals(false, ethiopic.weeks().isPrecise()); [EOL]     assertEquals(false, ethiopic.days().isPrecise()); [EOL]     assertEquals(false, ethiopic.halfdays().isPrecise()); [EOL]     assertEquals(true, ethiopic.hours().isPrecise()); [EOL]     assertEquals(true, ethiopic.minutes().isPrecise()); [EOL]     assertEquals(true, ethiopic.seconds().isPrecise()); [EOL]     assertEquals(true, ethiopic.millis().isPrecise()); [EOL]     final EthiopicChronology ethiopicUTC = EthiopicChronology.getInstanceUTC(); [EOL]     assertEquals(false, ethiopicUTC.centuries().isPrecise()); [EOL]     assertEquals(false, ethiopicUTC.years().isPrecise()); [EOL]     assertEquals(false, ethiopicUTC.weekyears().isPrecise()); [EOL]     assertEquals(false, ethiopicUTC.months().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.weeks().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.days().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.halfdays().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.hours().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.minutes().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.seconds().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.millis().isPrecise()); [EOL]     final DateTimeZone gmt = DateTimeZone.forID("Etc/GMT"); [EOL]     final EthiopicChronology ethiopicGMT = EthiopicChronology.getInstance(gmt); [EOL]     assertEquals(false, ethiopicGMT.centuries().isPrecise()); [EOL]     assertEquals(false, ethiopicGMT.years().isPrecise()); [EOL]     assertEquals(false, ethiopicGMT.weekyears().isPrecise()); [EOL]     assertEquals(false, ethiopicGMT.months().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.weeks().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.days().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.halfdays().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.hours().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.minutes().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.seconds().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.millis().isPrecise()); [EOL] }
public void testParseMutableDateTime_zone() { [EOL]     MutableDateTime expect = null; [EOL]     expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON); [EOL]     assertEquals(expect, g.withZone(LONDON).parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON); [EOL]     assertEquals(expect, g.withZone(null).parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS); [EOL]     assertEquals(expect, g.withZone(PARIS).parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL] }
public void testParseMutableDateTime_zone() { [EOL]     MutableDateTime expect = null; [EOL]     expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON); [EOL]     assertEquals(expect, g.withZone(LONDON).parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON); [EOL]     assertEquals(expect, g.withZone(null).parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS); [EOL]     assertEquals(expect, g.withZone(PARIS).parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL] }
public void testParseInto_offsetParsed() { [EOL]     MutableDateTime expect = null; [EOL]     MutableDateTime result = null; [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     result = new MutableDateTime(0L); [EOL]     assertEquals(20, g.withOffsetParsed().parseInto(result, "2004-06-09T10:20:30Z", 0)); [EOL]     assertEquals(expect, result); [EOL]     expect = new MutableDateTime(2004, 6, 9, 6, 20, 30, 0, DateTimeZone.forOffsetHours(-4)); [EOL]     result = new MutableDateTime(0L); [EOL]     assertEquals(25, g.withOffsetParsed().parseInto(result, "2004-06-09T06:20:30-04:00", 0)); [EOL]     assertEquals(expect, result); [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     result = new MutableDateTime(0L); [EOL]     assertEquals(20, g.withZone(PARIS).withOffsetParsed().parseInto(result, "2004-06-09T10:20:30Z", 0)); [EOL]     assertEquals(expect, result); [EOL]     expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS); [EOL]     result = new MutableDateTime(0L); [EOL]     assertEquals(20, g.withOffsetParsed().withZone(PARIS).parseInto(result, "2004-06-09T10:20:30Z", 0)); [EOL]     assertEquals(expect, result); [EOL] }
public void testParseInto_offsetParsed() { [EOL]     MutableDateTime expect = null; [EOL]     MutableDateTime result = null; [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     result = new MutableDateTime(0L); [EOL]     assertEquals(20, g.withOffsetParsed().parseInto(result, "2004-06-09T10:20:30Z", 0)); [EOL]     assertEquals(expect, result); [EOL]     expect = new MutableDateTime(2004, 6, 9, 6, 20, 30, 0, DateTimeZone.forOffsetHours(-4)); [EOL]     result = new MutableDateTime(0L); [EOL]     assertEquals(25, g.withOffsetParsed().parseInto(result, "2004-06-09T06:20:30-04:00", 0)); [EOL]     assertEquals(expect, result); [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     result = new MutableDateTime(0L); [EOL]     assertEquals(20, g.withZone(PARIS).withOffsetParsed().parseInto(result, "2004-06-09T10:20:30Z", 0)); [EOL]     assertEquals(expect, result); [EOL]     expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS); [EOL]     result = new MutableDateTime(0L); [EOL]     assertEquals(20, g.withOffsetParsed().withZone(PARIS).parseInto(result, "2004-06-09T10:20:30Z", 0)); [EOL]     assertEquals(expect, result); [EOL] }
public void testParseInto_offsetParsed() { [EOL]     MutableDateTime expect = null; [EOL]     MutableDateTime result = null; [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     result = new MutableDateTime(0L); [EOL]     assertEquals(20, g.withOffsetParsed().parseInto(result, "2004-06-09T10:20:30Z", 0)); [EOL]     assertEquals(expect, result); [EOL]     expect = new MutableDateTime(2004, 6, 9, 6, 20, 30, 0, DateTimeZone.forOffsetHours(-4)); [EOL]     result = new MutableDateTime(0L); [EOL]     assertEquals(25, g.withOffsetParsed().parseInto(result, "2004-06-09T06:20:30-04:00", 0)); [EOL]     assertEquals(expect, result); [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     result = new MutableDateTime(0L); [EOL]     assertEquals(20, g.withZone(PARIS).withOffsetParsed().parseInto(result, "2004-06-09T10:20:30Z", 0)); [EOL]     assertEquals(expect, result); [EOL]     expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS); [EOL]     result = new MutableDateTime(0L); [EOL]     assertEquals(20, g.withOffsetParsed().withZone(PARIS).parseInto(result, "2004-06-09T10:20:30Z", 0)); [EOL]     assertEquals(expect, result); [EOL] }
public void testParseInto_offsetParsed() { [EOL]     MutableDateTime expect = null; [EOL]     MutableDateTime result = null; [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     result = new MutableDateTime(0L); [EOL]     assertEquals(20, g.withOffsetParsed().parseInto(result, "2004-06-09T10:20:30Z", 0)); [EOL]     assertEquals(expect, result); [EOL]     expect = new MutableDateTime(2004, 6, 9, 6, 20, 30, 0, DateTimeZone.forOffsetHours(-4)); [EOL]     result = new MutableDateTime(0L); [EOL]     assertEquals(25, g.withOffsetParsed().parseInto(result, "2004-06-09T06:20:30-04:00", 0)); [EOL]     assertEquals(expect, result); [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     result = new MutableDateTime(0L); [EOL]     assertEquals(20, g.withZone(PARIS).withOffsetParsed().parseInto(result, "2004-06-09T10:20:30Z", 0)); [EOL]     assertEquals(expect, result); [EOL]     expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS); [EOL]     result = new MutableDateTime(0L); [EOL]     assertEquals(20, g.withOffsetParsed().withZone(PARIS).parseInto(result, "2004-06-09T10:20:30Z", 0)); [EOL]     assertEquals(expect, result); [EOL] }
public void testParseLocalDateTime_simple() { [EOL]     assertEquals(new LocalDateTime(2004, 6, 9, 10, 20, 30), g.parseLocalDateTime("2004-06-09T10:20:30Z")); [EOL]     assertEquals(new LocalDateTime(2004, 6, 9, 10, 20, 30), g.parseLocalDateTime("2004-06-09T10:20:30+18:00")); [EOL]     assertEquals(new LocalDateTime(2004, 6, 9, 10, 20, 30), g.parseLocalDateTime("2004-06-09T10:20:30-18:00")); [EOL]     assertEquals(new LocalDateTime(2004, 6, 9, 10, 20, 30, 0, BUDDHIST_PARIS), g.withChronology(BUDDHIST_PARIS).parseLocalDateTime("2004-06-09T10:20:30Z")); [EOL]     try { [EOL]         g.parseDateTime("ABC"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testParseLocalDateTime_simple() { [EOL]     assertEquals(new LocalDateTime(2004, 6, 9, 10, 20, 30), g.parseLocalDateTime("2004-06-09T10:20:30Z")); [EOL]     assertEquals(new LocalDateTime(2004, 6, 9, 10, 20, 30), g.parseLocalDateTime("2004-06-09T10:20:30+18:00")); [EOL]     assertEquals(new LocalDateTime(2004, 6, 9, 10, 20, 30), g.parseLocalDateTime("2004-06-09T10:20:30-18:00")); [EOL]     assertEquals(new LocalDateTime(2004, 6, 9, 10, 20, 30, 0, BUDDHIST_PARIS), g.withChronology(BUDDHIST_PARIS).parseLocalDateTime("2004-06-09T10:20:30Z")); [EOL]     try { [EOL]         g.parseDateTime("ABC"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testParseLocalDateTime_simple() { [EOL]     assertEquals(new LocalDateTime(2004, 6, 9, 10, 20, 30), g.parseLocalDateTime("2004-06-09T10:20:30Z")); [EOL]     assertEquals(new LocalDateTime(2004, 6, 9, 10, 20, 30), g.parseLocalDateTime("2004-06-09T10:20:30+18:00")); [EOL]     assertEquals(new LocalDateTime(2004, 6, 9, 10, 20, 30), g.parseLocalDateTime("2004-06-09T10:20:30-18:00")); [EOL]     assertEquals(new LocalDateTime(2004, 6, 9, 10, 20, 30, 0, BUDDHIST_PARIS), g.withChronology(BUDDHIST_PARIS).parseLocalDateTime("2004-06-09T10:20:30Z")); [EOL]     try { [EOL]         g.parseDateTime("ABC"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testParseLocalDateTime_simple() { [EOL]     assertEquals(new LocalDateTime(2004, 6, 9, 10, 20, 30), g.parseLocalDateTime("2004-06-09T10:20:30Z")); [EOL]     assertEquals(new LocalDateTime(2004, 6, 9, 10, 20, 30), g.parseLocalDateTime("2004-06-09T10:20:30+18:00")); [EOL]     assertEquals(new LocalDateTime(2004, 6, 9, 10, 20, 30), g.parseLocalDateTime("2004-06-09T10:20:30-18:00")); [EOL]     assertEquals(new LocalDateTime(2004, 6, 9, 10, 20, 30, 0, BUDDHIST_PARIS), g.withChronology(BUDDHIST_PARIS).parseLocalDateTime("2004-06-09T10:20:30Z")); [EOL]     try { [EOL]         g.parseDateTime("ABC"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testReadablePartialValidate() { [EOL]     try { [EOL]         new YearMonthDay(1970, -5, 1); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("monthOfYear", e.getFieldName()); [EOL]         assertEquals(new Integer(-5), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("-5", e.getIllegalValueAsString()); [EOL]         assertEquals(new Integer(1), e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         new YearMonthDay(1970, 500, 1); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("monthOfYear", e.getFieldName()); [EOL]         assertEquals(new Integer(500), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("500", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(new Integer(12), e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         new YearMonthDay(1970, 2, 30); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.dayOfMonth(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("dayOfMonth", e.getFieldName()); [EOL]         assertEquals(new Integer(30), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("30", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(new Integer(28), e.getUpperBound()); [EOL]     } [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testReadablePartialValidate() { [EOL]     try { [EOL]         new YearMonthDay(1970, -5, 1); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("monthOfYear", e.getFieldName()); [EOL]         assertEquals(new Integer(-5), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("-5", e.getIllegalValueAsString()); [EOL]         assertEquals(new Integer(1), e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         new YearMonthDay(1970, 500, 1); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("monthOfYear", e.getFieldName()); [EOL]         assertEquals(new Integer(500), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("500", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(new Integer(12), e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         new YearMonthDay(1970, 2, 30); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.dayOfMonth(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("dayOfMonth", e.getFieldName()); [EOL]         assertEquals(new Integer(30), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("30", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(new Integer(28), e.getUpperBound()); [EOL]     } [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testReadablePartialValidate() { [EOL]     try { [EOL]         new YearMonthDay(1970, -5, 1); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("monthOfYear", e.getFieldName()); [EOL]         assertEquals(new Integer(-5), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("-5", e.getIllegalValueAsString()); [EOL]         assertEquals(new Integer(1), e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         new YearMonthDay(1970, 500, 1); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("monthOfYear", e.getFieldName()); [EOL]         assertEquals(new Integer(500), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("500", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(new Integer(12), e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         new YearMonthDay(1970, 2, 30); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.dayOfMonth(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("dayOfMonth", e.getFieldName()); [EOL]         assertEquals(new Integer(30), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("30", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(new Integer(28), e.getUpperBound()); [EOL]     } [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testReadablePartialValidate() { [EOL]     try { [EOL]         new YearMonthDay(1970, -5, 1); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("monthOfYear", e.getFieldName()); [EOL]         assertEquals(new Integer(-5), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("-5", e.getIllegalValueAsString()); [EOL]         assertEquals(new Integer(1), e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         new YearMonthDay(1970, 500, 1); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("monthOfYear", e.getFieldName()); [EOL]         assertEquals(new Integer(500), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("500", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(new Integer(12), e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         new YearMonthDay(1970, 2, 30); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.dayOfMonth(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("dayOfMonth", e.getFieldName()); [EOL]         assertEquals(new Integer(30), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("30", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(new Integer(28), e.getUpperBound()); [EOL]     } [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testReadablePartialValidate() { [EOL]     try { [EOL]         new YearMonthDay(1970, -5, 1); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("monthOfYear", e.getFieldName()); [EOL]         assertEquals(new Integer(-5), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("-5", e.getIllegalValueAsString()); [EOL]         assertEquals(new Integer(1), e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         new YearMonthDay(1970, 500, 1); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("monthOfYear", e.getFieldName()); [EOL]         assertEquals(new Integer(500), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("500", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(new Integer(12), e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         new YearMonthDay(1970, 2, 30); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.dayOfMonth(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("dayOfMonth", e.getFieldName()); [EOL]         assertEquals(new Integer(30), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("30", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(new Integer(28), e.getUpperBound()); [EOL]     } [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testReadablePartialValidate() { [EOL]     try { [EOL]         new YearMonthDay(1970, -5, 1); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("monthOfYear", e.getFieldName()); [EOL]         assertEquals(new Integer(-5), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("-5", e.getIllegalValueAsString()); [EOL]         assertEquals(new Integer(1), e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         new YearMonthDay(1970, 500, 1); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("monthOfYear", e.getFieldName()); [EOL]         assertEquals(new Integer(500), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("500", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(new Integer(12), e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         new YearMonthDay(1970, 2, 30); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.dayOfMonth(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("dayOfMonth", e.getFieldName()); [EOL]         assertEquals(new Integer(30), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("30", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(new Integer(28), e.getUpperBound()); [EOL]     } [EOL] }
public void testPropertyCompareToMonth() { [EOL]     YearMonth test1 = new YearMonth(TEST_TIME1); [EOL]     YearMonth test2 = new YearMonth(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonth() { [EOL]     YearMonth test1 = new YearMonth(TEST_TIME1); [EOL]     YearMonth test2 = new YearMonth(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testConstructor_long_long_Chronology1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance()); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, CopticChronology.getInstance()); [EOL]     MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), CopticChronology.getInstance()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] }
public void test_getType() { [EOL]     assertEquals(DurationFieldType.millis(), MillisDurationField.INSTANCE.getType()); [EOL] }
public void test_getValueAsLong_long() { [EOL]     assertEquals(0L, MillisDurationField.INSTANCE.getValueAsLong(0L)); [EOL]     assertEquals(1234L, MillisDurationField.INSTANCE.getValueAsLong(1234L)); [EOL]     assertEquals(-1234L, MillisDurationField.INSTANCE.getValueAsLong(-1234L)); [EOL]     assertEquals(((long) (Integer.MAX_VALUE)) + 1L, MillisDurationField.INSTANCE.getValueAsLong(((long) (Integer.MAX_VALUE)) + 1L)); [EOL] }
public void test_getDifference_long_int() { [EOL]     assertEquals(567, MillisDurationField.INSTANCE.getDifference(567L, 0L)); [EOL]     assertEquals(567 - 1234, MillisDurationField.INSTANCE.getDifference(567L, 1234L)); [EOL]     assertEquals(567 + 1234, MillisDurationField.INSTANCE.getDifference(567L, -1234L)); [EOL]     try { [EOL]         MillisDurationField.INSTANCE.getDifference(Long.MAX_VALUE, 1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void test_getDifference_long_int() { [EOL]     assertEquals(567, MillisDurationField.INSTANCE.getDifference(567L, 0L)); [EOL]     assertEquals(567 - 1234, MillisDurationField.INSTANCE.getDifference(567L, 1234L)); [EOL]     assertEquals(567 + 1234, MillisDurationField.INSTANCE.getDifference(567L, -1234L)); [EOL]     try { [EOL]         MillisDurationField.INSTANCE.getDifference(Long.MAX_VALUE, 1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void test_getDifference_long_int() { [EOL]     assertEquals(567, MillisDurationField.INSTANCE.getDifference(567L, 0L)); [EOL]     assertEquals(567 - 1234, MillisDurationField.INSTANCE.getDifference(567L, 1234L)); [EOL]     assertEquals(567 + 1234, MillisDurationField.INSTANCE.getDifference(567L, -1234L)); [EOL]     try { [EOL]         MillisDurationField.INSTANCE.getDifference(Long.MAX_VALUE, 1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void test_getDifference_long_int() { [EOL]     assertEquals(567, MillisDurationField.INSTANCE.getDifference(567L, 0L)); [EOL]     assertEquals(567 - 1234, MillisDurationField.INSTANCE.getDifference(567L, 1234L)); [EOL]     assertEquals(567 + 1234, MillisDurationField.INSTANCE.getDifference(567L, -1234L)); [EOL]     try { [EOL]         MillisDurationField.INSTANCE.getDifference(Long.MAX_VALUE, 1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void test_getDifference_long_int() { [EOL]     assertEquals(567, MillisDurationField.INSTANCE.getDifference(567L, 0L)); [EOL]     assertEquals(567 - 1234, MillisDurationField.INSTANCE.getDifference(567L, 1234L)); [EOL]     assertEquals(567 + 1234, MillisDurationField.INSTANCE.getDifference(567L, -1234L)); [EOL]     try { [EOL]         MillisDurationField.INSTANCE.getDifference(Long.MAX_VALUE, 1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] }
public void testPropertyGetMilli() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40); [EOL]     assertSame(test.getChronology().millisOfSecond(), test.millisOfSecond().getField()); [EOL]     assertEquals("millisOfSecond", test.millisOfSecond().getName()); [EOL]     assertEquals("Property[millisOfSecond]", test.millisOfSecond().toString()); [EOL]     assertSame(test, test.millisOfSecond().getLocalDateTime()); [EOL]     assertEquals(40, test.millisOfSecond().get()); [EOL]     assertEquals("40", test.millisOfSecond().getAsString()); [EOL]     assertEquals("40", test.millisOfSecond().getAsText()); [EOL]     assertEquals("40", test.millisOfSecond().getAsText(Locale.FRENCH)); [EOL]     assertEquals("40", test.millisOfSecond().getAsShortText()); [EOL]     assertEquals("40", test.millisOfSecond().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().millis(), test.millisOfSecond().getDurationField()); [EOL]     assertEquals(test.getChronology().seconds(), test.millisOfSecond().getRangeDurationField()); [EOL]     assertEquals(3, test.millisOfSecond().getMaximumTextLength(null)); [EOL]     assertEquals(3, test.millisOfSecond().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyGetMilli() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40); [EOL]     assertSame(test.getChronology().millisOfSecond(), test.millisOfSecond().getField()); [EOL]     assertEquals("millisOfSecond", test.millisOfSecond().getName()); [EOL]     assertEquals("Property[millisOfSecond]", test.millisOfSecond().toString()); [EOL]     assertSame(test, test.millisOfSecond().getLocalDateTime()); [EOL]     assertEquals(40, test.millisOfSecond().get()); [EOL]     assertEquals("40", test.millisOfSecond().getAsString()); [EOL]     assertEquals("40", test.millisOfSecond().getAsText()); [EOL]     assertEquals("40", test.millisOfSecond().getAsText(Locale.FRENCH)); [EOL]     assertEquals("40", test.millisOfSecond().getAsShortText()); [EOL]     assertEquals("40", test.millisOfSecond().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().millis(), test.millisOfSecond().getDurationField()); [EOL]     assertEquals(test.getChronology().seconds(), test.millisOfSecond().getRangeDurationField()); [EOL]     assertEquals(3, test.millisOfSecond().getMaximumTextLength(null)); [EOL]     assertEquals(3, test.millisOfSecond().getMaximumShortTextLength(null)); [EOL] }
public void testPropertyGetMilli() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40); [EOL]     assertSame(test.getChronology().millisOfSecond(), test.millisOfSecond().getField()); [EOL]     assertEquals("millisOfSecond", test.millisOfSecond().getName()); [EOL]     assertEquals("Property[millisOfSecond]", test.millisOfSecond().toString()); [EOL]     assertSame(test, test.millisOfSecond().getLocalDateTime()); [EOL]     assertEquals(40, test.millisOfSecond().get()); [EOL]     assertEquals("40", test.millisOfSecond().getAsString()); [EOL]     assertEquals("40", test.millisOfSecond().getAsText()); [EOL]     assertEquals("40", test.millisOfSecond().getAsText(Locale.FRENCH)); [EOL]     assertEquals("40", test.millisOfSecond().getAsShortText()); [EOL]     assertEquals("40", test.millisOfSecond().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().millis(), test.millisOfSecond().getDurationField()); [EOL]     assertEquals(test.getChronology().seconds(), test.millisOfSecond().getRangeDurationField()); [EOL]     assertEquals(3, test.millisOfSecond().getMaximumTextLength(null)); [EOL]     assertEquals(3, test.millisOfSecond().getMaximumShortTextLength(null)); [EOL] }
public void testSerialization() throws Exception { [EOL]     DurationField test = MillisDurationField.INSTANCE; [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     DurationField result = (DurationField) ois.readObject(); [EOL]     ois.close(); [EOL]     assertSame(test, result); [EOL] }
public void testGet_DateTimeFieldType() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40); [EOL]     assertEquals(1970, test.get(DateTimeFieldType.year())); [EOL]     assertEquals(6, test.get(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(9, test.get(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(2, test.get(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(160, test.get(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(24, test.get(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(1970, test.get(DateTimeFieldType.weekyear())); [EOL]     assertEquals(10, test.get(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(20, test.get(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(30, test.get(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(40, test.get(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(MILLIS_OF_DAY_UTC / 60000, test.get(DateTimeFieldType.minuteOfDay())); [EOL]     assertEquals(MILLIS_OF_DAY_UTC / 1000, test.get(DateTimeFieldType.secondOfDay())); [EOL]     assertEquals(MILLIS_OF_DAY_UTC, test.get(DateTimeFieldType.millisOfDay())); [EOL]     assertEquals(10, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(DateTimeConstants.AM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     test = new LocalDateTime(1970, 6, 9, 12, 30); [EOL]     assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(DateTimeConstants.PM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     test = new LocalDateTime(1970, 6, 9, 14, 30); [EOL]     assertEquals(2, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(2, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(14, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(DateTimeConstants.PM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     test = new LocalDateTime(1970, 6, 9, 0, 30); [EOL]     assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(24, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(DateTimeConstants.AM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     try { [EOL]         test.get(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGet_DateTimeFieldType() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40); [EOL]     assertEquals(1970, test.get(DateTimeFieldType.year())); [EOL]     assertEquals(6, test.get(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(9, test.get(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(2, test.get(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(160, test.get(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(24, test.get(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(1970, test.get(DateTimeFieldType.weekyear())); [EOL]     assertEquals(10, test.get(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(20, test.get(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(30, test.get(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(40, test.get(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(MILLIS_OF_DAY_UTC / 60000, test.get(DateTimeFieldType.minuteOfDay())); [EOL]     assertEquals(MILLIS_OF_DAY_UTC / 1000, test.get(DateTimeFieldType.secondOfDay())); [EOL]     assertEquals(MILLIS_OF_DAY_UTC, test.get(DateTimeFieldType.millisOfDay())); [EOL]     assertEquals(10, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(DateTimeConstants.AM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     test = new LocalDateTime(1970, 6, 9, 12, 30); [EOL]     assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(DateTimeConstants.PM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     test = new LocalDateTime(1970, 6, 9, 14, 30); [EOL]     assertEquals(2, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(2, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(14, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(DateTimeConstants.PM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     test = new LocalDateTime(1970, 6, 9, 0, 30); [EOL]     assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(24, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(DateTimeConstants.AM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     try { [EOL]         test.get(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGet_DateTimeFieldType() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40); [EOL]     assertEquals(1970, test.get(DateTimeFieldType.year())); [EOL]     assertEquals(6, test.get(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(9, test.get(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(2, test.get(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(160, test.get(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(24, test.get(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(1970, test.get(DateTimeFieldType.weekyear())); [EOL]     assertEquals(10, test.get(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(20, test.get(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(30, test.get(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(40, test.get(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(MILLIS_OF_DAY_UTC / 60000, test.get(DateTimeFieldType.minuteOfDay())); [EOL]     assertEquals(MILLIS_OF_DAY_UTC / 1000, test.get(DateTimeFieldType.secondOfDay())); [EOL]     assertEquals(MILLIS_OF_DAY_UTC, test.get(DateTimeFieldType.millisOfDay())); [EOL]     assertEquals(10, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(DateTimeConstants.AM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     test = new LocalDateTime(1970, 6, 9, 12, 30); [EOL]     assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(DateTimeConstants.PM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     test = new LocalDateTime(1970, 6, 9, 14, 30); [EOL]     assertEquals(2, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(2, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(14, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(DateTimeConstants.PM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     test = new LocalDateTime(1970, 6, 9, 0, 30); [EOL]     assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(24, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(DateTimeConstants.AM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     try { [EOL]         test.get(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGet_DateTimeFieldType() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40); [EOL]     assertEquals(1970, test.get(DateTimeFieldType.year())); [EOL]     assertEquals(6, test.get(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(9, test.get(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(2, test.get(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(160, test.get(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(24, test.get(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(1970, test.get(DateTimeFieldType.weekyear())); [EOL]     assertEquals(10, test.get(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(20, test.get(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(30, test.get(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(40, test.get(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(MILLIS_OF_DAY_UTC / 60000, test.get(DateTimeFieldType.minuteOfDay())); [EOL]     assertEquals(MILLIS_OF_DAY_UTC / 1000, test.get(DateTimeFieldType.secondOfDay())); [EOL]     assertEquals(MILLIS_OF_DAY_UTC, test.get(DateTimeFieldType.millisOfDay())); [EOL]     assertEquals(10, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(DateTimeConstants.AM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     test = new LocalDateTime(1970, 6, 9, 12, 30); [EOL]     assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(DateTimeConstants.PM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     test = new LocalDateTime(1970, 6, 9, 14, 30); [EOL]     assertEquals(2, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(2, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(14, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(DateTimeConstants.PM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     test = new LocalDateTime(1970, 6, 9, 0, 30); [EOL]     assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(24, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(DateTimeConstants.AM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     try { [EOL]         test.get(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGet_DateTimeFieldType() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40); [EOL]     assertEquals(1970, test.get(DateTimeFieldType.year())); [EOL]     assertEquals(6, test.get(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(9, test.get(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(2, test.get(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(160, test.get(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(24, test.get(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(1970, test.get(DateTimeFieldType.weekyear())); [EOL]     assertEquals(10, test.get(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(20, test.get(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(30, test.get(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(40, test.get(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(MILLIS_OF_DAY_UTC / 60000, test.get(DateTimeFieldType.minuteOfDay())); [EOL]     assertEquals(MILLIS_OF_DAY_UTC / 1000, test.get(DateTimeFieldType.secondOfDay())); [EOL]     assertEquals(MILLIS_OF_DAY_UTC, test.get(DateTimeFieldType.millisOfDay())); [EOL]     assertEquals(10, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(DateTimeConstants.AM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     test = new LocalDateTime(1970, 6, 9, 12, 30); [EOL]     assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(DateTimeConstants.PM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     test = new LocalDateTime(1970, 6, 9, 14, 30); [EOL]     assertEquals(2, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(2, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(14, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(DateTimeConstants.PM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     test = new LocalDateTime(1970, 6, 9, 0, 30); [EOL]     assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(24, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(DateTimeConstants.AM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     try { [EOL]         test.get(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGet_DateTimeFieldType() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40); [EOL]     assertEquals(1970, test.get(DateTimeFieldType.year())); [EOL]     assertEquals(6, test.get(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(9, test.get(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(2, test.get(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(160, test.get(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(24, test.get(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(1970, test.get(DateTimeFieldType.weekyear())); [EOL]     assertEquals(10, test.get(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(20, test.get(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(30, test.get(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(40, test.get(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(MILLIS_OF_DAY_UTC / 60000, test.get(DateTimeFieldType.minuteOfDay())); [EOL]     assertEquals(MILLIS_OF_DAY_UTC / 1000, test.get(DateTimeFieldType.secondOfDay())); [EOL]     assertEquals(MILLIS_OF_DAY_UTC, test.get(DateTimeFieldType.millisOfDay())); [EOL]     assertEquals(10, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(DateTimeConstants.AM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     test = new LocalDateTime(1970, 6, 9, 12, 30); [EOL]     assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(DateTimeConstants.PM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     test = new LocalDateTime(1970, 6, 9, 14, 30); [EOL]     assertEquals(2, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(2, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(14, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(DateTimeConstants.PM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     test = new LocalDateTime(1970, 6, 9, 0, 30); [EOL]     assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(24, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(DateTimeConstants.AM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     try { [EOL]         test.get(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGet_DateTimeFieldType() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40); [EOL]     assertEquals(1970, test.get(DateTimeFieldType.year())); [EOL]     assertEquals(6, test.get(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(9, test.get(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(2, test.get(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(160, test.get(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(24, test.get(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(1970, test.get(DateTimeFieldType.weekyear())); [EOL]     assertEquals(10, test.get(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(20, test.get(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(30, test.get(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(40, test.get(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(MILLIS_OF_DAY_UTC / 60000, test.get(DateTimeFieldType.minuteOfDay())); [EOL]     assertEquals(MILLIS_OF_DAY_UTC / 1000, test.get(DateTimeFieldType.secondOfDay())); [EOL]     assertEquals(MILLIS_OF_DAY_UTC, test.get(DateTimeFieldType.millisOfDay())); [EOL]     assertEquals(10, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(DateTimeConstants.AM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     test = new LocalDateTime(1970, 6, 9, 12, 30); [EOL]     assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(DateTimeConstants.PM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     test = new LocalDateTime(1970, 6, 9, 14, 30); [EOL]     assertEquals(2, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(2, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(14, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(DateTimeConstants.PM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     test = new LocalDateTime(1970, 6, 9, 0, 30); [EOL]     assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(24, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(DateTimeConstants.AM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     try { [EOL]         test.get(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGet_DateTimeFieldType() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40); [EOL]     assertEquals(1970, test.get(DateTimeFieldType.year())); [EOL]     assertEquals(6, test.get(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(9, test.get(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(2, test.get(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(160, test.get(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(24, test.get(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(1970, test.get(DateTimeFieldType.weekyear())); [EOL]     assertEquals(10, test.get(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(20, test.get(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(30, test.get(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(40, test.get(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(MILLIS_OF_DAY_UTC / 60000, test.get(DateTimeFieldType.minuteOfDay())); [EOL]     assertEquals(MILLIS_OF_DAY_UTC / 1000, test.get(DateTimeFieldType.secondOfDay())); [EOL]     assertEquals(MILLIS_OF_DAY_UTC, test.get(DateTimeFieldType.millisOfDay())); [EOL]     assertEquals(10, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(DateTimeConstants.AM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     test = new LocalDateTime(1970, 6, 9, 12, 30); [EOL]     assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(DateTimeConstants.PM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     test = new LocalDateTime(1970, 6, 9, 14, 30); [EOL]     assertEquals(2, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(2, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(14, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(DateTimeConstants.PM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     test = new LocalDateTime(1970, 6, 9, 0, 30); [EOL]     assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(24, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(DateTimeConstants.AM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     try { [EOL]         test.get(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGet_DateTimeFieldType() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40); [EOL]     assertEquals(1970, test.get(DateTimeFieldType.year())); [EOL]     assertEquals(6, test.get(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(9, test.get(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(2, test.get(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(160, test.get(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(24, test.get(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(1970, test.get(DateTimeFieldType.weekyear())); [EOL]     assertEquals(10, test.get(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(20, test.get(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(30, test.get(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(40, test.get(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(MILLIS_OF_DAY_UTC / 60000, test.get(DateTimeFieldType.minuteOfDay())); [EOL]     assertEquals(MILLIS_OF_DAY_UTC / 1000, test.get(DateTimeFieldType.secondOfDay())); [EOL]     assertEquals(MILLIS_OF_DAY_UTC, test.get(DateTimeFieldType.millisOfDay())); [EOL]     assertEquals(10, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(DateTimeConstants.AM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     test = new LocalDateTime(1970, 6, 9, 12, 30); [EOL]     assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(DateTimeConstants.PM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     test = new LocalDateTime(1970, 6, 9, 14, 30); [EOL]     assertEquals(2, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(2, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(14, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(DateTimeConstants.PM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     test = new LocalDateTime(1970, 6, 9, 0, 30); [EOL]     assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(24, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(DateTimeConstants.AM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     try { [EOL]         test.get(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGet_DateTimeFieldType() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40); [EOL]     assertEquals(1970, test.get(DateTimeFieldType.year())); [EOL]     assertEquals(6, test.get(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(9, test.get(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(2, test.get(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(160, test.get(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(24, test.get(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(1970, test.get(DateTimeFieldType.weekyear())); [EOL]     assertEquals(10, test.get(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(20, test.get(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(30, test.get(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(40, test.get(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(MILLIS_OF_DAY_UTC / 60000, test.get(DateTimeFieldType.minuteOfDay())); [EOL]     assertEquals(MILLIS_OF_DAY_UTC / 1000, test.get(DateTimeFieldType.secondOfDay())); [EOL]     assertEquals(MILLIS_OF_DAY_UTC, test.get(DateTimeFieldType.millisOfDay())); [EOL]     assertEquals(10, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(DateTimeConstants.AM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     test = new LocalDateTime(1970, 6, 9, 12, 30); [EOL]     assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(DateTimeConstants.PM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     test = new LocalDateTime(1970, 6, 9, 14, 30); [EOL]     assertEquals(2, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(2, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(14, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(DateTimeConstants.PM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     test = new LocalDateTime(1970, 6, 9, 0, 30); [EOL]     assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(24, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(DateTimeConstants.AM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     try { [EOL]         test.get(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGet_DateTimeFieldType() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40); [EOL]     assertEquals(1970, test.get(DateTimeFieldType.year())); [EOL]     assertEquals(6, test.get(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(9, test.get(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(2, test.get(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(160, test.get(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(24, test.get(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(1970, test.get(DateTimeFieldType.weekyear())); [EOL]     assertEquals(10, test.get(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(20, test.get(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(30, test.get(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(40, test.get(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(MILLIS_OF_DAY_UTC / 60000, test.get(DateTimeFieldType.minuteOfDay())); [EOL]     assertEquals(MILLIS_OF_DAY_UTC / 1000, test.get(DateTimeFieldType.secondOfDay())); [EOL]     assertEquals(MILLIS_OF_DAY_UTC, test.get(DateTimeFieldType.millisOfDay())); [EOL]     assertEquals(10, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(DateTimeConstants.AM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     test = new LocalDateTime(1970, 6, 9, 12, 30); [EOL]     assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(DateTimeConstants.PM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     test = new LocalDateTime(1970, 6, 9, 14, 30); [EOL]     assertEquals(2, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(2, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(14, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(DateTimeConstants.PM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     test = new LocalDateTime(1970, 6, 9, 0, 30); [EOL]     assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(24, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(DateTimeConstants.AM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     try { [EOL]         test.get(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGet_DateTimeFieldType() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40); [EOL]     assertEquals(1970, test.get(DateTimeFieldType.year())); [EOL]     assertEquals(6, test.get(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(9, test.get(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(2, test.get(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(160, test.get(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(24, test.get(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(1970, test.get(DateTimeFieldType.weekyear())); [EOL]     assertEquals(10, test.get(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(20, test.get(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(30, test.get(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(40, test.get(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(MILLIS_OF_DAY_UTC / 60000, test.get(DateTimeFieldType.minuteOfDay())); [EOL]     assertEquals(MILLIS_OF_DAY_UTC / 1000, test.get(DateTimeFieldType.secondOfDay())); [EOL]     assertEquals(MILLIS_OF_DAY_UTC, test.get(DateTimeFieldType.millisOfDay())); [EOL]     assertEquals(10, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(DateTimeConstants.AM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     test = new LocalDateTime(1970, 6, 9, 12, 30); [EOL]     assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(DateTimeConstants.PM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     test = new LocalDateTime(1970, 6, 9, 14, 30); [EOL]     assertEquals(2, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(2, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(14, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(DateTimeConstants.PM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     test = new LocalDateTime(1970, 6, 9, 0, 30); [EOL]     assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(24, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(DateTimeConstants.AM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     try { [EOL]         test.get(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGet_DateTimeFieldType() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40); [EOL]     assertEquals(1970, test.get(DateTimeFieldType.year())); [EOL]     assertEquals(6, test.get(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(9, test.get(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(2, test.get(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(160, test.get(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(24, test.get(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(1970, test.get(DateTimeFieldType.weekyear())); [EOL]     assertEquals(10, test.get(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(20, test.get(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(30, test.get(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(40, test.get(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(MILLIS_OF_DAY_UTC / 60000, test.get(DateTimeFieldType.minuteOfDay())); [EOL]     assertEquals(MILLIS_OF_DAY_UTC / 1000, test.get(DateTimeFieldType.secondOfDay())); [EOL]     assertEquals(MILLIS_OF_DAY_UTC, test.get(DateTimeFieldType.millisOfDay())); [EOL]     assertEquals(10, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(DateTimeConstants.AM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     test = new LocalDateTime(1970, 6, 9, 12, 30); [EOL]     assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(DateTimeConstants.PM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     test = new LocalDateTime(1970, 6, 9, 14, 30); [EOL]     assertEquals(2, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(2, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(14, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(DateTimeConstants.PM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     test = new LocalDateTime(1970, 6, 9, 0, 30); [EOL]     assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(24, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(DateTimeConstants.AM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     try { [EOL]         test.get(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGet_DateTimeFieldType() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40); [EOL]     assertEquals(1970, test.get(DateTimeFieldType.year())); [EOL]     assertEquals(6, test.get(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(9, test.get(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(2, test.get(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(160, test.get(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(24, test.get(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(1970, test.get(DateTimeFieldType.weekyear())); [EOL]     assertEquals(10, test.get(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(20, test.get(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(30, test.get(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(40, test.get(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(MILLIS_OF_DAY_UTC / 60000, test.get(DateTimeFieldType.minuteOfDay())); [EOL]     assertEquals(MILLIS_OF_DAY_UTC / 1000, test.get(DateTimeFieldType.secondOfDay())); [EOL]     assertEquals(MILLIS_OF_DAY_UTC, test.get(DateTimeFieldType.millisOfDay())); [EOL]     assertEquals(10, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(DateTimeConstants.AM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     test = new LocalDateTime(1970, 6, 9, 12, 30); [EOL]     assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(DateTimeConstants.PM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     test = new LocalDateTime(1970, 6, 9, 14, 30); [EOL]     assertEquals(2, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(2, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(14, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(DateTimeConstants.PM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     test = new LocalDateTime(1970, 6, 9, 0, 30); [EOL]     assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(24, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(DateTimeConstants.AM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     try { [EOL]         test.get(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGet_DateTimeFieldType() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40); [EOL]     assertEquals(1970, test.get(DateTimeFieldType.year())); [EOL]     assertEquals(6, test.get(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(9, test.get(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(2, test.get(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(160, test.get(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(24, test.get(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(1970, test.get(DateTimeFieldType.weekyear())); [EOL]     assertEquals(10, test.get(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(20, test.get(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(30, test.get(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(40, test.get(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(MILLIS_OF_DAY_UTC / 60000, test.get(DateTimeFieldType.minuteOfDay())); [EOL]     assertEquals(MILLIS_OF_DAY_UTC / 1000, test.get(DateTimeFieldType.secondOfDay())); [EOL]     assertEquals(MILLIS_OF_DAY_UTC, test.get(DateTimeFieldType.millisOfDay())); [EOL]     assertEquals(10, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(DateTimeConstants.AM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     test = new LocalDateTime(1970, 6, 9, 12, 30); [EOL]     assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(DateTimeConstants.PM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     test = new LocalDateTime(1970, 6, 9, 14, 30); [EOL]     assertEquals(2, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(2, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(14, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(DateTimeConstants.PM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     test = new LocalDateTime(1970, 6, 9, 0, 30); [EOL]     assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(24, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(DateTimeConstants.AM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     try { [EOL]         test.get(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGet_DateTimeFieldType() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40); [EOL]     assertEquals(1970, test.get(DateTimeFieldType.year())); [EOL]     assertEquals(6, test.get(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(9, test.get(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(2, test.get(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(160, test.get(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(24, test.get(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(1970, test.get(DateTimeFieldType.weekyear())); [EOL]     assertEquals(10, test.get(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(20, test.get(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(30, test.get(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(40, test.get(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(MILLIS_OF_DAY_UTC / 60000, test.get(DateTimeFieldType.minuteOfDay())); [EOL]     assertEquals(MILLIS_OF_DAY_UTC / 1000, test.get(DateTimeFieldType.secondOfDay())); [EOL]     assertEquals(MILLIS_OF_DAY_UTC, test.get(DateTimeFieldType.millisOfDay())); [EOL]     assertEquals(10, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(DateTimeConstants.AM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     test = new LocalDateTime(1970, 6, 9, 12, 30); [EOL]     assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(DateTimeConstants.PM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     test = new LocalDateTime(1970, 6, 9, 14, 30); [EOL]     assertEquals(2, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(2, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(14, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(DateTimeConstants.PM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     test = new LocalDateTime(1970, 6, 9, 0, 30); [EOL]     assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(24, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(DateTimeConstants.AM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     try { [EOL]         test.get(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGet_DateTimeFieldType() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40); [EOL]     assertEquals(1970, test.get(DateTimeFieldType.year())); [EOL]     assertEquals(6, test.get(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(9, test.get(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(2, test.get(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(160, test.get(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(24, test.get(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(1970, test.get(DateTimeFieldType.weekyear())); [EOL]     assertEquals(10, test.get(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(20, test.get(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(30, test.get(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(40, test.get(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(MILLIS_OF_DAY_UTC / 60000, test.get(DateTimeFieldType.minuteOfDay())); [EOL]     assertEquals(MILLIS_OF_DAY_UTC / 1000, test.get(DateTimeFieldType.secondOfDay())); [EOL]     assertEquals(MILLIS_OF_DAY_UTC, test.get(DateTimeFieldType.millisOfDay())); [EOL]     assertEquals(10, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(DateTimeConstants.AM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     test = new LocalDateTime(1970, 6, 9, 12, 30); [EOL]     assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(DateTimeConstants.PM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     test = new LocalDateTime(1970, 6, 9, 14, 30); [EOL]     assertEquals(2, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(2, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(14, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(DateTimeConstants.PM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     test = new LocalDateTime(1970, 6, 9, 0, 30); [EOL]     assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(24, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(DateTimeConstants.AM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     try { [EOL]         test.get(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGet_DateTimeFieldType() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40); [EOL]     assertEquals(1970, test.get(DateTimeFieldType.year())); [EOL]     assertEquals(6, test.get(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(9, test.get(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(2, test.get(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(160, test.get(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(24, test.get(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(1970, test.get(DateTimeFieldType.weekyear())); [EOL]     assertEquals(10, test.get(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(20, test.get(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(30, test.get(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(40, test.get(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(MILLIS_OF_DAY_UTC / 60000, test.get(DateTimeFieldType.minuteOfDay())); [EOL]     assertEquals(MILLIS_OF_DAY_UTC / 1000, test.get(DateTimeFieldType.secondOfDay())); [EOL]     assertEquals(MILLIS_OF_DAY_UTC, test.get(DateTimeFieldType.millisOfDay())); [EOL]     assertEquals(10, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(DateTimeConstants.AM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     test = new LocalDateTime(1970, 6, 9, 12, 30); [EOL]     assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(DateTimeConstants.PM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     test = new LocalDateTime(1970, 6, 9, 14, 30); [EOL]     assertEquals(2, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(2, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(14, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(DateTimeConstants.PM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     test = new LocalDateTime(1970, 6, 9, 0, 30); [EOL]     assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(24, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(DateTimeConstants.AM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     try { [EOL]         test.get(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGet_DateTimeFieldType() { [EOL]     Instant test = new Instant(); [EOL]     assertEquals(1, test.get(DateTimeFieldType.era())); [EOL]     assertEquals(20, test.get(DateTimeFieldType.centuryOfEra())); [EOL]     assertEquals(2, test.get(DateTimeFieldType.yearOfCentury())); [EOL]     assertEquals(2002, test.get(DateTimeFieldType.yearOfEra())); [EOL]     assertEquals(2002, test.get(DateTimeFieldType.year())); [EOL]     assertEquals(6, test.get(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(9, test.get(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(2002, test.get(DateTimeFieldType.weekyear())); [EOL]     assertEquals(23, test.get(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(7, test.get(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(160, test.get(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(24, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.minuteOfDay())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.secondOfDay())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.millisOfDay())); [EOL]     try { [EOL]         test.get((DateTimeFieldType) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGet_DateTimeFieldType() { [EOL]     Instant test = new Instant(); [EOL]     assertEquals(1, test.get(DateTimeFieldType.era())); [EOL]     assertEquals(20, test.get(DateTimeFieldType.centuryOfEra())); [EOL]     assertEquals(2, test.get(DateTimeFieldType.yearOfCentury())); [EOL]     assertEquals(2002, test.get(DateTimeFieldType.yearOfEra())); [EOL]     assertEquals(2002, test.get(DateTimeFieldType.year())); [EOL]     assertEquals(6, test.get(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(9, test.get(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(2002, test.get(DateTimeFieldType.weekyear())); [EOL]     assertEquals(23, test.get(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(7, test.get(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(160, test.get(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(24, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.minuteOfDay())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.secondOfDay())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.millisOfDay())); [EOL]     try { [EOL]         test.get((DateTimeFieldType) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testEqualsHashCode() { [EOL]     DateTimeComparator c1 = DateTimeComparator.getInstance(); [EOL]     assertEquals(true, c1.equals(c1)); [EOL]     assertEquals(false, c1.equals(null)); [EOL]     assertEquals(true, c1.hashCode() == c1.hashCode()); [EOL]     DateTimeComparator c2 = DateTimeComparator.getTimeOnlyInstance(); [EOL]     assertEquals(true, c2.equals(c2)); [EOL]     assertEquals(false, c2.equals(c1)); [EOL]     assertEquals(false, c1.equals(c2)); [EOL]     assertEquals(false, c2.equals(null)); [EOL]     assertEquals(false, c1.hashCode() == c2.hashCode()); [EOL]     DateTimeComparator c3 = DateTimeComparator.getTimeOnlyInstance(); [EOL]     assertEquals(true, c3.equals(c3)); [EOL]     assertEquals(false, c3.equals(c1)); [EOL]     assertEquals(true, c3.equals(c2)); [EOL]     assertEquals(false, c1.equals(c3)); [EOL]     assertEquals(true, c2.equals(c3)); [EOL]     assertEquals(false, c1.hashCode() == c3.hashCode()); [EOL]     assertEquals(true, c2.hashCode() == c3.hashCode()); [EOL]     DateTimeComparator c4 = DateTimeComparator.getDateOnlyInstance(); [EOL]     assertEquals(false, c4.hashCode() == c3.hashCode()); [EOL] }
public void testEqualsHashCode() { [EOL]     DateTimeComparator c1 = DateTimeComparator.getInstance(); [EOL]     assertEquals(true, c1.equals(c1)); [EOL]     assertEquals(false, c1.equals(null)); [EOL]     assertEquals(true, c1.hashCode() == c1.hashCode()); [EOL]     DateTimeComparator c2 = DateTimeComparator.getTimeOnlyInstance(); [EOL]     assertEquals(true, c2.equals(c2)); [EOL]     assertEquals(false, c2.equals(c1)); [EOL]     assertEquals(false, c1.equals(c2)); [EOL]     assertEquals(false, c2.equals(null)); [EOL]     assertEquals(false, c1.hashCode() == c2.hashCode()); [EOL]     DateTimeComparator c3 = DateTimeComparator.getTimeOnlyInstance(); [EOL]     assertEquals(true, c3.equals(c3)); [EOL]     assertEquals(false, c3.equals(c1)); [EOL]     assertEquals(true, c3.equals(c2)); [EOL]     assertEquals(false, c1.equals(c3)); [EOL]     assertEquals(true, c2.equals(c3)); [EOL]     assertEquals(false, c1.hashCode() == c3.hashCode()); [EOL]     assertEquals(true, c2.hashCode() == c3.hashCode()); [EOL]     DateTimeComparator c4 = DateTimeComparator.getDateOnlyInstance(); [EOL]     assertEquals(false, c4.hashCode() == c3.hashCode()); [EOL] }
public void testEqualsHashCode() { [EOL]     DateTimeComparator c1 = DateTimeComparator.getInstance(); [EOL]     assertEquals(true, c1.equals(c1)); [EOL]     assertEquals(false, c1.equals(null)); [EOL]     assertEquals(true, c1.hashCode() == c1.hashCode()); [EOL]     DateTimeComparator c2 = DateTimeComparator.getTimeOnlyInstance(); [EOL]     assertEquals(true, c2.equals(c2)); [EOL]     assertEquals(false, c2.equals(c1)); [EOL]     assertEquals(false, c1.equals(c2)); [EOL]     assertEquals(false, c2.equals(null)); [EOL]     assertEquals(false, c1.hashCode() == c2.hashCode()); [EOL]     DateTimeComparator c3 = DateTimeComparator.getTimeOnlyInstance(); [EOL]     assertEquals(true, c3.equals(c3)); [EOL]     assertEquals(false, c3.equals(c1)); [EOL]     assertEquals(true, c3.equals(c2)); [EOL]     assertEquals(false, c1.equals(c3)); [EOL]     assertEquals(true, c2.equals(c3)); [EOL]     assertEquals(false, c1.hashCode() == c3.hashCode()); [EOL]     assertEquals(true, c2.hashCode() == c3.hashCode()); [EOL]     DateTimeComparator c4 = DateTimeComparator.getDateOnlyInstance(); [EOL]     assertEquals(false, c4.hashCode() == c3.hashCode()); [EOL] }
public void testEqualsHashCode() { [EOL]     DateTimeComparator c1 = DateTimeComparator.getInstance(); [EOL]     assertEquals(true, c1.equals(c1)); [EOL]     assertEquals(false, c1.equals(null)); [EOL]     assertEquals(true, c1.hashCode() == c1.hashCode()); [EOL]     DateTimeComparator c2 = DateTimeComparator.getTimeOnlyInstance(); [EOL]     assertEquals(true, c2.equals(c2)); [EOL]     assertEquals(false, c2.equals(c1)); [EOL]     assertEquals(false, c1.equals(c2)); [EOL]     assertEquals(false, c2.equals(null)); [EOL]     assertEquals(false, c1.hashCode() == c2.hashCode()); [EOL]     DateTimeComparator c3 = DateTimeComparator.getTimeOnlyInstance(); [EOL]     assertEquals(true, c3.equals(c3)); [EOL]     assertEquals(false, c3.equals(c1)); [EOL]     assertEquals(true, c3.equals(c2)); [EOL]     assertEquals(false, c1.equals(c3)); [EOL]     assertEquals(true, c2.equals(c3)); [EOL]     assertEquals(false, c1.hashCode() == c3.hashCode()); [EOL]     assertEquals(true, c2.hashCode() == c3.hashCode()); [EOL]     DateTimeComparator c4 = DateTimeComparator.getDateOnlyInstance(); [EOL]     assertEquals(false, c4.hashCode() == c3.hashCode()); [EOL] }
public void testEqualsHashCode() { [EOL]     DateTimeComparator c1 = DateTimeComparator.getInstance(); [EOL]     assertEquals(true, c1.equals(c1)); [EOL]     assertEquals(false, c1.equals(null)); [EOL]     assertEquals(true, c1.hashCode() == c1.hashCode()); [EOL]     DateTimeComparator c2 = DateTimeComparator.getTimeOnlyInstance(); [EOL]     assertEquals(true, c2.equals(c2)); [EOL]     assertEquals(false, c2.equals(c1)); [EOL]     assertEquals(false, c1.equals(c2)); [EOL]     assertEquals(false, c2.equals(null)); [EOL]     assertEquals(false, c1.hashCode() == c2.hashCode()); [EOL]     DateTimeComparator c3 = DateTimeComparator.getTimeOnlyInstance(); [EOL]     assertEquals(true, c3.equals(c3)); [EOL]     assertEquals(false, c3.equals(c1)); [EOL]     assertEquals(true, c3.equals(c2)); [EOL]     assertEquals(false, c1.equals(c3)); [EOL]     assertEquals(true, c2.equals(c3)); [EOL]     assertEquals(false, c1.hashCode() == c3.hashCode()); [EOL]     assertEquals(true, c2.hashCode() == c3.hashCode()); [EOL]     DateTimeComparator c4 = DateTimeComparator.getDateOnlyInstance(); [EOL]     assertEquals(false, c4.hashCode() == c3.hashCode()); [EOL] }
public void testWith1() { [EOL]     Partial test = createHourMinPartial(); [EOL]     Partial result = test.with(DateTimeFieldType.hourOfDay(), 15); [EOL]     check(test, 10, 20); [EOL]     check(result, 15, 20); [EOL] }
public void testWith1() { [EOL]     Partial test = createHourMinPartial(); [EOL]     Partial result = test.with(DateTimeFieldType.hourOfDay(), 15); [EOL]     check(test, 10, 20); [EOL]     check(result, 15, 20); [EOL] }
public void testWith1() { [EOL]     Partial test = createHourMinPartial(); [EOL]     Partial result = test.with(DateTimeFieldType.hourOfDay(), 15); [EOL]     check(test, 10, 20); [EOL]     check(result, 15, 20); [EOL] }
public void testGet_DateTimeFieldType() { [EOL]     Instant test = new Instant(); [EOL]     assertEquals(1, test.get(DateTimeFieldType.era())); [EOL]     assertEquals(20, test.get(DateTimeFieldType.centuryOfEra())); [EOL]     assertEquals(2, test.get(DateTimeFieldType.yearOfCentury())); [EOL]     assertEquals(2002, test.get(DateTimeFieldType.yearOfEra())); [EOL]     assertEquals(2002, test.get(DateTimeFieldType.year())); [EOL]     assertEquals(6, test.get(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(9, test.get(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(2002, test.get(DateTimeFieldType.weekyear())); [EOL]     assertEquals(23, test.get(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(7, test.get(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(160, test.get(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(24, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.minuteOfDay())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.secondOfDay())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.millisOfDay())); [EOL]     try { [EOL]         test.get((DateTimeFieldType) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void test_era() throws Exception { [EOL]     assertEquals(DateTimeFieldType.era(), DateTimeFieldType.era()); [EOL]     assertEquals("era", DateTimeFieldType.era().getName()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.era().getDurationType()); [EOL]     assertEquals(null, DateTimeFieldType.era().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().era(), DateTimeFieldType.era().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().era().isSupported(), DateTimeFieldType.era().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.era()); [EOL] }
public void test_era() throws Exception { [EOL]     assertEquals(DateTimeFieldType.era(), DateTimeFieldType.era()); [EOL]     assertEquals("era", DateTimeFieldType.era().getName()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.era().getDurationType()); [EOL]     assertEquals(null, DateTimeFieldType.era().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().era(), DateTimeFieldType.era().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().era().isSupported(), DateTimeFieldType.era().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.era()); [EOL] }
public void test_era() throws Exception { [EOL]     assertEquals(DateTimeFieldType.era(), DateTimeFieldType.era()); [EOL]     assertEquals("era", DateTimeFieldType.era().getName()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.era().getDurationType()); [EOL]     assertEquals(null, DateTimeFieldType.era().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().era(), DateTimeFieldType.era().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().era().isSupported(), DateTimeFieldType.era().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.era()); [EOL] }
public void test_era() throws Exception { [EOL]     assertEquals(DateTimeFieldType.era(), DateTimeFieldType.era()); [EOL]     assertEquals("era", DateTimeFieldType.era().getName()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.era().getDurationType()); [EOL]     assertEquals(null, DateTimeFieldType.era().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().era(), DateTimeFieldType.era().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().era().isSupported(), DateTimeFieldType.era().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.era()); [EOL] }
public void test_era() throws Exception { [EOL]     assertEquals(DateTimeFieldType.era(), DateTimeFieldType.era()); [EOL]     assertEquals("era", DateTimeFieldType.era().getName()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.era().getDurationType()); [EOL]     assertEquals(null, DateTimeFieldType.era().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().era(), DateTimeFieldType.era().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().era().isSupported(), DateTimeFieldType.era().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.era()); [EOL] }
public void test_era() throws Exception { [EOL]     assertEquals(DateTimeFieldType.era(), DateTimeFieldType.era()); [EOL]     assertEquals("era", DateTimeFieldType.era().getName()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.era().getDurationType()); [EOL]     assertEquals(null, DateTimeFieldType.era().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().era(), DateTimeFieldType.era().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().era().isSupported(), DateTimeFieldType.era().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.era()); [EOL] }
public void test_era() throws Exception { [EOL]     assertEquals(DateTimeFieldType.era(), DateTimeFieldType.era()); [EOL]     assertEquals("era", DateTimeFieldType.era().getName()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.era().getDurationType()); [EOL]     assertEquals(null, DateTimeFieldType.era().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().era(), DateTimeFieldType.era().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().era().isSupported(), DateTimeFieldType.era().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.era()); [EOL] }
public void test_era() throws Exception { [EOL]     assertEquals(DateTimeFieldType.era(), DateTimeFieldType.era()); [EOL]     assertEquals("era", DateTimeFieldType.era().getName()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.era().getDurationType()); [EOL]     assertEquals(null, DateTimeFieldType.era().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().era(), DateTimeFieldType.era().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().era().isSupported(), DateTimeFieldType.era().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.era()); [EOL] }
public void test_era() throws Exception { [EOL]     assertEquals(DateTimeFieldType.era(), DateTimeFieldType.era()); [EOL]     assertEquals("era", DateTimeFieldType.era().getName()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.era().getDurationType()); [EOL]     assertEquals(null, DateTimeFieldType.era().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().era(), DateTimeFieldType.era().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().era().isSupported(), DateTimeFieldType.era().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.era()); [EOL] }
public void test_era() throws Exception { [EOL]     assertEquals(DateTimeFieldType.era(), DateTimeFieldType.era()); [EOL]     assertEquals("era", DateTimeFieldType.era().getName()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.era().getDurationType()); [EOL]     assertEquals(null, DateTimeFieldType.era().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().era(), DateTimeFieldType.era().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().era().isSupported(), DateTimeFieldType.era().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.era()); [EOL] }
public void test_era() throws Exception { [EOL]     assertEquals(DateTimeFieldType.era(), DateTimeFieldType.era()); [EOL]     assertEquals("era", DateTimeFieldType.era().getName()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.era().getDurationType()); [EOL]     assertEquals(null, DateTimeFieldType.era().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().era(), DateTimeFieldType.era().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().era().isSupported(), DateTimeFieldType.era().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.era()); [EOL] }
public void test_era() throws Exception { [EOL]     assertEquals(DateTimeFieldType.era(), DateTimeFieldType.era()); [EOL]     assertEquals("era", DateTimeFieldType.era().getName()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.era().getDurationType()); [EOL]     assertEquals(null, DateTimeFieldType.era().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().era(), DateTimeFieldType.era().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().era().isSupported(), DateTimeFieldType.era().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.era()); [EOL] }
public void test_era() throws Exception { [EOL]     assertEquals(DateTimeFieldType.era(), DateTimeFieldType.era()); [EOL]     assertEquals("era", DateTimeFieldType.era().getName()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.era().getDurationType()); [EOL]     assertEquals(null, DateTimeFieldType.era().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().era(), DateTimeFieldType.era().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().era().isSupported(), DateTimeFieldType.era().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.era()); [EOL] }
public void test_era() throws Exception { [EOL]     assertEquals(DateTimeFieldType.era(), DateTimeFieldType.era()); [EOL]     assertEquals("era", DateTimeFieldType.era().getName()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.era().getDurationType()); [EOL]     assertEquals(null, DateTimeFieldType.era().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().era(), DateTimeFieldType.era().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().era().isSupported(), DateTimeFieldType.era().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.era()); [EOL] }
public void test_era() throws Exception { [EOL]     assertEquals(DateTimeFieldType.era(), DateTimeFieldType.era()); [EOL]     assertEquals("era", DateTimeFieldType.era().getName()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.era().getDurationType()); [EOL]     assertEquals(null, DateTimeFieldType.era().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().era(), DateTimeFieldType.era().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().era().isSupported(), DateTimeFieldType.era().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.era()); [EOL] }
public void test_era() throws Exception { [EOL]     assertEquals(DateTimeFieldType.era(), DateTimeFieldType.era()); [EOL]     assertEquals("era", DateTimeFieldType.era().getName()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.era().getDurationType()); [EOL]     assertEquals(null, DateTimeFieldType.era().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().era(), DateTimeFieldType.era().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().era().isSupported(), DateTimeFieldType.era().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.era()); [EOL] }
public void test_era() throws Exception { [EOL]     assertEquals(DateTimeFieldType.era(), DateTimeFieldType.era()); [EOL]     assertEquals("era", DateTimeFieldType.era().getName()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.era().getDurationType()); [EOL]     assertEquals(null, DateTimeFieldType.era().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().era(), DateTimeFieldType.era().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().era().isSupported(), DateTimeFieldType.era().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.era()); [EOL] }
public void test_era() throws Exception { [EOL]     assertEquals(DateTimeFieldType.era(), DateTimeFieldType.era()); [EOL]     assertEquals("era", DateTimeFieldType.era().getName()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.era().getDurationType()); [EOL]     assertEquals(null, DateTimeFieldType.era().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().era(), DateTimeFieldType.era().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().era().isSupported(), DateTimeFieldType.era().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.era()); [EOL] }
public void test_era() throws Exception { [EOL]     assertEquals(DateTimeFieldType.era(), DateTimeFieldType.era()); [EOL]     assertEquals("era", DateTimeFieldType.era().getName()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.era().getDurationType()); [EOL]     assertEquals(null, DateTimeFieldType.era().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().era(), DateTimeFieldType.era().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().era().isSupported(), DateTimeFieldType.era().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.era()); [EOL] }
public void test_era() throws Exception { [EOL]     assertEquals(DateTimeFieldType.era(), DateTimeFieldType.era()); [EOL]     assertEquals("era", DateTimeFieldType.era().getName()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.era().getDurationType()); [EOL]     assertEquals(null, DateTimeFieldType.era().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().era(), DateTimeFieldType.era().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().era().isSupported(), DateTimeFieldType.era().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.era()); [EOL] }
public void test_era() throws Exception { [EOL]     assertEquals(DateTimeFieldType.era(), DateTimeFieldType.era()); [EOL]     assertEquals("era", DateTimeFieldType.era().getName()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.era().getDurationType()); [EOL]     assertEquals(null, DateTimeFieldType.era().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().era(), DateTimeFieldType.era().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().era().isSupported(), DateTimeFieldType.era().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.era()); [EOL] }
public void test_era() throws Exception { [EOL]     assertEquals(DateTimeFieldType.era(), DateTimeFieldType.era()); [EOL]     assertEquals("era", DateTimeFieldType.era().getName()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.era().getDurationType()); [EOL]     assertEquals(null, DateTimeFieldType.era().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().era(), DateTimeFieldType.era().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().era().isSupported(), DateTimeFieldType.era().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.era()); [EOL] }
public void test_era() throws Exception { [EOL]     assertEquals(DateTimeFieldType.era(), DateTimeFieldType.era()); [EOL]     assertEquals("era", DateTimeFieldType.era().getName()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.era().getDurationType()); [EOL]     assertEquals(null, DateTimeFieldType.era().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().era(), DateTimeFieldType.era().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().era().isSupported(), DateTimeFieldType.era().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.era()); [EOL] }
public void test_era() throws Exception { [EOL]     assertEquals(DateTimeFieldType.era(), DateTimeFieldType.era()); [EOL]     assertEquals("era", DateTimeFieldType.era().getName()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.era().getDurationType()); [EOL]     assertEquals(null, DateTimeFieldType.era().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().era(), DateTimeFieldType.era().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().era().isSupported(), DateTimeFieldType.era().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.era()); [EOL] }
public void testToDuration2() { [EOL]     MockDuration test = new MockDuration(123L); [EOL]     Duration result = test.toDuration(); [EOL]     assertNotSame(test, result); [EOL]     assertEquals(test, result); [EOL] }
public void testToDuration2() { [EOL]     MockDuration test = new MockDuration(123L); [EOL]     Duration result = test.toDuration(); [EOL]     assertNotSame(test, result); [EOL]     assertEquals(test, result); [EOL] }
public void testToDuration2() { [EOL]     MockDuration test = new MockDuration(123L); [EOL]     Duration result = test.toDuration(); [EOL]     assertNotSame(test, result); [EOL]     assertEquals(test, result); [EOL] }
public void testToString() { [EOL]     long length = (365L + 2L * 30L + 3L * 7L + 4L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 845L; [EOL]     Duration test = new Duration(length); [EOL]     assertEquals("PT" + (length / 1000) + "." + (length % 1000) + "S", test.toString()); [EOL]     assertEquals("PT0S", new Duration(0L).toString()); [EOL]     assertEquals("PT10S", new Duration(10000L).toString()); [EOL]     assertEquals("PT1S", new Duration(1000L).toString()); [EOL]     assertEquals("PT12.345S", new Duration(12345L).toString()); [EOL]     assertEquals("PT-12.345S", new Duration(-12345L).toString()); [EOL]     assertEquals("PT-1.123S", new Duration(-1123L).toString()); [EOL]     assertEquals("PT-0.123S", new Duration(-123L).toString()); [EOL]     assertEquals("PT-0.012S", new Duration(-12L).toString()); [EOL]     assertEquals("PT-0.001S", new Duration(-1L).toString()); [EOL] }
public void testGetDurationMillis_Object() throws Exception { [EOL]     Interval i = new Interval(100L, 223L); [EOL]     assertEquals(123L, ReadableIntervalConverter.INSTANCE.getDurationMillis(i)); [EOL] }
public void testGetDurationMillis_Object() throws Exception { [EOL]     Interval i = new Interval(100L, 223L); [EOL]     assertEquals(123L, ReadableIntervalConverter.INSTANCE.getDurationMillis(i)); [EOL] }
public void testToString_String_Locale() { [EOL]     DateTime test = new DateTime(TEST_TIME_NOW); [EOL]     assertEquals("Sun 9/6", test.toString("EEE d/M", Locale.ENGLISH)); [EOL]     assertEquals("dim. 9/6", test.toString("EEE d/M", Locale.FRENCH)); [EOL]     assertEquals("2002-06-09T01:00:00.000+01:00", test.toString(null, Locale.ENGLISH)); [EOL]     assertEquals("Sun 9/6", test.toString("EEE d/M", null)); [EOL]     assertEquals("2002-06-09T01:00:00.000+01:00", test.toString(null, null)); [EOL] }
public void testToString_String_Locale() { [EOL]     DateTime test = new DateTime(TEST_TIME_NOW); [EOL]     assertEquals("Sun 9/6", test.toString("EEE d/M", Locale.ENGLISH)); [EOL]     assertEquals("dim. 9/6", test.toString("EEE d/M", Locale.FRENCH)); [EOL]     assertEquals("2002-06-09T01:00:00.000+01:00", test.toString(null, Locale.ENGLISH)); [EOL]     assertEquals("Sun 9/6", test.toString("EEE d/M", null)); [EOL]     assertEquals("2002-06-09T01:00:00.000+01:00", test.toString(null, null)); [EOL] }
public void testBug3476684_adjustOffset_springGap() { [EOL]     final DateTimeZone zone = DateTimeZone.forID("America/Sao_Paulo"); [EOL]     DateTime base = new DateTime(2011, 10, 15, 22, 15, zone); [EOL]     DateTime baseBefore = base.plusHours(1); [EOL]     DateTime baseAfter = base.plusHours(2); [EOL]     assertSame(base, base.withEarlierOffsetAtOverlap()); [EOL]     assertSame(base, base.withLaterOffsetAtOverlap()); [EOL]     assertSame(baseBefore, baseBefore.withEarlierOffsetAtOverlap()); [EOL]     assertEquals(baseBefore, baseBefore.withLaterOffsetAtOverlap()); [EOL]     assertSame(baseAfter, baseAfter.withLaterOffsetAtOverlap()); [EOL]     assertEquals(baseAfter, baseAfter.withEarlierOffsetAtOverlap()); [EOL] }
public void testBug3476684_adjustOffset_springGap() { [EOL]     final DateTimeZone zone = DateTimeZone.forID("America/Sao_Paulo"); [EOL]     DateTime base = new DateTime(2011, 10, 15, 22, 15, zone); [EOL]     DateTime baseBefore = base.plusHours(1); [EOL]     DateTime baseAfter = base.plusHours(2); [EOL]     assertSame(base, base.withEarlierOffsetAtOverlap()); [EOL]     assertSame(base, base.withLaterOffsetAtOverlap()); [EOL]     assertSame(baseBefore, baseBefore.withEarlierOffsetAtOverlap()); [EOL]     assertEquals(baseBefore, baseBefore.withLaterOffsetAtOverlap()); [EOL]     assertSame(baseAfter, baseAfter.withLaterOffsetAtOverlap()); [EOL]     assertEquals(baseAfter, baseAfter.withEarlierOffsetAtOverlap()); [EOL] }
public void testBug3476684_adjustOffset_springGap() { [EOL]     final DateTimeZone zone = DateTimeZone.forID("America/Sao_Paulo"); [EOL]     DateTime base = new DateTime(2011, 10, 15, 22, 15, zone); [EOL]     DateTime baseBefore = base.plusHours(1); [EOL]     DateTime baseAfter = base.plusHours(2); [EOL]     assertSame(base, base.withEarlierOffsetAtOverlap()); [EOL]     assertSame(base, base.withLaterOffsetAtOverlap()); [EOL]     assertSame(baseBefore, baseBefore.withEarlierOffsetAtOverlap()); [EOL]     assertEquals(baseBefore, baseBefore.withLaterOffsetAtOverlap()); [EOL]     assertSame(baseAfter, baseAfter.withLaterOffsetAtOverlap()); [EOL]     assertEquals(baseAfter, baseAfter.withEarlierOffsetAtOverlap()); [EOL] }
public void testBug3476684_adjustOffset_springGap() { [EOL]     final DateTimeZone zone = DateTimeZone.forID("America/Sao_Paulo"); [EOL]     DateTime base = new DateTime(2011, 10, 15, 22, 15, zone); [EOL]     DateTime baseBefore = base.plusHours(1); [EOL]     DateTime baseAfter = base.plusHours(2); [EOL]     assertSame(base, base.withEarlierOffsetAtOverlap()); [EOL]     assertSame(base, base.withLaterOffsetAtOverlap()); [EOL]     assertSame(baseBefore, baseBefore.withEarlierOffsetAtOverlap()); [EOL]     assertEquals(baseBefore, baseBefore.withLaterOffsetAtOverlap()); [EOL]     assertSame(baseAfter, baseAfter.withLaterOffsetAtOverlap()); [EOL]     assertEquals(baseAfter, baseAfter.withEarlierOffsetAtOverlap()); [EOL] }
public void testBug3476684_adjustOffset_springGap() { [EOL]     final DateTimeZone zone = DateTimeZone.forID("America/Sao_Paulo"); [EOL]     DateTime base = new DateTime(2011, 10, 15, 22, 15, zone); [EOL]     DateTime baseBefore = base.plusHours(1); [EOL]     DateTime baseAfter = base.plusHours(2); [EOL]     assertSame(base, base.withEarlierOffsetAtOverlap()); [EOL]     assertSame(base, base.withLaterOffsetAtOverlap()); [EOL]     assertSame(baseBefore, baseBefore.withEarlierOffsetAtOverlap()); [EOL]     assertEquals(baseBefore, baseBefore.withLaterOffsetAtOverlap()); [EOL]     assertSame(baseAfter, baseAfter.withLaterOffsetAtOverlap()); [EOL]     assertEquals(baseAfter, baseAfter.withEarlierOffsetAtOverlap()); [EOL] }
public void testEqualsHashCode() { [EOL]     DateMidnight test1 = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateMidnight test2 = new DateMidnight(TEST_TIME1_UTC); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     DateMidnight test3 = new DateMidnight(TEST_TIME2_UTC); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockInstant())); [EOL]     assertEquals(false, test1.equals(new DateMidnight(TEST_TIME1_UTC, GREGORIAN_DEFAULT))); [EOL] }
public void testFormatParse_textYear_UK() { [EOL]     DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder().appendLiteral('$').appendText(DateTimeFieldType.year()).toFormatter().withLocale(Locale.UK).withZoneUTC(); [EOL]     String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("$2007", str); [EOL]     try { [EOL]         dateFormatter.parseDateTime(str); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testFormatParse_textYear_UK() { [EOL]     DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder().appendLiteral('$').appendText(DateTimeFieldType.year()).toFormatter().withLocale(Locale.UK).withZoneUTC(); [EOL]     String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("$2007", str); [EOL]     try { [EOL]         dateFormatter.parseDateTime(str); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGetChronology_Object_nullChronology() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Paris")); [EOL]     assertEquals(GJChronology.getInstance(PARIS), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(0L)); [EOL]     assertEquals(GJChronology.getInstance(MOSCOW, 0L, 4), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MAX_VALUE)); [EOL]     assertEquals(JulianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MIN_VALUE)); [EOL]     assertEquals(GregorianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(new MockUnknownTimeZone()); [EOL]     assertEquals(GJChronology.getInstance(), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     Calendar uc = new MockUnknownCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     assertEquals(ISOChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(uc, (Chronology) null)); [EOL]     try { [EOL]         Calendar bc = (Calendar) Class.forName("sun.util.BuddhistCalendar").newInstance(); [EOL]         bc.setTimeZone(TimeZone.getTimeZone("Europe/Moscow")); [EOL]         assertEquals(BuddhistChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(bc, (Chronology) null)); [EOL]     } catch (ClassNotFoundException ex) { [EOL]     } [EOL] }
public void testGetChronology_Object_nullChronology() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Paris")); [EOL]     assertEquals(GJChronology.getInstance(PARIS), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(0L)); [EOL]     assertEquals(GJChronology.getInstance(MOSCOW, 0L, 4), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MAX_VALUE)); [EOL]     assertEquals(JulianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MIN_VALUE)); [EOL]     assertEquals(GregorianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(new MockUnknownTimeZone()); [EOL]     assertEquals(GJChronology.getInstance(), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     Calendar uc = new MockUnknownCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     assertEquals(ISOChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(uc, (Chronology) null)); [EOL]     try { [EOL]         Calendar bc = (Calendar) Class.forName("sun.util.BuddhistCalendar").newInstance(); [EOL]         bc.setTimeZone(TimeZone.getTimeZone("Europe/Moscow")); [EOL]         assertEquals(BuddhistChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(bc, (Chronology) null)); [EOL]     } catch (ClassNotFoundException ex) { [EOL]     } [EOL] }
public void testParse_noFormatter() throws Throwable { [EOL]     DateTime start = new DateTime(2010, 6, 30, 12, 30, ISOChronology.getInstance(PARIS)); [EOL]     DateTime end = new DateTime(2010, 7, 1, 14, 30, ISOChronology.getInstance(PARIS)); [EOL]     assertEquals(new MutableInterval(start, end), MutableInterval.parse("2010-06-30T12:30/2010-07-01T14:30")); [EOL]     assertEquals(new MutableInterval(start, end), MutableInterval.parse("2010-06-30T12:30/P1DT2H")); [EOL]     assertEquals(new MutableInterval(start, end), MutableInterval.parse("P1DT2H/2010-07-01T14:30")); [EOL] }
public void testParse_noFormatter() throws Throwable { [EOL]     DateTime start = new DateTime(2010, 6, 30, 12, 30, ISOChronology.getInstance(PARIS)); [EOL]     DateTime end = new DateTime(2010, 7, 1, 14, 30, ISOChronology.getInstance(PARIS)); [EOL]     assertEquals(new MutableInterval(start, end), MutableInterval.parse("2010-06-30T12:30/2010-07-01T14:30")); [EOL]     assertEquals(new MutableInterval(start, end), MutableInterval.parse("2010-06-30T12:30/P1DT2H")); [EOL]     assertEquals(new MutableInterval(start, end), MutableInterval.parse("P1DT2H/2010-07-01T14:30")); [EOL] }
public void testParse_noFormatter() throws Throwable { [EOL]     DateTime start = new DateTime(2010, 6, 30, 12, 30, ISOChronology.getInstance(PARIS)); [EOL]     DateTime end = new DateTime(2010, 7, 1, 14, 30, ISOChronology.getInstance(PARIS)); [EOL]     assertEquals(new MutableInterval(start, end), MutableInterval.parse("2010-06-30T12:30/2010-07-01T14:30")); [EOL]     assertEquals(new MutableInterval(start, end), MutableInterval.parse("2010-06-30T12:30/P1DT2H")); [EOL]     assertEquals(new MutableInterval(start, end), MutableInterval.parse("P1DT2H/2010-07-01T14:30")); [EOL] }
public void testConstructor_RP_RI5() throws Throwable { [EOL]     MutableInterval test = new MutableInterval((ReadablePeriod) null, (ReadableInstant) null); [EOL]     assertEquals(TEST_TIME_NOW, test.getStartMillis()); [EOL]     assertEquals(TEST_TIME_NOW, test.getEndMillis()); [EOL] }
public void testConstructor_RP_RI5() throws Throwable { [EOL]     MutableInterval test = new MutableInterval((ReadablePeriod) null, (ReadableInstant) null); [EOL]     assertEquals(TEST_TIME_NOW, test.getStartMillis()); [EOL]     assertEquals(TEST_TIME_NOW, test.getEndMillis()); [EOL] }
public void testConstructor_RP_RI5() throws Throwable { [EOL]     MutableInterval test = new MutableInterval((ReadablePeriod) null, (ReadableInstant) null); [EOL]     assertEquals(TEST_TIME_NOW, test.getStartMillis()); [EOL]     assertEquals(TEST_TIME_NOW, test.getEndMillis()); [EOL] }
public void testSetInterval_RInterval1() { [EOL]     MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     test.setInterval(new Interval(TEST_TIME1 - 1, TEST_TIME2 + 1)); [EOL]     assertEquals(TEST_TIME1 - 1, test.getStartMillis()); [EOL]     assertEquals(TEST_TIME2 + 1, test.getEndMillis()); [EOL] }
public void testSetInterval_RInterval1() { [EOL]     MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     test.setInterval(new Interval(TEST_TIME1 - 1, TEST_TIME2 + 1)); [EOL]     assertEquals(TEST_TIME1 - 1, test.getStartMillis()); [EOL]     assertEquals(TEST_TIME2 + 1, test.getEndMillis()); [EOL] }
public void testSetStart_RI1() { [EOL]     MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     test.setStart(new Instant(TEST_TIME1 - 1)); [EOL]     assertEquals(TEST_TIME1 - 1, test.getStartMillis()); [EOL]     assertEquals(TEST_TIME2, test.getEndMillis()); [EOL] }
public void testSetStart_RI1() { [EOL]     MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     test.setStart(new Instant(TEST_TIME1 - 1)); [EOL]     assertEquals(TEST_TIME1 - 1, test.getStartMillis()); [EOL]     assertEquals(TEST_TIME2, test.getEndMillis()); [EOL] }
public void testSeDurationAfterStart_RI2() { [EOL]     MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     try { [EOL]         test.setDurationAfterStart(new Duration(-1)); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testSeDurationAfterStart_RI2() { [EOL]     MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     try { [EOL]         test.setDurationAfterStart(new Duration(-1)); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testSeDurationAfterStart_RI2() { [EOL]     MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     try { [EOL]         test.setDurationAfterStart(new Duration(-1)); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testSeDurationAfterStart_RI2() { [EOL]     MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     try { [EOL]         test.setDurationAfterStart(new Duration(-1)); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testGet_DateTimeFieldType() { [EOL]     DateMidnight test = new DateMidnight(); [EOL]     assertEquals(1, test.get(DateTimeFieldType.era())); [EOL]     assertEquals(20, test.get(DateTimeFieldType.centuryOfEra())); [EOL]     assertEquals(2, test.get(DateTimeFieldType.yearOfCentury())); [EOL]     assertEquals(2002, test.get(DateTimeFieldType.yearOfEra())); [EOL]     assertEquals(2002, test.get(DateTimeFieldType.year())); [EOL]     assertEquals(6, test.get(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(9, test.get(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(2002, test.get(DateTimeFieldType.weekyear())); [EOL]     assertEquals(23, test.get(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(7, test.get(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(160, test.get(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(24, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.minuteOfDay())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.secondOfDay())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.millisOfDay())); [EOL]     try { [EOL]         test.get((DateTimeFieldType) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithChronology_Chronology() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateMidnight result = test.withChronology(GREGORIAN_PARIS); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_PARIS, result.getMillis()); [EOL]     assertEquals(GREGORIAN_PARIS, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS); [EOL]     result = test.withChronology(null); [EOL]     assertEquals(TEST_TIME1_PARIS, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_LONDON - DateTimeConstants.MILLIS_PER_DAY, result.getMillis()); [EOL]     assertEquals(ISO_DEFAULT, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withChronology(null); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISO_DEFAULT, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withChronology(ISO_DEFAULT); [EOL]     assertSame(test, result); [EOL] }
public void testWithChronology_Chronology() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateMidnight result = test.withChronology(GREGORIAN_PARIS); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_PARIS, result.getMillis()); [EOL]     assertEquals(GREGORIAN_PARIS, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS); [EOL]     result = test.withChronology(null); [EOL]     assertEquals(TEST_TIME1_PARIS, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_LONDON - DateTimeConstants.MILLIS_PER_DAY, result.getMillis()); [EOL]     assertEquals(ISO_DEFAULT, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withChronology(null); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISO_DEFAULT, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withChronology(ISO_DEFAULT); [EOL]     assertSame(test, result); [EOL] }
public void testWithField2() { [EOL]     DateMidnight test = new DateMidnight(2004, 6, 9); [EOL]     try { [EOL]         test.withField(null, 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithField2() { [EOL]     DateMidnight test = new DateMidnight(2004, 6, 9); [EOL]     try { [EOL]         test.withField(null, 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testWithFieldAdded1() { [EOL]     DateMidnight test = new DateMidnight(2004, 6, 9); [EOL]     DateMidnight result = test.withFieldAdded(DurationFieldType.years(), 6); [EOL]     assertEquals(new DateMidnight(2004, 6, 9), test); [EOL]     assertEquals(new DateMidnight(2010, 6, 9), result); [EOL] }
public void testWithFieldAdded1() { [EOL]     DateMidnight test = new DateMidnight(2004, 6, 9); [EOL]     DateMidnight result = test.withFieldAdded(DurationFieldType.years(), 6); [EOL]     assertEquals(new DateMidnight(2004, 6, 9), test); [EOL]     assertEquals(new DateMidnight(2010, 6, 9), result); [EOL] }
public void testWithFieldAdded1() { [EOL]     DateMidnight test = new DateMidnight(2004, 6, 9); [EOL]     DateMidnight result = test.withFieldAdded(DurationFieldType.years(), 6); [EOL]     assertEquals(new DateMidnight(2004, 6, 9), test); [EOL]     assertEquals(new DateMidnight(2010, 6, 9), result); [EOL] }
public void testPlusWeeks_int() { [EOL]     DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.plusWeeks(1); [EOL]     DateMidnight expected = new DateMidnight(2002, 5, 10, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusWeeks(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusWeeks_int() { [EOL]     DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.plusWeeks(1); [EOL]     DateMidnight expected = new DateMidnight(2002, 5, 10, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusWeeks(0); [EOL]     assertSame(test, result); [EOL] }
public void testPlusWeeks_int() { [EOL]     DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.plusWeeks(1); [EOL]     DateMidnight expected = new DateMidnight(2002, 5, 10, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusWeeks(0); [EOL]     assertSame(test, result); [EOL] }
public void testMinus_RD() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.minus(new Duration(123456789L)); [EOL]     DateMidnight expected = new DateMidnight(test.getMillis() - 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minus((ReadableDuration) null); [EOL]     assertSame(test, result); [EOL] }
public void testMinus_RD() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.minus(new Duration(123456789L)); [EOL]     DateMidnight expected = new DateMidnight(test.getMillis() - 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minus((ReadableDuration) null); [EOL]     assertSame(test, result); [EOL] }
public void testMinus_RP() { [EOL]     DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1)); [EOL]     DateMidnight expected = new DateMidnight(2001, 3, 25, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testMinus_RP() { [EOL]     DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1)); [EOL]     DateMidnight expected = new DateMidnight(2001, 3, 25, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] }
public void testPropertyCompareToMonth() { [EOL]     YearMonth test1 = new YearMonth(TEST_TIME1); [EOL]     YearMonth test2 = new YearMonth(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonth() { [EOL]     YearMonth test1 = new YearMonth(TEST_TIME1); [EOL]     YearMonth test2 = new YearMonth(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testPropertyCompareToMonth() { [EOL]     YearMonth test1 = new YearMonth(TEST_TIME1); [EOL]     YearMonth test2 = new YearMonth(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] }
public void testSetMethods() throws Throwable { [EOL]     MockPartial mock = new MockPartial(); [EOL]     assertEquals(1970, mock.getYear()); [EOL]     assertEquals(1, mock.getMonthOfYear()); [EOL]     mock.setYear(2004); [EOL]     assertEquals(2004, mock.getYear()); [EOL]     assertEquals(1, mock.getMonthOfYear()); [EOL]     mock.setMonthOfYear(6); [EOL]     assertEquals(2004, mock.getYear()); [EOL]     assertEquals(6, mock.getMonthOfYear()); [EOL]     mock.set(2005, 5); [EOL]     assertEquals(2005, mock.getYear()); [EOL]     assertEquals(5, mock.getMonthOfYear()); [EOL]     try { [EOL]         mock.setMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(2005, mock.getYear()); [EOL]     assertEquals(5, mock.getMonthOfYear()); [EOL]     try { [EOL]         mock.setMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(2005, mock.getYear()); [EOL]     assertEquals(5, mock.getMonthOfYear()); [EOL] }
public void testSetMethods() throws Throwable { [EOL]     MockPartial mock = new MockPartial(); [EOL]     assertEquals(1970, mock.getYear()); [EOL]     assertEquals(1, mock.getMonthOfYear()); [EOL]     mock.setYear(2004); [EOL]     assertEquals(2004, mock.getYear()); [EOL]     assertEquals(1, mock.getMonthOfYear()); [EOL]     mock.setMonthOfYear(6); [EOL]     assertEquals(2004, mock.getYear()); [EOL]     assertEquals(6, mock.getMonthOfYear()); [EOL]     mock.set(2005, 5); [EOL]     assertEquals(2005, mock.getYear()); [EOL]     assertEquals(5, mock.getMonthOfYear()); [EOL]     try { [EOL]         mock.setMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(2005, mock.getYear()); [EOL]     assertEquals(5, mock.getMonthOfYear()); [EOL]     try { [EOL]         mock.setMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(2005, mock.getYear()); [EOL]     assertEquals(5, mock.getMonthOfYear()); [EOL] }
public void testSetMethods() throws Throwable { [EOL]     MockPartial mock = new MockPartial(); [EOL]     assertEquals(1970, mock.getYear()); [EOL]     assertEquals(1, mock.getMonthOfYear()); [EOL]     mock.setYear(2004); [EOL]     assertEquals(2004, mock.getYear()); [EOL]     assertEquals(1, mock.getMonthOfYear()); [EOL]     mock.setMonthOfYear(6); [EOL]     assertEquals(2004, mock.getYear()); [EOL]     assertEquals(6, mock.getMonthOfYear()); [EOL]     mock.set(2005, 5); [EOL]     assertEquals(2005, mock.getYear()); [EOL]     assertEquals(5, mock.getMonthOfYear()); [EOL]     try { [EOL]         mock.setMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(2005, mock.getYear()); [EOL]     assertEquals(5, mock.getMonthOfYear()); [EOL]     try { [EOL]         mock.setMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(2005, mock.getYear()); [EOL]     assertEquals(5, mock.getMonthOfYear()); [EOL] }
public void testSetMethods() throws Throwable { [EOL]     MockPartial mock = new MockPartial(); [EOL]     assertEquals(1970, mock.getYear()); [EOL]     assertEquals(1, mock.getMonthOfYear()); [EOL]     mock.setYear(2004); [EOL]     assertEquals(2004, mock.getYear()); [EOL]     assertEquals(1, mock.getMonthOfYear()); [EOL]     mock.setMonthOfYear(6); [EOL]     assertEquals(2004, mock.getYear()); [EOL]     assertEquals(6, mock.getMonthOfYear()); [EOL]     mock.set(2005, 5); [EOL]     assertEquals(2005, mock.getYear()); [EOL]     assertEquals(5, mock.getMonthOfYear()); [EOL]     try { [EOL]         mock.setMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(2005, mock.getYear()); [EOL]     assertEquals(5, mock.getMonthOfYear()); [EOL]     try { [EOL]         mock.setMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(2005, mock.getYear()); [EOL]     assertEquals(5, mock.getMonthOfYear()); [EOL] }
public void testSetMethods() throws Throwable { [EOL]     MockPartial mock = new MockPartial(); [EOL]     assertEquals(1970, mock.getYear()); [EOL]     assertEquals(1, mock.getMonthOfYear()); [EOL]     mock.setYear(2004); [EOL]     assertEquals(2004, mock.getYear()); [EOL]     assertEquals(1, mock.getMonthOfYear()); [EOL]     mock.setMonthOfYear(6); [EOL]     assertEquals(2004, mock.getYear()); [EOL]     assertEquals(6, mock.getMonthOfYear()); [EOL]     mock.set(2005, 5); [EOL]     assertEquals(2005, mock.getYear()); [EOL]     assertEquals(5, mock.getMonthOfYear()); [EOL]     try { [EOL]         mock.setMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(2005, mock.getYear()); [EOL]     assertEquals(5, mock.getMonthOfYear()); [EOL]     try { [EOL]         mock.setMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(2005, mock.getYear()); [EOL]     assertEquals(5, mock.getMonthOfYear()); [EOL] }
public void testSetMethods() throws Throwable { [EOL]     MockPartial mock = new MockPartial(); [EOL]     assertEquals(1970, mock.getYear()); [EOL]     assertEquals(1, mock.getMonthOfYear()); [EOL]     mock.setYear(2004); [EOL]     assertEquals(2004, mock.getYear()); [EOL]     assertEquals(1, mock.getMonthOfYear()); [EOL]     mock.setMonthOfYear(6); [EOL]     assertEquals(2004, mock.getYear()); [EOL]     assertEquals(6, mock.getMonthOfYear()); [EOL]     mock.set(2005, 5); [EOL]     assertEquals(2005, mock.getYear()); [EOL]     assertEquals(5, mock.getMonthOfYear()); [EOL]     try { [EOL]         mock.setMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(2005, mock.getYear()); [EOL]     assertEquals(5, mock.getMonthOfYear()); [EOL]     try { [EOL]         mock.setMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(2005, mock.getYear()); [EOL]     assertEquals(5, mock.getMonthOfYear()); [EOL] }
