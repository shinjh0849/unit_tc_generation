public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testIDFunction() { [EOL]     context.setIdentityManager(new IdentityManager() { [EOL]  [EOL]         public Pointer getPointerByID(JXPathContext context, String id) { [EOL]             NodePointer ptr = (NodePointer) context.getPointer("/document"); [EOL]             ptr = ptr.getValuePointer(); [EOL]             return ptr.getPointerByID(context, id); [EOL]         } [EOL]     }); [EOL]     assertXPathValueAndPointer(context, "id(101)//street", "Tangerine Drive", "id('101')/address[1]/street[1]"); [EOL]     assertXPathPointerLenient(context, "id(105)/address/street", "id(105)/address/street"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testIDFunction() { [EOL]     context.setIdentityManager(new IdentityManager() { [EOL]  [EOL]         public Pointer getPointerByID(JXPathContext context, String id) { [EOL]             NodePointer ptr = (NodePointer) context.getPointer("/document"); [EOL]             ptr = ptr.getValuePointer(); [EOL]             return ptr.getPointerByID(context, id); [EOL]         } [EOL]     }); [EOL]     assertXPathValueAndPointer(context, "id(101)//street", "Tangerine Drive", "id('101')/address[1]/street[1]"); [EOL]     assertXPathPointerLenient(context, "id(105)/address/street", "id(105)/address/street"); [EOL] }
public void testIDFunction() { [EOL]     context.setIdentityManager(new IdentityManager() { [EOL]  [EOL]         public Pointer getPointerByID(JXPathContext context, String id) { [EOL]             NodePointer ptr = (NodePointer) context.getPointer("/document"); [EOL]             ptr = ptr.getValuePointer(); [EOL]             return ptr.getPointerByID(context, id); [EOL]         } [EOL]     }); [EOL]     assertXPathValueAndPointer(context, "id(101)//street", "Tangerine Drive", "id('101')/address[1]/street[1]"); [EOL]     assertXPathPointerLenient(context, "id(105)/address/street", "id(105)/address/street"); [EOL] }
public void testIDFunction() { [EOL]     context.setIdentityManager(new IdentityManager() { [EOL]  [EOL]         public Pointer getPointerByID(JXPathContext context, String id) { [EOL]             NodePointer ptr = (NodePointer) context.getPointer("/document"); [EOL]             ptr = ptr.getValuePointer(); [EOL]             return ptr.getPointerByID(context, id); [EOL]         } [EOL]     }); [EOL]     assertXPathValueAndPointer(context, "id(101)//street", "Tangerine Drive", "id('101')/address[1]/street[1]"); [EOL]     assertXPathPointerLenient(context, "id(105)/address/street", "id(105)/address/street"); [EOL] }
public void testBooleanPredicate() { [EOL]     assertXPathValue(context, "beans[int > 2]/name", "Name 2"); [EOL]     assertXPathValueIterator(context, "beans[int > 2]/name", list("Name 2")); [EOL]     assertXPathValueIterator(context, "beans[int >= 1]/name", list("Name 1", "Name 2")); [EOL]     assertXPathValueIterator(context, "beans[int < 2]/name", list("Name 1")); [EOL]     assertXPathValueIterator(context, "beans[int <= 3]/name", list("Name 1", "Name 2")); [EOL]     assertXPathValueIterator(context, "beans[1]/strings[string-length() = 8]", list("String 1", "String 2", "String 3")); [EOL]     assertXPathValueIterator(context, "//self::node()[name = 'Name 0']/name", list("Name 0")); [EOL]     assertXPathValue(context, "beans/strings[name(.)='strings'][2]", "String 2"); [EOL]     assertXPathValueIterator(context, "//self::node()[name(.) = concat('n', 'a', 'm', 'e')]", list("Name 1", "Name 2", "Name 3", "Name 6", "Name 0", "Name 5", "Name 4")); [EOL]     assertXPathValueIterator(context, "integers[position()<3]", list(new Integer(1), new Integer(2))); [EOL]     context.getVariables().declareVariable("temp", context.getValue("beans")); [EOL]     assertXPathValueIterator(context, "$temp[int < 2]/int", list(new Integer(1))); [EOL] }
public void testBooleanPredicate() { [EOL]     assertXPathValue(context, "beans[int > 2]/name", "Name 2"); [EOL]     assertXPathValueIterator(context, "beans[int > 2]/name", list("Name 2")); [EOL]     assertXPathValueIterator(context, "beans[int >= 1]/name", list("Name 1", "Name 2")); [EOL]     assertXPathValueIterator(context, "beans[int < 2]/name", list("Name 1")); [EOL]     assertXPathValueIterator(context, "beans[int <= 3]/name", list("Name 1", "Name 2")); [EOL]     assertXPathValueIterator(context, "beans[1]/strings[string-length() = 8]", list("String 1", "String 2", "String 3")); [EOL]     assertXPathValueIterator(context, "//self::node()[name = 'Name 0']/name", list("Name 0")); [EOL]     assertXPathValue(context, "beans/strings[name(.)='strings'][2]", "String 2"); [EOL]     assertXPathValueIterator(context, "//self::node()[name(.) = concat('n', 'a', 'm', 'e')]", list("Name 1", "Name 2", "Name 3", "Name 6", "Name 0", "Name 5", "Name 4")); [EOL]     assertXPathValueIterator(context, "integers[position()<3]", list(new Integer(1), new Integer(2))); [EOL]     context.getVariables().declareVariable("temp", context.getValue("beans")); [EOL]     assertXPathValueIterator(context, "$temp[int < 2]/int", list(new Integer(1))); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testIDFunction() { [EOL]     context.setIdentityManager(new IdentityManager() { [EOL]  [EOL]         public Pointer getPointerByID(JXPathContext context, String id) { [EOL]             NodePointer ptr = (NodePointer) context.getPointer("/document"); [EOL]             ptr = ptr.getValuePointer(); [EOL]             return ptr.getPointerByID(context, id); [EOL]         } [EOL]     }); [EOL]     assertXPathValueAndPointer(context, "id(101)//street", "Tangerine Drive", "id('101')/address[1]/street[1]"); [EOL]     assertXPathPointerLenient(context, "id(105)/address/street", "id(105)/address/street"); [EOL] }
public void testIDFunction() { [EOL]     context.setIdentityManager(new IdentityManager() { [EOL]  [EOL]         public Pointer getPointerByID(JXPathContext context, String id) { [EOL]             NodePointer ptr = (NodePointer) context.getPointer("/document"); [EOL]             ptr = ptr.getValuePointer(); [EOL]             return ptr.getPointerByID(context, id); [EOL]         } [EOL]     }); [EOL]     assertXPathValueAndPointer(context, "id(101)//street", "Tangerine Drive", "id('101')/address[1]/street[1]"); [EOL]     assertXPathPointerLenient(context, "id(105)/address/street", "id(105)/address/street"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testNodeSetReturn() { [EOL]     assertXPathValueIterator(context, "test:nodeSet()/name", list("Name 1", "Name 2")); [EOL]     assertXPathPointerIterator(context, "test:nodeSet()/name", list("/beans[1]/name", "/beans[2]/name")); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/name", "Name 1", "/beans[1]/name"); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/@name", "Name 1", "/beans[1]/@name"); [EOL] }
public void testNodeSetReturn() { [EOL]     assertXPathValueIterator(context, "test:nodeSet()/name", list("Name 1", "Name 2")); [EOL]     assertXPathPointerIterator(context, "test:nodeSet()/name", list("/beans[1]/name", "/beans[2]/name")); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/name", "Name 1", "/beans[1]/name"); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/@name", "Name 1", "/beans[1]/@name"); [EOL] }
public void testNodeSetReturn() { [EOL]     assertXPathValueIterator(context, "test:nodeSet()/name", list("Name 1", "Name 2")); [EOL]     assertXPathPointerIterator(context, "test:nodeSet()/name", list("/beans[1]/name", "/beans[2]/name")); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/name", "Name 1", "/beans[1]/name"); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/@name", "Name 1", "/beans[1]/@name"); [EOL] }
public void testAxisFollowing() { [EOL]     assertXPathValueIterator(context, "vendor/contact/following::location//street", list("Orchard Road", "Tangerine Drive")); [EOL]     assertXPathValue(context, "//location/following::price:sale/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testNodeTypeProcessingInstruction() { [EOL]     assertXPathValue(context, "//product/processing-instruction()", "do not show anybody"); [EOL]     assertXPathValue(context, "//product/processing-instruction('report')", "average only"); [EOL]     assertXPathPointer(context, "//product/processing-instruction('report')", "/vendor[1]/product[1]/processing-instruction('report')[1]"); [EOL]     assertXPathValue(context, "name(//product/processing-instruction()[1])", "security"); [EOL] }
public void testNodeTypeProcessingInstruction() { [EOL]     assertXPathValue(context, "//product/processing-instruction()", "do not show anybody"); [EOL]     assertXPathValue(context, "//product/processing-instruction('report')", "average only"); [EOL]     assertXPathPointer(context, "//product/processing-instruction('report')", "/vendor[1]/product[1]/processing-instruction('report')[1]"); [EOL]     assertXPathValue(context, "name(//product/processing-instruction()[1])", "security"); [EOL] }
public void testNodeTypeProcessingInstruction() { [EOL]     assertXPathValue(context, "//product/processing-instruction()", "do not show anybody"); [EOL]     assertXPathValue(context, "//product/processing-instruction('report')", "average only"); [EOL]     assertXPathPointer(context, "//product/processing-instruction('report')", "/vendor[1]/product[1]/processing-instruction('report')[1]"); [EOL]     assertXPathValue(context, "name(//product/processing-instruction()[1])", "security"); [EOL] }
public void testNodeTypeProcessingInstruction() { [EOL]     assertXPathValue(context, "//product/processing-instruction()", "do not show anybody"); [EOL]     assertXPathValue(context, "//product/processing-instruction('report')", "average only"); [EOL]     assertXPathPointer(context, "//product/processing-instruction('report')", "/vendor[1]/product[1]/processing-instruction('report')[1]"); [EOL]     assertXPathValue(context, "name(//product/processing-instruction()[1])", "security"); [EOL] }
public void testNodeTypeProcessingInstruction() { [EOL]     assertXPathValue(context, "//product/processing-instruction()", "do not show anybody"); [EOL]     assertXPathValue(context, "//product/processing-instruction('report')", "average only"); [EOL]     assertXPathPointer(context, "//product/processing-instruction('report')", "/vendor[1]/product[1]/processing-instruction('report')[1]"); [EOL]     assertXPathValue(context, "name(//product/processing-instruction()[1])", "security"); [EOL] }
public void testNodeTypeProcessingInstruction() { [EOL]     assertXPathValue(context, "//product/processing-instruction()", "do not show anybody"); [EOL]     assertXPathValue(context, "//product/processing-instruction('report')", "average only"); [EOL]     assertXPathPointer(context, "//product/processing-instruction('report')", "/vendor[1]/product[1]/processing-instruction('report')[1]"); [EOL]     assertXPathValue(context, "name(//product/processing-instruction()[1])", "security"); [EOL] }
public void testNodeTypeProcessingInstruction() { [EOL]     assertXPathValue(context, "//product/processing-instruction()", "do not show anybody"); [EOL]     assertXPathValue(context, "//product/processing-instruction('report')", "average only"); [EOL]     assertXPathPointer(context, "//product/processing-instruction('report')", "/vendor[1]/product[1]/processing-instruction('report')[1]"); [EOL]     assertXPathValue(context, "name(//product/processing-instruction()[1])", "security"); [EOL] }
public void testNodeTypeProcessingInstruction() { [EOL]     assertXPathValue(context, "//product/processing-instruction()", "do not show anybody"); [EOL]     assertXPathValue(context, "//product/processing-instruction('report')", "average only"); [EOL]     assertXPathPointer(context, "//product/processing-instruction('report')", "/vendor[1]/product[1]/processing-instruction('report')[1]"); [EOL]     assertXPathValue(context, "name(//product/processing-instruction()[1])", "security"); [EOL] }
public void testNodeTypeProcessingInstruction() { [EOL]     assertXPathValue(context, "//product/processing-instruction()", "do not show anybody"); [EOL]     assertXPathValue(context, "//product/processing-instruction('report')", "average only"); [EOL]     assertXPathPointer(context, "//product/processing-instruction('report')", "/vendor[1]/product[1]/processing-instruction('report')[1]"); [EOL]     assertXPathValue(context, "name(//product/processing-instruction()[1])", "security"); [EOL] }
public void testNodeTypeProcessingInstruction() { [EOL]     assertXPathValue(context, "//product/processing-instruction()", "do not show anybody"); [EOL]     assertXPathValue(context, "//product/processing-instruction('report')", "average only"); [EOL]     assertXPathPointer(context, "//product/processing-instruction('report')", "/vendor[1]/product[1]/processing-instruction('report')[1]"); [EOL]     assertXPathValue(context, "name(//product/processing-instruction()[1])", "security"); [EOL] }
public void testNodeTypeProcessingInstruction() { [EOL]     assertXPathValue(context, "//product/processing-instruction()", "do not show anybody"); [EOL]     assertXPathValue(context, "//product/processing-instruction('report')", "average only"); [EOL]     assertXPathPointer(context, "//product/processing-instruction('report')", "/vendor[1]/product[1]/processing-instruction('report')[1]"); [EOL]     assertXPathValue(context, "name(//product/processing-instruction()[1])", "security"); [EOL] }
public void testNodeTypeProcessingInstruction() { [EOL]     assertXPathValue(context, "//product/processing-instruction()", "do not show anybody"); [EOL]     assertXPathValue(context, "//product/processing-instruction('report')", "average only"); [EOL]     assertXPathPointer(context, "//product/processing-instruction('report')", "/vendor[1]/product[1]/processing-instruction('report')[1]"); [EOL]     assertXPathValue(context, "name(//product/processing-instruction()[1])", "security"); [EOL] }
public void testAxisFollowing() { [EOL]     assertXPathValueIterator(context, "vendor/contact/following::location//street", list("Orchard Road", "Tangerine Drive")); [EOL]     assertXPathValue(context, "//location/following::price:sale/saleEnds", "never"); [EOL] }
public void testDefaultNamespaceIgnored() { [EOL]     context.registerDefaultNamespace("temp"); [EOL]     assertXPathValueAndPointer(context, "//pos//number", "110", "/node()[1]/pos[2]/register[1]/number[1]"); [EOL]     context.registerDefaultNamespace(null); [EOL] }
public void testDefaultNamespaceIgnored() { [EOL]     context.registerDefaultNamespace("temp"); [EOL]     assertXPathValueAndPointer(context, "//pos//number", "110", "/node()[1]/pos[2]/register[1]/number[1]"); [EOL]     context.registerDefaultNamespace(null); [EOL] }
public void testDefaultNamespaceIgnored() { [EOL]     context.registerDefaultNamespace("temp"); [EOL]     assertXPathValueAndPointer(context, "//pos//number", "110", "/node()[1]/pos[2]/register[1]/number[1]"); [EOL]     context.registerDefaultNamespace(null); [EOL] }
public void testDefaultNamespaceIgnored() { [EOL]     context.registerDefaultNamespace("temp"); [EOL]     assertXPathValueAndPointer(context, "//pos//number", "110", "/node()[1]/pos[2]/register[1]/number[1]"); [EOL]     context.registerDefaultNamespace(null); [EOL] }
public void testDefaultNamespaceIgnored() { [EOL]     context.registerDefaultNamespace("temp"); [EOL]     assertXPathValueAndPointer(context, "//pos//number", "110", "/node()[1]/pos[2]/register[1]/number[1]"); [EOL]     context.registerDefaultNamespace(null); [EOL] }
public void testDefaultNamespaceIgnored() { [EOL]     context.registerDefaultNamespace("temp"); [EOL]     assertXPathValueAndPointer(context, "//pos//number", "110", "/node()[1]/pos[2]/register[1]/number[1]"); [EOL]     context.registerDefaultNamespace(null); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testDefaultNamespaceIgnored() { [EOL]     context.registerDefaultNamespace("temp"); [EOL]     assertXPathValueAndPointer(context, "//pos//number", "110", "/node()[1]/pos[2]/register[1]/number[1]"); [EOL]     context.registerDefaultNamespace(null); [EOL] }
public void testDefaultNamespaceIgnored() { [EOL]     context.registerDefaultNamespace("temp"); [EOL]     assertXPathValueAndPointer(context, "//pos//number", "110", "/node()[1]/pos[2]/register[1]/number[1]"); [EOL]     context.registerDefaultNamespace(null); [EOL] }
public void testDefaultNamespaceIgnored() { [EOL]     context.registerDefaultNamespace("temp"); [EOL]     assertXPathValueAndPointer(context, "//pos//number", "110", "/node()[1]/pos[2]/register[1]/number[1]"); [EOL]     context.registerDefaultNamespace(null); [EOL] }
public void testDefaultNamespaceIgnored() { [EOL]     context.registerDefaultNamespace("temp"); [EOL]     assertXPathValueAndPointer(context, "//pos//number", "110", "/node()[1]/pos[2]/register[1]/number[1]"); [EOL]     context.registerDefaultNamespace(null); [EOL] }
public void testDefaultNamespaceIgnored() { [EOL]     context.registerDefaultNamespace("temp"); [EOL]     assertXPathValueAndPointer(context, "//pos//number", "110", "/node()[1]/pos[2]/register[1]/number[1]"); [EOL]     context.registerDefaultNamespace(null); [EOL] }
public void testDefaultNamespaceIgnored() { [EOL]     context.registerDefaultNamespace("temp"); [EOL]     assertXPathValueAndPointer(context, "//pos//number", "110", "/node()[1]/pos[2]/register[1]/number[1]"); [EOL]     context.registerDefaultNamespace(null); [EOL] }
public void testDefaultNamespaceIgnored() { [EOL]     context.registerDefaultNamespace("temp"); [EOL]     assertXPathValueAndPointer(context, "//pos//number", "110", "/node()[1]/pos[2]/register[1]/number[1]"); [EOL]     context.registerDefaultNamespace(null); [EOL] }
public void testDefaultNamespaceIgnored() { [EOL]     context.registerDefaultNamespace("temp"); [EOL]     assertXPathValueAndPointer(context, "//pos//number", "110", "/node()[1]/pos[2]/register[1]/number[1]"); [EOL]     context.registerDefaultNamespace(null); [EOL] }
public void testDefaultNamespaceIgnored() { [EOL]     context.registerDefaultNamespace("temp"); [EOL]     assertXPathValueAndPointer(context, "//pos//number", "110", "/node()[1]/pos[2]/register[1]/number[1]"); [EOL]     context.registerDefaultNamespace(null); [EOL] }
public void testDefaultNamespaceIgnored() { [EOL]     context.registerDefaultNamespace("temp"); [EOL]     assertXPathValueAndPointer(context, "//pos//number", "110", "/node()[1]/pos[2]/register[1]/number[1]"); [EOL]     context.registerDefaultNamespace(null); [EOL] }
public void testNodeTypeProcessingInstruction() { [EOL]     assertXPathValue(context, "//product/processing-instruction()", "do not show anybody"); [EOL]     assertXPathValue(context, "//product/processing-instruction('report')", "average only"); [EOL]     assertXPathPointer(context, "//product/processing-instruction('report')", "/vendor[1]/product[1]/processing-instruction('report')[1]"); [EOL]     assertXPathValue(context, "name(//product/processing-instruction()[1])", "security"); [EOL] }
public void testNodeTypeProcessingInstruction() { [EOL]     assertXPathValue(context, "//product/processing-instruction()", "do not show anybody"); [EOL]     assertXPathValue(context, "//product/processing-instruction('report')", "average only"); [EOL]     assertXPathPointer(context, "//product/processing-instruction('report')", "/vendor[1]/product[1]/processing-instruction('report')[1]"); [EOL]     assertXPathValue(context, "name(//product/processing-instruction()[1])", "security"); [EOL] }
public void testNodeTypeProcessingInstruction() { [EOL]     assertXPathValue(context, "//product/processing-instruction()", "do not show anybody"); [EOL]     assertXPathValue(context, "//product/processing-instruction('report')", "average only"); [EOL]     assertXPathPointer(context, "//product/processing-instruction('report')", "/vendor[1]/product[1]/processing-instruction('report')[1]"); [EOL]     assertXPathValue(context, "name(//product/processing-instruction()[1])", "security"); [EOL] }
public void testNodeTypeProcessingInstruction() { [EOL]     assertXPathValue(context, "//product/processing-instruction()", "do not show anybody"); [EOL]     assertXPathValue(context, "//product/processing-instruction('report')", "average only"); [EOL]     assertXPathPointer(context, "//product/processing-instruction('report')", "/vendor[1]/product[1]/processing-instruction('report')[1]"); [EOL]     assertXPathValue(context, "name(//product/processing-instruction()[1])", "security"); [EOL] }
public void testNodeTypeProcessingInstruction() { [EOL]     assertXPathValue(context, "//product/processing-instruction()", "do not show anybody"); [EOL]     assertXPathValue(context, "//product/processing-instruction('report')", "average only"); [EOL]     assertXPathPointer(context, "//product/processing-instruction('report')", "/vendor[1]/product[1]/processing-instruction('report')[1]"); [EOL]     assertXPathValue(context, "name(//product/processing-instruction()[1])", "security"); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "int/ancestor::root = /", Boolean.TRUE); [EOL]     assertXPathValue(context, "count(beans/name/ancestor-or-self::node())", new Double(5)); [EOL]     assertXPathValue(context, "beans/name/ancestor-or-self::node()[3] = /", Boolean.TRUE); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "int/ancestor::root = /", Boolean.TRUE); [EOL]     assertXPathValue(context, "count(beans/name/ancestor-or-self::node())", new Double(5)); [EOL]     assertXPathValue(context, "beans/name/ancestor-or-self::node()[3] = /", Boolean.TRUE); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "int/ancestor::root = /", Boolean.TRUE); [EOL]     assertXPathValue(context, "count(beans/name/ancestor-or-self::node())", new Double(5)); [EOL]     assertXPathValue(context, "beans/name/ancestor-or-self::node()[3] = /", Boolean.TRUE); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "int/ancestor::root = /", Boolean.TRUE); [EOL]     assertXPathValue(context, "count(beans/name/ancestor-or-self::node())", new Double(5)); [EOL]     assertXPathValue(context, "beans/name/ancestor-or-self::node()[3] = /", Boolean.TRUE); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "int/ancestor::root = /", Boolean.TRUE); [EOL]     assertXPathValue(context, "count(beans/name/ancestor-or-self::node())", new Double(5)); [EOL]     assertXPathValue(context, "beans/name/ancestor-or-self::node()[3] = /", Boolean.TRUE); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "int/ancestor::root = /", Boolean.TRUE); [EOL]     assertXPathValue(context, "count(beans/name/ancestor-or-self::node())", new Double(5)); [EOL]     assertXPathValue(context, "beans/name/ancestor-or-self::node()[3] = /", Boolean.TRUE); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "int/ancestor::root = /", Boolean.TRUE); [EOL]     assertXPathValue(context, "count(beans/name/ancestor-or-self::node())", new Double(5)); [EOL]     assertXPathValue(context, "beans/name/ancestor-or-self::node()[3] = /", Boolean.TRUE); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "int/ancestor::root = /", Boolean.TRUE); [EOL]     assertXPathValue(context, "count(beans/name/ancestor-or-self::node())", new Double(5)); [EOL]     assertXPathValue(context, "beans/name/ancestor-or-self::node()[3] = /", Boolean.TRUE); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "int/ancestor::root = /", Boolean.TRUE); [EOL]     assertXPathValue(context, "count(beans/name/ancestor-or-self::node())", new Double(5)); [EOL]     assertXPathValue(context, "beans/name/ancestor-or-self::node()[3] = /", Boolean.TRUE); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "int/ancestor::root = /", Boolean.TRUE); [EOL]     assertXPathValue(context, "count(beans/name/ancestor-or-self::node())", new Double(5)); [EOL]     assertXPathValue(context, "beans/name/ancestor-or-self::node()[3] = /", Boolean.TRUE); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "int/ancestor::root = /", Boolean.TRUE); [EOL]     assertXPathValue(context, "count(beans/name/ancestor-or-self::node())", new Double(5)); [EOL]     assertXPathValue(context, "beans/name/ancestor-or-self::node()[3] = /", Boolean.TRUE); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "int/ancestor::root = /", Boolean.TRUE); [EOL]     assertXPathValue(context, "count(beans/name/ancestor-or-self::node())", new Double(5)); [EOL]     assertXPathValue(context, "beans/name/ancestor-or-self::node()[3] = /", Boolean.TRUE); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "int/ancestor::root = /", Boolean.TRUE); [EOL]     assertXPathValue(context, "count(beans/name/ancestor-or-self::node())", new Double(5)); [EOL]     assertXPathValue(context, "beans/name/ancestor-or-self::node()[3] = /", Boolean.TRUE); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testMethodCall() { [EOL]     assertXPathValue(context, "length('foo')", new Integer(3)); [EOL]     assertXPathValue(context, "call:substring('foo', 1, 2)", "o"); [EOL]     assertXPathValue(context, "string(test:getFoo($test))", "4"); [EOL]     assertXPathValue(context, "string(call:getFoo($test))", "4"); [EOL]     assertXPathValue(context, "string(getFoo($test))", "4"); [EOL]     assertXPathValue(context, "string(test:setFooAndBar($test, 7, 'biz'))", "foo=7; bar=biz"); [EOL] }
public void testMethodCall() { [EOL]     assertXPathValue(context, "length('foo')", new Integer(3)); [EOL]     assertXPathValue(context, "call:substring('foo', 1, 2)", "o"); [EOL]     assertXPathValue(context, "string(test:getFoo($test))", "4"); [EOL]     assertXPathValue(context, "string(call:getFoo($test))", "4"); [EOL]     assertXPathValue(context, "string(getFoo($test))", "4"); [EOL]     assertXPathValue(context, "string(test:setFooAndBar($test, 7, 'biz'))", "foo=7; bar=biz"); [EOL] }
public void testMethodCall() { [EOL]     assertXPathValue(context, "length('foo')", new Integer(3)); [EOL]     assertXPathValue(context, "call:substring('foo', 1, 2)", "o"); [EOL]     assertXPathValue(context, "string(test:getFoo($test))", "4"); [EOL]     assertXPathValue(context, "string(call:getFoo($test))", "4"); [EOL]     assertXPathValue(context, "string(getFoo($test))", "4"); [EOL]     assertXPathValue(context, "string(test:setFooAndBar($test, 7, 'biz'))", "foo=7; bar=biz"); [EOL] }
public void testMethodCall() { [EOL]     assertXPathValue(context, "length('foo')", new Integer(3)); [EOL]     assertXPathValue(context, "call:substring('foo', 1, 2)", "o"); [EOL]     assertXPathValue(context, "string(test:getFoo($test))", "4"); [EOL]     assertXPathValue(context, "string(call:getFoo($test))", "4"); [EOL]     assertXPathValue(context, "string(getFoo($test))", "4"); [EOL]     assertXPathValue(context, "string(test:setFooAndBar($test, 7, 'biz'))", "foo=7; bar=biz"); [EOL] }
public void testMethodCall() { [EOL]     assertXPathValue(context, "length('foo')", new Integer(3)); [EOL]     assertXPathValue(context, "call:substring('foo', 1, 2)", "o"); [EOL]     assertXPathValue(context, "string(test:getFoo($test))", "4"); [EOL]     assertXPathValue(context, "string(call:getFoo($test))", "4"); [EOL]     assertXPathValue(context, "string(getFoo($test))", "4"); [EOL]     assertXPathValue(context, "string(test:setFooAndBar($test, 7, 'biz'))", "foo=7; bar=biz"); [EOL] }
public void testMethodCall() { [EOL]     assertXPathValue(context, "length('foo')", new Integer(3)); [EOL]     assertXPathValue(context, "call:substring('foo', 1, 2)", "o"); [EOL]     assertXPathValue(context, "string(test:getFoo($test))", "4"); [EOL]     assertXPathValue(context, "string(call:getFoo($test))", "4"); [EOL]     assertXPathValue(context, "string(getFoo($test))", "4"); [EOL]     assertXPathValue(context, "string(test:setFooAndBar($test, 7, 'biz'))", "foo=7; bar=biz"); [EOL] }
public void testMethodCall() { [EOL]     assertXPathValue(context, "length('foo')", new Integer(3)); [EOL]     assertXPathValue(context, "call:substring('foo', 1, 2)", "o"); [EOL]     assertXPathValue(context, "string(test:getFoo($test))", "4"); [EOL]     assertXPathValue(context, "string(call:getFoo($test))", "4"); [EOL]     assertXPathValue(context, "string(getFoo($test))", "4"); [EOL]     assertXPathValue(context, "string(test:setFooAndBar($test, 7, 'biz'))", "foo=7; bar=biz"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLocationPathNodeTest() { [EOL]     assertXPathExpression("node()", LocationPath.class); [EOL]     assertXPathExpression("text()", LocationPath.class); [EOL]     assertXPathExpression("comment()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction('test')", LocationPath.class); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/" + "ancestor::price:sale/saleEnds", "never"); [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/ancestor::price:*" + "/saleEnds", "never"); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/" + "ancestor::price:sale/saleEnds", "never"); [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/ancestor::price:*" + "/saleEnds", "never"); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/" + "ancestor::price:sale/saleEnds", "never"); [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/ancestor::price:*" + "/saleEnds", "never"); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/" + "ancestor::price:sale/saleEnds", "never"); [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/ancestor::price:*" + "/saleEnds", "never"); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/" + "ancestor::price:sale/saleEnds", "never"); [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/ancestor::price:*" + "/saleEnds", "never"); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/" + "ancestor::price:sale/saleEnds", "never"); [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/ancestor::price:*" + "/saleEnds", "never"); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/" + "ancestor::price:sale/saleEnds", "never"); [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/ancestor::price:*" + "/saleEnds", "never"); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/" + "ancestor::price:sale/saleEnds", "never"); [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/ancestor::price:*" + "/saleEnds", "never"); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/" + "ancestor::price:sale/saleEnds", "never"); [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/ancestor::price:*" + "/saleEnds", "never"); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/" + "ancestor::price:sale/saleEnds", "never"); [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/ancestor::price:*" + "/saleEnds", "never"); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/" + "ancestor::price:sale/saleEnds", "never"); [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/ancestor::price:*" + "/saleEnds", "never"); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/" + "ancestor::price:sale/saleEnds", "never"); [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/ancestor::price:*" + "/saleEnds", "never"); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/" + "ancestor::price:sale/saleEnds", "never"); [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/ancestor::price:*" + "/saleEnds", "never"); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/" + "ancestor::price:sale/saleEnds", "never"); [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/ancestor::price:*" + "/saleEnds", "never"); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/" + "ancestor::price:sale/saleEnds", "never"); [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/ancestor::price:*" + "/saleEnds", "never"); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/" + "ancestor::price:sale/saleEnds", "never"); [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/ancestor::price:*" + "/saleEnds", "never"); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/" + "ancestor::price:sale/saleEnds", "never"); [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/ancestor::price:*" + "/saleEnds", "never"); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/" + "ancestor::price:sale/saleEnds", "never"); [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/ancestor::price:*" + "/saleEnds", "never"); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/" + "ancestor::price:sale/saleEnds", "never"); [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/ancestor::price:*" + "/saleEnds", "never"); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/" + "ancestor::price:sale/saleEnds", "never"); [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/ancestor::price:*" + "/saleEnds", "never"); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/" + "ancestor::price:sale/saleEnds", "never"); [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/ancestor::price:*" + "/saleEnds", "never"); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/" + "ancestor::price:sale/saleEnds", "never"); [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/ancestor::price:*" + "/saleEnds", "never"); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/" + "ancestor::price:sale/saleEnds", "never"); [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/ancestor::price:*" + "/saleEnds", "never"); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/" + "ancestor::price:sale/saleEnds", "never"); [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/ancestor::price:*" + "/saleEnds", "never"); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/" + "ancestor::price:sale/saleEnds", "never"); [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/ancestor::price:*" + "/saleEnds", "never"); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/" + "ancestor::price:sale/saleEnds", "never"); [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/ancestor::price:*" + "/saleEnds", "never"); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/" + "ancestor::price:sale/saleEnds", "never"); [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/ancestor::price:*" + "/saleEnds", "never"); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/" + "ancestor::price:sale/saleEnds", "never"); [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/ancestor::price:*" + "/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testCoreOperationSum() { [EOL]     assertXPathExpression("3 + 1 + 4", CoreOperationAdd.class); [EOL]     assertXPathExpression("(3 + 1) + 4", CoreOperationAdd.class, "3 + 1 + 4"); [EOL]     assertXPathExpression("3 + (1 + 4)", CoreOperationAdd.class, "3 + 1 + 4"); [EOL]     assertXPathExpression("3 + -1", CoreOperationAdd.class, "3 + -1"); [EOL]     assertXPathExpression("2*-3 + -1", CoreOperationAdd.class, "2 * -3 + -1"); [EOL] }
public void testCoreOperationSum() { [EOL]     assertXPathExpression("3 + 1 + 4", CoreOperationAdd.class); [EOL]     assertXPathExpression("(3 + 1) + 4", CoreOperationAdd.class, "3 + 1 + 4"); [EOL]     assertXPathExpression("3 + (1 + 4)", CoreOperationAdd.class, "3 + 1 + 4"); [EOL]     assertXPathExpression("3 + -1", CoreOperationAdd.class, "3 + -1"); [EOL]     assertXPathExpression("2*-3 + -1", CoreOperationAdd.class, "2 * -3 + -1"); [EOL] }
public void testCoreOperationSum() { [EOL]     assertXPathExpression("3 + 1 + 4", CoreOperationAdd.class); [EOL]     assertXPathExpression("(3 + 1) + 4", CoreOperationAdd.class, "3 + 1 + 4"); [EOL]     assertXPathExpression("3 + (1 + 4)", CoreOperationAdd.class, "3 + 1 + 4"); [EOL]     assertXPathExpression("3 + -1", CoreOperationAdd.class, "3 + -1"); [EOL]     assertXPathExpression("2*-3 + -1", CoreOperationAdd.class, "2 * -3 + -1"); [EOL] }
public void testCoreOperationSum() { [EOL]     assertXPathExpression("3 + 1 + 4", CoreOperationAdd.class); [EOL]     assertXPathExpression("(3 + 1) + 4", CoreOperationAdd.class, "3 + 1 + 4"); [EOL]     assertXPathExpression("3 + (1 + 4)", CoreOperationAdd.class, "3 + 1 + 4"); [EOL]     assertXPathExpression("3 + -1", CoreOperationAdd.class, "3 + -1"); [EOL]     assertXPathExpression("2*-3 + -1", CoreOperationAdd.class, "2 * -3 + -1"); [EOL] }
public void testCoreOperationSum() { [EOL]     assertXPathExpression("3 + 1 + 4", CoreOperationAdd.class); [EOL]     assertXPathExpression("(3 + 1) + 4", CoreOperationAdd.class, "3 + 1 + 4"); [EOL]     assertXPathExpression("3 + (1 + 4)", CoreOperationAdd.class, "3 + 1 + 4"); [EOL]     assertXPathExpression("3 + -1", CoreOperationAdd.class, "3 + -1"); [EOL]     assertXPathExpression("2*-3 + -1", CoreOperationAdd.class, "2 * -3 + -1"); [EOL] }
public void testCoreOperationSum() { [EOL]     assertXPathExpression("3 + 1 + 4", CoreOperationAdd.class); [EOL]     assertXPathExpression("(3 + 1) + 4", CoreOperationAdd.class, "3 + 1 + 4"); [EOL]     assertXPathExpression("3 + (1 + 4)", CoreOperationAdd.class, "3 + 1 + 4"); [EOL]     assertXPathExpression("3 + -1", CoreOperationAdd.class, "3 + -1"); [EOL]     assertXPathExpression("2*-3 + -1", CoreOperationAdd.class, "2 * -3 + -1"); [EOL] }
public void testCoreOperationSum() { [EOL]     assertXPathExpression("3 + 1 + 4", CoreOperationAdd.class); [EOL]     assertXPathExpression("(3 + 1) + 4", CoreOperationAdd.class, "3 + 1 + 4"); [EOL]     assertXPathExpression("3 + (1 + 4)", CoreOperationAdd.class, "3 + 1 + 4"); [EOL]     assertXPathExpression("3 + -1", CoreOperationAdd.class, "3 + -1"); [EOL]     assertXPathExpression("2*-3 + -1", CoreOperationAdd.class, "2 * -3 + -1"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testCoreOperationUnion() { [EOL]     assertXPathExpression("3 | 1 | 4", CoreOperationUnion.class); [EOL] }
public void testCoreOperationUnion() { [EOL]     assertXPathExpression("3 | 1 | 4", CoreOperationUnion.class); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testCreatePathAndSetValueExpandCollection() { [EOL]     context.getVariables().declareVariable("array", new String[] { "Value1" }); [EOL]     assertXPathCreatePathAndSetValue(context, "$array[2]", "Value2", "$array[2]"); [EOL]     assertEquals("Created <" + "$array[1]" + ">", "Value1", context.getValue("$array[1]")); [EOL] }
public void testCreatePathAndSetValueExpandCollection() { [EOL]     context.getVariables().declareVariable("array", new String[] { "Value1" }); [EOL]     assertXPathCreatePathAndSetValue(context, "$array[2]", "Value2", "$array[2]"); [EOL]     assertEquals("Created <" + "$array[1]" + ">", "Value1", context.getValue("$array[1]")); [EOL] }
public void testCreatePathAndSetValueExpandCollection() { [EOL]     context.getVariables().declareVariable("array", new String[] { "Value1" }); [EOL]     assertXPathCreatePathAndSetValue(context, "$array[2]", "Value2", "$array[2]"); [EOL]     assertEquals("Created <" + "$array[1]" + ">", "Value1", context.getValue("$array[1]")); [EOL] }
public void testCoreOperationSum() { [EOL]     assertXPathExpression("3 + 1 + 4", CoreOperationAdd.class); [EOL]     assertXPathExpression("(3 + 1) + 4", CoreOperationAdd.class, "3 + 1 + 4"); [EOL]     assertXPathExpression("3 + (1 + 4)", CoreOperationAdd.class, "3 + 1 + 4"); [EOL]     assertXPathExpression("3 + -1", CoreOperationAdd.class, "3 + -1"); [EOL]     assertXPathExpression("2*-3 + -1", CoreOperationAdd.class, "2 * -3 + -1"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLocationPathNodeTest() { [EOL]     assertXPathExpression("node()", LocationPath.class); [EOL]     assertXPathExpression("text()", LocationPath.class); [EOL]     assertXPathExpression("comment()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction('test')", LocationPath.class); [EOL] }
public void testLocationPathNodeTest() { [EOL]     assertXPathExpression("node()", LocationPath.class); [EOL]     assertXPathExpression("text()", LocationPath.class); [EOL]     assertXPathExpression("comment()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction('test')", LocationPath.class); [EOL] }
public void testLocationPathNodeTest() { [EOL]     assertXPathExpression("node()", LocationPath.class); [EOL]     assertXPathExpression("text()", LocationPath.class); [EOL]     assertXPathExpression("comment()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction('test')", LocationPath.class); [EOL] }
public void testLocationPathNodeTest() { [EOL]     assertXPathExpression("node()", LocationPath.class); [EOL]     assertXPathExpression("text()", LocationPath.class); [EOL]     assertXPathExpression("comment()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction('test')", LocationPath.class); [EOL] }
public void testLocationPathNodeTest() { [EOL]     assertXPathExpression("node()", LocationPath.class); [EOL]     assertXPathExpression("text()", LocationPath.class); [EOL]     assertXPathExpression("comment()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction('test')", LocationPath.class); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLocationPathNodeTest() { [EOL]     assertXPathExpression("node()", LocationPath.class); [EOL]     assertXPathExpression("text()", LocationPath.class); [EOL]     assertXPathExpression("comment()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction('test')", LocationPath.class); [EOL] }
public void testLocationPathNodeTest() { [EOL]     assertXPathExpression("node()", LocationPath.class); [EOL]     assertXPathExpression("text()", LocationPath.class); [EOL]     assertXPathExpression("comment()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction('test')", LocationPath.class); [EOL] }
public void testLocationPathNodeTest() { [EOL]     assertXPathExpression("node()", LocationPath.class); [EOL]     assertXPathExpression("text()", LocationPath.class); [EOL]     assertXPathExpression("comment()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction('test')", LocationPath.class); [EOL] }
public void testLocationPathNodeTest() { [EOL]     assertXPathExpression("node()", LocationPath.class); [EOL]     assertXPathExpression("text()", LocationPath.class); [EOL]     assertXPathExpression("comment()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction('test')", LocationPath.class); [EOL] }
public void testLocationPathNodeTest() { [EOL]     assertXPathExpression("node()", LocationPath.class); [EOL]     assertXPathExpression("text()", LocationPath.class); [EOL]     assertXPathExpression("comment()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction('test')", LocationPath.class); [EOL] }
public void testLocationPathNodeTest() { [EOL]     assertXPathExpression("node()", LocationPath.class); [EOL]     assertXPathExpression("text()", LocationPath.class); [EOL]     assertXPathExpression("comment()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction('test')", LocationPath.class); [EOL] }
public void testLocationPathNodeTest() { [EOL]     assertXPathExpression("node()", LocationPath.class); [EOL]     assertXPathExpression("text()", LocationPath.class); [EOL]     assertXPathExpression("comment()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction('test')", LocationPath.class); [EOL] }
public void testLocationPathNodeTest() { [EOL]     assertXPathExpression("node()", LocationPath.class); [EOL]     assertXPathExpression("text()", LocationPath.class); [EOL]     assertXPathExpression("comment()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction('test')", LocationPath.class); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLocationPathNodeTest() { [EOL]     assertXPathExpression("node()", LocationPath.class); [EOL]     assertXPathExpression("text()", LocationPath.class); [EOL]     assertXPathExpression("comment()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction('test')", LocationPath.class); [EOL] }
public void testLocationPathNodeTest() { [EOL]     assertXPathExpression("node()", LocationPath.class); [EOL]     assertXPathExpression("text()", LocationPath.class); [EOL]     assertXPathExpression("comment()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction('test')", LocationPath.class); [EOL] }
public void testLocationPathNodeTest() { [EOL]     assertXPathExpression("node()", LocationPath.class); [EOL]     assertXPathExpression("text()", LocationPath.class); [EOL]     assertXPathExpression("comment()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction('test')", LocationPath.class); [EOL] }
public void testLocationPathNodeTest() { [EOL]     assertXPathExpression("node()", LocationPath.class); [EOL]     assertXPathExpression("text()", LocationPath.class); [EOL]     assertXPathExpression("comment()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction('test')", LocationPath.class); [EOL] }
public void testLocationPathNodeTest() { [EOL]     assertXPathExpression("node()", LocationPath.class); [EOL]     assertXPathExpression("text()", LocationPath.class); [EOL]     assertXPathExpression("comment()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction('test')", LocationPath.class); [EOL] }
public void testLocationPathNodeTest() { [EOL]     assertXPathExpression("node()", LocationPath.class); [EOL]     assertXPathExpression("text()", LocationPath.class); [EOL]     assertXPathExpression("comment()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction('test')", LocationPath.class); [EOL] }
public void testLocationPathNodeTest() { [EOL]     assertXPathExpression("node()", LocationPath.class); [EOL]     assertXPathExpression("text()", LocationPath.class); [EOL]     assertXPathExpression("comment()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction('test')", LocationPath.class); [EOL] }
public void testLocationPathNodeTest() { [EOL]     assertXPathExpression("node()", LocationPath.class); [EOL]     assertXPathExpression("text()", LocationPath.class); [EOL]     assertXPathExpression("comment()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction('test')", LocationPath.class); [EOL] }
public void testLocationPathNodeTest() { [EOL]     assertXPathExpression("node()", LocationPath.class); [EOL]     assertXPathExpression("text()", LocationPath.class); [EOL]     assertXPathExpression("comment()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction('test')", LocationPath.class); [EOL] }
public void testLocationPathNodeTest() { [EOL]     assertXPathExpression("node()", LocationPath.class); [EOL]     assertXPathExpression("text()", LocationPath.class); [EOL]     assertXPathExpression("comment()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction('test')", LocationPath.class); [EOL] }
public void testLocationPathNodeTest() { [EOL]     assertXPathExpression("node()", LocationPath.class); [EOL]     assertXPathExpression("text()", LocationPath.class); [EOL]     assertXPathExpression("comment()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction('test')", LocationPath.class); [EOL] }
public void testLocationPathNodeTest() { [EOL]     assertXPathExpression("node()", LocationPath.class); [EOL]     assertXPathExpression("text()", LocationPath.class); [EOL]     assertXPathExpression("comment()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction('test')", LocationPath.class); [EOL] }
public void testLocationPathNodeTest() { [EOL]     assertXPathExpression("node()", LocationPath.class); [EOL]     assertXPathExpression("text()", LocationPath.class); [EOL]     assertXPathExpression("comment()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction('test')", LocationPath.class); [EOL] }
public void testLocationPathNodeTest() { [EOL]     assertXPathExpression("node()", LocationPath.class); [EOL]     assertXPathExpression("text()", LocationPath.class); [EOL]     assertXPathExpression("comment()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction('test')", LocationPath.class); [EOL] }
public void testLocationPathNodeTest() { [EOL]     assertXPathExpression("node()", LocationPath.class); [EOL]     assertXPathExpression("text()", LocationPath.class); [EOL]     assertXPathExpression("comment()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction('test')", LocationPath.class); [EOL] }
public void testLocationPathNodeTest() { [EOL]     assertXPathExpression("node()", LocationPath.class); [EOL]     assertXPathExpression("text()", LocationPath.class); [EOL]     assertXPathExpression("comment()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction('test')", LocationPath.class); [EOL] }
public void testLocationPathNodeTest() { [EOL]     assertXPathExpression("node()", LocationPath.class); [EOL]     assertXPathExpression("text()", LocationPath.class); [EOL]     assertXPathExpression("comment()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction('test')", LocationPath.class); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testCoreOperationSum() { [EOL]     assertXPathExpression("3 + 1 + 4", CoreOperationAdd.class); [EOL]     assertXPathExpression("(3 + 1) + 4", CoreOperationAdd.class, "3 + 1 + 4"); [EOL]     assertXPathExpression("3 + (1 + 4)", CoreOperationAdd.class, "3 + 1 + 4"); [EOL]     assertXPathExpression("3 + -1", CoreOperationAdd.class, "3 + -1"); [EOL]     assertXPathExpression("2*-3 + -1", CoreOperationAdd.class, "2 * -3 + -1"); [EOL] }
public void testCoreOperationSum() { [EOL]     assertXPathExpression("3 + 1 + 4", CoreOperationAdd.class); [EOL]     assertXPathExpression("(3 + 1) + 4", CoreOperationAdd.class, "3 + 1 + 4"); [EOL]     assertXPathExpression("3 + (1 + 4)", CoreOperationAdd.class, "3 + 1 + 4"); [EOL]     assertXPathExpression("3 + -1", CoreOperationAdd.class, "3 + -1"); [EOL]     assertXPathExpression("2*-3 + -1", CoreOperationAdd.class, "2 * -3 + -1"); [EOL] }
public void testCoreOperationSum() { [EOL]     assertXPathExpression("3 + 1 + 4", CoreOperationAdd.class); [EOL]     assertXPathExpression("(3 + 1) + 4", CoreOperationAdd.class, "3 + 1 + 4"); [EOL]     assertXPathExpression("3 + (1 + 4)", CoreOperationAdd.class, "3 + 1 + 4"); [EOL]     assertXPathExpression("3 + -1", CoreOperationAdd.class, "3 + -1"); [EOL]     assertXPathExpression("2*-3 + -1", CoreOperationAdd.class, "2 * -3 + -1"); [EOL] }
public void testCoreOperationSum() { [EOL]     assertXPathExpression("3 + 1 + 4", CoreOperationAdd.class); [EOL]     assertXPathExpression("(3 + 1) + 4", CoreOperationAdd.class, "3 + 1 + 4"); [EOL]     assertXPathExpression("3 + (1 + 4)", CoreOperationAdd.class, "3 + 1 + 4"); [EOL]     assertXPathExpression("3 + -1", CoreOperationAdd.class, "3 + -1"); [EOL]     assertXPathExpression("2*-3 + -1", CoreOperationAdd.class, "2 * -3 + -1"); [EOL] }
public void testCoreOperationSum() { [EOL]     assertXPathExpression("3 + 1 + 4", CoreOperationAdd.class); [EOL]     assertXPathExpression("(3 + 1) + 4", CoreOperationAdd.class, "3 + 1 + 4"); [EOL]     assertXPathExpression("3 + (1 + 4)", CoreOperationAdd.class, "3 + 1 + 4"); [EOL]     assertXPathExpression("3 + -1", CoreOperationAdd.class, "3 + -1"); [EOL]     assertXPathExpression("2*-3 + -1", CoreOperationAdd.class, "2 * -3 + -1"); [EOL] }
public void testCoreOperationSum() { [EOL]     assertXPathExpression("3 + 1 + 4", CoreOperationAdd.class); [EOL]     assertXPathExpression("(3 + 1) + 4", CoreOperationAdd.class, "3 + 1 + 4"); [EOL]     assertXPathExpression("3 + (1 + 4)", CoreOperationAdd.class, "3 + 1 + 4"); [EOL]     assertXPathExpression("3 + -1", CoreOperationAdd.class, "3 + -1"); [EOL]     assertXPathExpression("2*-3 + -1", CoreOperationAdd.class, "2 * -3 + -1"); [EOL] }
public void testCoreOperationSum() { [EOL]     assertXPathExpression("3 + 1 + 4", CoreOperationAdd.class); [EOL]     assertXPathExpression("(3 + 1) + 4", CoreOperationAdd.class, "3 + 1 + 4"); [EOL]     assertXPathExpression("3 + (1 + 4)", CoreOperationAdd.class, "3 + 1 + 4"); [EOL]     assertXPathExpression("3 + -1", CoreOperationAdd.class, "3 + -1"); [EOL]     assertXPathExpression("2*-3 + -1", CoreOperationAdd.class, "2 * -3 + -1"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testCoreOperationSum() { [EOL]     assertXPathExpression("3 + 1 + 4", CoreOperationAdd.class); [EOL]     assertXPathExpression("(3 + 1) + 4", CoreOperationAdd.class, "3 + 1 + 4"); [EOL]     assertXPathExpression("3 + (1 + 4)", CoreOperationAdd.class, "3 + 1 + 4"); [EOL]     assertXPathExpression("3 + -1", CoreOperationAdd.class, "3 + -1"); [EOL]     assertXPathExpression("2*-3 + -1", CoreOperationAdd.class, "2 * -3 + -1"); [EOL] }
public void testCoreOperationSum() { [EOL]     assertXPathExpression("3 + 1 + 4", CoreOperationAdd.class); [EOL]     assertXPathExpression("(3 + 1) + 4", CoreOperationAdd.class, "3 + 1 + 4"); [EOL]     assertXPathExpression("3 + (1 + 4)", CoreOperationAdd.class, "3 + 1 + 4"); [EOL]     assertXPathExpression("3 + -1", CoreOperationAdd.class, "3 + -1"); [EOL]     assertXPathExpression("2*-3 + -1", CoreOperationAdd.class, "2 * -3 + -1"); [EOL] }
public void testCoreOperationSum() { [EOL]     assertXPathExpression("3 + 1 + 4", CoreOperationAdd.class); [EOL]     assertXPathExpression("(3 + 1) + 4", CoreOperationAdd.class, "3 + 1 + 4"); [EOL]     assertXPathExpression("3 + (1 + 4)", CoreOperationAdd.class, "3 + 1 + 4"); [EOL]     assertXPathExpression("3 + -1", CoreOperationAdd.class, "3 + -1"); [EOL]     assertXPathExpression("2*-3 + -1", CoreOperationAdd.class, "2 * -3 + -1"); [EOL] }
public void testCoreOperationSum() { [EOL]     assertXPathExpression("3 + 1 + 4", CoreOperationAdd.class); [EOL]     assertXPathExpression("(3 + 1) + 4", CoreOperationAdd.class, "3 + 1 + 4"); [EOL]     assertXPathExpression("3 + (1 + 4)", CoreOperationAdd.class, "3 + 1 + 4"); [EOL]     assertXPathExpression("3 + -1", CoreOperationAdd.class, "3 + -1"); [EOL]     assertXPathExpression("2*-3 + -1", CoreOperationAdd.class, "2 * -3 + -1"); [EOL] }
public void testCoreOperationSum() { [EOL]     assertXPathExpression("3 + 1 + 4", CoreOperationAdd.class); [EOL]     assertXPathExpression("(3 + 1) + 4", CoreOperationAdd.class, "3 + 1 + 4"); [EOL]     assertXPathExpression("3 + (1 + 4)", CoreOperationAdd.class, "3 + 1 + 4"); [EOL]     assertXPathExpression("3 + -1", CoreOperationAdd.class, "3 + -1"); [EOL]     assertXPathExpression("2*-3 + -1", CoreOperationAdd.class, "2 * -3 + -1"); [EOL] }
public void testCoreOperationSum() { [EOL]     assertXPathExpression("3 + 1 + 4", CoreOperationAdd.class); [EOL]     assertXPathExpression("(3 + 1) + 4", CoreOperationAdd.class, "3 + 1 + 4"); [EOL]     assertXPathExpression("3 + (1 + 4)", CoreOperationAdd.class, "3 + 1 + 4"); [EOL]     assertXPathExpression("3 + -1", CoreOperationAdd.class, "3 + -1"); [EOL]     assertXPathExpression("2*-3 + -1", CoreOperationAdd.class, "2 * -3 + -1"); [EOL] }
public void testCoreOperationSum() { [EOL]     assertXPathExpression("3 + 1 + 4", CoreOperationAdd.class); [EOL]     assertXPathExpression("(3 + 1) + 4", CoreOperationAdd.class, "3 + 1 + 4"); [EOL]     assertXPathExpression("3 + (1 + 4)", CoreOperationAdd.class, "3 + 1 + 4"); [EOL]     assertXPathExpression("3 + -1", CoreOperationAdd.class, "3 + -1"); [EOL]     assertXPathExpression("2*-3 + -1", CoreOperationAdd.class, "2 * -3 + -1"); [EOL] }
public void testCoreOperationSum() { [EOL]     assertXPathExpression("3 + 1 + 4", CoreOperationAdd.class); [EOL]     assertXPathExpression("(3 + 1) + 4", CoreOperationAdd.class, "3 + 1 + 4"); [EOL]     assertXPathExpression("3 + (1 + 4)", CoreOperationAdd.class, "3 + 1 + 4"); [EOL]     assertXPathExpression("3 + -1", CoreOperationAdd.class, "3 + -1"); [EOL]     assertXPathExpression("2*-3 + -1", CoreOperationAdd.class, "2 * -3 + -1"); [EOL] }
public void testIterateArray() { [EOL]     Map map = new HashMap(); [EOL]     map.put("foo", new String[] { "a", "b", "c" }); [EOL]     JXPathContext context = JXPathContext.newContext(map); [EOL]     assertXPathValueIterator(context, "foo", list("a", "b", "c")); [EOL] }
public void testIterateArray() { [EOL]     Map map = new HashMap(); [EOL]     map.put("foo", new String[] { "a", "b", "c" }); [EOL]     JXPathContext context = JXPathContext.newContext(map); [EOL]     assertXPathValueIterator(context, "foo", list("a", "b", "c")); [EOL] }
public void testNodeSetReturn() { [EOL]     assertXPathValueIterator(context, "test:nodeSet()/name", list("Name 1", "Name 2")); [EOL]     assertXPathPointerIterator(context, "test:nodeSet()/name", list("/beans[1]/name", "/beans[2]/name")); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/name", "Name 1", "/beans[1]/name"); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/@name", "Name 1", "/beans[1]/@name"); [EOL] }
public void testNull() { [EOL]     assertXPathPointerLenient(context, "$null", "$null"); [EOL]     assertXPathPointerLenient(context, "$null[3]", "$null[3]"); [EOL]     assertXPathPointerLenient(context, "$testnull/nothing", "$testnull/nothing"); [EOL]     assertXPathPointerLenient(context, "$testnull/nothing[2]", "$testnull/nothing[2]"); [EOL]     assertXPathPointerLenient(context, "beans[8]/int", "/beans[8]/int"); [EOL]     assertXPathValueIterator(context, "$testnull/nothing[1]", Collections.EMPTY_LIST); [EOL]     JXPathContext ctx = JXPathContext.newContext(new TestNull()); [EOL]     assertXPathValue(ctx, "nothing", null); [EOL]     assertXPathValue(ctx, "child/nothing", null); [EOL]     assertXPathValue(ctx, "array[2]", null); [EOL]     assertXPathValueLenient(ctx, "nothing/something", null); [EOL]     assertXPathValueLenient(ctx, "array[2]/something", null); [EOL] }
public void testNull() { [EOL]     assertXPathPointerLenient(context, "$null", "$null"); [EOL]     assertXPathPointerLenient(context, "$null[3]", "$null[3]"); [EOL]     assertXPathPointerLenient(context, "$testnull/nothing", "$testnull/nothing"); [EOL]     assertXPathPointerLenient(context, "$testnull/nothing[2]", "$testnull/nothing[2]"); [EOL]     assertXPathPointerLenient(context, "beans[8]/int", "/beans[8]/int"); [EOL]     assertXPathValueIterator(context, "$testnull/nothing[1]", Collections.EMPTY_LIST); [EOL]     JXPathContext ctx = JXPathContext.newContext(new TestNull()); [EOL]     assertXPathValue(ctx, "nothing", null); [EOL]     assertXPathValue(ctx, "child/nothing", null); [EOL]     assertXPathValue(ctx, "array[2]", null); [EOL]     assertXPathValueLenient(ctx, "nothing/something", null); [EOL]     assertXPathValueLenient(ctx, "array[2]/something", null); [EOL] }
public void testMapOfMaps() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     Map fruit = new HashMap(); [EOL]     fruit.put("apple", "green"); [EOL]     fruit.put("orange", "red"); [EOL]     Map meat = new HashMap(); [EOL]     meat.put("pork", "pig"); [EOL]     meat.put("beef", "cow"); [EOL]     bean.getMap().put("fruit", fruit); [EOL]     bean.getMap().put("meat", meat); [EOL]     assertXPathPointer(context, "//beef", "/map[@name='meat'][@name='beef']"); [EOL]     assertXPathPointer(context, "map//apple", "/map[@name='fruit'][@name='apple']"); [EOL]     assertXPathPointerLenient(context, "map//banana", "null()"); [EOL]     assertXPathPointerLenient(context, "//fruit/pear", "/map[@name='fruit']/pear"); [EOL] }
public void testMapOfMaps() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     Map fruit = new HashMap(); [EOL]     fruit.put("apple", "green"); [EOL]     fruit.put("orange", "red"); [EOL]     Map meat = new HashMap(); [EOL]     meat.put("pork", "pig"); [EOL]     meat.put("beef", "cow"); [EOL]     bean.getMap().put("fruit", fruit); [EOL]     bean.getMap().put("meat", meat); [EOL]     assertXPathPointer(context, "//beef", "/map[@name='meat'][@name='beef']"); [EOL]     assertXPathPointer(context, "map//apple", "/map[@name='fruit'][@name='apple']"); [EOL]     assertXPathPointerLenient(context, "map//banana", "null()"); [EOL]     assertXPathPointerLenient(context, "//fruit/pear", "/map[@name='fruit']/pear"); [EOL] }
public void testMapOfMaps() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     Map fruit = new HashMap(); [EOL]     fruit.put("apple", "green"); [EOL]     fruit.put("orange", "red"); [EOL]     Map meat = new HashMap(); [EOL]     meat.put("pork", "pig"); [EOL]     meat.put("beef", "cow"); [EOL]     bean.getMap().put("fruit", fruit); [EOL]     bean.getMap().put("meat", meat); [EOL]     assertXPathPointer(context, "//beef", "/map[@name='meat'][@name='beef']"); [EOL]     assertXPathPointer(context, "map//apple", "/map[@name='fruit'][@name='apple']"); [EOL]     assertXPathPointerLenient(context, "map//banana", "null()"); [EOL]     assertXPathPointerLenient(context, "//fruit/pear", "/map[@name='fruit']/pear"); [EOL] }
public void testMapOfMaps() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     Map fruit = new HashMap(); [EOL]     fruit.put("apple", "green"); [EOL]     fruit.put("orange", "red"); [EOL]     Map meat = new HashMap(); [EOL]     meat.put("pork", "pig"); [EOL]     meat.put("beef", "cow"); [EOL]     bean.getMap().put("fruit", fruit); [EOL]     bean.getMap().put("meat", meat); [EOL]     assertXPathPointer(context, "//beef", "/map[@name='meat'][@name='beef']"); [EOL]     assertXPathPointer(context, "map//apple", "/map[@name='fruit'][@name='apple']"); [EOL]     assertXPathPointerLenient(context, "map//banana", "null()"); [EOL]     assertXPathPointerLenient(context, "//fruit/pear", "/map[@name='fruit']/pear"); [EOL] }
public void testIDFunction() { [EOL]     context.setIdentityManager(new IdentityManager() { [EOL]  [EOL]         public Pointer getPointerByID(JXPathContext context, String id) { [EOL]             NodePointer ptr = (NodePointer) context.getPointer("/document"); [EOL]             ptr = ptr.getValuePointer(); [EOL]             return ptr.getPointerByID(context, id); [EOL]         } [EOL]     }); [EOL]     assertXPathValueAndPointer(context, "id(101)//street", "Tangerine Drive", "id('101')/address[1]/street[1]"); [EOL]     assertXPathPointerLenient(context, "id(105)/address/street", "id(105)/address/street"); [EOL] }
public void testCreatePathAndSetValueWithMatrix() { [EOL]     context.setValue("matrix", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/matrix[1]/.[1]", new Integer(4), "/matrix[1]/.[1]"); [EOL] }
public void testCreatePathAndSetValueWithMatrix() { [EOL]     context.setValue("matrix", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/matrix[1]/.[1]", new Integer(4), "/matrix[1]/.[1]"); [EOL] }
public void testCreatePathAndSetValueWithMatrix() { [EOL]     context.setValue("matrix", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/matrix[1]/.[1]", new Integer(4), "/matrix[1]/.[1]"); [EOL] }
public void testIDFunction() { [EOL]     context.setIdentityManager(new IdentityManager() { [EOL]  [EOL]         public Pointer getPointerByID(JXPathContext context, String id) { [EOL]             NodePointer ptr = (NodePointer) context.getPointer("/document"); [EOL]             ptr = ptr.getValuePointer(); [EOL]             return ptr.getPointerByID(context, id); [EOL]         } [EOL]     }); [EOL]     assertXPathValueAndPointer(context, "id(101)//street", "Tangerine Drive", "id('101')/address[1]/street[1]"); [EOL]     assertXPathPointerLenient(context, "id(105)/address/street", "id(105)/address/street"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "int/ancestor::root = /", Boolean.TRUE); [EOL]     assertXPathValue(context, "count(beans/name/ancestor-or-self::node())", new Double(5)); [EOL]     assertXPathValue(context, "beans/name/ancestor-or-self::node()[3] = /", Boolean.TRUE); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "int/ancestor::root = /", Boolean.TRUE); [EOL]     assertXPathValue(context, "count(beans/name/ancestor-or-self::node())", new Double(5)); [EOL]     assertXPathValue(context, "beans/name/ancestor-or-self::node()[3] = /", Boolean.TRUE); [EOL] }
public void testStaticMethodLookupWithExpressionContext() { [EOL]     Object[] args = new Object[0]; [EOL]     Function func = functions.getFunction("test", "path", args); [EOL]     assertEquals("test:path()", func.invoke(new Context(new Integer(1)), args), "1"); [EOL] }
public void testStaticMethodLookupWithExpressionContext() { [EOL]     Object[] args = new Object[0]; [EOL]     Function func = functions.getFunction("test", "path", args); [EOL]     assertEquals("test:path()", func.invoke(new Context(new Integer(1)), args), "1"); [EOL] }
public void testStaticMethodLookupWithExpressionContext() { [EOL]     Object[] args = new Object[0]; [EOL]     Function func = functions.getFunction("test", "path", args); [EOL]     assertEquals("test:path()", func.invoke(new Context(new Integer(1)), args), "1"); [EOL] }
public void testStaticMethodLookupWithExpressionContext() { [EOL]     Object[] args = new Object[0]; [EOL]     Function func = functions.getFunction("test", "path", args); [EOL]     assertEquals("test:path()", func.invoke(new Context(new Integer(1)), args), "1"); [EOL] }
public void testStaticMethodLookupWithExpressionContext() { [EOL]     Object[] args = new Object[0]; [EOL]     Function func = functions.getFunction("test", "path", args); [EOL]     assertEquals("test:path()", func.invoke(new Context(new Integer(1)), args), "1"); [EOL] }
public void testStaticMethodLookupWithExpressionContext() { [EOL]     Object[] args = new Object[0]; [EOL]     Function func = functions.getFunction("test", "path", args); [EOL]     assertEquals("test:path()", func.invoke(new Context(new Integer(1)), args), "1"); [EOL] }
public void testStaticMethodLookupWithExpressionContext() { [EOL]     Object[] args = new Object[0]; [EOL]     Function func = functions.getFunction("test", "path", args); [EOL]     assertEquals("test:path()", func.invoke(new Context(new Integer(1)), args), "1"); [EOL] }
public void testStaticMethodLookupWithExpressionContext() { [EOL]     Object[] args = new Object[0]; [EOL]     Function func = functions.getFunction("test", "path", args); [EOL]     assertEquals("test:path()", func.invoke(new Context(new Integer(1)), args), "1"); [EOL] }
public void testMatrix() { [EOL]     assertXPathValueAndPointer(context, "$matrix[1]/.[1]", new Integer(3), "$matrix[1]/.[1]"); [EOL]     context.setValue("$matrix[1]/.[1]", new Integer(2)); [EOL]     assertXPathValueAndPointer(context, "matrix[1]/.[1]", new Integer(3), "/matrix[1]/.[1]"); [EOL]     context.setValue("matrix[1]/.[1]", "2"); [EOL]     assertXPathValue(context, "matrix[1]/.[1]", new Integer(2)); [EOL]     context.getVariables().declareVariable("wholebean", context.getContextBean()); [EOL]     assertXPathValueAndPointer(context, "$wholebean/matrix[1]/.[1]", new Integer(2), "$wholebean/matrix[1]/.[1]"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         context.setValue("$wholebean/matrix[1]/.[2]", "4"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception setting value of non-existent element", ex); [EOL]     ex = false; [EOL]     try { [EOL]         context.setValue("$wholebean/matrix[2]/.[1]", "4"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception setting value of non-existent element", ex); [EOL] }
public void testNull() { [EOL]     assertXPathPointerLenient(context, "$null", "$null"); [EOL]     assertXPathPointerLenient(context, "$null[3]", "$null[3]"); [EOL]     assertXPathPointerLenient(context, "$testnull/nothing", "$testnull/nothing"); [EOL]     assertXPathPointerLenient(context, "$testnull/nothing[2]", "$testnull/nothing[2]"); [EOL]     assertXPathPointerLenient(context, "beans[8]/int", "/beans[8]/int"); [EOL]     assertXPathValueIterator(context, "$testnull/nothing[1]", Collections.EMPTY_LIST); [EOL]     JXPathContext ctx = JXPathContext.newContext(new TestNull()); [EOL]     assertXPathValue(ctx, "nothing", null); [EOL]     assertXPathValue(ctx, "child/nothing", null); [EOL]     assertXPathValue(ctx, "array[2]", null); [EOL]     assertXPathValueLenient(ctx, "nothing/something", null); [EOL]     assertXPathValueLenient(ctx, "array[2]/something", null); [EOL] }
public void testNull() { [EOL]     assertXPathPointerLenient(context, "$null", "$null"); [EOL]     assertXPathPointerLenient(context, "$null[3]", "$null[3]"); [EOL]     assertXPathPointerLenient(context, "$testnull/nothing", "$testnull/nothing"); [EOL]     assertXPathPointerLenient(context, "$testnull/nothing[2]", "$testnull/nothing[2]"); [EOL]     assertXPathPointerLenient(context, "beans[8]/int", "/beans[8]/int"); [EOL]     assertXPathValueIterator(context, "$testnull/nothing[1]", Collections.EMPTY_LIST); [EOL]     JXPathContext ctx = JXPathContext.newContext(new TestNull()); [EOL]     assertXPathValue(ctx, "nothing", null); [EOL]     assertXPathValue(ctx, "child/nothing", null); [EOL]     assertXPathValue(ctx, "array[2]", null); [EOL]     assertXPathValueLenient(ctx, "nothing/something", null); [EOL]     assertXPathValueLenient(ctx, "array[2]/something", null); [EOL] }
public void testNull() { [EOL]     assertXPathPointerLenient(context, "$null", "$null"); [EOL]     assertXPathPointerLenient(context, "$null[3]", "$null[3]"); [EOL]     assertXPathPointerLenient(context, "$testnull/nothing", "$testnull/nothing"); [EOL]     assertXPathPointerLenient(context, "$testnull/nothing[2]", "$testnull/nothing[2]"); [EOL]     assertXPathPointerLenient(context, "beans[8]/int", "/beans[8]/int"); [EOL]     assertXPathValueIterator(context, "$testnull/nothing[1]", Collections.EMPTY_LIST); [EOL]     JXPathContext ctx = JXPathContext.newContext(new TestNull()); [EOL]     assertXPathValue(ctx, "nothing", null); [EOL]     assertXPathValue(ctx, "child/nothing", null); [EOL]     assertXPathValue(ctx, "array[2]", null); [EOL]     assertXPathValueLenient(ctx, "nothing/something", null); [EOL]     assertXPathValueLenient(ctx, "array[2]/something", null); [EOL] }
public void testNull() { [EOL]     assertXPathPointerLenient(context, "$null", "$null"); [EOL]     assertXPathPointerLenient(context, "$null[3]", "$null[3]"); [EOL]     assertXPathPointerLenient(context, "$testnull/nothing", "$testnull/nothing"); [EOL]     assertXPathPointerLenient(context, "$testnull/nothing[2]", "$testnull/nothing[2]"); [EOL]     assertXPathPointerLenient(context, "beans[8]/int", "/beans[8]/int"); [EOL]     assertXPathValueIterator(context, "$testnull/nothing[1]", Collections.EMPTY_LIST); [EOL]     JXPathContext ctx = JXPathContext.newContext(new TestNull()); [EOL]     assertXPathValue(ctx, "nothing", null); [EOL]     assertXPathValue(ctx, "child/nothing", null); [EOL]     assertXPathValue(ctx, "array[2]", null); [EOL]     assertXPathValueLenient(ctx, "nothing/something", null); [EOL]     assertXPathValueLenient(ctx, "array[2]/something", null); [EOL] }
public void testNodeSetReturn() { [EOL]     assertXPathValueIterator(context, "test:nodeSet()/name", list("Name 1", "Name 2")); [EOL]     assertXPathPointerIterator(context, "test:nodeSet()/name", list("/beans[1]/name", "/beans[2]/name")); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/name", "Name 1", "/beans[1]/name"); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/@name", "Name 1", "/beans[1]/@name"); [EOL] }
public void testNodeSetReturn() { [EOL]     assertXPathValueIterator(context, "test:nodeSet()/name", list("Name 1", "Name 2")); [EOL]     assertXPathPointerIterator(context, "test:nodeSet()/name", list("/beans[1]/name", "/beans[2]/name")); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/name", "Name 1", "/beans[1]/name"); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/@name", "Name 1", "/beans[1]/@name"); [EOL] }
public void testNodeSetReturn() { [EOL]     assertXPathValueIterator(context, "test:nodeSet()/name", list("Name 1", "Name 2")); [EOL]     assertXPathPointerIterator(context, "test:nodeSet()/name", list("/beans[1]/name", "/beans[2]/name")); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/name", "Name 1", "/beans[1]/name"); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/@name", "Name 1", "/beans[1]/@name"); [EOL] }
public void testNodeSetReturn() { [EOL]     assertXPathValueIterator(context, "test:nodeSet()/name", list("Name 1", "Name 2")); [EOL]     assertXPathPointerIterator(context, "test:nodeSet()/name", list("/beans[1]/name", "/beans[2]/name")); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/name", "Name 1", "/beans[1]/name"); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/@name", "Name 1", "/beans[1]/@name"); [EOL] }
public void testCollectionPointer() { [EOL]     List list = new ArrayList(); [EOL]     Map map = new HashMap(); [EOL]     map.put("KeyOne", "SomeStringOne"); [EOL]     map.put("KeyTwo", "SomeStringTwo"); [EOL]     Map map2 = new HashMap(); [EOL]     map2.put("KeyA", "StringA"); [EOL]     map2.put("KeyB", "StringB"); [EOL]     map.put("KeyThree", map2); [EOL]     list.add(map); [EOL]     List list2 = new ArrayList(); [EOL]     list2.add("foo"); [EOL]     list2.add(map); [EOL]     list2.add(map); [EOL]     list.add(list2); [EOL]     context = JXPathContext.newContext(list); [EOL]     assertEquals("SomeStringOne", context.getValue(".[1]/KeyOne")); [EOL]     assertEquals("StringA", context.getValue(".[1]/KeyThree/KeyA")); [EOL]     assertEquals(new Integer(3), context.getValue("size(.[1]/KeyThree)")); [EOL]     assertEquals(new Double(6.0), context.getValue("count(.[1]/KeyThree/*)")); [EOL]     assertEquals(new Double(3.0), context.getValue("count(.[1]/KeyThree/KeyA)")); [EOL] }
public void testCollectionPointer() { [EOL]     List list = new ArrayList(); [EOL]     Map map = new HashMap(); [EOL]     map.put("KeyOne", "SomeStringOne"); [EOL]     map.put("KeyTwo", "SomeStringTwo"); [EOL]     Map map2 = new HashMap(); [EOL]     map2.put("KeyA", "StringA"); [EOL]     map2.put("KeyB", "StringB"); [EOL]     map.put("KeyThree", map2); [EOL]     list.add(map); [EOL]     List list2 = new ArrayList(); [EOL]     list2.add("foo"); [EOL]     list2.add(map); [EOL]     list2.add(map); [EOL]     list.add(list2); [EOL]     context = JXPathContext.newContext(list); [EOL]     assertEquals("SomeStringOne", context.getValue(".[1]/KeyOne")); [EOL]     assertEquals("StringA", context.getValue(".[1]/KeyThree/KeyA")); [EOL]     assertEquals(new Integer(3), context.getValue("size(.[1]/KeyThree)")); [EOL]     assertEquals(new Double(6.0), context.getValue("count(.[1]/KeyThree/*)")); [EOL]     assertEquals(new Double(3.0), context.getValue("count(.[1]/KeyThree/KeyA)")); [EOL] }
public void testMapOfMaps() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     Map fruit = new HashMap(); [EOL]     fruit.put("apple", "green"); [EOL]     fruit.put("orange", "red"); [EOL]     Map meat = new HashMap(); [EOL]     meat.put("pork", "pig"); [EOL]     meat.put("beef", "cow"); [EOL]     bean.getMap().put("fruit", fruit); [EOL]     bean.getMap().put("meat", meat); [EOL]     assertXPathPointer(context, "//beef", "/map[@name='meat'][@name='beef']"); [EOL]     assertXPathPointer(context, "map//apple", "/map[@name='fruit'][@name='apple']"); [EOL]     assertXPathPointerLenient(context, "map//banana", "null()"); [EOL]     assertXPathPointerLenient(context, "//fruit/pear", "/map[@name='fruit']/pear"); [EOL] }
public void testIterateArray() { [EOL]     Map map = new HashMap(); [EOL]     map.put("foo", new String[] { "a", "b", "c" }); [EOL]     JXPathContext context = JXPathContext.newContext(map); [EOL]     assertXPathValueIterator(context, "foo", list("a", "b", "c")); [EOL] }
public void testIterateArray() { [EOL]     Map map = new HashMap(); [EOL]     map.put("foo", new String[] { "a", "b", "c" }); [EOL]     JXPathContext context = JXPathContext.newContext(map); [EOL]     assertXPathValueIterator(context, "foo", list("a", "b", "c")); [EOL] }
public void testIterateArray() { [EOL]     Map map = new HashMap(); [EOL]     map.put("foo", new String[] { "a", "b", "c" }); [EOL]     JXPathContext context = JXPathContext.newContext(map); [EOL]     assertXPathValueIterator(context, "foo", list("a", "b", "c")); [EOL] }
public void testIterateArray() { [EOL]     Map map = new HashMap(); [EOL]     map.put("foo", new String[] { "a", "b", "c" }); [EOL]     JXPathContext context = JXPathContext.newContext(map); [EOL]     assertXPathValueIterator(context, "foo", list("a", "b", "c")); [EOL] }
public void testIterateArray() { [EOL]     Map map = new HashMap(); [EOL]     map.put("foo", new String[] { "a", "b", "c" }); [EOL]     JXPathContext context = JXPathContext.newContext(map); [EOL]     assertXPathValueIterator(context, "foo", list("a", "b", "c")); [EOL] }
public void testIterateArray() { [EOL]     Map map = new HashMap(); [EOL]     map.put("foo", new String[] { "a", "b", "c" }); [EOL]     JXPathContext context = JXPathContext.newContext(map); [EOL]     assertXPathValueIterator(context, "foo", list("a", "b", "c")); [EOL] }
public void testIterateArray() { [EOL]     Map map = new HashMap(); [EOL]     map.put("foo", new String[] { "a", "b", "c" }); [EOL]     JXPathContext context = JXPathContext.newContext(map); [EOL]     assertXPathValueIterator(context, "foo", list("a", "b", "c")); [EOL] }
public void testIterateArray() { [EOL]     Map map = new HashMap(); [EOL]     map.put("foo", new String[] { "a", "b", "c" }); [EOL]     JXPathContext context = JXPathContext.newContext(map); [EOL]     assertXPathValueIterator(context, "foo", list("a", "b", "c")); [EOL] }
public void testIterateArray() { [EOL]     Map map = new HashMap(); [EOL]     map.put("foo", new String[] { "a", "b", "c" }); [EOL]     JXPathContext context = JXPathContext.newContext(map); [EOL]     assertXPathValueIterator(context, "foo", list("a", "b", "c")); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testDefaultNamespaceIgnored() { [EOL]     context.registerDefaultNamespace("temp"); [EOL]     assertXPathValueAndPointer(context, "//pos//number", "110", "/node()[1]/pos[2]/register[1]/number[1]"); [EOL]     context.registerDefaultNamespace(null); [EOL] }
public void testNodeSetReturn() { [EOL]     assertXPathValueIterator(context, "test:nodeSet()/name", list("Name 1", "Name 2")); [EOL]     assertXPathPointerIterator(context, "test:nodeSet()/name", list("/beans[1]/name", "/beans[2]/name")); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/name", "Name 1", "/beans[1]/name"); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/@name", "Name 1", "/beans[1]/@name"); [EOL] }
public void testCollectionPointer() { [EOL]     List list = new ArrayList(); [EOL]     Map map = new HashMap(); [EOL]     map.put("KeyOne", "SomeStringOne"); [EOL]     map.put("KeyTwo", "SomeStringTwo"); [EOL]     Map map2 = new HashMap(); [EOL]     map2.put("KeyA", "StringA"); [EOL]     map2.put("KeyB", "StringB"); [EOL]     map.put("KeyThree", map2); [EOL]     list.add(map); [EOL]     List list2 = new ArrayList(); [EOL]     list2.add("foo"); [EOL]     list2.add(map); [EOL]     list2.add(map); [EOL]     list.add(list2); [EOL]     context = JXPathContext.newContext(list); [EOL]     assertEquals("SomeStringOne", context.getValue(".[1]/KeyOne")); [EOL]     assertEquals("StringA", context.getValue(".[1]/KeyThree/KeyA")); [EOL]     assertEquals(new Integer(3), context.getValue("size(.[1]/KeyThree)")); [EOL]     assertEquals(new Double(6.0), context.getValue("count(.[1]/KeyThree/*)")); [EOL]     assertEquals(new Double(3.0), context.getValue("count(.[1]/KeyThree/KeyA)")); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCollectionOfMaps() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     List list = new ArrayList(); [EOL]     bean.getMap().put("stuff", list); [EOL]     Map m = new HashMap(); [EOL]     m.put("fruit", "apple"); [EOL]     list.add(m); [EOL]     m = new HashMap(); [EOL]     m.put("berry", "watermelon"); [EOL]     list.add(m); [EOL]     m = new HashMap(); [EOL]     m.put("fruit", "banana"); [EOL]     list.add(m); [EOL]     assertXPathValueIterator(context, "/map/stuff/fruit", list("apple", "banana")); [EOL]     assertXPathValueIterator(context, "/map/stuff[@name='fruit']", list("apple", "banana")); [EOL] }
public void testCollectionOfMaps() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     List list = new ArrayList(); [EOL]     bean.getMap().put("stuff", list); [EOL]     Map m = new HashMap(); [EOL]     m.put("fruit", "apple"); [EOL]     list.add(m); [EOL]     m = new HashMap(); [EOL]     m.put("berry", "watermelon"); [EOL]     list.add(m); [EOL]     m = new HashMap(); [EOL]     m.put("fruit", "banana"); [EOL]     list.add(m); [EOL]     assertXPathValueIterator(context, "/map/stuff/fruit", list("apple", "banana")); [EOL]     assertXPathValueIterator(context, "/map/stuff[@name='fruit']", list("apple", "banana")); [EOL] }
public void testCollectionOfMaps() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     List list = new ArrayList(); [EOL]     bean.getMap().put("stuff", list); [EOL]     Map m = new HashMap(); [EOL]     m.put("fruit", "apple"); [EOL]     list.add(m); [EOL]     m = new HashMap(); [EOL]     m.put("berry", "watermelon"); [EOL]     list.add(m); [EOL]     m = new HashMap(); [EOL]     m.put("fruit", "banana"); [EOL]     list.add(m); [EOL]     assertXPathValueIterator(context, "/map/stuff/fruit", list("apple", "banana")); [EOL]     assertXPathValueIterator(context, "/map/stuff[@name='fruit']", list("apple", "banana")); [EOL] }
public void testCollectionOfMaps() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     List list = new ArrayList(); [EOL]     bean.getMap().put("stuff", list); [EOL]     Map m = new HashMap(); [EOL]     m.put("fruit", "apple"); [EOL]     list.add(m); [EOL]     m = new HashMap(); [EOL]     m.put("berry", "watermelon"); [EOL]     list.add(m); [EOL]     m = new HashMap(); [EOL]     m.put("fruit", "banana"); [EOL]     list.add(m); [EOL]     assertXPathValueIterator(context, "/map/stuff/fruit", list("apple", "banana")); [EOL]     assertXPathValueIterator(context, "/map/stuff[@name='fruit']", list("apple", "banana")); [EOL] }
public void testCollectionOfMaps() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     List list = new ArrayList(); [EOL]     bean.getMap().put("stuff", list); [EOL]     Map m = new HashMap(); [EOL]     m.put("fruit", "apple"); [EOL]     list.add(m); [EOL]     m = new HashMap(); [EOL]     m.put("berry", "watermelon"); [EOL]     list.add(m); [EOL]     m = new HashMap(); [EOL]     m.put("fruit", "banana"); [EOL]     list.add(m); [EOL]     assertXPathValueIterator(context, "/map/stuff/fruit", list("apple", "banana")); [EOL]     assertXPathValueIterator(context, "/map/stuff[@name='fruit']", list("apple", "banana")); [EOL] }
public void testCollectionOfMaps() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     List list = new ArrayList(); [EOL]     bean.getMap().put("stuff", list); [EOL]     Map m = new HashMap(); [EOL]     m.put("fruit", "apple"); [EOL]     list.add(m); [EOL]     m = new HashMap(); [EOL]     m.put("berry", "watermelon"); [EOL]     list.add(m); [EOL]     m = new HashMap(); [EOL]     m.put("fruit", "banana"); [EOL]     list.add(m); [EOL]     assertXPathValueIterator(context, "/map/stuff/fruit", list("apple", "banana")); [EOL]     assertXPathValueIterator(context, "/map/stuff[@name='fruit']", list("apple", "banana")); [EOL] }
public void testCollectionOfMaps() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     List list = new ArrayList(); [EOL]     bean.getMap().put("stuff", list); [EOL]     Map m = new HashMap(); [EOL]     m.put("fruit", "apple"); [EOL]     list.add(m); [EOL]     m = new HashMap(); [EOL]     m.put("berry", "watermelon"); [EOL]     list.add(m); [EOL]     m = new HashMap(); [EOL]     m.put("fruit", "banana"); [EOL]     list.add(m); [EOL]     assertXPathValueIterator(context, "/map/stuff/fruit", list("apple", "banana")); [EOL]     assertXPathValueIterator(context, "/map/stuff[@name='fruit']", list("apple", "banana")); [EOL] }
public void testCollectionOfMaps() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     List list = new ArrayList(); [EOL]     bean.getMap().put("stuff", list); [EOL]     Map m = new HashMap(); [EOL]     m.put("fruit", "apple"); [EOL]     list.add(m); [EOL]     m = new HashMap(); [EOL]     m.put("berry", "watermelon"); [EOL]     list.add(m); [EOL]     m = new HashMap(); [EOL]     m.put("fruit", "banana"); [EOL]     list.add(m); [EOL]     assertXPathValueIterator(context, "/map/stuff/fruit", list("apple", "banana")); [EOL]     assertXPathValueIterator(context, "/map/stuff[@name='fruit']", list("apple", "banana")); [EOL] }
public void testCollectionOfMaps() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     List list = new ArrayList(); [EOL]     bean.getMap().put("stuff", list); [EOL]     Map m = new HashMap(); [EOL]     m.put("fruit", "apple"); [EOL]     list.add(m); [EOL]     m = new HashMap(); [EOL]     m.put("berry", "watermelon"); [EOL]     list.add(m); [EOL]     m = new HashMap(); [EOL]     m.put("fruit", "banana"); [EOL]     list.add(m); [EOL]     assertXPathValueIterator(context, "/map/stuff/fruit", list("apple", "banana")); [EOL]     assertXPathValueIterator(context, "/map/stuff[@name='fruit']", list("apple", "banana")); [EOL] }
public void testCollectionOfMaps() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     List list = new ArrayList(); [EOL]     bean.getMap().put("stuff", list); [EOL]     Map m = new HashMap(); [EOL]     m.put("fruit", "apple"); [EOL]     list.add(m); [EOL]     m = new HashMap(); [EOL]     m.put("berry", "watermelon"); [EOL]     list.add(m); [EOL]     m = new HashMap(); [EOL]     m.put("fruit", "banana"); [EOL]     list.add(m); [EOL]     assertXPathValueIterator(context, "/map/stuff/fruit", list("apple", "banana")); [EOL]     assertXPathValueIterator(context, "/map/stuff[@name='fruit']", list("apple", "banana")); [EOL] }
public void testSingletonArrayToString() { [EOL]     assertConversion(new String[] { "Earth" }, String.class, "Earth"); [EOL] }
public void testSingletonArrayToString() { [EOL]     assertConversion(new String[] { "Earth" }, String.class, "Earth"); [EOL] }
public void testBeanUtilsConverter() { [EOL]     assertConversion("12", BigDecimal.class, new BigDecimal(12)); [EOL] }
public void testBeanUtilsConverter() { [EOL]     assertConversion("12", BigDecimal.class, new BigDecimal(12)); [EOL] }
public void testBeanUtilsConverter() { [EOL]     assertConversion("12", BigDecimal.class, new BigDecimal(12)); [EOL] }
public void testBeanUtilsConverter() { [EOL]     assertConversion("12", BigDecimal.class, new BigDecimal(12)); [EOL] }
public void testBeanUtilsConverter() { [EOL]     assertConversion("12", BigDecimal.class, new BigDecimal(12)); [EOL] }
public void testBeanUtilsConverter() { [EOL]     assertConversion("12", BigDecimal.class, new BigDecimal(12)); [EOL] }
public void testBeanUtilsConverter() { [EOL]     assertConversion("12", BigDecimal.class, new BigDecimal(12)); [EOL] }
public void testBeanUtilsConverter() { [EOL]     assertConversion("12", BigDecimal.class, new BigDecimal(12)); [EOL] }
public void testBeanUtilsConverter() { [EOL]     assertConversion("12", BigDecimal.class, new BigDecimal(12)); [EOL] }
public void testBeanUtilsConverter() { [EOL]     assertConversion("12", BigDecimal.class, new BigDecimal(12)); [EOL] }
public void testIterateArray() { [EOL]     Map map = new HashMap(); [EOL]     map.put("foo", new String[] { "a", "b", "c" }); [EOL]     JXPathContext context = JXPathContext.newContext(map); [EOL]     assertXPathValueIterator(context, "foo", list("a", "b", "c")); [EOL] }
public void testIterateArray() { [EOL]     Map map = new HashMap(); [EOL]     map.put("foo", new String[] { "a", "b", "c" }); [EOL]     JXPathContext context = JXPathContext.newContext(map); [EOL]     assertXPathValueIterator(context, "foo", list("a", "b", "c")); [EOL] }
public void testMapOfMaps() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     Map fruit = new HashMap(); [EOL]     fruit.put("apple", "green"); [EOL]     fruit.put("orange", "red"); [EOL]     Map meat = new HashMap(); [EOL]     meat.put("pork", "pig"); [EOL]     meat.put("beef", "cow"); [EOL]     bean.getMap().put("fruit", fruit); [EOL]     bean.getMap().put("meat", meat); [EOL]     assertXPathPointer(context, "//beef", "/map[@name='meat'][@name='beef']"); [EOL]     assertXPathPointer(context, "map//apple", "/map[@name='fruit'][@name='apple']"); [EOL]     assertXPathPointerLenient(context, "map//banana", "null()"); [EOL]     assertXPathPointerLenient(context, "//fruit/pear", "/map[@name='fruit']/pear"); [EOL] }
public void testMapOfMaps() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     Map fruit = new HashMap(); [EOL]     fruit.put("apple", "green"); [EOL]     fruit.put("orange", "red"); [EOL]     Map meat = new HashMap(); [EOL]     meat.put("pork", "pig"); [EOL]     meat.put("beef", "cow"); [EOL]     bean.getMap().put("fruit", fruit); [EOL]     bean.getMap().put("meat", meat); [EOL]     assertXPathPointer(context, "//beef", "/map[@name='meat'][@name='beef']"); [EOL]     assertXPathPointer(context, "map//apple", "/map[@name='fruit'][@name='apple']"); [EOL]     assertXPathPointerLenient(context, "map//banana", "null()"); [EOL]     assertXPathPointerLenient(context, "//fruit/pear", "/map[@name='fruit']/pear"); [EOL] }
public void testMapOfMaps() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     Map fruit = new HashMap(); [EOL]     fruit.put("apple", "green"); [EOL]     fruit.put("orange", "red"); [EOL]     Map meat = new HashMap(); [EOL]     meat.put("pork", "pig"); [EOL]     meat.put("beef", "cow"); [EOL]     bean.getMap().put("fruit", fruit); [EOL]     bean.getMap().put("meat", meat); [EOL]     assertXPathPointer(context, "//beef", "/map[@name='meat'][@name='beef']"); [EOL]     assertXPathPointer(context, "map//apple", "/map[@name='fruit'][@name='apple']"); [EOL]     assertXPathPointerLenient(context, "map//banana", "null()"); [EOL]     assertXPathPointerLenient(context, "//fruit/pear", "/map[@name='fruit']/pear"); [EOL] }
public void testMapOfMaps() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     Map fruit = new HashMap(); [EOL]     fruit.put("apple", "green"); [EOL]     fruit.put("orange", "red"); [EOL]     Map meat = new HashMap(); [EOL]     meat.put("pork", "pig"); [EOL]     meat.put("beef", "cow"); [EOL]     bean.getMap().put("fruit", fruit); [EOL]     bean.getMap().put("meat", meat); [EOL]     assertXPathPointer(context, "//beef", "/map[@name='meat'][@name='beef']"); [EOL]     assertXPathPointer(context, "map//apple", "/map[@name='fruit'][@name='apple']"); [EOL]     assertXPathPointerLenient(context, "map//banana", "null()"); [EOL]     assertXPathPointerLenient(context, "//fruit/pear", "/map[@name='fruit']/pear"); [EOL] }
public void testMapOfMaps() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     Map fruit = new HashMap(); [EOL]     fruit.put("apple", "green"); [EOL]     fruit.put("orange", "red"); [EOL]     Map meat = new HashMap(); [EOL]     meat.put("pork", "pig"); [EOL]     meat.put("beef", "cow"); [EOL]     bean.getMap().put("fruit", fruit); [EOL]     bean.getMap().put("meat", meat); [EOL]     assertXPathPointer(context, "//beef", "/map[@name='meat'][@name='beef']"); [EOL]     assertXPathPointer(context, "map//apple", "/map[@name='fruit'][@name='apple']"); [EOL]     assertXPathPointerLenient(context, "map//banana", "null()"); [EOL]     assertXPathPointerLenient(context, "//fruit/pear", "/map[@name='fruit']/pear"); [EOL] }
public void testMapOfMaps() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     Map fruit = new HashMap(); [EOL]     fruit.put("apple", "green"); [EOL]     fruit.put("orange", "red"); [EOL]     Map meat = new HashMap(); [EOL]     meat.put("pork", "pig"); [EOL]     meat.put("beef", "cow"); [EOL]     bean.getMap().put("fruit", fruit); [EOL]     bean.getMap().put("meat", meat); [EOL]     assertXPathPointer(context, "//beef", "/map[@name='meat'][@name='beef']"); [EOL]     assertXPathPointer(context, "map//apple", "/map[@name='fruit'][@name='apple']"); [EOL]     assertXPathPointerLenient(context, "map//banana", "null()"); [EOL]     assertXPathPointerLenient(context, "//fruit/pear", "/map[@name='fruit']/pear"); [EOL] }
public void testMapOfMaps() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     Map fruit = new HashMap(); [EOL]     fruit.put("apple", "green"); [EOL]     fruit.put("orange", "red"); [EOL]     Map meat = new HashMap(); [EOL]     meat.put("pork", "pig"); [EOL]     meat.put("beef", "cow"); [EOL]     bean.getMap().put("fruit", fruit); [EOL]     bean.getMap().put("meat", meat); [EOL]     assertXPathPointer(context, "//beef", "/map[@name='meat'][@name='beef']"); [EOL]     assertXPathPointer(context, "map//apple", "/map[@name='fruit'][@name='apple']"); [EOL]     assertXPathPointerLenient(context, "map//banana", "null()"); [EOL]     assertXPathPointerLenient(context, "//fruit/pear", "/map[@name='fruit']/pear"); [EOL] }
public void testMapOfMaps() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     Map fruit = new HashMap(); [EOL]     fruit.put("apple", "green"); [EOL]     fruit.put("orange", "red"); [EOL]     Map meat = new HashMap(); [EOL]     meat.put("pork", "pig"); [EOL]     meat.put("beef", "cow"); [EOL]     bean.getMap().put("fruit", fruit); [EOL]     bean.getMap().put("meat", meat); [EOL]     assertXPathPointer(context, "//beef", "/map[@name='meat'][@name='beef']"); [EOL]     assertXPathPointer(context, "map//apple", "/map[@name='fruit'][@name='apple']"); [EOL]     assertXPathPointerLenient(context, "map//banana", "null()"); [EOL]     assertXPathPointerLenient(context, "//fruit/pear", "/map[@name='fruit']/pear"); [EOL] }
public void testMapOfMaps() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     Map fruit = new HashMap(); [EOL]     fruit.put("apple", "green"); [EOL]     fruit.put("orange", "red"); [EOL]     Map meat = new HashMap(); [EOL]     meat.put("pork", "pig"); [EOL]     meat.put("beef", "cow"); [EOL]     bean.getMap().put("fruit", fruit); [EOL]     bean.getMap().put("meat", meat); [EOL]     assertXPathPointer(context, "//beef", "/map[@name='meat'][@name='beef']"); [EOL]     assertXPathPointer(context, "map//apple", "/map[@name='fruit'][@name='apple']"); [EOL]     assertXPathPointerLenient(context, "map//banana", "null()"); [EOL]     assertXPathPointerLenient(context, "//fruit/pear", "/map[@name='fruit']/pear"); [EOL] }
public void testMapOfMaps() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     Map fruit = new HashMap(); [EOL]     fruit.put("apple", "green"); [EOL]     fruit.put("orange", "red"); [EOL]     Map meat = new HashMap(); [EOL]     meat.put("pork", "pig"); [EOL]     meat.put("beef", "cow"); [EOL]     bean.getMap().put("fruit", fruit); [EOL]     bean.getMap().put("meat", meat); [EOL]     assertXPathPointer(context, "//beef", "/map[@name='meat'][@name='beef']"); [EOL]     assertXPathPointer(context, "map//apple", "/map[@name='fruit'][@name='apple']"); [EOL]     assertXPathPointerLenient(context, "map//banana", "null()"); [EOL]     assertXPathPointerLenient(context, "//fruit/pear", "/map[@name='fruit']/pear"); [EOL] }
public void testMapOfMaps() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     Map fruit = new HashMap(); [EOL]     fruit.put("apple", "green"); [EOL]     fruit.put("orange", "red"); [EOL]     Map meat = new HashMap(); [EOL]     meat.put("pork", "pig"); [EOL]     meat.put("beef", "cow"); [EOL]     bean.getMap().put("fruit", fruit); [EOL]     bean.getMap().put("meat", meat); [EOL]     assertXPathPointer(context, "//beef", "/map[@name='meat'][@name='beef']"); [EOL]     assertXPathPointer(context, "map//apple", "/map[@name='fruit'][@name='apple']"); [EOL]     assertXPathPointerLenient(context, "map//banana", "null()"); [EOL]     assertXPathPointerLenient(context, "//fruit/pear", "/map[@name='fruit']/pear"); [EOL] }
public void testMapOfMaps() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     Map fruit = new HashMap(); [EOL]     fruit.put("apple", "green"); [EOL]     fruit.put("orange", "red"); [EOL]     Map meat = new HashMap(); [EOL]     meat.put("pork", "pig"); [EOL]     meat.put("beef", "cow"); [EOL]     bean.getMap().put("fruit", fruit); [EOL]     bean.getMap().put("meat", meat); [EOL]     assertXPathPointer(context, "//beef", "/map[@name='meat'][@name='beef']"); [EOL]     assertXPathPointer(context, "map//apple", "/map[@name='fruit'][@name='apple']"); [EOL]     assertXPathPointerLenient(context, "map//banana", "null()"); [EOL]     assertXPathPointerLenient(context, "//fruit/pear", "/map[@name='fruit']/pear"); [EOL] }
public void testMapOfMaps() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     Map fruit = new HashMap(); [EOL]     fruit.put("apple", "green"); [EOL]     fruit.put("orange", "red"); [EOL]     Map meat = new HashMap(); [EOL]     meat.put("pork", "pig"); [EOL]     meat.put("beef", "cow"); [EOL]     bean.getMap().put("fruit", fruit); [EOL]     bean.getMap().put("meat", meat); [EOL]     assertXPathPointer(context, "//beef", "/map[@name='meat'][@name='beef']"); [EOL]     assertXPathPointer(context, "map//apple", "/map[@name='fruit'][@name='apple']"); [EOL]     assertXPathPointerLenient(context, "map//banana", "null()"); [EOL]     assertXPathPointerLenient(context, "//fruit/pear", "/map[@name='fruit']/pear"); [EOL] }
public void testMapOfMaps() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     Map fruit = new HashMap(); [EOL]     fruit.put("apple", "green"); [EOL]     fruit.put("orange", "red"); [EOL]     Map meat = new HashMap(); [EOL]     meat.put("pork", "pig"); [EOL]     meat.put("beef", "cow"); [EOL]     bean.getMap().put("fruit", fruit); [EOL]     bean.getMap().put("meat", meat); [EOL]     assertXPathPointer(context, "//beef", "/map[@name='meat'][@name='beef']"); [EOL]     assertXPathPointer(context, "map//apple", "/map[@name='fruit'][@name='apple']"); [EOL]     assertXPathPointerLenient(context, "map//banana", "null()"); [EOL]     assertXPathPointerLenient(context, "//fruit/pear", "/map[@name='fruit']/pear"); [EOL] }
public void testMapOfMaps() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     Map fruit = new HashMap(); [EOL]     fruit.put("apple", "green"); [EOL]     fruit.put("orange", "red"); [EOL]     Map meat = new HashMap(); [EOL]     meat.put("pork", "pig"); [EOL]     meat.put("beef", "cow"); [EOL]     bean.getMap().put("fruit", fruit); [EOL]     bean.getMap().put("meat", meat); [EOL]     assertXPathPointer(context, "//beef", "/map[@name='meat'][@name='beef']"); [EOL]     assertXPathPointer(context, "map//apple", "/map[@name='fruit'][@name='apple']"); [EOL]     assertXPathPointerLenient(context, "map//banana", "null()"); [EOL]     assertXPathPointerLenient(context, "//fruit/pear", "/map[@name='fruit']/pear"); [EOL] }
public void testMapOfMaps() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     Map fruit = new HashMap(); [EOL]     fruit.put("apple", "green"); [EOL]     fruit.put("orange", "red"); [EOL]     Map meat = new HashMap(); [EOL]     meat.put("pork", "pig"); [EOL]     meat.put("beef", "cow"); [EOL]     bean.getMap().put("fruit", fruit); [EOL]     bean.getMap().put("meat", meat); [EOL]     assertXPathPointer(context, "//beef", "/map[@name='meat'][@name='beef']"); [EOL]     assertXPathPointer(context, "map//apple", "/map[@name='fruit'][@name='apple']"); [EOL]     assertXPathPointerLenient(context, "map//banana", "null()"); [EOL]     assertXPathPointerLenient(context, "//fruit/pear", "/map[@name='fruit']/pear"); [EOL] }
public void testMapOfMaps() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     Map fruit = new HashMap(); [EOL]     fruit.put("apple", "green"); [EOL]     fruit.put("orange", "red"); [EOL]     Map meat = new HashMap(); [EOL]     meat.put("pork", "pig"); [EOL]     meat.put("beef", "cow"); [EOL]     bean.getMap().put("fruit", fruit); [EOL]     bean.getMap().put("meat", meat); [EOL]     assertXPathPointer(context, "//beef", "/map[@name='meat'][@name='beef']"); [EOL]     assertXPathPointer(context, "map//apple", "/map[@name='fruit'][@name='apple']"); [EOL]     assertXPathPointerLenient(context, "map//banana", "null()"); [EOL]     assertXPathPointerLenient(context, "//fruit/pear", "/map[@name='fruit']/pear"); [EOL] }
public void testMapOfMaps() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     Map fruit = new HashMap(); [EOL]     fruit.put("apple", "green"); [EOL]     fruit.put("orange", "red"); [EOL]     Map meat = new HashMap(); [EOL]     meat.put("pork", "pig"); [EOL]     meat.put("beef", "cow"); [EOL]     bean.getMap().put("fruit", fruit); [EOL]     bean.getMap().put("meat", meat); [EOL]     assertXPathPointer(context, "//beef", "/map[@name='meat'][@name='beef']"); [EOL]     assertXPathPointer(context, "map//apple", "/map[@name='fruit'][@name='apple']"); [EOL]     assertXPathPointerLenient(context, "map//banana", "null()"); [EOL]     assertXPathPointerLenient(context, "//fruit/pear", "/map[@name='fruit']/pear"); [EOL] }
public void testMapOfMaps() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     Map fruit = new HashMap(); [EOL]     fruit.put("apple", "green"); [EOL]     fruit.put("orange", "red"); [EOL]     Map meat = new HashMap(); [EOL]     meat.put("pork", "pig"); [EOL]     meat.put("beef", "cow"); [EOL]     bean.getMap().put("fruit", fruit); [EOL]     bean.getMap().put("meat", meat); [EOL]     assertXPathPointer(context, "//beef", "/map[@name='meat'][@name='beef']"); [EOL]     assertXPathPointer(context, "map//apple", "/map[@name='fruit'][@name='apple']"); [EOL]     assertXPathPointerLenient(context, "map//banana", "null()"); [EOL]     assertXPathPointerLenient(context, "//fruit/pear", "/map[@name='fruit']/pear"); [EOL] }
public void testMapOfMaps() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     Map fruit = new HashMap(); [EOL]     fruit.put("apple", "green"); [EOL]     fruit.put("orange", "red"); [EOL]     Map meat = new HashMap(); [EOL]     meat.put("pork", "pig"); [EOL]     meat.put("beef", "cow"); [EOL]     bean.getMap().put("fruit", fruit); [EOL]     bean.getMap().put("meat", meat); [EOL]     assertXPathPointer(context, "//beef", "/map[@name='meat'][@name='beef']"); [EOL]     assertXPathPointer(context, "map//apple", "/map[@name='fruit'][@name='apple']"); [EOL]     assertXPathPointerLenient(context, "map//banana", "null()"); [EOL]     assertXPathPointerLenient(context, "//fruit/pear", "/map[@name='fruit']/pear"); [EOL] }
public void testMapOfMaps() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     Map fruit = new HashMap(); [EOL]     fruit.put("apple", "green"); [EOL]     fruit.put("orange", "red"); [EOL]     Map meat = new HashMap(); [EOL]     meat.put("pork", "pig"); [EOL]     meat.put("beef", "cow"); [EOL]     bean.getMap().put("fruit", fruit); [EOL]     bean.getMap().put("meat", meat); [EOL]     assertXPathPointer(context, "//beef", "/map[@name='meat'][@name='beef']"); [EOL]     assertXPathPointer(context, "map//apple", "/map[@name='fruit'][@name='apple']"); [EOL]     assertXPathPointerLenient(context, "map//banana", "null()"); [EOL]     assertXPathPointerLenient(context, "//fruit/pear", "/map[@name='fruit']/pear"); [EOL] }
public void testMapOfMaps() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     Map fruit = new HashMap(); [EOL]     fruit.put("apple", "green"); [EOL]     fruit.put("orange", "red"); [EOL]     Map meat = new HashMap(); [EOL]     meat.put("pork", "pig"); [EOL]     meat.put("beef", "cow"); [EOL]     bean.getMap().put("fruit", fruit); [EOL]     bean.getMap().put("meat", meat); [EOL]     assertXPathPointer(context, "//beef", "/map[@name='meat'][@name='beef']"); [EOL]     assertXPathPointer(context, "map//apple", "/map[@name='fruit'][@name='apple']"); [EOL]     assertXPathPointerLenient(context, "map//banana", "null()"); [EOL]     assertXPathPointerLenient(context, "//fruit/pear", "/map[@name='fruit']/pear"); [EOL] }
public void testMapOfMaps() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     Map fruit = new HashMap(); [EOL]     fruit.put("apple", "green"); [EOL]     fruit.put("orange", "red"); [EOL]     Map meat = new HashMap(); [EOL]     meat.put("pork", "pig"); [EOL]     meat.put("beef", "cow"); [EOL]     bean.getMap().put("fruit", fruit); [EOL]     bean.getMap().put("meat", meat); [EOL]     assertXPathPointer(context, "//beef", "/map[@name='meat'][@name='beef']"); [EOL]     assertXPathPointer(context, "map//apple", "/map[@name='fruit'][@name='apple']"); [EOL]     assertXPathPointerLenient(context, "map//banana", "null()"); [EOL]     assertXPathPointerLenient(context, "//fruit/pear", "/map[@name='fruit']/pear"); [EOL] }
public void testMapOfMaps() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     Map fruit = new HashMap(); [EOL]     fruit.put("apple", "green"); [EOL]     fruit.put("orange", "red"); [EOL]     Map meat = new HashMap(); [EOL]     meat.put("pork", "pig"); [EOL]     meat.put("beef", "cow"); [EOL]     bean.getMap().put("fruit", fruit); [EOL]     bean.getMap().put("meat", meat); [EOL]     assertXPathPointer(context, "//beef", "/map[@name='meat'][@name='beef']"); [EOL]     assertXPathPointer(context, "map//apple", "/map[@name='fruit'][@name='apple']"); [EOL]     assertXPathPointerLenient(context, "map//banana", "null()"); [EOL]     assertXPathPointerLenient(context, "//fruit/pear", "/map[@name='fruit']/pear"); [EOL] }
public void testNodeSetReturn() { [EOL]     assertXPathValueIterator(context, "test:nodeSet()/name", list("Name 1", "Name 2")); [EOL]     assertXPathPointerIterator(context, "test:nodeSet()/name", list("/beans[1]/name", "/beans[2]/name")); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/name", "Name 1", "/beans[1]/name"); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/@name", "Name 1", "/beans[1]/@name"); [EOL] }
public void testNodeSetReturn() { [EOL]     assertXPathValueIterator(context, "test:nodeSet()/name", list("Name 1", "Name 2")); [EOL]     assertXPathPointerIterator(context, "test:nodeSet()/name", list("/beans[1]/name", "/beans[2]/name")); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/name", "Name 1", "/beans[1]/name"); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/@name", "Name 1", "/beans[1]/@name"); [EOL] }
public void testNodeSetReturn() { [EOL]     assertXPathValueIterator(context, "test:nodeSet()/name", list("Name 1", "Name 2")); [EOL]     assertXPathPointerIterator(context, "test:nodeSet()/name", list("/beans[1]/name", "/beans[2]/name")); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/name", "Name 1", "/beans[1]/name"); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/@name", "Name 1", "/beans[1]/@name"); [EOL] }
public void testNodeSetReturn() { [EOL]     assertXPathValueIterator(context, "test:nodeSet()/name", list("Name 1", "Name 2")); [EOL]     assertXPathPointerIterator(context, "test:nodeSet()/name", list("/beans[1]/name", "/beans[2]/name")); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/name", "Name 1", "/beans[1]/name"); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/@name", "Name 1", "/beans[1]/@name"); [EOL] }
public void testVariableReference() { [EOL]     assertXPathExpression("$x", VariableReference.class); [EOL]     assertXPathExpression("$x:y", VariableReference.class); [EOL] }
public void testVariableReference() { [EOL]     assertXPathExpression("$x", VariableReference.class); [EOL]     assertXPathExpression("$x:y", VariableReference.class); [EOL] }
public void testVariableReference() { [EOL]     assertXPathExpression("$x", VariableReference.class); [EOL]     assertXPathExpression("$x:y", VariableReference.class); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "int/ancestor::root = /", Boolean.TRUE); [EOL]     assertXPathValue(context, "count(beans/name/ancestor-or-self::node())", new Double(5)); [EOL]     assertXPathValue(context, "beans/name/ancestor-or-self::node()[3] = /", Boolean.TRUE); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "int/ancestor::root = /", Boolean.TRUE); [EOL]     assertXPathValue(context, "count(beans/name/ancestor-or-self::node())", new Double(5)); [EOL]     assertXPathValue(context, "beans/name/ancestor-or-self::node()[3] = /", Boolean.TRUE); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "int/ancestor::root = /", Boolean.TRUE); [EOL]     assertXPathValue(context, "count(beans/name/ancestor-or-self::node())", new Double(5)); [EOL]     assertXPathValue(context, "beans/name/ancestor-or-self::node()[3] = /", Boolean.TRUE); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "int/ancestor::root = /", Boolean.TRUE); [EOL]     assertXPathValue(context, "count(beans/name/ancestor-or-self::node())", new Double(5)); [EOL]     assertXPathValue(context, "beans/name/ancestor-or-self::node()[3] = /", Boolean.TRUE); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "int/ancestor::root = /", Boolean.TRUE); [EOL]     assertXPathValue(context, "count(beans/name/ancestor-or-self::node())", new Double(5)); [EOL]     assertXPathValue(context, "beans/name/ancestor-or-self::node()[3] = /", Boolean.TRUE); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "int/ancestor::root = /", Boolean.TRUE); [EOL]     assertXPathValue(context, "count(beans/name/ancestor-or-self::node())", new Double(5)); [EOL]     assertXPathValue(context, "beans/name/ancestor-or-self::node()[3] = /", Boolean.TRUE); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "int/ancestor::root = /", Boolean.TRUE); [EOL]     assertXPathValue(context, "count(beans/name/ancestor-or-self::node())", new Double(5)); [EOL]     assertXPathValue(context, "beans/name/ancestor-or-self::node()[3] = /", Boolean.TRUE); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "int/ancestor::root = /", Boolean.TRUE); [EOL]     assertXPathValue(context, "count(beans/name/ancestor-or-self::node())", new Double(5)); [EOL]     assertXPathValue(context, "beans/name/ancestor-or-self::node()[3] = /", Boolean.TRUE); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "int/ancestor::root = /", Boolean.TRUE); [EOL]     assertXPathValue(context, "count(beans/name/ancestor-or-self::node())", new Double(5)); [EOL]     assertXPathValue(context, "beans/name/ancestor-or-self::node()[3] = /", Boolean.TRUE); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "int/ancestor::root = /", Boolean.TRUE); [EOL]     assertXPathValue(context, "count(beans/name/ancestor-or-self::node())", new Double(5)); [EOL]     assertXPathValue(context, "beans/name/ancestor-or-self::node()[3] = /", Boolean.TRUE); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "int/ancestor::root = /", Boolean.TRUE); [EOL]     assertXPathValue(context, "count(beans/name/ancestor-or-self::node())", new Double(5)); [EOL]     assertXPathValue(context, "beans/name/ancestor-or-self::node()[3] = /", Boolean.TRUE); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "int/ancestor::root = /", Boolean.TRUE); [EOL]     assertXPathValue(context, "count(beans/name/ancestor-or-self::node())", new Double(5)); [EOL]     assertXPathValue(context, "beans/name/ancestor-or-self::node()[3] = /", Boolean.TRUE); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "int/ancestor::root = /", Boolean.TRUE); [EOL]     assertXPathValue(context, "count(beans/name/ancestor-or-self::node())", new Double(5)); [EOL]     assertXPathValue(context, "beans/name/ancestor-or-self::node()[3] = /", Boolean.TRUE); [EOL] }
public void testAxisFollowing() { [EOL]     assertXPathValueIterator(context, "vendor/contact/following::location//street", list("Orchard Road", "Tangerine Drive")); [EOL]     assertXPathValue(context, "//location/following::price:sale/saleEnds", "never"); [EOL] }
public void testLocationPathNodeTest() { [EOL]     assertXPathExpression("node()", LocationPath.class); [EOL]     assertXPathExpression("text()", LocationPath.class); [EOL]     assertXPathExpression("comment()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction('test')", LocationPath.class); [EOL] }
public void testLocationPathNodeTest() { [EOL]     assertXPathExpression("node()", LocationPath.class); [EOL]     assertXPathExpression("text()", LocationPath.class); [EOL]     assertXPathExpression("comment()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction('test')", LocationPath.class); [EOL] }
public void testLocationPathNodeTest() { [EOL]     assertXPathExpression("node()", LocationPath.class); [EOL]     assertXPathExpression("text()", LocationPath.class); [EOL]     assertXPathExpression("comment()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction('test')", LocationPath.class); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testCoreOperationSum() { [EOL]     assertXPathExpression("3 + 1 + 4", CoreOperationAdd.class); [EOL]     assertXPathExpression("(3 + 1) + 4", CoreOperationAdd.class, "3 + 1 + 4"); [EOL]     assertXPathExpression("3 + (1 + 4)", CoreOperationAdd.class, "3 + 1 + 4"); [EOL]     assertXPathExpression("3 + -1", CoreOperationAdd.class, "3 + -1"); [EOL]     assertXPathExpression("2*-3 + -1", CoreOperationAdd.class, "2 * -3 + -1"); [EOL] }
public void testCoreOperationSum() { [EOL]     assertXPathExpression("3 + 1 + 4", CoreOperationAdd.class); [EOL]     assertXPathExpression("(3 + 1) + 4", CoreOperationAdd.class, "3 + 1 + 4"); [EOL]     assertXPathExpression("3 + (1 + 4)", CoreOperationAdd.class, "3 + 1 + 4"); [EOL]     assertXPathExpression("3 + -1", CoreOperationAdd.class, "3 + -1"); [EOL]     assertXPathExpression("2*-3 + -1", CoreOperationAdd.class, "2 * -3 + -1"); [EOL] }
public void testCoreOperationSum() { [EOL]     assertXPathExpression("3 + 1 + 4", CoreOperationAdd.class); [EOL]     assertXPathExpression("(3 + 1) + 4", CoreOperationAdd.class, "3 + 1 + 4"); [EOL]     assertXPathExpression("3 + (1 + 4)", CoreOperationAdd.class, "3 + 1 + 4"); [EOL]     assertXPathExpression("3 + -1", CoreOperationAdd.class, "3 + -1"); [EOL]     assertXPathExpression("2*-3 + -1", CoreOperationAdd.class, "2 * -3 + -1"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testCoreOperationUnion() { [EOL]     assertXPathExpression("3 | 1 | 4", CoreOperationUnion.class); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLocationPathNodeTest() { [EOL]     assertXPathExpression("node()", LocationPath.class); [EOL]     assertXPathExpression("text()", LocationPath.class); [EOL]     assertXPathExpression("comment()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction('test')", LocationPath.class); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testExpressionPath() { [EOL]     assertXPathExpression("$x/foo/bar", ExpressionPath.class); [EOL]     assertXPathExpression("(2 + 2)/foo/bar", ExpressionPath.class); [EOL]     assertXPathExpression("$x[3][2 + 2]/foo/bar", ExpressionPath.class); [EOL] }
public void testExpressionPath() { [EOL]     assertXPathExpression("$x/foo/bar", ExpressionPath.class); [EOL]     assertXPathExpression("(2 + 2)/foo/bar", ExpressionPath.class); [EOL]     assertXPathExpression("$x[3][2 + 2]/foo/bar", ExpressionPath.class); [EOL] }
public void testExpressionPath() { [EOL]     assertXPathExpression("$x/foo/bar", ExpressionPath.class); [EOL]     assertXPathExpression("(2 + 2)/foo/bar", ExpressionPath.class); [EOL]     assertXPathExpression("$x[3][2 + 2]/foo/bar", ExpressionPath.class); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "int/ancestor::root = /", Boolean.TRUE); [EOL]     assertXPathValue(context, "count(beans/name/ancestor-or-self::node())", new Double(5)); [EOL]     assertXPathValue(context, "beans/name/ancestor-or-self::node()[3] = /", Boolean.TRUE); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "int/ancestor::root = /", Boolean.TRUE); [EOL]     assertXPathValue(context, "count(beans/name/ancestor-or-self::node())", new Double(5)); [EOL]     assertXPathValue(context, "beans/name/ancestor-or-self::node()[3] = /", Boolean.TRUE); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] }
public void testLocationPathNodeTest() { [EOL]     assertXPathExpression("node()", LocationPath.class); [EOL]     assertXPathExpression("text()", LocationPath.class); [EOL]     assertXPathExpression("comment()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction('test')", LocationPath.class); [EOL] }
public void testLocationPathNodeTest() { [EOL]     assertXPathExpression("node()", LocationPath.class); [EOL]     assertXPathExpression("text()", LocationPath.class); [EOL]     assertXPathExpression("comment()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction('test')", LocationPath.class); [EOL] }
public void testLocationPathNodeTest() { [EOL]     assertXPathExpression("node()", LocationPath.class); [EOL]     assertXPathExpression("text()", LocationPath.class); [EOL]     assertXPathExpression("comment()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction('test')", LocationPath.class); [EOL] }
public void testLocationPathNodeTest() { [EOL]     assertXPathExpression("node()", LocationPath.class); [EOL]     assertXPathExpression("text()", LocationPath.class); [EOL]     assertXPathExpression("comment()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction('test')", LocationPath.class); [EOL] }
public void testLocationPathNodeTest() { [EOL]     assertXPathExpression("node()", LocationPath.class); [EOL]     assertXPathExpression("text()", LocationPath.class); [EOL]     assertXPathExpression("comment()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction('test')", LocationPath.class); [EOL] }
public void testLocationPathNodeTest() { [EOL]     assertXPathExpression("node()", LocationPath.class); [EOL]     assertXPathExpression("text()", LocationPath.class); [EOL]     assertXPathExpression("comment()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction('test')", LocationPath.class); [EOL] }
public void testLocationPathNodeTest() { [EOL]     assertXPathExpression("node()", LocationPath.class); [EOL]     assertXPathExpression("text()", LocationPath.class); [EOL]     assertXPathExpression("comment()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction('test')", LocationPath.class); [EOL] }
public void testLocationPathAxisSelf() { [EOL]     assertXPathExpression("self::foo:bar", LocationPath.class); [EOL]     assertXPathExpression(".", LocationPath.class); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testDefaultNamespaceIgnored() { [EOL]     context.registerDefaultNamespace("temp"); [EOL]     assertXPathValueAndPointer(context, "//pos//number", "110", "/node()[1]/pos[2]/register[1]/number[1]"); [EOL]     context.registerDefaultNamespace(null); [EOL] }
public void testDefaultNamespaceIgnored() { [EOL]     context.registerDefaultNamespace("temp"); [EOL]     assertXPathValueAndPointer(context, "//pos//number", "110", "/node()[1]/pos[2]/register[1]/number[1]"); [EOL]     context.registerDefaultNamespace(null); [EOL] }
public void testDefaultNamespaceIgnored() { [EOL]     context.registerDefaultNamespace("temp"); [EOL]     assertXPathValueAndPointer(context, "//pos//number", "110", "/node()[1]/pos[2]/register[1]/number[1]"); [EOL]     context.registerDefaultNamespace(null); [EOL] }
public void testDefaultNamespaceIgnored() { [EOL]     context.registerDefaultNamespace("temp"); [EOL]     assertXPathValueAndPointer(context, "//pos//number", "110", "/node()[1]/pos[2]/register[1]/number[1]"); [EOL]     context.registerDefaultNamespace(null); [EOL] }
public void testDefaultNamespaceIgnored() { [EOL]     context.registerDefaultNamespace("temp"); [EOL]     assertXPathValueAndPointer(context, "//pos//number", "110", "/node()[1]/pos[2]/register[1]/number[1]"); [EOL]     context.registerDefaultNamespace(null); [EOL] }
public void testIDFunction() { [EOL]     context.setIdentityManager(new IdentityManager() { [EOL]  [EOL]         public Pointer getPointerByID(JXPathContext context, String id) { [EOL]             NodePointer ptr = (NodePointer) context.getPointer("/document"); [EOL]             ptr = ptr.getValuePointer(); [EOL]             return ptr.getPointerByID(context, id); [EOL]         } [EOL]     }); [EOL]     assertXPathValueAndPointer(context, "id(101)//street", "Tangerine Drive", "id('101')/address[1]/street[1]"); [EOL]     assertXPathPointerLenient(context, "id(105)/address/street", "id(105)/address/street"); [EOL] }
public void testIDFunction() { [EOL]     context.setIdentityManager(new IdentityManager() { [EOL]  [EOL]         public Pointer getPointerByID(JXPathContext context, String id) { [EOL]             NodePointer ptr = (NodePointer) context.getPointer("/document"); [EOL]             ptr = ptr.getValuePointer(); [EOL]             return ptr.getPointerByID(context, id); [EOL]         } [EOL]     }); [EOL]     assertXPathValueAndPointer(context, "id(101)//street", "Tangerine Drive", "id('101')/address[1]/street[1]"); [EOL]     assertXPathPointerLenient(context, "id(105)/address/street", "id(105)/address/street"); [EOL] }
public void testIDFunction() { [EOL]     context.setIdentityManager(new IdentityManager() { [EOL]  [EOL]         public Pointer getPointerByID(JXPathContext context, String id) { [EOL]             NodePointer ptr = (NodePointer) context.getPointer("/document"); [EOL]             ptr = ptr.getValuePointer(); [EOL]             return ptr.getPointerByID(context, id); [EOL]         } [EOL]     }); [EOL]     assertXPathValueAndPointer(context, "id(101)//street", "Tangerine Drive", "id('101')/address[1]/street[1]"); [EOL]     assertXPathPointerLenient(context, "id(105)/address/street", "id(105)/address/street"); [EOL] }
public void testIDFunction() { [EOL]     context.setIdentityManager(new IdentityManager() { [EOL]  [EOL]         public Pointer getPointerByID(JXPathContext context, String id) { [EOL]             NodePointer ptr = (NodePointer) context.getPointer("/document"); [EOL]             ptr = ptr.getValuePointer(); [EOL]             return ptr.getPointerByID(context, id); [EOL]         } [EOL]     }); [EOL]     assertXPathValueAndPointer(context, "id(101)//street", "Tangerine Drive", "id('101')/address[1]/street[1]"); [EOL]     assertXPathPointerLenient(context, "id(105)/address/street", "id(105)/address/street"); [EOL] }
public void testIDFunction() { [EOL]     context.setIdentityManager(new IdentityManager() { [EOL]  [EOL]         public Pointer getPointerByID(JXPathContext context, String id) { [EOL]             NodePointer ptr = (NodePointer) context.getPointer("/document"); [EOL]             ptr = ptr.getValuePointer(); [EOL]             return ptr.getPointerByID(context, id); [EOL]         } [EOL]     }); [EOL]     assertXPathValueAndPointer(context, "id(101)//street", "Tangerine Drive", "id('101')/address[1]/street[1]"); [EOL]     assertXPathPointerLenient(context, "id(105)/address/street", "id(105)/address/street"); [EOL] }
public void testIDFunction() { [EOL]     context.setIdentityManager(new IdentityManager() { [EOL]  [EOL]         public Pointer getPointerByID(JXPathContext context, String id) { [EOL]             NodePointer ptr = (NodePointer) context.getPointer("/document"); [EOL]             ptr = ptr.getValuePointer(); [EOL]             return ptr.getPointerByID(context, id); [EOL]         } [EOL]     }); [EOL]     assertXPathValueAndPointer(context, "id(101)//street", "Tangerine Drive", "id('101')/address[1]/street[1]"); [EOL]     assertXPathPointerLenient(context, "id(105)/address/street", "id(105)/address/street"); [EOL] }
public void testIDFunction() { [EOL]     context.setIdentityManager(new IdentityManager() { [EOL]  [EOL]         public Pointer getPointerByID(JXPathContext context, String id) { [EOL]             NodePointer ptr = (NodePointer) context.getPointer("/document"); [EOL]             ptr = ptr.getValuePointer(); [EOL]             return ptr.getPointerByID(context, id); [EOL]         } [EOL]     }); [EOL]     assertXPathValueAndPointer(context, "id(101)//street", "Tangerine Drive", "id('101')/address[1]/street[1]"); [EOL]     assertXPathPointerLenient(context, "id(105)/address/street", "id(105)/address/street"); [EOL] }
public void testNodeSetReturn() { [EOL]     assertXPathValueIterator(context, "test:nodeSet()/name", list("Name 1", "Name 2")); [EOL]     assertXPathPointerIterator(context, "test:nodeSet()/name", list("/beans[1]/name", "/beans[2]/name")); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/name", "Name 1", "/beans[1]/name"); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/@name", "Name 1", "/beans[1]/@name"); [EOL] }
public void testNodeSetReturn() { [EOL]     assertXPathValueIterator(context, "test:nodeSet()/name", list("Name 1", "Name 2")); [EOL]     assertXPathPointerIterator(context, "test:nodeSet()/name", list("/beans[1]/name", "/beans[2]/name")); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/name", "Name 1", "/beans[1]/name"); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/@name", "Name 1", "/beans[1]/@name"); [EOL] }
public void testAxisAttribute() { [EOL]     assertXPathValue(context, "count(@*)", new Double(21.0)); [EOL]     assertXPathValueLenient(context, "@foo", null); [EOL] }
public void testAxisAttribute() { [EOL]     assertXPathValue(context, "count(@*)", new Double(21.0)); [EOL]     assertXPathValueLenient(context, "@foo", null); [EOL] }
public void testAxisAttribute() { [EOL]     assertXPathValue(context, "count(@*)", new Double(21.0)); [EOL]     assertXPathValueLenient(context, "@foo", null); [EOL] }
public void testAxisAttribute() { [EOL]     assertXPathValue(context, "count(@*)", new Double(21.0)); [EOL]     assertXPathValueLenient(context, "@foo", null); [EOL] }
public void testAxisAttribute() { [EOL]     assertXPathValue(context, "count(@*)", new Double(21.0)); [EOL]     assertXPathValueLenient(context, "@foo", null); [EOL] }
public void testAxisAttribute() { [EOL]     assertXPathValue(context, "count(@*)", new Double(21.0)); [EOL]     assertXPathValueLenient(context, "@foo", null); [EOL] }
public void testAxisAttribute() { [EOL]     assertXPathValue(context, "count(@*)", new Double(21.0)); [EOL]     assertXPathValueLenient(context, "@foo", null); [EOL] }
public void testAxisAttribute() { [EOL]     assertXPathValue(context, "count(@*)", new Double(21.0)); [EOL]     assertXPathValueLenient(context, "@foo", null); [EOL] }
public void testAxisAttribute() { [EOL]     assertXPathValue(context, "count(@*)", new Double(21.0)); [EOL]     assertXPathValueLenient(context, "@foo", null); [EOL] }
public void testAxisAttribute() { [EOL]     assertXPathValue(context, "count(@*)", new Double(21.0)); [EOL]     assertXPathValueLenient(context, "@foo", null); [EOL] }
public void testAxisAttribute() { [EOL]     assertXPathValue(context, "count(@*)", new Double(21.0)); [EOL]     assertXPathValueLenient(context, "@foo", null); [EOL] }
public void testMapOfMaps() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     Map fruit = new HashMap(); [EOL]     fruit.put("apple", "green"); [EOL]     fruit.put("orange", "red"); [EOL]     Map meat = new HashMap(); [EOL]     meat.put("pork", "pig"); [EOL]     meat.put("beef", "cow"); [EOL]     bean.getMap().put("fruit", fruit); [EOL]     bean.getMap().put("meat", meat); [EOL]     assertXPathPointer(context, "//beef", "/map[@name='meat'][@name='beef']"); [EOL]     assertXPathPointer(context, "map//apple", "/map[@name='fruit'][@name='apple']"); [EOL]     assertXPathPointerLenient(context, "map//banana", "null()"); [EOL]     assertXPathPointerLenient(context, "//fruit/pear", "/map[@name='fruit']/pear"); [EOL] }
public void testMapOfMaps() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     Map fruit = new HashMap(); [EOL]     fruit.put("apple", "green"); [EOL]     fruit.put("orange", "red"); [EOL]     Map meat = new HashMap(); [EOL]     meat.put("pork", "pig"); [EOL]     meat.put("beef", "cow"); [EOL]     bean.getMap().put("fruit", fruit); [EOL]     bean.getMap().put("meat", meat); [EOL]     assertXPathPointer(context, "//beef", "/map[@name='meat'][@name='beef']"); [EOL]     assertXPathPointer(context, "map//apple", "/map[@name='fruit'][@name='apple']"); [EOL]     assertXPathPointerLenient(context, "map//banana", "null()"); [EOL]     assertXPathPointerLenient(context, "//fruit/pear", "/map[@name='fruit']/pear"); [EOL] }
public void testMapOfMaps() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     Map fruit = new HashMap(); [EOL]     fruit.put("apple", "green"); [EOL]     fruit.put("orange", "red"); [EOL]     Map meat = new HashMap(); [EOL]     meat.put("pork", "pig"); [EOL]     meat.put("beef", "cow"); [EOL]     bean.getMap().put("fruit", fruit); [EOL]     bean.getMap().put("meat", meat); [EOL]     assertXPathPointer(context, "//beef", "/map[@name='meat'][@name='beef']"); [EOL]     assertXPathPointer(context, "map//apple", "/map[@name='fruit'][@name='apple']"); [EOL]     assertXPathPointerLenient(context, "map//banana", "null()"); [EOL]     assertXPathPointerLenient(context, "//fruit/pear", "/map[@name='fruit']/pear"); [EOL] }
public void testMapOfMaps() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     Map fruit = new HashMap(); [EOL]     fruit.put("apple", "green"); [EOL]     fruit.put("orange", "red"); [EOL]     Map meat = new HashMap(); [EOL]     meat.put("pork", "pig"); [EOL]     meat.put("beef", "cow"); [EOL]     bean.getMap().put("fruit", fruit); [EOL]     bean.getMap().put("meat", meat); [EOL]     assertXPathPointer(context, "//beef", "/map[@name='meat'][@name='beef']"); [EOL]     assertXPathPointer(context, "map//apple", "/map[@name='fruit'][@name='apple']"); [EOL]     assertXPathPointerLenient(context, "map//banana", "null()"); [EOL]     assertXPathPointerLenient(context, "//fruit/pear", "/map[@name='fruit']/pear"); [EOL] }
public void testMapOfMaps() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     Map fruit = new HashMap(); [EOL]     fruit.put("apple", "green"); [EOL]     fruit.put("orange", "red"); [EOL]     Map meat = new HashMap(); [EOL]     meat.put("pork", "pig"); [EOL]     meat.put("beef", "cow"); [EOL]     bean.getMap().put("fruit", fruit); [EOL]     bean.getMap().put("meat", meat); [EOL]     assertXPathPointer(context, "//beef", "/map[@name='meat'][@name='beef']"); [EOL]     assertXPathPointer(context, "map//apple", "/map[@name='fruit'][@name='apple']"); [EOL]     assertXPathPointerLenient(context, "map//banana", "null()"); [EOL]     assertXPathPointerLenient(context, "//fruit/pear", "/map[@name='fruit']/pear"); [EOL] }
public void testBooleanPredicate() { [EOL]     assertXPathValue(context, "beans[int > 2]/name", "Name 2"); [EOL]     assertXPathValueIterator(context, "beans[int > 2]/name", list("Name 2")); [EOL]     assertXPathValueIterator(context, "beans[int >= 1]/name", list("Name 1", "Name 2")); [EOL]     assertXPathValueIterator(context, "beans[int < 2]/name", list("Name 1")); [EOL]     assertXPathValueIterator(context, "beans[int <= 3]/name", list("Name 1", "Name 2")); [EOL]     assertXPathValueIterator(context, "beans[1]/strings[string-length() = 8]", list("String 1", "String 2", "String 3")); [EOL]     assertXPathValueIterator(context, "//self::node()[name = 'Name 0']/name", list("Name 0")); [EOL]     assertXPathValue(context, "beans/strings[name(.)='strings'][2]", "String 2"); [EOL]     assertXPathValueIterator(context, "//self::node()[name(.) = concat('n', 'a', 'm', 'e')]", list("Name 1", "Name 2", "Name 3", "Name 6", "Name 0", "Name 5", "Name 4")); [EOL]     assertXPathValueIterator(context, "integers[position()<3]", list(new Integer(1), new Integer(2))); [EOL]     context.getVariables().declareVariable("temp", context.getValue("beans")); [EOL]     assertXPathValueIterator(context, "$temp[int < 2]/int", list(new Integer(1))); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testNull() { [EOL]     assertXPathPointerLenient(context, "$null", "$null"); [EOL]     assertXPathPointerLenient(context, "$null[3]", "$null[3]"); [EOL]     assertXPathPointerLenient(context, "$testnull/nothing", "$testnull/nothing"); [EOL]     assertXPathPointerLenient(context, "$testnull/nothing[2]", "$testnull/nothing[2]"); [EOL]     assertXPathPointerLenient(context, "beans[8]/int", "/beans[8]/int"); [EOL]     assertXPathValueIterator(context, "$testnull/nothing[1]", Collections.EMPTY_LIST); [EOL]     JXPathContext ctx = JXPathContext.newContext(new TestNull()); [EOL]     assertXPathValue(ctx, "nothing", null); [EOL]     assertXPathValue(ctx, "child/nothing", null); [EOL]     assertXPathValue(ctx, "array[2]", null); [EOL]     assertXPathValueLenient(ctx, "nothing/something", null); [EOL]     assertXPathValueLenient(ctx, "array[2]/something", null); [EOL] }
public void testCreatePathAndSetValueExpandCollection() { [EOL]     context.getVariables().declareVariable("array", new String[] { "Value1" }); [EOL]     assertXPathCreatePathAndSetValue(context, "$array[2]", "Value2", "$array[2]"); [EOL]     assertEquals("Created <" + "$array[1]" + ">", "Value1", context.getValue("$array[1]")); [EOL] }
public void testCreatePathAndSetValueExpandCollection() { [EOL]     context.getVariables().declareVariable("array", new String[] { "Value1" }); [EOL]     assertXPathCreatePathAndSetValue(context, "$array[2]", "Value2", "$array[2]"); [EOL]     assertEquals("Created <" + "$array[1]" + ">", "Value1", context.getValue("$array[1]")); [EOL] }
public void testCreatePathAndSetValueExpandCollection() { [EOL]     context.getVariables().declareVariable("array", new String[] { "Value1" }); [EOL]     assertXPathCreatePathAndSetValue(context, "$array[2]", "Value2", "$array[2]"); [EOL]     assertEquals("Created <" + "$array[1]" + ">", "Value1", context.getValue("$array[1]")); [EOL] }
public void testCreatePathExpandCollection() { [EOL]     context.getVariables().declareVariable("array", new String[] { "Value1" }); [EOL]     assertXPathCreatePath(context, "$array[2]", "", "$array[2]"); [EOL]     assertEquals("Created <" + "$array[1]" + ">", "Value1", context.getValue("$array[1]")); [EOL] }
public void testCreatePathExpandCollection() { [EOL]     context.getVariables().declareVariable("array", new String[] { "Value1" }); [EOL]     assertXPathCreatePath(context, "$array[2]", "", "$array[2]"); [EOL]     assertEquals("Created <" + "$array[1]" + ">", "Value1", context.getValue("$array[1]")); [EOL] }
public void testCreatePathExpandCollection() { [EOL]     context.getVariables().declareVariable("array", new String[] { "Value1" }); [EOL]     assertXPathCreatePath(context, "$array[2]", "", "$array[2]"); [EOL]     assertEquals("Created <" + "$array[1]" + ">", "Value1", context.getValue("$array[1]")); [EOL] }
public void testCreatePathExpandCollection() { [EOL]     context.getVariables().declareVariable("array", new String[] { "Value1" }); [EOL]     assertXPathCreatePath(context, "$array[2]", "", "$array[2]"); [EOL]     assertEquals("Created <" + "$array[1]" + ">", "Value1", context.getValue("$array[1]")); [EOL] }
public void testCreatePathAndSetValueExpandCollection() { [EOL]     context.getVariables().declareVariable("array", new String[] { "Value1" }); [EOL]     assertXPathCreatePathAndSetValue(context, "$array[2]", "Value2", "$array[2]"); [EOL]     assertEquals("Created <" + "$array[1]" + ">", "Value1", context.getValue("$array[1]")); [EOL] }
public void testCreatePathAndSetValueExpandCollection() { [EOL]     context.getVariables().declareVariable("array", new String[] { "Value1" }); [EOL]     assertXPathCreatePathAndSetValue(context, "$array[2]", "Value2", "$array[2]"); [EOL]     assertEquals("Created <" + "$array[1]" + ">", "Value1", context.getValue("$array[1]")); [EOL] }
public void testCreatePathAndSetValueExpandCollection() { [EOL]     context.getVariables().declareVariable("array", new String[] { "Value1" }); [EOL]     assertXPathCreatePathAndSetValue(context, "$array[2]", "Value2", "$array[2]"); [EOL]     assertEquals("Created <" + "$array[1]" + ">", "Value1", context.getValue("$array[1]")); [EOL] }
public void testCreatePathAndSetValueExpandCollection() { [EOL]     context.getVariables().declareVariable("array", new String[] { "Value1" }); [EOL]     assertXPathCreatePathAndSetValue(context, "$array[2]", "Value2", "$array[2]"); [EOL]     assertEquals("Created <" + "$array[1]" + ">", "Value1", context.getValue("$array[1]")); [EOL] }
public void testCreatePathAndSetValueExpandCollection() { [EOL]     context.getVariables().declareVariable("array", new String[] { "Value1" }); [EOL]     assertXPathCreatePathAndSetValue(context, "$array[2]", "Value2", "$array[2]"); [EOL]     assertEquals("Created <" + "$array[1]" + ">", "Value1", context.getValue("$array[1]")); [EOL] }
public void testCreatePathAndSetValueExpandCollection() { [EOL]     context.getVariables().declareVariable("array", new String[] { "Value1" }); [EOL]     assertXPathCreatePathAndSetValue(context, "$array[2]", "Value2", "$array[2]"); [EOL]     assertEquals("Created <" + "$array[1]" + ">", "Value1", context.getValue("$array[1]")); [EOL] }
public void testNull() { [EOL]     assertXPathPointerLenient(context, "$null", "$null"); [EOL]     assertXPathPointerLenient(context, "$null[3]", "$null[3]"); [EOL]     assertXPathPointerLenient(context, "$testnull/nothing", "$testnull/nothing"); [EOL]     assertXPathPointerLenient(context, "$testnull/nothing[2]", "$testnull/nothing[2]"); [EOL]     assertXPathPointerLenient(context, "beans[8]/int", "/beans[8]/int"); [EOL]     assertXPathValueIterator(context, "$testnull/nothing[1]", Collections.EMPTY_LIST); [EOL]     JXPathContext ctx = JXPathContext.newContext(new TestNull()); [EOL]     assertXPathValue(ctx, "nothing", null); [EOL]     assertXPathValue(ctx, "child/nothing", null); [EOL]     assertXPathValue(ctx, "array[2]", null); [EOL]     assertXPathValueLenient(ctx, "nothing/something", null); [EOL]     assertXPathValueLenient(ctx, "array[2]/something", null); [EOL] }
public void testNull() { [EOL]     assertXPathPointerLenient(context, "$null", "$null"); [EOL]     assertXPathPointerLenient(context, "$null[3]", "$null[3]"); [EOL]     assertXPathPointerLenient(context, "$testnull/nothing", "$testnull/nothing"); [EOL]     assertXPathPointerLenient(context, "$testnull/nothing[2]", "$testnull/nothing[2]"); [EOL]     assertXPathPointerLenient(context, "beans[8]/int", "/beans[8]/int"); [EOL]     assertXPathValueIterator(context, "$testnull/nothing[1]", Collections.EMPTY_LIST); [EOL]     JXPathContext ctx = JXPathContext.newContext(new TestNull()); [EOL]     assertXPathValue(ctx, "nothing", null); [EOL]     assertXPathValue(ctx, "child/nothing", null); [EOL]     assertXPathValue(ctx, "array[2]", null); [EOL]     assertXPathValueLenient(ctx, "nothing/something", null); [EOL]     assertXPathValueLenient(ctx, "array[2]/something", null); [EOL] }
public void testNull() { [EOL]     assertXPathPointerLenient(context, "$null", "$null"); [EOL]     assertXPathPointerLenient(context, "$null[3]", "$null[3]"); [EOL]     assertXPathPointerLenient(context, "$testnull/nothing", "$testnull/nothing"); [EOL]     assertXPathPointerLenient(context, "$testnull/nothing[2]", "$testnull/nothing[2]"); [EOL]     assertXPathPointerLenient(context, "beans[8]/int", "/beans[8]/int"); [EOL]     assertXPathValueIterator(context, "$testnull/nothing[1]", Collections.EMPTY_LIST); [EOL]     JXPathContext ctx = JXPathContext.newContext(new TestNull()); [EOL]     assertXPathValue(ctx, "nothing", null); [EOL]     assertXPathValue(ctx, "child/nothing", null); [EOL]     assertXPathValue(ctx, "array[2]", null); [EOL]     assertXPathValueLenient(ctx, "nothing/something", null); [EOL]     assertXPathValueLenient(ctx, "array[2]/something", null); [EOL] }
public void testNull() { [EOL]     assertXPathPointerLenient(context, "$null", "$null"); [EOL]     assertXPathPointerLenient(context, "$null[3]", "$null[3]"); [EOL]     assertXPathPointerLenient(context, "$testnull/nothing", "$testnull/nothing"); [EOL]     assertXPathPointerLenient(context, "$testnull/nothing[2]", "$testnull/nothing[2]"); [EOL]     assertXPathPointerLenient(context, "beans[8]/int", "/beans[8]/int"); [EOL]     assertXPathValueIterator(context, "$testnull/nothing[1]", Collections.EMPTY_LIST); [EOL]     JXPathContext ctx = JXPathContext.newContext(new TestNull()); [EOL]     assertXPathValue(ctx, "nothing", null); [EOL]     assertXPathValue(ctx, "child/nothing", null); [EOL]     assertXPathValue(ctx, "array[2]", null); [EOL]     assertXPathValueLenient(ctx, "nothing/something", null); [EOL]     assertXPathValueLenient(ctx, "array[2]/something", null); [EOL] }
public void testNull() { [EOL]     assertXPathPointerLenient(context, "$null", "$null"); [EOL]     assertXPathPointerLenient(context, "$null[3]", "$null[3]"); [EOL]     assertXPathPointerLenient(context, "$testnull/nothing", "$testnull/nothing"); [EOL]     assertXPathPointerLenient(context, "$testnull/nothing[2]", "$testnull/nothing[2]"); [EOL]     assertXPathPointerLenient(context, "beans[8]/int", "/beans[8]/int"); [EOL]     assertXPathValueIterator(context, "$testnull/nothing[1]", Collections.EMPTY_LIST); [EOL]     JXPathContext ctx = JXPathContext.newContext(new TestNull()); [EOL]     assertXPathValue(ctx, "nothing", null); [EOL]     assertXPathValue(ctx, "child/nothing", null); [EOL]     assertXPathValue(ctx, "array[2]", null); [EOL]     assertXPathValueLenient(ctx, "nothing/something", null); [EOL]     assertXPathValueLenient(ctx, "array[2]/something", null); [EOL] }
public void testCreatePathExpandCollection() { [EOL]     context.getVariables().declareVariable("array", new String[] { "Value1" }); [EOL]     assertXPathCreatePath(context, "$array[2]", "", "$array[2]"); [EOL]     assertEquals("Created <" + "$array[1]" + ">", "Value1", context.getValue("$array[1]")); [EOL] }
public void testCreatePathExpandCollection() { [EOL]     context.getVariables().declareVariable("array", new String[] { "Value1" }); [EOL]     assertXPathCreatePath(context, "$array[2]", "", "$array[2]"); [EOL]     assertEquals("Created <" + "$array[1]" + ">", "Value1", context.getValue("$array[1]")); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "int/ancestor::root = /", Boolean.TRUE); [EOL]     assertXPathValue(context, "count(beans/name/ancestor-or-self::node())", new Double(5)); [EOL]     assertXPathValue(context, "beans/name/ancestor-or-self::node()[3] = /", Boolean.TRUE); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "int/ancestor::root = /", Boolean.TRUE); [EOL]     assertXPathValue(context, "count(beans/name/ancestor-or-self::node())", new Double(5)); [EOL]     assertXPathValue(context, "beans/name/ancestor-or-self::node()[3] = /", Boolean.TRUE); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "int/ancestor::root = /", Boolean.TRUE); [EOL]     assertXPathValue(context, "count(beans/name/ancestor-or-self::node())", new Double(5)); [EOL]     assertXPathValue(context, "beans/name/ancestor-or-self::node()[3] = /", Boolean.TRUE); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "int/ancestor::root = /", Boolean.TRUE); [EOL]     assertXPathValue(context, "count(beans/name/ancestor-or-self::node())", new Double(5)); [EOL]     assertXPathValue(context, "beans/name/ancestor-or-self::node()[3] = /", Boolean.TRUE); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "int/ancestor::root = /", Boolean.TRUE); [EOL]     assertXPathValue(context, "count(beans/name/ancestor-or-self::node())", new Double(5)); [EOL]     assertXPathValue(context, "beans/name/ancestor-or-self::node()[3] = /", Boolean.TRUE); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "int/ancestor::root = /", Boolean.TRUE); [EOL]     assertXPathValue(context, "count(beans/name/ancestor-or-self::node())", new Double(5)); [EOL]     assertXPathValue(context, "beans/name/ancestor-or-self::node()[3] = /", Boolean.TRUE); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "int/ancestor::root = /", Boolean.TRUE); [EOL]     assertXPathValue(context, "count(beans/name/ancestor-or-self::node())", new Double(5)); [EOL]     assertXPathValue(context, "beans/name/ancestor-or-self::node()[3] = /", Boolean.TRUE); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "int/ancestor::root = /", Boolean.TRUE); [EOL]     assertXPathValue(context, "count(beans/name/ancestor-or-self::node())", new Double(5)); [EOL]     assertXPathValue(context, "beans/name/ancestor-or-self::node()[3] = /", Boolean.TRUE); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "int/ancestor::root = /", Boolean.TRUE); [EOL]     assertXPathValue(context, "count(beans/name/ancestor-or-self::node())", new Double(5)); [EOL]     assertXPathValue(context, "beans/name/ancestor-or-self::node()[3] = /", Boolean.TRUE); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testNodeSetReturn() { [EOL]     assertXPathValueIterator(context, "test:nodeSet()/name", list("Name 1", "Name 2")); [EOL]     assertXPathPointerIterator(context, "test:nodeSet()/name", list("/beans[1]/name", "/beans[2]/name")); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/name", "Name 1", "/beans[1]/name"); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/@name", "Name 1", "/beans[1]/@name"); [EOL] }
public void testNodeSetReturn() { [EOL]     assertXPathValueIterator(context, "test:nodeSet()/name", list("Name 1", "Name 2")); [EOL]     assertXPathPointerIterator(context, "test:nodeSet()/name", list("/beans[1]/name", "/beans[2]/name")); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/name", "Name 1", "/beans[1]/name"); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/@name", "Name 1", "/beans[1]/@name"); [EOL] }
public void testNodeSetReturn() { [EOL]     assertXPathValueIterator(context, "test:nodeSet()/name", list("Name 1", "Name 2")); [EOL]     assertXPathPointerIterator(context, "test:nodeSet()/name", list("/beans[1]/name", "/beans[2]/name")); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/name", "Name 1", "/beans[1]/name"); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/@name", "Name 1", "/beans[1]/@name"); [EOL] }
public void testIDFunction() { [EOL]     context.setIdentityManager(new IdentityManager() { [EOL]  [EOL]         public Pointer getPointerByID(JXPathContext context, String id) { [EOL]             NodePointer ptr = (NodePointer) context.getPointer("/document"); [EOL]             ptr = ptr.getValuePointer(); [EOL]             return ptr.getPointerByID(context, id); [EOL]         } [EOL]     }); [EOL]     assertXPathValueAndPointer(context, "id(101)//street", "Tangerine Drive", "id('101')/address[1]/street[1]"); [EOL]     assertXPathPointerLenient(context, "id(105)/address/street", "id(105)/address/street"); [EOL] }
public void testIDFunction() { [EOL]     context.setIdentityManager(new IdentityManager() { [EOL]  [EOL]         public Pointer getPointerByID(JXPathContext context, String id) { [EOL]             NodePointer ptr = (NodePointer) context.getPointer("/document"); [EOL]             ptr = ptr.getValuePointer(); [EOL]             return ptr.getPointerByID(context, id); [EOL]         } [EOL]     }); [EOL]     assertXPathValueAndPointer(context, "id(101)//street", "Tangerine Drive", "id('101')/address[1]/street[1]"); [EOL]     assertXPathPointerLenient(context, "id(105)/address/street", "id(105)/address/street"); [EOL] }
public void testIDFunction() { [EOL]     context.setIdentityManager(new IdentityManager() { [EOL]  [EOL]         public Pointer getPointerByID(JXPathContext context, String id) { [EOL]             NodePointer ptr = (NodePointer) context.getPointer("/document"); [EOL]             ptr = ptr.getValuePointer(); [EOL]             return ptr.getPointerByID(context, id); [EOL]         } [EOL]     }); [EOL]     assertXPathValueAndPointer(context, "id(101)//street", "Tangerine Drive", "id('101')/address[1]/street[1]"); [EOL]     assertXPathPointerLenient(context, "id(105)/address/street", "id(105)/address/street"); [EOL] }
public void testIDFunction() { [EOL]     context.setIdentityManager(new IdentityManager() { [EOL]  [EOL]         public Pointer getPointerByID(JXPathContext context, String id) { [EOL]             NodePointer ptr = (NodePointer) context.getPointer("/document"); [EOL]             ptr = ptr.getValuePointer(); [EOL]             return ptr.getPointerByID(context, id); [EOL]         } [EOL]     }); [EOL]     assertXPathValueAndPointer(context, "id(101)//street", "Tangerine Drive", "id('101')/address[1]/street[1]"); [EOL]     assertXPathPointerLenient(context, "id(105)/address/street", "id(105)/address/street"); [EOL] }
public void testNodeSetReturn() { [EOL]     assertXPathValueIterator(context, "test:nodeSet()/name", list("Name 1", "Name 2")); [EOL]     assertXPathPointerIterator(context, "test:nodeSet()/name", list("/beans[1]/name", "/beans[2]/name")); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/name", "Name 1", "/beans[1]/name"); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/@name", "Name 1", "/beans[1]/@name"); [EOL] }
public void testNodeSetReturn() { [EOL]     assertXPathValueIterator(context, "test:nodeSet()/name", list("Name 1", "Name 2")); [EOL]     assertXPathPointerIterator(context, "test:nodeSet()/name", list("/beans[1]/name", "/beans[2]/name")); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/name", "Name 1", "/beans[1]/name"); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/@name", "Name 1", "/beans[1]/@name"); [EOL] }
public void testNodeSetReturn() { [EOL]     assertXPathValueIterator(context, "test:nodeSet()/name", list("Name 1", "Name 2")); [EOL]     assertXPathPointerIterator(context, "test:nodeSet()/name", list("/beans[1]/name", "/beans[2]/name")); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/name", "Name 1", "/beans[1]/name"); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/@name", "Name 1", "/beans[1]/@name"); [EOL] }
public void testNodeSetReturn() { [EOL]     assertXPathValueIterator(context, "test:nodeSet()/name", list("Name 1", "Name 2")); [EOL]     assertXPathPointerIterator(context, "test:nodeSet()/name", list("/beans[1]/name", "/beans[2]/name")); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/name", "Name 1", "/beans[1]/name"); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/@name", "Name 1", "/beans[1]/@name"); [EOL] }
public void testNodeSetReturn() { [EOL]     assertXPathValueIterator(context, "test:nodeSet()/name", list("Name 1", "Name 2")); [EOL]     assertXPathPointerIterator(context, "test:nodeSet()/name", list("/beans[1]/name", "/beans[2]/name")); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/name", "Name 1", "/beans[1]/name"); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/@name", "Name 1", "/beans[1]/@name"); [EOL] }
public void testNodeSetReturn() { [EOL]     assertXPathValueIterator(context, "test:nodeSet()/name", list("Name 1", "Name 2")); [EOL]     assertXPathPointerIterator(context, "test:nodeSet()/name", list("/beans[1]/name", "/beans[2]/name")); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/name", "Name 1", "/beans[1]/name"); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/@name", "Name 1", "/beans[1]/@name"); [EOL] }
public void testNodeSetReturn() { [EOL]     assertXPathValueIterator(context, "test:nodeSet()/name", list("Name 1", "Name 2")); [EOL]     assertXPathPointerIterator(context, "test:nodeSet()/name", list("/beans[1]/name", "/beans[2]/name")); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/name", "Name 1", "/beans[1]/name"); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/@name", "Name 1", "/beans[1]/@name"); [EOL] }
public void testCollectionPointer() { [EOL]     List list = new ArrayList(); [EOL]     Map map = new HashMap(); [EOL]     map.put("KeyOne", "SomeStringOne"); [EOL]     map.put("KeyTwo", "SomeStringTwo"); [EOL]     Map map2 = new HashMap(); [EOL]     map2.put("KeyA", "StringA"); [EOL]     map2.put("KeyB", "StringB"); [EOL]     map.put("KeyThree", map2); [EOL]     list.add(map); [EOL]     List list2 = new ArrayList(); [EOL]     list2.add("foo"); [EOL]     list2.add(map); [EOL]     list2.add(map); [EOL]     list.add(list2); [EOL]     context = JXPathContext.newContext(list); [EOL]     assertEquals("SomeStringOne", context.getValue(".[1]/KeyOne")); [EOL]     assertEquals("StringA", context.getValue(".[1]/KeyThree/KeyA")); [EOL]     assertEquals(new Integer(3), context.getValue("size(.[1]/KeyThree)")); [EOL]     assertEquals(new Double(6.0), context.getValue("count(.[1]/KeyThree/*)")); [EOL]     assertEquals(new Double(3.0), context.getValue("count(.[1]/KeyThree/KeyA)")); [EOL] }
public void testCollectionPointer() { [EOL]     List list = new ArrayList(); [EOL]     Map map = new HashMap(); [EOL]     map.put("KeyOne", "SomeStringOne"); [EOL]     map.put("KeyTwo", "SomeStringTwo"); [EOL]     Map map2 = new HashMap(); [EOL]     map2.put("KeyA", "StringA"); [EOL]     map2.put("KeyB", "StringB"); [EOL]     map.put("KeyThree", map2); [EOL]     list.add(map); [EOL]     List list2 = new ArrayList(); [EOL]     list2.add("foo"); [EOL]     list2.add(map); [EOL]     list2.add(map); [EOL]     list.add(list2); [EOL]     context = JXPathContext.newContext(list); [EOL]     assertEquals("SomeStringOne", context.getValue(".[1]/KeyOne")); [EOL]     assertEquals("StringA", context.getValue(".[1]/KeyThree/KeyA")); [EOL]     assertEquals(new Integer(3), context.getValue("size(.[1]/KeyThree)")); [EOL]     assertEquals(new Double(6.0), context.getValue("count(.[1]/KeyThree/*)")); [EOL]     assertEquals(new Double(3.0), context.getValue("count(.[1]/KeyThree/KeyA)")); [EOL] }
public void testCollectionPointer() { [EOL]     List list = new ArrayList(); [EOL]     Map map = new HashMap(); [EOL]     map.put("KeyOne", "SomeStringOne"); [EOL]     map.put("KeyTwo", "SomeStringTwo"); [EOL]     Map map2 = new HashMap(); [EOL]     map2.put("KeyA", "StringA"); [EOL]     map2.put("KeyB", "StringB"); [EOL]     map.put("KeyThree", map2); [EOL]     list.add(map); [EOL]     List list2 = new ArrayList(); [EOL]     list2.add("foo"); [EOL]     list2.add(map); [EOL]     list2.add(map); [EOL]     list.add(list2); [EOL]     context = JXPathContext.newContext(list); [EOL]     assertEquals("SomeStringOne", context.getValue(".[1]/KeyOne")); [EOL]     assertEquals("StringA", context.getValue(".[1]/KeyThree/KeyA")); [EOL]     assertEquals(new Integer(3), context.getValue("size(.[1]/KeyThree)")); [EOL]     assertEquals(new Double(6.0), context.getValue("count(.[1]/KeyThree/*)")); [EOL]     assertEquals(new Double(3.0), context.getValue("count(.[1]/KeyThree/KeyA)")); [EOL] }
public void testCollectionPointer() { [EOL]     List list = new ArrayList(); [EOL]     Map map = new HashMap(); [EOL]     map.put("KeyOne", "SomeStringOne"); [EOL]     map.put("KeyTwo", "SomeStringTwo"); [EOL]     Map map2 = new HashMap(); [EOL]     map2.put("KeyA", "StringA"); [EOL]     map2.put("KeyB", "StringB"); [EOL]     map.put("KeyThree", map2); [EOL]     list.add(map); [EOL]     List list2 = new ArrayList(); [EOL]     list2.add("foo"); [EOL]     list2.add(map); [EOL]     list2.add(map); [EOL]     list.add(list2); [EOL]     context = JXPathContext.newContext(list); [EOL]     assertEquals("SomeStringOne", context.getValue(".[1]/KeyOne")); [EOL]     assertEquals("StringA", context.getValue(".[1]/KeyThree/KeyA")); [EOL]     assertEquals(new Integer(3), context.getValue("size(.[1]/KeyThree)")); [EOL]     assertEquals(new Double(6.0), context.getValue("count(.[1]/KeyThree/*)")); [EOL]     assertEquals(new Double(3.0), context.getValue("count(.[1]/KeyThree/KeyA)")); [EOL] }
public void testCollectionPointer() { [EOL]     List list = new ArrayList(); [EOL]     Map map = new HashMap(); [EOL]     map.put("KeyOne", "SomeStringOne"); [EOL]     map.put("KeyTwo", "SomeStringTwo"); [EOL]     Map map2 = new HashMap(); [EOL]     map2.put("KeyA", "StringA"); [EOL]     map2.put("KeyB", "StringB"); [EOL]     map.put("KeyThree", map2); [EOL]     list.add(map); [EOL]     List list2 = new ArrayList(); [EOL]     list2.add("foo"); [EOL]     list2.add(map); [EOL]     list2.add(map); [EOL]     list.add(list2); [EOL]     context = JXPathContext.newContext(list); [EOL]     assertEquals("SomeStringOne", context.getValue(".[1]/KeyOne")); [EOL]     assertEquals("StringA", context.getValue(".[1]/KeyThree/KeyA")); [EOL]     assertEquals(new Integer(3), context.getValue("size(.[1]/KeyThree)")); [EOL]     assertEquals(new Double(6.0), context.getValue("count(.[1]/KeyThree/*)")); [EOL]     assertEquals(new Double(3.0), context.getValue("count(.[1]/KeyThree/KeyA)")); [EOL] }
public void testCollectionPointer() { [EOL]     List list = new ArrayList(); [EOL]     Map map = new HashMap(); [EOL]     map.put("KeyOne", "SomeStringOne"); [EOL]     map.put("KeyTwo", "SomeStringTwo"); [EOL]     Map map2 = new HashMap(); [EOL]     map2.put("KeyA", "StringA"); [EOL]     map2.put("KeyB", "StringB"); [EOL]     map.put("KeyThree", map2); [EOL]     list.add(map); [EOL]     List list2 = new ArrayList(); [EOL]     list2.add("foo"); [EOL]     list2.add(map); [EOL]     list2.add(map); [EOL]     list.add(list2); [EOL]     context = JXPathContext.newContext(list); [EOL]     assertEquals("SomeStringOne", context.getValue(".[1]/KeyOne")); [EOL]     assertEquals("StringA", context.getValue(".[1]/KeyThree/KeyA")); [EOL]     assertEquals(new Integer(3), context.getValue("size(.[1]/KeyThree)")); [EOL]     assertEquals(new Double(6.0), context.getValue("count(.[1]/KeyThree/*)")); [EOL]     assertEquals(new Double(3.0), context.getValue("count(.[1]/KeyThree/KeyA)")); [EOL] }
public void testCollectionPointer() { [EOL]     List list = new ArrayList(); [EOL]     Map map = new HashMap(); [EOL]     map.put("KeyOne", "SomeStringOne"); [EOL]     map.put("KeyTwo", "SomeStringTwo"); [EOL]     Map map2 = new HashMap(); [EOL]     map2.put("KeyA", "StringA"); [EOL]     map2.put("KeyB", "StringB"); [EOL]     map.put("KeyThree", map2); [EOL]     list.add(map); [EOL]     List list2 = new ArrayList(); [EOL]     list2.add("foo"); [EOL]     list2.add(map); [EOL]     list2.add(map); [EOL]     list.add(list2); [EOL]     context = JXPathContext.newContext(list); [EOL]     assertEquals("SomeStringOne", context.getValue(".[1]/KeyOne")); [EOL]     assertEquals("StringA", context.getValue(".[1]/KeyThree/KeyA")); [EOL]     assertEquals(new Integer(3), context.getValue("size(.[1]/KeyThree)")); [EOL]     assertEquals(new Double(6.0), context.getValue("count(.[1]/KeyThree/*)")); [EOL]     assertEquals(new Double(3.0), context.getValue("count(.[1]/KeyThree/KeyA)")); [EOL] }
public void testCollectionPointer() { [EOL]     List list = new ArrayList(); [EOL]     Map map = new HashMap(); [EOL]     map.put("KeyOne", "SomeStringOne"); [EOL]     map.put("KeyTwo", "SomeStringTwo"); [EOL]     Map map2 = new HashMap(); [EOL]     map2.put("KeyA", "StringA"); [EOL]     map2.put("KeyB", "StringB"); [EOL]     map.put("KeyThree", map2); [EOL]     list.add(map); [EOL]     List list2 = new ArrayList(); [EOL]     list2.add("foo"); [EOL]     list2.add(map); [EOL]     list2.add(map); [EOL]     list.add(list2); [EOL]     context = JXPathContext.newContext(list); [EOL]     assertEquals("SomeStringOne", context.getValue(".[1]/KeyOne")); [EOL]     assertEquals("StringA", context.getValue(".[1]/KeyThree/KeyA")); [EOL]     assertEquals(new Integer(3), context.getValue("size(.[1]/KeyThree)")); [EOL]     assertEquals(new Double(6.0), context.getValue("count(.[1]/KeyThree/*)")); [EOL]     assertEquals(new Double(3.0), context.getValue("count(.[1]/KeyThree/KeyA)")); [EOL] }
public void testCollectionPointer() { [EOL]     List list = new ArrayList(); [EOL]     Map map = new HashMap(); [EOL]     map.put("KeyOne", "SomeStringOne"); [EOL]     map.put("KeyTwo", "SomeStringTwo"); [EOL]     Map map2 = new HashMap(); [EOL]     map2.put("KeyA", "StringA"); [EOL]     map2.put("KeyB", "StringB"); [EOL]     map.put("KeyThree", map2); [EOL]     list.add(map); [EOL]     List list2 = new ArrayList(); [EOL]     list2.add("foo"); [EOL]     list2.add(map); [EOL]     list2.add(map); [EOL]     list.add(list2); [EOL]     context = JXPathContext.newContext(list); [EOL]     assertEquals("SomeStringOne", context.getValue(".[1]/KeyOne")); [EOL]     assertEquals("StringA", context.getValue(".[1]/KeyThree/KeyA")); [EOL]     assertEquals(new Integer(3), context.getValue("size(.[1]/KeyThree)")); [EOL]     assertEquals(new Double(6.0), context.getValue("count(.[1]/KeyThree/*)")); [EOL]     assertEquals(new Double(3.0), context.getValue("count(.[1]/KeyThree/KeyA)")); [EOL] }
public void testCollectionPointer() { [EOL]     List list = new ArrayList(); [EOL]     Map map = new HashMap(); [EOL]     map.put("KeyOne", "SomeStringOne"); [EOL]     map.put("KeyTwo", "SomeStringTwo"); [EOL]     Map map2 = new HashMap(); [EOL]     map2.put("KeyA", "StringA"); [EOL]     map2.put("KeyB", "StringB"); [EOL]     map.put("KeyThree", map2); [EOL]     list.add(map); [EOL]     List list2 = new ArrayList(); [EOL]     list2.add("foo"); [EOL]     list2.add(map); [EOL]     list2.add(map); [EOL]     list.add(list2); [EOL]     context = JXPathContext.newContext(list); [EOL]     assertEquals("SomeStringOne", context.getValue(".[1]/KeyOne")); [EOL]     assertEquals("StringA", context.getValue(".[1]/KeyThree/KeyA")); [EOL]     assertEquals(new Integer(3), context.getValue("size(.[1]/KeyThree)")); [EOL]     assertEquals(new Double(6.0), context.getValue("count(.[1]/KeyThree/*)")); [EOL]     assertEquals(new Double(3.0), context.getValue("count(.[1]/KeyThree/KeyA)")); [EOL] }
public void testCollectionPointer() { [EOL]     List list = new ArrayList(); [EOL]     Map map = new HashMap(); [EOL]     map.put("KeyOne", "SomeStringOne"); [EOL]     map.put("KeyTwo", "SomeStringTwo"); [EOL]     Map map2 = new HashMap(); [EOL]     map2.put("KeyA", "StringA"); [EOL]     map2.put("KeyB", "StringB"); [EOL]     map.put("KeyThree", map2); [EOL]     list.add(map); [EOL]     List list2 = new ArrayList(); [EOL]     list2.add("foo"); [EOL]     list2.add(map); [EOL]     list2.add(map); [EOL]     list.add(list2); [EOL]     context = JXPathContext.newContext(list); [EOL]     assertEquals("SomeStringOne", context.getValue(".[1]/KeyOne")); [EOL]     assertEquals("StringA", context.getValue(".[1]/KeyThree/KeyA")); [EOL]     assertEquals(new Integer(3), context.getValue("size(.[1]/KeyThree)")); [EOL]     assertEquals(new Double(6.0), context.getValue("count(.[1]/KeyThree/*)")); [EOL]     assertEquals(new Double(3.0), context.getValue("count(.[1]/KeyThree/KeyA)")); [EOL] }
public void testCollectionPointer() { [EOL]     List list = new ArrayList(); [EOL]     Map map = new HashMap(); [EOL]     map.put("KeyOne", "SomeStringOne"); [EOL]     map.put("KeyTwo", "SomeStringTwo"); [EOL]     Map map2 = new HashMap(); [EOL]     map2.put("KeyA", "StringA"); [EOL]     map2.put("KeyB", "StringB"); [EOL]     map.put("KeyThree", map2); [EOL]     list.add(map); [EOL]     List list2 = new ArrayList(); [EOL]     list2.add("foo"); [EOL]     list2.add(map); [EOL]     list2.add(map); [EOL]     list.add(list2); [EOL]     context = JXPathContext.newContext(list); [EOL]     assertEquals("SomeStringOne", context.getValue(".[1]/KeyOne")); [EOL]     assertEquals("StringA", context.getValue(".[1]/KeyThree/KeyA")); [EOL]     assertEquals(new Integer(3), context.getValue("size(.[1]/KeyThree)")); [EOL]     assertEquals(new Double(6.0), context.getValue("count(.[1]/KeyThree/*)")); [EOL]     assertEquals(new Double(3.0), context.getValue("count(.[1]/KeyThree/KeyA)")); [EOL] }
public void testIndexedProperty() { [EOL]     JXPathContext context = JXPathContext.newContext(null, new TestIndexedPropertyBean()); [EOL]     assertXPathValueAndPointer(context, "indexed[1]", new Integer(0), "/indexed[1]"); [EOL] }
public void testIndexedProperty() { [EOL]     JXPathContext context = JXPathContext.newContext(null, new TestIndexedPropertyBean()); [EOL]     assertXPathValueAndPointer(context, "indexed[1]", new Integer(0), "/indexed[1]"); [EOL] }
public void testIndexedProperty() { [EOL]     JXPathContext context = JXPathContext.newContext(null, new TestIndexedPropertyBean()); [EOL]     assertXPathValueAndPointer(context, "indexed[1]", new Integer(0), "/indexed[1]"); [EOL] }
public void testIndexedProperty() { [EOL]     JXPathContext context = JXPathContext.newContext(null, new TestIndexedPropertyBean()); [EOL]     assertXPathValueAndPointer(context, "indexed[1]", new Integer(0), "/indexed[1]"); [EOL] }
public void testNull() { [EOL]     assertXPathPointerLenient(context, "$null", "$null"); [EOL]     assertXPathPointerLenient(context, "$null[3]", "$null[3]"); [EOL]     assertXPathPointerLenient(context, "$testnull/nothing", "$testnull/nothing"); [EOL]     assertXPathPointerLenient(context, "$testnull/nothing[2]", "$testnull/nothing[2]"); [EOL]     assertXPathPointerLenient(context, "beans[8]/int", "/beans[8]/int"); [EOL]     assertXPathValueIterator(context, "$testnull/nothing[1]", Collections.EMPTY_LIST); [EOL]     JXPathContext ctx = JXPathContext.newContext(new TestNull()); [EOL]     assertXPathValue(ctx, "nothing", null); [EOL]     assertXPathValue(ctx, "child/nothing", null); [EOL]     assertXPathValue(ctx, "array[2]", null); [EOL]     assertXPathValueLenient(ctx, "nothing/something", null); [EOL]     assertXPathValueLenient(ctx, "array[2]/something", null); [EOL] }
public void testNull() { [EOL]     assertXPathPointerLenient(context, "$null", "$null"); [EOL]     assertXPathPointerLenient(context, "$null[3]", "$null[3]"); [EOL]     assertXPathPointerLenient(context, "$testnull/nothing", "$testnull/nothing"); [EOL]     assertXPathPointerLenient(context, "$testnull/nothing[2]", "$testnull/nothing[2]"); [EOL]     assertXPathPointerLenient(context, "beans[8]/int", "/beans[8]/int"); [EOL]     assertXPathValueIterator(context, "$testnull/nothing[1]", Collections.EMPTY_LIST); [EOL]     JXPathContext ctx = JXPathContext.newContext(new TestNull()); [EOL]     assertXPathValue(ctx, "nothing", null); [EOL]     assertXPathValue(ctx, "child/nothing", null); [EOL]     assertXPathValue(ctx, "array[2]", null); [EOL]     assertXPathValueLenient(ctx, "nothing/something", null); [EOL]     assertXPathValueLenient(ctx, "array[2]/something", null); [EOL] }
public void testNull() { [EOL]     assertXPathPointerLenient(context, "$null", "$null"); [EOL]     assertXPathPointerLenient(context, "$null[3]", "$null[3]"); [EOL]     assertXPathPointerLenient(context, "$testnull/nothing", "$testnull/nothing"); [EOL]     assertXPathPointerLenient(context, "$testnull/nothing[2]", "$testnull/nothing[2]"); [EOL]     assertXPathPointerLenient(context, "beans[8]/int", "/beans[8]/int"); [EOL]     assertXPathValueIterator(context, "$testnull/nothing[1]", Collections.EMPTY_LIST); [EOL]     JXPathContext ctx = JXPathContext.newContext(new TestNull()); [EOL]     assertXPathValue(ctx, "nothing", null); [EOL]     assertXPathValue(ctx, "child/nothing", null); [EOL]     assertXPathValue(ctx, "array[2]", null); [EOL]     assertXPathValueLenient(ctx, "nothing/something", null); [EOL]     assertXPathValueLenient(ctx, "array[2]/something", null); [EOL] }
public void testNull() { [EOL]     assertXPathPointerLenient(context, "$null", "$null"); [EOL]     assertXPathPointerLenient(context, "$null[3]", "$null[3]"); [EOL]     assertXPathPointerLenient(context, "$testnull/nothing", "$testnull/nothing"); [EOL]     assertXPathPointerLenient(context, "$testnull/nothing[2]", "$testnull/nothing[2]"); [EOL]     assertXPathPointerLenient(context, "beans[8]/int", "/beans[8]/int"); [EOL]     assertXPathValueIterator(context, "$testnull/nothing[1]", Collections.EMPTY_LIST); [EOL]     JXPathContext ctx = JXPathContext.newContext(new TestNull()); [EOL]     assertXPathValue(ctx, "nothing", null); [EOL]     assertXPathValue(ctx, "child/nothing", null); [EOL]     assertXPathValue(ctx, "array[2]", null); [EOL]     assertXPathValueLenient(ctx, "nothing/something", null); [EOL]     assertXPathValueLenient(ctx, "array[2]/something", null); [EOL] }
public void testCreatePathAndSetValueExpandCollection() { [EOL]     context.getVariables().declareVariable("array", new String[] { "Value1" }); [EOL]     assertXPathCreatePathAndSetValue(context, "$array[2]", "Value2", "$array[2]"); [EOL]     assertEquals("Created <" + "$array[1]" + ">", "Value1", context.getValue("$array[1]")); [EOL] }
public void testCreatePathAndSetValueExpandCollection() { [EOL]     context.getVariables().declareVariable("array", new String[] { "Value1" }); [EOL]     assertXPathCreatePathAndSetValue(context, "$array[2]", "Value2", "$array[2]"); [EOL]     assertEquals("Created <" + "$array[1]" + ">", "Value1", context.getValue("$array[1]")); [EOL] }
public void testCreatePathAndSetValueExpandCollection() { [EOL]     context.getVariables().declareVariable("array", new String[] { "Value1" }); [EOL]     assertXPathCreatePathAndSetValue(context, "$array[2]", "Value2", "$array[2]"); [EOL]     assertEquals("Created <" + "$array[1]" + ">", "Value1", context.getValue("$array[1]")); [EOL] }
public void testCreatePathAndSetValueExpandCollection() { [EOL]     context.getVariables().declareVariable("array", new String[] { "Value1" }); [EOL]     assertXPathCreatePathAndSetValue(context, "$array[2]", "Value2", "$array[2]"); [EOL]     assertEquals("Created <" + "$array[1]" + ">", "Value1", context.getValue("$array[1]")); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testElementInVariable() { [EOL]     assertXPathValue(context, "$element", "Orchard Road"); [EOL] }
public void testElementInVariable() { [EOL]     assertXPathValue(context, "$element", "Orchard Road"); [EOL] }
public void testElementInVariable() { [EOL]     assertXPathValue(context, "$element", "Orchard Road"); [EOL] }
public void testAxisFollowing() { [EOL]     assertXPathValueIterator(context, "vendor/contact/following::location//street", list("Orchard Road", "Tangerine Drive")); [EOL]     assertXPathValue(context, "//location/following::price:sale/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLocationPathNodeTest() { [EOL]     assertXPathExpression("node()", LocationPath.class); [EOL]     assertXPathExpression("text()", LocationPath.class); [EOL]     assertXPathExpression("comment()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction('test')", LocationPath.class); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLocationPathNodeTest() { [EOL]     assertXPathExpression("node()", LocationPath.class); [EOL]     assertXPathExpression("text()", LocationPath.class); [EOL]     assertXPathExpression("comment()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction('test')", LocationPath.class); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/" + "ancestor::price:sale/saleEnds", "never"); [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/ancestor::price:*" + "/saleEnds", "never"); [EOL] }
public void testLocationPathNodeTest() { [EOL]     assertXPathExpression("node()", LocationPath.class); [EOL]     assertXPathExpression("text()", LocationPath.class); [EOL]     assertXPathExpression("comment()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction('test')", LocationPath.class); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/" + "ancestor::price:sale/saleEnds", "never"); [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/ancestor::price:*" + "/saleEnds", "never"); [EOL] }
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/" + "ancestor::price:sale/saleEnds", "never"); [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/ancestor::price:*" + "/saleEnds", "never"); [EOL] }
public void testLocationPathNodeTest() { [EOL]     assertXPathExpression("node()", LocationPath.class); [EOL]     assertXPathExpression("text()", LocationPath.class); [EOL]     assertXPathExpression("comment()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction('test')", LocationPath.class); [EOL] }
public void testLocationPathNodeTest() { [EOL]     assertXPathExpression("node()", LocationPath.class); [EOL]     assertXPathExpression("text()", LocationPath.class); [EOL]     assertXPathExpression("comment()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction('test')", LocationPath.class); [EOL] }
public void testLocationPathNodeTest() { [EOL]     assertXPathExpression("node()", LocationPath.class); [EOL]     assertXPathExpression("text()", LocationPath.class); [EOL]     assertXPathExpression("comment()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction('test')", LocationPath.class); [EOL] }
public void testLocationPathNodeTest() { [EOL]     assertXPathExpression("node()", LocationPath.class); [EOL]     assertXPathExpression("text()", LocationPath.class); [EOL]     assertXPathExpression("comment()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction('test')", LocationPath.class); [EOL] }
public void testLocationPathNodeTest() { [EOL]     assertXPathExpression("node()", LocationPath.class); [EOL]     assertXPathExpression("text()", LocationPath.class); [EOL]     assertXPathExpression("comment()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction('test')", LocationPath.class); [EOL] }
public void testLocationPathNodeTest() { [EOL]     assertXPathExpression("node()", LocationPath.class); [EOL]     assertXPathExpression("text()", LocationPath.class); [EOL]     assertXPathExpression("comment()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction('test')", LocationPath.class); [EOL] }
public void testLocationPathNodeTest() { [EOL]     assertXPathExpression("node()", LocationPath.class); [EOL]     assertXPathExpression("text()", LocationPath.class); [EOL]     assertXPathExpression("comment()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction('test')", LocationPath.class); [EOL] }
public void testLocationPathNodeTest() { [EOL]     assertXPathExpression("node()", LocationPath.class); [EOL]     assertXPathExpression("text()", LocationPath.class); [EOL]     assertXPathExpression("comment()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction('test')", LocationPath.class); [EOL] }
public void testLocationPathNodeTest() { [EOL]     assertXPathExpression("node()", LocationPath.class); [EOL]     assertXPathExpression("text()", LocationPath.class); [EOL]     assertXPathExpression("comment()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction('test')", LocationPath.class); [EOL] }
public void testLocationPathNodeTest() { [EOL]     assertXPathExpression("node()", LocationPath.class); [EOL]     assertXPathExpression("text()", LocationPath.class); [EOL]     assertXPathExpression("comment()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction('test')", LocationPath.class); [EOL] }
public void testLocationPathNodeTest() { [EOL]     assertXPathExpression("node()", LocationPath.class); [EOL]     assertXPathExpression("text()", LocationPath.class); [EOL]     assertXPathExpression("comment()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction('test')", LocationPath.class); [EOL] }
public void testLocationPathNodeTest() { [EOL]     assertXPathExpression("node()", LocationPath.class); [EOL]     assertXPathExpression("text()", LocationPath.class); [EOL]     assertXPathExpression("comment()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction('test')", LocationPath.class); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testIDFunction() { [EOL]     context.setIdentityManager(new IdentityManager() { [EOL]  [EOL]         public Pointer getPointerByID(JXPathContext context, String id) { [EOL]             NodePointer ptr = (NodePointer) context.getPointer("/document"); [EOL]             ptr = ptr.getValuePointer(); [EOL]             return ptr.getPointerByID(context, id); [EOL]         } [EOL]     }); [EOL]     assertXPathValueAndPointer(context, "id(101)//street", "Tangerine Drive", "id('101')/address[1]/street[1]"); [EOL]     assertXPathPointerLenient(context, "id(105)/address/street", "id(105)/address/street"); [EOL] }
public void testIDFunction() { [EOL]     context.setIdentityManager(new IdentityManager() { [EOL]  [EOL]         public Pointer getPointerByID(JXPathContext context, String id) { [EOL]             NodePointer ptr = (NodePointer) context.getPointer("/document"); [EOL]             ptr = ptr.getValuePointer(); [EOL]             return ptr.getPointerByID(context, id); [EOL]         } [EOL]     }); [EOL]     assertXPathValueAndPointer(context, "id(101)//street", "Tangerine Drive", "id('101')/address[1]/street[1]"); [EOL]     assertXPathPointerLenient(context, "id(105)/address/street", "id(105)/address/street"); [EOL] }
public void testAxisFollowing() { [EOL]     assertXPathValueIterator(context, "vendor/contact/following::location//street", list("Orchard Road", "Tangerine Drive")); [EOL]     assertXPathValue(context, "//location/following::price:sale/saleEnds", "never"); [EOL] }
public void testAxisFollowing() { [EOL]     assertXPathValueIterator(context, "vendor/contact/following::location//street", list("Orchard Road", "Tangerine Drive")); [EOL]     assertXPathValue(context, "//location/following::price:sale/saleEnds", "never"); [EOL] }
public void testAxisFollowing() { [EOL]     assertXPathValueIterator(context, "vendor/contact/following::location//street", list("Orchard Road", "Tangerine Drive")); [EOL]     assertXPathValue(context, "//location/following::price:sale/saleEnds", "never"); [EOL] }
public void testAxisFollowing() { [EOL]     assertXPathValueIterator(context, "vendor/contact/following::location//street", list("Orchard Road", "Tangerine Drive")); [EOL]     assertXPathValue(context, "//location/following::price:sale/saleEnds", "never"); [EOL] }
public void testAxisFollowing() { [EOL]     assertXPathValueIterator(context, "vendor/contact/following::location//street", list("Orchard Road", "Tangerine Drive")); [EOL]     assertXPathValue(context, "//location/following::price:sale/saleEnds", "never"); [EOL] }
public void testAxisFollowing() { [EOL]     assertXPathValueIterator(context, "vendor/contact/following::location//street", list("Orchard Road", "Tangerine Drive")); [EOL]     assertXPathValue(context, "//location/following::price:sale/saleEnds", "never"); [EOL] }
public void testAxisFollowing() { [EOL]     assertXPathValueIterator(context, "vendor/contact/following::location//street", list("Orchard Road", "Tangerine Drive")); [EOL]     assertXPathValue(context, "//location/following::price:sale/saleEnds", "never"); [EOL] }
public void testAxisFollowing() { [EOL]     assertXPathValueIterator(context, "vendor/contact/following::location//street", list("Orchard Road", "Tangerine Drive")); [EOL]     assertXPathValue(context, "//location/following::price:sale/saleEnds", "never"); [EOL] }
public void testAxisFollowing() { [EOL]     assertXPathValueIterator(context, "vendor/contact/following::location//street", list("Orchard Road", "Tangerine Drive")); [EOL]     assertXPathValue(context, "//location/following::price:sale/saleEnds", "never"); [EOL] }
public void testAxisFollowing() { [EOL]     assertXPathValueIterator(context, "vendor/contact/following::location//street", list("Orchard Road", "Tangerine Drive")); [EOL]     assertXPathValue(context, "//location/following::price:sale/saleEnds", "never"); [EOL] }
public void testNodeTypeProcessingInstruction() { [EOL]     assertXPathValue(context, "//product/processing-instruction()", "do not show anybody"); [EOL]     assertXPathValue(context, "//product/processing-instruction('report')", "average only"); [EOL]     assertXPathPointer(context, "//product/processing-instruction('report')", "/vendor[1]/product[1]/processing-instruction('report')[1]"); [EOL]     assertXPathValue(context, "name(//product/processing-instruction()[1])", "security"); [EOL] }
public void testNodeTypeProcessingInstruction() { [EOL]     assertXPathValue(context, "//product/processing-instruction()", "do not show anybody"); [EOL]     assertXPathValue(context, "//product/processing-instruction('report')", "average only"); [EOL]     assertXPathPointer(context, "//product/processing-instruction('report')", "/vendor[1]/product[1]/processing-instruction('report')[1]"); [EOL]     assertXPathValue(context, "name(//product/processing-instruction()[1])", "security"); [EOL] }
public void testNodeTypeProcessingInstruction() { [EOL]     assertXPathValue(context, "//product/processing-instruction()", "do not show anybody"); [EOL]     assertXPathValue(context, "//product/processing-instruction('report')", "average only"); [EOL]     assertXPathPointer(context, "//product/processing-instruction('report')", "/vendor[1]/product[1]/processing-instruction('report')[1]"); [EOL]     assertXPathValue(context, "name(//product/processing-instruction()[1])", "security"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testIDFunction() { [EOL]     context.setIdentityManager(new IdentityManager() { [EOL]  [EOL]         public Pointer getPointerByID(JXPathContext context, String id) { [EOL]             NodePointer ptr = (NodePointer) context.getPointer("/document"); [EOL]             ptr = ptr.getValuePointer(); [EOL]             return ptr.getPointerByID(context, id); [EOL]         } [EOL]     }); [EOL]     assertXPathValueAndPointer(context, "id(101)//street", "Tangerine Drive", "id('101')/address[1]/street[1]"); [EOL]     assertXPathPointerLenient(context, "id(105)/address/street", "id(105)/address/street"); [EOL] }
public void testIDFunction() { [EOL]     context.setIdentityManager(new IdentityManager() { [EOL]  [EOL]         public Pointer getPointerByID(JXPathContext context, String id) { [EOL]             NodePointer ptr = (NodePointer) context.getPointer("/document"); [EOL]             ptr = ptr.getValuePointer(); [EOL]             return ptr.getPointerByID(context, id); [EOL]         } [EOL]     }); [EOL]     assertXPathValueAndPointer(context, "id(101)//street", "Tangerine Drive", "id('101')/address[1]/street[1]"); [EOL]     assertXPathPointerLenient(context, "id(105)/address/street", "id(105)/address/street"); [EOL] }
public void testIDFunction() { [EOL]     context.setIdentityManager(new IdentityManager() { [EOL]  [EOL]         public Pointer getPointerByID(JXPathContext context, String id) { [EOL]             NodePointer ptr = (NodePointer) context.getPointer("/document"); [EOL]             ptr = ptr.getValuePointer(); [EOL]             return ptr.getPointerByID(context, id); [EOL]         } [EOL]     }); [EOL]     assertXPathValueAndPointer(context, "id(101)//street", "Tangerine Drive", "id('101')/address[1]/street[1]"); [EOL]     assertXPathPointerLenient(context, "id(105)/address/street", "id(105)/address/street"); [EOL] }
public void testIDFunction() { [EOL]     context.setIdentityManager(new IdentityManager() { [EOL]  [EOL]         public Pointer getPointerByID(JXPathContext context, String id) { [EOL]             NodePointer ptr = (NodePointer) context.getPointer("/document"); [EOL]             ptr = ptr.getValuePointer(); [EOL]             return ptr.getPointerByID(context, id); [EOL]         } [EOL]     }); [EOL]     assertXPathValueAndPointer(context, "id(101)//street", "Tangerine Drive", "id('101')/address[1]/street[1]"); [EOL]     assertXPathPointerLenient(context, "id(105)/address/street", "id(105)/address/street"); [EOL] }
public void testIDFunction() { [EOL]     context.setIdentityManager(new IdentityManager() { [EOL]  [EOL]         public Pointer getPointerByID(JXPathContext context, String id) { [EOL]             NodePointer ptr = (NodePointer) context.getPointer("/document"); [EOL]             ptr = ptr.getValuePointer(); [EOL]             return ptr.getPointerByID(context, id); [EOL]         } [EOL]     }); [EOL]     assertXPathValueAndPointer(context, "id(101)//street", "Tangerine Drive", "id('101')/address[1]/street[1]"); [EOL]     assertXPathPointerLenient(context, "id(105)/address/street", "id(105)/address/street"); [EOL] }
public void testIDFunction() { [EOL]     context.setIdentityManager(new IdentityManager() { [EOL]  [EOL]         public Pointer getPointerByID(JXPathContext context, String id) { [EOL]             NodePointer ptr = (NodePointer) context.getPointer("/document"); [EOL]             ptr = ptr.getValuePointer(); [EOL]             return ptr.getPointerByID(context, id); [EOL]         } [EOL]     }); [EOL]     assertXPathValueAndPointer(context, "id(101)//street", "Tangerine Drive", "id('101')/address[1]/street[1]"); [EOL]     assertXPathPointerLenient(context, "id(105)/address/street", "id(105)/address/street"); [EOL] }
public void testIDFunction() { [EOL]     context.setIdentityManager(new IdentityManager() { [EOL]  [EOL]         public Pointer getPointerByID(JXPathContext context, String id) { [EOL]             NodePointer ptr = (NodePointer) context.getPointer("/document"); [EOL]             ptr = ptr.getValuePointer(); [EOL]             return ptr.getPointerByID(context, id); [EOL]         } [EOL]     }); [EOL]     assertXPathValueAndPointer(context, "id(101)//street", "Tangerine Drive", "id('101')/address[1]/street[1]"); [EOL]     assertXPathPointerLenient(context, "id(105)/address/street", "id(105)/address/street"); [EOL] }
public void testIDFunction() { [EOL]     context.setIdentityManager(new IdentityManager() { [EOL]  [EOL]         public Pointer getPointerByID(JXPathContext context, String id) { [EOL]             NodePointer ptr = (NodePointer) context.getPointer("/document"); [EOL]             ptr = ptr.getValuePointer(); [EOL]             return ptr.getPointerByID(context, id); [EOL]         } [EOL]     }); [EOL]     assertXPathValueAndPointer(context, "id(101)//street", "Tangerine Drive", "id('101')/address[1]/street[1]"); [EOL]     assertXPathPointerLenient(context, "id(105)/address/street", "id(105)/address/street"); [EOL] }
public void testIDFunction() { [EOL]     context.setIdentityManager(new IdentityManager() { [EOL]  [EOL]         public Pointer getPointerByID(JXPathContext context, String id) { [EOL]             NodePointer ptr = (NodePointer) context.getPointer("/document"); [EOL]             ptr = ptr.getValuePointer(); [EOL]             return ptr.getPointerByID(context, id); [EOL]         } [EOL]     }); [EOL]     assertXPathValueAndPointer(context, "id(101)//street", "Tangerine Drive", "id('101')/address[1]/street[1]"); [EOL]     assertXPathPointerLenient(context, "id(105)/address/street", "id(105)/address/street"); [EOL] }
public void testIDFunction() { [EOL]     context.setIdentityManager(new IdentityManager() { [EOL]  [EOL]         public Pointer getPointerByID(JXPathContext context, String id) { [EOL]             NodePointer ptr = (NodePointer) context.getPointer("/document"); [EOL]             ptr = ptr.getValuePointer(); [EOL]             return ptr.getPointerByID(context, id); [EOL]         } [EOL]     }); [EOL]     assertXPathValueAndPointer(context, "id(101)//street", "Tangerine Drive", "id('101')/address[1]/street[1]"); [EOL]     assertXPathPointerLenient(context, "id(105)/address/street", "id(105)/address/street"); [EOL] }
public void testDefaultNamespaceIgnored() { [EOL]     context.registerDefaultNamespace("temp"); [EOL]     assertXPathValueAndPointer(context, "//pos//number", "110", "/node()[1]/pos[2]/register[1]/number[1]"); [EOL]     context.registerDefaultNamespace(null); [EOL] }
public void testDefaultNamespaceIgnored() { [EOL]     context.registerDefaultNamespace("temp"); [EOL]     assertXPathValueAndPointer(context, "//pos//number", "110", "/node()[1]/pos[2]/register[1]/number[1]"); [EOL]     context.registerDefaultNamespace(null); [EOL] }
public void testNodeTypeProcessingInstruction() { [EOL]     assertXPathValue(context, "//product/processing-instruction()", "do not show anybody"); [EOL]     assertXPathValue(context, "//product/processing-instruction('report')", "average only"); [EOL]     assertXPathPointer(context, "//product/processing-instruction('report')", "/vendor[1]/product[1]/processing-instruction('report')[1]"); [EOL]     assertXPathValue(context, "name(//product/processing-instruction()[1])", "security"); [EOL] }
public void testNodeTypeProcessingInstruction() { [EOL]     assertXPathValue(context, "//product/processing-instruction()", "do not show anybody"); [EOL]     assertXPathValue(context, "//product/processing-instruction('report')", "average only"); [EOL]     assertXPathPointer(context, "//product/processing-instruction('report')", "/vendor[1]/product[1]/processing-instruction('report')[1]"); [EOL]     assertXPathValue(context, "name(//product/processing-instruction()[1])", "security"); [EOL] }
public void testNodeTypeProcessingInstruction() { [EOL]     assertXPathValue(context, "//product/processing-instruction()", "do not show anybody"); [EOL]     assertXPathValue(context, "//product/processing-instruction('report')", "average only"); [EOL]     assertXPathPointer(context, "//product/processing-instruction('report')", "/vendor[1]/product[1]/processing-instruction('report')[1]"); [EOL]     assertXPathValue(context, "name(//product/processing-instruction()[1])", "security"); [EOL] }
public void testNodeTypeProcessingInstruction() { [EOL]     assertXPathValue(context, "//product/processing-instruction()", "do not show anybody"); [EOL]     assertXPathValue(context, "//product/processing-instruction('report')", "average only"); [EOL]     assertXPathPointer(context, "//product/processing-instruction('report')", "/vendor[1]/product[1]/processing-instruction('report')[1]"); [EOL]     assertXPathValue(context, "name(//product/processing-instruction()[1])", "security"); [EOL] }
public void testIDFunction() { [EOL]     context.setIdentityManager(new IdentityManager() { [EOL]  [EOL]         public Pointer getPointerByID(JXPathContext context, String id) { [EOL]             NodePointer ptr = (NodePointer) context.getPointer("/document"); [EOL]             ptr = ptr.getValuePointer(); [EOL]             return ptr.getPointerByID(context, id); [EOL]         } [EOL]     }); [EOL]     assertXPathValueAndPointer(context, "id(101)//street", "Tangerine Drive", "id('101')/address[1]/street[1]"); [EOL]     assertXPathPointerLenient(context, "id(105)/address/street", "id(105)/address/street"); [EOL] }
public void testIDFunction() { [EOL]     context.setIdentityManager(new IdentityManager() { [EOL]  [EOL]         public Pointer getPointerByID(JXPathContext context, String id) { [EOL]             NodePointer ptr = (NodePointer) context.getPointer("/document"); [EOL]             ptr = ptr.getValuePointer(); [EOL]             return ptr.getPointerByID(context, id); [EOL]         } [EOL]     }); [EOL]     assertXPathValueAndPointer(context, "id(101)//street", "Tangerine Drive", "id('101')/address[1]/street[1]"); [EOL]     assertXPathPointerLenient(context, "id(105)/address/street", "id(105)/address/street"); [EOL] }
public void testIDFunction() { [EOL]     context.setIdentityManager(new IdentityManager() { [EOL]  [EOL]         public Pointer getPointerByID(JXPathContext context, String id) { [EOL]             NodePointer ptr = (NodePointer) context.getPointer("/document"); [EOL]             ptr = ptr.getValuePointer(); [EOL]             return ptr.getPointerByID(context, id); [EOL]         } [EOL]     }); [EOL]     assertXPathValueAndPointer(context, "id(101)//street", "Tangerine Drive", "id('101')/address[1]/street[1]"); [EOL]     assertXPathPointerLenient(context, "id(105)/address/street", "id(105)/address/street"); [EOL] }
public void testNodeSetReturn() { [EOL]     assertXPathValueIterator(context, "test:nodeSet()/name", list("Name 1", "Name 2")); [EOL]     assertXPathPointerIterator(context, "test:nodeSet()/name", list("/beans[1]/name", "/beans[2]/name")); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/name", "Name 1", "/beans[1]/name"); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/@name", "Name 1", "/beans[1]/@name"); [EOL] }
public void testNodeSetReturn() { [EOL]     assertXPathValueIterator(context, "test:nodeSet()/name", list("Name 1", "Name 2")); [EOL]     assertXPathPointerIterator(context, "test:nodeSet()/name", list("/beans[1]/name", "/beans[2]/name")); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/name", "Name 1", "/beans[1]/name"); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/@name", "Name 1", "/beans[1]/@name"); [EOL] }
public void testNodeSetReturn() { [EOL]     assertXPathValueIterator(context, "test:nodeSet()/name", list("Name 1", "Name 2")); [EOL]     assertXPathPointerIterator(context, "test:nodeSet()/name", list("/beans[1]/name", "/beans[2]/name")); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/name", "Name 1", "/beans[1]/name"); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/@name", "Name 1", "/beans[1]/@name"); [EOL] }
public void testNodeSetReturn() { [EOL]     assertXPathValueIterator(context, "test:nodeSet()/name", list("Name 1", "Name 2")); [EOL]     assertXPathPointerIterator(context, "test:nodeSet()/name", list("/beans[1]/name", "/beans[2]/name")); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/name", "Name 1", "/beans[1]/name"); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/@name", "Name 1", "/beans[1]/@name"); [EOL] }
public void testNodeSetReturn() { [EOL]     assertXPathValueIterator(context, "test:nodeSet()/name", list("Name 1", "Name 2")); [EOL]     assertXPathPointerIterator(context, "test:nodeSet()/name", list("/beans[1]/name", "/beans[2]/name")); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/name", "Name 1", "/beans[1]/name"); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/@name", "Name 1", "/beans[1]/@name"); [EOL] }
public void testNodeSetReturn() { [EOL]     assertXPathValueIterator(context, "test:nodeSet()/name", list("Name 1", "Name 2")); [EOL]     assertXPathPointerIterator(context, "test:nodeSet()/name", list("/beans[1]/name", "/beans[2]/name")); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/name", "Name 1", "/beans[1]/name"); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/@name", "Name 1", "/beans[1]/@name"); [EOL] }
public void testNodeSetReturn() { [EOL]     assertXPathValueIterator(context, "test:nodeSet()/name", list("Name 1", "Name 2")); [EOL]     assertXPathPointerIterator(context, "test:nodeSet()/name", list("/beans[1]/name", "/beans[2]/name")); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/name", "Name 1", "/beans[1]/name"); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/@name", "Name 1", "/beans[1]/@name"); [EOL] }
public void testNodeSetReturn() { [EOL]     assertXPathValueIterator(context, "test:nodeSet()/name", list("Name 1", "Name 2")); [EOL]     assertXPathPointerIterator(context, "test:nodeSet()/name", list("/beans[1]/name", "/beans[2]/name")); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/name", "Name 1", "/beans[1]/name"); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/@name", "Name 1", "/beans[1]/@name"); [EOL] }
public void testNodeSetReturn() { [EOL]     assertXPathValueIterator(context, "test:nodeSet()/name", list("Name 1", "Name 2")); [EOL]     assertXPathPointerIterator(context, "test:nodeSet()/name", list("/beans[1]/name", "/beans[2]/name")); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/name", "Name 1", "/beans[1]/name"); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/@name", "Name 1", "/beans[1]/@name"); [EOL] }
public void testNodeSetReturn() { [EOL]     assertXPathValueIterator(context, "test:nodeSet()/name", list("Name 1", "Name 2")); [EOL]     assertXPathPointerIterator(context, "test:nodeSet()/name", list("/beans[1]/name", "/beans[2]/name")); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/name", "Name 1", "/beans[1]/name"); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/@name", "Name 1", "/beans[1]/@name"); [EOL] }
public void testNodeSetReturn() { [EOL]     assertXPathValueIterator(context, "test:nodeSet()/name", list("Name 1", "Name 2")); [EOL]     assertXPathPointerIterator(context, "test:nodeSet()/name", list("/beans[1]/name", "/beans[2]/name")); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/name", "Name 1", "/beans[1]/name"); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/@name", "Name 1", "/beans[1]/@name"); [EOL] }
public void testNodeSetReturn() { [EOL]     assertXPathValueIterator(context, "test:nodeSet()/name", list("Name 1", "Name 2")); [EOL]     assertXPathPointerIterator(context, "test:nodeSet()/name", list("/beans[1]/name", "/beans[2]/name")); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/name", "Name 1", "/beans[1]/name"); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/@name", "Name 1", "/beans[1]/@name"); [EOL] }
public void testNodeSetReturn() { [EOL]     assertXPathValueIterator(context, "test:nodeSet()/name", list("Name 1", "Name 2")); [EOL]     assertXPathPointerIterator(context, "test:nodeSet()/name", list("/beans[1]/name", "/beans[2]/name")); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/name", "Name 1", "/beans[1]/name"); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/@name", "Name 1", "/beans[1]/@name"); [EOL] }
public void testNodeSetReturn() { [EOL]     assertXPathValueIterator(context, "test:nodeSet()/name", list("Name 1", "Name 2")); [EOL]     assertXPathPointerIterator(context, "test:nodeSet()/name", list("/beans[1]/name", "/beans[2]/name")); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/name", "Name 1", "/beans[1]/name"); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/@name", "Name 1", "/beans[1]/@name"); [EOL] }
public void testNodeSetReturn() { [EOL]     assertXPathValueIterator(context, "test:nodeSet()/name", list("Name 1", "Name 2")); [EOL]     assertXPathPointerIterator(context, "test:nodeSet()/name", list("/beans[1]/name", "/beans[2]/name")); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/name", "Name 1", "/beans[1]/name"); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/@name", "Name 1", "/beans[1]/@name"); [EOL] }
public void testNodeSetReturn() { [EOL]     assertXPathValueIterator(context, "test:nodeSet()/name", list("Name 1", "Name 2")); [EOL]     assertXPathPointerIterator(context, "test:nodeSet()/name", list("/beans[1]/name", "/beans[2]/name")); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/name", "Name 1", "/beans[1]/name"); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/@name", "Name 1", "/beans[1]/@name"); [EOL] }
public void testNodeSetReturn() { [EOL]     assertXPathValueIterator(context, "test:nodeSet()/name", list("Name 1", "Name 2")); [EOL]     assertXPathPointerIterator(context, "test:nodeSet()/name", list("/beans[1]/name", "/beans[2]/name")); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/name", "Name 1", "/beans[1]/name"); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/@name", "Name 1", "/beans[1]/@name"); [EOL] }
public void testNodeSetReturn() { [EOL]     assertXPathValueIterator(context, "test:nodeSet()/name", list("Name 1", "Name 2")); [EOL]     assertXPathPointerIterator(context, "test:nodeSet()/name", list("/beans[1]/name", "/beans[2]/name")); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/name", "Name 1", "/beans[1]/name"); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/@name", "Name 1", "/beans[1]/@name"); [EOL] }
public void testCollectionPointer() { [EOL]     List list = new ArrayList(); [EOL]     Map map = new HashMap(); [EOL]     map.put("KeyOne", "SomeStringOne"); [EOL]     map.put("KeyTwo", "SomeStringTwo"); [EOL]     Map map2 = new HashMap(); [EOL]     map2.put("KeyA", "StringA"); [EOL]     map2.put("KeyB", "StringB"); [EOL]     map.put("KeyThree", map2); [EOL]     list.add(map); [EOL]     List list2 = new ArrayList(); [EOL]     list2.add("foo"); [EOL]     list2.add(map); [EOL]     list2.add(map); [EOL]     list.add(list2); [EOL]     context = JXPathContext.newContext(list); [EOL]     assertEquals("SomeStringOne", context.getValue(".[1]/KeyOne")); [EOL]     assertEquals("StringA", context.getValue(".[1]/KeyThree/KeyA")); [EOL]     assertEquals(new Integer(3), context.getValue("size(.[1]/KeyThree)")); [EOL]     assertEquals(new Double(6.0), context.getValue("count(.[1]/KeyThree/*)")); [EOL]     assertEquals(new Double(3.0), context.getValue("count(.[1]/KeyThree/KeyA)")); [EOL] }
public void testCollectionPointer() { [EOL]     List list = new ArrayList(); [EOL]     Map map = new HashMap(); [EOL]     map.put("KeyOne", "SomeStringOne"); [EOL]     map.put("KeyTwo", "SomeStringTwo"); [EOL]     Map map2 = new HashMap(); [EOL]     map2.put("KeyA", "StringA"); [EOL]     map2.put("KeyB", "StringB"); [EOL]     map.put("KeyThree", map2); [EOL]     list.add(map); [EOL]     List list2 = new ArrayList(); [EOL]     list2.add("foo"); [EOL]     list2.add(map); [EOL]     list2.add(map); [EOL]     list.add(list2); [EOL]     context = JXPathContext.newContext(list); [EOL]     assertEquals("SomeStringOne", context.getValue(".[1]/KeyOne")); [EOL]     assertEquals("StringA", context.getValue(".[1]/KeyThree/KeyA")); [EOL]     assertEquals(new Integer(3), context.getValue("size(.[1]/KeyThree)")); [EOL]     assertEquals(new Double(6.0), context.getValue("count(.[1]/KeyThree/*)")); [EOL]     assertEquals(new Double(3.0), context.getValue("count(.[1]/KeyThree/KeyA)")); [EOL] }
public void testCollectionPointer() { [EOL]     List list = new ArrayList(); [EOL]     Map map = new HashMap(); [EOL]     map.put("KeyOne", "SomeStringOne"); [EOL]     map.put("KeyTwo", "SomeStringTwo"); [EOL]     Map map2 = new HashMap(); [EOL]     map2.put("KeyA", "StringA"); [EOL]     map2.put("KeyB", "StringB"); [EOL]     map.put("KeyThree", map2); [EOL]     list.add(map); [EOL]     List list2 = new ArrayList(); [EOL]     list2.add("foo"); [EOL]     list2.add(map); [EOL]     list2.add(map); [EOL]     list.add(list2); [EOL]     context = JXPathContext.newContext(list); [EOL]     assertEquals("SomeStringOne", context.getValue(".[1]/KeyOne")); [EOL]     assertEquals("StringA", context.getValue(".[1]/KeyThree/KeyA")); [EOL]     assertEquals(new Integer(3), context.getValue("size(.[1]/KeyThree)")); [EOL]     assertEquals(new Double(6.0), context.getValue("count(.[1]/KeyThree/*)")); [EOL]     assertEquals(new Double(3.0), context.getValue("count(.[1]/KeyThree/KeyA)")); [EOL] }
public void testCollectionPointer() { [EOL]     List list = new ArrayList(); [EOL]     Map map = new HashMap(); [EOL]     map.put("KeyOne", "SomeStringOne"); [EOL]     map.put("KeyTwo", "SomeStringTwo"); [EOL]     Map map2 = new HashMap(); [EOL]     map2.put("KeyA", "StringA"); [EOL]     map2.put("KeyB", "StringB"); [EOL]     map.put("KeyThree", map2); [EOL]     list.add(map); [EOL]     List list2 = new ArrayList(); [EOL]     list2.add("foo"); [EOL]     list2.add(map); [EOL]     list2.add(map); [EOL]     list.add(list2); [EOL]     context = JXPathContext.newContext(list); [EOL]     assertEquals("SomeStringOne", context.getValue(".[1]/KeyOne")); [EOL]     assertEquals("StringA", context.getValue(".[1]/KeyThree/KeyA")); [EOL]     assertEquals(new Integer(3), context.getValue("size(.[1]/KeyThree)")); [EOL]     assertEquals(new Double(6.0), context.getValue("count(.[1]/KeyThree/*)")); [EOL]     assertEquals(new Double(3.0), context.getValue("count(.[1]/KeyThree/KeyA)")); [EOL] }
public void testCollectionPointer() { [EOL]     List list = new ArrayList(); [EOL]     Map map = new HashMap(); [EOL]     map.put("KeyOne", "SomeStringOne"); [EOL]     map.put("KeyTwo", "SomeStringTwo"); [EOL]     Map map2 = new HashMap(); [EOL]     map2.put("KeyA", "StringA"); [EOL]     map2.put("KeyB", "StringB"); [EOL]     map.put("KeyThree", map2); [EOL]     list.add(map); [EOL]     List list2 = new ArrayList(); [EOL]     list2.add("foo"); [EOL]     list2.add(map); [EOL]     list2.add(map); [EOL]     list.add(list2); [EOL]     context = JXPathContext.newContext(list); [EOL]     assertEquals("SomeStringOne", context.getValue(".[1]/KeyOne")); [EOL]     assertEquals("StringA", context.getValue(".[1]/KeyThree/KeyA")); [EOL]     assertEquals(new Integer(3), context.getValue("size(.[1]/KeyThree)")); [EOL]     assertEquals(new Double(6.0), context.getValue("count(.[1]/KeyThree/*)")); [EOL]     assertEquals(new Double(3.0), context.getValue("count(.[1]/KeyThree/KeyA)")); [EOL] }
public void testCollectionPointer() { [EOL]     List list = new ArrayList(); [EOL]     Map map = new HashMap(); [EOL]     map.put("KeyOne", "SomeStringOne"); [EOL]     map.put("KeyTwo", "SomeStringTwo"); [EOL]     Map map2 = new HashMap(); [EOL]     map2.put("KeyA", "StringA"); [EOL]     map2.put("KeyB", "StringB"); [EOL]     map.put("KeyThree", map2); [EOL]     list.add(map); [EOL]     List list2 = new ArrayList(); [EOL]     list2.add("foo"); [EOL]     list2.add(map); [EOL]     list2.add(map); [EOL]     list.add(list2); [EOL]     context = JXPathContext.newContext(list); [EOL]     assertEquals("SomeStringOne", context.getValue(".[1]/KeyOne")); [EOL]     assertEquals("StringA", context.getValue(".[1]/KeyThree/KeyA")); [EOL]     assertEquals(new Integer(3), context.getValue("size(.[1]/KeyThree)")); [EOL]     assertEquals(new Double(6.0), context.getValue("count(.[1]/KeyThree/*)")); [EOL]     assertEquals(new Double(3.0), context.getValue("count(.[1]/KeyThree/KeyA)")); [EOL] }
public void testCollectionPointer() { [EOL]     List list = new ArrayList(); [EOL]     Map map = new HashMap(); [EOL]     map.put("KeyOne", "SomeStringOne"); [EOL]     map.put("KeyTwo", "SomeStringTwo"); [EOL]     Map map2 = new HashMap(); [EOL]     map2.put("KeyA", "StringA"); [EOL]     map2.put("KeyB", "StringB"); [EOL]     map.put("KeyThree", map2); [EOL]     list.add(map); [EOL]     List list2 = new ArrayList(); [EOL]     list2.add("foo"); [EOL]     list2.add(map); [EOL]     list2.add(map); [EOL]     list.add(list2); [EOL]     context = JXPathContext.newContext(list); [EOL]     assertEquals("SomeStringOne", context.getValue(".[1]/KeyOne")); [EOL]     assertEquals("StringA", context.getValue(".[1]/KeyThree/KeyA")); [EOL]     assertEquals(new Integer(3), context.getValue("size(.[1]/KeyThree)")); [EOL]     assertEquals(new Double(6.0), context.getValue("count(.[1]/KeyThree/*)")); [EOL]     assertEquals(new Double(3.0), context.getValue("count(.[1]/KeyThree/KeyA)")); [EOL] }
public void testNodeSetReturn() { [EOL]     assertXPathValueIterator(context, "test:nodeSet()/name", list("Name 1", "Name 2")); [EOL]     assertXPathPointerIterator(context, "test:nodeSet()/name", list("/beans[1]/name", "/beans[2]/name")); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/name", "Name 1", "/beans[1]/name"); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/@name", "Name 1", "/beans[1]/@name"); [EOL] }
public void testNodeSetReturn() { [EOL]     assertXPathValueIterator(context, "test:nodeSet()/name", list("Name 1", "Name 2")); [EOL]     assertXPathPointerIterator(context, "test:nodeSet()/name", list("/beans[1]/name", "/beans[2]/name")); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/name", "Name 1", "/beans[1]/name"); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/@name", "Name 1", "/beans[1]/@name"); [EOL] }
public void testNodeSetReturn() { [EOL]     assertXPathValueIterator(context, "test:nodeSet()/name", list("Name 1", "Name 2")); [EOL]     assertXPathPointerIterator(context, "test:nodeSet()/name", list("/beans[1]/name", "/beans[2]/name")); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/name", "Name 1", "/beans[1]/name"); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/@name", "Name 1", "/beans[1]/@name"); [EOL] }
public void testNodeSetReturn() { [EOL]     assertXPathValueIterator(context, "test:nodeSet()/name", list("Name 1", "Name 2")); [EOL]     assertXPathPointerIterator(context, "test:nodeSet()/name", list("/beans[1]/name", "/beans[2]/name")); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/name", "Name 1", "/beans[1]/name"); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/@name", "Name 1", "/beans[1]/@name"); [EOL] }
public void testNodeSetReturn() { [EOL]     assertXPathValueIterator(context, "test:nodeSet()/name", list("Name 1", "Name 2")); [EOL]     assertXPathPointerIterator(context, "test:nodeSet()/name", list("/beans[1]/name", "/beans[2]/name")); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/name", "Name 1", "/beans[1]/name"); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/@name", "Name 1", "/beans[1]/@name"); [EOL] }
public void testCollectionPointer() { [EOL]     List list = new ArrayList(); [EOL]     Map map = new HashMap(); [EOL]     map.put("KeyOne", "SomeStringOne"); [EOL]     map.put("KeyTwo", "SomeStringTwo"); [EOL]     Map map2 = new HashMap(); [EOL]     map2.put("KeyA", "StringA"); [EOL]     map2.put("KeyB", "StringB"); [EOL]     map.put("KeyThree", map2); [EOL]     list.add(map); [EOL]     List list2 = new ArrayList(); [EOL]     list2.add("foo"); [EOL]     list2.add(map); [EOL]     list2.add(map); [EOL]     list.add(list2); [EOL]     context = JXPathContext.newContext(list); [EOL]     assertEquals("SomeStringOne", context.getValue(".[1]/KeyOne")); [EOL]     assertEquals("StringA", context.getValue(".[1]/KeyThree/KeyA")); [EOL]     assertEquals(new Integer(3), context.getValue("size(.[1]/KeyThree)")); [EOL]     assertEquals(new Double(6.0), context.getValue("count(.[1]/KeyThree/*)")); [EOL]     assertEquals(new Double(3.0), context.getValue("count(.[1]/KeyThree/KeyA)")); [EOL] }
public void testCollectionPointer() { [EOL]     List list = new ArrayList(); [EOL]     Map map = new HashMap(); [EOL]     map.put("KeyOne", "SomeStringOne"); [EOL]     map.put("KeyTwo", "SomeStringTwo"); [EOL]     Map map2 = new HashMap(); [EOL]     map2.put("KeyA", "StringA"); [EOL]     map2.put("KeyB", "StringB"); [EOL]     map.put("KeyThree", map2); [EOL]     list.add(map); [EOL]     List list2 = new ArrayList(); [EOL]     list2.add("foo"); [EOL]     list2.add(map); [EOL]     list2.add(map); [EOL]     list.add(list2); [EOL]     context = JXPathContext.newContext(list); [EOL]     assertEquals("SomeStringOne", context.getValue(".[1]/KeyOne")); [EOL]     assertEquals("StringA", context.getValue(".[1]/KeyThree/KeyA")); [EOL]     assertEquals(new Integer(3), context.getValue("size(.[1]/KeyThree)")); [EOL]     assertEquals(new Double(6.0), context.getValue("count(.[1]/KeyThree/*)")); [EOL]     assertEquals(new Double(3.0), context.getValue("count(.[1]/KeyThree/KeyA)")); [EOL] }
public void testCollectionPointer() { [EOL]     List list = new ArrayList(); [EOL]     Map map = new HashMap(); [EOL]     map.put("KeyOne", "SomeStringOne"); [EOL]     map.put("KeyTwo", "SomeStringTwo"); [EOL]     Map map2 = new HashMap(); [EOL]     map2.put("KeyA", "StringA"); [EOL]     map2.put("KeyB", "StringB"); [EOL]     map.put("KeyThree", map2); [EOL]     list.add(map); [EOL]     List list2 = new ArrayList(); [EOL]     list2.add("foo"); [EOL]     list2.add(map); [EOL]     list2.add(map); [EOL]     list.add(list2); [EOL]     context = JXPathContext.newContext(list); [EOL]     assertEquals("SomeStringOne", context.getValue(".[1]/KeyOne")); [EOL]     assertEquals("StringA", context.getValue(".[1]/KeyThree/KeyA")); [EOL]     assertEquals(new Integer(3), context.getValue("size(.[1]/KeyThree)")); [EOL]     assertEquals(new Double(6.0), context.getValue("count(.[1]/KeyThree/*)")); [EOL]     assertEquals(new Double(3.0), context.getValue("count(.[1]/KeyThree/KeyA)")); [EOL] }
public void testCollectionPointer() { [EOL]     List list = new ArrayList(); [EOL]     Map map = new HashMap(); [EOL]     map.put("KeyOne", "SomeStringOne"); [EOL]     map.put("KeyTwo", "SomeStringTwo"); [EOL]     Map map2 = new HashMap(); [EOL]     map2.put("KeyA", "StringA"); [EOL]     map2.put("KeyB", "StringB"); [EOL]     map.put("KeyThree", map2); [EOL]     list.add(map); [EOL]     List list2 = new ArrayList(); [EOL]     list2.add("foo"); [EOL]     list2.add(map); [EOL]     list2.add(map); [EOL]     list.add(list2); [EOL]     context = JXPathContext.newContext(list); [EOL]     assertEquals("SomeStringOne", context.getValue(".[1]/KeyOne")); [EOL]     assertEquals("StringA", context.getValue(".[1]/KeyThree/KeyA")); [EOL]     assertEquals(new Integer(3), context.getValue("size(.[1]/KeyThree)")); [EOL]     assertEquals(new Double(6.0), context.getValue("count(.[1]/KeyThree/*)")); [EOL]     assertEquals(new Double(3.0), context.getValue("count(.[1]/KeyThree/KeyA)")); [EOL] }
public void testCollectionPointer() { [EOL]     List list = new ArrayList(); [EOL]     Map map = new HashMap(); [EOL]     map.put("KeyOne", "SomeStringOne"); [EOL]     map.put("KeyTwo", "SomeStringTwo"); [EOL]     Map map2 = new HashMap(); [EOL]     map2.put("KeyA", "StringA"); [EOL]     map2.put("KeyB", "StringB"); [EOL]     map.put("KeyThree", map2); [EOL]     list.add(map); [EOL]     List list2 = new ArrayList(); [EOL]     list2.add("foo"); [EOL]     list2.add(map); [EOL]     list2.add(map); [EOL]     list.add(list2); [EOL]     context = JXPathContext.newContext(list); [EOL]     assertEquals("SomeStringOne", context.getValue(".[1]/KeyOne")); [EOL]     assertEquals("StringA", context.getValue(".[1]/KeyThree/KeyA")); [EOL]     assertEquals(new Integer(3), context.getValue("size(.[1]/KeyThree)")); [EOL]     assertEquals(new Double(6.0), context.getValue("count(.[1]/KeyThree/*)")); [EOL]     assertEquals(new Double(3.0), context.getValue("count(.[1]/KeyThree/KeyA)")); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testCollectionPointer() { [EOL]     List list = new ArrayList(); [EOL]     Map map = new HashMap(); [EOL]     map.put("KeyOne", "SomeStringOne"); [EOL]     map.put("KeyTwo", "SomeStringTwo"); [EOL]     Map map2 = new HashMap(); [EOL]     map2.put("KeyA", "StringA"); [EOL]     map2.put("KeyB", "StringB"); [EOL]     map.put("KeyThree", map2); [EOL]     list.add(map); [EOL]     List list2 = new ArrayList(); [EOL]     list2.add("foo"); [EOL]     list2.add(map); [EOL]     list2.add(map); [EOL]     list.add(list2); [EOL]     context = JXPathContext.newContext(list); [EOL]     assertEquals("SomeStringOne", context.getValue(".[1]/KeyOne")); [EOL]     assertEquals("StringA", context.getValue(".[1]/KeyThree/KeyA")); [EOL]     assertEquals(new Integer(3), context.getValue("size(.[1]/KeyThree)")); [EOL]     assertEquals(new Double(6.0), context.getValue("count(.[1]/KeyThree/*)")); [EOL]     assertEquals(new Double(3.0), context.getValue("count(.[1]/KeyThree/KeyA)")); [EOL] }
public void testCollectionPointer() { [EOL]     List list = new ArrayList(); [EOL]     Map map = new HashMap(); [EOL]     map.put("KeyOne", "SomeStringOne"); [EOL]     map.put("KeyTwo", "SomeStringTwo"); [EOL]     Map map2 = new HashMap(); [EOL]     map2.put("KeyA", "StringA"); [EOL]     map2.put("KeyB", "StringB"); [EOL]     map.put("KeyThree", map2); [EOL]     list.add(map); [EOL]     List list2 = new ArrayList(); [EOL]     list2.add("foo"); [EOL]     list2.add(map); [EOL]     list2.add(map); [EOL]     list.add(list2); [EOL]     context = JXPathContext.newContext(list); [EOL]     assertEquals("SomeStringOne", context.getValue(".[1]/KeyOne")); [EOL]     assertEquals("StringA", context.getValue(".[1]/KeyThree/KeyA")); [EOL]     assertEquals(new Integer(3), context.getValue("size(.[1]/KeyThree)")); [EOL]     assertEquals(new Double(6.0), context.getValue("count(.[1]/KeyThree/*)")); [EOL]     assertEquals(new Double(3.0), context.getValue("count(.[1]/KeyThree/KeyA)")); [EOL] }
public void testCollectionPointer() { [EOL]     List list = new ArrayList(); [EOL]     Map map = new HashMap(); [EOL]     map.put("KeyOne", "SomeStringOne"); [EOL]     map.put("KeyTwo", "SomeStringTwo"); [EOL]     Map map2 = new HashMap(); [EOL]     map2.put("KeyA", "StringA"); [EOL]     map2.put("KeyB", "StringB"); [EOL]     map.put("KeyThree", map2); [EOL]     list.add(map); [EOL]     List list2 = new ArrayList(); [EOL]     list2.add("foo"); [EOL]     list2.add(map); [EOL]     list2.add(map); [EOL]     list.add(list2); [EOL]     context = JXPathContext.newContext(list); [EOL]     assertEquals("SomeStringOne", context.getValue(".[1]/KeyOne")); [EOL]     assertEquals("StringA", context.getValue(".[1]/KeyThree/KeyA")); [EOL]     assertEquals(new Integer(3), context.getValue("size(.[1]/KeyThree)")); [EOL]     assertEquals(new Double(6.0), context.getValue("count(.[1]/KeyThree/*)")); [EOL]     assertEquals(new Double(3.0), context.getValue("count(.[1]/KeyThree/KeyA)")); [EOL] }
public void testCollectionPointer() { [EOL]     List list = new ArrayList(); [EOL]     Map map = new HashMap(); [EOL]     map.put("KeyOne", "SomeStringOne"); [EOL]     map.put("KeyTwo", "SomeStringTwo"); [EOL]     Map map2 = new HashMap(); [EOL]     map2.put("KeyA", "StringA"); [EOL]     map2.put("KeyB", "StringB"); [EOL]     map.put("KeyThree", map2); [EOL]     list.add(map); [EOL]     List list2 = new ArrayList(); [EOL]     list2.add("foo"); [EOL]     list2.add(map); [EOL]     list2.add(map); [EOL]     list.add(list2); [EOL]     context = JXPathContext.newContext(list); [EOL]     assertEquals("SomeStringOne", context.getValue(".[1]/KeyOne")); [EOL]     assertEquals("StringA", context.getValue(".[1]/KeyThree/KeyA")); [EOL]     assertEquals(new Integer(3), context.getValue("size(.[1]/KeyThree)")); [EOL]     assertEquals(new Double(6.0), context.getValue("count(.[1]/KeyThree/*)")); [EOL]     assertEquals(new Double(3.0), context.getValue("count(.[1]/KeyThree/KeyA)")); [EOL] }
public void testCollectionPointer() { [EOL]     List list = new ArrayList(); [EOL]     Map map = new HashMap(); [EOL]     map.put("KeyOne", "SomeStringOne"); [EOL]     map.put("KeyTwo", "SomeStringTwo"); [EOL]     Map map2 = new HashMap(); [EOL]     map2.put("KeyA", "StringA"); [EOL]     map2.put("KeyB", "StringB"); [EOL]     map.put("KeyThree", map2); [EOL]     list.add(map); [EOL]     List list2 = new ArrayList(); [EOL]     list2.add("foo"); [EOL]     list2.add(map); [EOL]     list2.add(map); [EOL]     list.add(list2); [EOL]     context = JXPathContext.newContext(list); [EOL]     assertEquals("SomeStringOne", context.getValue(".[1]/KeyOne")); [EOL]     assertEquals("StringA", context.getValue(".[1]/KeyThree/KeyA")); [EOL]     assertEquals(new Integer(3), context.getValue("size(.[1]/KeyThree)")); [EOL]     assertEquals(new Double(6.0), context.getValue("count(.[1]/KeyThree/*)")); [EOL]     assertEquals(new Double(3.0), context.getValue("count(.[1]/KeyThree/KeyA)")); [EOL] }
public void testCollectionPointer() { [EOL]     List list = new ArrayList(); [EOL]     Map map = new HashMap(); [EOL]     map.put("KeyOne", "SomeStringOne"); [EOL]     map.put("KeyTwo", "SomeStringTwo"); [EOL]     Map map2 = new HashMap(); [EOL]     map2.put("KeyA", "StringA"); [EOL]     map2.put("KeyB", "StringB"); [EOL]     map.put("KeyThree", map2); [EOL]     list.add(map); [EOL]     List list2 = new ArrayList(); [EOL]     list2.add("foo"); [EOL]     list2.add(map); [EOL]     list2.add(map); [EOL]     list.add(list2); [EOL]     context = JXPathContext.newContext(list); [EOL]     assertEquals("SomeStringOne", context.getValue(".[1]/KeyOne")); [EOL]     assertEquals("StringA", context.getValue(".[1]/KeyThree/KeyA")); [EOL]     assertEquals(new Integer(3), context.getValue("size(.[1]/KeyThree)")); [EOL]     assertEquals(new Double(6.0), context.getValue("count(.[1]/KeyThree/*)")); [EOL]     assertEquals(new Double(3.0), context.getValue("count(.[1]/KeyThree/KeyA)")); [EOL] }
public void testCollectionPointer() { [EOL]     List list = new ArrayList(); [EOL]     Map map = new HashMap(); [EOL]     map.put("KeyOne", "SomeStringOne"); [EOL]     map.put("KeyTwo", "SomeStringTwo"); [EOL]     Map map2 = new HashMap(); [EOL]     map2.put("KeyA", "StringA"); [EOL]     map2.put("KeyB", "StringB"); [EOL]     map.put("KeyThree", map2); [EOL]     list.add(map); [EOL]     List list2 = new ArrayList(); [EOL]     list2.add("foo"); [EOL]     list2.add(map); [EOL]     list2.add(map); [EOL]     list.add(list2); [EOL]     context = JXPathContext.newContext(list); [EOL]     assertEquals("SomeStringOne", context.getValue(".[1]/KeyOne")); [EOL]     assertEquals("StringA", context.getValue(".[1]/KeyThree/KeyA")); [EOL]     assertEquals(new Integer(3), context.getValue("size(.[1]/KeyThree)")); [EOL]     assertEquals(new Double(6.0), context.getValue("count(.[1]/KeyThree/*)")); [EOL]     assertEquals(new Double(3.0), context.getValue("count(.[1]/KeyThree/KeyA)")); [EOL] }
public void testCollectionPointer() { [EOL]     List list = new ArrayList(); [EOL]     Map map = new HashMap(); [EOL]     map.put("KeyOne", "SomeStringOne"); [EOL]     map.put("KeyTwo", "SomeStringTwo"); [EOL]     Map map2 = new HashMap(); [EOL]     map2.put("KeyA", "StringA"); [EOL]     map2.put("KeyB", "StringB"); [EOL]     map.put("KeyThree", map2); [EOL]     list.add(map); [EOL]     List list2 = new ArrayList(); [EOL]     list2.add("foo"); [EOL]     list2.add(map); [EOL]     list2.add(map); [EOL]     list.add(list2); [EOL]     context = JXPathContext.newContext(list); [EOL]     assertEquals("SomeStringOne", context.getValue(".[1]/KeyOne")); [EOL]     assertEquals("StringA", context.getValue(".[1]/KeyThree/KeyA")); [EOL]     assertEquals(new Integer(3), context.getValue("size(.[1]/KeyThree)")); [EOL]     assertEquals(new Double(6.0), context.getValue("count(.[1]/KeyThree/*)")); [EOL]     assertEquals(new Double(3.0), context.getValue("count(.[1]/KeyThree/KeyA)")); [EOL] }
public void testCollectionPointer() { [EOL]     List list = new ArrayList(); [EOL]     Map map = new HashMap(); [EOL]     map.put("KeyOne", "SomeStringOne"); [EOL]     map.put("KeyTwo", "SomeStringTwo"); [EOL]     Map map2 = new HashMap(); [EOL]     map2.put("KeyA", "StringA"); [EOL]     map2.put("KeyB", "StringB"); [EOL]     map.put("KeyThree", map2); [EOL]     list.add(map); [EOL]     List list2 = new ArrayList(); [EOL]     list2.add("foo"); [EOL]     list2.add(map); [EOL]     list2.add(map); [EOL]     list.add(list2); [EOL]     context = JXPathContext.newContext(list); [EOL]     assertEquals("SomeStringOne", context.getValue(".[1]/KeyOne")); [EOL]     assertEquals("StringA", context.getValue(".[1]/KeyThree/KeyA")); [EOL]     assertEquals(new Integer(3), context.getValue("size(.[1]/KeyThree)")); [EOL]     assertEquals(new Double(6.0), context.getValue("count(.[1]/KeyThree/*)")); [EOL]     assertEquals(new Double(3.0), context.getValue("count(.[1]/KeyThree/KeyA)")); [EOL] }
public void testCollectionPointer() { [EOL]     List list = new ArrayList(); [EOL]     Map map = new HashMap(); [EOL]     map.put("KeyOne", "SomeStringOne"); [EOL]     map.put("KeyTwo", "SomeStringTwo"); [EOL]     Map map2 = new HashMap(); [EOL]     map2.put("KeyA", "StringA"); [EOL]     map2.put("KeyB", "StringB"); [EOL]     map.put("KeyThree", map2); [EOL]     list.add(map); [EOL]     List list2 = new ArrayList(); [EOL]     list2.add("foo"); [EOL]     list2.add(map); [EOL]     list2.add(map); [EOL]     list.add(list2); [EOL]     context = JXPathContext.newContext(list); [EOL]     assertEquals("SomeStringOne", context.getValue(".[1]/KeyOne")); [EOL]     assertEquals("StringA", context.getValue(".[1]/KeyThree/KeyA")); [EOL]     assertEquals(new Integer(3), context.getValue("size(.[1]/KeyThree)")); [EOL]     assertEquals(new Double(6.0), context.getValue("count(.[1]/KeyThree/*)")); [EOL]     assertEquals(new Double(3.0), context.getValue("count(.[1]/KeyThree/KeyA)")); [EOL] }
public void testCollectionPointer() { [EOL]     List list = new ArrayList(); [EOL]     Map map = new HashMap(); [EOL]     map.put("KeyOne", "SomeStringOne"); [EOL]     map.put("KeyTwo", "SomeStringTwo"); [EOL]     Map map2 = new HashMap(); [EOL]     map2.put("KeyA", "StringA"); [EOL]     map2.put("KeyB", "StringB"); [EOL]     map.put("KeyThree", map2); [EOL]     list.add(map); [EOL]     List list2 = new ArrayList(); [EOL]     list2.add("foo"); [EOL]     list2.add(map); [EOL]     list2.add(map); [EOL]     list.add(list2); [EOL]     context = JXPathContext.newContext(list); [EOL]     assertEquals("SomeStringOne", context.getValue(".[1]/KeyOne")); [EOL]     assertEquals("StringA", context.getValue(".[1]/KeyThree/KeyA")); [EOL]     assertEquals(new Integer(3), context.getValue("size(.[1]/KeyThree)")); [EOL]     assertEquals(new Double(6.0), context.getValue("count(.[1]/KeyThree/*)")); [EOL]     assertEquals(new Double(3.0), context.getValue("count(.[1]/KeyThree/KeyA)")); [EOL] }
public void testCreatePathAndSetValueWithMatrix() { [EOL]     context.setValue("matrix", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/matrix[1]/.[1]", new Integer(4), "/matrix[1]/.[1]"); [EOL] }
public void testCreatePathAndSetValueWithMatrix() { [EOL]     context.setValue("matrix", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/matrix[1]/.[1]", new Integer(4), "/matrix[1]/.[1]"); [EOL] }
public void testCollectionPointer() { [EOL]     List list = new ArrayList(); [EOL]     Map map = new HashMap(); [EOL]     map.put("KeyOne", "SomeStringOne"); [EOL]     map.put("KeyTwo", "SomeStringTwo"); [EOL]     Map map2 = new HashMap(); [EOL]     map2.put("KeyA", "StringA"); [EOL]     map2.put("KeyB", "StringB"); [EOL]     map.put("KeyThree", map2); [EOL]     list.add(map); [EOL]     List list2 = new ArrayList(); [EOL]     list2.add("foo"); [EOL]     list2.add(map); [EOL]     list2.add(map); [EOL]     list.add(list2); [EOL]     context = JXPathContext.newContext(list); [EOL]     assertEquals("SomeStringOne", context.getValue(".[1]/KeyOne")); [EOL]     assertEquals("StringA", context.getValue(".[1]/KeyThree/KeyA")); [EOL]     assertEquals(new Integer(3), context.getValue("size(.[1]/KeyThree)")); [EOL]     assertEquals(new Double(6.0), context.getValue("count(.[1]/KeyThree/*)")); [EOL]     assertEquals(new Double(3.0), context.getValue("count(.[1]/KeyThree/KeyA)")); [EOL] }
public void testCollectionPointer() { [EOL]     List list = new ArrayList(); [EOL]     Map map = new HashMap(); [EOL]     map.put("KeyOne", "SomeStringOne"); [EOL]     map.put("KeyTwo", "SomeStringTwo"); [EOL]     Map map2 = new HashMap(); [EOL]     map2.put("KeyA", "StringA"); [EOL]     map2.put("KeyB", "StringB"); [EOL]     map.put("KeyThree", map2); [EOL]     list.add(map); [EOL]     List list2 = new ArrayList(); [EOL]     list2.add("foo"); [EOL]     list2.add(map); [EOL]     list2.add(map); [EOL]     list.add(list2); [EOL]     context = JXPathContext.newContext(list); [EOL]     assertEquals("SomeStringOne", context.getValue(".[1]/KeyOne")); [EOL]     assertEquals("StringA", context.getValue(".[1]/KeyThree/KeyA")); [EOL]     assertEquals(new Integer(3), context.getValue("size(.[1]/KeyThree)")); [EOL]     assertEquals(new Double(6.0), context.getValue("count(.[1]/KeyThree/*)")); [EOL]     assertEquals(new Double(3.0), context.getValue("count(.[1]/KeyThree/KeyA)")); [EOL] }
public void testCollectionPointer() { [EOL]     List list = new ArrayList(); [EOL]     Map map = new HashMap(); [EOL]     map.put("KeyOne", "SomeStringOne"); [EOL]     map.put("KeyTwo", "SomeStringTwo"); [EOL]     Map map2 = new HashMap(); [EOL]     map2.put("KeyA", "StringA"); [EOL]     map2.put("KeyB", "StringB"); [EOL]     map.put("KeyThree", map2); [EOL]     list.add(map); [EOL]     List list2 = new ArrayList(); [EOL]     list2.add("foo"); [EOL]     list2.add(map); [EOL]     list2.add(map); [EOL]     list.add(list2); [EOL]     context = JXPathContext.newContext(list); [EOL]     assertEquals("SomeStringOne", context.getValue(".[1]/KeyOne")); [EOL]     assertEquals("StringA", context.getValue(".[1]/KeyThree/KeyA")); [EOL]     assertEquals(new Integer(3), context.getValue("size(.[1]/KeyThree)")); [EOL]     assertEquals(new Double(6.0), context.getValue("count(.[1]/KeyThree/*)")); [EOL]     assertEquals(new Double(3.0), context.getValue("count(.[1]/KeyThree/KeyA)")); [EOL] }
public void testCollectionPointer() { [EOL]     List list = new ArrayList(); [EOL]     Map map = new HashMap(); [EOL]     map.put("KeyOne", "SomeStringOne"); [EOL]     map.put("KeyTwo", "SomeStringTwo"); [EOL]     Map map2 = new HashMap(); [EOL]     map2.put("KeyA", "StringA"); [EOL]     map2.put("KeyB", "StringB"); [EOL]     map.put("KeyThree", map2); [EOL]     list.add(map); [EOL]     List list2 = new ArrayList(); [EOL]     list2.add("foo"); [EOL]     list2.add(map); [EOL]     list2.add(map); [EOL]     list.add(list2); [EOL]     context = JXPathContext.newContext(list); [EOL]     assertEquals("SomeStringOne", context.getValue(".[1]/KeyOne")); [EOL]     assertEquals("StringA", context.getValue(".[1]/KeyThree/KeyA")); [EOL]     assertEquals(new Integer(3), context.getValue("size(.[1]/KeyThree)")); [EOL]     assertEquals(new Double(6.0), context.getValue("count(.[1]/KeyThree/*)")); [EOL]     assertEquals(new Double(3.0), context.getValue("count(.[1]/KeyThree/KeyA)")); [EOL] }
public void testCreatePathAndSetValueWithMatrix() { [EOL]     context.setValue("matrix", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/matrix[1]/.[1]", new Integer(4), "/matrix[1]/.[1]"); [EOL] }
public void testCreatePathAndSetValueWithMatrix() { [EOL]     context.setValue("matrix", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/matrix[1]/.[1]", new Integer(4), "/matrix[1]/.[1]"); [EOL] }
public void testCreatePathAndSetValueWithMatrix() { [EOL]     context.setValue("matrix", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/matrix[1]/.[1]", new Integer(4), "/matrix[1]/.[1]"); [EOL] }
public void testCreatePathAndSetValueWithMatrix() { [EOL]     context.setValue("matrix", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/matrix[1]/.[1]", new Integer(4), "/matrix[1]/.[1]"); [EOL] }
public void testCreatePathAndSetValueWithMatrix() { [EOL]     context.setValue("matrix", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/matrix[1]/.[1]", new Integer(4), "/matrix[1]/.[1]"); [EOL] }
public void testCreatePathAndSetValueWithMatrix() { [EOL]     context.setValue("matrix", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/matrix[1]/.[1]", new Integer(4), "/matrix[1]/.[1]"); [EOL] }
public void testCreatePathAndSetValueWithMatrix() { [EOL]     context.setValue("matrix", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/matrix[1]/.[1]", new Integer(4), "/matrix[1]/.[1]"); [EOL] }
public void testCreatePathAndSetValueWithMatrix() { [EOL]     context.setValue("matrix", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/matrix[1]/.[1]", new Integer(4), "/matrix[1]/.[1]"); [EOL] }
public void testCollectionPointer() { [EOL]     List list = new ArrayList(); [EOL]     Map map = new HashMap(); [EOL]     map.put("KeyOne", "SomeStringOne"); [EOL]     map.put("KeyTwo", "SomeStringTwo"); [EOL]     Map map2 = new HashMap(); [EOL]     map2.put("KeyA", "StringA"); [EOL]     map2.put("KeyB", "StringB"); [EOL]     map.put("KeyThree", map2); [EOL]     list.add(map); [EOL]     List list2 = new ArrayList(); [EOL]     list2.add("foo"); [EOL]     list2.add(map); [EOL]     list2.add(map); [EOL]     list.add(list2); [EOL]     context = JXPathContext.newContext(list); [EOL]     assertEquals("SomeStringOne", context.getValue(".[1]/KeyOne")); [EOL]     assertEquals("StringA", context.getValue(".[1]/KeyThree/KeyA")); [EOL]     assertEquals(new Integer(3), context.getValue("size(.[1]/KeyThree)")); [EOL]     assertEquals(new Double(6.0), context.getValue("count(.[1]/KeyThree/*)")); [EOL]     assertEquals(new Double(3.0), context.getValue("count(.[1]/KeyThree/KeyA)")); [EOL] }
public void testCollectionPointer() { [EOL]     List list = new ArrayList(); [EOL]     Map map = new HashMap(); [EOL]     map.put("KeyOne", "SomeStringOne"); [EOL]     map.put("KeyTwo", "SomeStringTwo"); [EOL]     Map map2 = new HashMap(); [EOL]     map2.put("KeyA", "StringA"); [EOL]     map2.put("KeyB", "StringB"); [EOL]     map.put("KeyThree", map2); [EOL]     list.add(map); [EOL]     List list2 = new ArrayList(); [EOL]     list2.add("foo"); [EOL]     list2.add(map); [EOL]     list2.add(map); [EOL]     list.add(list2); [EOL]     context = JXPathContext.newContext(list); [EOL]     assertEquals("SomeStringOne", context.getValue(".[1]/KeyOne")); [EOL]     assertEquals("StringA", context.getValue(".[1]/KeyThree/KeyA")); [EOL]     assertEquals(new Integer(3), context.getValue("size(.[1]/KeyThree)")); [EOL]     assertEquals(new Double(6.0), context.getValue("count(.[1]/KeyThree/*)")); [EOL]     assertEquals(new Double(3.0), context.getValue("count(.[1]/KeyThree/KeyA)")); [EOL] }
public void testCollectionPointer() { [EOL]     List list = new ArrayList(); [EOL]     Map map = new HashMap(); [EOL]     map.put("KeyOne", "SomeStringOne"); [EOL]     map.put("KeyTwo", "SomeStringTwo"); [EOL]     Map map2 = new HashMap(); [EOL]     map2.put("KeyA", "StringA"); [EOL]     map2.put("KeyB", "StringB"); [EOL]     map.put("KeyThree", map2); [EOL]     list.add(map); [EOL]     List list2 = new ArrayList(); [EOL]     list2.add("foo"); [EOL]     list2.add(map); [EOL]     list2.add(map); [EOL]     list.add(list2); [EOL]     context = JXPathContext.newContext(list); [EOL]     assertEquals("SomeStringOne", context.getValue(".[1]/KeyOne")); [EOL]     assertEquals("StringA", context.getValue(".[1]/KeyThree/KeyA")); [EOL]     assertEquals(new Integer(3), context.getValue("size(.[1]/KeyThree)")); [EOL]     assertEquals(new Double(6.0), context.getValue("count(.[1]/KeyThree/*)")); [EOL]     assertEquals(new Double(3.0), context.getValue("count(.[1]/KeyThree/KeyA)")); [EOL] }
public void testCollectionPointer() { [EOL]     List list = new ArrayList(); [EOL]     Map map = new HashMap(); [EOL]     map.put("KeyOne", "SomeStringOne"); [EOL]     map.put("KeyTwo", "SomeStringTwo"); [EOL]     Map map2 = new HashMap(); [EOL]     map2.put("KeyA", "StringA"); [EOL]     map2.put("KeyB", "StringB"); [EOL]     map.put("KeyThree", map2); [EOL]     list.add(map); [EOL]     List list2 = new ArrayList(); [EOL]     list2.add("foo"); [EOL]     list2.add(map); [EOL]     list2.add(map); [EOL]     list.add(list2); [EOL]     context = JXPathContext.newContext(list); [EOL]     assertEquals("SomeStringOne", context.getValue(".[1]/KeyOne")); [EOL]     assertEquals("StringA", context.getValue(".[1]/KeyThree/KeyA")); [EOL]     assertEquals(new Integer(3), context.getValue("size(.[1]/KeyThree)")); [EOL]     assertEquals(new Double(6.0), context.getValue("count(.[1]/KeyThree/*)")); [EOL]     assertEquals(new Double(3.0), context.getValue("count(.[1]/KeyThree/KeyA)")); [EOL] }
public void testCollectionPointer() { [EOL]     List list = new ArrayList(); [EOL]     Map map = new HashMap(); [EOL]     map.put("KeyOne", "SomeStringOne"); [EOL]     map.put("KeyTwo", "SomeStringTwo"); [EOL]     Map map2 = new HashMap(); [EOL]     map2.put("KeyA", "StringA"); [EOL]     map2.put("KeyB", "StringB"); [EOL]     map.put("KeyThree", map2); [EOL]     list.add(map); [EOL]     List list2 = new ArrayList(); [EOL]     list2.add("foo"); [EOL]     list2.add(map); [EOL]     list2.add(map); [EOL]     list.add(list2); [EOL]     context = JXPathContext.newContext(list); [EOL]     assertEquals("SomeStringOne", context.getValue(".[1]/KeyOne")); [EOL]     assertEquals("StringA", context.getValue(".[1]/KeyThree/KeyA")); [EOL]     assertEquals(new Integer(3), context.getValue("size(.[1]/KeyThree)")); [EOL]     assertEquals(new Double(6.0), context.getValue("count(.[1]/KeyThree/*)")); [EOL]     assertEquals(new Double(3.0), context.getValue("count(.[1]/KeyThree/KeyA)")); [EOL] }
public void testCollectionPointer() { [EOL]     List list = new ArrayList(); [EOL]     Map map = new HashMap(); [EOL]     map.put("KeyOne", "SomeStringOne"); [EOL]     map.put("KeyTwo", "SomeStringTwo"); [EOL]     Map map2 = new HashMap(); [EOL]     map2.put("KeyA", "StringA"); [EOL]     map2.put("KeyB", "StringB"); [EOL]     map.put("KeyThree", map2); [EOL]     list.add(map); [EOL]     List list2 = new ArrayList(); [EOL]     list2.add("foo"); [EOL]     list2.add(map); [EOL]     list2.add(map); [EOL]     list.add(list2); [EOL]     context = JXPathContext.newContext(list); [EOL]     assertEquals("SomeStringOne", context.getValue(".[1]/KeyOne")); [EOL]     assertEquals("StringA", context.getValue(".[1]/KeyThree/KeyA")); [EOL]     assertEquals(new Integer(3), context.getValue("size(.[1]/KeyThree)")); [EOL]     assertEquals(new Double(6.0), context.getValue("count(.[1]/KeyThree/*)")); [EOL]     assertEquals(new Double(3.0), context.getValue("count(.[1]/KeyThree/KeyA)")); [EOL] }
public void testCollectionPointer() { [EOL]     List list = new ArrayList(); [EOL]     Map map = new HashMap(); [EOL]     map.put("KeyOne", "SomeStringOne"); [EOL]     map.put("KeyTwo", "SomeStringTwo"); [EOL]     Map map2 = new HashMap(); [EOL]     map2.put("KeyA", "StringA"); [EOL]     map2.put("KeyB", "StringB"); [EOL]     map.put("KeyThree", map2); [EOL]     list.add(map); [EOL]     List list2 = new ArrayList(); [EOL]     list2.add("foo"); [EOL]     list2.add(map); [EOL]     list2.add(map); [EOL]     list.add(list2); [EOL]     context = JXPathContext.newContext(list); [EOL]     assertEquals("SomeStringOne", context.getValue(".[1]/KeyOne")); [EOL]     assertEquals("StringA", context.getValue(".[1]/KeyThree/KeyA")); [EOL]     assertEquals(new Integer(3), context.getValue("size(.[1]/KeyThree)")); [EOL]     assertEquals(new Double(6.0), context.getValue("count(.[1]/KeyThree/*)")); [EOL]     assertEquals(new Double(3.0), context.getValue("count(.[1]/KeyThree/KeyA)")); [EOL] }
public void testCollectionPointer() { [EOL]     List list = new ArrayList(); [EOL]     Map map = new HashMap(); [EOL]     map.put("KeyOne", "SomeStringOne"); [EOL]     map.put("KeyTwo", "SomeStringTwo"); [EOL]     Map map2 = new HashMap(); [EOL]     map2.put("KeyA", "StringA"); [EOL]     map2.put("KeyB", "StringB"); [EOL]     map.put("KeyThree", map2); [EOL]     list.add(map); [EOL]     List list2 = new ArrayList(); [EOL]     list2.add("foo"); [EOL]     list2.add(map); [EOL]     list2.add(map); [EOL]     list.add(list2); [EOL]     context = JXPathContext.newContext(list); [EOL]     assertEquals("SomeStringOne", context.getValue(".[1]/KeyOne")); [EOL]     assertEquals("StringA", context.getValue(".[1]/KeyThree/KeyA")); [EOL]     assertEquals(new Integer(3), context.getValue("size(.[1]/KeyThree)")); [EOL]     assertEquals(new Double(6.0), context.getValue("count(.[1]/KeyThree/*)")); [EOL]     assertEquals(new Double(3.0), context.getValue("count(.[1]/KeyThree/KeyA)")); [EOL] }
public void testCollectionPointer() { [EOL]     List list = new ArrayList(); [EOL]     Map map = new HashMap(); [EOL]     map.put("KeyOne", "SomeStringOne"); [EOL]     map.put("KeyTwo", "SomeStringTwo"); [EOL]     Map map2 = new HashMap(); [EOL]     map2.put("KeyA", "StringA"); [EOL]     map2.put("KeyB", "StringB"); [EOL]     map.put("KeyThree", map2); [EOL]     list.add(map); [EOL]     List list2 = new ArrayList(); [EOL]     list2.add("foo"); [EOL]     list2.add(map); [EOL]     list2.add(map); [EOL]     list.add(list2); [EOL]     context = JXPathContext.newContext(list); [EOL]     assertEquals("SomeStringOne", context.getValue(".[1]/KeyOne")); [EOL]     assertEquals("StringA", context.getValue(".[1]/KeyThree/KeyA")); [EOL]     assertEquals(new Integer(3), context.getValue("size(.[1]/KeyThree)")); [EOL]     assertEquals(new Double(6.0), context.getValue("count(.[1]/KeyThree/*)")); [EOL]     assertEquals(new Double(3.0), context.getValue("count(.[1]/KeyThree/KeyA)")); [EOL] }
public void testCollectionPointer() { [EOL]     List list = new ArrayList(); [EOL]     Map map = new HashMap(); [EOL]     map.put("KeyOne", "SomeStringOne"); [EOL]     map.put("KeyTwo", "SomeStringTwo"); [EOL]     Map map2 = new HashMap(); [EOL]     map2.put("KeyA", "StringA"); [EOL]     map2.put("KeyB", "StringB"); [EOL]     map.put("KeyThree", map2); [EOL]     list.add(map); [EOL]     List list2 = new ArrayList(); [EOL]     list2.add("foo"); [EOL]     list2.add(map); [EOL]     list2.add(map); [EOL]     list.add(list2); [EOL]     context = JXPathContext.newContext(list); [EOL]     assertEquals("SomeStringOne", context.getValue(".[1]/KeyOne")); [EOL]     assertEquals("StringA", context.getValue(".[1]/KeyThree/KeyA")); [EOL]     assertEquals(new Integer(3), context.getValue("size(.[1]/KeyThree)")); [EOL]     assertEquals(new Double(6.0), context.getValue("count(.[1]/KeyThree/*)")); [EOL]     assertEquals(new Double(3.0), context.getValue("count(.[1]/KeyThree/KeyA)")); [EOL] }
public void testCollectionPointer() { [EOL]     List list = new ArrayList(); [EOL]     Map map = new HashMap(); [EOL]     map.put("KeyOne", "SomeStringOne"); [EOL]     map.put("KeyTwo", "SomeStringTwo"); [EOL]     Map map2 = new HashMap(); [EOL]     map2.put("KeyA", "StringA"); [EOL]     map2.put("KeyB", "StringB"); [EOL]     map.put("KeyThree", map2); [EOL]     list.add(map); [EOL]     List list2 = new ArrayList(); [EOL]     list2.add("foo"); [EOL]     list2.add(map); [EOL]     list2.add(map); [EOL]     list.add(list2); [EOL]     context = JXPathContext.newContext(list); [EOL]     assertEquals("SomeStringOne", context.getValue(".[1]/KeyOne")); [EOL]     assertEquals("StringA", context.getValue(".[1]/KeyThree/KeyA")); [EOL]     assertEquals(new Integer(3), context.getValue("size(.[1]/KeyThree)")); [EOL]     assertEquals(new Double(6.0), context.getValue("count(.[1]/KeyThree/*)")); [EOL]     assertEquals(new Double(3.0), context.getValue("count(.[1]/KeyThree/KeyA)")); [EOL] }
public void testCoreOperationSum() { [EOL]     assertXPathExpression("3 + 1 + 4", CoreOperationAdd.class); [EOL]     assertXPathExpression("(3 + 1) + 4", CoreOperationAdd.class, "3 + 1 + 4"); [EOL]     assertXPathExpression("3 + (1 + 4)", CoreOperationAdd.class, "3 + 1 + 4"); [EOL]     assertXPathExpression("3 + -1", CoreOperationAdd.class, "3 + -1"); [EOL]     assertXPathExpression("2*-3 + -1", CoreOperationAdd.class, "2 * -3 + -1"); [EOL] }
public void testNull() { [EOL]     assertXPathPointerLenient(context, "$null", "$null"); [EOL]     assertXPathPointerLenient(context, "$null[3]", "$null[3]"); [EOL]     assertXPathPointerLenient(context, "$testnull/nothing", "$testnull/nothing"); [EOL]     assertXPathPointerLenient(context, "$testnull/nothing[2]", "$testnull/nothing[2]"); [EOL]     assertXPathPointerLenient(context, "beans[8]/int", "/beans[8]/int"); [EOL]     assertXPathValueIterator(context, "$testnull/nothing[1]", Collections.EMPTY_LIST); [EOL]     JXPathContext ctx = JXPathContext.newContext(new TestNull()); [EOL]     assertXPathValue(ctx, "nothing", null); [EOL]     assertXPathValue(ctx, "child/nothing", null); [EOL]     assertXPathValue(ctx, "array[2]", null); [EOL]     assertXPathValueLenient(ctx, "nothing/something", null); [EOL]     assertXPathValueLenient(ctx, "array[2]/something", null); [EOL] }
public void testNull() { [EOL]     assertXPathPointerLenient(context, "$null", "$null"); [EOL]     assertXPathPointerLenient(context, "$null[3]", "$null[3]"); [EOL]     assertXPathPointerLenient(context, "$testnull/nothing", "$testnull/nothing"); [EOL]     assertXPathPointerLenient(context, "$testnull/nothing[2]", "$testnull/nothing[2]"); [EOL]     assertXPathPointerLenient(context, "beans[8]/int", "/beans[8]/int"); [EOL]     assertXPathValueIterator(context, "$testnull/nothing[1]", Collections.EMPTY_LIST); [EOL]     JXPathContext ctx = JXPathContext.newContext(new TestNull()); [EOL]     assertXPathValue(ctx, "nothing", null); [EOL]     assertXPathValue(ctx, "child/nothing", null); [EOL]     assertXPathValue(ctx, "array[2]", null); [EOL]     assertXPathValueLenient(ctx, "nothing/something", null); [EOL]     assertXPathValueLenient(ctx, "array[2]/something", null); [EOL] }
public void testNull() { [EOL]     assertXPathPointerLenient(context, "$null", "$null"); [EOL]     assertXPathPointerLenient(context, "$null[3]", "$null[3]"); [EOL]     assertXPathPointerLenient(context, "$testnull/nothing", "$testnull/nothing"); [EOL]     assertXPathPointerLenient(context, "$testnull/nothing[2]", "$testnull/nothing[2]"); [EOL]     assertXPathPointerLenient(context, "beans[8]/int", "/beans[8]/int"); [EOL]     assertXPathValueIterator(context, "$testnull/nothing[1]", Collections.EMPTY_LIST); [EOL]     JXPathContext ctx = JXPathContext.newContext(new TestNull()); [EOL]     assertXPathValue(ctx, "nothing", null); [EOL]     assertXPathValue(ctx, "child/nothing", null); [EOL]     assertXPathValue(ctx, "array[2]", null); [EOL]     assertXPathValueLenient(ctx, "nothing/something", null); [EOL]     assertXPathValueLenient(ctx, "array[2]/something", null); [EOL] }
public void testNull() { [EOL]     assertXPathPointerLenient(context, "$null", "$null"); [EOL]     assertXPathPointerLenient(context, "$null[3]", "$null[3]"); [EOL]     assertXPathPointerLenient(context, "$testnull/nothing", "$testnull/nothing"); [EOL]     assertXPathPointerLenient(context, "$testnull/nothing[2]", "$testnull/nothing[2]"); [EOL]     assertXPathPointerLenient(context, "beans[8]/int", "/beans[8]/int"); [EOL]     assertXPathValueIterator(context, "$testnull/nothing[1]", Collections.EMPTY_LIST); [EOL]     JXPathContext ctx = JXPathContext.newContext(new TestNull()); [EOL]     assertXPathValue(ctx, "nothing", null); [EOL]     assertXPathValue(ctx, "child/nothing", null); [EOL]     assertXPathValue(ctx, "array[2]", null); [EOL]     assertXPathValueLenient(ctx, "nothing/something", null); [EOL]     assertXPathValueLenient(ctx, "array[2]/something", null); [EOL] }
public void testNull() { [EOL]     assertXPathPointerLenient(context, "$null", "$null"); [EOL]     assertXPathPointerLenient(context, "$null[3]", "$null[3]"); [EOL]     assertXPathPointerLenient(context, "$testnull/nothing", "$testnull/nothing"); [EOL]     assertXPathPointerLenient(context, "$testnull/nothing[2]", "$testnull/nothing[2]"); [EOL]     assertXPathPointerLenient(context, "beans[8]/int", "/beans[8]/int"); [EOL]     assertXPathValueIterator(context, "$testnull/nothing[1]", Collections.EMPTY_LIST); [EOL]     JXPathContext ctx = JXPathContext.newContext(new TestNull()); [EOL]     assertXPathValue(ctx, "nothing", null); [EOL]     assertXPathValue(ctx, "child/nothing", null); [EOL]     assertXPathValue(ctx, "array[2]", null); [EOL]     assertXPathValueLenient(ctx, "nothing/something", null); [EOL]     assertXPathValueLenient(ctx, "array[2]/something", null); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testLang() { [EOL]     assertXPathValue(context, "//product/prix/@xml:lang", "fr"); [EOL]     assertXPathValue(context, "//product/prix[lang('fr')]", "934.99"); [EOL]     assertXPathValue(context, "//product/price:sale[lang('en')]/saleEnds", "never"); [EOL] }
public void testDefaultNamespaceIgnored() { [EOL]     context.registerDefaultNamespace("temp"); [EOL]     assertXPathValueAndPointer(context, "//pos//number", "110", "/node()[1]/pos[2]/register[1]/number[1]"); [EOL]     context.registerDefaultNamespace(null); [EOL] }
public void testDefaultNamespaceIgnored() { [EOL]     context.registerDefaultNamespace("temp"); [EOL]     assertXPathValueAndPointer(context, "//pos//number", "110", "/node()[1]/pos[2]/register[1]/number[1]"); [EOL]     context.registerDefaultNamespace(null); [EOL] }
public void testDefaultNamespaceIgnored() { [EOL]     context.registerDefaultNamespace("temp"); [EOL]     assertXPathValueAndPointer(context, "//pos//number", "110", "/node()[1]/pos[2]/register[1]/number[1]"); [EOL]     context.registerDefaultNamespace(null); [EOL] }
public void testDefaultNamespaceIgnored() { [EOL]     context.registerDefaultNamespace("temp"); [EOL]     assertXPathValueAndPointer(context, "//pos//number", "110", "/node()[1]/pos[2]/register[1]/number[1]"); [EOL]     context.registerDefaultNamespace(null); [EOL] }
public void testNodeSetReturn() { [EOL]     assertXPathValueIterator(context, "test:nodeSet()/name", list("Name 1", "Name 2")); [EOL]     assertXPathPointerIterator(context, "test:nodeSet()/name", list("/beans[1]/name", "/beans[2]/name")); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/name", "Name 1", "/beans[1]/name"); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/@name", "Name 1", "/beans[1]/@name"); [EOL] }
public void testNodeSetReturn() { [EOL]     assertXPathValueIterator(context, "test:nodeSet()/name", list("Name 1", "Name 2")); [EOL]     assertXPathPointerIterator(context, "test:nodeSet()/name", list("/beans[1]/name", "/beans[2]/name")); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/name", "Name 1", "/beans[1]/name"); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/@name", "Name 1", "/beans[1]/@name"); [EOL] }
public void testNodeSetReturn() { [EOL]     assertXPathValueIterator(context, "test:nodeSet()/name", list("Name 1", "Name 2")); [EOL]     assertXPathPointerIterator(context, "test:nodeSet()/name", list("/beans[1]/name", "/beans[2]/name")); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/name", "Name 1", "/beans[1]/name"); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/@name", "Name 1", "/beans[1]/@name"); [EOL] }
public void testNodeSetReturn() { [EOL]     assertXPathValueIterator(context, "test:nodeSet()/name", list("Name 1", "Name 2")); [EOL]     assertXPathPointerIterator(context, "test:nodeSet()/name", list("/beans[1]/name", "/beans[2]/name")); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/name", "Name 1", "/beans[1]/name"); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/@name", "Name 1", "/beans[1]/@name"); [EOL] }
public void testNodeSetReturn() { [EOL]     assertXPathValueIterator(context, "test:nodeSet()/name", list("Name 1", "Name 2")); [EOL]     assertXPathPointerIterator(context, "test:nodeSet()/name", list("/beans[1]/name", "/beans[2]/name")); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/name", "Name 1", "/beans[1]/name"); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/@name", "Name 1", "/beans[1]/@name"); [EOL] }
public void testNodeSetReturn() { [EOL]     assertXPathValueIterator(context, "test:nodeSet()/name", list("Name 1", "Name 2")); [EOL]     assertXPathPointerIterator(context, "test:nodeSet()/name", list("/beans[1]/name", "/beans[2]/name")); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/name", "Name 1", "/beans[1]/name"); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/@name", "Name 1", "/beans[1]/@name"); [EOL] }
public void testNodeSetReturn() { [EOL]     assertXPathValueIterator(context, "test:nodeSet()/name", list("Name 1", "Name 2")); [EOL]     assertXPathPointerIterator(context, "test:nodeSet()/name", list("/beans[1]/name", "/beans[2]/name")); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/name", "Name 1", "/beans[1]/name"); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/@name", "Name 1", "/beans[1]/@name"); [EOL] }
public void testNodeSetReturn() { [EOL]     assertXPathValueIterator(context, "test:nodeSet()/name", list("Name 1", "Name 2")); [EOL]     assertXPathPointerIterator(context, "test:nodeSet()/name", list("/beans[1]/name", "/beans[2]/name")); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/name", "Name 1", "/beans[1]/name"); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/@name", "Name 1", "/beans[1]/@name"); [EOL] }
public void testNodeSetReturn() { [EOL]     assertXPathValueIterator(context, "test:nodeSet()/name", list("Name 1", "Name 2")); [EOL]     assertXPathPointerIterator(context, "test:nodeSet()/name", list("/beans[1]/name", "/beans[2]/name")); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/name", "Name 1", "/beans[1]/name"); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/@name", "Name 1", "/beans[1]/@name"); [EOL] }
public void testNodeSetReturn() { [EOL]     assertXPathValueIterator(context, "test:nodeSet()/name", list("Name 1", "Name 2")); [EOL]     assertXPathPointerIterator(context, "test:nodeSet()/name", list("/beans[1]/name", "/beans[2]/name")); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/name", "Name 1", "/beans[1]/name"); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/@name", "Name 1", "/beans[1]/@name"); [EOL] }
public void testCoreOperationUnion() { [EOL]     assertXPathExpression("3 | 1 | 4", CoreOperationUnion.class); [EOL] }
public void testCoreOperationUnion() { [EOL]     assertXPathExpression("3 | 1 | 4", CoreOperationUnion.class); [EOL] }
public void testCoreOperationUnion() { [EOL]     assertXPathExpression("3 | 1 | 4", CoreOperationUnion.class); [EOL] }
public void testCoreOperationUnion() { [EOL]     assertXPathExpression("3 | 1 | 4", CoreOperationUnion.class); [EOL] }
public void testAxisFollowing() { [EOL]     assertXPathValueIterator(context, "vendor/contact/following::location//street", list("Orchard Road", "Tangerine Drive")); [EOL]     assertXPathValue(context, "//location/following::price:sale/saleEnds", "never"); [EOL] }
public void testAxisFollowing() { [EOL]     assertXPathValueIterator(context, "vendor/contact/following::location//street", list("Orchard Road", "Tangerine Drive")); [EOL]     assertXPathValue(context, "//location/following::price:sale/saleEnds", "never"); [EOL] }
public void testAxisFollowing() { [EOL]     assertXPathValueIterator(context, "vendor/contact/following::location//street", list("Orchard Road", "Tangerine Drive")); [EOL]     assertXPathValue(context, "//location/following::price:sale/saleEnds", "never"); [EOL] }
public void testAxisFollowing() { [EOL]     assertXPathValueIterator(context, "vendor/contact/following::location//street", list("Orchard Road", "Tangerine Drive")); [EOL]     assertXPathValue(context, "//location/following::price:sale/saleEnds", "never"); [EOL] }
public void testAxisFollowing() { [EOL]     assertXPathValueIterator(context, "vendor/contact/following::location//street", list("Orchard Road", "Tangerine Drive")); [EOL]     assertXPathValue(context, "//location/following::price:sale/saleEnds", "never"); [EOL] }
public void testAxisFollowing() { [EOL]     assertXPathValueIterator(context, "vendor/contact/following::location//street", list("Orchard Road", "Tangerine Drive")); [EOL]     assertXPathValue(context, "//location/following::price:sale/saleEnds", "never"); [EOL] }
public void testAxisFollowing() { [EOL]     assertXPathValueIterator(context, "vendor/contact/following::location//street", list("Orchard Road", "Tangerine Drive")); [EOL]     assertXPathValue(context, "//location/following::price:sale/saleEnds", "never"); [EOL] }
public void testAxisFollowing() { [EOL]     assertXPathValueIterator(context, "vendor/contact/following::location//street", list("Orchard Road", "Tangerine Drive")); [EOL]     assertXPathValue(context, "//location/following::price:sale/saleEnds", "never"); [EOL] }
public void testAxisFollowing() { [EOL]     assertXPathValueIterator(context, "vendor/contact/following::location//street", list("Orchard Road", "Tangerine Drive")); [EOL]     assertXPathValue(context, "//location/following::price:sale/saleEnds", "never"); [EOL] }
