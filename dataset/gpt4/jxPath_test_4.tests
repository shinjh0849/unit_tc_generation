public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testContainerRootWithCollection() { [EOL]     ArrayContainer container = new ArrayContainer(); [EOL]     String[] array = (String[]) container.getValue(); [EOL]     JXPathContext context = JXPathContext.newContext(container); [EOL]     context.getVariables().declareVariable("list", container); [EOL]     assertXPathValueAndPointer(context, "/", array, "/"); [EOL]     assertXPathValueAndPointer(context, "/.[1]", "foo", "/.[1]"); [EOL]     assertXPathValueAndPointer(context, "/.[2]", "bar", "/.[2]"); [EOL]     assertXPathSetValue(context, "/.[1]", "baz"); [EOL]     assertEquals("Checking setValue(index)", "baz", array[0]); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testAxisPrecedingSibling() { [EOL]     assertXPathValue(context, "count(/boolean/preceding-sibling::node())", new Double(2)); [EOL]     assertXPathValue(context, "count(/nestedBean/int/../preceding-sibling::node())", new Double(12)); [EOL]     assertXPathValue(context, "count(/descendant::int/preceding-sibling::node())", new Double(10)); [EOL] }
public void testAxisPrecedingSibling() { [EOL]     assertXPathValue(context, "count(/boolean/preceding-sibling::node())", new Double(2)); [EOL]     assertXPathValue(context, "count(/nestedBean/int/../preceding-sibling::node())", new Double(12)); [EOL]     assertXPathValue(context, "count(/descendant::int/preceding-sibling::node())", new Double(10)); [EOL] }
public void testAxisPrecedingSibling() { [EOL]     assertXPathValue(context, "count(/boolean/preceding-sibling::node())", new Double(2)); [EOL]     assertXPathValue(context, "count(/nestedBean/int/../preceding-sibling::node())", new Double(12)); [EOL]     assertXPathValue(context, "count(/descendant::int/preceding-sibling::node())", new Double(10)); [EOL] }
public void testAxisPrecedingSibling() { [EOL]     assertXPathValue(context, "count(/boolean/preceding-sibling::node())", new Double(2)); [EOL]     assertXPathValue(context, "count(/nestedBean/int/../preceding-sibling::node())", new Double(12)); [EOL]     assertXPathValue(context, "count(/descendant::int/preceding-sibling::node())", new Double(10)); [EOL] }
public void testAxisPrecedingSibling() { [EOL]     assertXPathValue(context, "count(/boolean/preceding-sibling::node())", new Double(2)); [EOL]     assertXPathValue(context, "count(/nestedBean/int/../preceding-sibling::node())", new Double(12)); [EOL]     assertXPathValue(context, "count(/descendant::int/preceding-sibling::node())", new Double(10)); [EOL] }
public void testAxisPrecedingSibling() { [EOL]     assertXPathValue(context, "count(/boolean/preceding-sibling::node())", new Double(2)); [EOL]     assertXPathValue(context, "count(/nestedBean/int/../preceding-sibling::node())", new Double(12)); [EOL]     assertXPathValue(context, "count(/descendant::int/preceding-sibling::node())", new Double(10)); [EOL] }
public void testAxisPrecedingSibling() { [EOL]     assertXPathValue(context, "count(/boolean/preceding-sibling::node())", new Double(2)); [EOL]     assertXPathValue(context, "count(/nestedBean/int/../preceding-sibling::node())", new Double(12)); [EOL]     assertXPathValue(context, "count(/descendant::int/preceding-sibling::node())", new Double(10)); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testAxisSelf() { [EOL]     assertXPathValue(context, "self::node() = /", Boolean.TRUE); [EOL]     assertXPathValue(context, "self::root = /", Boolean.TRUE); [EOL] }
public void testAxisSelf() { [EOL]     assertXPathValue(context, "self::node() = /", Boolean.TRUE); [EOL]     assertXPathValue(context, "self::root = /", Boolean.TRUE); [EOL] }
public void testAxisSelf() { [EOL]     assertXPathValue(context, "self::node() = /", Boolean.TRUE); [EOL]     assertXPathValue(context, "self::root = /", Boolean.TRUE); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testAxisSelf() { [EOL]     assertXPathValue(context, "//price:sale/self::price:sale/saleEnds", "never"); [EOL]     assertXPathValueLenient(context, "//price:sale/self::x/saleEnds", null); [EOL] }
public void testAxisSelf() { [EOL]     assertXPathValue(context, "//price:sale/self::price:sale/saleEnds", "never"); [EOL]     assertXPathValueLenient(context, "//price:sale/self::x/saleEnds", null); [EOL] }
public void testAxisSelf() { [EOL]     assertXPathValue(context, "//price:sale/self::price:sale/saleEnds", "never"); [EOL]     assertXPathValueLenient(context, "//price:sale/self::x/saleEnds", null); [EOL] }
public void testAxisSelf() { [EOL]     assertXPathValue(context, "//price:sale/self::price:sale/saleEnds", "never"); [EOL]     assertXPathValueLenient(context, "//price:sale/self::x/saleEnds", null); [EOL] }
public void testAxisSelf() { [EOL]     assertXPathValue(context, "//price:sale/self::price:sale/saleEnds", "never"); [EOL]     assertXPathValueLenient(context, "//price:sale/self::x/saleEnds", null); [EOL] }
public void testAxisSelf() { [EOL]     assertXPathValue(context, "//price:sale/self::price:sale/saleEnds", "never"); [EOL]     assertXPathValueLenient(context, "//price:sale/self::x/saleEnds", null); [EOL] }
public void testAxisSelf() { [EOL]     assertXPathValue(context, "//price:sale/self::price:sale/saleEnds", "never"); [EOL]     assertXPathValueLenient(context, "//price:sale/self::x/saleEnds", null); [EOL] }
public void testAxisSelf() { [EOL]     assertXPathValue(context, "//price:sale/self::price:sale/saleEnds", "never"); [EOL]     assertXPathValueLenient(context, "//price:sale/self::x/saleEnds", null); [EOL] }
public void testAxisSelf() { [EOL]     assertXPathValue(context, "//price:sale/self::price:sale/saleEnds", "never"); [EOL]     assertXPathValueLenient(context, "//price:sale/self::x/saleEnds", null); [EOL] }
public void testAxisSelf() { [EOL]     assertXPathValue(context, "//price:sale/self::price:sale/saleEnds", "never"); [EOL]     assertXPathValueLenient(context, "//price:sale/self::x/saleEnds", null); [EOL] }
public void testAxisSelf() { [EOL]     assertXPathValue(context, "//price:sale/self::price:sale/saleEnds", "never"); [EOL]     assertXPathValueLenient(context, "//price:sale/self::x/saleEnds", null); [EOL] }
public void testAxisSelf() { [EOL]     assertXPathValue(context, "//price:sale/self::price:sale/saleEnds", "never"); [EOL]     assertXPathValueLenient(context, "//price:sale/self::x/saleEnds", null); [EOL] }
public void testAxisSelf() { [EOL]     assertXPathValue(context, "//price:sale/self::price:sale/saleEnds", "never"); [EOL]     assertXPathValueLenient(context, "//price:sale/self::x/saleEnds", null); [EOL] }
public void testAxisSelf() { [EOL]     assertXPathValue(context, "//price:sale/self::price:sale/saleEnds", "never"); [EOL]     assertXPathValueLenient(context, "//price:sale/self::x/saleEnds", null); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testAxisSelf() { [EOL]     assertXPathValue(context, "self::node() = /", Boolean.TRUE); [EOL]     assertXPathValue(context, "self::root = /", Boolean.TRUE); [EOL] }
public void testAxisSelf() { [EOL]     assertXPathValue(context, "self::node() = /", Boolean.TRUE); [EOL]     assertXPathValue(context, "self::root = /", Boolean.TRUE); [EOL] }
public void testAxisSelf() { [EOL]     assertXPathValue(context, "self::node() = /", Boolean.TRUE); [EOL]     assertXPathValue(context, "self::root = /", Boolean.TRUE); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testCoreOperationLessThan() { [EOL]     assertXPathExpression("3<4", CoreOperationLessThan.class, "3 < 4"); [EOL]     assertXPathExpression("3<(2>=1)", CoreOperationLessThan.class, "3 < (2 >= 1)"); [EOL] }
public void testCoreOperationLessThan() { [EOL]     assertXPathExpression("3<4", CoreOperationLessThan.class, "3 < 4"); [EOL]     assertXPathExpression("3<(2>=1)", CoreOperationLessThan.class, "3 < (2 >= 1)"); [EOL] }
public void testCoreOperationLessThan() { [EOL]     assertXPathExpression("3<4", CoreOperationLessThan.class, "3 < 4"); [EOL]     assertXPathExpression("3<(2>=1)", CoreOperationLessThan.class, "3 < (2 >= 1)"); [EOL] }
public void testCoreOperationLessThan() { [EOL]     assertXPathExpression("3<4", CoreOperationLessThan.class, "3 < 4"); [EOL]     assertXPathExpression("3<(2>=1)", CoreOperationLessThan.class, "3 < (2 >= 1)"); [EOL] }
public void testCoreOperationLessThan() { [EOL]     assertXPathExpression("3<4", CoreOperationLessThan.class, "3 < 4"); [EOL]     assertXPathExpression("3<(2>=1)", CoreOperationLessThan.class, "3 < (2 >= 1)"); [EOL] }
public void testCoreOperationDivide() { [EOL]     assertXPathExpression("2 div 4", CoreOperationDivide.class); [EOL]     assertXPathExpression("2|3 div -3", CoreOperationDivide.class, "2 | 3 div -3"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testAxisDescendantOrSelf() { [EOL]     assertXPathValueIterator(context, "descendant-or-self::name", set("Name 1", "Name 2", "Name 3", "Name 6", "Name 0", "Name 5", "Name 4")); [EOL]     assertXPathValueIterator(context, "//name", set("Name 1", "Name 2", "Name 3", "Name 6", "Name 0", "Name 5", "Name 4")); [EOL]     assertXPathValue(context, "count(descendant-or-self::root)", new Double(1)); [EOL]     assertXPathValue(context, "count(nestedBean//.)", new Double(7)); [EOL]     assertXPathValue(context, "count(//self::beans)", new Double(2)); [EOL]     assertXPathValue(context, "count(descendant-or-self::node())", new Double(66)); [EOL] }
public void testAxisDescendantOrSelf() { [EOL]     assertXPathValueIterator(context, "descendant-or-self::name", set("Name 1", "Name 2", "Name 3", "Name 6", "Name 0", "Name 5", "Name 4")); [EOL]     assertXPathValueIterator(context, "//name", set("Name 1", "Name 2", "Name 3", "Name 6", "Name 0", "Name 5", "Name 4")); [EOL]     assertXPathValue(context, "count(descendant-or-self::root)", new Double(1)); [EOL]     assertXPathValue(context, "count(nestedBean//.)", new Double(7)); [EOL]     assertXPathValue(context, "count(//self::beans)", new Double(2)); [EOL]     assertXPathValue(context, "count(descendant-or-self::node())", new Double(66)); [EOL] }
public void testAxisDescendantOrSelf() { [EOL]     assertXPathValueIterator(context, "descendant-or-self::name", set("Name 1", "Name 2", "Name 3", "Name 6", "Name 0", "Name 5", "Name 4")); [EOL]     assertXPathValueIterator(context, "//name", set("Name 1", "Name 2", "Name 3", "Name 6", "Name 0", "Name 5", "Name 4")); [EOL]     assertXPathValue(context, "count(descendant-or-self::root)", new Double(1)); [EOL]     assertXPathValue(context, "count(nestedBean//.)", new Double(7)); [EOL]     assertXPathValue(context, "count(//self::beans)", new Double(2)); [EOL]     assertXPathValue(context, "count(descendant-or-self::node())", new Double(66)); [EOL] }
public void testAxisPrecedingSibling() { [EOL]     assertXPathValue(context, "count(/boolean/preceding-sibling::node())", new Double(2)); [EOL]     assertXPathValue(context, "count(/nestedBean/int/../preceding-sibling::node())", new Double(12)); [EOL]     assertXPathValue(context, "count(/descendant::int/preceding-sibling::node())", new Double(10)); [EOL] }
public void testAxisPrecedingSibling() { [EOL]     assertXPathValue(context, "count(/boolean/preceding-sibling::node())", new Double(2)); [EOL]     assertXPathValue(context, "count(/nestedBean/int/../preceding-sibling::node())", new Double(12)); [EOL]     assertXPathValue(context, "count(/descendant::int/preceding-sibling::node())", new Double(10)); [EOL] }
public void testAxisPrecedingSibling() { [EOL]     assertXPathValue(context, "count(/boolean/preceding-sibling::node())", new Double(2)); [EOL]     assertXPathValue(context, "count(/nestedBean/int/../preceding-sibling::node())", new Double(12)); [EOL]     assertXPathValue(context, "count(/descendant::int/preceding-sibling::node())", new Double(10)); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testAxisDescendantOrSelf() { [EOL]     assertXPathValueIterator(context, "descendant-or-self::name", set("Name 1", "Name 2", "Name 3", "Name 6", "Name 0", "Name 5", "Name 4")); [EOL]     assertXPathValueIterator(context, "//name", set("Name 1", "Name 2", "Name 3", "Name 6", "Name 0", "Name 5", "Name 4")); [EOL]     assertXPathValue(context, "count(descendant-or-self::root)", new Double(1)); [EOL]     assertXPathValue(context, "count(nestedBean//.)", new Double(7)); [EOL]     assertXPathValue(context, "count(//self::beans)", new Double(2)); [EOL]     assertXPathValue(context, "count(descendant-or-self::node())", new Double(66)); [EOL] }
public void testAxisDescendantOrSelf() { [EOL]     assertXPathValueIterator(context, "descendant-or-self::name", set("Name 1", "Name 2", "Name 3", "Name 6", "Name 0", "Name 5", "Name 4")); [EOL]     assertXPathValueIterator(context, "//name", set("Name 1", "Name 2", "Name 3", "Name 6", "Name 0", "Name 5", "Name 4")); [EOL]     assertXPathValue(context, "count(descendant-or-self::root)", new Double(1)); [EOL]     assertXPathValue(context, "count(nestedBean//.)", new Double(7)); [EOL]     assertXPathValue(context, "count(//self::beans)", new Double(2)); [EOL]     assertXPathValue(context, "count(descendant-or-self::node())", new Double(66)); [EOL] }
public void testAxisDescendantOrSelf() { [EOL]     assertXPathValueIterator(context, "descendant-or-self::name", set("Name 1", "Name 2", "Name 3", "Name 6", "Name 0", "Name 5", "Name 4")); [EOL]     assertXPathValueIterator(context, "//name", set("Name 1", "Name 2", "Name 3", "Name 6", "Name 0", "Name 5", "Name 4")); [EOL]     assertXPathValue(context, "count(descendant-or-self::root)", new Double(1)); [EOL]     assertXPathValue(context, "count(nestedBean//.)", new Double(7)); [EOL]     assertXPathValue(context, "count(//self::beans)", new Double(2)); [EOL]     assertXPathValue(context, "count(descendant-or-self::node())", new Double(66)); [EOL] }
public void testAxisDescendantOrSelf() { [EOL]     assertXPathValueIterator(context, "descendant-or-self::name", set("Name 1", "Name 2", "Name 3", "Name 6", "Name 0", "Name 5", "Name 4")); [EOL]     assertXPathValueIterator(context, "//name", set("Name 1", "Name 2", "Name 3", "Name 6", "Name 0", "Name 5", "Name 4")); [EOL]     assertXPathValue(context, "count(descendant-or-self::root)", new Double(1)); [EOL]     assertXPathValue(context, "count(nestedBean//.)", new Double(7)); [EOL]     assertXPathValue(context, "count(//self::beans)", new Double(2)); [EOL]     assertXPathValue(context, "count(descendant-or-self::node())", new Double(66)); [EOL] }
public void testAxisDescendantOrSelf() { [EOL]     assertXPathValueIterator(context, "descendant-or-self::name", set("Name 1", "Name 2", "Name 3", "Name 6", "Name 0", "Name 5", "Name 4")); [EOL]     assertXPathValueIterator(context, "//name", set("Name 1", "Name 2", "Name 3", "Name 6", "Name 0", "Name 5", "Name 4")); [EOL]     assertXPathValue(context, "count(descendant-or-self::root)", new Double(1)); [EOL]     assertXPathValue(context, "count(nestedBean//.)", new Double(7)); [EOL]     assertXPathValue(context, "count(//self::beans)", new Double(2)); [EOL]     assertXPathValue(context, "count(descendant-or-self::node())", new Double(66)); [EOL] }
public void testAxisDescendantOrSelf() { [EOL]     assertXPathValueIterator(context, "descendant-or-self::name", set("Name 1", "Name 2", "Name 3", "Name 6", "Name 0", "Name 5", "Name 4")); [EOL]     assertXPathValueIterator(context, "//name", set("Name 1", "Name 2", "Name 3", "Name 6", "Name 0", "Name 5", "Name 4")); [EOL]     assertXPathValue(context, "count(descendant-or-self::root)", new Double(1)); [EOL]     assertXPathValue(context, "count(nestedBean//.)", new Double(7)); [EOL]     assertXPathValue(context, "count(//self::beans)", new Double(2)); [EOL]     assertXPathValue(context, "count(descendant-or-self::node())", new Double(66)); [EOL] }
public void testCoreOperationLessThan() { [EOL]     assertXPathExpression("3<4", CoreOperationLessThan.class, "3 < 4"); [EOL]     assertXPathExpression("3<(2>=1)", CoreOperationLessThan.class, "3 < (2 >= 1)"); [EOL] }
public void testCoreOperationLessThan() { [EOL]     assertXPathExpression("3<4", CoreOperationLessThan.class, "3 < 4"); [EOL]     assertXPathExpression("3<(2>=1)", CoreOperationLessThan.class, "3 < (2 >= 1)"); [EOL] }
public void testCoreOperationLessThan() { [EOL]     assertXPathExpression("3<4", CoreOperationLessThan.class, "3 < 4"); [EOL]     assertXPathExpression("3<(2>=1)", CoreOperationLessThan.class, "3 < (2 >= 1)"); [EOL] }
public void testCoreOperationLessThan() { [EOL]     assertXPathExpression("3<4", CoreOperationLessThan.class, "3 < 4"); [EOL]     assertXPathExpression("3<(2>=1)", CoreOperationLessThan.class, "3 < (2 >= 1)"); [EOL] }
public void testCoreOperationLessThan() { [EOL]     assertXPathExpression("3<4", CoreOperationLessThan.class, "3 < 4"); [EOL]     assertXPathExpression("3<(2>=1)", CoreOperationLessThan.class, "3 < (2 >= 1)"); [EOL] }
public void testCoreOperationLessThan() { [EOL]     assertXPathExpression("3<4", CoreOperationLessThan.class, "3 < 4"); [EOL]     assertXPathExpression("3<(2>=1)", CoreOperationLessThan.class, "3 < (2 >= 1)"); [EOL] }
public void testCoreOperationLessThan() { [EOL]     assertXPathExpression("3<4", CoreOperationLessThan.class, "3 < 4"); [EOL]     assertXPathExpression("3<(2>=1)", CoreOperationLessThan.class, "3 < (2 >= 1)"); [EOL] }
public void testCoreOperationLessThan() { [EOL]     assertXPathExpression("3<4", CoreOperationLessThan.class, "3 < 4"); [EOL]     assertXPathExpression("3<(2>=1)", CoreOperationLessThan.class, "3 < (2 >= 1)"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDoPredicatesStandard() { [EOL]     assertValueAndPointer("map[@name='Key3'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertNullPointer("map[@name='Key3'][@name='foo']", "/map[@name='Key3'][4][@name='foo']", "BbDdCDd"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL]     assertNullPointer("map[@name='Key6'][@name='fruitco']", "/map[@name='Key6'][@name='fruitco']", "BbDdCn"); [EOL]     assertValueAndPointer("/vendor/contact[@name='jack'][2]", "Jack Black", "/vendor/contact[4]", "BbMM"); [EOL]     assertNullPointer("/vendor/contact[@name='jack'][5]", "/vendor/contact[@name='jack'][5]", "BbMnNn"); [EOL]     assertValueAndPointer("/vendor/contact/.[@name='jack']", "Jack", "/vendor/contact[2]", "BbMM"); [EOL] }
public void testDoPredicatesStandard() { [EOL]     assertValueAndPointer("map[@name='Key3'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertNullPointer("map[@name='Key3'][@name='foo']", "/map[@name='Key3'][4][@name='foo']", "BbDdCDd"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL]     assertNullPointer("map[@name='Key6'][@name='fruitco']", "/map[@name='Key6'][@name='fruitco']", "BbDdCn"); [EOL]     assertValueAndPointer("/vendor/contact[@name='jack'][2]", "Jack Black", "/vendor/contact[4]", "BbMM"); [EOL]     assertNullPointer("/vendor/contact[@name='jack'][5]", "/vendor/contact[@name='jack'][5]", "BbMnNn"); [EOL]     assertValueAndPointer("/vendor/contact/.[@name='jack']", "Jack", "/vendor/contact[2]", "BbMM"); [EOL] }
public void testDoPredicatesStandard() { [EOL]     assertValueAndPointer("map[@name='Key3'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertNullPointer("map[@name='Key3'][@name='foo']", "/map[@name='Key3'][4][@name='foo']", "BbDdCDd"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL]     assertNullPointer("map[@name='Key6'][@name='fruitco']", "/map[@name='Key6'][@name='fruitco']", "BbDdCn"); [EOL]     assertValueAndPointer("/vendor/contact[@name='jack'][2]", "Jack Black", "/vendor/contact[4]", "BbMM"); [EOL]     assertNullPointer("/vendor/contact[@name='jack'][5]", "/vendor/contact[@name='jack'][5]", "BbMnNn"); [EOL]     assertValueAndPointer("/vendor/contact/.[@name='jack']", "Jack", "/vendor/contact[2]", "BbMM"); [EOL] }
public void testDoPredicatesStandard() { [EOL]     assertValueAndPointer("map[@name='Key3'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertNullPointer("map[@name='Key3'][@name='foo']", "/map[@name='Key3'][4][@name='foo']", "BbDdCDd"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL]     assertNullPointer("map[@name='Key6'][@name='fruitco']", "/map[@name='Key6'][@name='fruitco']", "BbDdCn"); [EOL]     assertValueAndPointer("/vendor/contact[@name='jack'][2]", "Jack Black", "/vendor/contact[4]", "BbMM"); [EOL]     assertNullPointer("/vendor/contact[@name='jack'][5]", "/vendor/contact[@name='jack'][5]", "BbMnNn"); [EOL]     assertValueAndPointer("/vendor/contact/.[@name='jack']", "Jack", "/vendor/contact[2]", "BbMM"); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testIteratePropertyArrayWithoutHasNext() { [EOL]     JXPathContext context = JXPathContext.newContext(createContextBean()); [EOL]     Iterator it = context.iteratePointers("/integers"); [EOL]     List actual = new ArrayList(); [EOL]     for (int i = 0; i < 4; i++) { [EOL]         actual.add(it.next().toString()); [EOL]     } [EOL]     assertEquals("Iterating 'next'<" + "/integers" + ">", list("/integers[1]", "/integers[2]", "/integers[3]", "/integers[4]"), actual); [EOL] }
public void testIteratePropertyArrayWithoutHasNext() { [EOL]     JXPathContext context = JXPathContext.newContext(createContextBean()); [EOL]     Iterator it = context.iteratePointers("/integers"); [EOL]     List actual = new ArrayList(); [EOL]     for (int i = 0; i < 4; i++) { [EOL]         actual.add(it.next().toString()); [EOL]     } [EOL]     assertEquals("Iterating 'next'<" + "/integers" + ">", list("/integers[1]", "/integers[2]", "/integers[3]", "/integers[4]"), actual); [EOL] }
public void testIteratePropertyArrayWithoutHasNext() { [EOL]     JXPathContext context = JXPathContext.newContext(createContextBean()); [EOL]     Iterator it = context.iteratePointers("/integers"); [EOL]     List actual = new ArrayList(); [EOL]     for (int i = 0; i < 4; i++) { [EOL]         actual.add(it.next().toString()); [EOL]     } [EOL]     assertEquals("Iterating 'next'<" + "/integers" + ">", list("/integers[1]", "/integers[2]", "/integers[3]", "/integers[4]"), actual); [EOL] }
public void testDoStepNoPredicatesStandard() { [EOL]     assertValueAndPointer("/vendor/location/address/city", "Fruit Market", "/vendor/location[2]/address[1]/city[1]", "BbMMMM"); [EOL]     assertNullPointer("/vendor/location/address/pity", "/vendor/location[1]/address[1]/pity", "BbMMMn"); [EOL]     assertNullPointer("/vendor/location/address/itty/bitty", "/vendor/location[1]/address[1]/itty/bitty", "BbMMMnNn"); [EOL]     assertNullPointer("/vendor/location/address/city/pretty", "/vendor/location[2]/address[1]/city[1]/pretty", "BbMMMMn"); [EOL] }
public void testDoStepNoPredicatesStandard() { [EOL]     assertValueAndPointer("/vendor/location/address/city", "Fruit Market", "/vendor/location[2]/address[1]/city[1]", "BbMMMM"); [EOL]     assertNullPointer("/vendor/location/address/pity", "/vendor/location[1]/address[1]/pity", "BbMMMn"); [EOL]     assertNullPointer("/vendor/location/address/itty/bitty", "/vendor/location[1]/address[1]/itty/bitty", "BbMMMnNn"); [EOL]     assertNullPointer("/vendor/location/address/city/pretty", "/vendor/location[2]/address[1]/city[1]/pretty", "BbMMMMn"); [EOL] }
public void testDoStepNoPredicatesStandard() { [EOL]     assertValueAndPointer("/vendor/location/address/city", "Fruit Market", "/vendor/location[2]/address[1]/city[1]", "BbMMMM"); [EOL]     assertNullPointer("/vendor/location/address/pity", "/vendor/location[1]/address[1]/pity", "BbMMMn"); [EOL]     assertNullPointer("/vendor/location/address/itty/bitty", "/vendor/location[1]/address[1]/itty/bitty", "BbMMMnNn"); [EOL]     assertNullPointer("/vendor/location/address/city/pretty", "/vendor/location[2]/address[1]/city[1]/pretty", "BbMMMMn"); [EOL] }
public void testDoStepNoPredicatesStandard() { [EOL]     assertValueAndPointer("/vendor/location/address/city", "Fruit Market", "/vendor/location[2]/address[1]/city[1]", "BbMMMM"); [EOL]     assertNullPointer("/vendor/location/address/pity", "/vendor/location[1]/address[1]/pity", "BbMMMn"); [EOL]     assertNullPointer("/vendor/location/address/itty/bitty", "/vendor/location[1]/address[1]/itty/bitty", "BbMMMnNn"); [EOL]     assertNullPointer("/vendor/location/address/city/pretty", "/vendor/location[2]/address[1]/city[1]/pretty", "BbMMMMn"); [EOL] }
public void testDoStepNoPredicatesStandard() { [EOL]     assertValueAndPointer("/vendor/location/address/city", "Fruit Market", "/vendor/location[2]/address[1]/city[1]", "BbMMMM"); [EOL]     assertNullPointer("/vendor/location/address/pity", "/vendor/location[1]/address[1]/pity", "BbMMMn"); [EOL]     assertNullPointer("/vendor/location/address/itty/bitty", "/vendor/location[1]/address[1]/itty/bitty", "BbMMMnNn"); [EOL]     assertNullPointer("/vendor/location/address/city/pretty", "/vendor/location[2]/address[1]/city[1]/pretty", "BbMMMMn"); [EOL] }
public void testDoStepNoPredicatesStandard() { [EOL]     assertValueAndPointer("/vendor/location/address/city", "Fruit Market", "/vendor/location[2]/address[1]/city[1]", "BbMMMM"); [EOL]     assertNullPointer("/vendor/location/address/pity", "/vendor/location[1]/address[1]/pity", "BbMMMn"); [EOL]     assertNullPointer("/vendor/location/address/itty/bitty", "/vendor/location[1]/address[1]/itty/bitty", "BbMMMnNn"); [EOL]     assertNullPointer("/vendor/location/address/city/pretty", "/vendor/location[2]/address[1]/city[1]/pretty", "BbMMMMn"); [EOL] }
public void testBooleanFunction() { [EOL]     assertXPathValue(context, "boolean(vendor//saleEnds[../@stores = 'all'])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(vendor//promotion[../@stores = 'all'])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(vendor//promotion[../@stores = 'some'])", Boolean.FALSE); [EOL] }
public void testCreatePathAndSetValueDeclVarSetCollectionElementProperty() { [EOL]     assertXPathCreatePathAndSetValue(context, "$testArray[2]/boolean", Boolean.TRUE, "$testArray[2]/boolean"); [EOL] }
public void testCreatePathAndSetValueDeclVarSetCollectionElementProperty() { [EOL]     assertXPathCreatePathAndSetValue(context, "$testArray[2]/boolean", Boolean.TRUE, "$testArray[2]/boolean"); [EOL] }
public void testCreatePathAndSetValueDeclVarSetCollectionElementProperty() { [EOL]     assertXPathCreatePathAndSetValue(context, "$testArray[2]/boolean", Boolean.TRUE, "$testArray[2]/boolean"); [EOL] }
public void testCreatePathAndSetValueDeclVarSetCollectionElementProperty() { [EOL]     assertXPathCreatePathAndSetValue(context, "$testArray[2]/boolean", Boolean.TRUE, "$testArray[2]/boolean"); [EOL] }
public void testCreatePathAndSetValueDeclVarSetCollectionElementProperty() { [EOL]     assertXPathCreatePathAndSetValue(context, "$testArray[2]/boolean", Boolean.TRUE, "$testArray[2]/boolean"); [EOL] }
public void testSetCollection() { [EOL]     context.setValue("map/Key1", new Integer[] { new Integer(7), new Integer(8) }); [EOL]     assertXPathSetValue(context, "map/Key1[1]", new Integer(9)); [EOL] }
public void testSetCollection() { [EOL]     context.setValue("map/Key1", new Integer[] { new Integer(7), new Integer(8) }); [EOL]     assertXPathSetValue(context, "map/Key1[1]", new Integer(9)); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey1']", "Test", "/map[@name='TestKey1']"); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey1']", "Test", "/map[@name='TestKey1']"); [EOL] }
public void testIterateVector() { [EOL]     Map map = new HashMap(); [EOL]     Vector vec = new Vector(); [EOL]     vec.add(new HashMap()); [EOL]     vec.add(new HashMap()); [EOL]     map.put("vec", vec); [EOL]     JXPathContext context = JXPathContext.newContext(map); [EOL]     assertXPathPointerIterator(context, "/vec", list("/.[@name='vec'][1]", "/.[@name='vec'][2]")); [EOL] }
public void testIterateVector() { [EOL]     Map map = new HashMap(); [EOL]     Vector vec = new Vector(); [EOL]     vec.add(new HashMap()); [EOL]     vec.add(new HashMap()); [EOL]     map.put("vec", vec); [EOL]     JXPathContext context = JXPathContext.newContext(map); [EOL]     assertXPathPointerIterator(context, "/vec", list("/.[@name='vec'][1]", "/.[@name='vec'][2]")); [EOL] }
public void testIterateVector() { [EOL]     Map map = new HashMap(); [EOL]     Vector vec = new Vector(); [EOL]     vec.add(new HashMap()); [EOL]     vec.add(new HashMap()); [EOL]     map.put("vec", vec); [EOL]     JXPathContext context = JXPathContext.newContext(map); [EOL]     assertXPathPointerIterator(context, "/vec", list("/.[@name='vec'][1]", "/.[@name='vec'][2]")); [EOL] }
public void testIterateVector() { [EOL]     Map map = new HashMap(); [EOL]     Vector vec = new Vector(); [EOL]     vec.add(new HashMap()); [EOL]     vec.add(new HashMap()); [EOL]     map.put("vec", vec); [EOL]     JXPathContext context = JXPathContext.newContext(map); [EOL]     assertXPathPointerIterator(context, "/vec", list("/.[@name='vec'][1]", "/.[@name='vec'][2]")); [EOL] }
public void testConstant() { [EOL]     assertXPathExpression("1", Constant.class); [EOL]     assertXPathExpression("1.5", Constant.class); [EOL]     assertXPathExpression("'foo'", Constant.class); [EOL] }
public void testIteratePropertyArrayWithoutHasNext() { [EOL]     JXPathContext context = JXPathContext.newContext(createContextBean()); [EOL]     Iterator it = context.iteratePointers("/integers"); [EOL]     List actual = new ArrayList(); [EOL]     for (int i = 0; i < 4; i++) { [EOL]         actual.add(it.next().toString()); [EOL]     } [EOL]     assertEquals("Iterating 'next'<" + "/integers" + ">", list("/integers[1]", "/integers[2]", "/integers[3]", "/integers[4]"), actual); [EOL] }
public void testIteratePropertyArrayWithoutHasNext() { [EOL]     JXPathContext context = JXPathContext.newContext(createContextBean()); [EOL]     Iterator it = context.iteratePointers("/integers"); [EOL]     List actual = new ArrayList(); [EOL]     for (int i = 0; i < 4; i++) { [EOL]         actual.add(it.next().toString()); [EOL]     } [EOL]     assertEquals("Iterating 'next'<" + "/integers" + ">", list("/integers[1]", "/integers[2]", "/integers[3]", "/integers[4]"), actual); [EOL] }
public void testIteratePropertyArrayWithoutHasNext() { [EOL]     JXPathContext context = JXPathContext.newContext(createContextBean()); [EOL]     Iterator it = context.iteratePointers("/integers"); [EOL]     List actual = new ArrayList(); [EOL]     for (int i = 0; i < 4; i++) { [EOL]         actual.add(it.next().toString()); [EOL]     } [EOL]     assertEquals("Iterating 'next'<" + "/integers" + ">", list("/integers[1]", "/integers[2]", "/integers[3]", "/integers[4]"), actual); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testAxisSelf() { [EOL]     assertXPathValue(context, "//price:sale/self::price:sale/saleEnds", "never"); [EOL]     assertXPathValueLenient(context, "//price:sale/self::x/saleEnds", null); [EOL] }
public void testAxisSelf() { [EOL]     assertXPathValue(context, "//price:sale/self::price:sale/saleEnds", "never"); [EOL]     assertXPathValueLenient(context, "//price:sale/self::x/saleEnds", null); [EOL] }
public void testAxisSelf() { [EOL]     assertXPathValue(context, "//price:sale/self::price:sale/saleEnds", "never"); [EOL]     assertXPathValueLenient(context, "//price:sale/self::x/saleEnds", null); [EOL] }
public void testAxisSelf() { [EOL]     assertXPathValue(context, "//price:sale/self::price:sale/saleEnds", "never"); [EOL]     assertXPathValueLenient(context, "//price:sale/self::x/saleEnds", null); [EOL] }
public void testAxisSelf() { [EOL]     assertXPathValue(context, "//price:sale/self::price:sale/saleEnds", "never"); [EOL]     assertXPathValueLenient(context, "//price:sale/self::x/saleEnds", null); [EOL] }
public void testIteratePropertyArrayWithoutHasNext() { [EOL]     JXPathContext context = JXPathContext.newContext(createContextBean()); [EOL]     Iterator it = context.iteratePointers("/integers"); [EOL]     List actual = new ArrayList(); [EOL]     for (int i = 0; i < 4; i++) { [EOL]         actual.add(it.next().toString()); [EOL]     } [EOL]     assertEquals("Iterating 'next'<" + "/integers" + ">", list("/integers[1]", "/integers[2]", "/integers[3]", "/integers[4]"), actual); [EOL] }
public void testAxisSelf() { [EOL]     assertXPathValue(context, "//price:sale/self::price:sale/saleEnds", "never"); [EOL]     assertXPathValueLenient(context, "//price:sale/self::x/saleEnds", null); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testConstant() { [EOL]     assertXPathExpression("1", Constant.class); [EOL]     assertXPathExpression("1.5", Constant.class); [EOL]     assertXPathExpression("'foo'", Constant.class); [EOL] }
public void testConstant() { [EOL]     assertXPathExpression("1", Constant.class); [EOL]     assertXPathExpression("1.5", Constant.class); [EOL]     assertXPathExpression("'foo'", Constant.class); [EOL] }
public void testConstant() { [EOL]     assertXPathExpression("1", Constant.class); [EOL]     assertXPathExpression("1.5", Constant.class); [EOL]     assertXPathExpression("'foo'", Constant.class); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testConstant() { [EOL]     assertXPathExpression("1", Constant.class); [EOL]     assertXPathExpression("1.5", Constant.class); [EOL]     assertXPathExpression("'foo'", Constant.class); [EOL] }
public void testConstant() { [EOL]     assertXPathExpression("1", Constant.class); [EOL]     assertXPathExpression("1.5", Constant.class); [EOL]     assertXPathExpression("'foo'", Constant.class); [EOL] }
public void testConstant() { [EOL]     assertXPathExpression("1", Constant.class); [EOL]     assertXPathExpression("1.5", Constant.class); [EOL]     assertXPathExpression("'foo'", Constant.class); [EOL] }
public void testContainerRootWithCollection() { [EOL]     ArrayContainer container = new ArrayContainer(); [EOL]     String[] array = (String[]) container.getValue(); [EOL]     JXPathContext context = JXPathContext.newContext(container); [EOL]     context.getVariables().declareVariable("list", container); [EOL]     assertXPathValueAndPointer(context, "/", array, "/"); [EOL]     assertXPathValueAndPointer(context, "/.[1]", "foo", "/.[1]"); [EOL]     assertXPathValueAndPointer(context, "/.[2]", "bar", "/.[2]"); [EOL]     assertXPathSetValue(context, "/.[1]", "baz"); [EOL]     assertEquals("Checking setValue(index)", "baz", array[0]); [EOL] }
public void testAxisSelf() { [EOL]     assertXPathValue(context, "self::node() = /", Boolean.TRUE); [EOL]     assertXPathValue(context, "self::root = /", Boolean.TRUE); [EOL] }
public void testAxisSelf() { [EOL]     assertXPathValue(context, "self::node() = /", Boolean.TRUE); [EOL]     assertXPathValue(context, "self::root = /", Boolean.TRUE); [EOL] }
public void testArrayToList() { [EOL]     assertConversion(new int[] { 1, 2 }, List.class, Arrays.asList(new Object[] { new Integer(1), new Integer(2) })); [EOL] }
public void testArrayToList() { [EOL]     assertConversion(new int[] { 1, 2 }, List.class, Arrays.asList(new Object[] { new Integer(1), new Integer(2) })); [EOL] }
public void testArrayToList() { [EOL]     assertConversion(new int[] { 1, 2 }, List.class, Arrays.asList(new Object[] { new Integer(1), new Integer(2) })); [EOL] }
public void testArrayToList() { [EOL]     assertConversion(new int[] { 1, 2 }, List.class, Arrays.asList(new Object[] { new Integer(1), new Integer(2) })); [EOL] }
public void testArrayToList() { [EOL]     assertConversion(new int[] { 1, 2 }, List.class, Arrays.asList(new Object[] { new Integer(1), new Integer(2) })); [EOL] }
public void testArrayToList() { [EOL]     assertConversion(new int[] { 1, 2 }, List.class, Arrays.asList(new Object[] { new Integer(1), new Integer(2) })); [EOL] }
public void testArrayToList() { [EOL]     assertConversion(new int[] { 1, 2 }, List.class, Arrays.asList(new Object[] { new Integer(1), new Integer(2) })); [EOL] }
public void testArrayToList() { [EOL]     assertConversion(new int[] { 1, 2 }, List.class, Arrays.asList(new Object[] { new Integer(1), new Integer(2) })); [EOL] }
public void testArrayToList() { [EOL]     assertConversion(new int[] { 1, 2 }, List.class, Arrays.asList(new Object[] { new Integer(1), new Integer(2) })); [EOL] }
public void testArrayToList() { [EOL]     assertConversion(new int[] { 1, 2 }, List.class, Arrays.asList(new Object[] { new Integer(1), new Integer(2) })); [EOL] }
public void testArrayToList() { [EOL]     assertConversion(new int[] { 1, 2 }, List.class, Arrays.asList(new Object[] { new Integer(1), new Integer(2) })); [EOL] }
public void testArrayToList() { [EOL]     assertConversion(new int[] { 1, 2 }, List.class, Arrays.asList(new Object[] { new Integer(1), new Integer(2) })); [EOL] }
public void testArrayToList() { [EOL]     assertConversion(new int[] { 1, 2 }, List.class, Arrays.asList(new Object[] { new Integer(1), new Integer(2) })); [EOL] }
public void testArrayToList() { [EOL]     assertConversion(new int[] { 1, 2 }, List.class, Arrays.asList(new Object[] { new Integer(1), new Integer(2) })); [EOL] }
public void testCoreOperationEqual() { [EOL]     assertXPathExpression("2 = 4", CoreOperationEqual.class); [EOL]     assertXPathExpression("2 + 1 = 3", CoreOperationEqual.class); [EOL] }
public void testCoreOperationEqual() { [EOL]     assertXPathExpression("2 = 4", CoreOperationEqual.class); [EOL]     assertXPathExpression("2 + 1 = 3", CoreOperationEqual.class); [EOL] }
public void testCoreOperationEqual() { [EOL]     assertXPathExpression("2 = 4", CoreOperationEqual.class); [EOL]     assertXPathExpression("2 + 1 = 3", CoreOperationEqual.class); [EOL] }
public void testIterateVector() { [EOL]     Map map = new HashMap(); [EOL]     Vector vec = new Vector(); [EOL]     vec.add(new HashMap()); [EOL]     vec.add(new HashMap()); [EOL]     map.put("vec", vec); [EOL]     JXPathContext context = JXPathContext.newContext(map); [EOL]     assertXPathPointerIterator(context, "/vec", list("/.[@name='vec'][1]", "/.[@name='vec'][2]")); [EOL] }
public void testIterateVector() { [EOL]     Map map = new HashMap(); [EOL]     Vector vec = new Vector(); [EOL]     vec.add(new HashMap()); [EOL]     vec.add(new HashMap()); [EOL]     map.put("vec", vec); [EOL]     JXPathContext context = JXPathContext.newContext(map); [EOL]     assertXPathPointerIterator(context, "/vec", list("/.[@name='vec'][1]", "/.[@name='vec'][2]")); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testMultipleIterators() { [EOL]     testMultiple(0, 0, true, false, 20); [EOL]     testMultiple(3, 0, true, false, 16); [EOL]     testMultiple(3, -1, true, true, 8); [EOL]     testMultiple(3, 0, true, true, 4); [EOL]     testMultiple(0, 0, false, false, 21); [EOL]     testMultiple(0, 0, false, true, 21); [EOL]     testMultiple(3, 1, true, false, 15); [EOL]     testMultiple(3, 3, true, false, 13); [EOL] }
public void testMultipleIterators() { [EOL]     testMultiple(0, 0, true, false, 20); [EOL]     testMultiple(3, 0, true, false, 16); [EOL]     testMultiple(3, -1, true, true, 8); [EOL]     testMultiple(3, 0, true, true, 4); [EOL]     testMultiple(0, 0, false, false, 21); [EOL]     testMultiple(0, 0, false, true, 21); [EOL]     testMultiple(3, 1, true, false, 15); [EOL]     testMultiple(3, 3, true, false, 13); [EOL] }
public void testMultipleIterators() { [EOL]     testMultiple(0, 0, true, false, 20); [EOL]     testMultiple(3, 0, true, false, 16); [EOL]     testMultiple(3, -1, true, true, 8); [EOL]     testMultiple(3, 0, true, true, 4); [EOL]     testMultiple(0, 0, false, false, 21); [EOL]     testMultiple(0, 0, false, true, 21); [EOL]     testMultiple(3, 1, true, false, 15); [EOL]     testMultiple(3, 3, true, false, 13); [EOL] }
public void testMultipleIterators() { [EOL]     testMultiple(0, 0, true, false, 20); [EOL]     testMultiple(3, 0, true, false, 16); [EOL]     testMultiple(3, -1, true, true, 8); [EOL]     testMultiple(3, 0, true, true, 4); [EOL]     testMultiple(0, 0, false, false, 21); [EOL]     testMultiple(0, 0, false, true, 21); [EOL]     testMultiple(3, 1, true, false, 15); [EOL]     testMultiple(3, 3, true, false, 13); [EOL] }
public void testMultipleIterators() { [EOL]     testMultiple(0, 0, true, false, 20); [EOL]     testMultiple(3, 0, true, false, 16); [EOL]     testMultiple(3, -1, true, true, 8); [EOL]     testMultiple(3, 0, true, true, 4); [EOL]     testMultiple(0, 0, false, false, 21); [EOL]     testMultiple(0, 0, false, true, 21); [EOL]     testMultiple(3, 1, true, false, 15); [EOL]     testMultiple(3, 3, true, false, 13); [EOL] }
public void testMultipleIterators() { [EOL]     testMultiple(0, 0, true, false, 20); [EOL]     testMultiple(3, 0, true, false, 16); [EOL]     testMultiple(3, -1, true, true, 8); [EOL]     testMultiple(3, 0, true, true, 4); [EOL]     testMultiple(0, 0, false, false, 21); [EOL]     testMultiple(0, 0, false, true, 21); [EOL]     testMultiple(3, 1, true, false, 15); [EOL]     testMultiple(3, 3, true, false, 13); [EOL] }
public void testMultipleIterators() { [EOL]     testMultiple(0, 0, true, false, 20); [EOL]     testMultiple(3, 0, true, false, 16); [EOL]     testMultiple(3, -1, true, true, 8); [EOL]     testMultiple(3, 0, true, true, 4); [EOL]     testMultiple(0, 0, false, false, 21); [EOL]     testMultiple(0, 0, false, true, 21); [EOL]     testMultiple(3, 1, true, false, 15); [EOL]     testMultiple(3, 3, true, false, 13); [EOL] }
public void testMultipleIterators() { [EOL]     testMultiple(0, 0, true, false, 20); [EOL]     testMultiple(3, 0, true, false, 16); [EOL]     testMultiple(3, -1, true, true, 8); [EOL]     testMultiple(3, 0, true, true, 4); [EOL]     testMultiple(0, 0, false, false, 21); [EOL]     testMultiple(0, 0, false, true, 21); [EOL]     testMultiple(3, 1, true, false, 15); [EOL]     testMultiple(3, 3, true, false, 13); [EOL] }
public void testMultipleIterators() { [EOL]     testMultiple(0, 0, true, false, 20); [EOL]     testMultiple(3, 0, true, false, 16); [EOL]     testMultiple(3, -1, true, true, 8); [EOL]     testMultiple(3, 0, true, true, 4); [EOL]     testMultiple(0, 0, false, false, 21); [EOL]     testMultiple(0, 0, false, true, 21); [EOL]     testMultiple(3, 1, true, false, 15); [EOL]     testMultiple(3, 3, true, false, 13); [EOL] }
public void testMultipleIterators() { [EOL]     testMultiple(0, 0, true, false, 20); [EOL]     testMultiple(3, 0, true, false, 16); [EOL]     testMultiple(3, -1, true, true, 8); [EOL]     testMultiple(3, 0, true, true, 4); [EOL]     testMultiple(0, 0, false, false, 21); [EOL]     testMultiple(0, 0, false, true, 21); [EOL]     testMultiple(3, 1, true, false, 15); [EOL]     testMultiple(3, 3, true, false, 13); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testCoreOperationDivide() { [EOL]     assertXPathExpression("2 div 4", CoreOperationDivide.class); [EOL]     assertXPathExpression("2|3 div -3", CoreOperationDivide.class, "2 | 3 div -3"); [EOL] }
public void testCoreOperationLessThan() { [EOL]     assertXPathExpression("3<4", CoreOperationLessThan.class, "3 < 4"); [EOL]     assertXPathExpression("3<(2>=1)", CoreOperationLessThan.class, "3 < (2 >= 1)"); [EOL] }
public void testCoreOperationLessThan() { [EOL]     assertXPathExpression("3<4", CoreOperationLessThan.class, "3 < 4"); [EOL]     assertXPathExpression("3<(2>=1)", CoreOperationLessThan.class, "3 < (2 >= 1)"); [EOL] }
public void testCoreOperationLessThan() { [EOL]     assertXPathExpression("3<4", CoreOperationLessThan.class, "3 < 4"); [EOL]     assertXPathExpression("3<(2>=1)", CoreOperationLessThan.class, "3 < (2 >= 1)"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testAxisPrecedingSibling() { [EOL]     assertXPathValue(context, "count(/boolean/preceding-sibling::node())", new Double(2)); [EOL]     assertXPathValue(context, "count(/nestedBean/int/../preceding-sibling::node())", new Double(12)); [EOL]     assertXPathValue(context, "count(/descendant::int/preceding-sibling::node())", new Double(10)); [EOL] }
public void testAxisPrecedingSibling() { [EOL]     assertXPathValue(context, "count(/boolean/preceding-sibling::node())", new Double(2)); [EOL]     assertXPathValue(context, "count(/nestedBean/int/../preceding-sibling::node())", new Double(12)); [EOL]     assertXPathValue(context, "count(/descendant::int/preceding-sibling::node())", new Double(10)); [EOL] }
public void testAxisPrecedingSibling() { [EOL]     assertXPathValue(context, "count(/boolean/preceding-sibling::node())", new Double(2)); [EOL]     assertXPathValue(context, "count(/nestedBean/int/../preceding-sibling::node())", new Double(12)); [EOL]     assertXPathValue(context, "count(/descendant::int/preceding-sibling::node())", new Double(10)); [EOL] }
public void testAxisPrecedingSibling() { [EOL]     assertXPathValue(context, "count(/boolean/preceding-sibling::node())", new Double(2)); [EOL]     assertXPathValue(context, "count(/nestedBean/int/../preceding-sibling::node())", new Double(12)); [EOL]     assertXPathValue(context, "count(/descendant::int/preceding-sibling::node())", new Double(10)); [EOL] }
public void testAxisPrecedingSibling() { [EOL]     assertXPathValue(context, "count(/boolean/preceding-sibling::node())", new Double(2)); [EOL]     assertXPathValue(context, "count(/nestedBean/int/../preceding-sibling::node())", new Double(12)); [EOL]     assertXPathValue(context, "count(/descendant::int/preceding-sibling::node())", new Double(10)); [EOL] }
public void testAxisPrecedingSibling() { [EOL]     assertXPathValue(context, "count(/boolean/preceding-sibling::node())", new Double(2)); [EOL]     assertXPathValue(context, "count(/nestedBean/int/../preceding-sibling::node())", new Double(12)); [EOL]     assertXPathValue(context, "count(/descendant::int/preceding-sibling::node())", new Double(10)); [EOL] }
public void testAxisPrecedingSibling() { [EOL]     assertXPathValue(context, "count(/boolean/preceding-sibling::node())", new Double(2)); [EOL]     assertXPathValue(context, "count(/nestedBean/int/../preceding-sibling::node())", new Double(12)); [EOL]     assertXPathValue(context, "count(/descendant::int/preceding-sibling::node())", new Double(10)); [EOL] }
public void testCoreOperationLessThan() { [EOL]     assertXPathExpression("3<4", CoreOperationLessThan.class, "3 < 4"); [EOL]     assertXPathExpression("3<(2>=1)", CoreOperationLessThan.class, "3 < (2 >= 1)"); [EOL] }
public void testCoreOperationLessThan() { [EOL]     assertXPathExpression("3<4", CoreOperationLessThan.class, "3 < 4"); [EOL]     assertXPathExpression("3<(2>=1)", CoreOperationLessThan.class, "3 < (2 >= 1)"); [EOL] }
public void testCoreOperationLessThan() { [EOL]     assertXPathExpression("3<4", CoreOperationLessThan.class, "3 < 4"); [EOL]     assertXPathExpression("3<(2>=1)", CoreOperationLessThan.class, "3 < (2 >= 1)"); [EOL] }
public void testCoreOperationLessThan() { [EOL]     assertXPathExpression("3<4", CoreOperationLessThan.class, "3 < 4"); [EOL]     assertXPathExpression("3<(2>=1)", CoreOperationLessThan.class, "3 < (2 >= 1)"); [EOL] }
public void testLocationPathAxisParent() { [EOL]     assertXPathExpression("parent::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("..", LocationPath.class); [EOL] }
public void testLocationPathAxisParent() { [EOL]     assertXPathExpression("parent::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("..", LocationPath.class); [EOL] }
public void testLocationPathAxisParent() { [EOL]     assertXPathExpression("parent::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("..", LocationPath.class); [EOL] }
public void testLocationPathAxisParent() { [EOL]     assertXPathExpression("parent::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("..", LocationPath.class); [EOL] }
public void testLocationPathAxisParent() { [EOL]     assertXPathExpression("parent::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("..", LocationPath.class); [EOL] }
public void testLocationPathAxisParent() { [EOL]     assertXPathExpression("parent::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("..", LocationPath.class); [EOL] }
public void testLocationPathAxisParent() { [EOL]     assertXPathExpression("parent::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("..", LocationPath.class); [EOL] }
public void testLocationPathAxisParent() { [EOL]     assertXPathExpression("parent::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("..", LocationPath.class); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testContainerRootWithCollection() { [EOL]     ArrayContainer container = new ArrayContainer(); [EOL]     String[] array = (String[]) container.getValue(); [EOL]     JXPathContext context = JXPathContext.newContext(container); [EOL]     context.getVariables().declareVariable("list", container); [EOL]     assertXPathValueAndPointer(context, "/", array, "/"); [EOL]     assertXPathValueAndPointer(context, "/.[1]", "foo", "/.[1]"); [EOL]     assertXPathValueAndPointer(context, "/.[2]", "bar", "/.[2]"); [EOL]     assertXPathSetValue(context, "/.[1]", "baz"); [EOL]     assertEquals("Checking setValue(index)", "baz", array[0]); [EOL] }
public void testContainerRootWithCollection() { [EOL]     ArrayContainer container = new ArrayContainer(); [EOL]     String[] array = (String[]) container.getValue(); [EOL]     JXPathContext context = JXPathContext.newContext(container); [EOL]     context.getVariables().declareVariable("list", container); [EOL]     assertXPathValueAndPointer(context, "/", array, "/"); [EOL]     assertXPathValueAndPointer(context, "/.[1]", "foo", "/.[1]"); [EOL]     assertXPathValueAndPointer(context, "/.[2]", "bar", "/.[2]"); [EOL]     assertXPathSetValue(context, "/.[1]", "baz"); [EOL]     assertEquals("Checking setValue(index)", "baz", array[0]); [EOL] }
public void testCreatePathAndSetValue() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey1']", "Test", "/map[@name='TestKey1']"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testCoreOperationDivide() { [EOL]     assertXPathExpression("2 div 4", CoreOperationDivide.class); [EOL]     assertXPathExpression("2|3 div -3", CoreOperationDivide.class, "2 | 3 div -3"); [EOL] }
public void testCoreOperationDivide() { [EOL]     assertXPathExpression("2 div 4", CoreOperationDivide.class); [EOL]     assertXPathExpression("2|3 div -3", CoreOperationDivide.class, "2 | 3 div -3"); [EOL] }
public void testMethodLookupWithExpressionContext() { [EOL]     Object[] args = new Object[] { new TestFunctions() }; [EOL]     Function func = functions.getFunction("test", "instancePath", args); [EOL]     assertEquals("test:instancePath()", func.invoke(new Context(new Integer(1)), args), "1"); [EOL] }
public void testMultipleIterators() { [EOL]     testMultiple(0, 0, true, false, 20); [EOL]     testMultiple(3, 0, true, false, 16); [EOL]     testMultiple(3, -1, true, true, 8); [EOL]     testMultiple(3, 0, true, true, 4); [EOL]     testMultiple(0, 0, false, false, 21); [EOL]     testMultiple(0, 0, false, true, 21); [EOL]     testMultiple(3, 1, true, false, 15); [EOL]     testMultiple(3, 3, true, false, 13); [EOL] }
public void testMultipleIterators() { [EOL]     testMultiple(0, 0, true, false, 20); [EOL]     testMultiple(3, 0, true, false, 16); [EOL]     testMultiple(3, -1, true, true, 8); [EOL]     testMultiple(3, 0, true, true, 4); [EOL]     testMultiple(0, 0, false, false, 21); [EOL]     testMultiple(0, 0, false, true, 21); [EOL]     testMultiple(3, 1, true, false, 15); [EOL]     testMultiple(3, 3, true, false, 13); [EOL] }
public void testMultipleIterators() { [EOL]     testMultiple(0, 0, true, false, 20); [EOL]     testMultiple(3, 0, true, false, 16); [EOL]     testMultiple(3, -1, true, true, 8); [EOL]     testMultiple(3, 0, true, true, 4); [EOL]     testMultiple(0, 0, false, false, 21); [EOL]     testMultiple(0, 0, false, true, 21); [EOL]     testMultiple(3, 1, true, false, 15); [EOL]     testMultiple(3, 3, true, false, 13); [EOL] }
public void testMultipleIterators() { [EOL]     testMultiple(0, 0, true, false, 20); [EOL]     testMultiple(3, 0, true, false, 16); [EOL]     testMultiple(3, -1, true, true, 8); [EOL]     testMultiple(3, 0, true, true, 4); [EOL]     testMultiple(0, 0, false, false, 21); [EOL]     testMultiple(0, 0, false, true, 21); [EOL]     testMultiple(3, 1, true, false, 15); [EOL]     testMultiple(3, 3, true, false, 13); [EOL] }
public void testMultipleIterators() { [EOL]     testMultiple(0, 0, true, false, 20); [EOL]     testMultiple(3, 0, true, false, 16); [EOL]     testMultiple(3, -1, true, true, 8); [EOL]     testMultiple(3, 0, true, true, 4); [EOL]     testMultiple(0, 0, false, false, 21); [EOL]     testMultiple(0, 0, false, true, 21); [EOL]     testMultiple(3, 1, true, false, 15); [EOL]     testMultiple(3, 3, true, false, 13); [EOL] }
public void testMultipleIterators() { [EOL]     testMultiple(0, 0, true, false, 20); [EOL]     testMultiple(3, 0, true, false, 16); [EOL]     testMultiple(3, -1, true, true, 8); [EOL]     testMultiple(3, 0, true, true, 4); [EOL]     testMultiple(0, 0, false, false, 21); [EOL]     testMultiple(0, 0, false, true, 21); [EOL]     testMultiple(3, 1, true, false, 15); [EOL]     testMultiple(3, 3, true, false, 13); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testAxisSelf() { [EOL]     assertXPathValue(context, "//price:sale/self::price:sale/saleEnds", "never"); [EOL]     assertXPathValueLenient(context, "//price:sale/self::x/saleEnds", null); [EOL] }
public void testAxisSelf() { [EOL]     assertXPathValue(context, "//price:sale/self::price:sale/saleEnds", "never"); [EOL]     assertXPathValueLenient(context, "//price:sale/self::x/saleEnds", null); [EOL] }
public void testAxisSelf() { [EOL]     assertXPathValue(context, "//price:sale/self::price:sale/saleEnds", "never"); [EOL]     assertXPathValueLenient(context, "//price:sale/self::x/saleEnds", null); [EOL] }
public void testAxisSelf() { [EOL]     assertXPathValue(context, "//price:sale/self::price:sale/saleEnds", "never"); [EOL]     assertXPathValueLenient(context, "//price:sale/self::x/saleEnds", null); [EOL] }
public void testAxisSelf() { [EOL]     assertXPathValue(context, "//price:sale/self::price:sale/saleEnds", "never"); [EOL]     assertXPathValueLenient(context, "//price:sale/self::x/saleEnds", null); [EOL] }
public void testAxisSelf() { [EOL]     assertXPathValue(context, "//price:sale/self::price:sale/saleEnds", "never"); [EOL]     assertXPathValueLenient(context, "//price:sale/self::x/saleEnds", null); [EOL] }
public void testAxisAncestorOrSelf() { [EOL]     assertXPathValue(context, "vendor/product/price:sale/" + "ancestor-or-self::price:sale/saleEnds", "never"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testCreatePathDeclareVariableSetProperty() { [EOL]     assertXPathCreatePath(context, "$test/boolean", Boolean.FALSE, "$test/boolean"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testCoreOperationDivide() { [EOL]     assertXPathExpression("2 div 4", CoreOperationDivide.class); [EOL]     assertXPathExpression("2|3 div -3", CoreOperationDivide.class, "2 | 3 div -3"); [EOL] }
public void testCoreOperationDivide() { [EOL]     assertXPathExpression("2 div 4", CoreOperationDivide.class); [EOL]     assertXPathExpression("2|3 div -3", CoreOperationDivide.class, "2 | 3 div -3"); [EOL] }
public void testCoreOperationDivide() { [EOL]     assertXPathExpression("2 div 4", CoreOperationDivide.class); [EOL]     assertXPathExpression("2|3 div -3", CoreOperationDivide.class, "2 | 3 div -3"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testAxisPrecedingSibling() { [EOL]     assertXPathValue(context, "count(/boolean/preceding-sibling::node())", new Double(2)); [EOL]     assertXPathValue(context, "count(/nestedBean/int/../preceding-sibling::node())", new Double(12)); [EOL]     assertXPathValue(context, "count(/descendant::int/preceding-sibling::node())", new Double(10)); [EOL] }
public void testAxisPrecedingSibling() { [EOL]     assertXPathValue(context, "count(/boolean/preceding-sibling::node())", new Double(2)); [EOL]     assertXPathValue(context, "count(/nestedBean/int/../preceding-sibling::node())", new Double(12)); [EOL]     assertXPathValue(context, "count(/descendant::int/preceding-sibling::node())", new Double(10)); [EOL] }
public void testAxisPrecedingSibling() { [EOL]     assertXPathValue(context, "count(/boolean/preceding-sibling::node())", new Double(2)); [EOL]     assertXPathValue(context, "count(/nestedBean/int/../preceding-sibling::node())", new Double(12)); [EOL]     assertXPathValue(context, "count(/descendant::int/preceding-sibling::node())", new Double(10)); [EOL] }
public void testAxisPrecedingSibling() { [EOL]     assertXPathValue(context, "count(/boolean/preceding-sibling::node())", new Double(2)); [EOL]     assertXPathValue(context, "count(/nestedBean/int/../preceding-sibling::node())", new Double(12)); [EOL]     assertXPathValue(context, "count(/descendant::int/preceding-sibling::node())", new Double(10)); [EOL] }
public void testAxisPrecedingSibling() { [EOL]     assertXPathValue(context, "count(/boolean/preceding-sibling::node())", new Double(2)); [EOL]     assertXPathValue(context, "count(/nestedBean/int/../preceding-sibling::node())", new Double(12)); [EOL]     assertXPathValue(context, "count(/descendant::int/preceding-sibling::node())", new Double(10)); [EOL] }
public void testAxisPrecedingSibling() { [EOL]     assertXPathValue(context, "count(/boolean/preceding-sibling::node())", new Double(2)); [EOL]     assertXPathValue(context, "count(/nestedBean/int/../preceding-sibling::node())", new Double(12)); [EOL]     assertXPathValue(context, "count(/descendant::int/preceding-sibling::node())", new Double(10)); [EOL] }
public void testBooleanFunction() { [EOL]     assertXPathValue(context, "boolean(vendor//saleEnds[../@stores = 'all'])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(vendor//promotion[../@stores = 'all'])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(vendor//promotion[../@stores = 'some'])", Boolean.FALSE); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testContainerRootWithCollection() { [EOL]     ArrayContainer container = new ArrayContainer(); [EOL]     String[] array = (String[]) container.getValue(); [EOL]     JXPathContext context = JXPathContext.newContext(container); [EOL]     context.getVariables().declareVariable("list", container); [EOL]     assertXPathValueAndPointer(context, "/", array, "/"); [EOL]     assertXPathValueAndPointer(context, "/.[1]", "foo", "/.[1]"); [EOL]     assertXPathValueAndPointer(context, "/.[2]", "bar", "/.[2]"); [EOL]     assertXPathSetValue(context, "/.[1]", "baz"); [EOL]     assertEquals("Checking setValue(index)", "baz", array[0]); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testBooleanFunction() { [EOL]     assertXPathValue(context, "boolean(vendor//saleEnds[../@stores = 'all'])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(vendor//promotion[../@stores = 'all'])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(vendor//promotion[../@stores = 'some'])", Boolean.FALSE); [EOL] }
public void testBooleanFunction() { [EOL]     assertXPathValue(context, "boolean(vendor//saleEnds[../@stores = 'all'])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(vendor//promotion[../@stores = 'all'])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(vendor//promotion[../@stores = 'some'])", Boolean.FALSE); [EOL] }
public void testBooleanFunction() { [EOL]     assertXPathValue(context, "boolean(vendor//saleEnds[../@stores = 'all'])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(vendor//promotion[../@stores = 'all'])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(vendor//promotion[../@stores = 'some'])", Boolean.FALSE); [EOL] }
public void testBooleanFunction() { [EOL]     assertXPathValue(context, "boolean(vendor//saleEnds[../@stores = 'all'])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(vendor//promotion[../@stores = 'all'])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(vendor//promotion[../@stores = 'some'])", Boolean.FALSE); [EOL] }
public void testBooleanFunction() { [EOL]     assertXPathValue(context, "boolean(vendor//saleEnds[../@stores = 'all'])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(vendor//promotion[../@stores = 'all'])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(vendor//promotion[../@stores = 'some'])", Boolean.FALSE); [EOL] }
public void testAxisSelf() { [EOL]     assertXPathValue(context, "//price:sale/self::price:sale/saleEnds", "never"); [EOL]     assertXPathValueLenient(context, "//price:sale/self::x/saleEnds", null); [EOL] }
public void testAxisSelf() { [EOL]     assertXPathValue(context, "//price:sale/self::price:sale/saleEnds", "never"); [EOL]     assertXPathValueLenient(context, "//price:sale/self::x/saleEnds", null); [EOL] }
public void testAxisSelf() { [EOL]     assertXPathValue(context, "//price:sale/self::price:sale/saleEnds", "never"); [EOL]     assertXPathValueLenient(context, "//price:sale/self::x/saleEnds", null); [EOL] }
public void testAxisSelf() { [EOL]     assertXPathValue(context, "//price:sale/self::price:sale/saleEnds", "never"); [EOL]     assertXPathValueLenient(context, "//price:sale/self::x/saleEnds", null); [EOL] }
public void testAxisSelf() { [EOL]     assertXPathValue(context, "//price:sale/self::price:sale/saleEnds", "never"); [EOL]     assertXPathValueLenient(context, "//price:sale/self::x/saleEnds", null); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testContainerRootWithCollection() { [EOL]     ArrayContainer container = new ArrayContainer(); [EOL]     String[] array = (String[]) container.getValue(); [EOL]     JXPathContext context = JXPathContext.newContext(container); [EOL]     context.getVariables().declareVariable("list", container); [EOL]     assertXPathValueAndPointer(context, "/", array, "/"); [EOL]     assertXPathValueAndPointer(context, "/.[1]", "foo", "/.[1]"); [EOL]     assertXPathValueAndPointer(context, "/.[2]", "bar", "/.[2]"); [EOL]     assertXPathSetValue(context, "/.[1]", "baz"); [EOL]     assertEquals("Checking setValue(index)", "baz", array[0]); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testAxisDescendantOrSelf() { [EOL]     assertXPathValueIterator(context, "descendant-or-self::name", set("Name 1", "Name 2", "Name 3", "Name 6", "Name 0", "Name 5", "Name 4")); [EOL]     assertXPathValueIterator(context, "//name", set("Name 1", "Name 2", "Name 3", "Name 6", "Name 0", "Name 5", "Name 4")); [EOL]     assertXPathValue(context, "count(descendant-or-self::root)", new Double(1)); [EOL]     assertXPathValue(context, "count(nestedBean//.)", new Double(7)); [EOL]     assertXPathValue(context, "count(//self::beans)", new Double(2)); [EOL]     assertXPathValue(context, "count(descendant-or-self::node())", new Double(66)); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testAxisDescendantOrSelf() { [EOL]     assertXPathValueIterator(context, "descendant-or-self::name", set("Name 1", "Name 2", "Name 3", "Name 6", "Name 0", "Name 5", "Name 4")); [EOL]     assertXPathValueIterator(context, "//name", set("Name 1", "Name 2", "Name 3", "Name 6", "Name 0", "Name 5", "Name 4")); [EOL]     assertXPathValue(context, "count(descendant-or-self::root)", new Double(1)); [EOL]     assertXPathValue(context, "count(nestedBean//.)", new Double(7)); [EOL]     assertXPathValue(context, "count(//self::beans)", new Double(2)); [EOL]     assertXPathValue(context, "count(descendant-or-self::node())", new Double(66)); [EOL] }
public void testAxisDescendantOrSelf() { [EOL]     assertXPathValueIterator(context, "descendant-or-self::name", set("Name 1", "Name 2", "Name 3", "Name 6", "Name 0", "Name 5", "Name 4")); [EOL]     assertXPathValueIterator(context, "//name", set("Name 1", "Name 2", "Name 3", "Name 6", "Name 0", "Name 5", "Name 4")); [EOL]     assertXPathValue(context, "count(descendant-or-self::root)", new Double(1)); [EOL]     assertXPathValue(context, "count(nestedBean//.)", new Double(7)); [EOL]     assertXPathValue(context, "count(//self::beans)", new Double(2)); [EOL]     assertXPathValue(context, "count(descendant-or-self::node())", new Double(66)); [EOL] }
public void testAxisDescendantOrSelf() { [EOL]     assertXPathValueIterator(context, "descendant-or-self::name", set("Name 1", "Name 2", "Name 3", "Name 6", "Name 0", "Name 5", "Name 4")); [EOL]     assertXPathValueIterator(context, "//name", set("Name 1", "Name 2", "Name 3", "Name 6", "Name 0", "Name 5", "Name 4")); [EOL]     assertXPathValue(context, "count(descendant-or-self::root)", new Double(1)); [EOL]     assertXPathValue(context, "count(nestedBean//.)", new Double(7)); [EOL]     assertXPathValue(context, "count(//self::beans)", new Double(2)); [EOL]     assertXPathValue(context, "count(descendant-or-self::node())", new Double(66)); [EOL] }
public void testAxisPrecedingSibling() { [EOL]     assertXPathValue(context, "count(/boolean/preceding-sibling::node())", new Double(2)); [EOL]     assertXPathValue(context, "count(/nestedBean/int/../preceding-sibling::node())", new Double(12)); [EOL]     assertXPathValue(context, "count(/descendant::int/preceding-sibling::node())", new Double(10)); [EOL] }
public void testAxisDescendantOrSelf() { [EOL]     assertXPathValueIterator(context, "descendant-or-self::name", set("Name 1", "Name 2", "Name 3", "Name 6", "Name 0", "Name 5", "Name 4")); [EOL]     assertXPathValueIterator(context, "//name", set("Name 1", "Name 2", "Name 3", "Name 6", "Name 0", "Name 5", "Name 4")); [EOL]     assertXPathValue(context, "count(descendant-or-self::root)", new Double(1)); [EOL]     assertXPathValue(context, "count(nestedBean//.)", new Double(7)); [EOL]     assertXPathValue(context, "count(//self::beans)", new Double(2)); [EOL]     assertXPathValue(context, "count(descendant-or-self::node())", new Double(66)); [EOL] }
public void testConstant() { [EOL]     assertXPathExpression("1", Constant.class); [EOL]     assertXPathExpression("1.5", Constant.class); [EOL]     assertXPathExpression("'foo'", Constant.class); [EOL] }
public void testDoStepNoPredicatesStandard() { [EOL]     assertValueAndPointer("/vendor/location/address/city", "Fruit Market", "/vendor/location[2]/address[1]/city[1]", "BbMMMM"); [EOL]     assertNullPointer("/vendor/location/address/pity", "/vendor/location[1]/address[1]/pity", "BbMMMn"); [EOL]     assertNullPointer("/vendor/location/address/itty/bitty", "/vendor/location[1]/address[1]/itty/bitty", "BbMMMnNn"); [EOL]     assertNullPointer("/vendor/location/address/city/pretty", "/vendor/location[2]/address[1]/city[1]/pretty", "BbMMMMn"); [EOL] }
public void testDoStepNoPredicatesStandard() { [EOL]     assertValueAndPointer("/vendor/location/address/city", "Fruit Market", "/vendor/location[2]/address[1]/city[1]", "BbMMMM"); [EOL]     assertNullPointer("/vendor/location/address/pity", "/vendor/location[1]/address[1]/pity", "BbMMMn"); [EOL]     assertNullPointer("/vendor/location/address/itty/bitty", "/vendor/location[1]/address[1]/itty/bitty", "BbMMMnNn"); [EOL]     assertNullPointer("/vendor/location/address/city/pretty", "/vendor/location[2]/address[1]/city[1]/pretty", "BbMMMMn"); [EOL] }
public void testDoStepNoPredicatesStandard() { [EOL]     assertValueAndPointer("/vendor/location/address/city", "Fruit Market", "/vendor/location[2]/address[1]/city[1]", "BbMMMM"); [EOL]     assertNullPointer("/vendor/location/address/pity", "/vendor/location[1]/address[1]/pity", "BbMMMn"); [EOL]     assertNullPointer("/vendor/location/address/itty/bitty", "/vendor/location[1]/address[1]/itty/bitty", "BbMMMnNn"); [EOL]     assertNullPointer("/vendor/location/address/city/pretty", "/vendor/location[2]/address[1]/city[1]/pretty", "BbMMMMn"); [EOL] }
public void testDoStepNoPredicatesStandard() { [EOL]     assertValueAndPointer("/vendor/location/address/city", "Fruit Market", "/vendor/location[2]/address[1]/city[1]", "BbMMMM"); [EOL]     assertNullPointer("/vendor/location/address/pity", "/vendor/location[1]/address[1]/pity", "BbMMMn"); [EOL]     assertNullPointer("/vendor/location/address/itty/bitty", "/vendor/location[1]/address[1]/itty/bitty", "BbMMMnNn"); [EOL]     assertNullPointer("/vendor/location/address/city/pretty", "/vendor/location[2]/address[1]/city[1]/pretty", "BbMMMMn"); [EOL] }
public void testDoStepNoPredicatesStandard() { [EOL]     assertValueAndPointer("/vendor/location/address/city", "Fruit Market", "/vendor/location[2]/address[1]/city[1]", "BbMMMM"); [EOL]     assertNullPointer("/vendor/location/address/pity", "/vendor/location[1]/address[1]/pity", "BbMMMn"); [EOL]     assertNullPointer("/vendor/location/address/itty/bitty", "/vendor/location[1]/address[1]/itty/bitty", "BbMMMnNn"); [EOL]     assertNullPointer("/vendor/location/address/city/pretty", "/vendor/location[2]/address[1]/city[1]/pretty", "BbMMMMn"); [EOL] }
public void testDoStepNoPredicatesStandard() { [EOL]     assertValueAndPointer("/vendor/location/address/city", "Fruit Market", "/vendor/location[2]/address[1]/city[1]", "BbMMMM"); [EOL]     assertNullPointer("/vendor/location/address/pity", "/vendor/location[1]/address[1]/pity", "BbMMMn"); [EOL]     assertNullPointer("/vendor/location/address/itty/bitty", "/vendor/location[1]/address[1]/itty/bitty", "BbMMMnNn"); [EOL]     assertNullPointer("/vendor/location/address/city/pretty", "/vendor/location[2]/address[1]/city[1]/pretty", "BbMMMMn"); [EOL] }
public void testDoStepNoPredicatesStandard() { [EOL]     assertValueAndPointer("/vendor/location/address/city", "Fruit Market", "/vendor/location[2]/address[1]/city[1]", "BbMMMM"); [EOL]     assertNullPointer("/vendor/location/address/pity", "/vendor/location[1]/address[1]/pity", "BbMMMn"); [EOL]     assertNullPointer("/vendor/location/address/itty/bitty", "/vendor/location[1]/address[1]/itty/bitty", "BbMMMnNn"); [EOL]     assertNullPointer("/vendor/location/address/city/pretty", "/vendor/location[2]/address[1]/city[1]/pretty", "BbMMMMn"); [EOL] }
public void testDoStepNoPredicatesStandard() { [EOL]     assertValueAndPointer("/vendor/location/address/city", "Fruit Market", "/vendor/location[2]/address[1]/city[1]", "BbMMMM"); [EOL]     assertNullPointer("/vendor/location/address/pity", "/vendor/location[1]/address[1]/pity", "BbMMMn"); [EOL]     assertNullPointer("/vendor/location/address/itty/bitty", "/vendor/location[1]/address[1]/itty/bitty", "BbMMMnNn"); [EOL]     assertNullPointer("/vendor/location/address/city/pretty", "/vendor/location[2]/address[1]/city[1]/pretty", "BbMMMMn"); [EOL] }
public void testDoStepNoPredicatesStandard() { [EOL]     assertValueAndPointer("/vendor/location/address/city", "Fruit Market", "/vendor/location[2]/address[1]/city[1]", "BbMMMM"); [EOL]     assertNullPointer("/vendor/location/address/pity", "/vendor/location[1]/address[1]/pity", "BbMMMn"); [EOL]     assertNullPointer("/vendor/location/address/itty/bitty", "/vendor/location[1]/address[1]/itty/bitty", "BbMMMnNn"); [EOL]     assertNullPointer("/vendor/location/address/city/pretty", "/vendor/location[2]/address[1]/city[1]/pretty", "BbMMMMn"); [EOL] }
public void testDoStepNoPredicatesStandard() { [EOL]     assertValueAndPointer("/vendor/location/address/city", "Fruit Market", "/vendor/location[2]/address[1]/city[1]", "BbMMMM"); [EOL]     assertNullPointer("/vendor/location/address/pity", "/vendor/location[1]/address[1]/pity", "BbMMMn"); [EOL]     assertNullPointer("/vendor/location/address/itty/bitty", "/vendor/location[1]/address[1]/itty/bitty", "BbMMMnNn"); [EOL]     assertNullPointer("/vendor/location/address/city/pretty", "/vendor/location[2]/address[1]/city[1]/pretty", "BbMMMMn"); [EOL] }
public void testDoStepNoPredicatesStandard() { [EOL]     assertValueAndPointer("/vendor/location/address/city", "Fruit Market", "/vendor/location[2]/address[1]/city[1]", "BbMMMM"); [EOL]     assertNullPointer("/vendor/location/address/pity", "/vendor/location[1]/address[1]/pity", "BbMMMn"); [EOL]     assertNullPointer("/vendor/location/address/itty/bitty", "/vendor/location[1]/address[1]/itty/bitty", "BbMMMnNn"); [EOL]     assertNullPointer("/vendor/location/address/city/pretty", "/vendor/location[2]/address[1]/city[1]/pretty", "BbMMMMn"); [EOL] }
public void testMethodLookupWithExpressionContext() { [EOL]     Object[] args = new Object[] { new TestFunctions() }; [EOL]     Function func = functions.getFunction("test", "instancePath", args); [EOL]     assertEquals("test:instancePath()", func.invoke(new Context(new Integer(1)), args), "1"); [EOL] }
public void testMethodLookupWithExpressionContext() { [EOL]     Object[] args = new Object[] { new TestFunctions() }; [EOL]     Function func = functions.getFunction("test", "instancePath", args); [EOL]     assertEquals("test:instancePath()", func.invoke(new Context(new Integer(1)), args), "1"); [EOL] }
public void testMethodLookupWithExpressionContext() { [EOL]     Object[] args = new Object[] { new TestFunctions() }; [EOL]     Function func = functions.getFunction("test", "instancePath", args); [EOL]     assertEquals("test:instancePath()", func.invoke(new Context(new Integer(1)), args), "1"); [EOL] }
public void testMethodLookupWithExpressionContext() { [EOL]     Object[] args = new Object[] { new TestFunctions() }; [EOL]     Function func = functions.getFunction("test", "instancePath", args); [EOL]     assertEquals("test:instancePath()", func.invoke(new Context(new Integer(1)), args), "1"); [EOL] }
public void testMethodLookupWithExpressionContext() { [EOL]     Object[] args = new Object[] { new TestFunctions() }; [EOL]     Function func = functions.getFunction("test", "instancePath", args); [EOL]     assertEquals("test:instancePath()", func.invoke(new Context(new Integer(1)), args), "1"); [EOL] }
public void testMethodLookupWithExpressionContext() { [EOL]     Object[] args = new Object[] { new TestFunctions() }; [EOL]     Function func = functions.getFunction("test", "instancePath", args); [EOL]     assertEquals("test:instancePath()", func.invoke(new Context(new Integer(1)), args), "1"); [EOL] }
public void testExtensionFunction() { [EOL]     assertXPathExpression("my:function(3, other.function())", ExtensionFunction.class); [EOL] }
public void testExtensionFunction() { [EOL]     assertXPathExpression("my:function(3, other.function())", ExtensionFunction.class); [EOL] }
public void testExtensionFunction() { [EOL]     assertXPathExpression("my:function(3, other.function())", ExtensionFunction.class); [EOL] }
public void testMethodLookupWithExpressionContext() { [EOL]     Object[] args = new Object[] { new TestFunctions() }; [EOL]     Function func = functions.getFunction("test", "instancePath", args); [EOL]     assertEquals("test:instancePath()", func.invoke(new Context(new Integer(1)), args), "1"); [EOL] }
public void testMethodLookupWithExpressionContext() { [EOL]     Object[] args = new Object[] { new TestFunctions() }; [EOL]     Function func = functions.getFunction("test", "instancePath", args); [EOL]     assertEquals("test:instancePath()", func.invoke(new Context(new Integer(1)), args), "1"); [EOL] }
public void testMethodLookupWithExpressionContext() { [EOL]     Object[] args = new Object[] { new TestFunctions() }; [EOL]     Function func = functions.getFunction("test", "instancePath", args); [EOL]     assertEquals("test:instancePath()", func.invoke(new Context(new Integer(1)), args), "1"); [EOL] }
public void testMethodLookupWithExpressionContext() { [EOL]     Object[] args = new Object[] { new TestFunctions() }; [EOL]     Function func = functions.getFunction("test", "instancePath", args); [EOL]     assertEquals("test:instancePath()", func.invoke(new Context(new Integer(1)), args), "1"); [EOL] }
public void testMethodLookupWithExpressionContext() { [EOL]     Object[] args = new Object[] { new TestFunctions() }; [EOL]     Function func = functions.getFunction("test", "instancePath", args); [EOL]     assertEquals("test:instancePath()", func.invoke(new Context(new Integer(1)), args), "1"); [EOL] }
public void testMethodLookupWithExpressionContext() { [EOL]     Object[] args = new Object[] { new TestFunctions() }; [EOL]     Function func = functions.getFunction("test", "instancePath", args); [EOL]     assertEquals("test:instancePath()", func.invoke(new Context(new Integer(1)), args), "1"); [EOL] }
public void testMethodLookupWithExpressionContext() { [EOL]     Object[] args = new Object[] { new TestFunctions() }; [EOL]     Function func = functions.getFunction("test", "instancePath", args); [EOL]     assertEquals("test:instancePath()", func.invoke(new Context(new Integer(1)), args), "1"); [EOL] }
public void testMethodLookupWithExpressionContext() { [EOL]     Object[] args = new Object[] { new TestFunctions() }; [EOL]     Function func = functions.getFunction("test", "instancePath", args); [EOL]     assertEquals("test:instancePath()", func.invoke(new Context(new Integer(1)), args), "1"); [EOL] }
public void testMethodLookupWithExpressionContext() { [EOL]     Object[] args = new Object[] { new TestFunctions() }; [EOL]     Function func = functions.getFunction("test", "instancePath", args); [EOL]     assertEquals("test:instancePath()", func.invoke(new Context(new Integer(1)), args), "1"); [EOL] }
public void testMethodLookupWithExpressionContext() { [EOL]     Object[] args = new Object[] { new TestFunctions() }; [EOL]     Function func = functions.getFunction("test", "instancePath", args); [EOL]     assertEquals("test:instancePath()", func.invoke(new Context(new Integer(1)), args), "1"); [EOL] }
public void testMethodLookupWithExpressionContext() { [EOL]     Object[] args = new Object[] { new TestFunctions() }; [EOL]     Function func = functions.getFunction("test", "instancePath", args); [EOL]     assertEquals("test:instancePath()", func.invoke(new Context(new Integer(1)), args), "1"); [EOL] }
public void testMethodLookupWithExpressionContext() { [EOL]     Object[] args = new Object[] { new TestFunctions() }; [EOL]     Function func = functions.getFunction("test", "instancePath", args); [EOL]     assertEquals("test:instancePath()", func.invoke(new Context(new Integer(1)), args), "1"); [EOL] }
public void testMethodLookupWithExpressionContext() { [EOL]     Object[] args = new Object[] { new TestFunctions() }; [EOL]     Function func = functions.getFunction("test", "instancePath", args); [EOL]     assertEquals("test:instancePath()", func.invoke(new Context(new Integer(1)), args), "1"); [EOL] }
public void testMethodLookupWithExpressionContext() { [EOL]     Object[] args = new Object[] { new TestFunctions() }; [EOL]     Function func = functions.getFunction("test", "instancePath", args); [EOL]     assertEquals("test:instancePath()", func.invoke(new Context(new Integer(1)), args), "1"); [EOL] }
public void testMethodLookupWithExpressionContext() { [EOL]     Object[] args = new Object[] { new TestFunctions() }; [EOL]     Function func = functions.getFunction("test", "instancePath", args); [EOL]     assertEquals("test:instancePath()", func.invoke(new Context(new Integer(1)), args), "1"); [EOL] }
public void testMethodLookupWithExpressionContext() { [EOL]     Object[] args = new Object[] { new TestFunctions() }; [EOL]     Function func = functions.getFunction("test", "instancePath", args); [EOL]     assertEquals("test:instancePath()", func.invoke(new Context(new Integer(1)), args), "1"); [EOL] }
public void testDoPredicatesStandard() { [EOL]     assertValueAndPointer("map[@name='Key3'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertNullPointer("map[@name='Key3'][@name='foo']", "/map[@name='Key3'][4][@name='foo']", "BbDdCDd"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL]     assertNullPointer("map[@name='Key6'][@name='fruitco']", "/map[@name='Key6'][@name='fruitco']", "BbDdCn"); [EOL]     assertValueAndPointer("/vendor/contact[@name='jack'][2]", "Jack Black", "/vendor/contact[4]", "BbMM"); [EOL]     assertNullPointer("/vendor/contact[@name='jack'][5]", "/vendor/contact[@name='jack'][5]", "BbMnNn"); [EOL]     assertValueAndPointer("/vendor/contact/.[@name='jack']", "Jack", "/vendor/contact[2]", "BbMM"); [EOL] }
public void testDoPredicatesStandard() { [EOL]     assertValueAndPointer("map[@name='Key3'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertNullPointer("map[@name='Key3'][@name='foo']", "/map[@name='Key3'][4][@name='foo']", "BbDdCDd"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL]     assertNullPointer("map[@name='Key6'][@name='fruitco']", "/map[@name='Key6'][@name='fruitco']", "BbDdCn"); [EOL]     assertValueAndPointer("/vendor/contact[@name='jack'][2]", "Jack Black", "/vendor/contact[4]", "BbMM"); [EOL]     assertNullPointer("/vendor/contact[@name='jack'][5]", "/vendor/contact[@name='jack'][5]", "BbMnNn"); [EOL]     assertValueAndPointer("/vendor/contact/.[@name='jack']", "Jack", "/vendor/contact[2]", "BbMM"); [EOL] }
public void testDoPredicatesStandard() { [EOL]     assertValueAndPointer("map[@name='Key3'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertNullPointer("map[@name='Key3'][@name='foo']", "/map[@name='Key3'][4][@name='foo']", "BbDdCDd"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL]     assertNullPointer("map[@name='Key6'][@name='fruitco']", "/map[@name='Key6'][@name='fruitco']", "BbDdCn"); [EOL]     assertValueAndPointer("/vendor/contact[@name='jack'][2]", "Jack Black", "/vendor/contact[4]", "BbMM"); [EOL]     assertNullPointer("/vendor/contact[@name='jack'][5]", "/vendor/contact[@name='jack'][5]", "BbMnNn"); [EOL]     assertValueAndPointer("/vendor/contact/.[@name='jack']", "Jack", "/vendor/contact[2]", "BbMM"); [EOL] }
public void testDoPredicatesStandard() { [EOL]     assertValueAndPointer("map[@name='Key3'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertNullPointer("map[@name='Key3'][@name='foo']", "/map[@name='Key3'][4][@name='foo']", "BbDdCDd"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL]     assertNullPointer("map[@name='Key6'][@name='fruitco']", "/map[@name='Key6'][@name='fruitco']", "BbDdCn"); [EOL]     assertValueAndPointer("/vendor/contact[@name='jack'][2]", "Jack Black", "/vendor/contact[4]", "BbMM"); [EOL]     assertNullPointer("/vendor/contact[@name='jack'][5]", "/vendor/contact[@name='jack'][5]", "BbMnNn"); [EOL]     assertValueAndPointer("/vendor/contact/.[@name='jack']", "Jack", "/vendor/contact[2]", "BbMM"); [EOL] }
public void testDoPredicatesStandard() { [EOL]     assertValueAndPointer("map[@name='Key3'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertNullPointer("map[@name='Key3'][@name='foo']", "/map[@name='Key3'][4][@name='foo']", "BbDdCDd"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL]     assertNullPointer("map[@name='Key6'][@name='fruitco']", "/map[@name='Key6'][@name='fruitco']", "BbDdCn"); [EOL]     assertValueAndPointer("/vendor/contact[@name='jack'][2]", "Jack Black", "/vendor/contact[4]", "BbMM"); [EOL]     assertNullPointer("/vendor/contact[@name='jack'][5]", "/vendor/contact[@name='jack'][5]", "BbMnNn"); [EOL]     assertValueAndPointer("/vendor/contact/.[@name='jack']", "Jack", "/vendor/contact[2]", "BbMM"); [EOL] }
public void testGetNode() { [EOL]     assertXPathNodeType(context, "/", Document.class); [EOL]     assertXPathNodeType(context, "/vendor/location", Element.class); [EOL]     assertXPathNodeType(context, "//location/@name", Attr.class); [EOL]     assertXPathNodeType(context, "//vendor", Element.class); [EOL] }
public void testGetNode() { [EOL]     assertXPathNodeType(context, "/", Document.class); [EOL]     assertXPathNodeType(context, "/vendor/location", Element.class); [EOL]     assertXPathNodeType(context, "//location/@name", Attr.class); [EOL]     assertXPathNodeType(context, "//vendor", Element.class); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testContainerRootWithCollection() { [EOL]     ArrayContainer container = new ArrayContainer(); [EOL]     String[] array = (String[]) container.getValue(); [EOL]     JXPathContext context = JXPathContext.newContext(container); [EOL]     context.getVariables().declareVariable("list", container); [EOL]     assertXPathValueAndPointer(context, "/", array, "/"); [EOL]     assertXPathValueAndPointer(context, "/.[1]", "foo", "/.[1]"); [EOL]     assertXPathValueAndPointer(context, "/.[2]", "bar", "/.[2]"); [EOL]     assertXPathSetValue(context, "/.[1]", "baz"); [EOL]     assertEquals("Checking setValue(index)", "baz", array[0]); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testArrayToList() { [EOL]     assertConversion(new int[] { 1, 2 }, List.class, Arrays.asList(new Object[] { new Integer(1), new Integer(2) })); [EOL] }
public void testArrayToList() { [EOL]     assertConversion(new int[] { 1, 2 }, List.class, Arrays.asList(new Object[] { new Integer(1), new Integer(2) })); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testConstructorLookupWithExpressionContext() { [EOL]     Object[] args = new Object[] { "baz" }; [EOL]     Function func = functions.getFunction("test", "new", args); [EOL]     assertEquals("test:new('baz')", func.invoke(new Context(new Integer(1)), args).toString(), "foo=1; bar=baz"); [EOL] }
public void testDoPredicatesStandard() { [EOL]     assertValueAndPointer("map[@name='Key3'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertNullPointer("map[@name='Key3'][@name='foo']", "/map[@name='Key3'][4][@name='foo']", "BbDdCDd"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL]     assertNullPointer("map[@name='Key6'][@name='fruitco']", "/map[@name='Key6'][@name='fruitco']", "BbDdCn"); [EOL]     assertValueAndPointer("/vendor/contact[@name='jack'][2]", "Jack Black", "/vendor/contact[4]", "BbMM"); [EOL]     assertNullPointer("/vendor/contact[@name='jack'][5]", "/vendor/contact[@name='jack'][5]", "BbMnNn"); [EOL]     assertValueAndPointer("/vendor/contact/.[@name='jack']", "Jack", "/vendor/contact[2]", "BbMM"); [EOL] }
public void testDoPredicatesStandard() { [EOL]     assertValueAndPointer("map[@name='Key3'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertNullPointer("map[@name='Key3'][@name='foo']", "/map[@name='Key3'][4][@name='foo']", "BbDdCDd"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL]     assertNullPointer("map[@name='Key6'][@name='fruitco']", "/map[@name='Key6'][@name='fruitco']", "BbDdCn"); [EOL]     assertValueAndPointer("/vendor/contact[@name='jack'][2]", "Jack Black", "/vendor/contact[4]", "BbMM"); [EOL]     assertNullPointer("/vendor/contact[@name='jack'][5]", "/vendor/contact[@name='jack'][5]", "BbMnNn"); [EOL]     assertValueAndPointer("/vendor/contact/.[@name='jack']", "Jack", "/vendor/contact[2]", "BbMM"); [EOL] }
public void testDoPredicatesStandard() { [EOL]     assertValueAndPointer("map[@name='Key3'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertNullPointer("map[@name='Key3'][@name='foo']", "/map[@name='Key3'][4][@name='foo']", "BbDdCDd"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL]     assertNullPointer("map[@name='Key6'][@name='fruitco']", "/map[@name='Key6'][@name='fruitco']", "BbDdCn"); [EOL]     assertValueAndPointer("/vendor/contact[@name='jack'][2]", "Jack Black", "/vendor/contact[4]", "BbMM"); [EOL]     assertNullPointer("/vendor/contact[@name='jack'][5]", "/vendor/contact[@name='jack'][5]", "BbMnNn"); [EOL]     assertValueAndPointer("/vendor/contact/.[@name='jack']", "Jack", "/vendor/contact[2]", "BbMM"); [EOL] }
public void testDoPredicatesStandard() { [EOL]     assertValueAndPointer("map[@name='Key3'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertNullPointer("map[@name='Key3'][@name='foo']", "/map[@name='Key3'][4][@name='foo']", "BbDdCDd"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL]     assertNullPointer("map[@name='Key6'][@name='fruitco']", "/map[@name='Key6'][@name='fruitco']", "BbDdCn"); [EOL]     assertValueAndPointer("/vendor/contact[@name='jack'][2]", "Jack Black", "/vendor/contact[4]", "BbMM"); [EOL]     assertNullPointer("/vendor/contact[@name='jack'][5]", "/vendor/contact[@name='jack'][5]", "BbMnNn"); [EOL]     assertValueAndPointer("/vendor/contact/.[@name='jack']", "Jack", "/vendor/contact[2]", "BbMM"); [EOL] }
public void testDoPredicatesStandard() { [EOL]     assertValueAndPointer("map[@name='Key3'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertNullPointer("map[@name='Key3'][@name='foo']", "/map[@name='Key3'][4][@name='foo']", "BbDdCDd"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL]     assertNullPointer("map[@name='Key6'][@name='fruitco']", "/map[@name='Key6'][@name='fruitco']", "BbDdCn"); [EOL]     assertValueAndPointer("/vendor/contact[@name='jack'][2]", "Jack Black", "/vendor/contact[4]", "BbMM"); [EOL]     assertNullPointer("/vendor/contact[@name='jack'][5]", "/vendor/contact[@name='jack'][5]", "BbMnNn"); [EOL]     assertValueAndPointer("/vendor/contact/.[@name='jack']", "Jack", "/vendor/contact[2]", "BbMM"); [EOL] }
public void testDoPredicatesStandard() { [EOL]     assertValueAndPointer("map[@name='Key3'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertNullPointer("map[@name='Key3'][@name='foo']", "/map[@name='Key3'][4][@name='foo']", "BbDdCDd"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL]     assertNullPointer("map[@name='Key6'][@name='fruitco']", "/map[@name='Key6'][@name='fruitco']", "BbDdCn"); [EOL]     assertValueAndPointer("/vendor/contact[@name='jack'][2]", "Jack Black", "/vendor/contact[4]", "BbMM"); [EOL]     assertNullPointer("/vendor/contact[@name='jack'][5]", "/vendor/contact[@name='jack'][5]", "BbMnNn"); [EOL]     assertValueAndPointer("/vendor/contact/.[@name='jack']", "Jack", "/vendor/contact[2]", "BbMM"); [EOL] }
public void testDoPredicatesStandard() { [EOL]     assertValueAndPointer("map[@name='Key3'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertNullPointer("map[@name='Key3'][@name='foo']", "/map[@name='Key3'][4][@name='foo']", "BbDdCDd"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL]     assertNullPointer("map[@name='Key6'][@name='fruitco']", "/map[@name='Key6'][@name='fruitco']", "BbDdCn"); [EOL]     assertValueAndPointer("/vendor/contact[@name='jack'][2]", "Jack Black", "/vendor/contact[4]", "BbMM"); [EOL]     assertNullPointer("/vendor/contact[@name='jack'][5]", "/vendor/contact[@name='jack'][5]", "BbMnNn"); [EOL]     assertValueAndPointer("/vendor/contact/.[@name='jack']", "Jack", "/vendor/contact[2]", "BbMM"); [EOL] }
public void testDoPredicatesStandard() { [EOL]     assertValueAndPointer("map[@name='Key3'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertNullPointer("map[@name='Key3'][@name='foo']", "/map[@name='Key3'][4][@name='foo']", "BbDdCDd"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL]     assertNullPointer("map[@name='Key6'][@name='fruitco']", "/map[@name='Key6'][@name='fruitco']", "BbDdCn"); [EOL]     assertValueAndPointer("/vendor/contact[@name='jack'][2]", "Jack Black", "/vendor/contact[4]", "BbMM"); [EOL]     assertNullPointer("/vendor/contact[@name='jack'][5]", "/vendor/contact[@name='jack'][5]", "BbMnNn"); [EOL]     assertValueAndPointer("/vendor/contact/.[@name='jack']", "Jack", "/vendor/contact[2]", "BbMM"); [EOL] }
public void testDoPredicatesStandard() { [EOL]     assertValueAndPointer("map[@name='Key3'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertNullPointer("map[@name='Key3'][@name='foo']", "/map[@name='Key3'][4][@name='foo']", "BbDdCDd"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL]     assertNullPointer("map[@name='Key6'][@name='fruitco']", "/map[@name='Key6'][@name='fruitco']", "BbDdCn"); [EOL]     assertValueAndPointer("/vendor/contact[@name='jack'][2]", "Jack Black", "/vendor/contact[4]", "BbMM"); [EOL]     assertNullPointer("/vendor/contact[@name='jack'][5]", "/vendor/contact[@name='jack'][5]", "BbMnNn"); [EOL]     assertValueAndPointer("/vendor/contact/.[@name='jack']", "Jack", "/vendor/contact[2]", "BbMM"); [EOL] }
public void testDoPredicatesStandard() { [EOL]     assertValueAndPointer("map[@name='Key3'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertNullPointer("map[@name='Key3'][@name='foo']", "/map[@name='Key3'][4][@name='foo']", "BbDdCDd"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL]     assertNullPointer("map[@name='Key6'][@name='fruitco']", "/map[@name='Key6'][@name='fruitco']", "BbDdCn"); [EOL]     assertValueAndPointer("/vendor/contact[@name='jack'][2]", "Jack Black", "/vendor/contact[4]", "BbMM"); [EOL]     assertNullPointer("/vendor/contact[@name='jack'][5]", "/vendor/contact[@name='jack'][5]", "BbMnNn"); [EOL]     assertValueAndPointer("/vendor/contact/.[@name='jack']", "Jack", "/vendor/contact[2]", "BbMM"); [EOL] }
public void testDoPredicatesStandard() { [EOL]     assertValueAndPointer("map[@name='Key3'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertNullPointer("map[@name='Key3'][@name='foo']", "/map[@name='Key3'][4][@name='foo']", "BbDdCDd"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL]     assertNullPointer("map[@name='Key6'][@name='fruitco']", "/map[@name='Key6'][@name='fruitco']", "BbDdCn"); [EOL]     assertValueAndPointer("/vendor/contact[@name='jack'][2]", "Jack Black", "/vendor/contact[4]", "BbMM"); [EOL]     assertNullPointer("/vendor/contact[@name='jack'][5]", "/vendor/contact[@name='jack'][5]", "BbMnNn"); [EOL]     assertValueAndPointer("/vendor/contact/.[@name='jack']", "Jack", "/vendor/contact[2]", "BbMM"); [EOL] }
public void testDoPredicatesStandard() { [EOL]     assertValueAndPointer("map[@name='Key3'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertNullPointer("map[@name='Key3'][@name='foo']", "/map[@name='Key3'][4][@name='foo']", "BbDdCDd"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL]     assertNullPointer("map[@name='Key6'][@name='fruitco']", "/map[@name='Key6'][@name='fruitco']", "BbDdCn"); [EOL]     assertValueAndPointer("/vendor/contact[@name='jack'][2]", "Jack Black", "/vendor/contact[4]", "BbMM"); [EOL]     assertNullPointer("/vendor/contact[@name='jack'][5]", "/vendor/contact[@name='jack'][5]", "BbMnNn"); [EOL]     assertValueAndPointer("/vendor/contact/.[@name='jack']", "Jack", "/vendor/contact[2]", "BbMM"); [EOL] }
public void testDoPredicatesStandard() { [EOL]     assertValueAndPointer("map[@name='Key3'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertNullPointer("map[@name='Key3'][@name='foo']", "/map[@name='Key3'][4][@name='foo']", "BbDdCDd"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL]     assertNullPointer("map[@name='Key6'][@name='fruitco']", "/map[@name='Key6'][@name='fruitco']", "BbDdCn"); [EOL]     assertValueAndPointer("/vendor/contact[@name='jack'][2]", "Jack Black", "/vendor/contact[4]", "BbMM"); [EOL]     assertNullPointer("/vendor/contact[@name='jack'][5]", "/vendor/contact[@name='jack'][5]", "BbMnNn"); [EOL]     assertValueAndPointer("/vendor/contact/.[@name='jack']", "Jack", "/vendor/contact[2]", "BbMM"); [EOL] }
public void testDoPredicatesStandard() { [EOL]     assertValueAndPointer("map[@name='Key3'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertNullPointer("map[@name='Key3'][@name='foo']", "/map[@name='Key3'][4][@name='foo']", "BbDdCDd"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL]     assertNullPointer("map[@name='Key6'][@name='fruitco']", "/map[@name='Key6'][@name='fruitco']", "BbDdCn"); [EOL]     assertValueAndPointer("/vendor/contact[@name='jack'][2]", "Jack Black", "/vendor/contact[4]", "BbMM"); [EOL]     assertNullPointer("/vendor/contact[@name='jack'][5]", "/vendor/contact[@name='jack'][5]", "BbMnNn"); [EOL]     assertValueAndPointer("/vendor/contact/.[@name='jack']", "Jack", "/vendor/contact[2]", "BbMM"); [EOL] }
public void testContainerRootWithCollection() { [EOL]     ArrayContainer container = new ArrayContainer(); [EOL]     String[] array = (String[]) container.getValue(); [EOL]     JXPathContext context = JXPathContext.newContext(container); [EOL]     context.getVariables().declareVariable("list", container); [EOL]     assertXPathValueAndPointer(context, "/", array, "/"); [EOL]     assertXPathValueAndPointer(context, "/.[1]", "foo", "/.[1]"); [EOL]     assertXPathValueAndPointer(context, "/.[2]", "bar", "/.[2]"); [EOL]     assertXPathSetValue(context, "/.[1]", "baz"); [EOL]     assertEquals("Checking setValue(index)", "baz", array[0]); [EOL] }
public void testContainerRootWithCollection() { [EOL]     ArrayContainer container = new ArrayContainer(); [EOL]     String[] array = (String[]) container.getValue(); [EOL]     JXPathContext context = JXPathContext.newContext(container); [EOL]     context.getVariables().declareVariable("list", container); [EOL]     assertXPathValueAndPointer(context, "/", array, "/"); [EOL]     assertXPathValueAndPointer(context, "/.[1]", "foo", "/.[1]"); [EOL]     assertXPathValueAndPointer(context, "/.[2]", "bar", "/.[2]"); [EOL]     assertXPathSetValue(context, "/.[1]", "baz"); [EOL]     assertEquals("Checking setValue(index)", "baz", array[0]); [EOL] }
public void testContainerRootWithCollection() { [EOL]     ArrayContainer container = new ArrayContainer(); [EOL]     String[] array = (String[]) container.getValue(); [EOL]     JXPathContext context = JXPathContext.newContext(container); [EOL]     context.getVariables().declareVariable("list", container); [EOL]     assertXPathValueAndPointer(context, "/", array, "/"); [EOL]     assertXPathValueAndPointer(context, "/.[1]", "foo", "/.[1]"); [EOL]     assertXPathValueAndPointer(context, "/.[2]", "bar", "/.[2]"); [EOL]     assertXPathSetValue(context, "/.[1]", "baz"); [EOL]     assertEquals("Checking setValue(index)", "baz", array[0]); [EOL] }
public void testContainerRootWithCollection() { [EOL]     ArrayContainer container = new ArrayContainer(); [EOL]     String[] array = (String[]) container.getValue(); [EOL]     JXPathContext context = JXPathContext.newContext(container); [EOL]     context.getVariables().declareVariable("list", container); [EOL]     assertXPathValueAndPointer(context, "/", array, "/"); [EOL]     assertXPathValueAndPointer(context, "/.[1]", "foo", "/.[1]"); [EOL]     assertXPathValueAndPointer(context, "/.[2]", "bar", "/.[2]"); [EOL]     assertXPathSetValue(context, "/.[1]", "baz"); [EOL]     assertEquals("Checking setValue(index)", "baz", array[0]); [EOL] }
public void testContainerRootWithCollection() { [EOL]     ArrayContainer container = new ArrayContainer(); [EOL]     String[] array = (String[]) container.getValue(); [EOL]     JXPathContext context = JXPathContext.newContext(container); [EOL]     context.getVariables().declareVariable("list", container); [EOL]     assertXPathValueAndPointer(context, "/", array, "/"); [EOL]     assertXPathValueAndPointer(context, "/.[1]", "foo", "/.[1]"); [EOL]     assertXPathValueAndPointer(context, "/.[2]", "bar", "/.[2]"); [EOL]     assertXPathSetValue(context, "/.[1]", "baz"); [EOL]     assertEquals("Checking setValue(index)", "baz", array[0]); [EOL] }
public void testContainerRootWithCollection() { [EOL]     ArrayContainer container = new ArrayContainer(); [EOL]     String[] array = (String[]) container.getValue(); [EOL]     JXPathContext context = JXPathContext.newContext(container); [EOL]     context.getVariables().declareVariable("list", container); [EOL]     assertXPathValueAndPointer(context, "/", array, "/"); [EOL]     assertXPathValueAndPointer(context, "/.[1]", "foo", "/.[1]"); [EOL]     assertXPathValueAndPointer(context, "/.[2]", "bar", "/.[2]"); [EOL]     assertXPathSetValue(context, "/.[1]", "baz"); [EOL]     assertEquals("Checking setValue(index)", "baz", array[0]); [EOL] }
public void testContainerRootWithCollection() { [EOL]     ArrayContainer container = new ArrayContainer(); [EOL]     String[] array = (String[]) container.getValue(); [EOL]     JXPathContext context = JXPathContext.newContext(container); [EOL]     context.getVariables().declareVariable("list", container); [EOL]     assertXPathValueAndPointer(context, "/", array, "/"); [EOL]     assertXPathValueAndPointer(context, "/.[1]", "foo", "/.[1]"); [EOL]     assertXPathValueAndPointer(context, "/.[2]", "bar", "/.[2]"); [EOL]     assertXPathSetValue(context, "/.[1]", "baz"); [EOL]     assertEquals("Checking setValue(index)", "baz", array[0]); [EOL] }
public void testContainerRootWithCollection() { [EOL]     ArrayContainer container = new ArrayContainer(); [EOL]     String[] array = (String[]) container.getValue(); [EOL]     JXPathContext context = JXPathContext.newContext(container); [EOL]     context.getVariables().declareVariable("list", container); [EOL]     assertXPathValueAndPointer(context, "/", array, "/"); [EOL]     assertXPathValueAndPointer(context, "/.[1]", "foo", "/.[1]"); [EOL]     assertXPathValueAndPointer(context, "/.[2]", "bar", "/.[2]"); [EOL]     assertXPathSetValue(context, "/.[1]", "baz"); [EOL]     assertEquals("Checking setValue(index)", "baz", array[0]); [EOL] }
public void testContainerRootWithCollection() { [EOL]     ArrayContainer container = new ArrayContainer(); [EOL]     String[] array = (String[]) container.getValue(); [EOL]     JXPathContext context = JXPathContext.newContext(container); [EOL]     context.getVariables().declareVariable("list", container); [EOL]     assertXPathValueAndPointer(context, "/", array, "/"); [EOL]     assertXPathValueAndPointer(context, "/.[1]", "foo", "/.[1]"); [EOL]     assertXPathValueAndPointer(context, "/.[2]", "bar", "/.[2]"); [EOL]     assertXPathSetValue(context, "/.[1]", "baz"); [EOL]     assertEquals("Checking setValue(index)", "baz", array[0]); [EOL] }
public void testContainerRootWithCollection() { [EOL]     ArrayContainer container = new ArrayContainer(); [EOL]     String[] array = (String[]) container.getValue(); [EOL]     JXPathContext context = JXPathContext.newContext(container); [EOL]     context.getVariables().declareVariable("list", container); [EOL]     assertXPathValueAndPointer(context, "/", array, "/"); [EOL]     assertXPathValueAndPointer(context, "/.[1]", "foo", "/.[1]"); [EOL]     assertXPathValueAndPointer(context, "/.[2]", "bar", "/.[2]"); [EOL]     assertXPathSetValue(context, "/.[1]", "baz"); [EOL]     assertEquals("Checking setValue(index)", "baz", array[0]); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testCoreOperationDivide() { [EOL]     assertXPathExpression("2 div 4", CoreOperationDivide.class); [EOL]     assertXPathExpression("2|3 div -3", CoreOperationDivide.class, "2 | 3 div -3"); [EOL] }
public void testCoreOperationDivide() { [EOL]     assertXPathExpression("2 div 4", CoreOperationDivide.class); [EOL]     assertXPathExpression("2|3 div -3", CoreOperationDivide.class, "2 | 3 div -3"); [EOL] }
public void testCoreOperationDivide() { [EOL]     assertXPathExpression("2 div 4", CoreOperationDivide.class); [EOL]     assertXPathExpression("2|3 div -3", CoreOperationDivide.class, "2 | 3 div -3"); [EOL] }
public void testCoreOperationDivide() { [EOL]     assertXPathExpression("2 div 4", CoreOperationDivide.class); [EOL]     assertXPathExpression("2|3 div -3", CoreOperationDivide.class, "2 | 3 div -3"); [EOL] }
public void testContainerRootWithCollection() { [EOL]     ArrayContainer container = new ArrayContainer(); [EOL]     String[] array = (String[]) container.getValue(); [EOL]     JXPathContext context = JXPathContext.newContext(container); [EOL]     context.getVariables().declareVariable("list", container); [EOL]     assertXPathValueAndPointer(context, "/", array, "/"); [EOL]     assertXPathValueAndPointer(context, "/.[1]", "foo", "/.[1]"); [EOL]     assertXPathValueAndPointer(context, "/.[2]", "bar", "/.[2]"); [EOL]     assertXPathSetValue(context, "/.[1]", "baz"); [EOL]     assertEquals("Checking setValue(index)", "baz", array[0]); [EOL] }
public void testContainerRootWithCollection() { [EOL]     ArrayContainer container = new ArrayContainer(); [EOL]     String[] array = (String[]) container.getValue(); [EOL]     JXPathContext context = JXPathContext.newContext(container); [EOL]     context.getVariables().declareVariable("list", container); [EOL]     assertXPathValueAndPointer(context, "/", array, "/"); [EOL]     assertXPathValueAndPointer(context, "/.[1]", "foo", "/.[1]"); [EOL]     assertXPathValueAndPointer(context, "/.[2]", "bar", "/.[2]"); [EOL]     assertXPathSetValue(context, "/.[1]", "baz"); [EOL]     assertEquals("Checking setValue(index)", "baz", array[0]); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testDocument() { [EOL]     assertXPathValue(context, "$document/vendor/location[1]//street", "Orchard Road"); [EOL]     assertXPathPointer(context, "$document/vendor/location[1]//street", "$document/vendor[1]/location[1]/address[1]/street[1]"); [EOL]     assertXPathValue(context, "$document/vendor//street", "Orchard Road"); [EOL] }
public void testContainerRootWithCollection() { [EOL]     ArrayContainer container = new ArrayContainer(); [EOL]     String[] array = (String[]) container.getValue(); [EOL]     JXPathContext context = JXPathContext.newContext(container); [EOL]     context.getVariables().declareVariable("list", container); [EOL]     assertXPathValueAndPointer(context, "/", array, "/"); [EOL]     assertXPathValueAndPointer(context, "/.[1]", "foo", "/.[1]"); [EOL]     assertXPathValueAndPointer(context, "/.[2]", "bar", "/.[2]"); [EOL]     assertXPathSetValue(context, "/.[1]", "baz"); [EOL]     assertEquals("Checking setValue(index)", "baz", array[0]); [EOL] }
public void testContainerRootWithCollection() { [EOL]     ArrayContainer container = new ArrayContainer(); [EOL]     String[] array = (String[]) container.getValue(); [EOL]     JXPathContext context = JXPathContext.newContext(container); [EOL]     context.getVariables().declareVariable("list", container); [EOL]     assertXPathValueAndPointer(context, "/", array, "/"); [EOL]     assertXPathValueAndPointer(context, "/.[1]", "foo", "/.[1]"); [EOL]     assertXPathValueAndPointer(context, "/.[2]", "bar", "/.[2]"); [EOL]     assertXPathSetValue(context, "/.[1]", "baz"); [EOL]     assertEquals("Checking setValue(index)", "baz", array[0]); [EOL] }
public void testContainerRootWithCollection() { [EOL]     ArrayContainer container = new ArrayContainer(); [EOL]     String[] array = (String[]) container.getValue(); [EOL]     JXPathContext context = JXPathContext.newContext(container); [EOL]     context.getVariables().declareVariable("list", container); [EOL]     assertXPathValueAndPointer(context, "/", array, "/"); [EOL]     assertXPathValueAndPointer(context, "/.[1]", "foo", "/.[1]"); [EOL]     assertXPathValueAndPointer(context, "/.[2]", "bar", "/.[2]"); [EOL]     assertXPathSetValue(context, "/.[1]", "baz"); [EOL]     assertEquals("Checking setValue(index)", "baz", array[0]); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] }
public void testAxisSelf() { [EOL]     assertXPathValue(context, "//price:sale/self::price:sale/saleEnds", "never"); [EOL]     assertXPathValueLenient(context, "//price:sale/self::x/saleEnds", null); [EOL] }
public void testAxisSelf() { [EOL]     assertXPathValue(context, "//price:sale/self::price:sale/saleEnds", "never"); [EOL]     assertXPathValueLenient(context, "//price:sale/self::x/saleEnds", null); [EOL] }
public void testAxisSelf() { [EOL]     assertXPathValue(context, "self::node() = /", Boolean.TRUE); [EOL]     assertXPathValue(context, "self::root = /", Boolean.TRUE); [EOL] }
public void testAxisSelf() { [EOL]     assertXPathValue(context, "//price:sale/self::price:sale/saleEnds", "never"); [EOL]     assertXPathValueLenient(context, "//price:sale/self::x/saleEnds", null); [EOL] }
public void testAxisSelf() { [EOL]     assertXPathValue(context, "//price:sale/self::price:sale/saleEnds", "never"); [EOL]     assertXPathValueLenient(context, "//price:sale/self::x/saleEnds", null); [EOL] }
public void testAxisSelf() { [EOL]     assertXPathValue(context, "//price:sale/self::price:sale/saleEnds", "never"); [EOL]     assertXPathValueLenient(context, "//price:sale/self::x/saleEnds", null); [EOL] }
public void testAxisSelf() { [EOL]     assertXPathValue(context, "//price:sale/self::price:sale/saleEnds", "never"); [EOL]     assertXPathValueLenient(context, "//price:sale/self::x/saleEnds", null); [EOL] }
public void testAxisSelf() { [EOL]     assertXPathValue(context, "//price:sale/self::price:sale/saleEnds", "never"); [EOL]     assertXPathValueLenient(context, "//price:sale/self::x/saleEnds", null); [EOL] }
public void testAxisSelf() { [EOL]     assertXPathValue(context, "//price:sale/self::price:sale/saleEnds", "never"); [EOL]     assertXPathValueLenient(context, "//price:sale/self::x/saleEnds", null); [EOL] }
public void testAxisSelf() { [EOL]     assertXPathValue(context, "//price:sale/self::price:sale/saleEnds", "never"); [EOL]     assertXPathValueLenient(context, "//price:sale/self::x/saleEnds", null); [EOL] }
public void testAxisSelf() { [EOL]     assertXPathValue(context, "//price:sale/self::price:sale/saleEnds", "never"); [EOL]     assertXPathValueLenient(context, "//price:sale/self::x/saleEnds", null); [EOL] }
public void testAxisSelf() { [EOL]     assertXPathValue(context, "//price:sale/self::price:sale/saleEnds", "never"); [EOL]     assertXPathValueLenient(context, "//price:sale/self::x/saleEnds", null); [EOL] }
public void testAxisSelf() { [EOL]     assertXPathValue(context, "//price:sale/self::price:sale/saleEnds", "never"); [EOL]     assertXPathValueLenient(context, "//price:sale/self::x/saleEnds", null); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] }
